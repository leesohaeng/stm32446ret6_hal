
KETI_Mobius_EndDiv.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000020c0  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08002284  08002284  00012284  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002314  08002314  00012314  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002318  08002318  00012318  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000088  20000000  0800231c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000002c0  20000088  080023a4  00020088  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000348  080023a4  00020348  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
  9 .debug_line   00005efe  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00016dd3  00000000  00000000  00025fb6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002e04  00000000  00000000  0003cd89  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000958  00000000  00000000  0003fb90  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000f28  00000000  00000000  000404e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000078a6  00000000  00000000  00041410  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003d25  00000000  00000000  00048cb6  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0004c9db  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001be8  00000000  00000000  0004ca58  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000088 	.word	0x20000088
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800226c 	.word	0x0800226c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000008c 	.word	0x2000008c
 8000200:	0800226c 	.word	0x0800226c

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000214:	f8df d034 	ldr.w	sp, [pc, #52]	; 800024c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000218:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800021a:	e003      	b.n	8000224 <LoopCopyDataInit>

0800021c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800021c:	4b0c      	ldr	r3, [pc, #48]	; (8000250 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800021e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000220:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000222:	3104      	adds	r1, #4

08000224 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000224:	480b      	ldr	r0, [pc, #44]	; (8000254 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000226:	4b0c      	ldr	r3, [pc, #48]	; (8000258 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000228:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800022a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800022c:	d3f6      	bcc.n	800021c <CopyDataInit>
  ldr  r2, =_sbss
 800022e:	4a0b      	ldr	r2, [pc, #44]	; (800025c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000230:	e002      	b.n	8000238 <LoopFillZerobss>

08000232 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000232:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000234:	f842 3b04 	str.w	r3, [r2], #4

08000238 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000238:	4b09      	ldr	r3, [pc, #36]	; (8000260 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800023a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800023c:	d3f9      	bcc.n	8000232 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800023e:	f000 f813 	bl	8000268 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000242:	f001 ff55 	bl	80020f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000246:	f001 fb6d 	bl	8001924 <main>
  bx  lr    
 800024a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800024c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000250:	0800231c 	.word	0x0800231c
  ldr  r0, =_sdata
 8000254:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000258:	20000088 	.word	0x20000088
  ldr  r2, =_sbss
 800025c:	20000088 	.word	0x20000088
  ldr  r3, = _ebss
 8000260:	20000348 	.word	0x20000348

08000264 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000264:	e7fe      	b.n	8000264 <ADC_IRQHandler>
	...

08000268 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000268:	490f      	ldr	r1, [pc, #60]	; (80002a8 <SystemInit+0x40>)
 800026a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800026e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000272:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000276:	4b0d      	ldr	r3, [pc, #52]	; (80002ac <SystemInit+0x44>)
 8000278:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800027a:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 800027c:	f042 0201 	orr.w	r2, r2, #1
 8000280:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8000282:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000284:	681a      	ldr	r2, [r3, #0]
 8000286:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800028a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800028e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000290:	4a07      	ldr	r2, [pc, #28]	; (80002b0 <SystemInit+0x48>)
 8000292:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000294:	681a      	ldr	r2, [r3, #0]
 8000296:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800029a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800029c:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800029e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80002a2:	608b      	str	r3, [r1, #8]
 80002a4:	4770      	bx	lr
 80002a6:	bf00      	nop
 80002a8:	e000ed00 	.word	0xe000ed00
 80002ac:	40023800 	.word	0x40023800
 80002b0:	24003010 	.word	0x24003010

080002b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80002b4:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 80002b6:	4b08      	ldr	r3, [pc, #32]	; (80002d8 <HAL_InitTick+0x24>)
{
 80002b8:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 80002ba:	6818      	ldr	r0, [r3, #0]
 80002bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002c0:	fbb0 f0f3 	udiv	r0, r0, r3
 80002c4:	f000 f892 	bl	80003ec <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 80002c8:	2200      	movs	r2, #0
 80002ca:	4621      	mov	r1, r4
 80002cc:	f04f 30ff 	mov.w	r0, #4294967295
 80002d0:	f000 f84c 	bl	800036c <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 80002d4:	2000      	movs	r0, #0
 80002d6:	bd10      	pop	{r4, pc}
 80002d8:	20000000 	.word	0x20000000

080002dc <HAL_Init>:
{
 80002dc:	b508      	push	{r3, lr}
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80002de:	4b0b      	ldr	r3, [pc, #44]	; (800030c <HAL_Init+0x30>)
 80002e0:	681a      	ldr	r2, [r3, #0]
 80002e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80002e6:	601a      	str	r2, [r3, #0]
   __HAL_FLASH_DATA_CACHE_ENABLE();
 80002e8:	681a      	ldr	r2, [r3, #0]
 80002ea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80002ee:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80002f0:	681a      	ldr	r2, [r3, #0]
 80002f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80002f6:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80002f8:	2003      	movs	r0, #3
 80002fa:	f000 f825 	bl	8000348 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80002fe:	2000      	movs	r0, #0
 8000300:	f7ff ffd8 	bl	80002b4 <HAL_InitTick>
  HAL_MspInit();
 8000304:	f001 fcd4 	bl	8001cb0 <HAL_MspInit>
}
 8000308:	2000      	movs	r0, #0
 800030a:	bd08      	pop	{r3, pc}
 800030c:	40023c00 	.word	0x40023c00

08000310 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000310:	4a02      	ldr	r2, [pc, #8]	; (800031c <HAL_IncTick+0xc>)
 8000312:	6813      	ldr	r3, [r2, #0]
 8000314:	3301      	adds	r3, #1
 8000316:	6013      	str	r3, [r2, #0]
 8000318:	4770      	bx	lr
 800031a:	bf00      	nop
 800031c:	200000b8 	.word	0x200000b8

08000320 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000320:	4b01      	ldr	r3, [pc, #4]	; (8000328 <HAL_GetTick+0x8>)
 8000322:	6818      	ldr	r0, [r3, #0]
}
 8000324:	4770      	bx	lr
 8000326:	bf00      	nop
 8000328:	200000b8 	.word	0x200000b8

0800032c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 800032c:	b513      	push	{r0, r1, r4, lr}
 800032e:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0U;
  tickstart = HAL_GetTick();
 8000330:	f7ff fff6 	bl	8000320 <HAL_GetTick>
 8000334:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8000336:	f7ff fff3 	bl	8000320 <HAL_GetTick>
 800033a:	9b01      	ldr	r3, [sp, #4]
 800033c:	1b00      	subs	r0, r0, r4
 800033e:	4298      	cmp	r0, r3
 8000340:	d3f9      	bcc.n	8000336 <HAL_Delay+0xa>
  {
  }
}
 8000342:	b002      	add	sp, #8
 8000344:	bd10      	pop	{r4, pc}
	...

08000348 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000348:	4a07      	ldr	r2, [pc, #28]	; (8000368 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800034a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800034c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000350:	041b      	lsls	r3, r3, #16
 8000352:	0c1b      	lsrs	r3, r3, #16
 8000354:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000358:	0200      	lsls	r0, r0, #8
 800035a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800035e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000362:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000364:	60d3      	str	r3, [r2, #12]
 8000366:	4770      	bx	lr
 8000368:	e000ed00 	.word	0xe000ed00

0800036c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800036c:	4b17      	ldr	r3, [pc, #92]	; (80003cc <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800036e:	b530      	push	{r4, r5, lr}
 8000370:	68dc      	ldr	r4, [r3, #12]
 8000372:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000376:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800037a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800037c:	2b04      	cmp	r3, #4
 800037e:	bf28      	it	cs
 8000380:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000382:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000384:	f04f 0501 	mov.w	r5, #1
 8000388:	fa05 f303 	lsl.w	r3, r5, r3
 800038c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000390:	bf8c      	ite	hi
 8000392:	3c03      	subhi	r4, #3
 8000394:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000396:	4019      	ands	r1, r3
 8000398:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800039a:	fa05 f404 	lsl.w	r4, r5, r4
 800039e:	3c01      	subs	r4, #1
 80003a0:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80003a2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003a4:	ea42 0201 	orr.w	r2, r2, r1
 80003a8:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003ac:	bfaf      	iteee	ge
 80003ae:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003b2:	f000 000f 	andlt.w	r0, r0, #15
 80003b6:	4b06      	ldrlt	r3, [pc, #24]	; (80003d0 <HAL_NVIC_SetPriority+0x64>)
 80003b8:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003ba:	bfa5      	ittet	ge
 80003bc:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80003c0:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003c2:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003c4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	bf00      	nop
 80003cc:	e000ed00 	.word	0xe000ed00
 80003d0:	e000ed14 	.word	0xe000ed14

080003d4 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80003d4:	0942      	lsrs	r2, r0, #5
 80003d6:	2301      	movs	r3, #1
 80003d8:	f000 001f 	and.w	r0, r0, #31
 80003dc:	fa03 f000 	lsl.w	r0, r3, r0
 80003e0:	4b01      	ldr	r3, [pc, #4]	; (80003e8 <HAL_NVIC_EnableIRQ+0x14>)
 80003e2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80003e6:	4770      	bx	lr
 80003e8:	e000e100 	.word	0xe000e100

080003ec <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003ec:	3801      	subs	r0, #1
 80003ee:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80003f2:	d20a      	bcs.n	800040a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003f4:	4b06      	ldr	r3, [pc, #24]	; (8000410 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003f6:	4a07      	ldr	r2, [pc, #28]	; (8000414 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003f8:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003fa:	21f0      	movs	r1, #240	; 0xf0
 80003fc:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000400:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000402:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000404:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000406:	601a      	str	r2, [r3, #0]
 8000408:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800040a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800040c:	4770      	bx	lr
 800040e:	bf00      	nop
 8000410:	e000e010 	.word	0xe000e010
 8000414:	e000ed00 	.word	0xe000ed00

08000418 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000418:	4b04      	ldr	r3, [pc, #16]	; (800042c <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800041a:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800041c:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800041e:	bf0c      	ite	eq
 8000420:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000424:	f022 0204 	bicne.w	r2, r2, #4
 8000428:	601a      	str	r2, [r3, #0]
 800042a:	4770      	bx	lr
 800042c:	e000e010 	.word	0xe000e010

08000430 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000430:	4770      	bx	lr

08000432 <HAL_SYSTICK_IRQHandler>:
{
 8000432:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000434:	f7ff fffc 	bl	8000430 <HAL_SYSTICK_Callback>
 8000438:	bd08      	pop	{r3, pc}

0800043a <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800043a:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800043e:	2b02      	cmp	r3, #2
 8000440:	d003      	beq.n	800044a <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000442:	2380      	movs	r3, #128	; 0x80
 8000444:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8000446:	2001      	movs	r0, #1
 8000448:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800044a:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 800044c:	2305      	movs	r3, #5
 800044e:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8000452:	6813      	ldr	r3, [r2, #0]
 8000454:	f023 0301 	bic.w	r3, r3, #1
 8000458:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800045a:	2000      	movs	r0, #0
}
 800045c:	4770      	bx	lr
	...

08000460 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000464:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000466:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000468:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800060c <HAL_GPIO_Init+0x1ac>
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800046c:	4a65      	ldr	r2, [pc, #404]	; (8000604 <HAL_GPIO_Init+0x1a4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800046e:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 8000610 <HAL_GPIO_Init+0x1b0>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000472:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000474:	2300      	movs	r3, #0
    ioposition = ((uint32_t)0x01U) << position;
 8000476:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800047a:	9c01      	ldr	r4, [sp, #4]
    ioposition = ((uint32_t)0x01U) << position;
 800047c:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000480:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8000484:	45b6      	cmp	lr, r6
 8000486:	f040 80aa 	bne.w	80005de <HAL_GPIO_Init+0x17e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800048a:	684c      	ldr	r4, [r1, #4]
 800048c:	f024 0710 	bic.w	r7, r4, #16
 8000490:	2f02      	cmp	r7, #2
 8000492:	d116      	bne.n	80004c2 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8000494:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000498:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 800049c:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80004a0:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 80004a4:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80004a8:	f04f 0c0f 	mov.w	ip, #15
 80004ac:	fa0c fc0b 	lsl.w	ip, ip, fp
 80004b0:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80004b4:	690d      	ldr	r5, [r1, #16]
 80004b6:	fa05 f50b 	lsl.w	r5, r5, fp
 80004ba:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 80004be:	f8ca 5020 	str.w	r5, [sl, #32]
 80004c2:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80004c6:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80004c8:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80004cc:	fa05 f50a 	lsl.w	r5, r5, sl
 80004d0:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80004d2:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80004d6:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80004da:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80004de:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80004e0:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80004e4:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 80004e6:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80004ea:	d811      	bhi.n	8000510 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 80004ec:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80004ee:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 80004f2:	68cf      	ldr	r7, [r1, #12]
 80004f4:	fa07 fc0a 	lsl.w	ip, r7, sl
 80004f8:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 80004fc:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80004fe:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000500:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000504:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000508:	409f      	lsls	r7, r3
 800050a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 800050e:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000510:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000512:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000514:	688f      	ldr	r7, [r1, #8]
 8000516:	fa07 f70a 	lsl.w	r7, r7, sl
 800051a:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 800051c:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800051e:	00e5      	lsls	r5, r4, #3
 8000520:	d55d      	bpl.n	80005de <HAL_GPIO_Init+0x17e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000522:	f04f 0b00 	mov.w	fp, #0
 8000526:	f8cd b00c 	str.w	fp, [sp, #12]
 800052a:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800052e:	4d36      	ldr	r5, [pc, #216]	; (8000608 <HAL_GPIO_Init+0x1a8>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000530:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000534:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000538:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 800053c:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000540:	9703      	str	r7, [sp, #12]
 8000542:	9f03      	ldr	r7, [sp, #12]
 8000544:	f023 0703 	bic.w	r7, r3, #3
 8000548:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 800054c:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000550:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000554:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000558:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800055c:	f04f 0e0f 	mov.w	lr, #15
 8000560:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000564:	42a8      	cmp	r0, r5
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000566:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800056a:	d03f      	beq.n	80005ec <HAL_GPIO_Init+0x18c>
 800056c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000570:	42a8      	cmp	r0, r5
 8000572:	d03d      	beq.n	80005f0 <HAL_GPIO_Init+0x190>
 8000574:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000578:	42a8      	cmp	r0, r5
 800057a:	d03b      	beq.n	80005f4 <HAL_GPIO_Init+0x194>
 800057c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000580:	42a8      	cmp	r0, r5
 8000582:	d039      	beq.n	80005f8 <HAL_GPIO_Init+0x198>
 8000584:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000588:	42a8      	cmp	r0, r5
 800058a:	d037      	beq.n	80005fc <HAL_GPIO_Init+0x19c>
 800058c:	4548      	cmp	r0, r9
 800058e:	d037      	beq.n	8000600 <HAL_GPIO_Init+0x1a0>
 8000590:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000594:	42a8      	cmp	r0, r5
 8000596:	bf14      	ite	ne
 8000598:	2507      	movne	r5, #7
 800059a:	2506      	moveq	r5, #6
 800059c:	fa05 f50c 	lsl.w	r5, r5, ip
 80005a0:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 80005a4:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 80005a6:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80005a8:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80005aa:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80005ae:	bf0c      	ite	eq
 80005b0:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80005b2:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 80005b4:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 80005b6:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80005b8:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80005bc:	bf0c      	ite	eq
 80005be:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80005c0:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 80005c2:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80005c4:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80005c6:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80005ca:	bf0c      	ite	eq
 80005cc:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80005ce:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 80005d0:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 80005d2:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80005d4:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80005d6:	bf54      	ite	pl
 80005d8:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 80005da:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 80005dc:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80005de:	3301      	adds	r3, #1
 80005e0:	2b10      	cmp	r3, #16
 80005e2:	f47f af48 	bne.w	8000476 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80005e6:	b005      	add	sp, #20
 80005e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80005ec:	465d      	mov	r5, fp
 80005ee:	e7d5      	b.n	800059c <HAL_GPIO_Init+0x13c>
 80005f0:	2501      	movs	r5, #1
 80005f2:	e7d3      	b.n	800059c <HAL_GPIO_Init+0x13c>
 80005f4:	2502      	movs	r5, #2
 80005f6:	e7d1      	b.n	800059c <HAL_GPIO_Init+0x13c>
 80005f8:	2503      	movs	r5, #3
 80005fa:	e7cf      	b.n	800059c <HAL_GPIO_Init+0x13c>
 80005fc:	2504      	movs	r5, #4
 80005fe:	e7cd      	b.n	800059c <HAL_GPIO_Init+0x13c>
 8000600:	2505      	movs	r5, #5
 8000602:	e7cb      	b.n	800059c <HAL_GPIO_Init+0x13c>
 8000604:	40013c00 	.word	0x40013c00
 8000608:	40020000 	.word	0x40020000
 800060c:	40023800 	.word	0x40023800
 8000610:	40021400 	.word	0x40021400

08000614 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000614:	b10a      	cbz	r2, 800061a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000616:	6181      	str	r1, [r0, #24]
 8000618:	4770      	bx	lr
 800061a:	0409      	lsls	r1, r1, #16
 800061c:	e7fb      	b.n	8000616 <HAL_GPIO_WritePin+0x2>

0800061e <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 800061e:	6943      	ldr	r3, [r0, #20]
 8000620:	4059      	eors	r1, r3
 8000622:	6141      	str	r1, [r0, #20]
 8000624:	4770      	bx	lr
	...

08000628 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8000628:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 800062a:	2300      	movs	r3, #0
 800062c:	9301      	str	r3, [sp, #4]
 800062e:	4b22      	ldr	r3, [pc, #136]	; (80006b8 <HAL_PWREx_EnableOverDrive+0x90>)
 8000630:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000632:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000636:	641a      	str	r2, [r3, #64]	; 0x40
 8000638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800063a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800063e:	9301      	str	r3, [sp, #4]
 8000640:	9b01      	ldr	r3, [sp, #4]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000642:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000646:	fa93 f3a3 	rbit	r3, r3
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800064a:	fab3 f383 	clz	r3, r3
 800064e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000652:	f503 3360 	add.w	r3, r3, #229376	; 0x38000
 8000656:	009b      	lsls	r3, r3, #2
 8000658:	2201      	movs	r2, #1
 800065a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800065c:	f7ff fe60 	bl	8000320 <HAL_GetTick>

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000660:	4c16      	ldr	r4, [pc, #88]	; (80006bc <HAL_PWREx_EnableOverDrive+0x94>)
  tickstart = HAL_GetTick();
 8000662:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000664:	6863      	ldr	r3, [r4, #4]
 8000666:	03da      	lsls	r2, r3, #15
 8000668:	d515      	bpl.n	8000696 <HAL_PWREx_EnableOverDrive+0x6e>
 800066a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800066e:	fa93 f3a3 	rbit	r3, r3
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000672:	fab3 f383 	clz	r3, r3
 8000676:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800067a:	f503 3360 	add.w	r3, r3, #229376	; 0x38000
 800067e:	009b      	lsls	r3, r3, #2
 8000680:	2201      	movs	r2, #1
 8000682:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000684:	f7ff fe4c 	bl	8000320 <HAL_GetTick>

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000688:	4c0c      	ldr	r4, [pc, #48]	; (80006bc <HAL_PWREx_EnableOverDrive+0x94>)
  tickstart = HAL_GetTick();
 800068a:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800068c:	6863      	ldr	r3, [r4, #4]
 800068e:	039b      	lsls	r3, r3, #14
 8000690:	d50a      	bpl.n	80006a8 <HAL_PWREx_EnableOverDrive+0x80>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8000692:	2000      	movs	r0, #0
 8000694:	e006      	b.n	80006a4 <HAL_PWREx_EnableOverDrive+0x7c>
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000696:	f7ff fe43 	bl	8000320 <HAL_GetTick>
 800069a:	1b40      	subs	r0, r0, r5
 800069c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80006a0:	d9e0      	bls.n	8000664 <HAL_PWREx_EnableOverDrive+0x3c>
      return HAL_TIMEOUT;
 80006a2:	2003      	movs	r0, #3
}
 80006a4:	b003      	add	sp, #12
 80006a6:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80006a8:	f7ff fe3a 	bl	8000320 <HAL_GetTick>
 80006ac:	1b40      	subs	r0, r0, r5
 80006ae:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80006b2:	d9eb      	bls.n	800068c <HAL_PWREx_EnableOverDrive+0x64>
 80006b4:	e7f5      	b.n	80006a2 <HAL_PWREx_EnableOverDrive+0x7a>
 80006b6:	bf00      	nop
 80006b8:	40023800 	.word	0x40023800
 80006bc:	40007000 	.word	0x40007000

080006c0 <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80006c0:	4b56      	ldr	r3, [pc, #344]	; (800081c <HAL_RCC_ClockConfig+0x15c>)
 80006c2:	681a      	ldr	r2, [r3, #0]
 80006c4:	f002 020f 	and.w	r2, r2, #15
 80006c8:	428a      	cmp	r2, r1
{
 80006ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80006ce:	4605      	mov	r5, r0
 80006d0:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80006d2:	d330      	bcc.n	8000736 <HAL_RCC_ClockConfig+0x76>
      return HAL_ERROR;
    }
  }
 
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80006d4:	682a      	ldr	r2, [r5, #0]
 80006d6:	0794      	lsls	r4, r2, #30
 80006d8:	d437      	bmi.n	800074a <HAL_RCC_ClockConfig+0x8a>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }
  
  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80006da:	07d0      	lsls	r0, r2, #31
 80006dc:	d43d      	bmi.n	800075a <HAL_RCC_ClockConfig+0x9a>
      }
    }
  }    
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80006de:	4b4f      	ldr	r3, [pc, #316]	; (800081c <HAL_RCC_ClockConfig+0x15c>)
 80006e0:	681a      	ldr	r2, [r3, #0]
 80006e2:	f002 020f 	and.w	r2, r2, #15
 80006e6:	4296      	cmp	r6, r2
 80006e8:	f0c0 8088 	bcc.w	80007fc <HAL_RCC_ClockConfig+0x13c>
      return HAL_ERROR;
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80006ec:	682a      	ldr	r2, [r5, #0]
 80006ee:	0751      	lsls	r1, r2, #29
 80006f0:	f100 808c 	bmi.w	800080c <HAL_RCC_ClockConfig+0x14c>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80006f4:	0713      	lsls	r3, r2, #28
 80006f6:	d507      	bpl.n	8000708 <HAL_RCC_ClockConfig+0x48>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80006f8:	4a49      	ldr	r2, [pc, #292]	; (8000820 <HAL_RCC_ClockConfig+0x160>)
 80006fa:	6929      	ldr	r1, [r5, #16]
 80006fc:	6893      	ldr	r3, [r2, #8]
 80006fe:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000702:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000706:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8000708:	f000 fa4e 	bl	8000ba8 <HAL_RCC_GetSysClockFreq>
 800070c:	4b44      	ldr	r3, [pc, #272]	; (8000820 <HAL_RCC_ClockConfig+0x160>)
 800070e:	22f0      	movs	r2, #240	; 0xf0
 8000710:	689b      	ldr	r3, [r3, #8]
 8000712:	fa92 f2a2 	rbit	r2, r2
 8000716:	fab2 f282 	clz	r2, r2
 800071a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800071e:	40d3      	lsrs	r3, r2
 8000720:	4a40      	ldr	r2, [pc, #256]	; (8000824 <HAL_RCC_ClockConfig+0x164>)
 8000722:	5cd3      	ldrb	r3, [r2, r3]
 8000724:	40d8      	lsrs	r0, r3
 8000726:	4b40      	ldr	r3, [pc, #256]	; (8000828 <HAL_RCC_ClockConfig+0x168>)
 8000728:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800072a:	2000      	movs	r0, #0
 800072c:	f7ff fdc2 	bl	80002b4 <HAL_InitTick>
  
  return HAL_OK;
 8000730:	2000      	movs	r0, #0
}
 8000732:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000736:	b2ca      	uxtb	r2, r1
 8000738:	701a      	strb	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	f003 030f 	and.w	r3, r3, #15
 8000740:	4299      	cmp	r1, r3
 8000742:	d0c7      	beq.n	80006d4 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8000744:	2001      	movs	r0, #1
 8000746:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800074a:	4935      	ldr	r1, [pc, #212]	; (8000820 <HAL_RCC_ClockConfig+0x160>)
 800074c:	68a8      	ldr	r0, [r5, #8]
 800074e:	688b      	ldr	r3, [r1, #8]
 8000750:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000754:	4303      	orrs	r3, r0
 8000756:	608b      	str	r3, [r1, #8]
 8000758:	e7bf      	b.n	80006da <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800075a:	686a      	ldr	r2, [r5, #4]
 800075c:	4b30      	ldr	r3, [pc, #192]	; (8000820 <HAL_RCC_ClockConfig+0x160>)
 800075e:	2a01      	cmp	r2, #1
 8000760:	d11e      	bne.n	80007a0 <HAL_RCC_ClockConfig+0xe0>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000768:	d0ec      	beq.n	8000744 <HAL_RCC_ClockConfig+0x84>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800076a:	4c2d      	ldr	r4, [pc, #180]	; (8000820 <HAL_RCC_ClockConfig+0x160>)
 800076c:	68a3      	ldr	r3, [r4, #8]
 800076e:	f023 0303 	bic.w	r3, r3, #3
 8000772:	4313      	orrs	r3, r2
 8000774:	60a3      	str	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8000776:	f7ff fdd3 	bl	8000320 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800077a:	686b      	ldr	r3, [r5, #4]
 800077c:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 800077e:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000780:	f241 3888 	movw	r8, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000784:	d116      	bne.n	80007b4 <HAL_RCC_ClockConfig+0xf4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000786:	68a3      	ldr	r3, [r4, #8]
 8000788:	f003 030c 	and.w	r3, r3, #12
 800078c:	2b04      	cmp	r3, #4
 800078e:	d0a6      	beq.n	80006de <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000790:	f7ff fdc6 	bl	8000320 <HAL_GetTick>
 8000794:	1bc0      	subs	r0, r0, r7
 8000796:	4540      	cmp	r0, r8
 8000798:	d9f5      	bls.n	8000786 <HAL_RCC_ClockConfig+0xc6>
          return HAL_TIMEOUT;
 800079a:	2003      	movs	r0, #3
 800079c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 80007a0:	1e91      	subs	r1, r2, #2
 80007a2:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80007a4:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 80007a6:	d802      	bhi.n	80007ae <HAL_RCC_ClockConfig+0xee>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80007a8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80007ac:	e7dc      	b.n	8000768 <HAL_RCC_ClockConfig+0xa8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80007ae:	f013 0f02 	tst.w	r3, #2
 80007b2:	e7d9      	b.n	8000768 <HAL_RCC_ClockConfig+0xa8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80007b4:	2b02      	cmp	r3, #2
 80007b6:	d10a      	bne.n	80007ce <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80007b8:	68a3      	ldr	r3, [r4, #8]
 80007ba:	f003 030c 	and.w	r3, r3, #12
 80007be:	2b08      	cmp	r3, #8
 80007c0:	d08d      	beq.n	80006de <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80007c2:	f7ff fdad 	bl	8000320 <HAL_GetTick>
 80007c6:	1bc0      	subs	r0, r0, r7
 80007c8:	4540      	cmp	r0, r8
 80007ca:	d9f5      	bls.n	80007b8 <HAL_RCC_ClockConfig+0xf8>
 80007cc:	e7e5      	b.n	800079a <HAL_RCC_ClockConfig+0xda>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 80007ce:	2b03      	cmp	r3, #3
 80007d0:	d10f      	bne.n	80007f2 <HAL_RCC_ClockConfig+0x132>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 80007d2:	68a3      	ldr	r3, [r4, #8]
 80007d4:	f003 030c 	and.w	r3, r3, #12
 80007d8:	2b0c      	cmp	r3, #12
 80007da:	d080      	beq.n	80006de <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80007dc:	f7ff fda0 	bl	8000320 <HAL_GetTick>
 80007e0:	1bc0      	subs	r0, r0, r7
 80007e2:	4540      	cmp	r0, r8
 80007e4:	d9f5      	bls.n	80007d2 <HAL_RCC_ClockConfig+0x112>
 80007e6:	e7d8      	b.n	800079a <HAL_RCC_ClockConfig+0xda>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80007e8:	f7ff fd9a 	bl	8000320 <HAL_GetTick>
 80007ec:	1bc0      	subs	r0, r0, r7
 80007ee:	4540      	cmp	r0, r8
 80007f0:	d8d3      	bhi.n	800079a <HAL_RCC_ClockConfig+0xda>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80007f2:	68a3      	ldr	r3, [r4, #8]
 80007f4:	f013 0f0c 	tst.w	r3, #12
 80007f8:	d1f6      	bne.n	80007e8 <HAL_RCC_ClockConfig+0x128>
 80007fa:	e770      	b.n	80006de <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80007fc:	b2f2      	uxtb	r2, r6
 80007fe:	701a      	strb	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	f003 030f 	and.w	r3, r3, #15
 8000806:	429e      	cmp	r6, r3
 8000808:	d19c      	bne.n	8000744 <HAL_RCC_ClockConfig+0x84>
 800080a:	e76f      	b.n	80006ec <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800080c:	4904      	ldr	r1, [pc, #16]	; (8000820 <HAL_RCC_ClockConfig+0x160>)
 800080e:	68e8      	ldr	r0, [r5, #12]
 8000810:	688b      	ldr	r3, [r1, #8]
 8000812:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000816:	4303      	orrs	r3, r0
 8000818:	608b      	str	r3, [r1, #8]
 800081a:	e76b      	b.n	80006f4 <HAL_RCC_ClockConfig+0x34>
 800081c:	40023c00 	.word	0x40023c00
 8000820:	40023800 	.word	0x40023800
 8000824:	08002284 	.word	0x08002284
 8000828:	20000000 	.word	0x20000000

0800082c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 800082c:	4b01      	ldr	r3, [pc, #4]	; (8000834 <HAL_RCC_GetHCLKFreq+0x8>)
 800082e:	6818      	ldr	r0, [r3, #0]
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop
 8000834:	20000000 	.word	0x20000000

08000838 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8000838:	4b08      	ldr	r3, [pc, #32]	; (800085c <HAL_RCC_GetPCLK1Freq+0x24>)
 800083a:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 800083e:	689b      	ldr	r3, [r3, #8]
 8000840:	fa92 f2a2 	rbit	r2, r2
 8000844:	fab2 f282 	clz	r2, r2
 8000848:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800084c:	40d3      	lsrs	r3, r2
 800084e:	4a04      	ldr	r2, [pc, #16]	; (8000860 <HAL_RCC_GetPCLK1Freq+0x28>)
 8000850:	5cd3      	ldrb	r3, [r2, r3]
 8000852:	4a04      	ldr	r2, [pc, #16]	; (8000864 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8000854:	6810      	ldr	r0, [r2, #0]
}
 8000856:	40d8      	lsrs	r0, r3
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	40023800 	.word	0x40023800
 8000860:	08002284 	.word	0x08002284
 8000864:	20000000 	.word	0x20000000

08000868 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8000868:	4b08      	ldr	r3, [pc, #32]	; (800088c <HAL_RCC_GetPCLK2Freq+0x24>)
 800086a:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 800086e:	689b      	ldr	r3, [r3, #8]
 8000870:	fa92 f2a2 	rbit	r2, r2
 8000874:	fab2 f282 	clz	r2, r2
 8000878:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800087c:	40d3      	lsrs	r3, r2
 800087e:	4a04      	ldr	r2, [pc, #16]	; (8000890 <HAL_RCC_GetPCLK2Freq+0x28>)
 8000880:	5cd3      	ldrb	r3, [r2, r3]
 8000882:	4a04      	ldr	r2, [pc, #16]	; (8000894 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8000884:	6810      	ldr	r0, [r2, #0]
} 
 8000886:	40d8      	lsrs	r0, r3
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	40023800 	.word	0x40023800
 8000890:	08002284 	.word	0x08002284
 8000894:	20000000 	.word	0x20000000

08000898 <HAL_RCC_OscConfig>:
  uint32_t tickstart = 0U;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000898:	6803      	ldr	r3, [r0, #0]
{
 800089a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800089c:	07de      	lsls	r6, r3, #31
{
 800089e:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80008a0:	d438      	bmi.n	8000914 <HAL_RCC_OscConfig+0x7c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80008a2:	6823      	ldr	r3, [r4, #0]
 80008a4:	079d      	lsls	r5, r3, #30
 80008a6:	d476      	bmi.n	8000996 <HAL_RCC_OscConfig+0xfe>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80008a8:	6823      	ldr	r3, [r4, #0]
 80008aa:	071e      	lsls	r6, r3, #28
 80008ac:	f100 80cb 	bmi.w	8000a46 <HAL_RCC_OscConfig+0x1ae>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80008b0:	6823      	ldr	r3, [r4, #0]
 80008b2:	075d      	lsls	r5, r3, #29
 80008b4:	d528      	bpl.n	8000908 <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	9301      	str	r3, [sp, #4]
 80008ba:	4bad      	ldr	r3, [pc, #692]	; (8000b70 <HAL_RCC_OscConfig+0x2d8>)
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80008bc:	4dad      	ldr	r5, [pc, #692]	; (8000b74 <HAL_RCC_OscConfig+0x2dc>)
    __HAL_RCC_PWR_CLK_ENABLE();
 80008be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008c0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80008c4:	641a      	str	r2, [r3, #64]	; 0x40
 80008c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008cc:	9301      	str	r3, [sp, #4]
 80008ce:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 80008d0:	682b      	ldr	r3, [r5, #0]
 80008d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008d6:	602b      	str	r3, [r5, #0]
    
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80008d8:	f7ff fd22 	bl	8000320 <HAL_GetTick>
 80008dc:	4606      	mov	r6, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80008de:	682b      	ldr	r3, [r5, #0]
 80008e0:	05da      	lsls	r2, r3, #23
 80008e2:	f140 80d2 	bpl.w	8000a8a <HAL_RCC_OscConfig+0x1f2>
        return HAL_TIMEOUT;
      }
    }
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80008e6:	4ba4      	ldr	r3, [pc, #656]	; (8000b78 <HAL_RCC_OscConfig+0x2e0>)
 80008e8:	7a22      	ldrb	r2, [r4, #8]
 80008ea:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80008ec:	68a3      	ldr	r3, [r4, #8]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	f000 80d9 	beq.w	8000aa6 <HAL_RCC_OscConfig+0x20e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80008f4:	f7ff fd14 	bl	8000320 <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80008f8:	4d9d      	ldr	r5, [pc, #628]	; (8000b70 <HAL_RCC_OscConfig+0x2d8>)
      tickstart = HAL_GetTick();
 80008fa:	4606      	mov	r6, r0
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80008fc:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000900:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000902:	079b      	lsls	r3, r3, #30
 8000904:	f140 80c8 	bpl.w	8000a98 <HAL_RCC_OscConfig+0x200>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000908:	69a2      	ldr	r2, [r4, #24]
 800090a:	2a00      	cmp	r2, #0
 800090c:	f040 80db 	bne.w	8000ac6 <HAL_RCC_OscConfig+0x22e>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8000910:	2000      	movs	r0, #0
 8000912:	e01e      	b.n	8000952 <HAL_RCC_OscConfig+0xba>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8000914:	4b96      	ldr	r3, [pc, #600]	; (8000b70 <HAL_RCC_OscConfig+0x2d8>)
 8000916:	689a      	ldr	r2, [r3, #8]
 8000918:	f002 020c 	and.w	r2, r2, #12
 800091c:	2a04      	cmp	r2, #4
 800091e:	d010      	beq.n	8000942 <HAL_RCC_OscConfig+0xaa>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8000920:	689a      	ldr	r2, [r3, #8]
 8000922:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8000926:	2a08      	cmp	r2, #8
 8000928:	d102      	bne.n	8000930 <HAL_RCC_OscConfig+0x98>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800092a:	685b      	ldr	r3, [r3, #4]
 800092c:	0258      	lsls	r0, r3, #9
 800092e:	d408      	bmi.n	8000942 <HAL_RCC_OscConfig+0xaa>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000930:	4a8f      	ldr	r2, [pc, #572]	; (8000b70 <HAL_RCC_OscConfig+0x2d8>)
 8000932:	6893      	ldr	r3, [r2, #8]
 8000934:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8000938:	2b0c      	cmp	r3, #12
 800093a:	d10c      	bne.n	8000956 <HAL_RCC_OscConfig+0xbe>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800093c:	6853      	ldr	r3, [r2, #4]
 800093e:	0259      	lsls	r1, r3, #9
 8000940:	d509      	bpl.n	8000956 <HAL_RCC_OscConfig+0xbe>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000942:	4b8b      	ldr	r3, [pc, #556]	; (8000b70 <HAL_RCC_OscConfig+0x2d8>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	039a      	lsls	r2, r3, #14
 8000948:	d5ab      	bpl.n	80008a2 <HAL_RCC_OscConfig+0xa>
 800094a:	6863      	ldr	r3, [r4, #4]
 800094c:	2b00      	cmp	r3, #0
 800094e:	d1a8      	bne.n	80008a2 <HAL_RCC_OscConfig+0xa>
        return HAL_ERROR;
 8000950:	2001      	movs	r0, #1
}
 8000952:	b003      	add	sp, #12
 8000954:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000956:	4b89      	ldr	r3, [pc, #548]	; (8000b7c <HAL_RCC_OscConfig+0x2e4>)
 8000958:	7922      	ldrb	r2, [r4, #4]
 800095a:	701a      	strb	r2, [r3, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800095c:	6863      	ldr	r3, [r4, #4]
 800095e:	b16b      	cbz	r3, 800097c <HAL_RCC_OscConfig+0xe4>
        tickstart = HAL_GetTick();
 8000960:	f7ff fcde 	bl	8000320 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000964:	4d82      	ldr	r5, [pc, #520]	; (8000b70 <HAL_RCC_OscConfig+0x2d8>)
        tickstart = HAL_GetTick();
 8000966:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000968:	682b      	ldr	r3, [r5, #0]
 800096a:	039b      	lsls	r3, r3, #14
 800096c:	d499      	bmi.n	80008a2 <HAL_RCC_OscConfig+0xa>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800096e:	f7ff fcd7 	bl	8000320 <HAL_GetTick>
 8000972:	1b80      	subs	r0, r0, r6
 8000974:	2864      	cmp	r0, #100	; 0x64
 8000976:	d9f7      	bls.n	8000968 <HAL_RCC_OscConfig+0xd0>
            return HAL_TIMEOUT;
 8000978:	2003      	movs	r0, #3
 800097a:	e7ea      	b.n	8000952 <HAL_RCC_OscConfig+0xba>
        tickstart = HAL_GetTick();
 800097c:	f7ff fcd0 	bl	8000320 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000980:	4d7b      	ldr	r5, [pc, #492]	; (8000b70 <HAL_RCC_OscConfig+0x2d8>)
        tickstart = HAL_GetTick();
 8000982:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000984:	682b      	ldr	r3, [r5, #0]
 8000986:	039f      	lsls	r7, r3, #14
 8000988:	d58b      	bpl.n	80008a2 <HAL_RCC_OscConfig+0xa>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800098a:	f7ff fcc9 	bl	8000320 <HAL_GetTick>
 800098e:	1b80      	subs	r0, r0, r6
 8000990:	2864      	cmp	r0, #100	; 0x64
 8000992:	d9f7      	bls.n	8000984 <HAL_RCC_OscConfig+0xec>
 8000994:	e7f0      	b.n	8000978 <HAL_RCC_OscConfig+0xe0>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8000996:	4b76      	ldr	r3, [pc, #472]	; (8000b70 <HAL_RCC_OscConfig+0x2d8>)
 8000998:	689a      	ldr	r2, [r3, #8]
 800099a:	f012 0f0c 	tst.w	r2, #12
 800099e:	d010      	beq.n	80009c2 <HAL_RCC_OscConfig+0x12a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80009a0:	689a      	ldr	r2, [r3, #8]
 80009a2:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80009a6:	2a08      	cmp	r2, #8
 80009a8:	d102      	bne.n	80009b0 <HAL_RCC_OscConfig+0x118>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80009aa:	685b      	ldr	r3, [r3, #4]
 80009ac:	0258      	lsls	r0, r3, #9
 80009ae:	d508      	bpl.n	80009c2 <HAL_RCC_OscConfig+0x12a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80009b0:	4a6f      	ldr	r2, [pc, #444]	; (8000b70 <HAL_RCC_OscConfig+0x2d8>)
 80009b2:	6893      	ldr	r3, [r2, #8]
 80009b4:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80009b8:	2b0c      	cmp	r3, #12
 80009ba:	d116      	bne.n	80009ea <HAL_RCC_OscConfig+0x152>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80009bc:	6853      	ldr	r3, [r2, #4]
 80009be:	0259      	lsls	r1, r3, #9
 80009c0:	d413      	bmi.n	80009ea <HAL_RCC_OscConfig+0x152>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80009c2:	4b6b      	ldr	r3, [pc, #428]	; (8000b70 <HAL_RCC_OscConfig+0x2d8>)
 80009c4:	681a      	ldr	r2, [r3, #0]
 80009c6:	0792      	lsls	r2, r2, #30
 80009c8:	d502      	bpl.n	80009d0 <HAL_RCC_OscConfig+0x138>
 80009ca:	68e2      	ldr	r2, [r4, #12]
 80009cc:	2a01      	cmp	r2, #1
 80009ce:	d1bf      	bne.n	8000950 <HAL_RCC_OscConfig+0xb8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009d0:	6818      	ldr	r0, [r3, #0]
 80009d2:	22f8      	movs	r2, #248	; 0xf8
 80009d4:	fa92 f2a2 	rbit	r2, r2
 80009d8:	fab2 f182 	clz	r1, r2
 80009dc:	6922      	ldr	r2, [r4, #16]
 80009de:	408a      	lsls	r2, r1
 80009e0:	f020 01f8 	bic.w	r1, r0, #248	; 0xf8
 80009e4:	430a      	orrs	r2, r1
 80009e6:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80009e8:	e75e      	b.n	80008a8 <HAL_RCC_OscConfig+0x10>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80009ea:	68e2      	ldr	r2, [r4, #12]
 80009ec:	4b64      	ldr	r3, [pc, #400]	; (8000b80 <HAL_RCC_OscConfig+0x2e8>)
 80009ee:	b1da      	cbz	r2, 8000a28 <HAL_RCC_OscConfig+0x190>
        __HAL_RCC_HSI_ENABLE();
 80009f0:	2201      	movs	r2, #1
 80009f2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80009f4:	f7ff fc94 	bl	8000320 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009f8:	4d5d      	ldr	r5, [pc, #372]	; (8000b70 <HAL_RCC_OscConfig+0x2d8>)
        tickstart = HAL_GetTick();
 80009fa:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009fc:	682b      	ldr	r3, [r5, #0]
 80009fe:	079b      	lsls	r3, r3, #30
 8000a00:	d50c      	bpl.n	8000a1c <HAL_RCC_OscConfig+0x184>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a02:	6829      	ldr	r1, [r5, #0]
 8000a04:	23f8      	movs	r3, #248	; 0xf8
 8000a06:	fa93 f3a3 	rbit	r3, r3
 8000a0a:	fab3 f283 	clz	r2, r3
 8000a0e:	6923      	ldr	r3, [r4, #16]
 8000a10:	4093      	lsls	r3, r2
 8000a12:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 8000a16:	4313      	orrs	r3, r2
 8000a18:	602b      	str	r3, [r5, #0]
 8000a1a:	e745      	b.n	80008a8 <HAL_RCC_OscConfig+0x10>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a1c:	f7ff fc80 	bl	8000320 <HAL_GetTick>
 8000a20:	1b80      	subs	r0, r0, r6
 8000a22:	2802      	cmp	r0, #2
 8000a24:	d9ea      	bls.n	80009fc <HAL_RCC_OscConfig+0x164>
 8000a26:	e7a7      	b.n	8000978 <HAL_RCC_OscConfig+0xe0>
        __HAL_RCC_HSI_DISABLE();
 8000a28:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a2a:	f7ff fc79 	bl	8000320 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a2e:	4d50      	ldr	r5, [pc, #320]	; (8000b70 <HAL_RCC_OscConfig+0x2d8>)
        tickstart = HAL_GetTick();
 8000a30:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a32:	682b      	ldr	r3, [r5, #0]
 8000a34:	079f      	lsls	r7, r3, #30
 8000a36:	f57f af37 	bpl.w	80008a8 <HAL_RCC_OscConfig+0x10>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a3a:	f7ff fc71 	bl	8000320 <HAL_GetTick>
 8000a3e:	1b80      	subs	r0, r0, r6
 8000a40:	2802      	cmp	r0, #2
 8000a42:	d9f6      	bls.n	8000a32 <HAL_RCC_OscConfig+0x19a>
 8000a44:	e798      	b.n	8000978 <HAL_RCC_OscConfig+0xe0>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000a46:	6962      	ldr	r2, [r4, #20]
 8000a48:	4b4e      	ldr	r3, [pc, #312]	; (8000b84 <HAL_RCC_OscConfig+0x2ec>)
 8000a4a:	b17a      	cbz	r2, 8000a6c <HAL_RCC_OscConfig+0x1d4>
      __HAL_RCC_LSI_ENABLE();
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000a50:	f7ff fc66 	bl	8000320 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a54:	4d46      	ldr	r5, [pc, #280]	; (8000b70 <HAL_RCC_OscConfig+0x2d8>)
      tickstart = HAL_GetTick();
 8000a56:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a58:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000a5a:	0798      	lsls	r0, r3, #30
 8000a5c:	f53f af28 	bmi.w	80008b0 <HAL_RCC_OscConfig+0x18>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a60:	f7ff fc5e 	bl	8000320 <HAL_GetTick>
 8000a64:	1b80      	subs	r0, r0, r6
 8000a66:	2802      	cmp	r0, #2
 8000a68:	d9f6      	bls.n	8000a58 <HAL_RCC_OscConfig+0x1c0>
 8000a6a:	e785      	b.n	8000978 <HAL_RCC_OscConfig+0xe0>
      __HAL_RCC_LSI_DISABLE();
 8000a6c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000a6e:	f7ff fc57 	bl	8000320 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a72:	4d3f      	ldr	r5, [pc, #252]	; (8000b70 <HAL_RCC_OscConfig+0x2d8>)
      tickstart = HAL_GetTick();
 8000a74:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a76:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000a78:	0799      	lsls	r1, r3, #30
 8000a7a:	f57f af19 	bpl.w	80008b0 <HAL_RCC_OscConfig+0x18>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a7e:	f7ff fc4f 	bl	8000320 <HAL_GetTick>
 8000a82:	1b80      	subs	r0, r0, r6
 8000a84:	2802      	cmp	r0, #2
 8000a86:	d9f6      	bls.n	8000a76 <HAL_RCC_OscConfig+0x1de>
 8000a88:	e776      	b.n	8000978 <HAL_RCC_OscConfig+0xe0>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8000a8a:	f7ff fc49 	bl	8000320 <HAL_GetTick>
 8000a8e:	1b80      	subs	r0, r0, r6
 8000a90:	2802      	cmp	r0, #2
 8000a92:	f67f af24 	bls.w	80008de <HAL_RCC_OscConfig+0x46>
 8000a96:	e76f      	b.n	8000978 <HAL_RCC_OscConfig+0xe0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a98:	f7ff fc42 	bl	8000320 <HAL_GetTick>
 8000a9c:	1b80      	subs	r0, r0, r6
 8000a9e:	42b8      	cmp	r0, r7
 8000aa0:	f67f af2e 	bls.w	8000900 <HAL_RCC_OscConfig+0x68>
 8000aa4:	e768      	b.n	8000978 <HAL_RCC_OscConfig+0xe0>
      tickstart = HAL_GetTick();
 8000aa6:	f7ff fc3b 	bl	8000320 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000aaa:	4d31      	ldr	r5, [pc, #196]	; (8000b70 <HAL_RCC_OscConfig+0x2d8>)
      tickstart = HAL_GetTick();
 8000aac:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000aae:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ab2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000ab4:	0798      	lsls	r0, r3, #30
 8000ab6:	f57f af27 	bpl.w	8000908 <HAL_RCC_OscConfig+0x70>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000aba:	f7ff fc31 	bl	8000320 <HAL_GetTick>
 8000abe:	1b80      	subs	r0, r0, r6
 8000ac0:	42b8      	cmp	r0, r7
 8000ac2:	d9f6      	bls.n	8000ab2 <HAL_RCC_OscConfig+0x21a>
 8000ac4:	e758      	b.n	8000978 <HAL_RCC_OscConfig+0xe0>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000ac6:	4d2a      	ldr	r5, [pc, #168]	; (8000b70 <HAL_RCC_OscConfig+0x2d8>)
 8000ac8:	68ab      	ldr	r3, [r5, #8]
 8000aca:	f003 030c 	and.w	r3, r3, #12
 8000ace:	2b08      	cmp	r3, #8
 8000ad0:	f43f af3e 	beq.w	8000950 <HAL_RCC_OscConfig+0xb8>
 8000ad4:	4e2c      	ldr	r6, [pc, #176]	; (8000b88 <HAL_RCC_OscConfig+0x2f0>)
 8000ad6:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ad8:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000ada:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000adc:	d156      	bne.n	8000b8c <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8000ade:	f7ff fc1f 	bl	8000320 <HAL_GetTick>
 8000ae2:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ae4:	682b      	ldr	r3, [r5, #0]
 8000ae6:	0199      	lsls	r1, r3, #6
 8000ae8:	d43c      	bmi.n	8000b64 <HAL_RCC_OscConfig+0x2cc>
 8000aea:	f647 7ec0 	movw	lr, #32704	; 0x7fc0
 8000aee:	fa9e feae 	rbit	lr, lr
 8000af2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000af6:	fabe fe8e 	clz	lr, lr
 8000afa:	fa92 f2a2 	rbit	r2, r2
 8000afe:	f04f 6070 	mov.w	r0, #251658240	; 0xf000000
 8000b02:	fab2 f782 	clz	r7, r2
 8000b06:	fa90 f0a0 	rbit	r0, r0
 8000b0a:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
 8000b0e:	fab0 f080 	clz	r0, r0
 8000b12:	fa91 f1a1 	rbit	r1, r1
 8000b16:	6a22      	ldr	r2, [r4, #32]
 8000b18:	69e3      	ldr	r3, [r4, #28]
 8000b1a:	4313      	orrs	r3, r2
 8000b1c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000b1e:	fa02 f20e 	lsl.w	r2, r2, lr
 8000b22:	4313      	orrs	r3, r2
 8000b24:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000b26:	0852      	lsrs	r2, r2, #1
 8000b28:	3a01      	subs	r2, #1
 8000b2a:	40ba      	lsls	r2, r7
 8000b2c:	4313      	orrs	r3, r2
 8000b2e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000b30:	fa02 f000 	lsl.w	r0, r2, r0
 8000b34:	6b22      	ldr	r2, [r4, #48]	; 0x30
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000b36:	4c0e      	ldr	r4, [pc, #56]	; (8000b70 <HAL_RCC_OscConfig+0x2d8>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000b38:	fab1 f181 	clz	r1, r1
 8000b3c:	4303      	orrs	r3, r0
 8000b3e:	fa02 f101 	lsl.w	r1, r2, r1
 8000b42:	430b      	orrs	r3, r1
 8000b44:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000b46:	2301      	movs	r3, #1
 8000b48:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000b4a:	f7ff fbe9 	bl	8000320 <HAL_GetTick>
 8000b4e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000b50:	6823      	ldr	r3, [r4, #0]
 8000b52:	019a      	lsls	r2, r3, #6
 8000b54:	f53f aedc 	bmi.w	8000910 <HAL_RCC_OscConfig+0x78>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b58:	f7ff fbe2 	bl	8000320 <HAL_GetTick>
 8000b5c:	1b40      	subs	r0, r0, r5
 8000b5e:	2802      	cmp	r0, #2
 8000b60:	d9f6      	bls.n	8000b50 <HAL_RCC_OscConfig+0x2b8>
 8000b62:	e709      	b.n	8000978 <HAL_RCC_OscConfig+0xe0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b64:	f7ff fbdc 	bl	8000320 <HAL_GetTick>
 8000b68:	1bc0      	subs	r0, r0, r7
 8000b6a:	2802      	cmp	r0, #2
 8000b6c:	d9ba      	bls.n	8000ae4 <HAL_RCC_OscConfig+0x24c>
 8000b6e:	e703      	b.n	8000978 <HAL_RCC_OscConfig+0xe0>
 8000b70:	40023800 	.word	0x40023800
 8000b74:	40007000 	.word	0x40007000
 8000b78:	40023870 	.word	0x40023870
 8000b7c:	40023802 	.word	0x40023802
 8000b80:	42470000 	.word	0x42470000
 8000b84:	42470e80 	.word	0x42470e80
 8000b88:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8000b8c:	f7ff fbc8 	bl	8000320 <HAL_GetTick>
 8000b90:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000b92:	682b      	ldr	r3, [r5, #0]
 8000b94:	019b      	lsls	r3, r3, #6
 8000b96:	f57f aebb 	bpl.w	8000910 <HAL_RCC_OscConfig+0x78>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b9a:	f7ff fbc1 	bl	8000320 <HAL_GetTick>
 8000b9e:	1b00      	subs	r0, r0, r4
 8000ba0:	2802      	cmp	r0, #2
 8000ba2:	d9f6      	bls.n	8000b92 <HAL_RCC_OscConfig+0x2fa>
 8000ba4:	e6e8      	b.n	8000978 <HAL_RCC_OscConfig+0xe0>
 8000ba6:	bf00      	nop

08000ba8 <HAL_RCC_GetSysClockFreq>:
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000ba8:	4b2b      	ldr	r3, [pc, #172]	; (8000c58 <HAL_RCC_GetSysClockFreq+0xb0>)
 8000baa:	689a      	ldr	r2, [r3, #8]
 8000bac:	f002 020c 	and.w	r2, r2, #12
 8000bb0:	2a08      	cmp	r2, #8
 8000bb2:	d007      	beq.n	8000bc4 <HAL_RCC_GetSysClockFreq+0x1c>
 8000bb4:	2a0c      	cmp	r2, #12
 8000bb6:	d02c      	beq.n	8000c12 <HAL_RCC_GetSysClockFreq+0x6a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000bb8:	4b28      	ldr	r3, [pc, #160]	; (8000c5c <HAL_RCC_GetSysClockFreq+0xb4>)
 8000bba:	4829      	ldr	r0, [pc, #164]	; (8000c60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000bbc:	2a04      	cmp	r2, #4
 8000bbe:	bf18      	it	ne
 8000bc0:	4618      	movne	r0, r3
 8000bc2:	4770      	bx	lr
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000bc4:	685a      	ldr	r2, [r3, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000bc6:	6859      	ldr	r1, [r3, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8000bc8:	685b      	ldr	r3, [r3, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000bca:	f411 0f80 	tst.w	r1, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000bce:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000bd2:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8000bd6:	fa91 f0a1 	rbit	r0, r1
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8000bda:	fab0 f080 	clz	r0, r0
 8000bde:	ea03 0301 	and.w	r3, r3, r1
 8000be2:	fa23 f300 	lsr.w	r3, r3, r0
 8000be6:	bf14      	ite	ne
 8000be8:	481d      	ldrne	r0, [pc, #116]	; (8000c60 <HAL_RCC_GetSysClockFreq+0xb8>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8000bea:	481c      	ldreq	r0, [pc, #112]	; (8000c5c <HAL_RCC_GetSysClockFreq+0xb4>)
 8000bec:	fbb0 f0f2 	udiv	r0, r0, r2
 8000bf0:	4358      	muls	r0, r3
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 8000bf2:	4b19      	ldr	r3, [pc, #100]	; (8000c58 <HAL_RCC_GetSysClockFreq+0xb0>)
 8000bf4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000bf8:	685b      	ldr	r3, [r3, #4]
 8000bfa:	fa92 f2a2 	rbit	r2, r2
 8000bfe:	fab2 f282 	clz	r2, r2
 8000c02:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000c06:	40d3      	lsrs	r3, r2
 8000c08:	3301      	adds	r3, #1
 8000c0a:	005b      	lsls	r3, r3, #1
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> POSITION_VAL(RCC_PLLCFGR_PLLR));
      
      sysclockfreq = pllvco/pllr;
 8000c0c:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000c10:	4770      	bx	lr
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000c12:	685a      	ldr	r2, [r3, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000c14:	6859      	ldr	r1, [r3, #4]
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8000c16:	685b      	ldr	r3, [r3, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000c18:	f411 0f80 	tst.w	r1, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000c1c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000c20:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8000c24:	fa91 f0a1 	rbit	r0, r1
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8000c28:	fab0 f080 	clz	r0, r0
 8000c2c:	ea03 0301 	and.w	r3, r3, r1
 8000c30:	fa23 f300 	lsr.w	r3, r3, r0
 8000c34:	bf14      	ite	ne
 8000c36:	480a      	ldrne	r0, [pc, #40]	; (8000c60 <HAL_RCC_GetSysClockFreq+0xb8>)
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8000c38:	4808      	ldreq	r0, [pc, #32]	; (8000c5c <HAL_RCC_GetSysClockFreq+0xb4>)
 8000c3a:	fbb0 f0f2 	udiv	r0, r0, r2
 8000c3e:	4358      	muls	r0, r3
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> POSITION_VAL(RCC_PLLCFGR_PLLR));
 8000c40:	4b05      	ldr	r3, [pc, #20]	; (8000c58 <HAL_RCC_GetSysClockFreq+0xb0>)
 8000c42:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	fa92 f2a2 	rbit	r2, r2
 8000c4c:	fab2 f282 	clz	r2, r2
 8000c50:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8000c54:	40d3      	lsrs	r3, r2
 8000c56:	e7d9      	b.n	8000c0c <HAL_RCC_GetSysClockFreq+0x64>
 8000c58:	40023800 	.word	0x40023800
 8000c5c:	00f42400 	.word	0x00f42400
 8000c60:	007a1200 	.word	0x007a1200

08000c64 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000c64:	6803      	ldr	r3, [r0, #0]
 8000c66:	68da      	ldr	r2, [r3, #12]
 8000c68:	f042 0201 	orr.w	r2, r2, #1
 8000c6c:	60da      	str	r2, [r3, #12]
      
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8000c6e:	681a      	ldr	r2, [r3, #0]
 8000c70:	f042 0201 	orr.w	r2, r2, #1
 8000c74:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
}
 8000c76:	2000      	movs	r0, #0
 8000c78:	4770      	bx	lr

08000c7a <HAL_TIM_ConfigClockSource>:
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
  uint32_t tmpsmcr = 0U;
    
  /* Process Locked */
  __HAL_LOCK(htim);
 8000c7a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8000c7e:	2b01      	cmp	r3, #1
{
 8000c80:	b570      	push	{r4, r5, r6, lr}
 8000c82:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8000c86:	d01c      	beq.n	8000cc2 <HAL_TIM_ConfigClockSource+0x48>
  
  htim->State = HAL_TIM_STATE_BUSY;
 8000c88:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
  
  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8000c8c:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 8000c8e:	2201      	movs	r2, #1
 8000c90:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  tmpsmcr = htim->Instance->SMCR;
 8000c94:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000c96:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8000c9a:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8000c9e:	609a      	str	r2, [r3, #8]
  
  switch (sClockSourceConfig->ClockSource)
 8000ca0:	680a      	ldr	r2, [r1, #0]
 8000ca2:	2a40      	cmp	r2, #64	; 0x40
 8000ca4:	d079      	beq.n	8000d9a <HAL_TIM_ConfigClockSource+0x120>
 8000ca6:	d819      	bhi.n	8000cdc <HAL_TIM_ConfigClockSource+0x62>
 8000ca8:	2a10      	cmp	r2, #16
 8000caa:	f000 8093 	beq.w	8000dd4 <HAL_TIM_ConfigClockSource+0x15a>
 8000cae:	d80a      	bhi.n	8000cc6 <HAL_TIM_ConfigClockSource+0x4c>
 8000cb0:	2a00      	cmp	r2, #0
 8000cb2:	f000 8089 	beq.w	8000dc8 <HAL_TIM_ConfigClockSource+0x14e>
    break;
    
    default:
    break;    
  }
  htim->State = HAL_TIM_STATE_READY;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 8000cc2:	4618      	mov	r0, r3
  
  return HAL_OK;
}
 8000cc4:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8000cc6:	2a20      	cmp	r2, #32
 8000cc8:	f000 808a 	beq.w	8000de0 <HAL_TIM_ConfigClockSource+0x166>
 8000ccc:	2a30      	cmp	r2, #48	; 0x30
 8000cce:	d1f2      	bne.n	8000cb6 <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0U;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8000cd0:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8000cd2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8000cd6:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 8000cda:	e036      	b.n	8000d4a <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8000cdc:	2a70      	cmp	r2, #112	; 0x70
 8000cde:	d036      	beq.n	8000d4e <HAL_TIM_ConfigClockSource+0xd4>
 8000ce0:	d81b      	bhi.n	8000d1a <HAL_TIM_ConfigClockSource+0xa0>
 8000ce2:	2a50      	cmp	r2, #80	; 0x50
 8000ce4:	d042      	beq.n	8000d6c <HAL_TIM_ConfigClockSource+0xf2>
 8000ce6:	2a60      	cmp	r2, #96	; 0x60
 8000ce8:	d1e5      	bne.n	8000cb6 <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000cea:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8000cec:	684d      	ldr	r5, [r1, #4]
 8000cee:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000cf0:	f024 0410 	bic.w	r4, r4, #16
 8000cf4:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000cf6:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8000cf8:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8000cfa:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8000cfe:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8000d02:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8000d06:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8000d0a:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8000d0c:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8000d0e:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000d10:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8000d14:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 8000d18:	e017      	b.n	8000d4a <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8000d1a:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8000d1e:	d011      	beq.n	8000d44 <HAL_TIM_ConfigClockSource+0xca>
 8000d20:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8000d24:	d1c7      	bne.n	8000cb6 <HAL_TIM_ConfigClockSource+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8000d26:	688a      	ldr	r2, [r1, #8]
 8000d28:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8000d2a:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8000d2c:	68c9      	ldr	r1, [r1, #12]
 8000d2e:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000d30:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8000d34:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000d38:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8000d3a:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8000d3c:	689a      	ldr	r2, [r3, #8]
 8000d3e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000d42:	e002      	b.n	8000d4a <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8000d44:	689a      	ldr	r2, [r3, #8]
 8000d46:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 8000d4a:	609a      	str	r2, [r3, #8]
 8000d4c:	e7b3      	b.n	8000cb6 <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8000d4e:	688a      	ldr	r2, [r1, #8]
 8000d50:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8000d52:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8000d54:	68c9      	ldr	r1, [r1, #12]
 8000d56:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000d58:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8000d5c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8000d60:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8000d62:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8000d64:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8000d66:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 8000d6a:	e7ee      	b.n	8000d4a <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8000d6c:	684c      	ldr	r4, [r1, #4]
 8000d6e:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8000d70:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000d72:	6a1d      	ldr	r5, [r3, #32]
 8000d74:	f025 0501 	bic.w	r5, r5, #1
 8000d78:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8000d7a:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000d7c:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000d80:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8000d84:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8000d88:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8000d8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8000d8c:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8000d8e:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000d90:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8000d94:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 8000d98:	e7d7      	b.n	8000d4a <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8000d9a:	684c      	ldr	r4, [r1, #4]
 8000d9c:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8000d9e:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000da0:	6a1d      	ldr	r5, [r3, #32]
 8000da2:	f025 0501 	bic.w	r5, r5, #1
 8000da6:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8000da8:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000daa:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000dae:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8000db2:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8000db6:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8000db8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8000dba:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8000dbc:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000dbe:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8000dc2:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 8000dc6:	e7c0      	b.n	8000d4a <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8000dc8:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000dca:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8000dce:	f042 0207 	orr.w	r2, r2, #7
 8000dd2:	e7ba      	b.n	8000d4a <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8000dd4:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000dd6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8000dda:	f042 0217 	orr.w	r2, r2, #23
 8000dde:	e7b4      	b.n	8000d4a <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8000de0:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000de2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8000de6:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 8000dea:	e7ae      	b.n	8000d4a <HAL_TIM_ConfigClockSource+0xd0>

08000dec <HAL_TIM_OC_DelayElapsedCallback>:
 8000dec:	4770      	bx	lr

08000dee <HAL_TIM_IC_CaptureCallback>:
 8000dee:	4770      	bx	lr

08000df0 <HAL_TIM_PWM_PulseFinishedCallback>:
 8000df0:	4770      	bx	lr

08000df2 <HAL_TIM_TriggerCallback>:
 8000df2:	4770      	bx	lr

08000df4 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000df4:	6803      	ldr	r3, [r0, #0]
 8000df6:	691a      	ldr	r2, [r3, #16]
 8000df8:	0791      	lsls	r1, r2, #30
{
 8000dfa:	b510      	push	{r4, lr}
 8000dfc:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000dfe:	d50e      	bpl.n	8000e1e <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8000e00:	68da      	ldr	r2, [r3, #12]
 8000e02:	0792      	lsls	r2, r2, #30
 8000e04:	d50b      	bpl.n	8000e1e <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8000e06:	f06f 0202 	mvn.w	r2, #2
 8000e0a:	611a      	str	r2, [r3, #16]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000e0c:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000e0e:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000e10:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000e12:	7602      	strb	r2, [r0, #24]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000e14:	d077      	beq.n	8000f06 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8000e16:	f7ff ffea 	bl	8000dee <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8000e1e:	6823      	ldr	r3, [r4, #0]
 8000e20:	691a      	ldr	r2, [r3, #16]
 8000e22:	0750      	lsls	r0, r2, #29
 8000e24:	d510      	bpl.n	8000e48 <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8000e26:	68da      	ldr	r2, [r3, #12]
 8000e28:	0751      	lsls	r1, r2, #29
 8000e2a:	d50d      	bpl.n	8000e48 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8000e2c:	f06f 0204 	mvn.w	r2, #4
 8000e30:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000e32:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000e34:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000e36:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000e3a:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8000e3c:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000e3e:	d068      	beq.n	8000f12 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8000e40:	f7ff ffd5 	bl	8000dee <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000e44:	2300      	movs	r3, #0
 8000e46:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8000e48:	6823      	ldr	r3, [r4, #0]
 8000e4a:	691a      	ldr	r2, [r3, #16]
 8000e4c:	0712      	lsls	r2, r2, #28
 8000e4e:	d50f      	bpl.n	8000e70 <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8000e50:	68da      	ldr	r2, [r3, #12]
 8000e52:	0710      	lsls	r0, r2, #28
 8000e54:	d50c      	bpl.n	8000e70 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8000e56:	f06f 0208 	mvn.w	r2, #8
 8000e5a:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000e5c:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000e5e:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000e60:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000e62:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8000e64:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000e66:	d05a      	beq.n	8000f1e <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8000e68:	f7ff ffc1 	bl	8000dee <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8000e70:	6823      	ldr	r3, [r4, #0]
 8000e72:	691a      	ldr	r2, [r3, #16]
 8000e74:	06d2      	lsls	r2, r2, #27
 8000e76:	d510      	bpl.n	8000e9a <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8000e78:	68da      	ldr	r2, [r3, #12]
 8000e7a:	06d0      	lsls	r0, r2, #27
 8000e7c:	d50d      	bpl.n	8000e9a <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8000e7e:	f06f 0210 	mvn.w	r2, #16
 8000e82:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000e84:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000e86:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000e88:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000e8c:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8000e8e:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000e90:	d04b      	beq.n	8000f2a <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8000e92:	f7ff ffac 	bl	8000dee <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000e96:	2300      	movs	r3, #0
 8000e98:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8000e9a:	6823      	ldr	r3, [r4, #0]
 8000e9c:	691a      	ldr	r2, [r3, #16]
 8000e9e:	07d1      	lsls	r1, r2, #31
 8000ea0:	d508      	bpl.n	8000eb4 <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8000ea2:	68da      	ldr	r2, [r3, #12]
 8000ea4:	07d2      	lsls	r2, r2, #31
 8000ea6:	d505      	bpl.n	8000eb4 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8000ea8:	f06f 0201 	mvn.w	r2, #1
 8000eac:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8000eae:	4620      	mov	r0, r4
 8000eb0:	f000 fc78 	bl	80017a4 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8000eb4:	6823      	ldr	r3, [r4, #0]
 8000eb6:	691a      	ldr	r2, [r3, #16]
 8000eb8:	0610      	lsls	r0, r2, #24
 8000eba:	d508      	bpl.n	8000ece <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8000ebc:	68da      	ldr	r2, [r3, #12]
 8000ebe:	0611      	lsls	r1, r2, #24
 8000ec0:	d505      	bpl.n	8000ece <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8000ec2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8000ec6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8000ec8:	4620      	mov	r0, r4
 8000eca:	f000 f8d6 	bl	800107a <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8000ece:	6823      	ldr	r3, [r4, #0]
 8000ed0:	691a      	ldr	r2, [r3, #16]
 8000ed2:	0652      	lsls	r2, r2, #25
 8000ed4:	d508      	bpl.n	8000ee8 <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8000ed6:	68da      	ldr	r2, [r3, #12]
 8000ed8:	0650      	lsls	r0, r2, #25
 8000eda:	d505      	bpl.n	8000ee8 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8000edc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8000ee0:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8000ee2:	4620      	mov	r0, r4
 8000ee4:	f7ff ff85 	bl	8000df2 <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8000ee8:	6823      	ldr	r3, [r4, #0]
 8000eea:	691a      	ldr	r2, [r3, #16]
 8000eec:	0691      	lsls	r1, r2, #26
 8000eee:	d522      	bpl.n	8000f36 <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8000ef0:	68da      	ldr	r2, [r3, #12]
 8000ef2:	0692      	lsls	r2, r2, #26
 8000ef4:	d51f      	bpl.n	8000f36 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000ef6:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8000efa:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000efc:	611a      	str	r2, [r3, #16]
}
 8000efe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 8000f02:	f000 b8b9 	b.w	8001078 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8000f06:	f7ff ff71 	bl	8000dec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000f0a:	4620      	mov	r0, r4
 8000f0c:	f7ff ff70 	bl	8000df0 <HAL_TIM_PWM_PulseFinishedCallback>
 8000f10:	e783      	b.n	8000e1a <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000f12:	f7ff ff6b 	bl	8000dec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000f16:	4620      	mov	r0, r4
 8000f18:	f7ff ff6a 	bl	8000df0 <HAL_TIM_PWM_PulseFinishedCallback>
 8000f1c:	e792      	b.n	8000e44 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000f1e:	f7ff ff65 	bl	8000dec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8000f22:	4620      	mov	r0, r4
 8000f24:	f7ff ff64 	bl	8000df0 <HAL_TIM_PWM_PulseFinishedCallback>
 8000f28:	e7a0      	b.n	8000e6c <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000f2a:	f7ff ff5f 	bl	8000dec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000f2e:	4620      	mov	r0, r4
 8000f30:	f7ff ff5e 	bl	8000df0 <HAL_TIM_PWM_PulseFinishedCallback>
 8000f34:	e7af      	b.n	8000e96 <HAL_TIM_IRQHandler+0xa2>
 8000f36:	bd10      	pop	{r4, pc}

08000f38 <TIM_Base_SetConfig>:
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8000f38:	4a2e      	ldr	r2, [pc, #184]	; (8000ff4 <TIM_Base_SetConfig+0xbc>)
  tmpcr1 = TIMx->CR1;
 8000f3a:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8000f3c:	4290      	cmp	r0, r2
 8000f3e:	d012      	beq.n	8000f66 <TIM_Base_SetConfig+0x2e>
 8000f40:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000f44:	d00f      	beq.n	8000f66 <TIM_Base_SetConfig+0x2e>
 8000f46:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8000f4a:	4290      	cmp	r0, r2
 8000f4c:	d00b      	beq.n	8000f66 <TIM_Base_SetConfig+0x2e>
 8000f4e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f52:	4290      	cmp	r0, r2
 8000f54:	d007      	beq.n	8000f66 <TIM_Base_SetConfig+0x2e>
 8000f56:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f5a:	4290      	cmp	r0, r2
 8000f5c:	d003      	beq.n	8000f66 <TIM_Base_SetConfig+0x2e>
 8000f5e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8000f62:	4290      	cmp	r0, r2
 8000f64:	d11d      	bne.n	8000fa2 <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= Structure->CounterMode;
 8000f66:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000f68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8000f6c:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8000f6e:	4a21      	ldr	r2, [pc, #132]	; (8000ff4 <TIM_Base_SetConfig+0xbc>)
 8000f70:	4290      	cmp	r0, r2
 8000f72:	d104      	bne.n	8000f7e <TIM_Base_SetConfig+0x46>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000f74:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8000f76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	e028      	b.n	8000fd0 <TIM_Base_SetConfig+0x98>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8000f7e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000f82:	d0f7      	beq.n	8000f74 <TIM_Base_SetConfig+0x3c>
 8000f84:	4a1c      	ldr	r2, [pc, #112]	; (8000ff8 <TIM_Base_SetConfig+0xc0>)
 8000f86:	4290      	cmp	r0, r2
 8000f88:	d0f4      	beq.n	8000f74 <TIM_Base_SetConfig+0x3c>
 8000f8a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f8e:	4290      	cmp	r0, r2
 8000f90:	d0f0      	beq.n	8000f74 <TIM_Base_SetConfig+0x3c>
 8000f92:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f96:	4290      	cmp	r0, r2
 8000f98:	d0ec      	beq.n	8000f74 <TIM_Base_SetConfig+0x3c>
 8000f9a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8000f9e:	4290      	cmp	r0, r2
 8000fa0:	d0e8      	beq.n	8000f74 <TIM_Base_SetConfig+0x3c>
 8000fa2:	4a16      	ldr	r2, [pc, #88]	; (8000ffc <TIM_Base_SetConfig+0xc4>)
 8000fa4:	4290      	cmp	r0, r2
 8000fa6:	d0e5      	beq.n	8000f74 <TIM_Base_SetConfig+0x3c>
 8000fa8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000fac:	4290      	cmp	r0, r2
 8000fae:	d0e1      	beq.n	8000f74 <TIM_Base_SetConfig+0x3c>
 8000fb0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000fb4:	4290      	cmp	r0, r2
 8000fb6:	d0dd      	beq.n	8000f74 <TIM_Base_SetConfig+0x3c>
 8000fb8:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8000fbc:	4290      	cmp	r0, r2
 8000fbe:	d0d9      	beq.n	8000f74 <TIM_Base_SetConfig+0x3c>
 8000fc0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000fc4:	4290      	cmp	r0, r2
 8000fc6:	d0d5      	beq.n	8000f74 <TIM_Base_SetConfig+0x3c>
 8000fc8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000fcc:	4290      	cmp	r0, r2
 8000fce:	d0d1      	beq.n	8000f74 <TIM_Base_SetConfig+0x3c>
  TIMx->CR1 = tmpcr1;
 8000fd0:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000fd2:	688b      	ldr	r3, [r1, #8]
 8000fd4:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8000fd6:	680b      	ldr	r3, [r1, #0]
 8000fd8:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8000fda:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <TIM_Base_SetConfig+0xbc>)
 8000fdc:	4298      	cmp	r0, r3
 8000fde:	d006      	beq.n	8000fee <TIM_Base_SetConfig+0xb6>
 8000fe0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000fe4:	4298      	cmp	r0, r3
 8000fe6:	d002      	beq.n	8000fee <TIM_Base_SetConfig+0xb6>
  TIMx->EGR = TIM_EGR_UG;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	6143      	str	r3, [r0, #20]
}
 8000fec:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8000fee:	690b      	ldr	r3, [r1, #16]
 8000ff0:	6303      	str	r3, [r0, #48]	; 0x30
 8000ff2:	e7f9      	b.n	8000fe8 <TIM_Base_SetConfig+0xb0>
 8000ff4:	40010000 	.word	0x40010000
 8000ff8:	40000400 	.word	0x40000400
 8000ffc:	40014000 	.word	0x40014000

08001000 <HAL_TIM_Base_Init>:
{ 
 8001000:	b510      	push	{r4, lr}
  if(htim == NULL)
 8001002:	4604      	mov	r4, r0
 8001004:	b1a0      	cbz	r0, 8001030 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001006:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800100a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800100e:	b91b      	cbnz	r3, 8001018 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001010:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 8001014:	f000 fe7c 	bl	8001d10 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8001018:	2302      	movs	r3, #2
 800101a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800101e:	6820      	ldr	r0, [r4, #0]
 8001020:	1d21      	adds	r1, r4, #4
 8001022:	f7ff ff89 	bl	8000f38 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001026:	2301      	movs	r3, #1
 8001028:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 800102c:	2000      	movs	r0, #0
 800102e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001030:	2001      	movs	r0, #1
}
 8001032:	bd10      	pop	{r4, pc}

08001034 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 8001034:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001038:	2b01      	cmp	r3, #1
{
 800103a:	b510      	push	{r4, lr}
 800103c:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8001040:	d018      	beq.n	8001074 <HAL_TIMEx_MasterConfigSynchronization+0x40>
  
  htim->State = HAL_TIM_STATE_BUSY;
 8001042:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001046:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8001048:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800104a:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 800104c:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800104e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001052:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8001054:	685a      	ldr	r2, [r3, #4]
 8001056:	4322      	orrs	r2, r4
 8001058:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 800105a:	689a      	ldr	r2, [r3, #8]
 800105c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001060:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001062:	689a      	ldr	r2, [r3, #8]
 8001064:	430a      	orrs	r2, r1
 8001066:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 8001068:	2301      	movs	r3, #1
 800106a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 800106e:	2300      	movs	r3, #0
 8001070:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 8001074:	4618      	mov	r0, r3
  
  return HAL_OK;
} 
 8001076:	bd10      	pop	{r4, pc}

08001078 <HAL_TIMEx_CommutationCallback>:
 8001078:	4770      	bx	lr

0800107a <HAL_TIMEx_BreakCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800107a:	4770      	bx	lr

0800107c <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800107c:	6803      	ldr	r3, [r0, #0]
 800107e:	68da      	ldr	r2, [r3, #12]
 8001080:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001084:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001086:	695a      	ldr	r2, [r3, #20]
 8001088:	f022 0201 	bic.w	r2, r2, #1
 800108c:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800108e:	2320      	movs	r3, #32
 8001090:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8001094:	4770      	bx	lr
	...

08001098 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001098:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 800109c:	6806      	ldr	r6, [r0, #0]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 800109e:	68c2      	ldr	r2, [r0, #12]
  tmpreg = huart->Instance->CR2;
 80010a0:	6933      	ldr	r3, [r6, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80010a2:	69c1      	ldr	r1, [r0, #28]
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80010a4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 80010a8:	4313      	orrs	r3, r2
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 80010aa:	6133      	str	r3, [r6, #16]
{
 80010ac:	4604      	mov	r4, r0
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80010ae:	6883      	ldr	r3, [r0, #8]
 80010b0:	6900      	ldr	r0, [r0, #16]
  tmpreg = huart->Instance->CR1;
 80010b2:	68f2      	ldr	r2, [r6, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80010b4:	4303      	orrs	r3, r0
 80010b6:	6960      	ldr	r0, [r4, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 80010b8:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80010bc:	4303      	orrs	r3, r0
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 80010be:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80010c2:	430b      	orrs	r3, r1
 80010c4:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 80010c6:	60f3      	str	r3, [r6, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 80010c8:	6973      	ldr	r3, [r6, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 80010ca:	69a2      	ldr	r2, [r4, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 80010cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 80010d0:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80010d2:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 80010d6:	6173      	str	r3, [r6, #20]
 80010d8:	4b7a      	ldr	r3, [pc, #488]	; (80012c4 <UART_SetConfig+0x22c>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80010da:	d17c      	bne.n	80011d6 <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80010dc:	429e      	cmp	r6, r3
 80010de:	d003      	beq.n	80010e8 <UART_SetConfig+0x50>
 80010e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80010e4:	429e      	cmp	r6, r3
 80010e6:	d144      	bne.n	8001172 <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80010e8:	f7ff fbbe 	bl	8000868 <HAL_RCC_GetPCLK2Freq>
 80010ec:	2519      	movs	r5, #25
 80010ee:	fb05 f300 	mul.w	r3, r5, r0
 80010f2:	6860      	ldr	r0, [r4, #4]
 80010f4:	f04f 0964 	mov.w	r9, #100	; 0x64
 80010f8:	0040      	lsls	r0, r0, #1
 80010fa:	fbb3 f3f0 	udiv	r3, r3, r0
 80010fe:	fbb3 f3f9 	udiv	r3, r3, r9
 8001102:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001106:	f7ff fbaf 	bl	8000868 <HAL_RCC_GetPCLK2Freq>
 800110a:	6863      	ldr	r3, [r4, #4]
 800110c:	4368      	muls	r0, r5
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	fbb0 f7f3 	udiv	r7, r0, r3
 8001114:	f7ff fba8 	bl	8000868 <HAL_RCC_GetPCLK2Freq>
 8001118:	6863      	ldr	r3, [r4, #4]
 800111a:	4368      	muls	r0, r5
 800111c:	005b      	lsls	r3, r3, #1
 800111e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001122:	fbb3 f3f9 	udiv	r3, r3, r9
 8001126:	fb09 7313 	mls	r3, r9, r3, r7
 800112a:	00db      	lsls	r3, r3, #3
 800112c:	3332      	adds	r3, #50	; 0x32
 800112e:	fbb3 f3f9 	udiv	r3, r3, r9
 8001132:	005b      	lsls	r3, r3, #1
 8001134:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8001138:	f7ff fb96 	bl	8000868 <HAL_RCC_GetPCLK2Freq>
 800113c:	6862      	ldr	r2, [r4, #4]
 800113e:	4368      	muls	r0, r5
 8001140:	0052      	lsls	r2, r2, #1
 8001142:	fbb0 faf2 	udiv	sl, r0, r2
 8001146:	f7ff fb8f 	bl	8000868 <HAL_RCC_GetPCLK2Freq>
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800114a:	6863      	ldr	r3, [r4, #4]
 800114c:	4368      	muls	r0, r5
 800114e:	005b      	lsls	r3, r3, #1
 8001150:	fbb0 f3f3 	udiv	r3, r0, r3
 8001154:	fbb3 f3f9 	udiv	r3, r3, r9
 8001158:	fb09 a313 	mls	r3, r9, r3, sl
 800115c:	00db      	lsls	r3, r3, #3
 800115e:	3332      	adds	r3, #50	; 0x32
 8001160:	fbb3 f3f9 	udiv	r3, r3, r9
 8001164:	f003 0307 	and.w	r3, r3, #7
 8001168:	4443      	add	r3, r8
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800116a:	443b      	add	r3, r7
 800116c:	60b3      	str	r3, [r6, #8]
 800116e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001172:	f7ff fb61 	bl	8000838 <HAL_RCC_GetPCLK1Freq>
 8001176:	2519      	movs	r5, #25
 8001178:	fb05 f300 	mul.w	r3, r5, r0
 800117c:	6860      	ldr	r0, [r4, #4]
 800117e:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001182:	0040      	lsls	r0, r0, #1
 8001184:	fbb3 f3f0 	udiv	r3, r3, r0
 8001188:	fbb3 f3f9 	udiv	r3, r3, r9
 800118c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001190:	f7ff fb52 	bl	8000838 <HAL_RCC_GetPCLK1Freq>
 8001194:	6863      	ldr	r3, [r4, #4]
 8001196:	4368      	muls	r0, r5
 8001198:	005b      	lsls	r3, r3, #1
 800119a:	fbb0 f7f3 	udiv	r7, r0, r3
 800119e:	f7ff fb4b 	bl	8000838 <HAL_RCC_GetPCLK1Freq>
 80011a2:	6863      	ldr	r3, [r4, #4]
 80011a4:	4368      	muls	r0, r5
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80011ac:	fbb3 f3f9 	udiv	r3, r3, r9
 80011b0:	fb09 7313 	mls	r3, r9, r3, r7
 80011b4:	00db      	lsls	r3, r3, #3
 80011b6:	3332      	adds	r3, #50	; 0x32
 80011b8:	fbb3 f3f9 	udiv	r3, r3, r9
 80011bc:	005b      	lsls	r3, r3, #1
 80011be:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 80011c2:	f7ff fb39 	bl	8000838 <HAL_RCC_GetPCLK1Freq>
 80011c6:	6862      	ldr	r2, [r4, #4]
 80011c8:	4368      	muls	r0, r5
 80011ca:	0052      	lsls	r2, r2, #1
 80011cc:	fbb0 faf2 	udiv	sl, r0, r2
 80011d0:	f7ff fb32 	bl	8000838 <HAL_RCC_GetPCLK1Freq>
 80011d4:	e7b9      	b.n	800114a <UART_SetConfig+0xb2>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80011d6:	429e      	cmp	r6, r3
 80011d8:	d002      	beq.n	80011e0 <UART_SetConfig+0x148>
 80011da:	4b3b      	ldr	r3, [pc, #236]	; (80012c8 <UART_SetConfig+0x230>)
 80011dc:	429e      	cmp	r6, r3
 80011de:	d140      	bne.n	8001262 <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80011e0:	f7ff fb42 	bl	8000868 <HAL_RCC_GetPCLK2Freq>
 80011e4:	6867      	ldr	r7, [r4, #4]
 80011e6:	2519      	movs	r5, #25
 80011e8:	f04f 0964 	mov.w	r9, #100	; 0x64
 80011ec:	fb05 f300 	mul.w	r3, r5, r0
 80011f0:	00bf      	lsls	r7, r7, #2
 80011f2:	fbb3 f3f7 	udiv	r3, r3, r7
 80011f6:	fbb3 f3f9 	udiv	r3, r3, r9
 80011fa:	011f      	lsls	r7, r3, #4
 80011fc:	f7ff fb34 	bl	8000868 <HAL_RCC_GetPCLK2Freq>
 8001200:	6863      	ldr	r3, [r4, #4]
 8001202:	4368      	muls	r0, r5
 8001204:	009b      	lsls	r3, r3, #2
 8001206:	fbb0 f8f3 	udiv	r8, r0, r3
 800120a:	f7ff fb2d 	bl	8000868 <HAL_RCC_GetPCLK2Freq>
 800120e:	6863      	ldr	r3, [r4, #4]
 8001210:	4368      	muls	r0, r5
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	fbb0 f3f3 	udiv	r3, r0, r3
 8001218:	fbb3 f3f9 	udiv	r3, r3, r9
 800121c:	fb09 8313 	mls	r3, r9, r3, r8
 8001220:	011b      	lsls	r3, r3, #4
 8001222:	3332      	adds	r3, #50	; 0x32
 8001224:	fbb3 f3f9 	udiv	r3, r3, r9
 8001228:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 800122c:	f7ff fb1c 	bl	8000868 <HAL_RCC_GetPCLK2Freq>
 8001230:	6862      	ldr	r2, [r4, #4]
 8001232:	4368      	muls	r0, r5
 8001234:	0092      	lsls	r2, r2, #2
 8001236:	fbb0 faf2 	udiv	sl, r0, r2
 800123a:	f7ff fb15 	bl	8000868 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800123e:	6863      	ldr	r3, [r4, #4]
 8001240:	4368      	muls	r0, r5
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	fbb0 f3f3 	udiv	r3, r0, r3
 8001248:	fbb3 f3f9 	udiv	r3, r3, r9
 800124c:	fb09 a313 	mls	r3, r9, r3, sl
 8001250:	011b      	lsls	r3, r3, #4
 8001252:	3332      	adds	r3, #50	; 0x32
 8001254:	fbb3 f3f9 	udiv	r3, r3, r9
 8001258:	f003 030f 	and.w	r3, r3, #15
 800125c:	ea43 0308 	orr.w	r3, r3, r8
 8001260:	e783      	b.n	800116a <UART_SetConfig+0xd2>
 8001262:	f7ff fae9 	bl	8000838 <HAL_RCC_GetPCLK1Freq>
 8001266:	6867      	ldr	r7, [r4, #4]
 8001268:	2519      	movs	r5, #25
 800126a:	f04f 0964 	mov.w	r9, #100	; 0x64
 800126e:	fb05 f300 	mul.w	r3, r5, r0
 8001272:	00bf      	lsls	r7, r7, #2
 8001274:	fbb3 f3f7 	udiv	r3, r3, r7
 8001278:	fbb3 f3f9 	udiv	r3, r3, r9
 800127c:	011f      	lsls	r7, r3, #4
 800127e:	f7ff fadb 	bl	8000838 <HAL_RCC_GetPCLK1Freq>
 8001282:	6863      	ldr	r3, [r4, #4]
 8001284:	4368      	muls	r0, r5
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	fbb0 f8f3 	udiv	r8, r0, r3
 800128c:	f7ff fad4 	bl	8000838 <HAL_RCC_GetPCLK1Freq>
 8001290:	6863      	ldr	r3, [r4, #4]
 8001292:	4368      	muls	r0, r5
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	fbb0 f3f3 	udiv	r3, r0, r3
 800129a:	fbb3 f3f9 	udiv	r3, r3, r9
 800129e:	fb09 8313 	mls	r3, r9, r3, r8
 80012a2:	011b      	lsls	r3, r3, #4
 80012a4:	3332      	adds	r3, #50	; 0x32
 80012a6:	fbb3 f3f9 	udiv	r3, r3, r9
 80012aa:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 80012ae:	f7ff fac3 	bl	8000838 <HAL_RCC_GetPCLK1Freq>
 80012b2:	6862      	ldr	r2, [r4, #4]
 80012b4:	4368      	muls	r0, r5
 80012b6:	0092      	lsls	r2, r2, #2
 80012b8:	fbb0 faf2 	udiv	sl, r0, r2
 80012bc:	f7ff fabc 	bl	8000838 <HAL_RCC_GetPCLK1Freq>
 80012c0:	e7bd      	b.n	800123e <UART_SetConfig+0x1a6>
 80012c2:	bf00      	nop
 80012c4:	40011000 	.word	0x40011000
 80012c8:	40011400 	.word	0x40011400

080012cc <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 80012cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012ce:	4604      	mov	r4, r0
 80012d0:	460e      	mov	r6, r1
 80012d2:	4617      	mov	r7, r2
 80012d4:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 80012d6:	6821      	ldr	r1, [r4, #0]
 80012d8:	680b      	ldr	r3, [r1, #0]
 80012da:	ea36 0303 	bics.w	r3, r6, r3
 80012de:	d101      	bne.n	80012e4 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 80012e0:	2000      	movs	r0, #0
}
 80012e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 80012e4:	1c6b      	adds	r3, r5, #1
 80012e6:	d0f7      	beq.n	80012d8 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80012e8:	b995      	cbnz	r5, 8001310 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80012ea:	6823      	ldr	r3, [r4, #0]
 80012ec:	68da      	ldr	r2, [r3, #12]
 80012ee:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80012f2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80012f4:	695a      	ldr	r2, [r3, #20]
 80012f6:	f022 0201 	bic.w	r2, r2, #1
 80012fa:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 80012fc:	2320      	movs	r3, #32
 80012fe:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001302:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8001306:	2300      	movs	r3, #0
 8001308:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 800130c:	2003      	movs	r0, #3
 800130e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001310:	f7ff f806 	bl	8000320 <HAL_GetTick>
 8001314:	1bc0      	subs	r0, r0, r7
 8001316:	4285      	cmp	r5, r0
 8001318:	d2dd      	bcs.n	80012d6 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 800131a:	e7e6      	b.n	80012ea <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

0800131c <HAL_UART_Init>:
{
 800131c:	b510      	push	{r4, lr}
  if(huart == NULL)
 800131e:	4604      	mov	r4, r0
 8001320:	b340      	cbz	r0, 8001374 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8001322:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001326:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800132a:	b91b      	cbnz	r3, 8001334 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 800132c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001330:	f000 fd3a 	bl	8001da8 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001334:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001336:	2324      	movs	r3, #36	; 0x24
 8001338:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 800133c:	68d3      	ldr	r3, [r2, #12]
 800133e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001342:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001344:	4620      	mov	r0, r4
 8001346:	f7ff fea7 	bl	8001098 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800134a:	6823      	ldr	r3, [r4, #0]
 800134c:	691a      	ldr	r2, [r3, #16]
 800134e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001352:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001354:	695a      	ldr	r2, [r3, #20]
 8001356:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800135a:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800135c:	68da      	ldr	r2, [r3, #12]
 800135e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001362:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001364:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8001366:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001368:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 800136a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 800136e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8001372:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001374:	2001      	movs	r0, #1
}
 8001376:	bd10      	pop	{r4, pc}

08001378 <HAL_UART_Transmit>:
{
 8001378:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800137c:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY) 
 800137e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001382:	2b20      	cmp	r3, #32
{
 8001384:	4604      	mov	r4, r0
 8001386:	460d      	mov	r5, r1
 8001388:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY) 
 800138a:	d14c      	bne.n	8001426 <HAL_UART_Transmit+0xae>
    if((pData == NULL ) || (Size == 0U)) 
 800138c:	2900      	cmp	r1, #0
 800138e:	d047      	beq.n	8001420 <HAL_UART_Transmit+0xa8>
 8001390:	2a00      	cmp	r2, #0
 8001392:	d045      	beq.n	8001420 <HAL_UART_Transmit+0xa8>
    __HAL_LOCK(huart);
 8001394:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001398:	2b01      	cmp	r3, #1
 800139a:	d044      	beq.n	8001426 <HAL_UART_Transmit+0xae>
 800139c:	2301      	movs	r3, #1
 800139e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80013a2:	2300      	movs	r3, #0
 80013a4:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80013a6:	2321      	movs	r3, #33	; 0x21
 80013a8:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 80013ac:	f7fe ffb8 	bl	8000320 <HAL_GetTick>
    huart->TxXferSize = Size;
 80013b0:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 80013b4:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 80013b6:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 80013ba:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80013bc:	b96b      	cbnz	r3, 80013da <HAL_UART_Transmit+0x62>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80013be:	463b      	mov	r3, r7
 80013c0:	4632      	mov	r2, r6
 80013c2:	2140      	movs	r1, #64	; 0x40
 80013c4:	4620      	mov	r0, r4
 80013c6:	f7ff ff81 	bl	80012cc <UART_WaitOnFlagUntilTimeout.constprop.3>
 80013ca:	b9a0      	cbnz	r0, 80013f6 <HAL_UART_Transmit+0x7e>
      huart->gState = HAL_UART_STATE_READY;
 80013cc:	2320      	movs	r3, #32
 80013ce:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 80013d2:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 80013d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 80013da:	3b01      	subs	r3, #1
 80013dc:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80013de:	68a3      	ldr	r3, [r4, #8]
 80013e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80013e4:	4632      	mov	r2, r6
 80013e6:	463b      	mov	r3, r7
 80013e8:	f04f 0180 	mov.w	r1, #128	; 0x80
 80013ec:	4620      	mov	r0, r4
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80013ee:	d10e      	bne.n	800140e <HAL_UART_Transmit+0x96>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80013f0:	f7ff ff6c 	bl	80012cc <UART_WaitOnFlagUntilTimeout.constprop.3>
 80013f4:	b110      	cbz	r0, 80013fc <HAL_UART_Transmit+0x84>
          return HAL_TIMEOUT;
 80013f6:	2003      	movs	r0, #3
 80013f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FFU);
 80013fc:	882b      	ldrh	r3, [r5, #0]
 80013fe:	6822      	ldr	r2, [r4, #0]
 8001400:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001404:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001406:	6923      	ldr	r3, [r4, #16]
 8001408:	b943      	cbnz	r3, 800141c <HAL_UART_Transmit+0xa4>
          pData +=2U;
 800140a:	3502      	adds	r5, #2
 800140c:	e7d5      	b.n	80013ba <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800140e:	f7ff ff5d 	bl	80012cc <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001412:	2800      	cmp	r0, #0
 8001414:	d1ef      	bne.n	80013f6 <HAL_UART_Transmit+0x7e>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFFU);
 8001416:	6823      	ldr	r3, [r4, #0]
 8001418:	782a      	ldrb	r2, [r5, #0]
 800141a:	605a      	str	r2, [r3, #4]
 800141c:	3501      	adds	r5, #1
 800141e:	e7cc      	b.n	80013ba <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8001420:	2001      	movs	r0, #1
 8001422:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8001426:	2002      	movs	r0, #2
}
 8001428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800142c <HAL_UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_READY)
 800142c:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8001430:	2b20      	cmp	r3, #32
 8001432:	d11c      	bne.n	800146e <HAL_UART_Receive_IT+0x42>
    if((pData == NULL ) || (Size == 0U)) 
 8001434:	b1c9      	cbz	r1, 800146a <HAL_UART_Receive_IT+0x3e>
 8001436:	b1c2      	cbz	r2, 800146a <HAL_UART_Receive_IT+0x3e>
    __HAL_LOCK(huart);
 8001438:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800143c:	2b01      	cmp	r3, #1
 800143e:	d016      	beq.n	800146e <HAL_UART_Receive_IT+0x42>
    huart->RxXferSize = Size;
 8001440:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001442:	85c2      	strh	r2, [r0, #46]	; 0x2e
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001444:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001446:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001448:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800144a:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800144e:	6802      	ldr	r2, [r0, #0]
    huart->pRxBuffPtr = pData;
 8001450:	6281      	str	r1, [r0, #40]	; 0x28
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001452:	6951      	ldr	r1, [r2, #20]
    __HAL_UNLOCK(huart);
 8001454:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001458:	f041 0101 	orr.w	r1, r1, #1
 800145c:	6151      	str	r1, [r2, #20]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800145e:	68d1      	ldr	r1, [r2, #12]
 8001460:	f441 7190 	orr.w	r1, r1, #288	; 0x120
 8001464:	60d1      	str	r1, [r2, #12]
    return HAL_OK;
 8001466:	4618      	mov	r0, r3
 8001468:	4770      	bx	lr
      return HAL_ERROR;
 800146a:	2001      	movs	r0, #1
 800146c:	4770      	bx	lr
    return HAL_BUSY; 
 800146e:	2002      	movs	r0, #2
}
 8001470:	4770      	bx	lr

08001472 <HAL_UART_TxCpltCallback>:
 8001472:	4770      	bx	lr

08001474 <UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8001474:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8001478:	2b22      	cmp	r3, #34	; 0x22
{
 800147a:	b510      	push	{r4, lr}
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 800147c:	d132      	bne.n	80014e4 <UART_Receive_IT+0x70>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800147e:	6883      	ldr	r3, [r0, #8]
 8001480:	6901      	ldr	r1, [r0, #16]
 8001482:	6802      	ldr	r2, [r0, #0]
 8001484:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001488:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800148a:	d11f      	bne.n	80014cc <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FFU);
 800148c:	6852      	ldr	r2, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 800148e:	b9c9      	cbnz	r1, 80014c4 <UART_Receive_IT+0x50>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FFU);
 8001490:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001494:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 8001498:	6283      	str	r3, [r0, #40]	; 0x28
    if(--huart->RxXferCount == 0U)
 800149a:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 800149c:	3c01      	subs	r4, #1
 800149e:	b2a4      	uxth	r4, r4
 80014a0:	85c4      	strh	r4, [r0, #46]	; 0x2e
 80014a2:	b96c      	cbnz	r4, 80014c0 <UART_Receive_IT+0x4c>
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80014a4:	6803      	ldr	r3, [r0, #0]
 80014a6:	68da      	ldr	r2, [r3, #12]
 80014a8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80014ac:	60da      	str	r2, [r3, #12]
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80014ae:	695a      	ldr	r2, [r3, #20]
 80014b0:	f022 0201 	bic.w	r2, r2, #1
 80014b4:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 80014b6:	2320      	movs	r3, #32
 80014b8:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 80014bc:	f000 f928 	bl	8001710 <HAL_UART_RxCpltCallback>
    if(--huart->RxXferCount == 0U)
 80014c0:	2000      	movs	r0, #0
}
 80014c2:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FFU);
 80014c4:	b2d2      	uxtb	r2, r2
 80014c6:	f823 2b01 	strh.w	r2, [r3], #1
 80014ca:	e7e5      	b.n	8001498 <UART_Receive_IT+0x24>
      if(huart->Init.Parity == UART_PARITY_NONE)
 80014cc:	b921      	cbnz	r1, 80014d8 <UART_Receive_IT+0x64>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FFU);
 80014ce:	1c59      	adds	r1, r3, #1
 80014d0:	6852      	ldr	r2, [r2, #4]
 80014d2:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007FU);
 80014d4:	701a      	strb	r2, [r3, #0]
 80014d6:	e7e0      	b.n	800149a <UART_Receive_IT+0x26>
 80014d8:	6852      	ldr	r2, [r2, #4]
 80014da:	1c59      	adds	r1, r3, #1
 80014dc:	6281      	str	r1, [r0, #40]	; 0x28
 80014de:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80014e2:	e7f7      	b.n	80014d4 <UART_Receive_IT+0x60>
    return HAL_BUSY;
 80014e4:	2002      	movs	r0, #2
 80014e6:	bd10      	pop	{r4, pc}

080014e8 <HAL_UART_ErrorCallback>:
{
 80014e8:	4770      	bx	lr
	...

080014ec <HAL_UART_IRQHandler>:
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80014ec:	6803      	ldr	r3, [r0, #0]
 80014ee:	681a      	ldr	r2, [r3, #0]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80014f0:	68d9      	ldr	r1, [r3, #12]
{
 80014f2:	b570      	push	{r4, r5, r6, lr}
  if(errorflags == RESET)
 80014f4:	0716      	lsls	r6, r2, #28
{
 80014f6:	4604      	mov	r4, r0
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80014f8:	695d      	ldr	r5, [r3, #20]
  if(errorflags == RESET)
 80014fa:	d107      	bne.n	800150c <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80014fc:	0696      	lsls	r6, r2, #26
 80014fe:	d55a      	bpl.n	80015b6 <HAL_UART_IRQHandler+0xca>
 8001500:	068d      	lsls	r5, r1, #26
 8001502:	d558      	bpl.n	80015b6 <HAL_UART_IRQHandler+0xca>
}
 8001504:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8001508:	f7ff bfb4 	b.w	8001474 <UART_Receive_IT>
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800150c:	f015 0501 	ands.w	r5, r5, #1
 8001510:	d102      	bne.n	8001518 <HAL_UART_IRQHandler+0x2c>
 8001512:	f411 7f90 	tst.w	r1, #288	; 0x120
 8001516:	d04e      	beq.n	80015b6 <HAL_UART_IRQHandler+0xca>
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001518:	07d3      	lsls	r3, r2, #31
 800151a:	d505      	bpl.n	8001528 <HAL_UART_IRQHandler+0x3c>
 800151c:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800151e:	bf42      	ittt	mi
 8001520:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 8001522:	f043 0301 	orrmi.w	r3, r3, #1
 8001526:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001528:	0750      	lsls	r0, r2, #29
 800152a:	d504      	bpl.n	8001536 <HAL_UART_IRQHandler+0x4a>
 800152c:	b11d      	cbz	r5, 8001536 <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800152e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001530:	f043 0302 	orr.w	r3, r3, #2
 8001534:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001536:	0793      	lsls	r3, r2, #30
 8001538:	d504      	bpl.n	8001544 <HAL_UART_IRQHandler+0x58>
 800153a:	b11d      	cbz	r5, 8001544 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800153c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800153e:	f043 0304 	orr.w	r3, r3, #4
 8001542:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001544:	0716      	lsls	r6, r2, #28
 8001546:	d504      	bpl.n	8001552 <HAL_UART_IRQHandler+0x66>
 8001548:	b11d      	cbz	r5, 8001552 <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800154a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800154c:	f043 0308 	orr.w	r3, r3, #8
 8001550:	63e3      	str	r3, [r4, #60]	; 0x3c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001552:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001554:	2b00      	cmp	r3, #0
 8001556:	d066      	beq.n	8001626 <HAL_UART_IRQHandler+0x13a>
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001558:	0695      	lsls	r5, r2, #26
 800155a:	d504      	bpl.n	8001566 <HAL_UART_IRQHandler+0x7a>
 800155c:	0688      	lsls	r0, r1, #26
 800155e:	d502      	bpl.n	8001566 <HAL_UART_IRQHandler+0x7a>
        UART_Receive_IT(huart);
 8001560:	4620      	mov	r0, r4
 8001562:	f7ff ff87 	bl	8001474 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001566:	6823      	ldr	r3, [r4, #0]
 8001568:	695d      	ldr	r5, [r3, #20]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800156a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800156c:	0711      	lsls	r1, r2, #28
        UART_EndRxTransfer(huart);
 800156e:	4620      	mov	r0, r4
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001570:	d402      	bmi.n	8001578 <HAL_UART_IRQHandler+0x8c>
 8001572:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8001576:	d01a      	beq.n	80015ae <HAL_UART_IRQHandler+0xc2>
        UART_EndRxTransfer(huart);
 8001578:	f7ff fd80 	bl	800107c <UART_EndRxTransfer>
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800157c:	6823      	ldr	r3, [r4, #0]
 800157e:	695a      	ldr	r2, [r3, #20]
 8001580:	0652      	lsls	r2, r2, #25
 8001582:	d510      	bpl.n	80015a6 <HAL_UART_IRQHandler+0xba>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001584:	695a      	ldr	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 8001586:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001588:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800158c:	615a      	str	r2, [r3, #20]
          if(huart->hdmarx != NULL)
 800158e:	b150      	cbz	r0, 80015a6 <HAL_UART_IRQHandler+0xba>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001590:	4b25      	ldr	r3, [pc, #148]	; (8001628 <HAL_UART_IRQHandler+0x13c>)
 8001592:	6503      	str	r3, [r0, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001594:	f7fe ff51 	bl	800043a <HAL_DMA_Abort_IT>
 8001598:	2800      	cmp	r0, #0
 800159a:	d044      	beq.n	8001626 <HAL_UART_IRQHandler+0x13a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800159c:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 800159e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80015a2:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80015a4:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 80015a6:	4620      	mov	r0, r4
 80015a8:	f7ff ff9e 	bl	80014e8 <HAL_UART_ErrorCallback>
 80015ac:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 80015ae:	f7ff ff9b 	bl	80014e8 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80015b2:	63e5      	str	r5, [r4, #60]	; 0x3c
 80015b4:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80015b6:	0616      	lsls	r6, r2, #24
 80015b8:	d527      	bpl.n	800160a <HAL_UART_IRQHandler+0x11e>
 80015ba:	060d      	lsls	r5, r1, #24
 80015bc:	d525      	bpl.n	800160a <HAL_UART_IRQHandler+0x11e>
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 80015be:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 80015c2:	2a21      	cmp	r2, #33	; 0x21
 80015c4:	d12f      	bne.n	8001626 <HAL_UART_IRQHandler+0x13a>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80015c6:	68a2      	ldr	r2, [r4, #8]
 80015c8:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80015cc:	6a22      	ldr	r2, [r4, #32]
 80015ce:	d117      	bne.n	8001600 <HAL_UART_IRQHandler+0x114>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FFU);
 80015d0:	8811      	ldrh	r1, [r2, #0]
 80015d2:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80015d6:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 80015d8:	6921      	ldr	r1, [r4, #16]
 80015da:	b979      	cbnz	r1, 80015fc <HAL_UART_IRQHandler+0x110>
        huart->pTxBuffPtr += 2U;
 80015dc:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 80015de:	6222      	str	r2, [r4, #32]
    if(--huart->TxXferCount == 0U)
 80015e0:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80015e2:	3a01      	subs	r2, #1
 80015e4:	b292      	uxth	r2, r2
 80015e6:	84e2      	strh	r2, [r4, #38]	; 0x26
 80015e8:	b9ea      	cbnz	r2, 8001626 <HAL_UART_IRQHandler+0x13a>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80015ea:	68da      	ldr	r2, [r3, #12]
 80015ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80015f0:	60da      	str	r2, [r3, #12]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80015f2:	68da      	ldr	r2, [r3, #12]
 80015f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80015f8:	60da      	str	r2, [r3, #12]
 80015fa:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 80015fc:	3201      	adds	r2, #1
 80015fe:	e7ee      	b.n	80015de <HAL_UART_IRQHandler+0xf2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FFU);
 8001600:	1c51      	adds	r1, r2, #1
 8001602:	6221      	str	r1, [r4, #32]
 8001604:	7812      	ldrb	r2, [r2, #0]
 8001606:	605a      	str	r2, [r3, #4]
 8001608:	e7ea      	b.n	80015e0 <HAL_UART_IRQHandler+0xf4>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800160a:	0650      	lsls	r0, r2, #25
 800160c:	d50b      	bpl.n	8001626 <HAL_UART_IRQHandler+0x13a>
 800160e:	064a      	lsls	r2, r1, #25
 8001610:	d509      	bpl.n	8001626 <HAL_UART_IRQHandler+0x13a>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001612:	68da      	ldr	r2, [r3, #12]
 8001614:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001618:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800161a:	2320      	movs	r3, #32
 800161c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8001620:	4620      	mov	r0, r4
 8001622:	f7ff ff26 	bl	8001472 <HAL_UART_TxCpltCallback>
 8001626:	bd70      	pop	{r4, r5, r6, pc}
 8001628:	0800162d 	.word	0x0800162d

0800162c <UART_DMAAbortOnError>:
{
 800162c:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800162e:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0;
 8001630:	2300      	movs	r3, #0
 8001632:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0;
 8001634:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8001636:	f7ff ff57 	bl	80014e8 <HAL_UART_ErrorCallback>
 800163a:	bd08      	pop	{r3, pc}

0800163c <base64_encode>:
#include "Base64.h"

static const unsigned char base64_table[64] = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";

unsigned char * base64_encode(const unsigned char *src, int len ,int *out_len)
{
 800163c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800163e:	4604      	mov	r4, r0
 8001640:	4615      	mov	r5, r2
	unsigned char *out, *pos;
	const unsigned char *end, *in;
	size_t olen;
	int line_len;

	olen = len * 4 / 3 + 4; /* 3-byte blocks to 4-byte */
 8001642:	2003      	movs	r0, #3
 8001644:	008a      	lsls	r2, r1, #2
 8001646:	fb92 f2f0 	sdiv	r2, r2, r0
 800164a:	1d10      	adds	r0, r2, #4
 800164c:	3205      	adds	r2, #5
	olen += olen / 72; /* line feeds */
 800164e:	2348      	movs	r3, #72	; 0x48
 8001650:	fbb0 f0f3 	udiv	r0, r0, r3
	olen++; /* nul termination */
	out = malloc(olen);
 8001654:	4410      	add	r0, r2
{
 8001656:	460e      	mov	r6, r1
	out = malloc(olen);
 8001658:	f000 fd6e 	bl	8002138 <malloc>
	if (out == NULL)
 800165c:	b340      	cbz	r0, 80016b0 <base64_encode+0x74>
	end = src + len;
	in = src;
	pos = out;
	line_len = 0;
	while (end - in >= 3) {
		*pos++ = base64_table[in[0] >> 2];
 800165e:	4f2b      	ldr	r7, [pc, #172]	; (800170c <base64_encode+0xd0>)
	end = src + len;
 8001660:	19a1      	adds	r1, r4, r6
 8001662:	4623      	mov	r3, r4
 8001664:	4606      	mov	r6, r0
	while (end - in >= 3) {
 8001666:	eba1 0e03 	sub.w	lr, r1, r3
 800166a:	f1be 0f02 	cmp.w	lr, #2
 800166e:	461a      	mov	r2, r3
 8001670:	4634      	mov	r4, r6
 8001672:	f103 0303 	add.w	r3, r3, #3
 8001676:	f106 0604 	add.w	r6, r6, #4
 800167a:	dc1a      	bgt.n	80016b2 <base64_encode+0x76>
		*pos++ = base64_table[in[2] & 0x3f];
		in += 3;
		line_len += 4;
	}

	if (end - in) {
 800167c:	4291      	cmp	r1, r2
 800167e:	d014      	beq.n	80016aa <base64_encode+0x6e>
		*pos++ = base64_table[in[0] >> 2];
 8001680:	7813      	ldrb	r3, [r2, #0]
 8001682:	4e22      	ldr	r6, [pc, #136]	; (800170c <base64_encode+0xd0>)
 8001684:	0899      	lsrs	r1, r3, #2
		if (end - in == 1) {
 8001686:	f1be 0f01 	cmp.w	lr, #1
		*pos++ = base64_table[in[0] >> 2];
 800168a:	5c77      	ldrb	r7, [r6, r1]
 800168c:	4621      	mov	r1, r4
 800168e:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8001692:	f801 7b03 	strb.w	r7, [r1], #3
		if (end - in == 1) {
 8001696:	d12c      	bne.n	80016f2 <base64_encode+0xb6>
			*pos++ = base64_table[(in[0] & 0x03) << 4];
 8001698:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800169c:	5cf3      	ldrb	r3, [r6, r3]
 800169e:	7063      	strb	r3, [r4, #1]
			*pos++ = '=';
 80016a0:	233d      	movs	r3, #61	; 0x3d
		} else {
			*pos++ = base64_table[((in[0] & 0x03) << 4) |
					      (in[1] >> 4)];
			*pos++ = base64_table[(in[1] & 0x0f) << 2];
 80016a2:	70a3      	strb	r3, [r4, #2]
		}
		*pos++ = '=';
 80016a4:	233d      	movs	r3, #61	; 0x3d
 80016a6:	1c4c      	adds	r4, r1, #1
 80016a8:	700b      	strb	r3, [r1, #0]
		line_len += 4;
	}
	if (out_len)
 80016aa:	b10d      	cbz	r5, 80016b0 <base64_encode+0x74>
		*out_len = pos - out;
 80016ac:	1a24      	subs	r4, r4, r0
 80016ae:	602c      	str	r4, [r5, #0]
	return out;
}
 80016b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*pos++ = base64_table[in[0] >> 2];
 80016b2:	f813 2c03 	ldrb.w	r2, [r3, #-3]
 80016b6:	0894      	lsrs	r4, r2, #2
		*pos++ = base64_table[((in[0] & 0x03) << 4) | (in[1] >> 4)];
 80016b8:	0112      	lsls	r2, r2, #4
		*pos++ = base64_table[in[0] >> 2];
 80016ba:	5d3c      	ldrb	r4, [r7, r4]
 80016bc:	f806 4c04 	strb.w	r4, [r6, #-4]
		*pos++ = base64_table[((in[0] & 0x03) << 4) | (in[1] >> 4)];
 80016c0:	f813 4c02 	ldrb.w	r4, [r3, #-2]
 80016c4:	f002 0230 	and.w	r2, r2, #48	; 0x30
 80016c8:	ea42 1214 	orr.w	r2, r2, r4, lsr #4
		*pos++ = base64_table[((in[1] & 0x0f) << 2) | (in[2] >> 6)];
 80016cc:	00a4      	lsls	r4, r4, #2
		*pos++ = base64_table[((in[0] & 0x03) << 4) | (in[1] >> 4)];
 80016ce:	5cba      	ldrb	r2, [r7, r2]
 80016d0:	f806 2c03 	strb.w	r2, [r6, #-3]
		*pos++ = base64_table[((in[1] & 0x0f) << 2) | (in[2] >> 6)];
 80016d4:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 80016d8:	f004 043c 	and.w	r4, r4, #60	; 0x3c
 80016dc:	ea44 1492 	orr.w	r4, r4, r2, lsr #6
		*pos++ = base64_table[in[2] & 0x3f];
 80016e0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
		*pos++ = base64_table[((in[1] & 0x0f) << 2) | (in[2] >> 6)];
 80016e4:	5d3c      	ldrb	r4, [r7, r4]
		*pos++ = base64_table[in[2] & 0x3f];
 80016e6:	5cba      	ldrb	r2, [r7, r2]
		*pos++ = base64_table[((in[1] & 0x0f) << 2) | (in[2] >> 6)];
 80016e8:	f806 4c02 	strb.w	r4, [r6, #-2]
		*pos++ = base64_table[in[2] & 0x3f];
 80016ec:	f806 2c01 	strb.w	r2, [r6, #-1]
 80016f0:	e7b9      	b.n	8001666 <base64_encode+0x2a>
					      (in[1] >> 4)];
 80016f2:	7852      	ldrb	r2, [r2, #1]
			*pos++ = base64_table[((in[0] & 0x03) << 4) |
 80016f4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80016f8:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
			*pos++ = base64_table[(in[1] & 0x0f) << 2];
 80016fc:	0092      	lsls	r2, r2, #2
 80016fe:	f002 023c 	and.w	r2, r2, #60	; 0x3c
			*pos++ = base64_table[((in[0] & 0x03) << 4) |
 8001702:	5cf3      	ldrb	r3, [r6, r3]
 8001704:	7063      	strb	r3, [r4, #1]
			*pos++ = base64_table[(in[1] & 0x0f) << 2];
 8001706:	5cb3      	ldrb	r3, [r6, r2]
 8001708:	e7cb      	b.n	80016a2 <base64_encode+0x66>
 800170a:	bf00      	nop
 800170c:	08002294 	.word	0x08002294

08001710 <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
	uint8_t buf_v, n;

	if(huart->Instance==USART2){
 8001710:	6803      	ldr	r3, [r0, #0]
 8001712:	4a1a      	ldr	r2, [pc, #104]	; (800177c <HAL_UART_RxCpltCallback+0x6c>)
 8001714:	4293      	cmp	r3, r2
{
 8001716:	b510      	push	{r4, lr}
	if(huart->Instance==USART2){
 8001718:	d10c      	bne.n	8001734 <HAL_UART_RxCpltCallback+0x24>
		HAL_UART_Transmit(&huart2,(uint8_t *)Rx_Data2, 1,1000000);
 800171a:	2201      	movs	r2, #1
 800171c:	4918      	ldr	r1, [pc, #96]	; (8001780 <HAL_UART_RxCpltCallback+0x70>)
 800171e:	4b19      	ldr	r3, [pc, #100]	; (8001784 <HAL_UART_RxCpltCallback+0x74>)
 8001720:	4819      	ldr	r0, [pc, #100]	; (8001788 <HAL_UART_RxCpltCallback+0x78>)
 8001722:	f7ff fe29 	bl	8001378 <HAL_UART_Transmit>
		HAL_UART_Receive_IT(&huart2,(uint8_t *)Rx_Data2, 1);
 8001726:	4916      	ldr	r1, [pc, #88]	; (8001780 <HAL_UART_RxCpltCallback+0x70>)
 8001728:	4817      	ldr	r0, [pc, #92]	; (8001788 <HAL_UART_RxCpltCallback+0x78>)
 800172a:	2201      	movs	r2, #1
			Transfer5 = 1;
			Rx_Data5_cnt = 0;
		}
		HAL_UART_Receive_IT(&huart5,(uint8_t *)Rx_Data5, 1);
	}
}
 800172c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		HAL_UART_Receive_IT(&huart5,(uint8_t *)Rx_Data5, 1);
 8001730:	f7ff be7c 	b.w	800142c <HAL_UART_Receive_IT>
	else if(huart->Instance==UART5){
 8001734:	4a15      	ldr	r2, [pc, #84]	; (800178c <HAL_UART_RxCpltCallback+0x7c>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d11f      	bne.n	800177a <HAL_UART_RxCpltCallback+0x6a>
		if(Rx_Data5_cnt==0) for(n=0;n<150;n++) Rx_Buffer[n] = 0x00;
 800173a:	4a15      	ldr	r2, [pc, #84]	; (8001790 <HAL_UART_RxCpltCallback+0x80>)
 800173c:	7813      	ldrb	r3, [r2, #0]
 800173e:	b15b      	cbz	r3, 8001758 <HAL_UART_RxCpltCallback+0x48>
		buf_v = Rx_Data5[0];
 8001740:	4914      	ldr	r1, [pc, #80]	; (8001794 <HAL_UART_RxCpltCallback+0x84>)
 8001742:	7809      	ldrb	r1, [r1, #0]
		if(buf_v!='\n' && buf_v!=0x00) {
 8001744:	290a      	cmp	r1, #10
 8001746:	d10f      	bne.n	8001768 <HAL_UART_RxCpltCallback+0x58>
			Rx_Buffer[Rx_Data5_cnt] = buf_v;
 8001748:	4813      	ldr	r0, [pc, #76]	; (8001798 <HAL_UART_RxCpltCallback+0x88>)
 800174a:	54c1      	strb	r1, [r0, r3]
			Transfer5 = 1;
 800174c:	4b13      	ldr	r3, [pc, #76]	; (800179c <HAL_UART_RxCpltCallback+0x8c>)
 800174e:	2101      	movs	r1, #1
 8001750:	7019      	strb	r1, [r3, #0]
			Rx_Data5_cnt = 0;
 8001752:	2300      	movs	r3, #0
 8001754:	7013      	strb	r3, [r2, #0]
 8001756:	e00c      	b.n	8001772 <HAL_UART_RxCpltCallback+0x62>
		if(Rx_Data5_cnt==0) for(n=0;n<150;n++) Rx_Buffer[n] = 0x00;
 8001758:	480f      	ldr	r0, [pc, #60]	; (8001798 <HAL_UART_RxCpltCallback+0x88>)
 800175a:	4619      	mov	r1, r3
 800175c:	461c      	mov	r4, r3
 800175e:	540c      	strb	r4, [r1, r0]
 8001760:	3101      	adds	r1, #1
 8001762:	2996      	cmp	r1, #150	; 0x96
 8001764:	d1fb      	bne.n	800175e <HAL_UART_RxCpltCallback+0x4e>
 8001766:	e7eb      	b.n	8001740 <HAL_UART_RxCpltCallback+0x30>
		if(buf_v!='\n' && buf_v!=0x00) {
 8001768:	b119      	cbz	r1, 8001772 <HAL_UART_RxCpltCallback+0x62>
			Rx_Buffer[Rx_Data5_cnt++] = buf_v;
 800176a:	1c58      	adds	r0, r3, #1
 800176c:	7010      	strb	r0, [r2, #0]
 800176e:	4a0a      	ldr	r2, [pc, #40]	; (8001798 <HAL_UART_RxCpltCallback+0x88>)
 8001770:	54d1      	strb	r1, [r2, r3]
		HAL_UART_Receive_IT(&huart5,(uint8_t *)Rx_Data5, 1);
 8001772:	2201      	movs	r2, #1
 8001774:	4907      	ldr	r1, [pc, #28]	; (8001794 <HAL_UART_RxCpltCallback+0x84>)
 8001776:	480a      	ldr	r0, [pc, #40]	; (80017a0 <HAL_UART_RxCpltCallback+0x90>)
 8001778:	e7d8      	b.n	800172c <HAL_UART_RxCpltCallback+0x1c>
 800177a:	bd10      	pop	{r4, pc}
 800177c:	40004400 	.word	0x40004400
 8001780:	200000fc 	.word	0x200000fc
 8001784:	000f4240 	.word	0x000f4240
 8001788:	20000270 	.word	0x20000270
 800178c:	40005000 	.word	0x40005000
 8001790:	200000a5 	.word	0x200000a5
 8001794:	20000232 	.word	0x20000232
 8001798:	2000019c 	.word	0x2000019c
 800179c:	200000a8 	.word	0x200000a8
 80017a0:	2000015c 	.word	0x2000015c

080017a4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t snum = 0;

	if(htim->Instance==TIM2) {       // 1 sec interrupt
 80017a6:	6803      	ldr	r3, [r0, #0]
 80017a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017ac:	d110      	bne.n	80017d0 <HAL_TIM_PeriodElapsedCallback+0x2c>
		if(DemoCnt==3) DemoCnt = 0;
 80017ae:	4c25      	ldr	r4, [pc, #148]	; (8001844 <HAL_TIM_PeriodElapsedCallback+0xa0>)
		//HAL_UART_Transmit(&huart5,(uint8_t *)&DemoData[DemoCnt],79,1000000);
		HAL_UART_Transmit(&huart5,(uint8_t *)&dt,105,1000000);
 80017b0:	4925      	ldr	r1, [pc, #148]	; (8001848 <HAL_TIM_PeriodElapsedCallback+0xa4>)
		if(DemoCnt==3) DemoCnt = 0;
 80017b2:	7823      	ldrb	r3, [r4, #0]
		HAL_UART_Transmit(&huart5,(uint8_t *)&dt,105,1000000);
 80017b4:	4825      	ldr	r0, [pc, #148]	; (800184c <HAL_TIM_PeriodElapsedCallback+0xa8>)
		if(DemoCnt==3) DemoCnt = 0;
 80017b6:	2b03      	cmp	r3, #3
 80017b8:	bf04      	itt	eq
 80017ba:	2300      	moveq	r3, #0
 80017bc:	7023      	strbeq	r3, [r4, #0]
		HAL_UART_Transmit(&huart5,(uint8_t *)&dt,105,1000000);
 80017be:	2269      	movs	r2, #105	; 0x69
 80017c0:	4b23      	ldr	r3, [pc, #140]	; (8001850 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80017c2:	f7ff fdd9 	bl	8001378 <HAL_UART_Transmit>
		DemoCnt++;
 80017c6:	7823      	ldrb	r3, [r4, #0]
 80017c8:	3301      	adds	r3, #1
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	7023      	strb	r3, [r4, #0]
 80017ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}
	else if(htim->Instance==TIM3) {  // 0.5 sec interrupt
 80017d0:	4a20      	ldr	r2, [pc, #128]	; (8001854 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d129      	bne.n	800182a <HAL_TIM_PeriodElapsedCallback+0x86>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80017d6:	2120      	movs	r1, #32
 80017d8:	481f      	ldr	r0, [pc, #124]	; (8001858 <HAL_TIM_PeriodElapsedCallback+0xb4>)
		if(TLCD_LS==TLCD_DATA) TLCD_LS = 0;
		for(cnt=TLCD_LS;cnt<TLCD_DATA;cnt++) {
			KETIb[snum++] = KETI[cnt];
 80017da:	4d20      	ldr	r5, [pc, #128]	; (800185c <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80017dc:	4e20      	ldr	r6, [pc, #128]	; (8001860 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80017de:	4f21      	ldr	r7, [pc, #132]	; (8001864 <HAL_TIM_PeriodElapsedCallback+0xc0>)
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80017e0:	f7fe ff1d 	bl	800061e <HAL_GPIO_TogglePin>
		if(TLCD_LS==TLCD_DATA) TLCD_LS = 0;
 80017e4:	4b20      	ldr	r3, [pc, #128]	; (8001868 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80017e6:	781a      	ldrb	r2, [r3, #0]
 80017e8:	2a1f      	cmp	r2, #31
 80017ea:	bf04      	itt	eq
 80017ec:	2200      	moveq	r2, #0
 80017ee:	701a      	strbeq	r2, [r3, #0]
		for(cnt=TLCD_LS;cnt<TLCD_DATA;cnt++) {
 80017f0:	7819      	ldrb	r1, [r3, #0]
 80017f2:	b2c9      	uxtb	r1, r1
 80017f4:	2200      	movs	r2, #0
			KETIb[snum++] = KETI[cnt];
 80017f6:	440d      	add	r5, r1
 80017f8:	b2d4      	uxtb	r4, r2
		for(cnt=TLCD_LS;cnt<TLCD_DATA;cnt++) {
 80017fa:	1908      	adds	r0, r1, r4
 80017fc:	b2c0      	uxtb	r0, r0
 80017fe:	281e      	cmp	r0, #30
 8001800:	d914      	bls.n	800182c <HAL_TIM_PeriodElapsedCallback+0x88>
		}
		for(cnt=0;cnt<TLCD_LS;cnt++) {
 8001802:	2100      	movs	r1, #0
			KETIb[snum++] = KETI[cnt];
 8001804:	4f17      	ldr	r7, [pc, #92]	; (8001864 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001806:	f8df e054 	ldr.w	lr, [pc, #84]	; 800185c <HAL_TIM_PeriodElapsedCallback+0xb8>
		for(cnt=0;cnt<TLCD_LS;cnt++) {
 800180a:	7031      	strb	r1, [r6, #0]
 800180c:	4620      	mov	r0, r4
 800180e:	1b02      	subs	r2, r0, r4
 8001810:	781d      	ldrb	r5, [r3, #0]
 8001812:	b2d2      	uxtb	r2, r2
 8001814:	42aa      	cmp	r2, r5
 8001816:	d30d      	bcc.n	8001834 <HAL_TIM_PeriodElapsedCallback+0x90>
 8001818:	b101      	cbz	r1, 800181c <HAL_TIM_PeriodElapsedCallback+0x78>
 800181a:	7032      	strb	r2, [r6, #0]
		}
		TLCD_LS++;
 800181c:	781a      	ldrb	r2, [r3, #0]
 800181e:	3201      	adds	r2, #1
 8001820:	b2d2      	uxtb	r2, r2
 8001822:	701a      	strb	r2, [r3, #0]
		TLCD_ON = 1;
 8001824:	4b11      	ldr	r3, [pc, #68]	; (800186c <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001826:	2201      	movs	r2, #1
 8001828:	701a      	strb	r2, [r3, #0]
 800182a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			KETIb[snum++] = KETI[cnt];
 800182c:	5ca8      	ldrb	r0, [r5, r2]
 800182e:	55d0      	strb	r0, [r2, r7]
 8001830:	3201      	adds	r2, #1
 8001832:	e7e1      	b.n	80017f8 <HAL_TIM_PeriodElapsedCallback+0x54>
			KETIb[snum++] = KETI[cnt];
 8001834:	1c45      	adds	r5, r0, #1
 8001836:	f81e 2002 	ldrb.w	r2, [lr, r2]
 800183a:	543a      	strb	r2, [r7, r0]
 800183c:	2101      	movs	r1, #1
 800183e:	b2e8      	uxtb	r0, r5
 8001840:	e7e5      	b.n	800180e <HAL_TIM_PeriodElapsedCallback+0x6a>
 8001842:	bf00      	nop
 8001844:	200000a4 	.word	0x200000a4
 8001848:	200002b0 	.word	0x200002b0
 800184c:	2000015c 	.word	0x2000015c
 8001850:	000f4240 	.word	0x000f4240
 8001854:	40000400 	.word	0x40000400
 8001858:	40020000 	.word	0x40020000
 800185c:	20000004 	.word	0x20000004
 8001860:	200000fe 	.word	0x200000fe
 8001864:	200000ff 	.word	0x200000ff
 8001868:	200000a6 	.word	0x200000a6
 800186c:	200000a7 	.word	0x200000a7

08001870 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8001870:	b530      	push	{r4, r5, lr}
 8001872:	b095      	sub	sp, #84	; 0x54

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
 8001874:	4b28      	ldr	r3, [pc, #160]	; (8001918 <SystemClock_Config+0xa8>)
 8001876:	2100      	movs	r1, #0
 8001878:	9100      	str	r1, [sp, #0]
 800187a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800187c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001880:	641a      	str	r2, [r3, #64]	; 0x40
 8001882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001884:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001888:	9300      	str	r3, [sp, #0]
 800188a:	9b00      	ldr	r3, [sp, #0]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800188c:	4b23      	ldr	r3, [pc, #140]	; (800191c <SystemClock_Config+0xac>)
 800188e:	9101      	str	r1, [sp, #4]
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001896:	601a      	str	r2, [r3, #0]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800189e:	9301      	str	r3, [sp, #4]
 80018a0:	9b01      	ldr	r3, [sp, #4]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018a2:	2301      	movs	r3, #1
 80018a4:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018a6:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018a8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018ac:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018ae:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80018b0:	2504      	movs	r5, #4
  RCC_OscInitStruct.PLL.PLLN = 180;
 80018b2:	23b4      	movs	r3, #180	; 0xb4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018b4:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018b6:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = 4;
 80018b8:	950f      	str	r5, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80018ba:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018bc:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80018be:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80018c0:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018c2:	f7fe ffe9 	bl	8000898 <HAL_RCC_OscConfig>
 80018c6:	b100      	cbz	r0, 80018ca <SystemClock_Config+0x5a>
 80018c8:	e7fe      	b.n	80018c8 <SystemClock_Config+0x58>
  {
    Error_Handler();
  }

  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80018ca:	f7fe fead 	bl	8000628 <HAL_PWREx_EnableOverDrive>
 80018ce:	b100      	cbz	r0, 80018d2 <SystemClock_Config+0x62>
 80018d0:	e7fe      	b.n	80018d0 <SystemClock_Config+0x60>
  {
    Error_Handler();
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018d2:	230f      	movs	r3, #15
 80018d4:	9302      	str	r3, [sp, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80018d6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018da:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80018dc:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80018de:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80018e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80018e4:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018e6:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80018e8:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80018ea:	f7fe fee9 	bl	80006c0 <HAL_RCC_ClockConfig>
 80018ee:	4604      	mov	r4, r0
 80018f0:	b100      	cbz	r0, 80018f4 <SystemClock_Config+0x84>
 80018f2:	e7fe      	b.n	80018f2 <SystemClock_Config+0x82>
  {
    Error_Handler();
  }

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000000);
 80018f4:	f7fe ff9a 	bl	800082c <HAL_RCC_GetHCLKFreq>
 80018f8:	4b09      	ldr	r3, [pc, #36]	; (8001920 <SystemClock_Config+0xb0>)
 80018fa:	fbb0 f0f3 	udiv	r0, r0, r3
 80018fe:	f7fe fd75 	bl	80003ec <HAL_SYSTICK_Config>

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001902:	4628      	mov	r0, r5
 8001904:	f7fe fd88 	bl	8000418 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001908:	4622      	mov	r2, r4
 800190a:	4621      	mov	r1, r4
 800190c:	f04f 30ff 	mov.w	r0, #4294967295
 8001910:	f7fe fd2c 	bl	800036c <HAL_NVIC_SetPriority>
}
 8001914:	b015      	add	sp, #84	; 0x54
 8001916:	bd30      	pop	{r4, r5, pc}
 8001918:	40023800 	.word	0x40023800
 800191c:	40007000 	.word	0x40007000
 8001920:	000f4240 	.word	0x000f4240

08001924 <main>:
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b0a2      	sub	sp, #136	; 0x88
	unsigned char snd_str[65]= {0x01,0x01,0x02,0x00,};
 8001928:	2241      	movs	r2, #65	; 0x41
 800192a:	2100      	movs	r1, #0
 800192c:	a811      	add	r0, sp, #68	; 0x44
 800192e:	f000 fc16 	bl	800215e <memset>
 8001932:	2501      	movs	r5, #1
 8001934:	2302      	movs	r3, #2
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001936:	2400      	movs	r4, #0
	unsigned char snd_str[65]= {0x01,0x01,0x02,0x00,};
 8001938:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 800193c:	f88d 5044 	strb.w	r5, [sp, #68]	; 0x44
 8001940:	f88d 5045 	strb.w	r5, [sp, #69]	; 0x45
  HAL_Init();
 8001944:	f7fe fcca 	bl	80002dc <HAL_Init>
  SystemClock_Config();
 8001948:	f7ff ff92 	bl	8001870 <SystemClock_Config>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800194c:	4b6b      	ldr	r3, [pc, #428]	; (8001afc <main+0x1d8>)
 800194e:	9405      	str	r4, [sp, #20]
 8001950:	6b1a      	ldr	r2, [r3, #48]	; 0x30

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001952:	486b      	ldr	r0, [pc, #428]	; (8001b00 <main+0x1dc>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001954:	f042 0204 	orr.w	r2, r2, #4
 8001958:	631a      	str	r2, [r3, #48]	; 0x30
 800195a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800195c:	f002 0204 	and.w	r2, r2, #4
 8001960:	9205      	str	r2, [sp, #20]
 8001962:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001964:	9406      	str	r4, [sp, #24]
 8001966:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001968:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800196c:	631a      	str	r2, [r3, #48]	; 0x30
 800196e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001970:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001974:	9206      	str	r2, [sp, #24]
 8001976:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001978:	9407      	str	r4, [sp, #28]
 800197a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800197c:	432a      	orrs	r2, r5
 800197e:	631a      	str	r2, [r3, #48]	; 0x30
 8001980:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001982:	402a      	ands	r2, r5
 8001984:	9207      	str	r2, [sp, #28]
 8001986:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001988:	9408      	str	r4, [sp, #32]
 800198a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800198c:	f042 0208 	orr.w	r2, r2, #8
 8001990:	631a      	str	r2, [r3, #48]	; 0x30
 8001992:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001994:	f002 0208 	and.w	r2, r2, #8
 8001998:	9208      	str	r2, [sp, #32]
 800199a:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800199c:	9409      	str	r4, [sp, #36]	; 0x24
 800199e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019a0:	f042 0202 	orr.w	r2, r2, #2
 80019a4:	631a      	str	r2, [r3, #48]	; 0x30
 80019a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a8:	f003 0302 	and.w	r3, r3, #2
 80019ac:	9309      	str	r3, [sp, #36]	; 0x24
 80019ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Pin = B1_Pin;
 80019b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019b4:	930c      	str	r3, [sp, #48]	; 0x30
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80019b6:	a90c      	add	r1, sp, #48	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80019b8:	4b52      	ldr	r3, [pc, #328]	; (8001b04 <main+0x1e0>)
 80019ba:	930d      	str	r3, [sp, #52]	; 0x34

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 
                           PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 80019bc:	f640 470f 	movw	r7, #3087	; 0xc0f
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c0:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80019c2:	f7fe fd4d 	bl	8000460 <HAL_GPIO_Init>
                          |GPIO_PIN_10|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019c6:	a90c      	add	r1, sp, #48	; 0x30
 80019c8:	484d      	ldr	r0, [pc, #308]	; (8001b00 <main+0x1dc>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 80019ca:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019cc:	950d      	str	r5, [sp, #52]	; 0x34

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80019ce:	2620      	movs	r6, #32
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d0:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d2:	940f      	str	r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019d4:	f7fe fd44 	bl	8000460 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80019d8:	a90c      	add	r1, sp, #48	; 0x30
 80019da:	484b      	ldr	r0, [pc, #300]	; (8001b08 <main+0x1e4>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019dc:	950d      	str	r5, [sp, #52]	; 0x34
  GPIO_InitStruct.Pin = LD2_Pin;
 80019de:	960c      	str	r6, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e0:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e2:	940f      	str	r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80019e4:	f7fe fd3c 	bl	8000460 <HAL_GPIO_Init>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 80019e8:	4639      	mov	r1, r7
 80019ea:	4622      	mov	r2, r4
 80019ec:	4844      	ldr	r0, [pc, #272]	; (8001b00 <main+0x1dc>)
  htim2.Instance = TIM2;
 80019ee:	4d47      	ldr	r5, [pc, #284]	; (8001b0c <main+0x1e8>)
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 80019f0:	f7fe fe10 	bl	8000614 <HAL_GPIO_WritePin>
                          |GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80019f4:	4844      	ldr	r0, [pc, #272]	; (8001b08 <main+0x1e4>)
 80019f6:	4622      	mov	r2, r4
 80019f8:	4631      	mov	r1, r6
 80019fa:	f7fe fe0b 	bl	8000614 <HAL_GPIO_WritePin>
  htim2.Init.Prescaler = 9000;
 80019fe:	f242 3728 	movw	r7, #9000	; 0x2328
 8001a02:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a06:	e885 0088 	stmia.w	r5, {r3, r7}
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a0a:	4628      	mov	r0, r5
  htim2.Init.Period = 49999;
 8001a0c:	f24c 334f 	movw	r3, #49999	; 0xc34f
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a10:	60ac      	str	r4, [r5, #8]
  htim2.Init.Period = 49999;
 8001a12:	60eb      	str	r3, [r5, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a14:	612c      	str	r4, [r5, #16]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a16:	f7ff faf3 	bl	8001000 <HAL_TIM_Base_Init>
 8001a1a:	b100      	cbz	r0, 8001a1e <main+0xfa>
 8001a1c:	e7fe      	b.n	8001a1c <main+0xf8>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a1e:	f44f 5680 	mov.w	r6, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a22:	a90c      	add	r1, sp, #48	; 0x30
 8001a24:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a26:	960c      	str	r6, [sp, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a28:	f7ff f927 	bl	8000c7a <HAL_TIM_ConfigClockSource>
 8001a2c:	b100      	cbz	r0, 8001a30 <main+0x10c>
 8001a2e:	e7fe      	b.n	8001a2e <main+0x10a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a30:	900a      	str	r0, [sp, #40]	; 0x28
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a32:	900b      	str	r0, [sp, #44]	; 0x2c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a34:	a90a      	add	r1, sp, #40	; 0x28
 8001a36:	4628      	mov	r0, r5
 8001a38:	f7ff fafc 	bl	8001034 <HAL_TIMEx_MasterConfigSynchronization>
 8001a3c:	b100      	cbz	r0, 8001a40 <main+0x11c>
 8001a3e:	e7fe      	b.n	8001a3e <main+0x11a>
  htim3.Instance = TIM3;
 8001a40:	4c33      	ldr	r4, [pc, #204]	; (8001b10 <main+0x1ec>)
 8001a42:	4b34      	ldr	r3, [pc, #208]	; (8001b14 <main+0x1f0>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a44:	60a0      	str	r0, [r4, #8]
  htim3.Init.Prescaler = 9000;
 8001a46:	e884 0088 	stmia.w	r4, {r3, r7}
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a4a:	6120      	str	r0, [r4, #16]
  htim3.Init.Period = 4999;
 8001a4c:	f241 3387 	movw	r3, #4999	; 0x1387
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a50:	4620      	mov	r0, r4
  htim3.Init.Period = 4999;
 8001a52:	60e3      	str	r3, [r4, #12]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a54:	f7ff fad4 	bl	8001000 <HAL_TIM_Base_Init>
 8001a58:	b100      	cbz	r0, 8001a5c <main+0x138>
 8001a5a:	e7fe      	b.n	8001a5a <main+0x136>
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a5c:	a90c      	add	r1, sp, #48	; 0x30
 8001a5e:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a60:	960c      	str	r6, [sp, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a62:	f7ff f90a 	bl	8000c7a <HAL_TIM_ConfigClockSource>
 8001a66:	b100      	cbz	r0, 8001a6a <main+0x146>
 8001a68:	e7fe      	b.n	8001a68 <main+0x144>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a6a:	900a      	str	r0, [sp, #40]	; 0x28
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a6c:	900b      	str	r0, [sp, #44]	; 0x2c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a6e:	a90a      	add	r1, sp, #40	; 0x28
 8001a70:	4620      	mov	r0, r4
 8001a72:	f7ff fadf 	bl	8001034 <HAL_TIMEx_MasterConfigSynchronization>
 8001a76:	b100      	cbz	r0, 8001a7a <main+0x156>
 8001a78:	e7fe      	b.n	8001a78 <main+0x154>
  htim4.Instance = TIM4;
 8001a7a:	4c27      	ldr	r4, [pc, #156]	; (8001b18 <main+0x1f4>)
 8001a7c:	4b27      	ldr	r3, [pc, #156]	; (8001b1c <main+0x1f8>)
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a7e:	60a0      	str	r0, [r4, #8]
  htim4.Init.Prescaler = 9000;
 8001a80:	e884 0088 	stmia.w	r4, {r3, r7}
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a84:	6120      	str	r0, [r4, #16]
  htim4.Init.Period = 999;
 8001a86:	f240 33e7 	movw	r3, #999	; 0x3e7
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001a8a:	4620      	mov	r0, r4
  htim4.Init.Period = 999;
 8001a8c:	60e3      	str	r3, [r4, #12]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001a8e:	f7ff fab7 	bl	8001000 <HAL_TIM_Base_Init>
 8001a92:	b100      	cbz	r0, 8001a96 <main+0x172>
 8001a94:	e7fe      	b.n	8001a94 <main+0x170>
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001a96:	a90c      	add	r1, sp, #48	; 0x30
 8001a98:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a9a:	960c      	str	r6, [sp, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001a9c:	f7ff f8ed 	bl	8000c7a <HAL_TIM_ConfigClockSource>
 8001aa0:	b100      	cbz	r0, 8001aa4 <main+0x180>
 8001aa2:	e7fe      	b.n	8001aa2 <main+0x17e>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001aa4:	900a      	str	r0, [sp, #40]	; 0x28
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aa6:	900b      	str	r0, [sp, #44]	; 0x2c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001aa8:	a90a      	add	r1, sp, #40	; 0x28
 8001aaa:	4620      	mov	r0, r4
 8001aac:	f7ff fac2 	bl	8001034 <HAL_TIMEx_MasterConfigSynchronization>
 8001ab0:	b100      	cbz	r0, 8001ab4 <main+0x190>
 8001ab2:	e7fe      	b.n	8001ab2 <main+0x18e>
  huart5.Instance = UART5;
 8001ab4:	4b1a      	ldr	r3, [pc, #104]	; (8001b20 <main+0x1fc>)
  huart5.Init.BaudRate = 115200;
 8001ab6:	4a1b      	ldr	r2, [pc, #108]	; (8001b24 <main+0x200>)
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001ab8:	6098      	str	r0, [r3, #8]
  huart5.Init.BaudRate = 115200;
 8001aba:	f44f 34e1 	mov.w	r4, #115200	; 0x1c200
 8001abe:	e883 0014 	stmia.w	r3, {r2, r4}
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001ac2:	60d8      	str	r0, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001ac4:	6118      	str	r0, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001ac6:	220c      	movs	r2, #12
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ac8:	6198      	str	r0, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001aca:	61d8      	str	r0, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001acc:	4618      	mov	r0, r3
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001ace:	615a      	str	r2, [r3, #20]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001ad0:	f7ff fc24 	bl	800131c <HAL_UART_Init>
 8001ad4:	b100      	cbz	r0, 8001ad8 <main+0x1b4>
 8001ad6:	e7fe      	b.n	8001ad6 <main+0x1b2>
  huart2.Instance = USART2;
 8001ad8:	4813      	ldr	r0, [pc, #76]	; (8001b28 <main+0x204>)
 8001ada:	4b14      	ldr	r3, [pc, #80]	; (8001b2c <main+0x208>)
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001adc:	220c      	movs	r2, #12
  huart2.Init.BaudRate = 115200;
 8001ade:	e880 0018 	stmia.w	r0, {r3, r4}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ae6:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ae8:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001aea:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001aec:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001aee:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001af0:	f7ff fc14 	bl	800131c <HAL_UART_Init>
 8001af4:	4601      	mov	r1, r0
 8001af6:	b1d8      	cbz	r0, 8001b30 <main+0x20c>
 8001af8:	e7fe      	b.n	8001af8 <main+0x1d4>
 8001afa:	bf00      	nop
 8001afc:	40023800 	.word	0x40023800
 8001b00:	40020800 	.word	0x40020800
 8001b04:	10120000 	.word	0x10120000
 8001b08:	40020000 	.word	0x40020000
 8001b0c:	20000234 	.word	0x20000234
 8001b10:	20000120 	.word	0x20000120
 8001b14:	40000400 	.word	0x40000400
 8001b18:	200000bc 	.word	0x200000bc
 8001b1c:	40000800 	.word	0x40000800
 8001b20:	2000015c 	.word	0x2000015c
 8001b24:	40005000 	.word	0x40005000
 8001b28:	20000270 	.word	0x20000270
 8001b2c:	40004400 	.word	0x40004400
  memset(dt,0x00,105);
 8001b30:	2269      	movs	r2, #105	; 0x69
 8001b32:	484a      	ldr	r0, [pc, #296]	; (8001c5c <main+0x338>)
 8001b34:	f000 fb13 	bl	800215e <memset>
  memcpy(dt,"at+data=0001A5:",15);
 8001b38:	4b49      	ldr	r3, [pc, #292]	; (8001c60 <main+0x33c>)
 8001b3a:	4a48      	ldr	r2, [pc, #288]	; (8001c5c <main+0x338>)
 8001b3c:	f103 010c 	add.w	r1, r3, #12
 8001b40:	4615      	mov	r5, r2
 8001b42:	f853 0b04 	ldr.w	r0, [r3], #4
 8001b46:	f842 0b04 	str.w	r0, [r2], #4
 8001b4a:	428b      	cmp	r3, r1
 8001b4c:	d1f9      	bne.n	8001b42 <main+0x21e>
 8001b4e:	8819      	ldrh	r1, [r3, #0]
 8001b50:	789b      	ldrb	r3, [r3, #2]
 8001b52:	7093      	strb	r3, [r2, #2]
 8001b54:	8011      	strh	r1, [r2, #0]
  e = base64_encode(snd_str,65,&elen);
 8001b56:	a811      	add	r0, sp, #68	; 0x44
 8001b58:	4a42      	ldr	r2, [pc, #264]	; (8001c64 <main+0x340>)
 8001b5a:	4c43      	ldr	r4, [pc, #268]	; (8001c68 <main+0x344>)
 8001b5c:	2141      	movs	r1, #65	; 0x41
 8001b5e:	f7ff fd6d 	bl	800163c <base64_encode>
  memcpy(dt+15,e+0,88);
 8001b62:	2258      	movs	r2, #88	; 0x58
  e = base64_encode(snd_str,65,&elen);
 8001b64:	6020      	str	r0, [r4, #0]
 8001b66:	4601      	mov	r1, r0
  memcpy(dt+15,e+0,88);
 8001b68:	4840      	ldr	r0, [pc, #256]	; (8001c6c <main+0x348>)
 8001b6a:	f000 faed 	bl	8002148 <memcpy>
  dt[103] = '\r';
 8001b6e:	230d      	movs	r3, #13
 8001b70:	f885 3067 	strb.w	r3, [r5, #103]	; 0x67
  dt[104] = '\n';
 8001b74:	230a      	movs	r3, #10
 8001b76:	f885 3068 	strb.w	r3, [r5, #104]	; 0x68
 8001b7a:	46a1      	mov	r9, r4
	while(HAL_UART_Receive_IT(&huart2, (uint8_t *)Rx_Data2, 1)!=HAL_OK);
 8001b7c:	4d3c      	ldr	r5, [pc, #240]	; (8001c70 <main+0x34c>)
 8001b7e:	4c3d      	ldr	r4, [pc, #244]	; (8001c74 <main+0x350>)
 8001b80:	2201      	movs	r2, #1
 8001b82:	4629      	mov	r1, r5
 8001b84:	4620      	mov	r0, r4
 8001b86:	f7ff fc51 	bl	800142c <HAL_UART_Receive_IT>
 8001b8a:	2800      	cmp	r0, #0
 8001b8c:	d1f8      	bne.n	8001b80 <main+0x25c>
	while(HAL_UART_Receive_IT(&huart5, (uint8_t *)Rx_Data5, 1)!=HAL_OK);
 8001b8e:	4d3a      	ldr	r5, [pc, #232]	; (8001c78 <main+0x354>)
 8001b90:	4c3a      	ldr	r4, [pc, #232]	; (8001c7c <main+0x358>)
 8001b92:	2201      	movs	r2, #1
 8001b94:	4629      	mov	r1, r5
 8001b96:	4620      	mov	r0, r4
 8001b98:	f7ff fc48 	bl	800142c <HAL_UART_Receive_IT>
 8001b9c:	2800      	cmp	r0, #0
 8001b9e:	d1f8      	bne.n	8001b92 <main+0x26e>
	while(HAL_TIM_Base_Start_IT(&htim2)!=HAL_OK);
 8001ba0:	4c37      	ldr	r4, [pc, #220]	; (8001c80 <main+0x35c>)
 8001ba2:	4620      	mov	r0, r4
 8001ba4:	f7ff f85e 	bl	8000c64 <HAL_TIM_Base_Start_IT>
 8001ba8:	2800      	cmp	r0, #0
 8001baa:	d1fa      	bne.n	8001ba2 <main+0x27e>
	while(HAL_TIM_Base_Start_IT(&htim3)!=HAL_OK);
 8001bac:	4c35      	ldr	r4, [pc, #212]	; (8001c84 <main+0x360>)
 8001bae:	4620      	mov	r0, r4
 8001bb0:	f7ff f858 	bl	8000c64 <HAL_TIM_Base_Start_IT>
 8001bb4:	2800      	cmp	r0, #0
 8001bb6:	d1fa      	bne.n	8001bae <main+0x28a>
	while(HAL_TIM_Base_Start_IT(&htim4)!=HAL_OK);
 8001bb8:	4d33      	ldr	r5, [pc, #204]	; (8001c88 <main+0x364>)
 8001bba:	4628      	mov	r0, r5
 8001bbc:	f7ff f852 	bl	8000c64 <HAL_TIM_Base_Start_IT>
 8001bc0:	4604      	mov	r4, r0
 8001bc2:	2800      	cmp	r0, #0
 8001bc4:	d1f9      	bne.n	8001bba <main+0x296>
	TLCD_Init(GPIOC,GPIO_PIN_10,GPIO_PIN_11,GPIO_PIN_0,GPIO_PIN_1,GPIO_PIN_2,GPIO_PIN_3);
 8001bc6:	2308      	movs	r3, #8
 8001bc8:	9302      	str	r3, [sp, #8]
 8001bca:	2502      	movs	r5, #2
 8001bcc:	2304      	movs	r3, #4
 8001bce:	9301      	str	r3, [sp, #4]
 8001bd0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001bda:	482c      	ldr	r0, [pc, #176]	; (8001c8c <main+0x368>)
 8001bdc:	9500      	str	r5, [sp, #0]
 8001bde:	f000 f9e7 	bl	8001fb0 <TLCD_Init>
	TLCD_Puts(1,0,"****************");
 8001be2:	4621      	mov	r1, r4
 8001be4:	4a2a      	ldr	r2, [pc, #168]	; (8001c90 <main+0x36c>)
	  HAL_UART_Transmit(&huart2,(uint8_t *)e,88,1000000);
 8001be6:	4e23      	ldr	r6, [pc, #140]	; (8001c74 <main+0x350>)
		  HAL_UART_Transmit(&huart2,(uint8_t *)Rx_Buffer,strlen((char *)Rx_Buffer),1000000);
 8001be8:	4f2a      	ldr	r7, [pc, #168]	; (8001c94 <main+0x370>)
	TLCD_Puts(1,0,"****************");
 8001bea:	2001      	movs	r0, #1
 8001bec:	f000 fa6d 	bl	80020ca <TLCD_Puts>
	TLCD_Puts(2,0,"* LoRA  Device *");
 8001bf0:	4621      	mov	r1, r4
 8001bf2:	4a29      	ldr	r2, [pc, #164]	; (8001c98 <main+0x374>)
	  HAL_UART_Transmit(&huart2,(uint8_t *)e,88,1000000);
 8001bf4:	4c29      	ldr	r4, [pc, #164]	; (8001c9c <main+0x378>)
	TLCD_Puts(2,0,"* LoRA  Device *");
 8001bf6:	4628      	mov	r0, r5
 8001bf8:	f000 fa67 	bl	80020ca <TLCD_Puts>
	HAL_UART_Transmit(&huart2,(uint8_t *)"This is \r\n",10,1000000);
 8001bfc:	4b27      	ldr	r3, [pc, #156]	; (8001c9c <main+0x378>)
 8001bfe:	4928      	ldr	r1, [pc, #160]	; (8001ca0 <main+0x37c>)
 8001c00:	481c      	ldr	r0, [pc, #112]	; (8001c74 <main+0x350>)
 8001c02:	220a      	movs	r2, #10
 8001c04:	f7ff fbb8 	bl	8001378 <HAL_UART_Transmit>
	  if(TLCD_ON) {
 8001c08:	f8df 809c 	ldr.w	r8, [pc, #156]	; 8001ca8 <main+0x384>
		  TLCD_Puts(1,0,KETIb);
 8001c0c:	f8df a09c 	ldr.w	sl, [pc, #156]	; 8001cac <main+0x388>
	  if(TLCD_ON) {
 8001c10:	f898 3000 	ldrb.w	r3, [r8]
 8001c14:	b13b      	cbz	r3, 8001c26 <main+0x302>
		  TLCD_Puts(1,0,KETIb);
 8001c16:	4652      	mov	r2, sl
 8001c18:	2100      	movs	r1, #0
 8001c1a:	2001      	movs	r0, #1
 8001c1c:	f000 fa55 	bl	80020ca <TLCD_Puts>
		  TLCD_ON = 0;
 8001c20:	2300      	movs	r3, #0
 8001c22:	f888 3000 	strb.w	r3, [r8]
	  HAL_UART_Transmit(&huart2,(uint8_t *)e,88,1000000);
 8001c26:	4623      	mov	r3, r4
 8001c28:	2258      	movs	r2, #88	; 0x58
 8001c2a:	f8d9 1000 	ldr.w	r1, [r9]
	  if(Transfer5 == 1) {
 8001c2e:	4d1d      	ldr	r5, [pc, #116]	; (8001ca4 <main+0x380>)
	  HAL_UART_Transmit(&huart2,(uint8_t *)e,88,1000000);
 8001c30:	4630      	mov	r0, r6
 8001c32:	f7ff fba1 	bl	8001378 <HAL_UART_Transmit>
	  HAL_Delay(1000000);
 8001c36:	4620      	mov	r0, r4
 8001c38:	f7fe fb78 	bl	800032c <HAL_Delay>
	  if(Transfer5 == 1) {
 8001c3c:	782b      	ldrb	r3, [r5, #0]
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d1e6      	bne.n	8001c10 <main+0x2ec>
		  HAL_UART_Transmit(&huart2,(uint8_t *)Rx_Buffer,strlen((char *)Rx_Buffer),1000000);
 8001c42:	4638      	mov	r0, r7
 8001c44:	f7fe fade 	bl	8000204 <strlen>
 8001c48:	4623      	mov	r3, r4
 8001c4a:	b282      	uxth	r2, r0
 8001c4c:	4639      	mov	r1, r7
 8001c4e:	4630      	mov	r0, r6
 8001c50:	f7ff fb92 	bl	8001378 <HAL_UART_Transmit>
		  Transfer5 = 0;
 8001c54:	2300      	movs	r3, #0
 8001c56:	702b      	strb	r3, [r5, #0]
 8001c58:	e7d6      	b.n	8001c08 <main+0x2e4>
 8001c5a:	bf00      	nop
 8001c5c:	200002b0 	.word	0x200002b0
 8001c60:	080022d4 	.word	0x080022d4
 8001c64:	20000324 	.word	0x20000324
 8001c68:	2000031c 	.word	0x2000031c
 8001c6c:	200002bf 	.word	0x200002bf
 8001c70:	200000fc 	.word	0x200000fc
 8001c74:	20000270 	.word	0x20000270
 8001c78:	20000232 	.word	0x20000232
 8001c7c:	2000015c 	.word	0x2000015c
 8001c80:	20000234 	.word	0x20000234
 8001c84:	20000120 	.word	0x20000120
 8001c88:	200000bc 	.word	0x200000bc
 8001c8c:	40020800 	.word	0x40020800
 8001c90:	080022e4 	.word	0x080022e4
 8001c94:	2000019c 	.word	0x2000019c
 8001c98:	080022f5 	.word	0x080022f5
 8001c9c:	000f4240 	.word	0x000f4240
 8001ca0:	08002306 	.word	0x08002306
 8001ca4:	200000a8 	.word	0x200000a8
 8001ca8:	200000a7 	.word	0x200000a7
 8001cac:	200000ff 	.word	0x200000ff

08001cb0 <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cb0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001cb2:	2007      	movs	r0, #7
 8001cb4:	f7fe fb48 	bl	8000348 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8001cb8:	2200      	movs	r2, #0
 8001cba:	4611      	mov	r1, r2
 8001cbc:	f06f 000b 	mvn.w	r0, #11
 8001cc0:	f7fe fb54 	bl	800036c <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	4611      	mov	r1, r2
 8001cc8:	f06f 000a 	mvn.w	r0, #10
 8001ccc:	f7fe fb4e 	bl	800036c <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	4611      	mov	r1, r2
 8001cd4:	f06f 0009 	mvn.w	r0, #9
 8001cd8:	f7fe fb48 	bl	800036c <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8001cdc:	2200      	movs	r2, #0
 8001cde:	4611      	mov	r1, r2
 8001ce0:	f06f 0004 	mvn.w	r0, #4
 8001ce4:	f7fe fb42 	bl	800036c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8001ce8:	2200      	movs	r2, #0
 8001cea:	4611      	mov	r1, r2
 8001cec:	f06f 0003 	mvn.w	r0, #3
 8001cf0:	f7fe fb3c 	bl	800036c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	4611      	mov	r1, r2
 8001cf8:	f06f 0001 	mvn.w	r0, #1
 8001cfc:	f7fe fb36 	bl	800036c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001d00:	2200      	movs	r2, #0
 8001d02:	4611      	mov	r1, r2
 8001d04:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d08:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001d0c:	f7fe bb2e 	b.w	800036c <HAL_NVIC_SetPriority>

08001d10 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d10:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  if(htim_base->Instance==TIM2)
 8001d12:	6803      	ldr	r3, [r0, #0]
 8001d14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d18:	d116      	bne.n	8001d48 <HAL_TIM_Base_MspInit+0x38>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8001d20:	9201      	str	r2, [sp, #4]
 8001d22:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001d24:	f041 0101 	orr.w	r1, r1, #1
 8001d28:	6419      	str	r1, [r3, #64]	; 0x40
 8001d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2c:	f003 0301 	and.w	r3, r3, #1
 8001d30:	9301      	str	r3, [sp, #4]
    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001d32:	201c      	movs	r0, #28
 8001d34:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d36:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001d38:	f7fe fb18 	bl	800036c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001d3c:	201c      	movs	r0, #28
  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001d3e:	f7fe fb49 	bl	80003d4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001d42:	b005      	add	sp, #20
 8001d44:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(htim_base->Instance==TIM3)
 8001d48:	4a14      	ldr	r2, [pc, #80]	; (8001d9c <HAL_TIM_Base_MspInit+0x8c>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d111      	bne.n	8001d72 <HAL_TIM_Base_MspInit+0x62>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d4e:	2200      	movs	r2, #0
 8001d50:	4b13      	ldr	r3, [pc, #76]	; (8001da0 <HAL_TIM_Base_MspInit+0x90>)
 8001d52:	9202      	str	r2, [sp, #8]
 8001d54:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001d56:	f041 0102 	orr.w	r1, r1, #2
 8001d5a:	6419      	str	r1, [r3, #64]	; 0x40
 8001d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5e:	f003 0302 	and.w	r3, r3, #2
 8001d62:	9302      	str	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001d64:	201d      	movs	r0, #29
 8001d66:	4611      	mov	r1, r2
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d68:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001d6a:	f7fe faff 	bl	800036c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001d6e:	201d      	movs	r0, #29
 8001d70:	e7e5      	b.n	8001d3e <HAL_TIM_Base_MspInit+0x2e>
  else if(htim_base->Instance==TIM4)
 8001d72:	4a0c      	ldr	r2, [pc, #48]	; (8001da4 <HAL_TIM_Base_MspInit+0x94>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d1e4      	bne.n	8001d42 <HAL_TIM_Base_MspInit+0x32>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001d78:	2200      	movs	r2, #0
 8001d7a:	4b09      	ldr	r3, [pc, #36]	; (8001da0 <HAL_TIM_Base_MspInit+0x90>)
 8001d7c:	9203      	str	r2, [sp, #12]
 8001d7e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001d80:	f041 0104 	orr.w	r1, r1, #4
 8001d84:	6419      	str	r1, [r3, #64]	; 0x40
 8001d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d88:	f003 0304 	and.w	r3, r3, #4
 8001d8c:	9303      	str	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001d8e:	201e      	movs	r0, #30
 8001d90:	4611      	mov	r1, r2
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001d92:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001d94:	f7fe faea 	bl	800036c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001d98:	201e      	movs	r0, #30
 8001d9a:	e7d0      	b.n	8001d3e <HAL_TIM_Base_MspInit+0x2e>
 8001d9c:	40000400 	.word	0x40000400
 8001da0:	40023800 	.word	0x40023800
 8001da4:	40000800 	.word	0x40000800

08001da8 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001da8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==UART5)
 8001dac:	6803      	ldr	r3, [r0, #0]
 8001dae:	4a2d      	ldr	r2, [pc, #180]	; (8001e64 <HAL_UART_MspInit+0xbc>)
 8001db0:	4293      	cmp	r3, r2
{
 8001db2:	b088      	sub	sp, #32
  if(huart->Instance==UART5)
 8001db4:	d132      	bne.n	8001e1c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001db6:	4b2c      	ldr	r3, [pc, #176]	; (8001e68 <HAL_UART_MspInit+0xc0>)
    GPIO_InitStruct.Pin = GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001db8:	482c      	ldr	r0, [pc, #176]	; (8001e6c <HAL_UART_MspInit+0xc4>)
    __HAL_RCC_UART5_CLK_ENABLE();
 8001dba:	2500      	movs	r5, #0
 8001dbc:	9501      	str	r5, [sp, #4]
 8001dbe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001dc0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001dc4:	641a      	str	r2, [r3, #64]	; 0x40
 8001dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dcc:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dce:	2402      	movs	r4, #2
    __HAL_RCC_UART5_CLK_ENABLE();
 8001dd0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd2:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001dd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dd8:	f04f 0801 	mov.w	r8, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ddc:	2703      	movs	r7, #3
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001dde:	2608      	movs	r6, #8
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001de0:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001de2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001de4:	f8cd 8014 	str.w	r8, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001de8:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001dea:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dec:	f7fe fb38 	bl	8000460 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001df0:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001df2:	a903      	add	r1, sp, #12
 8001df4:	481e      	ldr	r0, [pc, #120]	; (8001e70 <HAL_UART_MspInit+0xc8>)
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001df6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df8:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dfa:	f8cd 8014 	str.w	r8, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dfe:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001e00:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e02:	f7fe fb2d 	bl	8000460 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 2);
 8001e06:	2035      	movs	r0, #53	; 0x35
 8001e08:	4622      	mov	r2, r4
 8001e0a:	4629      	mov	r1, r5
 8001e0c:	f7fe faae 	bl	800036c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001e10:	2035      	movs	r0, #53	; 0x35
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001e12:	f7fe fadf 	bl	80003d4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001e16:	b008      	add	sp, #32
 8001e18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if(huart->Instance==USART2)
 8001e1c:	4a15      	ldr	r2, [pc, #84]	; (8001e74 <HAL_UART_MspInit+0xcc>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d1f9      	bne.n	8001e16 <HAL_UART_MspInit+0x6e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e22:	2400      	movs	r4, #0
 8001e24:	4b10      	ldr	r3, [pc, #64]	; (8001e68 <HAL_UART_MspInit+0xc0>)
 8001e26:	9402      	str	r4, [sp, #8]
 8001e28:	6c19      	ldr	r1, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e2a:	4813      	ldr	r0, [pc, #76]	; (8001e78 <HAL_UART_MspInit+0xd0>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e2c:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8001e30:	6419      	str	r1, [r3, #64]	; 0x40
 8001e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e38:	9302      	str	r3, [sp, #8]
 8001e3a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001e3c:	230c      	movs	r3, #12
 8001e3e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e40:	2302      	movs	r3, #2
 8001e42:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e44:	2301      	movs	r3, #1
 8001e46:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e48:	2303      	movs	r3, #3
 8001e4a:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e4c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e4e:	2307      	movs	r3, #7
 8001e50:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e52:	f7fe fb05 	bl	8000460 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001e56:	2026      	movs	r0, #38	; 0x26
 8001e58:	4622      	mov	r2, r4
 8001e5a:	4621      	mov	r1, r4
 8001e5c:	f7fe fa86 	bl	800036c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001e60:	2026      	movs	r0, #38	; 0x26
 8001e62:	e7d6      	b.n	8001e12 <HAL_UART_MspInit+0x6a>
 8001e64:	40005000 	.word	0x40005000
 8001e68:	40023800 	.word	0x40023800
 8001e6c:	40020800 	.word	0x40020800
 8001e70:	40020c00 	.word	0x40020c00
 8001e74:	40004400 	.word	0x40004400
 8001e78:	40020000 	.word	0x40020000

08001e7c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001e7c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e7e:	f7fe fa47 	bl	8000310 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e82:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8001e86:	f7fe bad4 	b.w	8000432 <HAL_SYSTICK_IRQHandler>
	...

08001e8c <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001e8c:	4801      	ldr	r0, [pc, #4]	; (8001e94 <TIM2_IRQHandler+0x8>)
 8001e8e:	f7fe bfb1 	b.w	8000df4 <HAL_TIM_IRQHandler>
 8001e92:	bf00      	nop
 8001e94:	20000234 	.word	0x20000234

08001e98 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001e98:	4801      	ldr	r0, [pc, #4]	; (8001ea0 <TIM3_IRQHandler+0x8>)
 8001e9a:	f7fe bfab 	b.w	8000df4 <HAL_TIM_IRQHandler>
 8001e9e:	bf00      	nop
 8001ea0:	20000120 	.word	0x20000120

08001ea4 <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001ea4:	4801      	ldr	r0, [pc, #4]	; (8001eac <TIM4_IRQHandler+0x8>)
 8001ea6:	f7fe bfa5 	b.w	8000df4 <HAL_TIM_IRQHandler>
 8001eaa:	bf00      	nop
 8001eac:	200000bc 	.word	0x200000bc

08001eb0 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001eb0:	4801      	ldr	r0, [pc, #4]	; (8001eb8 <USART2_IRQHandler+0x8>)
 8001eb2:	f7ff bb1b 	b.w	80014ec <HAL_UART_IRQHandler>
 8001eb6:	bf00      	nop
 8001eb8:	20000270 	.word	0x20000270

08001ebc <UART5_IRQHandler>:
void UART5_IRQHandler(void)
{
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001ebc:	4801      	ldr	r0, [pc, #4]	; (8001ec4 <UART5_IRQHandler+0x8>)
 8001ebe:	f7ff bb15 	b.w	80014ec <HAL_UART_IRQHandler>
 8001ec2:	bf00      	nop
 8001ec4:	2000015c 	.word	0x2000015c

08001ec8 <TLCD_Enable>:
	else			HAL_GPIO_WritePin(GPIOx, TData7 , GPIO_PIN_RESET);
	TLCD_Enable();
}

void	TLCD_Enable()
{
 8001ec8:	b538      	push	{r3, r4, r5, lr}
	HAL_GPIO_WritePin(GPIOx, TEN , GPIO_PIN_SET);
 8001eca:	4d0e      	ldr	r5, [pc, #56]	; (8001f04 <TLCD_Enable+0x3c>)
 8001ecc:	4c0e      	ldr	r4, [pc, #56]	; (8001f08 <TLCD_Enable+0x40>)
 8001ece:	8829      	ldrh	r1, [r5, #0]
 8001ed0:	6820      	ldr	r0, [r4, #0]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	f7fe fb9e 	bl	8000614 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8001ed8:	2002      	movs	r0, #2
 8001eda:	f7fe fa27 	bl	800032c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOx, TEN , GPIO_PIN_SET);
 8001ede:	8829      	ldrh	r1, [r5, #0]
 8001ee0:	6820      	ldr	r0, [r4, #0]
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	f7fe fb96 	bl	8000614 <HAL_GPIO_WritePin>
	HAL_Delay(2);
 8001ee8:	2002      	movs	r0, #2
 8001eea:	f7fe fa1f 	bl	800032c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOx, TEN , GPIO_PIN_RESET);
 8001eee:	6820      	ldr	r0, [r4, #0]
 8001ef0:	8829      	ldrh	r1, [r5, #0]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	f7fe fb8e 	bl	8000614 <HAL_GPIO_WritePin>
	HAL_Delay(40);
 8001ef8:	2028      	movs	r0, #40	; 0x28
}
 8001efa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	HAL_Delay(40);
 8001efe:	f7fe ba15 	b.w	800032c <HAL_Delay>
 8001f02:	bf00      	nop
 8001f04:	20000338 	.word	0x20000338
 8001f08:	20000328 	.word	0x20000328

08001f0c <TLCD_4BitWrite>:
{
 8001f0c:	b538      	push	{r3, r4, r5, lr}
 8001f0e:	4d15      	ldr	r5, [pc, #84]	; (8001f64 <TLCD_4BitWrite+0x58>)
 8001f10:	4b15      	ldr	r3, [pc, #84]	; (8001f68 <TLCD_4BitWrite+0x5c>)
	if( c & 0x01 ) 	HAL_GPIO_WritePin(GPIOx, TData4 , GPIO_PIN_SET);
 8001f12:	f010 0201 	ands.w	r2, r0, #1
{
 8001f16:	4604      	mov	r4, r0
	else			HAL_GPIO_WritePin(GPIOx, TData4 , GPIO_PIN_RESET);
 8001f18:	8819      	ldrh	r1, [r3, #0]
 8001f1a:	6828      	ldr	r0, [r5, #0]
	if( c & 0x01 ) 	HAL_GPIO_WritePin(GPIOx, TData4 , GPIO_PIN_SET);
 8001f1c:	bf18      	it	ne
 8001f1e:	2201      	movne	r2, #1
	else			HAL_GPIO_WritePin(GPIOx, TData4 , GPIO_PIN_RESET);
 8001f20:	f7fe fb78 	bl	8000614 <HAL_GPIO_WritePin>
 8001f24:	4b11      	ldr	r3, [pc, #68]	; (8001f6c <TLCD_4BitWrite+0x60>)
	else			HAL_GPIO_WritePin(GPIOx, TData5 , GPIO_PIN_RESET);
 8001f26:	6828      	ldr	r0, [r5, #0]
 8001f28:	8819      	ldrh	r1, [r3, #0]
	if( c & 0x02 ) 	HAL_GPIO_WritePin(GPIOx, TData5 , GPIO_PIN_SET);
 8001f2a:	f014 0202 	ands.w	r2, r4, #2
 8001f2e:	bf18      	it	ne
 8001f30:	2201      	movne	r2, #1
	else			HAL_GPIO_WritePin(GPIOx, TData5 , GPIO_PIN_RESET);
 8001f32:	f7fe fb6f 	bl	8000614 <HAL_GPIO_WritePin>
 8001f36:	4b0e      	ldr	r3, [pc, #56]	; (8001f70 <TLCD_4BitWrite+0x64>)
	else			HAL_GPIO_WritePin(GPIOx, TData6 , GPIO_PIN_RESET);
 8001f38:	6828      	ldr	r0, [r5, #0]
 8001f3a:	8819      	ldrh	r1, [r3, #0]
	if( c & 0x04 ) 	HAL_GPIO_WritePin(GPIOx, TData6 , GPIO_PIN_SET);
 8001f3c:	f014 0204 	ands.w	r2, r4, #4
 8001f40:	bf18      	it	ne
 8001f42:	2201      	movne	r2, #1
	else			HAL_GPIO_WritePin(GPIOx, TData6 , GPIO_PIN_RESET);
 8001f44:	f7fe fb66 	bl	8000614 <HAL_GPIO_WritePin>
 8001f48:	4b0a      	ldr	r3, [pc, #40]	; (8001f74 <TLCD_4BitWrite+0x68>)
	else			HAL_GPIO_WritePin(GPIOx, TData7 , GPIO_PIN_RESET);
 8001f4a:	6828      	ldr	r0, [r5, #0]
 8001f4c:	8819      	ldrh	r1, [r3, #0]
	if( c & 0x08 ) 	HAL_GPIO_WritePin(GPIOx, TData7 , GPIO_PIN_SET);
 8001f4e:	f014 0208 	ands.w	r2, r4, #8
 8001f52:	bf18      	it	ne
 8001f54:	2201      	movne	r2, #1
	else			HAL_GPIO_WritePin(GPIOx, TData7 , GPIO_PIN_RESET);
 8001f56:	f7fe fb5d 	bl	8000614 <HAL_GPIO_WritePin>
}
 8001f5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TLCD_Enable();
 8001f5e:	f7ff bfb3 	b.w	8001ec8 <TLCD_Enable>
 8001f62:	bf00      	nop
 8001f64:	20000328 	.word	0x20000328
 8001f68:	20000340 	.word	0x20000340
 8001f6c:	20000330 	.word	0x20000330
 8001f70:	2000032c 	.word	0x2000032c
 8001f74:	20000334 	.word	0x20000334

08001f78 <TNLD_Send>:
{
	TNLD_Send(v,HIGH);
}

void	TNLD_Send(uint8_t v,uint8_t m)
{
 8001f78:	b510      	push	{r4, lr}
	if( m ) 	HAL_GPIO_WritePin(GPIOx, TRS , GPIO_PIN_SET);
 8001f7a:	460a      	mov	r2, r1
{
 8001f7c:	4604      	mov	r4, r0
 8001f7e:	4b08      	ldr	r3, [pc, #32]	; (8001fa0 <TNLD_Send+0x28>)
 8001f80:	4808      	ldr	r0, [pc, #32]	; (8001fa4 <TNLD_Send+0x2c>)
	if( m ) 	HAL_GPIO_WritePin(GPIOx, TRS , GPIO_PIN_SET);
 8001f82:	b101      	cbz	r1, 8001f86 <TNLD_Send+0xe>
 8001f84:	2201      	movs	r2, #1
	else		HAL_GPIO_WritePin(GPIOx, TRS , GPIO_PIN_RESET);
 8001f86:	8801      	ldrh	r1, [r0, #0]
 8001f88:	6818      	ldr	r0, [r3, #0]
 8001f8a:	f7fe fb43 	bl	8000614 <HAL_GPIO_WritePin>

	TLCD_4BitWrite(v>>4);
 8001f8e:	0920      	lsrs	r0, r4, #4
 8001f90:	f7ff ffbc 	bl	8001f0c <TLCD_4BitWrite>
	TLCD_4BitWrite(v);
 8001f94:	4620      	mov	r0, r4
}
 8001f96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	TLCD_4BitWrite(v);
 8001f9a:	f7ff bfb7 	b.w	8001f0c <TLCD_4BitWrite>
 8001f9e:	bf00      	nop
 8001fa0:	20000328 	.word	0x20000328
 8001fa4:	2000033c 	.word	0x2000033c

08001fa8 <TLCD_Cmd>:
	TNLD_Send(cmd,LOW);
 8001fa8:	2100      	movs	r1, #0
 8001faa:	f7ff bfe5 	b.w	8001f78 <TNLD_Send>
	...

08001fb0 <TLCD_Init>:
{
 8001fb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	GPIOx = GPIOn;
 8001fb4:	f8df e0e0 	ldr.w	lr, [pc, #224]	; 8002098 <TLCD_Init+0xe8>
 8001fb8:	f8ce 0000 	str.w	r0, [lr]
	TRS = RS;
 8001fbc:	f8df e0dc 	ldr.w	lr, [pc, #220]	; 800209c <TLCD_Init+0xec>
{
 8001fc0:	b086      	sub	sp, #24
	TRS = RS;
 8001fc2:	f8ce 1000 	str.w	r1, [lr]
	TEN = EN;
 8001fc6:	f8df e0d8 	ldr.w	lr, [pc, #216]	; 80020a0 <TLCD_Init+0xf0>
{
 8001fca:	ac0c      	add	r4, sp, #48	; 0x30
 8001fcc:	ccb0      	ldmia	r4, {r4, r5, r7}
	TEN = EN;
 8001fce:	f8ce 2000 	str.w	r2, [lr]
	TData4 = Data4;
 8001fd2:	f8df e0d0 	ldr.w	lr, [pc, #208]	; 80020a4 <TLCD_Init+0xf4>
 8001fd6:	f8ce 3000 	str.w	r3, [lr]
	TData5 = Data5;
 8001fda:	f8df e0cc 	ldr.w	lr, [pc, #204]	; 80020a8 <TLCD_Init+0xf8>
 8001fde:	f8ce 4000 	str.w	r4, [lr]
	TData6 = Data6;
 8001fe2:	f8df e0c8 	ldr.w	lr, [pc, #200]	; 80020ac <TLCD_Init+0xfc>
 8001fe6:	f8ce 5000 	str.w	r5, [lr]
	GPIO_InitStruct.Pin = RS | EN | Data4 | Data5 | Data6 | Data7;
 8001fea:	433d      	orrs	r5, r7
 8001fec:	432c      	orrs	r4, r5
	TData7 = Data7;
 8001fee:	f8df e0c0 	ldr.w	lr, [pc, #192]	; 80020b0 <TLCD_Init+0x100>
	GPIO_InitStruct.Pin = RS | EN | Data4 | Data5 | Data6 | Data7;
 8001ff2:	431c      	orrs	r4, r3
 8001ff4:	4314      	orrs	r4, r2
	TData7 = Data7;
 8001ff6:	f8ce 7000 	str.w	r7, [lr]
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8001ffa:	2503      	movs	r5, #3
	GPIO_InitStruct.Pin = RS | EN | Data4 | Data5 | Data6 | Data7;
 8001ffc:	430c      	orrs	r4, r1
{
 8001ffe:	4606      	mov	r6, r0
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002000:	2701      	movs	r7, #1
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002002:	f04f 0800 	mov.w	r8, #0
	HAL_GPIO_Init(GPIOn, &GPIO_InitStruct);
 8002006:	a901      	add	r1, sp, #4
	GPIO_InitStruct.Pin = RS | EN | Data4 | Data5 | Data6 | Data7;
 8002008:	9401      	str	r4, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800200a:	9702      	str	r7, [sp, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200c:	f8cd 800c 	str.w	r8, [sp, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8002010:	9504      	str	r5, [sp, #16]
	HAL_GPIO_Init(GPIOn, &GPIO_InitStruct);
 8002012:	f7fe fa25 	bl	8000460 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(GPIOn , RS | EN | Data4 | Data5 | Data6 | Data7 , GPIO_PIN_RESET);
 8002016:	4642      	mov	r2, r8
 8002018:	b2a1      	uxth	r1, r4
 800201a:	4630      	mov	r0, r6
 800201c:	f7fe fafa 	bl	8000614 <HAL_GPIO_WritePin>
	HAL_Delay(10000);  // 10ms
 8002020:	f242 7010 	movw	r0, #10000	; 0x2710
 8002024:	f7fe f982 	bl	800032c <HAL_Delay>
	TLCD_4BitWrite(0x03);
 8002028:	4628      	mov	r0, r5
 800202a:	f7ff ff6f 	bl	8001f0c <TLCD_4BitWrite>
	HAL_Delay(5000);   // 5ms
 800202e:	f241 3088 	movw	r0, #5000	; 0x1388
 8002032:	f7fe f97b 	bl	800032c <HAL_Delay>
	TLCD_4BitWrite(0x03);
 8002036:	4628      	mov	r0, r5
 8002038:	f7ff ff68 	bl	8001f0c <TLCD_4BitWrite>
	HAL_Delay(5000);   // 5ms
 800203c:	f241 3088 	movw	r0, #5000	; 0x1388
 8002040:	f7fe f974 	bl	800032c <HAL_Delay>
	TLCD_4BitWrite(0x03);
 8002044:	4628      	mov	r0, r5
 8002046:	f7ff ff61 	bl	8001f0c <TLCD_4BitWrite>
	HAL_Delay(5000);   // 5ms
 800204a:	f241 3088 	movw	r0, #5000	; 0x1388
 800204e:	f7fe f96d 	bl	800032c <HAL_Delay>
	TLCD_4BitWrite(0x02);
 8002052:	2002      	movs	r0, #2
 8002054:	f7ff ff5a 	bl	8001f0c <TLCD_4BitWrite>
	HAL_Delay(5000);   // 5ms
 8002058:	f241 3088 	movw	r0, #5000	; 0x1388
 800205c:	f7fe f966 	bl	800032c <HAL_Delay>
	TLCD_Cmd( 0x28 );
 8002060:	2028      	movs	r0, #40	; 0x28
 8002062:	f7ff ffa1 	bl	8001fa8 <TLCD_Cmd>
	HAL_Delay(40);  // 40us
 8002066:	2028      	movs	r0, #40	; 0x28
 8002068:	f7fe f960 	bl	800032c <HAL_Delay>
	TLCD_Cmd( 0x0C );
 800206c:	200c      	movs	r0, #12
 800206e:	f7ff ff9b 	bl	8001fa8 <TLCD_Cmd>
	HAL_Delay(40);  // 40us
 8002072:	2028      	movs	r0, #40	; 0x28
 8002074:	f7fe f95a 	bl	800032c <HAL_Delay>
	TLCD_Cmd( 0x06 );
 8002078:	2006      	movs	r0, #6
 800207a:	f7ff ff95 	bl	8001fa8 <TLCD_Cmd>
	HAL_Delay(40);  // 40us
 800207e:	2028      	movs	r0, #40	; 0x28
 8002080:	f7fe f954 	bl	800032c <HAL_Delay>
	TLCD_Cmd( 0x01 );
 8002084:	4638      	mov	r0, r7
 8002086:	f7ff ff8f 	bl	8001fa8 <TLCD_Cmd>
	HAL_Delay(2000);  // 2ms
 800208a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800208e:	f7fe f94d 	bl	800032c <HAL_Delay>
}
 8002092:	b006      	add	sp, #24
 8002094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002098:	20000328 	.word	0x20000328
 800209c:	2000033c 	.word	0x2000033c
 80020a0:	20000338 	.word	0x20000338
 80020a4:	20000340 	.word	0x20000340
 80020a8:	20000330 	.word	0x20000330
 80020ac:	2000032c 	.word	0x2000032c
 80020b0:	20000334 	.word	0x20000334

080020b4 <TLCD_Write>:
	TNLD_Send(v,HIGH);
 80020b4:	2101      	movs	r1, #1
 80020b6:	f7ff bf5f 	b.w	8001f78 <TNLD_Send>

080020ba <TLCD_Putc>:

void	TLCD_Putc(char c)
{
 80020ba:	b508      	push	{r3, lr}
	TLCD_Write((BYTE)c);
 80020bc:	f7ff fffa 	bl	80020b4 <TLCD_Write>
	HAL_Delay(1);
 80020c0:	2001      	movs	r0, #1
}
 80020c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_Delay(1);
 80020c6:	f7fe b931 	b.w	800032c <HAL_Delay>

080020ca <TLCD_Puts>:

void	TLCD_Puts(uint8_t line, uint8_t n,char *s)
{
	if(line==1)		TLCD_Cmd(0x80+n);
 80020ca:	2801      	cmp	r0, #1
{
 80020cc:	b510      	push	{r4, lr}
 80020ce:	4614      	mov	r4, r2
	if(line==1)		TLCD_Cmd(0x80+n);
 80020d0:	d108      	bne.n	80020e4 <TLCD_Puts+0x1a>
 80020d2:	f081 0080 	eor.w	r0, r1, #128	; 0x80
 80020d6:	f7ff ff67 	bl	8001fa8 <TLCD_Cmd>
 80020da:	3c01      	subs	r4, #1
	else 			TLCD_Cmd(0xC0+n);

	while(*s) {
 80020dc:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 80020e0:	b918      	cbnz	r0, 80020ea <TLCD_Puts+0x20>
		TLCD_Putc(*s);
		s++;
	}
}
 80020e2:	bd10      	pop	{r4, pc}
	else 			TLCD_Cmd(0xC0+n);
 80020e4:	3940      	subs	r1, #64	; 0x40
 80020e6:	b2c8      	uxtb	r0, r1
 80020e8:	e7f5      	b.n	80020d6 <TLCD_Puts+0xc>
		TLCD_Putc(*s);
 80020ea:	f7ff ffe6 	bl	80020ba <TLCD_Putc>
 80020ee:	e7f5      	b.n	80020dc <TLCD_Puts+0x12>

080020f0 <__libc_init_array>:
 80020f0:	b570      	push	{r4, r5, r6, lr}
 80020f2:	4e0d      	ldr	r6, [pc, #52]	; (8002128 <__libc_init_array+0x38>)
 80020f4:	4c0d      	ldr	r4, [pc, #52]	; (800212c <__libc_init_array+0x3c>)
 80020f6:	1ba4      	subs	r4, r4, r6
 80020f8:	10a4      	asrs	r4, r4, #2
 80020fa:	2500      	movs	r5, #0
 80020fc:	42a5      	cmp	r5, r4
 80020fe:	d109      	bne.n	8002114 <__libc_init_array+0x24>
 8002100:	4e0b      	ldr	r6, [pc, #44]	; (8002130 <__libc_init_array+0x40>)
 8002102:	4c0c      	ldr	r4, [pc, #48]	; (8002134 <__libc_init_array+0x44>)
 8002104:	f000 f8b2 	bl	800226c <_init>
 8002108:	1ba4      	subs	r4, r4, r6
 800210a:	10a4      	asrs	r4, r4, #2
 800210c:	2500      	movs	r5, #0
 800210e:	42a5      	cmp	r5, r4
 8002110:	d105      	bne.n	800211e <__libc_init_array+0x2e>
 8002112:	bd70      	pop	{r4, r5, r6, pc}
 8002114:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002118:	4798      	blx	r3
 800211a:	3501      	adds	r5, #1
 800211c:	e7ee      	b.n	80020fc <__libc_init_array+0xc>
 800211e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002122:	4798      	blx	r3
 8002124:	3501      	adds	r5, #1
 8002126:	e7f2      	b.n	800210e <__libc_init_array+0x1e>
 8002128:	08002314 	.word	0x08002314
 800212c:	08002314 	.word	0x08002314
 8002130:	08002314 	.word	0x08002314
 8002134:	08002318 	.word	0x08002318

08002138 <malloc>:
 8002138:	4b02      	ldr	r3, [pc, #8]	; (8002144 <malloc+0xc>)
 800213a:	4601      	mov	r1, r0
 800213c:	6818      	ldr	r0, [r3, #0]
 800213e:	f000 b817 	b.w	8002170 <_malloc_r>
 8002142:	bf00      	nop
 8002144:	20000024 	.word	0x20000024

08002148 <memcpy>:
 8002148:	b510      	push	{r4, lr}
 800214a:	1e43      	subs	r3, r0, #1
 800214c:	440a      	add	r2, r1
 800214e:	4291      	cmp	r1, r2
 8002150:	d100      	bne.n	8002154 <memcpy+0xc>
 8002152:	bd10      	pop	{r4, pc}
 8002154:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002158:	f803 4f01 	strb.w	r4, [r3, #1]!
 800215c:	e7f7      	b.n	800214e <memcpy+0x6>

0800215e <memset>:
 800215e:	4402      	add	r2, r0
 8002160:	4603      	mov	r3, r0
 8002162:	4293      	cmp	r3, r2
 8002164:	d100      	bne.n	8002168 <memset+0xa>
 8002166:	4770      	bx	lr
 8002168:	f803 1b01 	strb.w	r1, [r3], #1
 800216c:	e7f9      	b.n	8002162 <memset+0x4>
	...

08002170 <_malloc_r>:
 8002170:	b570      	push	{r4, r5, r6, lr}
 8002172:	1ccd      	adds	r5, r1, #3
 8002174:	f025 0503 	bic.w	r5, r5, #3
 8002178:	3508      	adds	r5, #8
 800217a:	2d0c      	cmp	r5, #12
 800217c:	bf38      	it	cc
 800217e:	250c      	movcc	r5, #12
 8002180:	2d00      	cmp	r5, #0
 8002182:	4606      	mov	r6, r0
 8002184:	db01      	blt.n	800218a <_malloc_r+0x1a>
 8002186:	42a9      	cmp	r1, r5
 8002188:	d903      	bls.n	8002192 <_malloc_r+0x22>
 800218a:	230c      	movs	r3, #12
 800218c:	6033      	str	r3, [r6, #0]
 800218e:	2000      	movs	r0, #0
 8002190:	bd70      	pop	{r4, r5, r6, pc}
 8002192:	f000 f85b 	bl	800224c <__malloc_lock>
 8002196:	4a23      	ldr	r2, [pc, #140]	; (8002224 <_malloc_r+0xb4>)
 8002198:	6814      	ldr	r4, [r2, #0]
 800219a:	4621      	mov	r1, r4
 800219c:	b991      	cbnz	r1, 80021c4 <_malloc_r+0x54>
 800219e:	4c22      	ldr	r4, [pc, #136]	; (8002228 <_malloc_r+0xb8>)
 80021a0:	6823      	ldr	r3, [r4, #0]
 80021a2:	b91b      	cbnz	r3, 80021ac <_malloc_r+0x3c>
 80021a4:	4630      	mov	r0, r6
 80021a6:	f000 f841 	bl	800222c <_sbrk_r>
 80021aa:	6020      	str	r0, [r4, #0]
 80021ac:	4629      	mov	r1, r5
 80021ae:	4630      	mov	r0, r6
 80021b0:	f000 f83c 	bl	800222c <_sbrk_r>
 80021b4:	1c43      	adds	r3, r0, #1
 80021b6:	d126      	bne.n	8002206 <_malloc_r+0x96>
 80021b8:	230c      	movs	r3, #12
 80021ba:	6033      	str	r3, [r6, #0]
 80021bc:	4630      	mov	r0, r6
 80021be:	f000 f846 	bl	800224e <__malloc_unlock>
 80021c2:	e7e4      	b.n	800218e <_malloc_r+0x1e>
 80021c4:	680b      	ldr	r3, [r1, #0]
 80021c6:	1b5b      	subs	r3, r3, r5
 80021c8:	d41a      	bmi.n	8002200 <_malloc_r+0x90>
 80021ca:	2b0b      	cmp	r3, #11
 80021cc:	d90f      	bls.n	80021ee <_malloc_r+0x7e>
 80021ce:	600b      	str	r3, [r1, #0]
 80021d0:	50cd      	str	r5, [r1, r3]
 80021d2:	18cc      	adds	r4, r1, r3
 80021d4:	4630      	mov	r0, r6
 80021d6:	f000 f83a 	bl	800224e <__malloc_unlock>
 80021da:	f104 000b 	add.w	r0, r4, #11
 80021de:	1d23      	adds	r3, r4, #4
 80021e0:	f020 0007 	bic.w	r0, r0, #7
 80021e4:	1ac3      	subs	r3, r0, r3
 80021e6:	d01b      	beq.n	8002220 <_malloc_r+0xb0>
 80021e8:	425a      	negs	r2, r3
 80021ea:	50e2      	str	r2, [r4, r3]
 80021ec:	bd70      	pop	{r4, r5, r6, pc}
 80021ee:	428c      	cmp	r4, r1
 80021f0:	bf0d      	iteet	eq
 80021f2:	6863      	ldreq	r3, [r4, #4]
 80021f4:	684b      	ldrne	r3, [r1, #4]
 80021f6:	6063      	strne	r3, [r4, #4]
 80021f8:	6013      	streq	r3, [r2, #0]
 80021fa:	bf18      	it	ne
 80021fc:	460c      	movne	r4, r1
 80021fe:	e7e9      	b.n	80021d4 <_malloc_r+0x64>
 8002200:	460c      	mov	r4, r1
 8002202:	6849      	ldr	r1, [r1, #4]
 8002204:	e7ca      	b.n	800219c <_malloc_r+0x2c>
 8002206:	1cc4      	adds	r4, r0, #3
 8002208:	f024 0403 	bic.w	r4, r4, #3
 800220c:	42a0      	cmp	r0, r4
 800220e:	d005      	beq.n	800221c <_malloc_r+0xac>
 8002210:	1a21      	subs	r1, r4, r0
 8002212:	4630      	mov	r0, r6
 8002214:	f000 f80a 	bl	800222c <_sbrk_r>
 8002218:	3001      	adds	r0, #1
 800221a:	d0cd      	beq.n	80021b8 <_malloc_r+0x48>
 800221c:	6025      	str	r5, [r4, #0]
 800221e:	e7d9      	b.n	80021d4 <_malloc_r+0x64>
 8002220:	bd70      	pop	{r4, r5, r6, pc}
 8002222:	bf00      	nop
 8002224:	200000ac 	.word	0x200000ac
 8002228:	200000b0 	.word	0x200000b0

0800222c <_sbrk_r>:
 800222c:	b538      	push	{r3, r4, r5, lr}
 800222e:	4c06      	ldr	r4, [pc, #24]	; (8002248 <_sbrk_r+0x1c>)
 8002230:	2300      	movs	r3, #0
 8002232:	4605      	mov	r5, r0
 8002234:	4608      	mov	r0, r1
 8002236:	6023      	str	r3, [r4, #0]
 8002238:	f000 f80a 	bl	8002250 <_sbrk>
 800223c:	1c43      	adds	r3, r0, #1
 800223e:	d102      	bne.n	8002246 <_sbrk_r+0x1a>
 8002240:	6823      	ldr	r3, [r4, #0]
 8002242:	b103      	cbz	r3, 8002246 <_sbrk_r+0x1a>
 8002244:	602b      	str	r3, [r5, #0]
 8002246:	bd38      	pop	{r3, r4, r5, pc}
 8002248:	20000344 	.word	0x20000344

0800224c <__malloc_lock>:
 800224c:	4770      	bx	lr

0800224e <__malloc_unlock>:
 800224e:	4770      	bx	lr

08002250 <_sbrk>:
 8002250:	4b04      	ldr	r3, [pc, #16]	; (8002264 <_sbrk+0x14>)
 8002252:	6819      	ldr	r1, [r3, #0]
 8002254:	4602      	mov	r2, r0
 8002256:	b909      	cbnz	r1, 800225c <_sbrk+0xc>
 8002258:	4903      	ldr	r1, [pc, #12]	; (8002268 <_sbrk+0x18>)
 800225a:	6019      	str	r1, [r3, #0]
 800225c:	6818      	ldr	r0, [r3, #0]
 800225e:	4402      	add	r2, r0
 8002260:	601a      	str	r2, [r3, #0]
 8002262:	4770      	bx	lr
 8002264:	200000b4 	.word	0x200000b4
 8002268:	20000348 	.word	0x20000348

0800226c <_init>:
 800226c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800226e:	bf00      	nop
 8002270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002272:	bc08      	pop	{r3}
 8002274:	469e      	mov	lr, r3
 8002276:	4770      	bx	lr

08002278 <_fini>:
 8002278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800227a:	bf00      	nop
 800227c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800227e:	bc08      	pop	{r3}
 8002280:	469e      	mov	lr, r3
 8002282:	4770      	bx	lr
