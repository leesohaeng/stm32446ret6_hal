
C:\Users\sohae\Desktop\STM32F446RET6_HAL\STM3210C-EVAL_uCOS-II\Debug\STM3210C-EVAL_uCOS-II.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000150  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d0c  08000150  08000150  00010150  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM          00000008  08007e5c  08007e5c  00017e5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08007e64  08007e64  00017e64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08007e68  08007e68  00017e68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000053c  20000000  08007e6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00008734  2000053c  080083a8  0002053c  2**2
                  ALLOC
  7 ._user_heap_stack 00000200  20008c70  080083a8  00028c70  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002053c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000b125  00000000  00000000  00020565  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000023c5  00000000  00000000  0002b68a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000ef8  00000000  00000000  0002da50  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000d20  00000000  00000000  0002e948  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00003e44  00000000  00000000  0002f668  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003b65  00000000  00000000  000334ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007e  00000000  00000000  00037011  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00003ec0  00000000  00000000  00037090  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000150 <__do_global_dtors_aux>:
 8000150:	b510      	push	{r4, lr}
 8000152:	4c05      	ldr	r4, [pc, #20]	; (8000168 <__do_global_dtors_aux+0x18>)
 8000154:	7823      	ldrb	r3, [r4, #0]
 8000156:	b933      	cbnz	r3, 8000166 <__do_global_dtors_aux+0x16>
 8000158:	4b04      	ldr	r3, [pc, #16]	; (800016c <__do_global_dtors_aux+0x1c>)
 800015a:	b113      	cbz	r3, 8000162 <__do_global_dtors_aux+0x12>
 800015c:	4804      	ldr	r0, [pc, #16]	; (8000170 <__do_global_dtors_aux+0x20>)
 800015e:	f3af 8000 	nop.w
 8000162:	2301      	movs	r3, #1
 8000164:	7023      	strb	r3, [r4, #0]
 8000166:	bd10      	pop	{r4, pc}
 8000168:	2000053c 	.word	0x2000053c
 800016c:	00000000 	.word	0x00000000
 8000170:	08007e44 	.word	0x08007e44

08000174 <frame_dummy>:
 8000174:	b508      	push	{r3, lr}
 8000176:	4b03      	ldr	r3, [pc, #12]	; (8000184 <frame_dummy+0x10>)
 8000178:	b11b      	cbz	r3, 8000182 <frame_dummy+0xe>
 800017a:	4903      	ldr	r1, [pc, #12]	; (8000188 <frame_dummy+0x14>)
 800017c:	4803      	ldr	r0, [pc, #12]	; (800018c <frame_dummy+0x18>)
 800017e:	f3af 8000 	nop.w
 8000182:	bd08      	pop	{r3, pc}
 8000184:	00000000 	.word	0x00000000
 8000188:	20000540 	.word	0x20000540
 800018c:	08007e44 	.word	0x08007e44

08000190 <CPU_IntDis>:
@               void  CPU_IntEn (void);
@********************************************************************************************************

.thumb_func
CPU_IntDis:
        CPSID   I
 8000190:	b672      	cpsid	i
        BX      LR
 8000192:	4770      	bx	lr

08000194 <CPU_IntEn>:

.thumb_func
CPU_IntEn:
        CPSIE   I
 8000194:	b662      	cpsie	i
        BX      LR
 8000196:	4770      	bx	lr

08000198 <CPU_SR_Save>:
@                       }
@********************************************************************************************************

.thumb_func
CPU_SR_Save:
        MRS     R0, PRIMASK                     @ Set prio int mask to mask all (except faults)
 8000198:	f3ef 8010 	mrs	r0, PRIMASK
        CPSID   I 
 800019c:	b672      	cpsid	i
        BX      LR
 800019e:	4770      	bx	lr

080001a0 <CPU_SR_Restore>:

.thumb_func
CPU_SR_Restore:                                 @ See Note #2.
        MSR     PRIMASK, R0
 80001a0:	f380 8810 	msr	PRIMASK, r0
        BX      LR
 80001a4:	4770      	bx	lr

080001a6 <CPU_WaitForInt>:
@ Argument(s) : none.
@********************************************************************************************************

.thumb_func
CPU_WaitForInt:
        WFI                                     @ Wait for interrupt
 80001a6:	bf30      	wfi
        BX      LR
 80001a8:	4770      	bx	lr

080001aa <CPU_WaitForExcept>:
@ Argument(s) : none.
@********************************************************************************************************

.thumb_func
CPU_WaitForExcept:
        WFE                                     @ Wait for exception
 80001aa:	bf20      	wfe
        BX      LR
 80001ac:	4770      	bx	lr

080001ae <CPU_CntLeadZeros>:
@                   #define'd in 'cpu_cfg.h' or 'cpu.h'.
@********************************************************************************************************

.thumb_func
CPU_CntLeadZeros:
        CLZ     R0, R0                          @ Count leading zeros
 80001ae:	fab0 f080 	clz	r0, r0
        BX      LR
 80001b2:	4770      	bx	lr

080001b4 <CPU_CntTrailZeros>:
@                   #define'd in 'cpu_cfg.h' or 'cpu.h'.
@********************************************************************************************************

.thumb_func
CPU_CntTrailZeros:
        RBIT    R0, R0                          @ Reverse bits
 80001b4:	fa90 f0a0 	rbit	r0, r0
        CLZ     R0, R0                          @ Count leading zeros
 80001b8:	fab0 f080 	clz	r0, r0
        BX      LR
 80001bc:	4770      	bx	lr

080001be <CPU_RevBits>:
@                       'val's final bit  N       =  'val's original bit  0
@********************************************************************************************************

.thumb_func
CPU_RevBits:
        RBIT    R0, R0                          @ Reverse bits
 80001be:	fa90 f0a0 	rbit	r0, r0
        BX      LR
 80001c2:	4770      	bx	lr

080001c4 <OS_CPU_SR_Save>:
@                          :
@                 }
@********************************************************************************************************
.thumb_func
OS_CPU_SR_Save:
    MRS     R0, PRIMASK                                         @ Set prio int mask to mask all (except faults)
 80001c4:	f3ef 8010 	mrs	r0, PRIMASK
    CPSID   I
 80001c8:	b672      	cpsid	i
    BX      LR
 80001ca:	4770      	bx	lr

080001cc <OS_CPU_SR_Restore>:

.thumb_func
OS_CPU_SR_Restore:
    MSR     PRIMASK, R0
 80001cc:	f380 8810 	msr	PRIMASK, r0
    BX      LR
 80001d0:	4770      	bx	lr

080001d2 <OSStartHighRdy>:
@              f) Enable interrupts (tasks will run with interrupts enabled).
@********************************************************************************************************

.thumb_func
OSStartHighRdy:
    LDR     R0, =NVIC_SYSPRI14                                  @ Set the PendSV exception priority
 80001d2:	481f      	ldr	r0, [pc, #124]	; (8000250 <OS_CPU_PendSVHandler_nosave+0x30>)
    LDR     R1, =NVIC_PENDSV_PRI
 80001d4:	21ff      	movs	r1, #255	; 0xff
    STRB    R1, [R0]
 80001d6:	7001      	strb	r1, [r0, #0]

    MOVS    R0, #0                                              @ Set the PSP to 0 for initial context switch call
 80001d8:	2000      	movs	r0, #0
    MSR     PSP, R0
 80001da:	f380 8809 	msr	PSP, r0

    LDR     R0, =OS_CPU_ExceptStkBase                           @ Initialize the MSP to the OS_CPU_ExceptStkBase
 80001de:	481d      	ldr	r0, [pc, #116]	; (8000254 <OS_CPU_PendSVHandler_nosave+0x34>)
    LDR     R1, [R0]
 80001e0:	6801      	ldr	r1, [r0, #0]
    MSR     MSP, R1    
 80001e2:	f381 8808 	msr	MSP, r1

    LDR     R0, =OSRunning                                      @ OSRunning = TRUE
 80001e6:	481c      	ldr	r0, [pc, #112]	; (8000258 <OS_CPU_PendSVHandler_nosave+0x38>)
    MOVS    R1, #1
 80001e8:	2101      	movs	r1, #1
    STRB    R1, [R0]
 80001ea:	7001      	strb	r1, [r0, #0]
    
    LDR     R0, =NVIC_INT_CTRL                                  @ Trigger the PendSV exception (causes context switch)
 80001ec:	481b      	ldr	r0, [pc, #108]	; (800025c <OS_CPU_PendSVHandler_nosave+0x3c>)
    LDR     R1, =NVIC_PENDSVSET
 80001ee:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    STR     R1, [R0]
 80001f2:	6001      	str	r1, [r0, #0]

    CPSIE   I                                                   @ Enable interrupts at processor level
 80001f4:	b662      	cpsie	i

080001f6 <OSStartHang>:

OSStartHang:
    B       OSStartHang                                         @ Should never get here
 80001f6:	e7fe      	b.n	80001f6 <OSStartHang>

080001f8 <OSCtxSw>:
@              triggers the PendSV exception which is where the real work is done.
@********************************************************************************************************

.thumb_func
OSCtxSw:
    LDR     R0, =NVIC_INT_CTRL                                  @ Trigger the PendSV exception (causes context switch)
 80001f8:	4818      	ldr	r0, [pc, #96]	; (800025c <OS_CPU_PendSVHandler_nosave+0x3c>)
    LDR     R1, =NVIC_PENDSVSET
 80001fa:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    STR     R1, [R0]
 80001fe:	6001      	str	r1, [r0, #0]
    BX      LR
 8000200:	4770      	bx	lr

08000202 <OSIntCtxSw>:
@              be handled when there are no more interrupts active and interrupts are enabled.
@********************************************************************************************************

.thumb_func
OSIntCtxSw:
    LDR     R0, =NVIC_INT_CTRL                                  @ Trigger the PendSV exception (causes context switch)
 8000202:	4816      	ldr	r0, [pc, #88]	; (800025c <OS_CPU_PendSVHandler_nosave+0x3c>)
    LDR     R1, =NVIC_PENDSVSET
 8000204:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    STR     R1, [R0]
 8000208:	6001      	str	r1, [r0, #0]
    BX      LR
 800020a:	4770      	bx	lr

0800020c <OS_CPU_PendSVHandler>:
@              therefore safe to assume that context being switched out was using the process stack (PSP).
@********************************************************************************************************

.thumb_func
OS_CPU_PendSVHandler:
    CPSID   I                                                   @ Prevent interruption during context switch
 800020c:	b672      	cpsid	i
    MRS     R0, PSP                                             @ PSP is process stack pointer
 800020e:	f3ef 8009 	mrs	r0, PSP
    CBZ     R0, OS_CPU_PendSVHandler_nosave                     @ Skip register save the first time
 8000212:	b128      	cbz	r0, 8000220 <OS_CPU_PendSVHandler_nosave>

    SUBS    R0, R0, #0x20                                       @ Save remaining regs r4-11 on process stack
 8000214:	3820      	subs	r0, #32
    STM     R0, {R4-R11}
 8000216:	e880 0ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp}

    LDR     R1, =OSTCBCur                                       @ OSTCBCur->OSTCBStkPtr = SP;
 800021a:	4911      	ldr	r1, [pc, #68]	; (8000260 <OS_CPU_PendSVHandler_nosave+0x40>)
    LDR     R1, [R1]
 800021c:	6809      	ldr	r1, [r1, #0]
    STR     R0, [R1]                                            @ R0 is SP of process being switched out
 800021e:	6008      	str	r0, [r1, #0]

08000220 <OS_CPU_PendSVHandler_nosave>:

                                                                @ At this point, entire context of process has been saved
OS_CPU_PendSVHandler_nosave:
    PUSH    {R14}                                               @ Save LR exc_return value
 8000220:	b500      	push	{lr}
    LDR     R0, =OSTaskSwHook                                   @ OSTaskSwHook();
 8000222:	4810      	ldr	r0, [pc, #64]	; (8000264 <OS_CPU_PendSVHandler_nosave+0x44>)
    BLX     R0
 8000224:	4780      	blx	r0
    POP     {R14}
 8000226:	f85d eb04 	ldr.w	lr, [sp], #4

    LDR     R0, =OSPrioCur                                      @ OSPrioCur = OSPrioHighRdy;
 800022a:	480f      	ldr	r0, [pc, #60]	; (8000268 <OS_CPU_PendSVHandler_nosave+0x48>)
    LDR     R1, =OSPrioHighRdy
 800022c:	490f      	ldr	r1, [pc, #60]	; (800026c <OS_CPU_PendSVHandler_nosave+0x4c>)
    LDRB    R2, [R1]
 800022e:	780a      	ldrb	r2, [r1, #0]
    STRB    R2, [R0]
 8000230:	7002      	strb	r2, [r0, #0]

    LDR     R0, =OSTCBCur                                       @ OSTCBCur  = OSTCBHighRdy;
 8000232:	480b      	ldr	r0, [pc, #44]	; (8000260 <OS_CPU_PendSVHandler_nosave+0x40>)
    LDR     R1, =OSTCBHighRdy
 8000234:	490e      	ldr	r1, [pc, #56]	; (8000270 <OS_CPU_PendSVHandler_nosave+0x50>)
    LDR     R2, [R1]
 8000236:	680a      	ldr	r2, [r1, #0]
    STR     R2, [R0]
 8000238:	6002      	str	r2, [r0, #0]

    LDR     R0, [R2]                                            @ R0 is new process SP; SP = OSTCBHighRdy->OSTCBStkPtr;
 800023a:	6810      	ldr	r0, [r2, #0]
    LDM     R0, {R4-R11}                                        @ Restore r4-11 from new process stack
 800023c:	e890 0ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp}
    ADDS    R0, R0, #0x20
 8000240:	3020      	adds	r0, #32
    MSR     PSP, R0                                             @ Load PSP with new process SP
 8000242:	f380 8809 	msr	PSP, r0
    ORR     LR, LR, #0x04                                       @ Ensure exception return uses process stack
 8000246:	f04e 0e04 	orr.w	lr, lr, #4
    CPSIE   I
 800024a:	b662      	cpsie	i
    BX      LR                                                  @ Exception return will restore remaining context
 800024c:	4770      	bx	lr
 800024e:	0000      	.short	0x0000
@              f) Enable interrupts (tasks will run with interrupts enabled).
@********************************************************************************************************

.thumb_func
OSStartHighRdy:
    LDR     R0, =NVIC_SYSPRI14                                  @ Set the PendSV exception priority
 8000250:	e000ed22 	.word	0xe000ed22
    STRB    R1, [R0]

    MOVS    R0, #0                                              @ Set the PSP to 0 for initial context switch call
    MSR     PSP, R0

    LDR     R0, =OS_CPU_ExceptStkBase                           @ Initialize the MSP to the OS_CPU_ExceptStkBase
 8000254:	20006714 	.word	0x20006714
    LDR     R1, [R0]
    MSR     MSP, R1    

    LDR     R0, =OSRunning                                      @ OSRunning = TRUE
 8000258:	20006965 	.word	0x20006965
    MOVS    R1, #1
    STRB    R1, [R0]
    
    LDR     R0, =NVIC_INT_CTRL                                  @ Trigger the PendSV exception (causes context switch)
 800025c:	e000ed04 	.word	0xe000ed04
    CBZ     R0, OS_CPU_PendSVHandler_nosave                     @ Skip register save the first time

    SUBS    R0, R0, #0x20                                       @ Save remaining regs r4-11 on process stack
    STM     R0, {R4-R11}

    LDR     R1, =OSTCBCur                                       @ OSTCBCur->OSTCBStkPtr = SP;
 8000260:	20007158 	.word	0x20007158
    STR     R0, [R1]                                            @ R0 is SP of process being switched out

                                                                @ At this point, entire context of process has been saved
OS_CPU_PendSVHandler_nosave:
    PUSH    {R14}                                               @ Save LR exc_return value
    LDR     R0, =OSTaskSwHook                                   @ OSTaskSwHook();
 8000264:	08002e9d 	.word	0x08002e9d
    BLX     R0
    POP     {R14}

    LDR     R0, =OSPrioCur                                      @ OSPrioCur = OSPrioHighRdy;
 8000268:	20006c40 	.word	0x20006c40
    LDR     R1, =OSPrioHighRdy
 800026c:	2000696e 	.word	0x2000696e
    LDRB    R2, [R1]
    STRB    R2, [R0]

    LDR     R0, =OSTCBCur                                       @ OSTCBCur  = OSTCBHighRdy;
    LDR     R1, =OSTCBHighRdy
 8000270:	20006f3c 	.word	0x20006f3c

08000274 <strlen>:
 8000274:	4603      	mov	r3, r0
 8000276:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027a:	2a00      	cmp	r2, #0
 800027c:	d1fb      	bne.n	8000276 <strlen+0x2>
 800027e:	1a18      	subs	r0, r3, r0
 8000280:	3801      	subs	r0, #1
 8000282:	4770      	bx	lr

08000284 <__aeabi_drsub>:
 8000284:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000288:	e002      	b.n	8000290 <__adddf3>
 800028a:	bf00      	nop

0800028c <__aeabi_dsub>:
 800028c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000290 <__adddf3>:
 8000290:	b530      	push	{r4, r5, lr}
 8000292:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000296:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800029a:	ea94 0f05 	teq	r4, r5
 800029e:	bf08      	it	eq
 80002a0:	ea90 0f02 	teqeq	r0, r2
 80002a4:	bf1f      	itttt	ne
 80002a6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002aa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ae:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002b2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b6:	f000 80e2 	beq.w	800047e <__adddf3+0x1ee>
 80002ba:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002be:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002c2:	bfb8      	it	lt
 80002c4:	426d      	neglt	r5, r5
 80002c6:	dd0c      	ble.n	80002e2 <__adddf3+0x52>
 80002c8:	442c      	add	r4, r5
 80002ca:	ea80 0202 	eor.w	r2, r0, r2
 80002ce:	ea81 0303 	eor.w	r3, r1, r3
 80002d2:	ea82 0000 	eor.w	r0, r2, r0
 80002d6:	ea83 0101 	eor.w	r1, r3, r1
 80002da:	ea80 0202 	eor.w	r2, r0, r2
 80002de:	ea81 0303 	eor.w	r3, r1, r3
 80002e2:	2d36      	cmp	r5, #54	; 0x36
 80002e4:	bf88      	it	hi
 80002e6:	bd30      	pophi	{r4, r5, pc}
 80002e8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002ec:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002f0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x70>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000304:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000308:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800030c:	d002      	beq.n	8000314 <__adddf3+0x84>
 800030e:	4252      	negs	r2, r2
 8000310:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000314:	ea94 0f05 	teq	r4, r5
 8000318:	f000 80a7 	beq.w	800046a <__adddf3+0x1da>
 800031c:	f1a4 0401 	sub.w	r4, r4, #1
 8000320:	f1d5 0e20 	rsbs	lr, r5, #32
 8000324:	db0d      	blt.n	8000342 <__adddf3+0xb2>
 8000326:	fa02 fc0e 	lsl.w	ip, r2, lr
 800032a:	fa22 f205 	lsr.w	r2, r2, r5
 800032e:	1880      	adds	r0, r0, r2
 8000330:	f141 0100 	adc.w	r1, r1, #0
 8000334:	fa03 f20e 	lsl.w	r2, r3, lr
 8000338:	1880      	adds	r0, r0, r2
 800033a:	fa43 f305 	asr.w	r3, r3, r5
 800033e:	4159      	adcs	r1, r3
 8000340:	e00e      	b.n	8000360 <__adddf3+0xd0>
 8000342:	f1a5 0520 	sub.w	r5, r5, #32
 8000346:	f10e 0e20 	add.w	lr, lr, #32
 800034a:	2a01      	cmp	r2, #1
 800034c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000350:	bf28      	it	cs
 8000352:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	18c0      	adds	r0, r0, r3
 800035c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000360:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000364:	d507      	bpl.n	8000376 <__adddf3+0xe6>
 8000366:	f04f 0e00 	mov.w	lr, #0
 800036a:	f1dc 0c00 	rsbs	ip, ip, #0
 800036e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000372:	eb6e 0101 	sbc.w	r1, lr, r1
 8000376:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800037a:	d31b      	bcc.n	80003b4 <__adddf3+0x124>
 800037c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000380:	d30c      	bcc.n	800039c <__adddf3+0x10c>
 8000382:	0849      	lsrs	r1, r1, #1
 8000384:	ea5f 0030 	movs.w	r0, r0, rrx
 8000388:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800038c:	f104 0401 	add.w	r4, r4, #1
 8000390:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000394:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000398:	f080 809a 	bcs.w	80004d0 <__adddf3+0x240>
 800039c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003a0:	bf08      	it	eq
 80003a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a6:	f150 0000 	adcs.w	r0, r0, #0
 80003aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ae:	ea41 0105 	orr.w	r1, r1, r5
 80003b2:	bd30      	pop	{r4, r5, pc}
 80003b4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b8:	4140      	adcs	r0, r0
 80003ba:	eb41 0101 	adc.w	r1, r1, r1
 80003be:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003c2:	f1a4 0401 	sub.w	r4, r4, #1
 80003c6:	d1e9      	bne.n	800039c <__adddf3+0x10c>
 80003c8:	f091 0f00 	teq	r1, #0
 80003cc:	bf04      	itt	eq
 80003ce:	4601      	moveq	r1, r0
 80003d0:	2000      	moveq	r0, #0
 80003d2:	fab1 f381 	clz	r3, r1
 80003d6:	bf08      	it	eq
 80003d8:	3320      	addeq	r3, #32
 80003da:	f1a3 030b 	sub.w	r3, r3, #11
 80003de:	f1b3 0220 	subs.w	r2, r3, #32
 80003e2:	da0c      	bge.n	80003fe <__adddf3+0x16e>
 80003e4:	320c      	adds	r2, #12
 80003e6:	dd08      	ble.n	80003fa <__adddf3+0x16a>
 80003e8:	f102 0c14 	add.w	ip, r2, #20
 80003ec:	f1c2 020c 	rsb	r2, r2, #12
 80003f0:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f4:	fa21 f102 	lsr.w	r1, r1, r2
 80003f8:	e00c      	b.n	8000414 <__adddf3+0x184>
 80003fa:	f102 0214 	add.w	r2, r2, #20
 80003fe:	bfd8      	it	le
 8000400:	f1c2 0c20 	rsble	ip, r2, #32
 8000404:	fa01 f102 	lsl.w	r1, r1, r2
 8000408:	fa20 fc0c 	lsr.w	ip, r0, ip
 800040c:	bfdc      	itt	le
 800040e:	ea41 010c 	orrle.w	r1, r1, ip
 8000412:	4090      	lslle	r0, r2
 8000414:	1ae4      	subs	r4, r4, r3
 8000416:	bfa2      	ittt	ge
 8000418:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800041c:	4329      	orrge	r1, r5
 800041e:	bd30      	popge	{r4, r5, pc}
 8000420:	ea6f 0404 	mvn.w	r4, r4
 8000424:	3c1f      	subs	r4, #31
 8000426:	da1c      	bge.n	8000462 <__adddf3+0x1d2>
 8000428:	340c      	adds	r4, #12
 800042a:	dc0e      	bgt.n	800044a <__adddf3+0x1ba>
 800042c:	f104 0414 	add.w	r4, r4, #20
 8000430:	f1c4 0220 	rsb	r2, r4, #32
 8000434:	fa20 f004 	lsr.w	r0, r0, r4
 8000438:	fa01 f302 	lsl.w	r3, r1, r2
 800043c:	ea40 0003 	orr.w	r0, r0, r3
 8000440:	fa21 f304 	lsr.w	r3, r1, r4
 8000444:	ea45 0103 	orr.w	r1, r5, r3
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	f1c4 040c 	rsb	r4, r4, #12
 800044e:	f1c4 0220 	rsb	r2, r4, #32
 8000452:	fa20 f002 	lsr.w	r0, r0, r2
 8000456:	fa01 f304 	lsl.w	r3, r1, r4
 800045a:	ea40 0003 	orr.w	r0, r0, r3
 800045e:	4629      	mov	r1, r5
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	fa21 f004 	lsr.w	r0, r1, r4
 8000466:	4629      	mov	r1, r5
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	f094 0f00 	teq	r4, #0
 800046e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000472:	bf06      	itte	eq
 8000474:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000478:	3401      	addeq	r4, #1
 800047a:	3d01      	subne	r5, #1
 800047c:	e74e      	b.n	800031c <__adddf3+0x8c>
 800047e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000482:	bf18      	it	ne
 8000484:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000488:	d029      	beq.n	80004de <__adddf3+0x24e>
 800048a:	ea94 0f05 	teq	r4, r5
 800048e:	bf08      	it	eq
 8000490:	ea90 0f02 	teqeq	r0, r2
 8000494:	d005      	beq.n	80004a2 <__adddf3+0x212>
 8000496:	ea54 0c00 	orrs.w	ip, r4, r0
 800049a:	bf04      	itt	eq
 800049c:	4619      	moveq	r1, r3
 800049e:	4610      	moveq	r0, r2
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	ea91 0f03 	teq	r1, r3
 80004a6:	bf1e      	ittt	ne
 80004a8:	2100      	movne	r1, #0
 80004aa:	2000      	movne	r0, #0
 80004ac:	bd30      	popne	{r4, r5, pc}
 80004ae:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004b2:	d105      	bne.n	80004c0 <__adddf3+0x230>
 80004b4:	0040      	lsls	r0, r0, #1
 80004b6:	4149      	adcs	r1, r1
 80004b8:	bf28      	it	cs
 80004ba:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c4:	bf3c      	itt	cc
 80004c6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004ca:	bd30      	popcc	{r4, r5, pc}
 80004cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d8:	f04f 0000 	mov.w	r0, #0
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004e2:	bf1a      	itte	ne
 80004e4:	4619      	movne	r1, r3
 80004e6:	4610      	movne	r0, r2
 80004e8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004ec:	bf1c      	itt	ne
 80004ee:	460b      	movne	r3, r1
 80004f0:	4602      	movne	r2, r0
 80004f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f6:	bf06      	itte	eq
 80004f8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004fc:	ea91 0f03 	teqeq	r1, r3
 8000500:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000504:	bd30      	pop	{r4, r5, pc}
 8000506:	bf00      	nop

08000508 <__aeabi_ui2d>:
 8000508:	f090 0f00 	teq	r0, #0
 800050c:	bf04      	itt	eq
 800050e:	2100      	moveq	r1, #0
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000518:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051c:	f04f 0500 	mov.w	r5, #0
 8000520:	f04f 0100 	mov.w	r1, #0
 8000524:	e750      	b.n	80003c8 <__adddf3+0x138>
 8000526:	bf00      	nop

08000528 <__aeabi_i2d>:
 8000528:	f090 0f00 	teq	r0, #0
 800052c:	bf04      	itt	eq
 800052e:	2100      	moveq	r1, #0
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000538:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800053c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000540:	bf48      	it	mi
 8000542:	4240      	negmi	r0, r0
 8000544:	f04f 0100 	mov.w	r1, #0
 8000548:	e73e      	b.n	80003c8 <__adddf3+0x138>
 800054a:	bf00      	nop

0800054c <__aeabi_f2d>:
 800054c:	0042      	lsls	r2, r0, #1
 800054e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000552:	ea4f 0131 	mov.w	r1, r1, rrx
 8000556:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800055a:	bf1f      	itttt	ne
 800055c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000560:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000564:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000568:	4770      	bxne	lr
 800056a:	f092 0f00 	teq	r2, #0
 800056e:	bf14      	ite	ne
 8000570:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 7460 	mov.w	r4, #896	; 0x380
 800057c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000580:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000584:	e720      	b.n	80003c8 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_ul2d>:
 8000588:	ea50 0201 	orrs.w	r2, r0, r1
 800058c:	bf08      	it	eq
 800058e:	4770      	bxeq	lr
 8000590:	b530      	push	{r4, r5, lr}
 8000592:	f04f 0500 	mov.w	r5, #0
 8000596:	e00a      	b.n	80005ae <__aeabi_l2d+0x16>

08000598 <__aeabi_l2d>:
 8000598:	ea50 0201 	orrs.w	r2, r0, r1
 800059c:	bf08      	it	eq
 800059e:	4770      	bxeq	lr
 80005a0:	b530      	push	{r4, r5, lr}
 80005a2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005a6:	d502      	bpl.n	80005ae <__aeabi_l2d+0x16>
 80005a8:	4240      	negs	r0, r0
 80005aa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ae:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ba:	f43f aedc 	beq.w	8000376 <__adddf3+0xe6>
 80005be:	f04f 0203 	mov.w	r2, #3
 80005c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c6:	bf18      	it	ne
 80005c8:	3203      	addne	r2, #3
 80005ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ce:	bf18      	it	ne
 80005d0:	3203      	addne	r2, #3
 80005d2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005d6:	f1c2 0320 	rsb	r3, r2, #32
 80005da:	fa00 fc03 	lsl.w	ip, r0, r3
 80005de:	fa20 f002 	lsr.w	r0, r0, r2
 80005e2:	fa01 fe03 	lsl.w	lr, r1, r3
 80005e6:	ea40 000e 	orr.w	r0, r0, lr
 80005ea:	fa21 f102 	lsr.w	r1, r1, r2
 80005ee:	4414      	add	r4, r2
 80005f0:	e6c1      	b.n	8000376 <__adddf3+0xe6>
 80005f2:	bf00      	nop

080005f4 <__aeabi_dmul>:
 80005f4:	b570      	push	{r4, r5, r6, lr}
 80005f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000602:	bf1d      	ittte	ne
 8000604:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000608:	ea94 0f0c 	teqne	r4, ip
 800060c:	ea95 0f0c 	teqne	r5, ip
 8000610:	f000 f8de 	bleq	80007d0 <__aeabi_dmul+0x1dc>
 8000614:	442c      	add	r4, r5
 8000616:	ea81 0603 	eor.w	r6, r1, r3
 800061a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800061e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000622:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000626:	bf18      	it	ne
 8000628:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000630:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000634:	d038      	beq.n	80006a8 <__aeabi_dmul+0xb4>
 8000636:	fba0 ce02 	umull	ip, lr, r0, r2
 800063a:	f04f 0500 	mov.w	r5, #0
 800063e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000642:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000646:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064a:	f04f 0600 	mov.w	r6, #0
 800064e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000652:	f09c 0f00 	teq	ip, #0
 8000656:	bf18      	it	ne
 8000658:	f04e 0e01 	orrne.w	lr, lr, #1
 800065c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000660:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000664:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000668:	d204      	bcs.n	8000674 <__aeabi_dmul+0x80>
 800066a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800066e:	416d      	adcs	r5, r5
 8000670:	eb46 0606 	adc.w	r6, r6, r6
 8000674:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000678:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800067c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000680:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000684:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000688:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800068c:	bf88      	it	hi
 800068e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000692:	d81e      	bhi.n	80006d2 <__aeabi_dmul+0xde>
 8000694:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000698:	bf08      	it	eq
 800069a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800069e:	f150 0000 	adcs.w	r0, r0, #0
 80006a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006a6:	bd70      	pop	{r4, r5, r6, pc}
 80006a8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006ac:	ea46 0101 	orr.w	r1, r6, r1
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	ea81 0103 	eor.w	r1, r1, r3
 80006b8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006bc:	bfc2      	ittt	gt
 80006be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006c6:	bd70      	popgt	{r4, r5, r6, pc}
 80006c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006cc:	f04f 0e00 	mov.w	lr, #0
 80006d0:	3c01      	subs	r4, #1
 80006d2:	f300 80ab 	bgt.w	800082c <__aeabi_dmul+0x238>
 80006d6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006da:	bfde      	ittt	le
 80006dc:	2000      	movle	r0, #0
 80006de:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e2:	bd70      	pople	{r4, r5, r6, pc}
 80006e4:	f1c4 0400 	rsb	r4, r4, #0
 80006e8:	3c20      	subs	r4, #32
 80006ea:	da35      	bge.n	8000758 <__aeabi_dmul+0x164>
 80006ec:	340c      	adds	r4, #12
 80006ee:	dc1b      	bgt.n	8000728 <__aeabi_dmul+0x134>
 80006f0:	f104 0414 	add.w	r4, r4, #20
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f305 	lsl.w	r3, r0, r5
 80006fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000700:	fa01 f205 	lsl.w	r2, r1, r5
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800070c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000710:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000714:	fa21 f604 	lsr.w	r6, r1, r4
 8000718:	eb42 0106 	adc.w	r1, r2, r6
 800071c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000720:	bf08      	it	eq
 8000722:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000726:	bd70      	pop	{r4, r5, r6, pc}
 8000728:	f1c4 040c 	rsb	r4, r4, #12
 800072c:	f1c4 0520 	rsb	r5, r4, #32
 8000730:	fa00 f304 	lsl.w	r3, r0, r4
 8000734:	fa20 f005 	lsr.w	r0, r0, r5
 8000738:	fa01 f204 	lsl.w	r2, r1, r4
 800073c:	ea40 0002 	orr.w	r0, r0, r2
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	f141 0100 	adc.w	r1, r1, #0
 800074c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000750:	bf08      	it	eq
 8000752:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000756:	bd70      	pop	{r4, r5, r6, pc}
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f205 	lsl.w	r2, r0, r5
 8000760:	ea4e 0e02 	orr.w	lr, lr, r2
 8000764:	fa20 f304 	lsr.w	r3, r0, r4
 8000768:	fa01 f205 	lsl.w	r2, r1, r5
 800076c:	ea43 0302 	orr.w	r3, r3, r2
 8000770:	fa21 f004 	lsr.w	r0, r1, r4
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	fa21 f204 	lsr.w	r2, r1, r4
 800077c:	ea20 0002 	bic.w	r0, r0, r2
 8000780:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000784:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000788:	bf08      	it	eq
 800078a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078e:	bd70      	pop	{r4, r5, r6, pc}
 8000790:	f094 0f00 	teq	r4, #0
 8000794:	d10f      	bne.n	80007b6 <__aeabi_dmul+0x1c2>
 8000796:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079a:	0040      	lsls	r0, r0, #1
 800079c:	eb41 0101 	adc.w	r1, r1, r1
 80007a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a4:	bf08      	it	eq
 80007a6:	3c01      	subeq	r4, #1
 80007a8:	d0f7      	beq.n	800079a <__aeabi_dmul+0x1a6>
 80007aa:	ea41 0106 	orr.w	r1, r1, r6
 80007ae:	f095 0f00 	teq	r5, #0
 80007b2:	bf18      	it	ne
 80007b4:	4770      	bxne	lr
 80007b6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ba:	0052      	lsls	r2, r2, #1
 80007bc:	eb43 0303 	adc.w	r3, r3, r3
 80007c0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c4:	bf08      	it	eq
 80007c6:	3d01      	subeq	r5, #1
 80007c8:	d0f7      	beq.n	80007ba <__aeabi_dmul+0x1c6>
 80007ca:	ea43 0306 	orr.w	r3, r3, r6
 80007ce:	4770      	bx	lr
 80007d0:	ea94 0f0c 	teq	r4, ip
 80007d4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007d8:	bf18      	it	ne
 80007da:	ea95 0f0c 	teqne	r5, ip
 80007de:	d00c      	beq.n	80007fa <__aeabi_dmul+0x206>
 80007e0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e4:	bf18      	it	ne
 80007e6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ea:	d1d1      	bne.n	8000790 <__aeabi_dmul+0x19c>
 80007ec:	ea81 0103 	eor.w	r1, r1, r3
 80007f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fe:	bf06      	itte	eq
 8000800:	4610      	moveq	r0, r2
 8000802:	4619      	moveq	r1, r3
 8000804:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000808:	d019      	beq.n	800083e <__aeabi_dmul+0x24a>
 800080a:	ea94 0f0c 	teq	r4, ip
 800080e:	d102      	bne.n	8000816 <__aeabi_dmul+0x222>
 8000810:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000814:	d113      	bne.n	800083e <__aeabi_dmul+0x24a>
 8000816:	ea95 0f0c 	teq	r5, ip
 800081a:	d105      	bne.n	8000828 <__aeabi_dmul+0x234>
 800081c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000820:	bf1c      	itt	ne
 8000822:	4610      	movne	r0, r2
 8000824:	4619      	movne	r1, r3
 8000826:	d10a      	bne.n	800083e <__aeabi_dmul+0x24a>
 8000828:	ea81 0103 	eor.w	r1, r1, r3
 800082c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000830:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000834:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000842:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000846:	bd70      	pop	{r4, r5, r6, pc}

08000848 <__aeabi_ddiv>:
 8000848:	b570      	push	{r4, r5, r6, lr}
 800084a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800084e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000852:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000856:	bf1d      	ittte	ne
 8000858:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800085c:	ea94 0f0c 	teqne	r4, ip
 8000860:	ea95 0f0c 	teqne	r5, ip
 8000864:	f000 f8a7 	bleq	80009b6 <__aeabi_ddiv+0x16e>
 8000868:	eba4 0405 	sub.w	r4, r4, r5
 800086c:	ea81 0e03 	eor.w	lr, r1, r3
 8000870:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000874:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000878:	f000 8088 	beq.w	800098c <__aeabi_ddiv+0x144>
 800087c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000880:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000884:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000888:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800088c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000890:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000894:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000898:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800089c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a0:	429d      	cmp	r5, r3
 80008a2:	bf08      	it	eq
 80008a4:	4296      	cmpeq	r6, r2
 80008a6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008aa:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ae:	d202      	bcs.n	80008b6 <__aeabi_ddiv+0x6e>
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	1ab6      	subs	r6, r6, r2
 80008b8:	eb65 0503 	sbc.w	r5, r5, r3
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008c6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d2:	bf22      	ittt	cs
 80008d4:	1ab6      	subcs	r6, r6, r2
 80008d6:	4675      	movcs	r5, lr
 80008d8:	ea40 000c 	orrcs.w	r0, r0, ip
 80008dc:	085b      	lsrs	r3, r3, #1
 80008de:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ea:	bf22      	ittt	cs
 80008ec:	1ab6      	subcs	r6, r6, r2
 80008ee:	4675      	movcs	r5, lr
 80008f0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000902:	bf22      	ittt	cs
 8000904:	1ab6      	subcs	r6, r6, r2
 8000906:	4675      	movcs	r5, lr
 8000908:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800090c:	085b      	lsrs	r3, r3, #1
 800090e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000912:	ebb6 0e02 	subs.w	lr, r6, r2
 8000916:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091a:	bf22      	ittt	cs
 800091c:	1ab6      	subcs	r6, r6, r2
 800091e:	4675      	movcs	r5, lr
 8000920:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000924:	ea55 0e06 	orrs.w	lr, r5, r6
 8000928:	d018      	beq.n	800095c <__aeabi_ddiv+0x114>
 800092a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800092e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000932:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000936:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800093e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000942:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000946:	d1c0      	bne.n	80008ca <__aeabi_ddiv+0x82>
 8000948:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800094c:	d10b      	bne.n	8000966 <__aeabi_ddiv+0x11e>
 800094e:	ea41 0100 	orr.w	r1, r1, r0
 8000952:	f04f 0000 	mov.w	r0, #0
 8000956:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095a:	e7b6      	b.n	80008ca <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	bf04      	itt	eq
 8000962:	4301      	orreq	r1, r0
 8000964:	2000      	moveq	r0, #0
 8000966:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096a:	bf88      	it	hi
 800096c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000970:	f63f aeaf 	bhi.w	80006d2 <__aeabi_dmul+0xde>
 8000974:	ebb5 0c03 	subs.w	ip, r5, r3
 8000978:	bf04      	itt	eq
 800097a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800097e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000982:	f150 0000 	adcs.w	r0, r0, #0
 8000986:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098a:	bd70      	pop	{r4, r5, r6, pc}
 800098c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000990:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000994:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000998:	bfc2      	ittt	gt
 800099a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800099e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a2:	bd70      	popgt	{r4, r5, r6, pc}
 80009a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a8:	f04f 0e00 	mov.w	lr, #0
 80009ac:	3c01      	subs	r4, #1
 80009ae:	e690      	b.n	80006d2 <__aeabi_dmul+0xde>
 80009b0:	ea45 0e06 	orr.w	lr, r5, r6
 80009b4:	e68d      	b.n	80006d2 <__aeabi_dmul+0xde>
 80009b6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ba:	ea94 0f0c 	teq	r4, ip
 80009be:	bf08      	it	eq
 80009c0:	ea95 0f0c 	teqeq	r5, ip
 80009c4:	f43f af3b 	beq.w	800083e <__aeabi_dmul+0x24a>
 80009c8:	ea94 0f0c 	teq	r4, ip
 80009cc:	d10a      	bne.n	80009e4 <__aeabi_ddiv+0x19c>
 80009ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d2:	f47f af34 	bne.w	800083e <__aeabi_dmul+0x24a>
 80009d6:	ea95 0f0c 	teq	r5, ip
 80009da:	f47f af25 	bne.w	8000828 <__aeabi_dmul+0x234>
 80009de:	4610      	mov	r0, r2
 80009e0:	4619      	mov	r1, r3
 80009e2:	e72c      	b.n	800083e <__aeabi_dmul+0x24a>
 80009e4:	ea95 0f0c 	teq	r5, ip
 80009e8:	d106      	bne.n	80009f8 <__aeabi_ddiv+0x1b0>
 80009ea:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ee:	f43f aefd 	beq.w	80007ec <__aeabi_dmul+0x1f8>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e722      	b.n	800083e <__aeabi_dmul+0x24a>
 80009f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009fc:	bf18      	it	ne
 80009fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a02:	f47f aec5 	bne.w	8000790 <__aeabi_dmul+0x19c>
 8000a06:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0a:	f47f af0d 	bne.w	8000828 <__aeabi_dmul+0x234>
 8000a0e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a12:	f47f aeeb 	bne.w	80007ec <__aeabi_dmul+0x1f8>
 8000a16:	e712      	b.n	800083e <__aeabi_dmul+0x24a>

08000a18 <__gedf2>:
 8000a18:	f04f 3cff 	mov.w	ip, #4294967295
 8000a1c:	e006      	b.n	8000a2c <__cmpdf2+0x4>
 8000a1e:	bf00      	nop

08000a20 <__ledf2>:
 8000a20:	f04f 0c01 	mov.w	ip, #1
 8000a24:	e002      	b.n	8000a2c <__cmpdf2+0x4>
 8000a26:	bf00      	nop

08000a28 <__cmpdf2>:
 8000a28:	f04f 0c01 	mov.w	ip, #1
 8000a2c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a3c:	bf18      	it	ne
 8000a3e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a42:	d01b      	beq.n	8000a7c <__cmpdf2+0x54>
 8000a44:	b001      	add	sp, #4
 8000a46:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4a:	bf0c      	ite	eq
 8000a4c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a50:	ea91 0f03 	teqne	r1, r3
 8000a54:	bf02      	ittt	eq
 8000a56:	ea90 0f02 	teqeq	r0, r2
 8000a5a:	2000      	moveq	r0, #0
 8000a5c:	4770      	bxeq	lr
 8000a5e:	f110 0f00 	cmn.w	r0, #0
 8000a62:	ea91 0f03 	teq	r1, r3
 8000a66:	bf58      	it	pl
 8000a68:	4299      	cmppl	r1, r3
 8000a6a:	bf08      	it	eq
 8000a6c:	4290      	cmpeq	r0, r2
 8000a6e:	bf2c      	ite	cs
 8000a70:	17d8      	asrcs	r0, r3, #31
 8000a72:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a76:	f040 0001 	orr.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	d102      	bne.n	8000a8c <__cmpdf2+0x64>
 8000a86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8a:	d107      	bne.n	8000a9c <__cmpdf2+0x74>
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d1d6      	bne.n	8000a44 <__cmpdf2+0x1c>
 8000a96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9a:	d0d3      	beq.n	8000a44 <__cmpdf2+0x1c>
 8000a9c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_cdrcmple>:
 8000aa4:	4684      	mov	ip, r0
 8000aa6:	4610      	mov	r0, r2
 8000aa8:	4662      	mov	r2, ip
 8000aaa:	468c      	mov	ip, r1
 8000aac:	4619      	mov	r1, r3
 8000aae:	4663      	mov	r3, ip
 8000ab0:	e000      	b.n	8000ab4 <__aeabi_cdcmpeq>
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_cdcmpeq>:
 8000ab4:	b501      	push	{r0, lr}
 8000ab6:	f7ff ffb7 	bl	8000a28 <__cmpdf2>
 8000aba:	2800      	cmp	r0, #0
 8000abc:	bf48      	it	mi
 8000abe:	f110 0f00 	cmnmi.w	r0, #0
 8000ac2:	bd01      	pop	{r0, pc}

08000ac4 <__aeabi_dcmpeq>:
 8000ac4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac8:	f7ff fff4 	bl	8000ab4 <__aeabi_cdcmpeq>
 8000acc:	bf0c      	ite	eq
 8000ace:	2001      	moveq	r0, #1
 8000ad0:	2000      	movne	r0, #0
 8000ad2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_dcmplt>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff ffea 	bl	8000ab4 <__aeabi_cdcmpeq>
 8000ae0:	bf34      	ite	cc
 8000ae2:	2001      	movcc	r0, #1
 8000ae4:	2000      	movcs	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmple>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffe0 	bl	8000ab4 <__aeabi_cdcmpeq>
 8000af4:	bf94      	ite	ls
 8000af6:	2001      	movls	r0, #1
 8000af8:	2000      	movhi	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmpge>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffce 	bl	8000aa4 <__aeabi_cdrcmple>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpgt>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffc4 	bl	8000aa4 <__aeabi_cdrcmple>
 8000b1c:	bf34      	ite	cc
 8000b1e:	2001      	movcc	r0, #1
 8000b20:	2000      	movcs	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpun>:
 8000b28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b30:	d102      	bne.n	8000b38 <__aeabi_dcmpun+0x10>
 8000b32:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b36:	d10a      	bne.n	8000b4e <__aeabi_dcmpun+0x26>
 8000b38:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b40:	d102      	bne.n	8000b48 <__aeabi_dcmpun+0x20>
 8000b42:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b46:	d102      	bne.n	8000b4e <__aeabi_dcmpun+0x26>
 8000b48:	f04f 0000 	mov.w	r0, #0
 8000b4c:	4770      	bx	lr
 8000b4e:	f04f 0001 	mov.w	r0, #1
 8000b52:	4770      	bx	lr

08000b54 <__aeabi_d2iz>:
 8000b54:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b58:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b5c:	d215      	bcs.n	8000b8a <__aeabi_d2iz+0x36>
 8000b5e:	d511      	bpl.n	8000b84 <__aeabi_d2iz+0x30>
 8000b60:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b64:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b68:	d912      	bls.n	8000b90 <__aeabi_d2iz+0x3c>
 8000b6a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b6e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b72:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	bf18      	it	ne
 8000b80:	4240      	negne	r0, r0
 8000b82:	4770      	bx	lr
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8e:	d105      	bne.n	8000b9c <__aeabi_d2iz+0x48>
 8000b90:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b94:	bf08      	it	eq
 8000b96:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9a:	4770      	bx	lr
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop

08000ba4 <__aeabi_uldivmod>:
 8000ba4:	b953      	cbnz	r3, 8000bbc <__aeabi_uldivmod+0x18>
 8000ba6:	b94a      	cbnz	r2, 8000bbc <__aeabi_uldivmod+0x18>
 8000ba8:	2900      	cmp	r1, #0
 8000baa:	bf08      	it	eq
 8000bac:	2800      	cmpeq	r0, #0
 8000bae:	bf1c      	itt	ne
 8000bb0:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb4:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb8:	f000 b982 	b.w	8000ec0 <__aeabi_idiv0>
 8000bbc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc4:	f000 f806 	bl	8000bd4 <__udivmoddi4>
 8000bc8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bcc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd0:	b004      	add	sp, #16
 8000bd2:	4770      	bx	lr

08000bd4 <__udivmoddi4>:
 8000bd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000bd8:	468c      	mov	ip, r1
 8000bda:	460c      	mov	r4, r1
 8000bdc:	4605      	mov	r5, r0
 8000bde:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14f      	bne.n	8000c84 <__udivmoddi4+0xb0>
 8000be4:	428a      	cmp	r2, r1
 8000be6:	4617      	mov	r7, r2
 8000be8:	d96b      	bls.n	8000cc2 <__udivmoddi4+0xee>
 8000bea:	fab2 fe82 	clz	lr, r2
 8000bee:	f1be 0f00 	cmp.w	lr, #0
 8000bf2:	d00b      	beq.n	8000c0c <__udivmoddi4+0x38>
 8000bf4:	f1ce 0520 	rsb	r5, lr, #32
 8000bf8:	fa20 f505 	lsr.w	r5, r0, r5
 8000bfc:	fa01 f30e 	lsl.w	r3, r1, lr
 8000c00:	ea45 0c03 	orr.w	ip, r5, r3
 8000c04:	fa02 f70e 	lsl.w	r7, r2, lr
 8000c08:	fa00 f50e 	lsl.w	r5, r0, lr
 8000c0c:	0c39      	lsrs	r1, r7, #16
 8000c0e:	fbbc f0f1 	udiv	r0, ip, r1
 8000c12:	b2ba      	uxth	r2, r7
 8000c14:	fb01 c310 	mls	r3, r1, r0, ip
 8000c18:	fb00 f802 	mul.w	r8, r0, r2
 8000c1c:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 8000c20:	ea4c 4403 	orr.w	r4, ip, r3, lsl #16
 8000c24:	45a0      	cmp	r8, r4
 8000c26:	d909      	bls.n	8000c3c <__udivmoddi4+0x68>
 8000c28:	19e4      	adds	r4, r4, r7
 8000c2a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c2e:	f080 8128 	bcs.w	8000e82 <__udivmoddi4+0x2ae>
 8000c32:	45a0      	cmp	r8, r4
 8000c34:	f240 8125 	bls.w	8000e82 <__udivmoddi4+0x2ae>
 8000c38:	3802      	subs	r0, #2
 8000c3a:	443c      	add	r4, r7
 8000c3c:	ebc8 0404 	rsb	r4, r8, r4
 8000c40:	fbb4 f3f1 	udiv	r3, r4, r1
 8000c44:	fb01 4c13 	mls	ip, r1, r3, r4
 8000c48:	fb03 f202 	mul.w	r2, r3, r2
 8000c4c:	b2ac      	uxth	r4, r5
 8000c4e:	ea44 410c 	orr.w	r1, r4, ip, lsl #16
 8000c52:	428a      	cmp	r2, r1
 8000c54:	d909      	bls.n	8000c6a <__udivmoddi4+0x96>
 8000c56:	19c9      	adds	r1, r1, r7
 8000c58:	f103 34ff 	add.w	r4, r3, #4294967295
 8000c5c:	f080 810f 	bcs.w	8000e7e <__udivmoddi4+0x2aa>
 8000c60:	428a      	cmp	r2, r1
 8000c62:	f240 810c 	bls.w	8000e7e <__udivmoddi4+0x2aa>
 8000c66:	3b02      	subs	r3, #2
 8000c68:	4439      	add	r1, r7
 8000c6a:	1a8a      	subs	r2, r1, r2
 8000c6c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c70:	2100      	movs	r1, #0
 8000c72:	2e00      	cmp	r6, #0
 8000c74:	d063      	beq.n	8000d3e <__udivmoddi4+0x16a>
 8000c76:	fa22 f20e 	lsr.w	r2, r2, lr
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	e886 000c 	stmia.w	r6, {r2, r3}
 8000c80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c84:	428b      	cmp	r3, r1
 8000c86:	d907      	bls.n	8000c98 <__udivmoddi4+0xc4>
 8000c88:	2e00      	cmp	r6, #0
 8000c8a:	d056      	beq.n	8000d3a <__udivmoddi4+0x166>
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	e886 0011 	stmia.w	r6, {r0, r4}
 8000c92:	4608      	mov	r0, r1
 8000c94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c98:	fab3 f183 	clz	r1, r3
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	f040 8093 	bne.w	8000dc8 <__udivmoddi4+0x1f4>
 8000ca2:	42a3      	cmp	r3, r4
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd8>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80fe 	bhi.w	8000ea8 <__udivmoddi4+0x2d4>
 8000cac:	1a85      	subs	r5, r0, r2
 8000cae:	eb64 0303 	sbc.w	r3, r4, r3
 8000cb2:	469c      	mov	ip, r3
 8000cb4:	2001      	movs	r0, #1
 8000cb6:	2e00      	cmp	r6, #0
 8000cb8:	d041      	beq.n	8000d3e <__udivmoddi4+0x16a>
 8000cba:	e886 1020 	stmia.w	r6, {r5, ip}
 8000cbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000cc2:	b912      	cbnz	r2, 8000cca <__udivmoddi4+0xf6>
 8000cc4:	2701      	movs	r7, #1
 8000cc6:	fbb7 f7f2 	udiv	r7, r7, r2
 8000cca:	fab7 fe87 	clz	lr, r7
 8000cce:	f1be 0f00 	cmp.w	lr, #0
 8000cd2:	d136      	bne.n	8000d42 <__udivmoddi4+0x16e>
 8000cd4:	1be4      	subs	r4, r4, r7
 8000cd6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cda:	fa1f f987 	uxth.w	r9, r7
 8000cde:	2101      	movs	r1, #1
 8000ce0:	fbb4 f3f8 	udiv	r3, r4, r8
 8000ce4:	fb08 4413 	mls	r4, r8, r3, r4
 8000ce8:	fb09 f203 	mul.w	r2, r9, r3
 8000cec:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 8000cf0:	ea4c 4404 	orr.w	r4, ip, r4, lsl #16
 8000cf4:	42a2      	cmp	r2, r4
 8000cf6:	d907      	bls.n	8000d08 <__udivmoddi4+0x134>
 8000cf8:	19e4      	adds	r4, r4, r7
 8000cfa:	f103 30ff 	add.w	r0, r3, #4294967295
 8000cfe:	d202      	bcs.n	8000d06 <__udivmoddi4+0x132>
 8000d00:	42a2      	cmp	r2, r4
 8000d02:	f200 80d3 	bhi.w	8000eac <__udivmoddi4+0x2d8>
 8000d06:	4603      	mov	r3, r0
 8000d08:	1aa4      	subs	r4, r4, r2
 8000d0a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d0e:	fb08 4810 	mls	r8, r8, r0, r4
 8000d12:	fb09 f900 	mul.w	r9, r9, r0
 8000d16:	b2ac      	uxth	r4, r5
 8000d18:	ea44 4208 	orr.w	r2, r4, r8, lsl #16
 8000d1c:	4591      	cmp	r9, r2
 8000d1e:	d907      	bls.n	8000d30 <__udivmoddi4+0x15c>
 8000d20:	19d2      	adds	r2, r2, r7
 8000d22:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0x15a>
 8000d28:	4591      	cmp	r9, r2
 8000d2a:	f200 80ba 	bhi.w	8000ea2 <__udivmoddi4+0x2ce>
 8000d2e:	4620      	mov	r0, r4
 8000d30:	ebc9 0202 	rsb	r2, r9, r2
 8000d34:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d38:	e79b      	b.n	8000c72 <__udivmoddi4+0x9e>
 8000d3a:	4631      	mov	r1, r6
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d42:	fa07 f70e 	lsl.w	r7, r7, lr
 8000d46:	f1ce 0c20 	rsb	ip, lr, #32
 8000d4a:	fa24 f30c 	lsr.w	r3, r4, ip
 8000d4e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d52:	fbb3 faf8 	udiv	sl, r3, r8
 8000d56:	fa1f f987 	uxth.w	r9, r7
 8000d5a:	fb08 351a 	mls	r5, r8, sl, r3
 8000d5e:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000d62:	fa04 f40e 	lsl.w	r4, r4, lr
 8000d66:	fb0a fb09 	mul.w	fp, sl, r9
 8000d6a:	ea4c 0c04 	orr.w	ip, ip, r4
 8000d6e:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000d72:	ea42 4305 	orr.w	r3, r2, r5, lsl #16
 8000d76:	459b      	cmp	fp, r3
 8000d78:	fa00 f50e 	lsl.w	r5, r0, lr
 8000d7c:	d90a      	bls.n	8000d94 <__udivmoddi4+0x1c0>
 8000d7e:	19db      	adds	r3, r3, r7
 8000d80:	f10a 32ff 	add.w	r2, sl, #4294967295
 8000d84:	f080 808b 	bcs.w	8000e9e <__udivmoddi4+0x2ca>
 8000d88:	459b      	cmp	fp, r3
 8000d8a:	f240 8088 	bls.w	8000e9e <__udivmoddi4+0x2ca>
 8000d8e:	f1aa 0a02 	sub.w	sl, sl, #2
 8000d92:	443b      	add	r3, r7
 8000d94:	ebcb 0303 	rsb	r3, fp, r3
 8000d98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d9c:	fb08 3310 	mls	r3, r8, r0, r3
 8000da0:	fb00 f409 	mul.w	r4, r0, r9
 8000da4:	fa1f fc8c 	uxth.w	ip, ip
 8000da8:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
 8000dac:	429c      	cmp	r4, r3
 8000dae:	d907      	bls.n	8000dc0 <__udivmoddi4+0x1ec>
 8000db0:	19db      	adds	r3, r3, r7
 8000db2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000db6:	d26e      	bcs.n	8000e96 <__udivmoddi4+0x2c2>
 8000db8:	429c      	cmp	r4, r3
 8000dba:	d96c      	bls.n	8000e96 <__udivmoddi4+0x2c2>
 8000dbc:	3802      	subs	r0, #2
 8000dbe:	443b      	add	r3, r7
 8000dc0:	1b1c      	subs	r4, r3, r4
 8000dc2:	ea40 410a 	orr.w	r1, r0, sl, lsl #16
 8000dc6:	e78b      	b.n	8000ce0 <__udivmoddi4+0x10c>
 8000dc8:	f1c1 0e20 	rsb	lr, r1, #32
 8000dcc:	408b      	lsls	r3, r1
 8000dce:	fa22 fc0e 	lsr.w	ip, r2, lr
 8000dd2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dd6:	fa24 f70e 	lsr.w	r7, r4, lr
 8000dda:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dde:	fbb7 faf9 	udiv	sl, r7, r9
 8000de2:	fa1f f38c 	uxth.w	r3, ip
 8000de6:	fb09 771a 	mls	r7, r9, sl, r7
 8000dea:	fa20 f80e 	lsr.w	r8, r0, lr
 8000dee:	408c      	lsls	r4, r1
 8000df0:	fb0a f503 	mul.w	r5, sl, r3
 8000df4:	ea48 0404 	orr.w	r4, r8, r4
 8000df8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8000dfc:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
 8000e00:	42bd      	cmp	r5, r7
 8000e02:	fa02 f201 	lsl.w	r2, r2, r1
 8000e06:	fa00 fb01 	lsl.w	fp, r0, r1
 8000e0a:	d909      	bls.n	8000e20 <__udivmoddi4+0x24c>
 8000e0c:	eb17 070c 	adds.w	r7, r7, ip
 8000e10:	f10a 30ff 	add.w	r0, sl, #4294967295
 8000e14:	d241      	bcs.n	8000e9a <__udivmoddi4+0x2c6>
 8000e16:	42bd      	cmp	r5, r7
 8000e18:	d93f      	bls.n	8000e9a <__udivmoddi4+0x2c6>
 8000e1a:	f1aa 0a02 	sub.w	sl, sl, #2
 8000e1e:	4467      	add	r7, ip
 8000e20:	1b7f      	subs	r7, r7, r5
 8000e22:	fbb7 f5f9 	udiv	r5, r7, r9
 8000e26:	fb09 7715 	mls	r7, r9, r5, r7
 8000e2a:	fb05 f303 	mul.w	r3, r5, r3
 8000e2e:	b2a4      	uxth	r4, r4
 8000e30:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 8000e34:	42bb      	cmp	r3, r7
 8000e36:	d908      	bls.n	8000e4a <__udivmoddi4+0x276>
 8000e38:	eb17 070c 	adds.w	r7, r7, ip
 8000e3c:	f105 30ff 	add.w	r0, r5, #4294967295
 8000e40:	d227      	bcs.n	8000e92 <__udivmoddi4+0x2be>
 8000e42:	42bb      	cmp	r3, r7
 8000e44:	d925      	bls.n	8000e92 <__udivmoddi4+0x2be>
 8000e46:	3d02      	subs	r5, #2
 8000e48:	4467      	add	r7, ip
 8000e4a:	ea45 400a 	orr.w	r0, r5, sl, lsl #16
 8000e4e:	fba0 8902 	umull	r8, r9, r0, r2
 8000e52:	1aff      	subs	r7, r7, r3
 8000e54:	454f      	cmp	r7, r9
 8000e56:	4645      	mov	r5, r8
 8000e58:	464c      	mov	r4, r9
 8000e5a:	d314      	bcc.n	8000e86 <__udivmoddi4+0x2b2>
 8000e5c:	d029      	beq.n	8000eb2 <__udivmoddi4+0x2de>
 8000e5e:	b366      	cbz	r6, 8000eba <__udivmoddi4+0x2e6>
 8000e60:	ebbb 0305 	subs.w	r3, fp, r5
 8000e64:	eb67 0704 	sbc.w	r7, r7, r4
 8000e68:	fa07 fe0e 	lsl.w	lr, r7, lr
 8000e6c:	40cb      	lsrs	r3, r1
 8000e6e:	40cf      	lsrs	r7, r1
 8000e70:	ea4e 0303 	orr.w	r3, lr, r3
 8000e74:	e886 0088 	stmia.w	r6, {r3, r7}
 8000e78:	2100      	movs	r1, #0
 8000e7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000e7e:	4623      	mov	r3, r4
 8000e80:	e6f3      	b.n	8000c6a <__udivmoddi4+0x96>
 8000e82:	4618      	mov	r0, r3
 8000e84:	e6da      	b.n	8000c3c <__udivmoddi4+0x68>
 8000e86:	ebb8 0502 	subs.w	r5, r8, r2
 8000e8a:	eb69 040c 	sbc.w	r4, r9, ip
 8000e8e:	3801      	subs	r0, #1
 8000e90:	e7e5      	b.n	8000e5e <__udivmoddi4+0x28a>
 8000e92:	4605      	mov	r5, r0
 8000e94:	e7d9      	b.n	8000e4a <__udivmoddi4+0x276>
 8000e96:	4610      	mov	r0, r2
 8000e98:	e792      	b.n	8000dc0 <__udivmoddi4+0x1ec>
 8000e9a:	4682      	mov	sl, r0
 8000e9c:	e7c0      	b.n	8000e20 <__udivmoddi4+0x24c>
 8000e9e:	4692      	mov	sl, r2
 8000ea0:	e778      	b.n	8000d94 <__udivmoddi4+0x1c0>
 8000ea2:	3802      	subs	r0, #2
 8000ea4:	443a      	add	r2, r7
 8000ea6:	e743      	b.n	8000d30 <__udivmoddi4+0x15c>
 8000ea8:	4608      	mov	r0, r1
 8000eaa:	e704      	b.n	8000cb6 <__udivmoddi4+0xe2>
 8000eac:	3b02      	subs	r3, #2
 8000eae:	443c      	add	r4, r7
 8000eb0:	e72a      	b.n	8000d08 <__udivmoddi4+0x134>
 8000eb2:	45c3      	cmp	fp, r8
 8000eb4:	d3e7      	bcc.n	8000e86 <__udivmoddi4+0x2b2>
 8000eb6:	463c      	mov	r4, r7
 8000eb8:	e7d1      	b.n	8000e5e <__udivmoddi4+0x28a>
 8000eba:	4631      	mov	r1, r6
 8000ebc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000ec0 <__aeabi_idiv0>:
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop

08000ec4 <main>:
* Returns     : none
*********************************************************************************************************
*/

int  main (void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b088      	sub	sp, #32
 8000ec8:	af06      	add	r7, sp, #24
#if (OS_TASK_NAME_EN > 0)
    CPU_INT08U  err;
#endif


    BSP_IntDisAll();                                            /* Disable all interrupts.                              */
 8000eca:	f001 f81b 	bl	8001f04 <BSP_IntDisAll>

    OSInit();                                                   /* Init uC/OS-II.                                       */
 8000ece:	f002 f963 	bl	8003198 <OSInit>

    OSTaskCreateExt(AppTaskStart,                               /* Create the start task.                               */
 8000ed2:	2303      	movs	r3, #3
 8000ed4:	9304      	str	r3, [sp, #16]
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	9303      	str	r3, [sp, #12]
 8000eda:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ede:	9302      	str	r3, [sp, #8]
 8000ee0:	4b0b      	ldr	r3, [pc, #44]	; (8000f10 <main+0x4c>)
 8000ee2:	9301      	str	r3, [sp, #4]
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	9300      	str	r3, [sp, #0]
 8000ee8:	2302      	movs	r3, #2
 8000eea:	4a0a      	ldr	r2, [pc, #40]	; (8000f14 <main+0x50>)
 8000eec:	2100      	movs	r1, #0
 8000eee:	480a      	ldr	r0, [pc, #40]	; (8000f18 <main+0x54>)
 8000ef0:	f003 f9b4 	bl	800425c <OSTaskCreateExt>
                    APP_CFG_TASK_START_STK_SIZE,
                    (void *)0,
                    OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR);

#if (OS_TASK_NAME_EN > 0)
    OSTaskNameSet((INT8U  )APP_CFG_TASK_START_PRIO,
 8000ef4:	1dfb      	adds	r3, r7, #7
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	4908      	ldr	r1, [pc, #32]	; (8000f1c <main+0x58>)
 8000efa:	2002      	movs	r0, #2
 8000efc:	f003 fb02 	bl	8004504 <OSTaskNameSet>
    		      (INT8U *)"Start Task",
    		      (INT8U *)&err);
#endif

    OSStart();                                              /* Start multitasking (i.e. give control to uC/OS-II). */
 8000f00:	f002 fa34 	bl	800336c <OSStart>

    return 1;
 8000f04:	2301      	movs	r3, #1
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	20000558 	.word	0x20000558
 8000f14:	20000954 	.word	0x20000954
 8000f18:	08000f21 	.word	0x08000f21
 8000f1c:	08007a5c 	.word	0x08007a5c

08000f20 <AppTaskStart>:
*                  used.  The compiler should not generate any code for this statement.
*********************************************************************************************************
*/

static  void  AppTaskStart (void *p_arg)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b084      	sub	sp, #16
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
    CPU_INT32U  cnts;


   (void)p_arg;

    BSP_Init();                                                 /* Initialize BSP functions                             */
 8000f28:	f000 feaa 	bl	8001c80 <BSP_Init>
    CPU_Init();                                                 /* Initialize the uC/CPU services                       */
 8000f2c:	f001 fde6 	bl	8002afc <CPU_Init>
    
    cpu_clk_freq = BSP_CPU_ClkFreq();                           /* Determine SysTick reference freq.                    */
 8000f30:	f000 ff1e 	bl	8001d70 <BSP_CPU_ClkFreq>
 8000f34:	60f8      	str	r0, [r7, #12]
    cnts         = cpu_clk_freq                                 /* Determine nbr SysTick increments                     */
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	4a14      	ldr	r2, [pc, #80]	; (8000f8c <AppTaskStart+0x6c>)
 8000f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f3e:	099b      	lsrs	r3, r3, #6
 8000f40:	60bb      	str	r3, [r7, #8]
                 / (CPU_INT32U)OS_TICKS_PER_SEC;

    OS_CPU_SysTickInit(cnts);                                   /* Init uC/OS periodic time src (SysTick).              */
 8000f42:	68b8      	ldr	r0, [r7, #8]
 8000f44:	f001 ffee 	bl	8002f24 <OS_CPU_SysTickInit>

    Mem_Init();                                                 /* Initialize memory managment module                   */
 8000f48:	f001 fe18 	bl	8002b7c <Mem_Init>
    Math_Init();                                                /* Initialize mathematical module                       */
 8000f4c:	f001 fdf8 	bl	8002b40 <Math_Init>

#if OS_CFG_STAT_TASK_EN > 0u
    OSStatInit();                                               /* Compute CPU capacity with no task running            */
#endif
    
    BSP_LED_Off(0);
 8000f50:	2000      	movs	r0, #0
 8000f52:	f000 ff33 	bl	8001dbc <BSP_LED_Off>

    BSP_Ser_Init(115200);                                       /* Initialize Serial communication for application ...  */
 8000f56:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 8000f5a:	f001 fb23 	bl	80025a4 <BSP_Ser_Init>

                                                                /* ... tracing                                          */
    APP_TRACE_DBG(("\n\n\r"));
 8000f5e:	480c      	ldr	r0, [pc, #48]	; (8000f90 <AppTaskStart+0x70>)
 8000f60:	f001 fc06 	bl	8002770 <BSP_Ser_Printf>
    APP_TRACE_DBG(("Creating Application kernel objects\n\r"));
 8000f64:	480b      	ldr	r0, [pc, #44]	; (8000f94 <AppTaskStart+0x74>)
 8000f66:	f001 fc03 	bl	8002770 <BSP_Ser_Printf>
    AppObjCreate();                                             /* Create Applicaiton kernel objects                    */
 8000f6a:	f000 f81d 	bl	8000fa8 <AppObjCreate>

    APP_TRACE_DBG(("Creating Application Tasks\n\r"));
 8000f6e:	480a      	ldr	r0, [pc, #40]	; (8000f98 <AppTaskStart+0x78>)
 8000f70:	f001 fbfe 	bl	8002770 <BSP_Ser_Printf>
    AppTaskCreate();                                            /* Create Application tasks                             */
 8000f74:	f000 f812 	bl	8000f9c <AppTaskCreate>

    while (DEF_TRUE) {                                          /* Task body, always written as an infinite loop.       */
        BSP_LED_Toggle(0);
 8000f78:	2000      	movs	r0, #0
 8000f7a:	f000 ff53 	bl	8001e24 <BSP_LED_Toggle>
        OSTimeDlyHMSM(0, 0, 0, 100);
 8000f7e:	2364      	movs	r3, #100	; 0x64
 8000f80:	2200      	movs	r2, #0
 8000f82:	2100      	movs	r1, #0
 8000f84:	2000      	movs	r0, #0
 8000f86:	f003 fc5d 	bl	8004844 <OSTimeDlyHMSM>
    }
 8000f8a:	e7f5      	b.n	8000f78 <AppTaskStart+0x58>
 8000f8c:	10624dd3 	.word	0x10624dd3
 8000f90:	08007a68 	.word	0x08007a68
 8000f94:	08007a6c 	.word	0x08007a6c
 8000f98:	08007a94 	.word	0x08007a94

08000f9c <AppTaskCreate>:
* Note(s)     : none.
*********************************************************************************************************
*/

static  void  AppTaskCreate (void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0

}
 8000fa0:	bf00      	nop
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bc80      	pop	{r7}
 8000fa6:	4770      	bx	lr

08000fa8 <AppObjCreate>:
*
* Note(s)     : none.
*********************************************************************************************************
*/
static  void  AppObjCreate (void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0

}
 8000fac:	bf00      	nop
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bc80      	pop	{r7}
 8000fb2:	4770      	bx	lr

08000fb4 <App_TaskCreateHook>:
* Note(s)     : (1) Interrupts are disabled during this call.
*********************************************************************************************************
*/

void  App_TaskCreateHook (OS_TCB *ptcb)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
#if (APP_CFG_PROBE_OS_PLUGIN_EN == DEF_ENABLED) && (OS_PROBE_HOOKS_EN > 0)
    OSProbe_TaskCreateHook(ptcb);
#endif
}
 8000fbc:	bf00      	nop
 8000fbe:	370c      	adds	r7, #12
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bc80      	pop	{r7}
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop

08000fc8 <App_TaskDelHook>:
* Note(s)     : (1) Interrupts are disabled during this call.
*********************************************************************************************************
*/

void  App_TaskDelHook (OS_TCB *ptcb)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
    (void)ptcb;
}
 8000fd0:	bf00      	nop
 8000fd2:	370c      	adds	r7, #12
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bc80      	pop	{r7}
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop

08000fdc <App_TaskIdleHook>:
*********************************************************************************************************
*/

#if OS_VERSION >= 251
void  App_TaskIdleHook (void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
}
 8000fe0:	bf00      	nop
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bc80      	pop	{r7}
 8000fe6:	4770      	bx	lr

08000fe8 <App_TaskStatHook>:
* Argument(s) : none.
*********************************************************************************************************
*/

void  App_TaskStatHook (void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
}
 8000fec:	bf00      	nop
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bc80      	pop	{r7}
 8000ff2:	4770      	bx	lr

08000ff4 <App_TaskReturnHook>:
*/


#if OS_VERSION >= 289
void  App_TaskReturnHook (OS_TCB  *ptcb)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
    (void)ptcb;
}
 8000ffc:	bf00      	nop
 8000ffe:	370c      	adds	r7, #12
 8001000:	46bd      	mov	sp, r7
 8001002:	bc80      	pop	{r7}
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <App_TaskSwHook>:
*********************************************************************************************************
*/

#if OS_TASK_SW_HOOK_EN > 0
void  App_TaskSwHook (void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
#if (APP_CFG_PROBE_OS_PLUGIN_EN > 0) && (OS_PROBE_HOOKS_EN > 0)
    OSProbe_TaskSwHook();
#endif
}
 800100c:	bf00      	nop
 800100e:	46bd      	mov	sp, r7
 8001010:	bc80      	pop	{r7}
 8001012:	4770      	bx	lr

08001014 <App_TCBInitHook>:
*********************************************************************************************************
*/

#if OS_VERSION >= 204
void  App_TCBInitHook (OS_TCB *ptcb)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
    (void)ptcb;
}
 800101c:	bf00      	nop
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	bc80      	pop	{r7}
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop

08001028 <App_TimeTickHook>:
*********************************************************************************************************
*/

#if OS_TIME_TICK_HOOK_EN > 0
void  App_TimeTickHook (void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
#if (APP_CFG_PROBE_OS_PLUGIN_EN == DEF_ENABLED) && (OS_PROBE_HOOKS_EN > 0)
    OSProbe_TickHook();
#endif
}
 800102c:	bf00      	nop
 800102e:	46bd      	mov	sp, r7
 8001030:	bc80      	pop	{r7}
 8001032:	4770      	bx	lr

08001034 <FLASH_SetLatency>:
*                       - FLASH_Latency_2: FLASH Two Latency cycles
* Output         : None
* Return         : None
*******************************************************************************/
void FLASH_SetLatency(u32 FLASH_Latency)
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_LATENCY(FLASH_Latency));
  
  /* Sets the Latency value */
  FLASH->ACR &= ACR_LATENCY_Mask;
 800103c:	4a08      	ldr	r2, [pc, #32]	; (8001060 <FLASH_SetLatency+0x2c>)
 800103e:	4b08      	ldr	r3, [pc, #32]	; (8001060 <FLASH_SetLatency+0x2c>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001046:	6013      	str	r3, [r2, #0]
  FLASH->ACR |= FLASH_Latency;
 8001048:	4905      	ldr	r1, [pc, #20]	; (8001060 <FLASH_SetLatency+0x2c>)
 800104a:	4b05      	ldr	r3, [pc, #20]	; (8001060 <FLASH_SetLatency+0x2c>)
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4313      	orrs	r3, r2
 8001052:	600b      	str	r3, [r1, #0]
}
 8001054:	bf00      	nop
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	bc80      	pop	{r7}
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	40022000 	.word	0x40022000

08001064 <FLASH_PrefetchBufferCmd>:
*                       - FLASH_PrefetchBuffer_Disable: FLASH Prefetch Buffer Disable
* Output         : None
* Return         : None
*******************************************************************************/
void FLASH_PrefetchBufferCmd(u32 FLASH_PrefetchBuffer)
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_PREFETCHBUFFER_STATE(FLASH_PrefetchBuffer));
  
  /* Enable or disable the Prefetch Buffer */
  FLASH->ACR &= ACR_PRFTBE_Mask;
 800106c:	4a08      	ldr	r2, [pc, #32]	; (8001090 <FLASH_PrefetchBufferCmd+0x2c>)
 800106e:	4b08      	ldr	r3, [pc, #32]	; (8001090 <FLASH_PrefetchBufferCmd+0x2c>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f023 0310 	bic.w	r3, r3, #16
 8001076:	6013      	str	r3, [r2, #0]
  FLASH->ACR |= FLASH_PrefetchBuffer;
 8001078:	4905      	ldr	r1, [pc, #20]	; (8001090 <FLASH_PrefetchBufferCmd+0x2c>)
 800107a:	4b05      	ldr	r3, [pc, #20]	; (8001090 <FLASH_PrefetchBufferCmd+0x2c>)
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4313      	orrs	r3, r2
 8001082:	600b      	str	r3, [r1, #0]
}
 8001084:	bf00      	nop
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	bc80      	pop	{r7}
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	40022000 	.word	0x40022000

08001094 <GPIO_Init>:
*                    peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8001094:	b480      	push	{r7}
 8001096:	b089      	sub	sp, #36	; 0x24
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	6039      	str	r1, [r7, #0]
  u32 currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 800109e:	2300      	movs	r3, #0
 80010a0:	61fb      	str	r3, [r7, #28]
 80010a2:	2300      	movs	r3, #0
 80010a4:	613b      	str	r3, [r7, #16]
 80010a6:	2300      	movs	r3, #0
 80010a8:	61bb      	str	r3, [r7, #24]
 80010aa:	2300      	movs	r3, #0
 80010ac:	60fb      	str	r3, [r7, #12]
  u32 tmpreg = 0x00, pinmask = 0x00;
 80010ae:	2300      	movs	r3, #0
 80010b0:	617b      	str	r3, [r7, #20]
 80010b2:	2300      	movs	r3, #0
 80010b4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((u32)GPIO_InitStruct->GPIO_Mode) & ((u32)0x0F);
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	78db      	ldrb	r3, [r3, #3]
 80010ba:	f003 030f 	and.w	r3, r3, #15
 80010be:	61fb      	str	r3, [r7, #28]

  if ((((u32)GPIO_InitStruct->GPIO_Mode) & ((u32)0x10)) != 0x00)
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	78db      	ldrb	r3, [r3, #3]
 80010c4:	f003 0310 	and.w	r3, r3, #16
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d005      	beq.n	80010d8 <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (u32)GPIO_InitStruct->GPIO_Speed;
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	789b      	ldrb	r3, [r3, #2]
 80010d0:	461a      	mov	r2, r3
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	61fb      	str	r3, [r7, #28]
  }

/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((u32)GPIO_InitStruct->GPIO_Pin & ((u32)0x00FF)) != 0x00)
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	881b      	ldrh	r3, [r3, #0]
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d044      	beq.n	800116c <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	617b      	str	r3, [r7, #20]

    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80010e8:	2300      	movs	r3, #0
 80010ea:	61bb      	str	r3, [r7, #24]
 80010ec:	e038      	b.n	8001160 <GPIO_Init+0xcc>
    {
      pos = ((u32)0x01) << pinpos;
 80010ee:	2201      	movs	r2, #1
 80010f0:	69bb      	ldr	r3, [r7, #24]
 80010f2:	fa02 f303 	lsl.w	r3, r2, r3
 80010f6:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	881b      	ldrh	r3, [r3, #0]
 80010fc:	461a      	mov	r2, r3
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	4013      	ands	r3, r2
 8001102:	613b      	str	r3, [r7, #16]

      if (currentpin == pos)
 8001104:	693a      	ldr	r2, [r7, #16]
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	429a      	cmp	r2, r3
 800110a:	d126      	bne.n	800115a <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 800110c:	69bb      	ldr	r3, [r7, #24]
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((u32)0x0F) << pos;
 8001112:	220f      	movs	r2, #15
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	fa02 f303 	lsl.w	r3, r2, r3
 800111a:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	43db      	mvns	r3, r3
 8001120:	697a      	ldr	r2, [r7, #20]
 8001122:	4013      	ands	r3, r2
 8001124:	617b      	str	r3, [r7, #20]

        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8001126:	69fa      	ldr	r2, [r7, #28]
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	fa02 f303 	lsl.w	r3, r2, r3
 800112e:	697a      	ldr	r2, [r7, #20]
 8001130:	4313      	orrs	r3, r2
 8001132:	617b      	str	r3, [r7, #20]

        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	78db      	ldrb	r3, [r3, #3]
 8001138:	2b28      	cmp	r3, #40	; 0x28
 800113a:	d105      	bne.n	8001148 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((u32)0x01) << pinpos);
 800113c:	2201      	movs	r2, #1
 800113e:	69bb      	ldr	r3, [r7, #24]
 8001140:	409a      	lsls	r2, r3
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	615a      	str	r2, [r3, #20]
 8001146:	e008      	b.n	800115a <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	78db      	ldrb	r3, [r3, #3]
 800114c:	2b48      	cmp	r3, #72	; 0x48
 800114e:	d104      	bne.n	800115a <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((u32)0x01) << pinpos);
 8001150:	2201      	movs	r2, #1
 8001152:	69bb      	ldr	r3, [r7, #24]
 8001154:	409a      	lsls	r2, r3
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	611a      	str	r2, [r3, #16]
  /* Configure the eight low port pins */
  if (((u32)GPIO_InitStruct->GPIO_Pin & ((u32)0x00FF)) != 0x00)
  {
    tmpreg = GPIOx->CRL;

    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800115a:	69bb      	ldr	r3, [r7, #24]
 800115c:	3301      	adds	r3, #1
 800115e:	61bb      	str	r3, [r7, #24]
 8001160:	69bb      	ldr	r3, [r7, #24]
 8001162:	2b07      	cmp	r3, #7
 8001164:	d9c3      	bls.n	80010ee <GPIO_Init+0x5a>
            GPIOx->BSRR = (((u32)0x01) << pinpos);
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	697a      	ldr	r2, [r7, #20]
 800116a:	601a      	str	r2, [r3, #0]
  }

/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	881b      	ldrh	r3, [r3, #0]
 8001170:	2bff      	cmp	r3, #255	; 0xff
 8001172:	d946      	bls.n	8001202 <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800117a:	2300      	movs	r3, #0
 800117c:	61bb      	str	r3, [r7, #24]
 800117e:	e03a      	b.n	80011f6 <GPIO_Init+0x162>
    {
      pos = (((u32)0x01) << (pinpos + 0x08));
 8001180:	69bb      	ldr	r3, [r7, #24]
 8001182:	3308      	adds	r3, #8
 8001184:	2201      	movs	r2, #1
 8001186:	fa02 f303 	lsl.w	r3, r2, r3
 800118a:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	881b      	ldrh	r3, [r3, #0]
 8001190:	461a      	mov	r2, r3
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	4013      	ands	r3, r2
 8001196:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8001198:	693a      	ldr	r2, [r7, #16]
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	429a      	cmp	r2, r3
 800119e:	d127      	bne.n	80011f0 <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 80011a0:	69bb      	ldr	r3, [r7, #24]
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((u32)0x0F) << pos;
 80011a6:	220f      	movs	r2, #15
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	fa02 f303 	lsl.w	r3, r2, r3
 80011ae:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	43db      	mvns	r3, r3
 80011b4:	697a      	ldr	r2, [r7, #20]
 80011b6:	4013      	ands	r3, r2
 80011b8:	617b      	str	r3, [r7, #20]

        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80011ba:	69fa      	ldr	r2, [r7, #28]
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	fa02 f303 	lsl.w	r3, r2, r3
 80011c2:	697a      	ldr	r2, [r7, #20]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	617b      	str	r3, [r7, #20]

        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	78db      	ldrb	r3, [r3, #3]
 80011cc:	2b28      	cmp	r3, #40	; 0x28
 80011ce:	d105      	bne.n	80011dc <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((u32)0x01) << (pinpos + 0x08));
 80011d0:	69bb      	ldr	r3, [r7, #24]
 80011d2:	3308      	adds	r3, #8
 80011d4:	2201      	movs	r2, #1
 80011d6:	409a      	lsls	r2, r3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	78db      	ldrb	r3, [r3, #3]
 80011e0:	2b48      	cmp	r3, #72	; 0x48
 80011e2:	d105      	bne.n	80011f0 <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((u32)0x01) << (pinpos + 0x08));
 80011e4:	69bb      	ldr	r3, [r7, #24]
 80011e6:	3308      	adds	r3, #8
 80011e8:	2201      	movs	r2, #1
 80011ea:	409a      	lsls	r2, r3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	611a      	str	r2, [r3, #16]
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
  {
    tmpreg = GPIOx->CRH;
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80011f0:	69bb      	ldr	r3, [r7, #24]
 80011f2:	3301      	adds	r3, #1
 80011f4:	61bb      	str	r3, [r7, #24]
 80011f6:	69bb      	ldr	r3, [r7, #24]
 80011f8:	2b07      	cmp	r3, #7
 80011fa:	d9c1      	bls.n	8001180 <GPIO_Init+0xec>
        {
          GPIOx->BSRR = (((u32)0x01) << (pinpos + 0x08));
        }
      }
    }
    GPIOx->CRH = tmpreg;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	697a      	ldr	r2, [r7, #20]
 8001200:	605a      	str	r2, [r3, #4]
  }
}
 8001202:	bf00      	nop
 8001204:	3724      	adds	r7, #36	; 0x24
 8001206:	46bd      	mov	sp, r7
 8001208:	bc80      	pop	{r7}
 800120a:	4770      	bx	lr

0800120c <GPIO_ReadOutputData>:
* Input          : - GPIOx: where x can be (A..G) to select the GPIO peripheral.
* Output         : None
* Return         : GPIO output data port value.
*******************************************************************************/
u16 GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    
  return ((u16)GPIOx->ODR);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	68db      	ldr	r3, [r3, #12]
 8001218:	b29b      	uxth	r3, r3
}
 800121a:	4618      	mov	r0, r3
 800121c:	370c      	adds	r7, #12
 800121e:	46bd      	mov	sp, r7
 8001220:	bc80      	pop	{r7}
 8001222:	4770      	bx	lr

08001224 <GPIO_SetBits>:
*                    x can be (0..15).
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_SetBits(GPIO_TypeDef* GPIOx, u16 GPIO_Pin)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	460b      	mov	r3, r1
 800122e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 8001230:	887a      	ldrh	r2, [r7, #2]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	611a      	str	r2, [r3, #16]
}
 8001236:	bf00      	nop
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	bc80      	pop	{r7}
 800123e:	4770      	bx	lr

08001240 <GPIO_ResetBits>:
*                    x can be (0..15).
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, u16 GPIO_Pin)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	460b      	mov	r3, r1
 800124a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BRR = GPIO_Pin;
 800124c:	887a      	ldrh	r2, [r7, #2]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	615a      	str	r2, [r3, #20]
}
 8001252:	bf00      	nop
 8001254:	370c      	adds	r7, #12
 8001256:	46bd      	mov	sp, r7
 8001258:	bc80      	pop	{r7}
 800125a:	4770      	bx	lr

0800125c <GPIO_PinRemapConfig>:
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void GPIO_PinRemapConfig(u32 GPIO_Remap, FunctionalState NewState)
{
 800125c:	b480      	push	{r7}
 800125e:	b087      	sub	sp, #28
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	460b      	mov	r3, r1
 8001266:	70fb      	strb	r3, [r7, #3]
  u32 tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
 8001268:	2300      	movs	r3, #0
 800126a:	613b      	str	r3, [r7, #16]
 800126c:	2300      	movs	r3, #0
 800126e:	60fb      	str	r3, [r7, #12]
 8001270:	2300      	movs	r3, #0
 8001272:	617b      	str	r3, [r7, #20]
 8001274:	2300      	movs	r3, #0
 8001276:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  tmpreg = AFIO->MAPR;
 8001278:	4b28      	ldr	r3, [pc, #160]	; (800131c <GPIO_PinRemapConfig+0xc0>)
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	617b      	str	r3, [r7, #20]

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	0c1b      	lsrs	r3, r3, #16
 8001282:	f003 030f 	and.w	r3, r3, #15
 8001286:	60bb      	str	r3, [r7, #8]
  tmp = GPIO_Remap & LSB_MASK;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	b29b      	uxth	r3, r3
 800128c:	613b      	str	r3, [r7, #16]

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001294:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8001298:	d10a      	bne.n	80012b0 <GPIO_PinRemapConfig+0x54>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80012a0:	617b      	str	r3, [r7, #20]
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
 80012a2:	4a1e      	ldr	r2, [pc, #120]	; (800131c <GPIO_PinRemapConfig+0xc0>)
 80012a4:	4b1d      	ldr	r3, [pc, #116]	; (800131c <GPIO_PinRemapConfig+0xc0>)
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80012ac:	6053      	str	r3, [r2, #4]
 80012ae:	e021      	b.n	80012f4 <GPIO_PinRemapConfig+0x98>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d00e      	beq.n	80012d8 <GPIO_PinRemapConfig+0x7c>
  {
    tmp1 = ((u32)0x03) << tmpmask;
 80012ba:	2203      	movs	r2, #3
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	fa02 f303 	lsl.w	r3, r2, r3
 80012c2:	60fb      	str	r3, [r7, #12]
    tmpreg &= ~tmp1;
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	43db      	mvns	r3, r3
 80012c8:	697a      	ldr	r2, [r7, #20]
 80012ca:	4013      	ands	r3, r2
 80012cc:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 80012d4:	617b      	str	r3, [r7, #20]
 80012d6:	e00d      	b.n	80012f4 <GPIO_PinRemapConfig+0x98>
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	0d5b      	lsrs	r3, r3, #21
 80012dc:	011b      	lsls	r3, r3, #4
 80012de:	693a      	ldr	r2, [r7, #16]
 80012e0:	fa02 f303 	lsl.w	r3, r2, r3
 80012e4:	43db      	mvns	r3, r3
 80012e6:	697a      	ldr	r2, [r7, #20]
 80012e8:	4013      	ands	r3, r2
 80012ea:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 80012f2:	617b      	str	r3, [r7, #20]
  }

  if (NewState != DISABLE)
 80012f4:	78fb      	ldrb	r3, [r7, #3]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d008      	beq.n	800130c <GPIO_PinRemapConfig+0xb0>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	0d5b      	lsrs	r3, r3, #21
 80012fe:	011b      	lsls	r3, r3, #4
 8001300:	693a      	ldr	r2, [r7, #16]
 8001302:	fa02 f303 	lsl.w	r3, r2, r3
 8001306:	697a      	ldr	r2, [r7, #20]
 8001308:	4313      	orrs	r3, r2
 800130a:	617b      	str	r3, [r7, #20]
  }

  AFIO->MAPR = tmpreg;
 800130c:	4a03      	ldr	r2, [pc, #12]	; (800131c <GPIO_PinRemapConfig+0xc0>)
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	6053      	str	r3, [r2, #4]
}
 8001312:	bf00      	nop
 8001314:	371c      	adds	r7, #28
 8001316:	46bd      	mov	sp, r7
 8001318:	bc80      	pop	{r7}
 800131a:	4770      	bx	lr
 800131c:	40010000 	.word	0x40010000

08001320 <RCC_DeInit>:
* Input          : None
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_DeInit(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (u32)0x00000001;
 8001324:	4a13      	ldr	r2, [pc, #76]	; (8001374 <RCC_DeInit+0x54>)
 8001326:	4b13      	ldr	r3, [pc, #76]	; (8001374 <RCC_DeInit+0x54>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f043 0301 	orr.w	r3, r3, #1
 800132e:	6013      	str	r3, [r2, #0]

  /* Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], ADCPRE[1:0] and MCO[2:0] bits */
  RCC->CFGR &= (u32)0xF8FF0000;
 8001330:	4910      	ldr	r1, [pc, #64]	; (8001374 <RCC_DeInit+0x54>)
 8001332:	4b10      	ldr	r3, [pc, #64]	; (8001374 <RCC_DeInit+0x54>)
 8001334:	685a      	ldr	r2, [r3, #4]
 8001336:	4b10      	ldr	r3, [pc, #64]	; (8001378 <RCC_DeInit+0x58>)
 8001338:	4013      	ands	r3, r2
 800133a:	604b      	str	r3, [r1, #4]
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (u32)0xFEF6FFFF;
 800133c:	4a0d      	ldr	r2, [pc, #52]	; (8001374 <RCC_DeInit+0x54>)
 800133e:	4b0d      	ldr	r3, [pc, #52]	; (8001374 <RCC_DeInit+0x54>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001346:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800134a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (u32)0xFFFBFFFF;
 800134c:	4a09      	ldr	r2, [pc, #36]	; (8001374 <RCC_DeInit+0x54>)
 800134e:	4b09      	ldr	r3, [pc, #36]	; (8001374 <RCC_DeInit+0x54>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001356:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL[3:0] and USBPRE bits */
  RCC->CFGR &= (u32)0xFF80FFFF;
 8001358:	4a06      	ldr	r2, [pc, #24]	; (8001374 <RCC_DeInit+0x54>)
 800135a:	4b06      	ldr	r3, [pc, #24]	; (8001374 <RCC_DeInit+0x54>)
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001362:	6053      	str	r3, [r2, #4]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001364:	4b03      	ldr	r3, [pc, #12]	; (8001374 <RCC_DeInit+0x54>)
 8001366:	2200      	movs	r2, #0
 8001368:	609a      	str	r2, [r3, #8]
}
 800136a:	bf00      	nop
 800136c:	46bd      	mov	sp, r7
 800136e:	bc80      	pop	{r7}
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	40021000 	.word	0x40021000
 8001378:	f8ff0000 	.word	0xf8ff0000

0800137c <RCC_HSEConfig>:
*                         clock
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_HSEConfig(u32 RCC_HSE)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  /* Reset HSEON bit */
  RCC->CR &= CR_HSEON_Reset;
 8001384:	4a13      	ldr	r2, [pc, #76]	; (80013d4 <RCC_HSEConfig+0x58>)
 8001386:	4b13      	ldr	r3, [pc, #76]	; (80013d4 <RCC_HSEConfig+0x58>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800138e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= CR_HSEBYP_Reset;
 8001390:	4a10      	ldr	r2, [pc, #64]	; (80013d4 <RCC_HSEConfig+0x58>)
 8001392:	4b10      	ldr	r3, [pc, #64]	; (80013d4 <RCC_HSEConfig+0x58>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800139a:	6013      	str	r3, [r2, #0]

  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013a2:	d003      	beq.n	80013ac <RCC_HSEConfig+0x30>
 80013a4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80013a8:	d007      	beq.n	80013ba <RCC_HSEConfig+0x3e>
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
      break;
      
    default:
      break;
 80013aa:	e00d      	b.n	80013c8 <RCC_HSEConfig+0x4c>
  /* Configure HSE (RCC_HSE_OFF is already covered by the code section above) */
  switch(RCC_HSE)
  {
    case RCC_HSE_ON:
      /* Set HSEON bit */
      RCC->CR |= CR_HSEON_Set;
 80013ac:	4a09      	ldr	r2, [pc, #36]	; (80013d4 <RCC_HSEConfig+0x58>)
 80013ae:	4b09      	ldr	r3, [pc, #36]	; (80013d4 <RCC_HSEConfig+0x58>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013b6:	6013      	str	r3, [r2, #0]
      break;
 80013b8:	e006      	b.n	80013c8 <RCC_HSEConfig+0x4c>
      
    case RCC_HSE_Bypass:
      /* Set HSEBYP and HSEON bits */
      RCC->CR |= CR_HSEBYP_Set | CR_HSEON_Set;
 80013ba:	4a06      	ldr	r2, [pc, #24]	; (80013d4 <RCC_HSEConfig+0x58>)
 80013bc:	4b05      	ldr	r3, [pc, #20]	; (80013d4 <RCC_HSEConfig+0x58>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 80013c4:	6013      	str	r3, [r2, #0]
      break;
 80013c6:	bf00      	nop
      
    default:
      break;
  }
}
 80013c8:	bf00      	nop
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bc80      	pop	{r7}
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	40021000 	.word	0x40021000

080013d8 <RCC_WaitForHSEStartUp>:
* Return         : An ErrorStatus enumuration value:
*                         - SUCCESS: HSE oscillator is stable and ready to use
*                         - ERROR: HSE oscillator not yet ready
*******************************************************************************/
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
  vu32 startupcounter = 0;
 80013de:	2300      	movs	r3, #0
 80013e0:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
 80013e2:	2300      	movs	r3, #0
 80013e4:	71fb      	strb	r3, [r7, #7]
  FlagStatus hsestatus = RESET;
 80013e6:	2300      	movs	r3, #0
 80013e8:	71bb      	strb	r3, [r7, #6]
  
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 80013ea:	2031      	movs	r0, #49	; 0x31
 80013ec:	f000 fa7c 	bl	80018e8 <RCC_GetFlagStatus>
 80013f0:	4603      	mov	r3, r0
 80013f2:	71bb      	strb	r3, [r7, #6]
    startupcounter++;  
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	3301      	adds	r3, #1
 80013f8:	603b      	str	r3, [r7, #0]
  } while((hsestatus == RESET) && (startupcounter != HSEStartUp_TimeOut));
 80013fa:	79bb      	ldrb	r3, [r7, #6]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d103      	bne.n	8001408 <RCC_WaitForHSEStartUp+0x30>
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001406:	d1f0      	bne.n	80013ea <RCC_WaitForHSEStartUp+0x12>


  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 8001408:	2031      	movs	r0, #49	; 0x31
 800140a:	f000 fa6d 	bl	80018e8 <RCC_GetFlagStatus>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d002      	beq.n	800141a <RCC_WaitForHSEStartUp+0x42>
  {
    status = SUCCESS;
 8001414:	2301      	movs	r3, #1
 8001416:	71fb      	strb	r3, [r7, #7]
 8001418:	e001      	b.n	800141e <RCC_WaitForHSEStartUp+0x46>
  }
  else
  {
    status = ERROR;
 800141a:	2300      	movs	r3, #0
 800141c:	71fb      	strb	r3, [r7, #7]
  }  

  return (status);
 800141e:	79fb      	ldrb	r3, [r7, #7]
}
 8001420:	4618      	mov	r0, r3
 8001422:	3708      	adds	r7, #8
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}

08001428 <RCC_PREDIV1Config>:
*                    This parameter can be RCC_PREDIV1_Divx where x:[1,16]
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_PREDIV1Config(u32 RCC_PREDIV1_Source, u32 RCC_PREDIV1_Div)
{
 8001428:	b480      	push	{r7}
 800142a:	b085      	sub	sp, #20
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	6039      	str	r1, [r7, #0]
  u32 tmpreg = 0;
 8001432:	2300      	movs	r3, #0
 8001434:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PREDIV1_SOURCE(RCC_PREDIV1_Source));
  assert_param(IS_RCC_PREDIV1(RCC_PREDIV1_Div));

  tmpreg = RCC->CFGR2;
 8001436:	4b0b      	ldr	r3, [pc, #44]	; (8001464 <RCC_PREDIV1Config+0x3c>)
 8001438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800143a:	60fb      	str	r3, [r7, #12]

  /* Clear PREDIV1[3:0] and PREDIV1SRC bits */
  tmpreg &= ~(CFGR2_PREDIV1 | CFGR2_PREDIV1SRC);
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001442:	f023 030f 	bic.w	r3, r3, #15
 8001446:	60fb      	str	r3, [r7, #12]

  /* Set the PREDIV1 clock source and division factor */
  tmpreg |= RCC_PREDIV1_Source | RCC_PREDIV1_Div ;
 8001448:	687a      	ldr	r2, [r7, #4]
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	4313      	orrs	r3, r2
 800144e:	68fa      	ldr	r2, [r7, #12]
 8001450:	4313      	orrs	r3, r2
 8001452:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR2 = tmpreg;
 8001454:	4a03      	ldr	r2, [pc, #12]	; (8001464 <RCC_PREDIV1Config+0x3c>)
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 800145a:	bf00      	nop
 800145c:	3714      	adds	r7, #20
 800145e:	46bd      	mov	sp, r7
 8001460:	bc80      	pop	{r7}
 8001462:	4770      	bx	lr
 8001464:	40021000 	.word	0x40021000

08001468 <RCC_PREDIV2Config>:
*                    This parameter can be RCC_PREDIV2_Divx where x:[1,16]
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_PREDIV2Config(u32 RCC_PREDIV2_Div)
{
 8001468:	b480      	push	{r7}
 800146a:	b085      	sub	sp, #20
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  u32 tmpreg = 0;
 8001470:	2300      	movs	r3, #0
 8001472:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PREDIV2(RCC_PREDIV2_Div));

  tmpreg = RCC->CFGR2;
 8001474:	4b09      	ldr	r3, [pc, #36]	; (800149c <RCC_PREDIV2Config+0x34>)
 8001476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001478:	60fb      	str	r3, [r7, #12]

  /* Clear PREDIV2[3:0] bits */
  tmpreg &= ~CFGR2_PREDIV2;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001480:	60fb      	str	r3, [r7, #12]

  /* Set the PREDIV2 division factor */
  tmpreg |= RCC_PREDIV2_Div;
 8001482:	68fa      	ldr	r2, [r7, #12]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	4313      	orrs	r3, r2
 8001488:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR2 = tmpreg;
 800148a:	4a04      	ldr	r2, [pc, #16]	; (800149c <RCC_PREDIV2Config+0x34>)
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8001490:	bf00      	nop
 8001492:	3714      	adds	r7, #20
 8001494:	46bd      	mov	sp, r7
 8001496:	bc80      	pop	{r7}
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	40021000 	.word	0x40021000

080014a0 <RCC_PLL1Config>:
*                    This parameter can be RCC_PLL1Mul_x where x:{[4,9], 6_5}
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_PLL1Config(u32 RCC_PLL1Source, u32 RCC_PLL1Mul)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b085      	sub	sp, #20
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	6039      	str	r1, [r7, #0]
  u32 tmpreg = 0;
 80014aa:	2300      	movs	r3, #0
 80014ac:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PLL1_SOURCE(RCC_PLL1Source));
  assert_param(IS_RCC_PLL1_MUL(RCC_PLL1Mul));

  tmpreg = RCC->CFGR;
 80014ae:	4b0a      	ldr	r3, [pc, #40]	; (80014d8 <RCC_PLL1Config+0x38>)
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	60fb      	str	r3, [r7, #12]

  /* Clear PLL1MUL[3:0] bits */
  tmpreg &= CFGR_PLL1_Mask;
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 80014ba:	60fb      	str	r3, [r7, #12]

  /* Set the PLL1 configuration bits */
  tmpreg |= RCC_PLL1Source | RCC_PLL1Mul;
 80014bc:	687a      	ldr	r2, [r7, #4]
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	68fa      	ldr	r2, [r7, #12]
 80014c4:	4313      	orrs	r3, r2
 80014c6:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 80014c8:	4a03      	ldr	r2, [pc, #12]	; (80014d8 <RCC_PLL1Config+0x38>)
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	6053      	str	r3, [r2, #4]
}
 80014ce:	bf00      	nop
 80014d0:	3714      	adds	r7, #20
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bc80      	pop	{r7}
 80014d6:	4770      	bx	lr
 80014d8:	40021000 	.word	0x40021000

080014dc <RCC_PLL1Cmd>:
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_PLL1Cmd(FunctionalState NewState)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	4603      	mov	r3, r0
 80014e4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) CR_PLLON_BB = (u32)NewState;
 80014e6:	4a04      	ldr	r2, [pc, #16]	; (80014f8 <RCC_PLL1Cmd+0x1c>)
 80014e8:	79fb      	ldrb	r3, [r7, #7]
 80014ea:	6013      	str	r3, [r2, #0]
}
 80014ec:	bf00      	nop
 80014ee:	370c      	adds	r7, #12
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bc80      	pop	{r7}
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	42420060 	.word	0x42420060

080014fc <RCC_PLL2Config>:
*                    This parameter can be RCC_PLL2Mul_x where x:{[8,14], 16, 20}
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_PLL2Config(u32 RCC_PLL2Mul)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b085      	sub	sp, #20
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  u32 tmpreg = 0;
 8001504:	2300      	movs	r3, #0
 8001506:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PLL2_MUL(RCC_PLL2Mul));

  tmpreg = RCC->CFGR2;
 8001508:	4b09      	ldr	r3, [pc, #36]	; (8001530 <RCC_PLL2Config+0x34>)
 800150a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800150c:	60fb      	str	r3, [r7, #12]

  /* Clear PLL2Mul[3:0] bits */
  tmpreg &= ~CFGR2_PLL2MUL;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001514:	60fb      	str	r3, [r7, #12]

  /* Set the PLL2 configuration bits */
  tmpreg |= RCC_PLL2Mul;
 8001516:	68fa      	ldr	r2, [r7, #12]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	4313      	orrs	r3, r2
 800151c:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR2 = tmpreg;
 800151e:	4a04      	ldr	r2, [pc, #16]	; (8001530 <RCC_PLL2Config+0x34>)
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8001524:	bf00      	nop
 8001526:	3714      	adds	r7, #20
 8001528:	46bd      	mov	sp, r7
 800152a:	bc80      	pop	{r7}
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	40021000 	.word	0x40021000

08001534 <RCC_PLL2Cmd>:
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_PLL2Cmd(FunctionalState NewState)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	4603      	mov	r3, r0
 800153c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) CR_PLL2ON_BB = (u32)NewState;
 800153e:	4a04      	ldr	r2, [pc, #16]	; (8001550 <RCC_PLL2Cmd+0x1c>)
 8001540:	79fb      	ldrb	r3, [r7, #7]
 8001542:	6013      	str	r3, [r2, #0]
}
 8001544:	bf00      	nop
 8001546:	370c      	adds	r7, #12
 8001548:	46bd      	mov	sp, r7
 800154a:	bc80      	pop	{r7}
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	42420068 	.word	0x42420068

08001554 <RCC_PLL3Config>:
*                    This parameter can be RCC_PLL3Mul_x where x:{[8,14], 16, 20}
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_PLL3Config(u32 RCC_PLL3Mul)
{
 8001554:	b480      	push	{r7}
 8001556:	b085      	sub	sp, #20
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  u32 tmpreg = 0;
 800155c:	2300      	movs	r3, #0
 800155e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PLL3_MUL(RCC_PLL3Mul));

  tmpreg = RCC->CFGR2;
 8001560:	4b09      	ldr	r3, [pc, #36]	; (8001588 <RCC_PLL3Config+0x34>)
 8001562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001564:	60fb      	str	r3, [r7, #12]

  /* Clear PLL3Mul[3:0] bits */
  tmpreg &= ~CFGR2_PLL3MUL;
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800156c:	60fb      	str	r3, [r7, #12]

  /* Set the PLL3 configuration bits */
  tmpreg |= RCC_PLL3Mul;
 800156e:	68fa      	ldr	r2, [r7, #12]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	4313      	orrs	r3, r2
 8001574:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR2 = tmpreg;
 8001576:	4a04      	ldr	r2, [pc, #16]	; (8001588 <RCC_PLL3Config+0x34>)
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 800157c:	bf00      	nop
 800157e:	3714      	adds	r7, #20
 8001580:	46bd      	mov	sp, r7
 8001582:	bc80      	pop	{r7}
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	40021000 	.word	0x40021000

0800158c <RCC_PLL3Cmd>:
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_PLL3Cmd(FunctionalState NewState)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	4603      	mov	r3, r0
 8001594:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(vu32 *) CR_PLL3ON_BB = (u32)NewState;
 8001596:	4a04      	ldr	r2, [pc, #16]	; (80015a8 <RCC_PLL3Cmd+0x1c>)
 8001598:	79fb      	ldrb	r3, [r7, #7]
 800159a:	6013      	str	r3, [r2, #0]
}
 800159c:	bf00      	nop
 800159e:	370c      	adds	r7, #12
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bc80      	pop	{r7}
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	42420070 	.word	0x42420070

080015ac <RCC_SYSCLKConfig>:
*                       - RCC_SYSCLKSource_PLL1CLK: PLL1 selected as system clock // Only for STM32 connectivity line devices 
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_SYSCLKConfig(u32 RCC_SYSCLKSource)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b085      	sub	sp, #20
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  u32 tmpreg = 0;
 80015b4:	2300      	movs	r3, #0
 80015b6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
 80015b8:	4b09      	ldr	r3, [pc, #36]	; (80015e0 <RCC_SYSCLKConfig+0x34>)
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	60fb      	str	r3, [r7, #12]

  /* Clear SW[1:0] bits */
  tmpreg &= CFGR_SW_Mask;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	f023 0303 	bic.w	r3, r3, #3
 80015c4:	60fb      	str	r3, [r7, #12]

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 80015c6:	68fa      	ldr	r2, [r7, #12]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	4313      	orrs	r3, r2
 80015cc:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 80015ce:	4a04      	ldr	r2, [pc, #16]	; (80015e0 <RCC_SYSCLKConfig+0x34>)
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	6053      	str	r3, [r2, #4]
}
 80015d4:	bf00      	nop
 80015d6:	3714      	adds	r7, #20
 80015d8:	46bd      	mov	sp, r7
 80015da:	bc80      	pop	{r7}
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	40021000 	.word	0x40021000

080015e4 <RCC_GetSYSCLKSource>:
*                       - 0x04: HSE used as system clock
*                       - 0x08: PLL used as system clock
*                       - 0x08: PLL1 used as system clock // Only for STM32 connectivity line devices 
*******************************************************************************/
u8 RCC_GetSYSCLKSource(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  return ((u8)(RCC->CFGR & CFGR_SWS_Mask));
 80015e8:	4b04      	ldr	r3, [pc, #16]	; (80015fc <RCC_GetSYSCLKSource+0x18>)
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	f003 030c 	and.w	r3, r3, #12
 80015f2:	b2db      	uxtb	r3, r3
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bc80      	pop	{r7}
 80015fa:	4770      	bx	lr
 80015fc:	40021000 	.word	0x40021000

08001600 <RCC_HCLKConfig>:
*                       - RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_HCLKConfig(u32 RCC_SYSCLK)
{
 8001600:	b480      	push	{r7}
 8001602:	b085      	sub	sp, #20
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  u32 tmpreg = 0;
 8001608:	2300      	movs	r3, #0
 800160a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
 800160c:	4b09      	ldr	r3, [pc, #36]	; (8001634 <RCC_HCLKConfig+0x34>)
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	60fb      	str	r3, [r7, #12]

  /* Clear HPRE[3:0] bits */
  tmpreg &= CFGR_HPRE_Reset_Mask;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001618:	60fb      	str	r3, [r7, #12]

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 800161a:	68fa      	ldr	r2, [r7, #12]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	4313      	orrs	r3, r2
 8001620:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001622:	4a04      	ldr	r2, [pc, #16]	; (8001634 <RCC_HCLKConfig+0x34>)
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	6053      	str	r3, [r2, #4]
}
 8001628:	bf00      	nop
 800162a:	3714      	adds	r7, #20
 800162c:	46bd      	mov	sp, r7
 800162e:	bc80      	pop	{r7}
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	40021000 	.word	0x40021000

08001638 <RCC_PCLK1Config>:
*                       - RCC_HCLK_Div16: APB1 clock = HCLK/16
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_PCLK1Config(u32 RCC_HCLK)
{
 8001638:	b480      	push	{r7}
 800163a:	b085      	sub	sp, #20
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  u32 tmpreg = 0;
 8001640:	2300      	movs	r3, #0
 8001642:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8001644:	4b09      	ldr	r3, [pc, #36]	; (800166c <RCC_PCLK1Config+0x34>)
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= CFGR_PPRE1_Reset_Mask;
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001650:	60fb      	str	r3, [r7, #12]

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 8001652:	68fa      	ldr	r2, [r7, #12]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	4313      	orrs	r3, r2
 8001658:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 800165a:	4a04      	ldr	r2, [pc, #16]	; (800166c <RCC_PCLK1Config+0x34>)
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	6053      	str	r3, [r2, #4]
}
 8001660:	bf00      	nop
 8001662:	3714      	adds	r7, #20
 8001664:	46bd      	mov	sp, r7
 8001666:	bc80      	pop	{r7}
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	40021000 	.word	0x40021000

08001670 <RCC_PCLK2Config>:
*                       - RCC_HCLK_Div16: APB2 clock = HCLK/16
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_PCLK2Config(u32 RCC_HCLK)
{
 8001670:	b480      	push	{r7}
 8001672:	b085      	sub	sp, #20
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  u32 tmpreg = 0;
 8001678:	2300      	movs	r3, #0
 800167a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 800167c:	4b09      	ldr	r3, [pc, #36]	; (80016a4 <RCC_PCLK2Config+0x34>)
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= CFGR_PPRE2_Reset_Mask;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001688:	60fb      	str	r3, [r7, #12]

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	00db      	lsls	r3, r3, #3
 800168e:	68fa      	ldr	r2, [r7, #12]
 8001690:	4313      	orrs	r3, r2
 8001692:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001694:	4a03      	ldr	r2, [pc, #12]	; (80016a4 <RCC_PCLK2Config+0x34>)
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	6053      	str	r3, [r2, #4]
}
 800169a:	bf00      	nop
 800169c:	3714      	adds	r7, #20
 800169e:	46bd      	mov	sp, r7
 80016a0:	bc80      	pop	{r7}
 80016a2:	4770      	bx	lr
 80016a4:	40021000 	.word	0x40021000

080016a8 <RCC_ADCCLKConfig>:
*                       - RCC_PCLK2_Div8: ADC clock = PCLK2/8
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_ADCCLKConfig(u32 RCC_PCLK2)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b085      	sub	sp, #20
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  u32 tmpreg = 0;
 80016b0:	2300      	movs	r3, #0
 80016b2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));

  tmpreg = RCC->CFGR;
 80016b4:	4b09      	ldr	r3, [pc, #36]	; (80016dc <RCC_ADCCLKConfig+0x34>)
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	60fb      	str	r3, [r7, #12]

  /* Clear ADCPRE[1:0] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80016c0:	60fb      	str	r3, [r7, #12]

  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2;
 80016c2:	68fa      	ldr	r2, [r7, #12]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	4313      	orrs	r3, r2
 80016c8:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 80016ca:	4a04      	ldr	r2, [pc, #16]	; (80016dc <RCC_ADCCLKConfig+0x34>)
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	6053      	str	r3, [r2, #4]
}
 80016d0:	bf00      	nop
 80016d2:	3714      	adds	r7, #20
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bc80      	pop	{r7}
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	40021000 	.word	0x40021000

080016e0 <RCC_OTGFSCLKConfig>:
*                         by 2 selected as USB OTG FS clock source
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_OTGFSCLKConfig(u32 RCC_OTGFSCLKSource)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_OTGFSCLK_SOURCE(RCC_OTGFSCLKSource));

  *(vu32 *) CFGR_OTGFSPRE_BB = RCC_OTGFSCLKSource;
 80016e8:	4a03      	ldr	r2, [pc, #12]	; (80016f8 <RCC_OTGFSCLKConfig+0x18>)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6013      	str	r3, [r2, #0]
}
 80016ee:	bf00      	nop
 80016f0:	370c      	adds	r7, #12
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bc80      	pop	{r7}
 80016f6:	4770      	bx	lr
 80016f8:	424200d8 	.word	0x424200d8

080016fc <RCC_GetClocksFreq>:
*                    will hold the clocks frequencies.
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b08b      	sub	sp, #44	; 0x2c
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  u32 tmp = 0,/* pllmull = 0, pllsource = 0,*/ presc = 0;
 8001704:	2300      	movs	r3, #0
 8001706:	627b      	str	r3, [r7, #36]	; 0x24
 8001708:	2300      	movs	r3, #0
 800170a:	623b      	str	r3, [r7, #32]
  u32 pll1mull = 0, pll1source = 0, prediv1source = 0, prediv1factor = 0, prediv2factor = 0, pll2mull = 0;
 800170c:	2300      	movs	r3, #0
 800170e:	61fb      	str	r3, [r7, #28]
 8001710:	2300      	movs	r3, #0
 8001712:	61bb      	str	r3, [r7, #24]
 8001714:	2300      	movs	r3, #0
 8001716:	617b      	str	r3, [r7, #20]
 8001718:	2300      	movs	r3, #0
 800171a:	613b      	str	r3, [r7, #16]
 800171c:	2300      	movs	r3, #0
 800171e:	60fb      	str	r3, [r7, #12]
 8001720:	2300      	movs	r3, #0
 8001722:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8001724:	4b5b      	ldr	r3, [pc, #364]	; (8001894 <RCC_GetClocksFreq+0x198>)
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f003 030c 	and.w	r3, r3, #12
 800172c:	627b      	str	r3, [r7, #36]	; 0x24

  switch (tmp)
 800172e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001730:	2b04      	cmp	r3, #4
 8001732:	d007      	beq.n	8001744 <RCC_GetClocksFreq+0x48>
 8001734:	2b08      	cmp	r3, #8
 8001736:	d009      	beq.n	800174c <RCC_GetClocksFreq+0x50>
 8001738:	2b00      	cmp	r3, #0
 800173a:	d155      	bne.n	80017e8 <RCC_GetClocksFreq+0xec>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_Value;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	4a56      	ldr	r2, [pc, #344]	; (8001898 <RCC_GetClocksFreq+0x19c>)
 8001740:	601a      	str	r2, [r3, #0]
      break;
 8001742:	e055      	b.n	80017f0 <RCC_GetClocksFreq+0xf4>

    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_Value;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	4a55      	ldr	r2, [pc, #340]	; (800189c <RCC_GetClocksFreq+0x1a0>)
 8001748:	601a      	str	r2, [r3, #0]
      break;
 800174a:	e051      	b.n	80017f0 <RCC_GetClocksFreq+0xf4>
//      }
//      break;
 
/* STM32 connectivity line devices */
      /* Get PLL1 clock source and multiplication factor */
      pll1mull = RCC->CFGR & CFGR_PLL1Mull_Mask;
 800174c:	4b51      	ldr	r3, [pc, #324]	; (8001894 <RCC_GetClocksFreq+0x198>)
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001754:	61fb      	str	r3, [r7, #28]
      pll1mull = ( pll1mull >> 18) + 2; /* !!!!!!!!!!! case where mul = 6.5 !!!!!!!!!!!!!!! */
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	0c9b      	lsrs	r3, r3, #18
 800175a:	3302      	adds	r3, #2
 800175c:	61fb      	str	r3, [r7, #28]

      pll1source = RCC->CFGR & CFGR_PLL1SRC_Mask;
 800175e:	4b4d      	ldr	r3, [pc, #308]	; (8001894 <RCC_GetClocksFreq+0x198>)
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001766:	61bb      	str	r3, [r7, #24]

      if (pll1source == 0x00)
 8001768:	69bb      	ldr	r3, [r7, #24]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d106      	bne.n	800177c <RCC_GetClocksFreq+0x80>
      {/* HSI oscillator clock divided by 2 selected as PLL1 clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_Value >> 1) * pll1mull;
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	4a4b      	ldr	r2, [pc, #300]	; (80018a0 <RCC_GetClocksFreq+0x1a4>)
 8001772:	fb02 f203 	mul.w	r2, r2, r3
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	601a      	str	r2, [r3, #0]
            prediv2factor = ((RCC->CFGR2 & CFGR2_PREDIV2) >> 4) + 1;
            pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
            RCC_Clocks->SYSCLK_Frequency = (((HSE_Value / prediv2factor) * pll2mull) / prediv1factor) * pll1mull;                         
        }
      }
      break;
 800177a:	e039      	b.n	80017f0 <RCC_GetClocksFreq+0xf4>
        RCC_Clocks->SYSCLK_Frequency = (HSI_Value >> 1) * pll1mull;
      }
      else
      {/* PREDIV1 selected as PLL1 clock entry */
       /* Get PREDIV1 clock source and division factor */
         prediv1source = RCC->CFGR2 & CFGR2_PREDIV1SRC;
 800177c:	4b45      	ldr	r3, [pc, #276]	; (8001894 <RCC_GetClocksFreq+0x198>)
 800177e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001780:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001784:	617b      	str	r3, [r7, #20]
         prediv1factor = (RCC->CFGR2 & CFGR2_PREDIV1) + 1;
 8001786:	4b43      	ldr	r3, [pc, #268]	; (8001894 <RCC_GetClocksFreq+0x198>)
 8001788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800178a:	f003 030f 	and.w	r3, r3, #15
 800178e:	3301      	adds	r3, #1
 8001790:	613b      	str	r3, [r7, #16]

        if (prediv1source == 0)
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d109      	bne.n	80017ac <RCC_GetClocksFreq+0xb0>
        {/* HSE oscillator clock selected as PREDIV1 clock entry */
           RCC_Clocks->SYSCLK_Frequency = (HSE_Value / prediv1factor) * pll1mull;          
 8001798:	4a40      	ldr	r2, [pc, #256]	; (800189c <RCC_GetClocksFreq+0x1a0>)
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	fbb2 f3f3 	udiv	r3, r2, r3
 80017a0:	69fa      	ldr	r2, [r7, #28]
 80017a2:	fb02 f203 	mul.w	r2, r2, r3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	601a      	str	r2, [r3, #0]
            prediv2factor = ((RCC->CFGR2 & CFGR2_PREDIV2) >> 4) + 1;
            pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
            RCC_Clocks->SYSCLK_Frequency = (((HSE_Value / prediv2factor) * pll2mull) / prediv1factor) * pll1mull;                         
        }
      }
      break;
 80017aa:	e021      	b.n	80017f0 <RCC_GetClocksFreq+0xf4>
           RCC_Clocks->SYSCLK_Frequency = (HSE_Value / prediv1factor) * pll1mull;          
        }
        else
        {/* PLL2 clock selected as PREDIV1 clock entry */
         /* Get PREDIV2 division factor and PLL2 multiplication factor */
            prediv2factor = ((RCC->CFGR2 & CFGR2_PREDIV2) >> 4) + 1;
 80017ac:	4b39      	ldr	r3, [pc, #228]	; (8001894 <RCC_GetClocksFreq+0x198>)
 80017ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017b4:	091b      	lsrs	r3, r3, #4
 80017b6:	3301      	adds	r3, #1
 80017b8:	60fb      	str	r3, [r7, #12]
            pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
 80017ba:	4b36      	ldr	r3, [pc, #216]	; (8001894 <RCC_GetClocksFreq+0x198>)
 80017bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017be:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80017c2:	0a1b      	lsrs	r3, r3, #8
 80017c4:	3302      	adds	r3, #2
 80017c6:	60bb      	str	r3, [r7, #8]
            RCC_Clocks->SYSCLK_Frequency = (((HSE_Value / prediv2factor) * pll2mull) / prediv1factor) * pll1mull;                         
 80017c8:	4a34      	ldr	r2, [pc, #208]	; (800189c <RCC_GetClocksFreq+0x1a0>)
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80017d0:	68ba      	ldr	r2, [r7, #8]
 80017d2:	fb02 f203 	mul.w	r2, r2, r3
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80017dc:	69fa      	ldr	r2, [r7, #28]
 80017de:	fb02 f203 	mul.w	r2, r2, r3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	601a      	str	r2, [r3, #0]
        }
      }
      break;
 80017e6:	e003      	b.n	80017f0 <RCC_GetClocksFreq+0xf4>
      
      
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_Value;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	4a2b      	ldr	r2, [pc, #172]	; (8001898 <RCC_GetClocksFreq+0x19c>)
 80017ec:	601a      	str	r2, [r3, #0]
      break;
 80017ee:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 80017f0:	4b28      	ldr	r3, [pc, #160]	; (8001894 <RCC_GetClocksFreq+0x198>)
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017f8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp = tmp >> 4;
 80017fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fc:	091b      	lsrs	r3, r3, #4
 80017fe:	627b      	str	r3, [r7, #36]	; 0x24
  presc = APBAHBPrescTable[tmp];
 8001800:	4a28      	ldr	r2, [pc, #160]	; (80018a4 <RCC_GetClocksFreq+0x1a8>)
 8001802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001804:	4413      	add	r3, r2
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	623b      	str	r3, [r7, #32]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	6a3b      	ldr	r3, [r7, #32]
 8001810:	40da      	lsrs	r2, r3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 8001816:	4b1f      	ldr	r3, [pc, #124]	; (8001894 <RCC_GetClocksFreq+0x198>)
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800181e:	627b      	str	r3, [r7, #36]	; 0x24
  tmp = tmp >> 8;
 8001820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001822:	0a1b      	lsrs	r3, r3, #8
 8001824:	627b      	str	r3, [r7, #36]	; 0x24
  presc = APBAHBPrescTable[tmp];
 8001826:	4a1f      	ldr	r2, [pc, #124]	; (80018a4 <RCC_GetClocksFreq+0x1a8>)
 8001828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182a:	4413      	add	r3, r2
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	623b      	str	r3, [r7, #32]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	685a      	ldr	r2, [r3, #4]
 8001834:	6a3b      	ldr	r3, [r7, #32]
 8001836:	40da      	lsrs	r2, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 800183c:	4b15      	ldr	r3, [pc, #84]	; (8001894 <RCC_GetClocksFreq+0x198>)
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001844:	627b      	str	r3, [r7, #36]	; 0x24
  tmp = tmp >> 11;
 8001846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001848:	0adb      	lsrs	r3, r3, #11
 800184a:	627b      	str	r3, [r7, #36]	; 0x24
  presc = APBAHBPrescTable[tmp];
 800184c:	4a15      	ldr	r2, [pc, #84]	; (80018a4 <RCC_GetClocksFreq+0x1a8>)
 800184e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001850:	4413      	add	r3, r2
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	623b      	str	r3, [r7, #32]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	685a      	ldr	r2, [r3, #4]
 800185a:	6a3b      	ldr	r3, [r7, #32]
 800185c:	40da      	lsrs	r2, r3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	60da      	str	r2, [r3, #12]

  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 8001862:	4b0c      	ldr	r3, [pc, #48]	; (8001894 <RCC_GetClocksFreq+0x198>)
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800186a:	627b      	str	r3, [r7, #36]	; 0x24
  tmp = tmp >> 14;
 800186c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186e:	0b9b      	lsrs	r3, r3, #14
 8001870:	627b      	str	r3, [r7, #36]	; 0x24
  presc = ADCPrescTable[tmp];
 8001872:	4a0d      	ldr	r2, [pc, #52]	; (80018a8 <RCC_GetClocksFreq+0x1ac>)
 8001874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001876:	4413      	add	r3, r2
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	623b      	str	r3, [r7, #32]

  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	68da      	ldr	r2, [r3, #12]
 8001880:	6a3b      	ldr	r3, [r7, #32]
 8001882:	fbb2 f2f3 	udiv	r2, r2, r3
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	611a      	str	r2, [r3, #16]
}
 800188a:	bf00      	nop
 800188c:	372c      	adds	r7, #44	; 0x2c
 800188e:	46bd      	mov	sp, r7
 8001890:	bc80      	pop	{r7}
 8001892:	4770      	bx	lr
 8001894:	40021000 	.word	0x40021000
 8001898:	007a1200 	.word	0x007a1200
 800189c:	017d7840 	.word	0x017d7840
 80018a0:	003d0900 	.word	0x003d0900
 80018a4:	08007b50 	.word	0x08007b50
 80018a8:	08007b60 	.word	0x08007b60

080018ac <RCC_APB2PeriphClockCmd>:
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void RCC_APB2PeriphClockCmd(u32 RCC_APB2Periph, FunctionalState NewState)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	460b      	mov	r3, r1
 80018b6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80018b8:	78fb      	ldrb	r3, [r7, #3]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d006      	beq.n	80018cc <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80018be:	4909      	ldr	r1, [pc, #36]	; (80018e4 <RCC_APB2PeriphClockCmd+0x38>)
 80018c0:	4b08      	ldr	r3, [pc, #32]	; (80018e4 <RCC_APB2PeriphClockCmd+0x38>)
 80018c2:	699a      	ldr	r2, [r3, #24]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	4313      	orrs	r3, r2
 80018c8:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 80018ca:	e006      	b.n	80018da <RCC_APB2PeriphClockCmd+0x2e>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80018cc:	4905      	ldr	r1, [pc, #20]	; (80018e4 <RCC_APB2PeriphClockCmd+0x38>)
 80018ce:	4b05      	ldr	r3, [pc, #20]	; (80018e4 <RCC_APB2PeriphClockCmd+0x38>)
 80018d0:	699a      	ldr	r2, [r3, #24]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	43db      	mvns	r3, r3
 80018d6:	4013      	ands	r3, r2
 80018d8:	618b      	str	r3, [r1, #24]
  }
}
 80018da:	bf00      	nop
 80018dc:	370c      	adds	r7, #12
 80018de:	46bd      	mov	sp, r7
 80018e0:	bc80      	pop	{r7}
 80018e2:	4770      	bx	lr
 80018e4:	40021000 	.word	0x40021000

080018e8 <RCC_GetFlagStatus>:
*                       - RCC_FLAG_LPWRRST: Low Power reset
* Output         : None
* Return         : The new state of RCC_FLAG (SET or RESET).
*******************************************************************************/
FlagStatus RCC_GetFlagStatus(u8 RCC_FLAG)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b087      	sub	sp, #28
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	4603      	mov	r3, r0
 80018f0:	71fb      	strb	r3, [r7, #7]
  u32 tmp = 0;
 80018f2:	2300      	movs	r3, #0
 80018f4:	60fb      	str	r3, [r7, #12]
  u32 statusreg = 0;
 80018f6:	2300      	movs	r3, #0
 80018f8:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 80018fa:	2300      	movs	r3, #0
 80018fc:	74fb      	strb	r3, [r7, #19]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 80018fe:	79fb      	ldrb	r3, [r7, #7]
 8001900:	095b      	lsrs	r3, r3, #5
 8001902:	b2db      	uxtb	r3, r3
 8001904:	60fb      	str	r3, [r7, #12]

  if (tmp == 1)               /* The flag to check is in CR register */
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	2b01      	cmp	r3, #1
 800190a:	d103      	bne.n	8001914 <RCC_GetFlagStatus+0x2c>
  {
    statusreg = RCC->CR;
 800190c:	4b12      	ldr	r3, [pc, #72]	; (8001958 <RCC_GetFlagStatus+0x70>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	617b      	str	r3, [r7, #20]
 8001912:	e009      	b.n	8001928 <RCC_GetFlagStatus+0x40>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	2b02      	cmp	r3, #2
 8001918:	d103      	bne.n	8001922 <RCC_GetFlagStatus+0x3a>
  {
    statusreg = RCC->BDCR;
 800191a:	4b0f      	ldr	r3, [pc, #60]	; (8001958 <RCC_GetFlagStatus+0x70>)
 800191c:	6a1b      	ldr	r3, [r3, #32]
 800191e:	617b      	str	r3, [r7, #20]
 8001920:	e002      	b.n	8001928 <RCC_GetFlagStatus+0x40>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 8001922:	4b0d      	ldr	r3, [pc, #52]	; (8001958 <RCC_GetFlagStatus+0x70>)
 8001924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001926:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_Mask;
 8001928:	79fb      	ldrb	r3, [r7, #7]
 800192a:	f003 031f 	and.w	r3, r3, #31
 800192e:	60fb      	str	r3, [r7, #12]

  if ((statusreg & ((u32)1 << tmp)) != (u32)RESET)
 8001930:	697a      	ldr	r2, [r7, #20]
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	fa22 f303 	lsr.w	r3, r2, r3
 8001938:	f003 0301 	and.w	r3, r3, #1
 800193c:	2b00      	cmp	r3, #0
 800193e:	d002      	beq.n	8001946 <RCC_GetFlagStatus+0x5e>
  {
    bitstatus = SET;
 8001940:	2301      	movs	r3, #1
 8001942:	74fb      	strb	r3, [r7, #19]
 8001944:	e001      	b.n	800194a <RCC_GetFlagStatus+0x62>
  }
  else
  {
    bitstatus = RESET;
 8001946:	2300      	movs	r3, #0
 8001948:	74fb      	strb	r3, [r7, #19]
  }

  /* Return the flag status */
  return bitstatus;
 800194a:	7cfb      	ldrb	r3, [r7, #19]
}
 800194c:	4618      	mov	r0, r3
 800194e:	371c      	adds	r7, #28
 8001950:	46bd      	mov	sp, r7
 8001952:	bc80      	pop	{r7}
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	40021000 	.word	0x40021000

0800195c <USART_Init>:
*                    specified USART peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b08c      	sub	sp, #48	; 0x30
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	6039      	str	r1, [r7, #0]
  u32 tmpreg = 0x00, apbclock = 0x00;
 8001966:	2300      	movs	r3, #0
 8001968:	62bb      	str	r3, [r7, #40]	; 0x28
 800196a:	2300      	movs	r3, #0
 800196c:	62fb      	str	r3, [r7, #44]	; 0x2c
  u32 integerdivider = 0x00;
 800196e:	2300      	movs	r3, #0
 8001970:	627b      	str	r3, [r7, #36]	; 0x24
  u32 fractionaldivider = 0x00;
 8001972:	2300      	movs	r3, #0
 8001974:	623b      	str	r3, [r7, #32]
  u32 usartxbase = 0;
 8001976:	2300      	movs	r3, #0
 8001978:	61fb      	str	r3, [r7, #28]
  assert_param(IS_USART_MODE(USART_InitStruct->USART_Mode));
  assert_param(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));
  /* The hardware flow control is available only for USART1, USART2 and USART3 */          
  assert_param(IS_USART_PERIPH_HFC(USARTx, USART_InitStruct->USART_HardwareFlowControl));
  
  usartxbase = (*(u32*)&USARTx);
 800197a:	1d3b      	adds	r3, r7, #4
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	8a1b      	ldrh	r3, [r3, #16]
 8001984:	b29b      	uxth	r3, r3
 8001986:	62bb      	str	r3, [r7, #40]	; 0x28
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
 8001988:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800198a:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 800198e:	4013      	ands	r3, r2
 8001990:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (u32)USART_InitStruct->USART_StopBits;
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	88db      	ldrh	r3, [r3, #6]
 8001996:	461a      	mov	r2, r3
 8001998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800199a:	4313      	orrs	r3, r2
 800199c:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Write to USART CR2 */
  USARTx->CR2 = (u16)tmpreg;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80019a2:	b292      	uxth	r2, r2
 80019a4:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	899b      	ldrh	r3, [r3, #12]
 80019aa:	b29b      	uxth	r3, r3
 80019ac:	62bb      	str	r3, [r7, #40]	; 0x28
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
 80019ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80019b0:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
 80019b4:	4013      	ands	r3, r2
 80019b6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (u32)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	889a      	ldrh	r2, [r3, #4]
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	891b      	ldrh	r3, [r3, #8]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	895b      	ldrh	r3, [r3, #10]

  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (u32)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80019c8:	4313      	orrs	r3, r2
 80019ca:	b29b      	uxth	r3, r3
 80019cc:	461a      	mov	r2, r3
 80019ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019d0:	4313      	orrs	r3, r2
 80019d2:	62bb      	str	r3, [r7, #40]	; 0x28
            USART_InitStruct->USART_Mode;

  /* Write to USART CR1 */
  USARTx->CR1 = (u16)tmpreg;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80019d8:	b292      	uxth	r2, r2
 80019da:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	8a9b      	ldrh	r3, [r3, #20]
 80019e0:	b29b      	uxth	r3, r3
 80019e2:	62bb      	str	r3, [r7, #40]	; 0x28
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
 80019e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80019e6:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 80019ea:	4013      	ands	r3, r2
 80019ec:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	899b      	ldrh	r3, [r3, #12]
 80019f2:	461a      	mov	r2, r3
 80019f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019f6:	4313      	orrs	r3, r2
 80019f8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Write to USART CR3 */
  USARTx->CR3 = (u16)tmpreg;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80019fe:	b292      	uxth	r2, r2
 8001a00:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8001a02:	f107 0308 	add.w	r3, r7, #8
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7ff fe78 	bl	80016fc <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	4a1b      	ldr	r2, [pc, #108]	; (8001a7c <USART_Init+0x120>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d102      	bne.n	8001a1a <USART_Init+0xbe>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a18:	e001      	b.n	8001a1e <USART_Init+0xc2>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Determine the integer part */
  integerdivider = ((0x19 * apbclock) / (0x04 * (USART_InitStruct->USART_BaudRate)));
 8001a1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a20:	4613      	mov	r3, r2
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	4413      	add	r3, r2
 8001a26:	009a      	lsls	r2, r3, #2
 8001a28:	441a      	add	r2, r3
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a34:	627b      	str	r3, [r7, #36]	; 0x24
  tmpreg = (integerdivider / 0x64) << 0x04;
 8001a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a38:	4a11      	ldr	r2, [pc, #68]	; (8001a80 <USART_Init+0x124>)
 8001a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a3e:	095b      	lsrs	r3, r3, #5
 8001a40:	011b      	lsls	r3, r3, #4
 8001a42:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (0x64 * (tmpreg >> 0x04));
 8001a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a46:	091b      	lsrs	r3, r3, #4
 8001a48:	2264      	movs	r2, #100	; 0x64
 8001a4a:	fb02 f303 	mul.w	r3, r2, r3
 8001a4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	623b      	str	r3, [r7, #32]
  tmpreg |= ((((fractionaldivider * 0x10) + 0x32) / 0x64)) & ((u8)0x0F);
 8001a54:	6a3b      	ldr	r3, [r7, #32]
 8001a56:	011b      	lsls	r3, r3, #4
 8001a58:	3332      	adds	r3, #50	; 0x32
 8001a5a:	4a09      	ldr	r2, [pc, #36]	; (8001a80 <USART_Init+0x124>)
 8001a5c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a60:	095b      	lsrs	r3, r3, #5
 8001a62:	f003 030f 	and.w	r3, r3, #15
 8001a66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Write to USART BRR */
  USARTx->BRR = (u16)tmpreg;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a70:	b292      	uxth	r2, r2
 8001a72:	811a      	strh	r2, [r3, #8]
}
 8001a74:	bf00      	nop
 8001a76:	3730      	adds	r7, #48	; 0x30
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	40013800 	.word	0x40013800
 8001a80:	51eb851f 	.word	0x51eb851f

08001a84 <USART_ClockInit>:
*                    the specified USART peripheral.
* Output         : None
* Return         : None
*******************************************************************************/
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b085      	sub	sp, #20
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	6039      	str	r1, [r7, #0]
  u32 tmpreg = 0x00;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	60fb      	str	r3, [r7, #12]
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));              
  
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	8a1b      	ldrh	r3, [r3, #16]
 8001a96:	b29b      	uxth	r3, r3
 8001a98:	60fb      	str	r3, [r7, #12]
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= CR2_CLOCK_CLEAR_Mask;
 8001a9a:	68fa      	ldr	r2, [r7, #12]
 8001a9c:	f24f 03ff 	movw	r3, #61695	; 0xf0ff
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	60fb      	str	r3, [r7, #12]
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (u32)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	881a      	ldrh	r2, [r3, #0]
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	885b      	ldrh	r3, [r3, #2]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
 8001aac:	4313      	orrs	r3, r2
 8001aae:	b29a      	uxth	r2, r3
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	889b      	ldrh	r3, [r3, #4]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	b29a      	uxth	r2, r3
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	88db      	ldrh	r3, [r3, #6]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	b29b      	uxth	r3, r3
 8001ac0:	461a      	mov	r2, r3
  /* Configure the USART Clock, CPOL, CPHA and LastBit ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (u32)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	60fb      	str	r3, [r7, #12]
                 USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;

  /* Write to USART CR2 */
  USARTx->CR2 = (u16)tmpreg;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	b29a      	uxth	r2, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	821a      	strh	r2, [r3, #16]
}
 8001ad0:	bf00      	nop
 8001ad2:	3714      	adds	r7, #20
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bc80      	pop	{r7}
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop

08001adc <USART_Cmd>:
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001ae8:	78fb      	ldrb	r3, [r7, #3]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d008      	beq.n	8001b00 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	899b      	ldrh	r3, [r3, #12]
 8001af2:	b29b      	uxth	r3, r3
 8001af4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001af8:	b29a      	uxth	r2, r3
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
  }
}
 8001afe:	e007      	b.n	8001b10 <USART_Cmd+0x34>
    USARTx->CR1 |= CR1_UE_Set;
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	899b      	ldrh	r3, [r3, #12]
 8001b04:	b29b      	uxth	r3, r3
 8001b06:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001b0a:	b29a      	uxth	r2, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	819a      	strh	r2, [r3, #12]
  }
}
 8001b10:	bf00      	nop
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bc80      	pop	{r7}
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop

08001b1c <USART_ITConfig>:
*                    This parameter can be: ENABLE or DISABLE.
* Output         : None
* Return         : None
*******************************************************************************/
void USART_ITConfig(USART_TypeDef* USARTx, u16 USART_IT, FunctionalState NewState)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b087      	sub	sp, #28
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
 8001b24:	460b      	mov	r3, r1
 8001b26:	807b      	strh	r3, [r7, #2]
 8001b28:	4613      	mov	r3, r2
 8001b2a:	707b      	strb	r3, [r7, #1]
  u32 usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	613b      	str	r3, [r7, #16]
 8001b30:	2300      	movs	r3, #0
 8001b32:	60fb      	str	r3, [r7, #12]
 8001b34:	2300      	movs	r3, #0
 8001b36:	60bb      	str	r3, [r7, #8]
  u32 usartxbase = 0x00;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	617b      	str	r3, [r7, #20]
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CONFIG_IT(USART_IT));
  assert_param(IS_USART_PERIPH_IT(USARTx, USART_IT)); /* The CTS interrupt is not available for UART4 and UART5 */     
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  usartxbase = (*(u32*)&(USARTx));
 8001b3c:	1d3b      	adds	r3, r7, #4
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((u8)USART_IT) >> 0x05);
 8001b42:	887b      	ldrh	r3, [r7, #2]
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	095b      	lsrs	r3, r3, #5
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
 8001b4c:	887b      	ldrh	r3, [r7, #2]
 8001b4e:	f003 031f 	and.w	r3, r3, #31
 8001b52:	60fb      	str	r3, [r7, #12]

  itmask = (((u32)0x01) << itpos);
 8001b54:	2201      	movs	r2, #1
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5c:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d103      	bne.n	8001b6c <USART_ITConfig+0x50>
  {
    usartxbase += 0x0C;
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	330c      	adds	r3, #12
 8001b68:	617b      	str	r3, [r7, #20]
 8001b6a:	e009      	b.n	8001b80 <USART_ITConfig+0x64>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d103      	bne.n	8001b7a <USART_ITConfig+0x5e>
  {
    usartxbase += 0x10;
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	3310      	adds	r3, #16
 8001b76:	617b      	str	r3, [r7, #20]
 8001b78:	e002      	b.n	8001b80 <USART_ITConfig+0x64>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	3314      	adds	r3, #20
 8001b7e:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 8001b80:	787b      	ldrb	r3, [r7, #1]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d006      	beq.n	8001b94 <USART_ITConfig+0x78>
  {
    *(vu32*)usartxbase  |= itmask;
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	697a      	ldr	r2, [r7, #20]
 8001b8a:	6811      	ldr	r1, [r2, #0]
 8001b8c:	68ba      	ldr	r2, [r7, #8]
 8001b8e:	430a      	orrs	r2, r1
 8001b90:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(vu32*)usartxbase &= ~itmask;
  }
}
 8001b92:	e006      	b.n	8001ba2 <USART_ITConfig+0x86>
  {
    *(vu32*)usartxbase  |= itmask;
  }
  else
  {
    *(vu32*)usartxbase &= ~itmask;
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	697a      	ldr	r2, [r7, #20]
 8001b98:	6811      	ldr	r1, [r2, #0]
 8001b9a:	68ba      	ldr	r2, [r7, #8]
 8001b9c:	43d2      	mvns	r2, r2
 8001b9e:	400a      	ands	r2, r1
 8001ba0:	601a      	str	r2, [r3, #0]
  }
}
 8001ba2:	bf00      	nop
 8001ba4:	371c      	adds	r7, #28
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bc80      	pop	{r7}
 8001baa:	4770      	bx	lr

08001bac <USART_SendData>:
*                  - Data: the data to transmit.
* Output         : None
* Return         : None
*******************************************************************************/
void USART_SendData(USART_TypeDef* USARTx, u16 Data)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (u16)0x01FF);
 8001bb8:	887b      	ldrh	r3, [r7, #2]
 8001bba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bbe:	b29a      	uxth	r2, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	809a      	strh	r2, [r3, #4]
}
 8001bc4:	bf00      	nop
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bc80      	pop	{r7}
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop

08001bd0 <USART_ReceiveData>:
*                     - USART1, USART2, USART3, UART4 or UART5.
* Output         : None
* Return         : The received data.
*******************************************************************************/
u16 USART_ReceiveData(USART_TypeDef* USARTx)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (u16)(USARTx->DR & (u16)0x01FF);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	889b      	ldrh	r3, [r3, #4]
 8001bdc:	b29b      	uxth	r3, r3
 8001bde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001be2:	b29b      	uxth	r3, r3
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	370c      	adds	r7, #12
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bc80      	pop	{r7}
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop

08001bf0 <USART_GetFlagStatus>:
*                       - USART_FLAG_PE:   Parity Error flag
* Output         : None
* Return         : The new state of USART_FLAG (SET or RESET).
*******************************************************************************/
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, u16 USART_FLAG)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b085      	sub	sp, #20
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_FLAG(USART_FLAG));
  assert_param(IS_USART_PERIPH_FLAG(USARTx, USART_FLAG)); /* The CTS flag is not available for UART4 and UART5 */   

  if ((USARTx->SR & USART_FLAG) != (u16)RESET)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	881b      	ldrh	r3, [r3, #0]
 8001c04:	b29a      	uxth	r2, r3
 8001c06:	887b      	ldrh	r3, [r7, #2]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	b29b      	uxth	r3, r3
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d002      	beq.n	8001c16 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8001c10:	2301      	movs	r3, #1
 8001c12:	73fb      	strb	r3, [r7, #15]
 8001c14:	e001      	b.n	8001c1a <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8001c16:	2300      	movs	r3, #0
 8001c18:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3714      	adds	r7, #20
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bc80      	pop	{r7}
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop

08001c28 <USART_ClearFlag>:
*                          register (USART_SendData()).                        
* Output         : None
* Return         : None
*******************************************************************************/
void USART_ClearFlag(USART_TypeDef* USARTx, u16 USART_FLAG)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	460b      	mov	r3, r1
 8001c32:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CLEAR_FLAG(USART_FLAG));
  assert_param(IS_USART_PERIPH_FLAG(USARTx, USART_FLAG)); /* The CTS flag is not available for UART4 and UART5 */   
   
  USARTx->SR = (u16)~USART_FLAG;
 8001c34:	887b      	ldrh	r3, [r7, #2]
 8001c36:	43db      	mvns	r3, r3
 8001c38:	b29a      	uxth	r2, r3
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	801a      	strh	r2, [r3, #0]
}
 8001c3e:	bf00      	nop
 8001c40:	370c      	adds	r7, #12
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bc80      	pop	{r7}
 8001c46:	4770      	bx	lr

08001c48 <USART_ClearITPendingBit>:
*                          USART_DR register (USART_SendData()).  
* Output         : None
* Return         : None
*******************************************************************************/
void USART_ClearITPendingBit(USART_TypeDef* USARTx, u16 USART_IT)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b085      	sub	sp, #20
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	460b      	mov	r3, r1
 8001c52:	807b      	strh	r3, [r7, #2]
  u16 bitpos = 0x00, itmask = 0x00;
 8001c54:	2300      	movs	r3, #0
 8001c56:	81fb      	strh	r3, [r7, #14]
 8001c58:	2300      	movs	r3, #0
 8001c5a:	81bb      	strh	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CLEAR_IT(USART_IT));
  assert_param(IS_USART_PERIPH_IT(USARTx, USART_IT)); /* The CTS interrupt is not available for UART4 and UART5 */
  
  bitpos = USART_IT >> 0x08;
 8001c5c:	887b      	ldrh	r3, [r7, #2]
 8001c5e:	0a1b      	lsrs	r3, r3, #8
 8001c60:	81fb      	strh	r3, [r7, #14]

  itmask = (u16)((u16)0x01 << bitpos);
 8001c62:	89fb      	ldrh	r3, [r7, #14]
 8001c64:	2201      	movs	r2, #1
 8001c66:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6a:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (u16)~itmask;
 8001c6c:	89bb      	ldrh	r3, [r7, #12]
 8001c6e:	43db      	mvns	r3, r3
 8001c70:	b29a      	uxth	r2, r3
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	801a      	strh	r2, [r3, #0]
}
 8001c76:	bf00      	nop
 8001c78:	3714      	adds	r7, #20
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bc80      	pop	{r7}
 8001c7e:	4770      	bx	lr

08001c80 <BSP_Init>:
*                       requirements.
*********************************************************************************************************
*/

void  BSP_Init (void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
    BSP_IntInit();
 8001c84:	f000 f972 	bl	8001f6c <BSP_IntInit>

    RCC_DeInit();
 8001c88:	f7ff fb4a 	bl	8001320 <RCC_DeInit>
    RCC_HSEConfig(RCC_HSE_ON);                                  /* HSE = 25MHz ext. crystal.                            */
 8001c8c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001c90:	f7ff fb74 	bl	800137c <RCC_HSEConfig>
    RCC_WaitForHSEStartUp();
 8001c94:	f7ff fba0 	bl	80013d8 <RCC_WaitForHSEStartUp>


    RCC_PREDIV2Config(RCC_PREDIV2_Div5);                        /* Fprediv2 = HSE      /  5 =  5MHz.                    */
 8001c98:	2040      	movs	r0, #64	; 0x40
 8001c9a:	f7ff fbe5 	bl	8001468 <RCC_PREDIV2Config>
    RCC_PLL2Config(RCC_PLL2Mul_8);                              /* PLL2     = Fprediv2 *  8 = 40MHz.                    */
 8001c9e:	f44f 60c0 	mov.w	r0, #1536	; 0x600
 8001ca2:	f7ff fc2b 	bl	80014fc <RCC_PLL2Config>
    RCC_PLL2Cmd(ENABLE);
 8001ca6:	2001      	movs	r0, #1
 8001ca8:	f7ff fc44 	bl	8001534 <RCC_PLL2Cmd>
    RCC_PLL3Config(RCC_PLL3Mul_10);                             /* PLL3     = Fprediv2 * 10 = 50MHz.                    */
 8001cac:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001cb0:	f7ff fc50 	bl	8001554 <RCC_PLL3Config>
    RCC_PLL3Cmd(ENABLE);
 8001cb4:	2001      	movs	r0, #1
 8001cb6:	f7ff fc69 	bl	800158c <RCC_PLL3Cmd>


    RCC_HCLKConfig(RCC_SYSCLK_Div1);                            /* HCLK    = AHBCLK  = PLL1 / AHBPRES(1) = 72MHz.       */
 8001cba:	2000      	movs	r0, #0
 8001cbc:	f7ff fca0 	bl	8001600 <RCC_HCLKConfig>
    RCC_PCLK2Config(RCC_HCLK_Div1);                             /* APB2CLK = AHBCLK  / APB2DIV(1)  = 72MHz.             */
 8001cc0:	2000      	movs	r0, #0
 8001cc2:	f7ff fcd5 	bl	8001670 <RCC_PCLK2Config>
    RCC_PCLK1Config(RCC_HCLK_Div2);                             /* APB1CLK = AHBCLK  / APB1DIV(2)  = 36MHz (max).       */
 8001cc6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001cca:	f7ff fcb5 	bl	8001638 <RCC_PCLK1Config>
    RCC_ADCCLKConfig(RCC_PCLK2_Div6);                           /* ADCCLK  = AHBCLK  / APB2DIV / 6 = 12MHz.             */
 8001cce:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001cd2:	f7ff fce9 	bl	80016a8 <RCC_ADCCLKConfig>
    RCC_OTGFSCLKConfig(RCC_OTGFSCLKSource_PLL1VCO_Div3);        /* OTGCLK  = PLL1VCO / USBPRES(3)  = 144MHz / 3 = 48MHz */
 8001cd6:	2000      	movs	r0, #0
 8001cd8:	f7ff fd02 	bl	80016e0 <RCC_OTGFSCLKConfig>

    FLASH_SetLatency(FLASH_Latency_2);                          /* 2 Flash wait states when HCLK > 48MHz.               */
 8001cdc:	2002      	movs	r0, #2
 8001cde:	f7ff f9a9 	bl	8001034 <FLASH_SetLatency>
    FLASH_PrefetchBufferCmd(FLASH_PrefetchBuffer_Enable);
 8001ce2:	2010      	movs	r0, #16
 8001ce4:	f7ff f9be 	bl	8001064 <FLASH_PrefetchBufferCmd>

    while (RCC_GetFlagStatus(RCC_FLAG_PLL2RDY) == RESET) {      /* Wait for PLL2 to lock.                               */
 8001ce8:	bf00      	nop
 8001cea:	203b      	movs	r0, #59	; 0x3b
 8001cec:	f7ff fdfc 	bl	80018e8 <RCC_GetFlagStatus>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d0f9      	beq.n	8001cea <BSP_Init+0x6a>
        ;
    }

    while (RCC_GetFlagStatus(RCC_FLAG_PLL3RDY) == RESET) {      /* Wait for PLL3 to lock.                               */
 8001cf6:	bf00      	nop
 8001cf8:	203d      	movs	r0, #61	; 0x3d
 8001cfa:	f7ff fdf5 	bl	80018e8 <RCC_GetFlagStatus>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d0f9      	beq.n	8001cf8 <BSP_Init+0x78>
        ;
    }

                                                                /* Fprediv1 = PLL2 / 5 =  8MHz.                         */
    RCC_PREDIV1Config(RCC_PREDIV1_Source_PLL2, RCC_PREDIV1_Div5);
 8001d04:	2104      	movs	r1, #4
 8001d06:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001d0a:	f7ff fb8d 	bl	8001428 <RCC_PREDIV1Config>
    RCC_PLL1Config(RCC_PLL1Source_PREDIV1, RCC_PLL1Mul_9);      /* PLL1 = Fprediv1 * 9 = 72Mhz.                         */
 8001d0e:	f44f 11e0 	mov.w	r1, #1835008	; 0x1c0000
 8001d12:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001d16:	f7ff fbc3 	bl	80014a0 <RCC_PLL1Config>
    RCC_PLL1Cmd(ENABLE);
 8001d1a:	2001      	movs	r0, #1
 8001d1c:	f7ff fbde 	bl	80014dc <RCC_PLL1Cmd>
    while (RCC_GetFlagStatus(RCC_FLAG_PLL1RDY) == RESET) {      /* Wait for PLL1 to lock.                               */
 8001d20:	bf00      	nop
 8001d22:	2039      	movs	r0, #57	; 0x39
 8001d24:	f7ff fde0 	bl	80018e8 <RCC_GetFlagStatus>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d0f9      	beq.n	8001d22 <BSP_Init+0xa2>
        ;
    }


    RCC_SYSCLKConfig(RCC_SYSCLKSource_PLL1CLK);                 /* HCLK = SYSCLK = PLL1 = 72MHz.                        */
 8001d2e:	2002      	movs	r0, #2
 8001d30:	f7ff fc3c 	bl	80015ac <RCC_SYSCLKConfig>
    while (RCC_GetSYSCLKSource() != 0x08) {
 8001d34:	bf00      	nop
 8001d36:	f7ff fc55 	bl	80015e4 <RCC_GetSYSCLKSource>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b08      	cmp	r3, #8
 8001d3e:	d1fa      	bne.n	8001d36 <BSP_Init+0xb6>
        ;
    }

    BSP_CPU_ClkFreq_MHz = BSP_CPU_ClkFreq() / (CPU_INT32U)1000000;
 8001d40:	f000 f816 	bl	8001d70 <BSP_CPU_ClkFreq>
 8001d44:	4602      	mov	r2, r0
 8001d46:	4b08      	ldr	r3, [pc, #32]	; (8001d68 <BSP_Init+0xe8>)
 8001d48:	fba3 2302 	umull	r2, r3, r3, r2
 8001d4c:	0c9b      	lsrs	r3, r3, #18
 8001d4e:	4a07      	ldr	r2, [pc, #28]	; (8001d6c <BSP_Init+0xec>)
 8001d50:	6013      	str	r3, [r2, #0]

    BSP_CPU_ClkFreq_MHz = BSP_CPU_ClkFreq_MHz;                  /* Surpress compiler warning BSP_CPU_ClkFreq_MHz    ... */
 8001d52:	4b06      	ldr	r3, [pc, #24]	; (8001d6c <BSP_Init+0xec>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a05      	ldr	r2, [pc, #20]	; (8001d6c <BSP_Init+0xec>)
 8001d58:	6013      	str	r3, [r2, #0]
                                                                /* ... set and not used.                                */

    BSP_LED_Init();                                             /* Initialize the I/Os for the LED      controls.       */
 8001d5a:	f000 f815 	bl	8001d88 <BSP_LED_Init>

    BSP_StatusInit();                                           /* Initialize the status input(s)                       */
 8001d5e:	f000 f8bd 	bl	8001edc <BSP_StatusInit>
#ifdef TRACE_EN                                                 /* See project / compiler preprocessor options.         */
    DBGMCU_CR |=  DBGMCU_CR_TRACE_IOEN_MASK;                    /* Enable tracing (see Note #2).                        */
    DBGMCU_CR &= ~DBGMCU_CR_TRACE_MODE_MASK;                    /* Clr trace mode sel bits.                             */
    DBGMCU_CR |=  DBGMCU_CR_TRACE_MODE_SYNC_04;                 /* Cfg trace mode to synch 4-bit.                       */
#endif
}
 8001d62:	bf00      	nop
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	431bde83 	.word	0x431bde83
 8001d6c:	20000ab0 	.word	0x20000ab0

08001d70 <BSP_CPU_ClkFreq>:
* Note(s)     : none.
*********************************************************************************************************
*/

CPU_INT32U  BSP_CPU_ClkFreq (void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b086      	sub	sp, #24
 8001d74:	af00      	add	r7, sp, #0
    RCC_ClocksTypeDef  rcc_clocks;


    RCC_GetClocksFreq(&rcc_clocks);
 8001d76:	1d3b      	adds	r3, r7, #4
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7ff fcbf 	bl	80016fc <RCC_GetClocksFreq>

    return ((CPU_INT32U)rcc_clocks.HCLK_Frequency);
 8001d7e:	68bb      	ldr	r3, [r7, #8]
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3718      	adds	r7, #24
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <BSP_LED_Init>:
* Note(s)     : none.
*********************************************************************************************************
*/

static  void  BSP_LED_Init (void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef  gpio_init;


    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOD, ENABLE);
 8001d8e:	2101      	movs	r1, #1
 8001d90:	2020      	movs	r0, #32
 8001d92:	f7ff fd8b 	bl	80018ac <RCC_APB2PeriphClockCmd>

    gpio_init.GPIO_Pin   = BSP_GPIOD_LEDS;
 8001d96:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001d9a:	80bb      	strh	r3, [r7, #4]
    gpio_init.GPIO_Speed = GPIO_Speed_50MHz;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	71bb      	strb	r3, [r7, #6]
    gpio_init.GPIO_Mode  = GPIO_Mode_Out_PP;
 8001da0:	2310      	movs	r3, #16
 8001da2:	71fb      	strb	r3, [r7, #7]

    GPIO_Init(GPIOD, &gpio_init);
 8001da4:	1d3b      	adds	r3, r7, #4
 8001da6:	4619      	mov	r1, r3
 8001da8:	4803      	ldr	r0, [pc, #12]	; (8001db8 <BSP_LED_Init+0x30>)
 8001daa:	f7ff f973 	bl	8001094 <GPIO_Init>
}
 8001dae:	bf00      	nop
 8001db0:	3708      	adds	r7, #8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	40011400 	.word	0x40011400

08001dbc <BSP_LED_Off>:
* Note(s)     : none.
*********************************************************************************************************
*/

void  BSP_LED_Off (CPU_INT08U led)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	71fb      	strb	r3, [r7, #7]
    switch (led) {
 8001dc6:	79fb      	ldrb	r3, [r7, #7]
 8001dc8:	2b03      	cmp	r3, #3
 8001dca:	d823      	bhi.n	8001e14 <BSP_LED_Off+0x58>
 8001dcc:	a201      	add	r2, pc, #4	; (adr r2, 8001dd4 <BSP_LED_Off+0x18>)
 8001dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dd2:	bf00      	nop
 8001dd4:	08001de5 	.word	0x08001de5
 8001dd8:	08001df1 	.word	0x08001df1
 8001ddc:	08001dfd 	.word	0x08001dfd
 8001de0:	08001e09 	.word	0x08001e09
        case 0:
             GPIO_ResetBits(GPIOD, BSP_GPIOD_LEDS);
 8001de4:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8001de8:	480d      	ldr	r0, [pc, #52]	; (8001e20 <BSP_LED_Off+0x64>)
 8001dea:	f7ff fa29 	bl	8001240 <GPIO_ResetBits>
             break;
 8001dee:	e012      	b.n	8001e16 <BSP_LED_Off+0x5a>

        case 1:
             GPIO_ResetBits(GPIOD, BSP_GPIOD_LED1);
 8001df0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001df4:	480a      	ldr	r0, [pc, #40]	; (8001e20 <BSP_LED_Off+0x64>)
 8001df6:	f7ff fa23 	bl	8001240 <GPIO_ResetBits>
             break;
 8001dfa:	e00c      	b.n	8001e16 <BSP_LED_Off+0x5a>

        case 2:
             GPIO_ResetBits(GPIOD, BSP_GPIOD_LED2);
 8001dfc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001e00:	4807      	ldr	r0, [pc, #28]	; (8001e20 <BSP_LED_Off+0x64>)
 8001e02:	f7ff fa1d 	bl	8001240 <GPIO_ResetBits>
             break;
 8001e06:	e006      	b.n	8001e16 <BSP_LED_Off+0x5a>

        case 3:
             GPIO_ResetBits(GPIOD, BSP_GPIOD_LED3);
 8001e08:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e0c:	4804      	ldr	r0, [pc, #16]	; (8001e20 <BSP_LED_Off+0x64>)
 8001e0e:	f7ff fa17 	bl	8001240 <GPIO_ResetBits>
             break;
 8001e12:	e000      	b.n	8001e16 <BSP_LED_Off+0x5a>

        default:
             break;
 8001e14:	bf00      	nop
    }
}
 8001e16:	bf00      	nop
 8001e18:	3708      	adds	r7, #8
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	40011400 	.word	0x40011400

08001e24 <BSP_LED_Toggle>:
* Note(s)     : none.
*********************************************************************************************************
*/

void  BSP_LED_Toggle (CPU_INT08U led)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	71fb      	strb	r3, [r7, #7]
    CPU_INT32U  pins;


    switch (led) {
 8001e2e:	79fb      	ldrb	r3, [r7, #7]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d004      	beq.n	8001e3e <BSP_LED_Toggle+0x1a>
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	db49      	blt.n	8001ecc <BSP_LED_Toggle+0xa8>
 8001e38:	2b03      	cmp	r3, #3
 8001e3a:	dc47      	bgt.n	8001ecc <BSP_LED_Toggle+0xa8>
 8001e3c:	e021      	b.n	8001e82 <BSP_LED_Toggle+0x5e>
        case 0:
             pins =  GPIO_ReadOutputData(GPIOD);
 8001e3e:	4826      	ldr	r0, [pc, #152]	; (8001ed8 <BSP_LED_Toggle+0xb4>)
 8001e40:	f7ff f9e4 	bl	800120c <GPIO_ReadOutputData>
 8001e44:	4603      	mov	r3, r0
 8001e46:	60fb      	str	r3, [r7, #12]
             pins ^= BSP_GPIOD_LEDS;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	f483 4360 	eor.w	r3, r3, #57344	; 0xe000
 8001e4e:	60fb      	str	r3, [r7, #12]
             GPIO_SetBits(  GPIOD,   pins  & BSP_GPIOD_LEDS);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	b29b      	uxth	r3, r3
 8001e54:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8001e58:	f023 031f 	bic.w	r3, r3, #31
 8001e5c:	b29b      	uxth	r3, r3
 8001e5e:	4619      	mov	r1, r3
 8001e60:	481d      	ldr	r0, [pc, #116]	; (8001ed8 <BSP_LED_Toggle+0xb4>)
 8001e62:	f7ff f9df 	bl	8001224 <GPIO_SetBits>
             GPIO_ResetBits(GPIOD, (~pins) & BSP_GPIOD_LEDS);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	b29b      	uxth	r3, r3
 8001e6a:	43db      	mvns	r3, r3
 8001e6c:	b29b      	uxth	r3, r3
 8001e6e:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8001e72:	f023 031f 	bic.w	r3, r3, #31
 8001e76:	b29b      	uxth	r3, r3
 8001e78:	4619      	mov	r1, r3
 8001e7a:	4817      	ldr	r0, [pc, #92]	; (8001ed8 <BSP_LED_Toggle+0xb4>)
 8001e7c:	f7ff f9e0 	bl	8001240 <GPIO_ResetBits>
             break;
 8001e80:	e025      	b.n	8001ece <BSP_LED_Toggle+0xaa>

        case 1:
        case 2:
        case 3:
            pins = GPIO_ReadOutputData(GPIOD);
 8001e82:	4815      	ldr	r0, [pc, #84]	; (8001ed8 <BSP_LED_Toggle+0xb4>)
 8001e84:	f7ff f9c2 	bl	800120c <GPIO_ReadOutputData>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	60fb      	str	r3, [r7, #12]
            if ((pins & (1 << (led + BSP_LED_START_BIT))) == 0) {
 8001e8c:	79fb      	ldrb	r3, [r7, #7]
 8001e8e:	330c      	adds	r3, #12
 8001e90:	2201      	movs	r2, #1
 8001e92:	fa02 f303 	lsl.w	r3, r2, r3
 8001e96:	461a      	mov	r2, r3
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d10a      	bne.n	8001eb6 <BSP_LED_Toggle+0x92>
                 GPIO_SetBits(  GPIOD, (1 << (led + BSP_LED_START_BIT)));
 8001ea0:	79fb      	ldrb	r3, [r7, #7]
 8001ea2:	330c      	adds	r3, #12
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eaa:	b29b      	uxth	r3, r3
 8001eac:	4619      	mov	r1, r3
 8001eae:	480a      	ldr	r0, [pc, #40]	; (8001ed8 <BSP_LED_Toggle+0xb4>)
 8001eb0:	f7ff f9b8 	bl	8001224 <GPIO_SetBits>
             } else {
                 GPIO_ResetBits(GPIOD, (1 << (led + BSP_LED_START_BIT)));
             }
            break;
 8001eb4:	e00b      	b.n	8001ece <BSP_LED_Toggle+0xaa>
        case 3:
            pins = GPIO_ReadOutputData(GPIOD);
            if ((pins & (1 << (led + BSP_LED_START_BIT))) == 0) {
                 GPIO_SetBits(  GPIOD, (1 << (led + BSP_LED_START_BIT)));
             } else {
                 GPIO_ResetBits(GPIOD, (1 << (led + BSP_LED_START_BIT)));
 8001eb6:	79fb      	ldrb	r3, [r7, #7]
 8001eb8:	330c      	adds	r3, #12
 8001eba:	2201      	movs	r2, #1
 8001ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec0:	b29b      	uxth	r3, r3
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	4804      	ldr	r0, [pc, #16]	; (8001ed8 <BSP_LED_Toggle+0xb4>)
 8001ec6:	f7ff f9bb 	bl	8001240 <GPIO_ResetBits>
             }
            break;
 8001eca:	e000      	b.n	8001ece <BSP_LED_Toggle+0xaa>

        default:
             break;
 8001ecc:	bf00      	nop
    }
}
 8001ece:	bf00      	nop
 8001ed0:	3710      	adds	r7, #16
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	40011400 	.word	0x40011400

08001edc <BSP_StatusInit>:
* Note(s)     : none.
*********************************************************************************************************
*/

static  void  BSP_StatusInit (void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef  GPIO_InitStructure;


    GPIO_InitStructure.GPIO_Pin   = GPIO_Pin_5;             /* PB5 is used to read the status of the LM75 */
 8001ee2:	2320      	movs	r3, #32
 8001ee4:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode  = GPIO_Mode_IN_FLOATING;
 8001ee6:	2304      	movs	r3, #4
 8001ee8:	71fb      	strb	r3, [r7, #7]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001eea:	2303      	movs	r3, #3
 8001eec:	71bb      	strb	r3, [r7, #6]
    GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001eee:	1d3b      	adds	r3, r7, #4
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	4803      	ldr	r0, [pc, #12]	; (8001f00 <BSP_StatusInit+0x24>)
 8001ef4:	f7ff f8ce 	bl	8001094 <GPIO_Init>
}
 8001ef8:	bf00      	nop
 8001efa:	3708      	adds	r7, #8
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	40010c00 	.word	0x40010c00

08001f04 <BSP_IntDisAll>:
* Note(s)     : none.
*********************************************************************************************************
*/

void  BSP_IntDisAll (void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
    CPU_IntDis();
 8001f08:	f7fe f942 	bl	8000190 <CPU_IntDis>
}
 8001f0c:	bf00      	nop
 8001f0e:	bd80      	pop	{r7, pc}

08001f10 <BSP_IntEn>:
* Note(s)     : none.
*********************************************************************************************************
*/

void  BSP_IntEn (CPU_DATA  int_id)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
    if (int_id < BSP_INT_SRC_NBR) {
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2b43      	cmp	r3, #67	; 0x43
 8001f1c:	d806      	bhi.n	8001f2c <BSP_IntEn+0x1c>
        CPU_IntSrcEn(int_id + 16);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	3310      	adds	r3, #16
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	4618      	mov	r0, r3
 8001f28:	f000 fd42 	bl	80029b0 <CPU_IntSrcEn>
    }
}
 8001f2c:	bf00      	nop
 8001f2e:	3708      	adds	r7, #8
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}

08001f34 <BSP_IntVectSet>:
*********************************************************************************************************
*/

void  BSP_IntVectSet (CPU_DATA       int_id,
                      CPU_FNCT_VOID  isr)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	6039      	str	r1, [r7, #0]
    CPU_SR_ALLOC();
 8001f3e:	2300      	movs	r3, #0
 8001f40:	60fb      	str	r3, [r7, #12]


    if (int_id < BSP_INT_SRC_NBR) {
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2b43      	cmp	r3, #67	; 0x43
 8001f46:	d80a      	bhi.n	8001f5e <BSP_IntVectSet+0x2a>
        CPU_CRITICAL_ENTER();
 8001f48:	f7fe f926 	bl	8000198 <CPU_SR_Save>
 8001f4c:	60f8      	str	r0, [r7, #12]
        BSP_IntVectTbl[int_id] = isr;
 8001f4e:	4906      	ldr	r1, [pc, #24]	; (8001f68 <BSP_IntVectSet+0x34>)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	683a      	ldr	r2, [r7, #0]
 8001f54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        CPU_CRITICAL_EXIT();
 8001f58:	68f8      	ldr	r0, [r7, #12]
 8001f5a:	f7fe f921 	bl	80001a0 <CPU_SR_Restore>
    }
}
 8001f5e:	bf00      	nop
 8001f60:	3710      	adds	r7, #16
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	20000958 	.word	0x20000958

08001f6c <BSP_IntInit>:
* Note(s)     : none.
*********************************************************************************************************
*/

void  BSP_IntInit (void)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
    CPU_DATA  int_id;


    for (int_id = 0; int_id < BSP_INT_SRC_NBR; int_id++) {
 8001f72:	2300      	movs	r3, #0
 8001f74:	607b      	str	r3, [r7, #4]
 8001f76:	e006      	b.n	8001f86 <BSP_IntInit+0x1a>
        BSP_IntVectSet(int_id, BSP_IntHandlerDummy);
 8001f78:	4906      	ldr	r1, [pc, #24]	; (8001f94 <BSP_IntInit+0x28>)
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f7ff ffda 	bl	8001f34 <BSP_IntVectSet>
void  BSP_IntInit (void)
{
    CPU_DATA  int_id;


    for (int_id = 0; int_id < BSP_INT_SRC_NBR; int_id++) {
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	3301      	adds	r3, #1
 8001f84:	607b      	str	r3, [r7, #4]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2b43      	cmp	r3, #67	; 0x43
 8001f8a:	d9f5      	bls.n	8001f78 <BSP_IntInit+0xc>
        BSP_IntVectSet(int_id, BSP_IntHandlerDummy);
    }
}
 8001f8c:	bf00      	nop
 8001f8e:	3708      	adds	r7, #8
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	080023b1 	.word	0x080023b1

08001f98 <BSP_IntHandlerWWDG>:
*
* Note(s)     : none.
*********************************************************************************************************
*/

void  BSP_IntHandlerWWDG          (void)  { BSP_IntHandler(BSP_INT_ID_WWDG);            }
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	2000      	movs	r0, #0
 8001f9e:	f000 f9e3 	bl	8002368 <BSP_IntHandler>
 8001fa2:	bf00      	nop
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop

08001fa8 <BSP_IntHandlerPVD>:
void  BSP_IntHandlerPVD           (void)  { BSP_IntHandler(BSP_INT_ID_PVD);             }
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	2001      	movs	r0, #1
 8001fae:	f000 f9db 	bl	8002368 <BSP_IntHandler>
 8001fb2:	bf00      	nop
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop

08001fb8 <BSP_IntHandlerTAMPER>:
void  BSP_IntHandlerTAMPER        (void)  { BSP_IntHandler(BSP_INT_ID_TAMPER);          }
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	2002      	movs	r0, #2
 8001fbe:	f000 f9d3 	bl	8002368 <BSP_IntHandler>
 8001fc2:	bf00      	nop
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop

08001fc8 <BSP_IntHandlerRTC>:
void  BSP_IntHandlerRTC           (void)  { BSP_IntHandler(BSP_INT_ID_RTC);             }
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	2003      	movs	r0, #3
 8001fce:	f000 f9cb 	bl	8002368 <BSP_IntHandler>
 8001fd2:	bf00      	nop
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop

08001fd8 <BSP_IntHandlerFLASH>:
void  BSP_IntHandlerFLASH         (void)  { BSP_IntHandler(BSP_INT_ID_FLASH);           }
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	2004      	movs	r0, #4
 8001fde:	f000 f9c3 	bl	8002368 <BSP_IntHandler>
 8001fe2:	bf00      	nop
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop

08001fe8 <BSP_IntHandlerRCC>:
void  BSP_IntHandlerRCC           (void)  { BSP_IntHandler(BSP_INT_ID_RCC);             }
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	2005      	movs	r0, #5
 8001fee:	f000 f9bb 	bl	8002368 <BSP_IntHandler>
 8001ff2:	bf00      	nop
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop

08001ff8 <BSP_IntHandlerEXTI0>:
void  BSP_IntHandlerEXTI0         (void)  { BSP_IntHandler(BSP_INT_ID_EXTI0);           }
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	2006      	movs	r0, #6
 8001ffe:	f000 f9b3 	bl	8002368 <BSP_IntHandler>
 8002002:	bf00      	nop
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop

08002008 <BSP_IntHandlerEXTI1>:
void  BSP_IntHandlerEXTI1         (void)  { BSP_IntHandler(BSP_INT_ID_EXTI1);           }
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
 800200c:	2007      	movs	r0, #7
 800200e:	f000 f9ab 	bl	8002368 <BSP_IntHandler>
 8002012:	bf00      	nop
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop

08002018 <BSP_IntHandlerEXTI2>:
void  BSP_IntHandlerEXTI2         (void)  { BSP_IntHandler(BSP_INT_ID_EXTI2);           }
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
 800201c:	2008      	movs	r0, #8
 800201e:	f000 f9a3 	bl	8002368 <BSP_IntHandler>
 8002022:	bf00      	nop
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop

08002028 <BSP_IntHandlerEXTI3>:
void  BSP_IntHandlerEXTI3         (void)  { BSP_IntHandler(BSP_INT_ID_EXTI3);           }
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0
 800202c:	2009      	movs	r0, #9
 800202e:	f000 f99b 	bl	8002368 <BSP_IntHandler>
 8002032:	bf00      	nop
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop

08002038 <BSP_IntHandlerEXTI4>:
void  BSP_IntHandlerEXTI4         (void)  { BSP_IntHandler(BSP_INT_ID_EXTI4);           }
 8002038:	b580      	push	{r7, lr}
 800203a:	af00      	add	r7, sp, #0
 800203c:	200a      	movs	r0, #10
 800203e:	f000 f993 	bl	8002368 <BSP_IntHandler>
 8002042:	bf00      	nop
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop

08002048 <BSP_IntHandlerDMA1_CH1>:
void  BSP_IntHandlerDMA1_CH1      (void)  { BSP_IntHandler(BSP_INT_ID_DMA1_CH1);        }
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
 800204c:	200b      	movs	r0, #11
 800204e:	f000 f98b 	bl	8002368 <BSP_IntHandler>
 8002052:	bf00      	nop
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop

08002058 <BSP_IntHandlerDMA1_CH2>:
void  BSP_IntHandlerDMA1_CH2      (void)  { BSP_IntHandler(BSP_INT_ID_DMA1_CH2);        }
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
 800205c:	200c      	movs	r0, #12
 800205e:	f000 f983 	bl	8002368 <BSP_IntHandler>
 8002062:	bf00      	nop
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop

08002068 <BSP_IntHandlerDMA1_CH3>:
void  BSP_IntHandlerDMA1_CH3      (void)  { BSP_IntHandler(BSP_INT_ID_DMA1_CH3);        }
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
 800206c:	200d      	movs	r0, #13
 800206e:	f000 f97b 	bl	8002368 <BSP_IntHandler>
 8002072:	bf00      	nop
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop

08002078 <BSP_IntHandlerDMA1_CH4>:
void  BSP_IntHandlerDMA1_CH4      (void)  { BSP_IntHandler(BSP_INT_ID_DMA1_CH4);        }
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
 800207c:	200e      	movs	r0, #14
 800207e:	f000 f973 	bl	8002368 <BSP_IntHandler>
 8002082:	bf00      	nop
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop

08002088 <BSP_IntHandlerDMA1_CH5>:
void  BSP_IntHandlerDMA1_CH5      (void)  { BSP_IntHandler(BSP_INT_ID_DMA1_CH5);        }
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
 800208c:	200f      	movs	r0, #15
 800208e:	f000 f96b 	bl	8002368 <BSP_IntHandler>
 8002092:	bf00      	nop
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop

08002098 <BSP_IntHandlerDMA1_CH6>:
void  BSP_IntHandlerDMA1_CH6      (void)  { BSP_IntHandler(BSP_INT_ID_DMA1_CH6);        }
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
 800209c:	2010      	movs	r0, #16
 800209e:	f000 f963 	bl	8002368 <BSP_IntHandler>
 80020a2:	bf00      	nop
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop

080020a8 <BSP_IntHandlerDMA1_CH7>:
void  BSP_IntHandlerDMA1_CH7      (void)  { BSP_IntHandler(BSP_INT_ID_DMA1_CH7);        }
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	2011      	movs	r0, #17
 80020ae:	f000 f95b 	bl	8002368 <BSP_IntHandler>
 80020b2:	bf00      	nop
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop

080020b8 <BSP_IntHandlerADC1_2>:
void  BSP_IntHandlerADC1_2        (void)  { BSP_IntHandler(BSP_INT_ID_ADC1_2);          }
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	2012      	movs	r0, #18
 80020be:	f000 f953 	bl	8002368 <BSP_IntHandler>
 80020c2:	bf00      	nop
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop

080020c8 <BSP_IntHandlerCAN1_TX>:
void  BSP_IntHandlerCAN1_TX       (void)  { BSP_IntHandler(BSP_INT_ID_CAN1_TX);         }
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	2013      	movs	r0, #19
 80020ce:	f000 f94b 	bl	8002368 <BSP_IntHandler>
 80020d2:	bf00      	nop
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop

080020d8 <BSP_IntHandlerCAN1_RX0>:
void  BSP_IntHandlerCAN1_RX0      (void)  { BSP_IntHandler(BSP_INT_ID_CAN1_RX0);        }
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
 80020dc:	2014      	movs	r0, #20
 80020de:	f000 f943 	bl	8002368 <BSP_IntHandler>
 80020e2:	bf00      	nop
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop

080020e8 <BSP_IntHandlerCAN1_RX1>:
void  BSP_IntHandlerCAN1_RX1      (void)  { BSP_IntHandler(BSP_INT_ID_CAN1_RX1);        }
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	2015      	movs	r0, #21
 80020ee:	f000 f93b 	bl	8002368 <BSP_IntHandler>
 80020f2:	bf00      	nop
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop

080020f8 <BSP_IntHandlerCAN1_SCE>:
void  BSP_IntHandlerCAN1_SCE      (void)  { BSP_IntHandler(BSP_INT_ID_CAN1_SCE);        }
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	2016      	movs	r0, #22
 80020fe:	f000 f933 	bl	8002368 <BSP_IntHandler>
 8002102:	bf00      	nop
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop

08002108 <BSP_IntHandlerEXTI9_5>:
void  BSP_IntHandlerEXTI9_5       (void)  { BSP_IntHandler(BSP_INT_ID_EXTI9_5);         }
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0
 800210c:	2017      	movs	r0, #23
 800210e:	f000 f92b 	bl	8002368 <BSP_IntHandler>
 8002112:	bf00      	nop
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop

08002118 <BSP_IntHandlerTIM1_BRK>:
void  BSP_IntHandlerTIM1_BRK      (void)  { BSP_IntHandler(BSP_INT_ID_TIM1_BRK);        }
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
 800211c:	2018      	movs	r0, #24
 800211e:	f000 f923 	bl	8002368 <BSP_IntHandler>
 8002122:	bf00      	nop
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop

08002128 <BSP_IntHandlerTIM1_UP>:
void  BSP_IntHandlerTIM1_UP       (void)  { BSP_IntHandler(BSP_INT_ID_TIM1_UP);         }
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0
 800212c:	2019      	movs	r0, #25
 800212e:	f000 f91b 	bl	8002368 <BSP_IntHandler>
 8002132:	bf00      	nop
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop

08002138 <BSP_IntHandlerTIM1_TRG_COM>:
void  BSP_IntHandlerTIM1_TRG_COM  (void)  { BSP_IntHandler(BSP_INT_ID_TIM1_TRG_COM);    }
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
 800213c:	201a      	movs	r0, #26
 800213e:	f000 f913 	bl	8002368 <BSP_IntHandler>
 8002142:	bf00      	nop
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop

08002148 <BSP_IntHandlerTIM1_CC>:
void  BSP_IntHandlerTIM1_CC       (void)  { BSP_IntHandler(BSP_INT_ID_TIM1_CC);         }
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
 800214c:	201b      	movs	r0, #27
 800214e:	f000 f90b 	bl	8002368 <BSP_IntHandler>
 8002152:	bf00      	nop
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop

08002158 <BSP_IntHandlerTIM2>:
void  BSP_IntHandlerTIM2          (void)  { BSP_IntHandler(BSP_INT_ID_TIM2);            }
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
 800215c:	201c      	movs	r0, #28
 800215e:	f000 f903 	bl	8002368 <BSP_IntHandler>
 8002162:	bf00      	nop
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop

08002168 <BSP_IntHandlerTIM3>:
void  BSP_IntHandlerTIM3          (void)  { BSP_IntHandler(BSP_INT_ID_TIM3);            }
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
 800216c:	201d      	movs	r0, #29
 800216e:	f000 f8fb 	bl	8002368 <BSP_IntHandler>
 8002172:	bf00      	nop
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop

08002178 <BSP_IntHandlerTIM4>:
void  BSP_IntHandlerTIM4          (void)  { BSP_IntHandler(BSP_INT_ID_TIM4);            }
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
 800217c:	201e      	movs	r0, #30
 800217e:	f000 f8f3 	bl	8002368 <BSP_IntHandler>
 8002182:	bf00      	nop
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop

08002188 <BSP_IntHandlerI2C1_EV>:
void  BSP_IntHandlerI2C1_EV       (void)  { BSP_IntHandler(BSP_INT_ID_I2C1_EV);         }
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0
 800218c:	201f      	movs	r0, #31
 800218e:	f000 f8eb 	bl	8002368 <BSP_IntHandler>
 8002192:	bf00      	nop
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop

08002198 <BSP_IntHandlerI2C1_ER>:
void  BSP_IntHandlerI2C1_ER       (void)  { BSP_IntHandler(BSP_INT_ID_I2C1_ER);         }
 8002198:	b580      	push	{r7, lr}
 800219a:	af00      	add	r7, sp, #0
 800219c:	2020      	movs	r0, #32
 800219e:	f000 f8e3 	bl	8002368 <BSP_IntHandler>
 80021a2:	bf00      	nop
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop

080021a8 <BSP_IntHandlerI2C2_EV>:
void  BSP_IntHandlerI2C2_EV       (void)  { BSP_IntHandler(BSP_INT_ID_I2C2_EV);         }
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	2021      	movs	r0, #33	; 0x21
 80021ae:	f000 f8db 	bl	8002368 <BSP_IntHandler>
 80021b2:	bf00      	nop
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop

080021b8 <BSP_IntHandlerI2C2_ER>:
void  BSP_IntHandlerI2C2_ER       (void)  { BSP_IntHandler(BSP_INT_ID_I2C2_ER);         }
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	2022      	movs	r0, #34	; 0x22
 80021be:	f000 f8d3 	bl	8002368 <BSP_IntHandler>
 80021c2:	bf00      	nop
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop

080021c8 <BSP_IntHandlerSPI1>:
void  BSP_IntHandlerSPI1          (void)  { BSP_IntHandler(BSP_INT_ID_SPI1);            }
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	2023      	movs	r0, #35	; 0x23
 80021ce:	f000 f8cb 	bl	8002368 <BSP_IntHandler>
 80021d2:	bf00      	nop
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop

080021d8 <BSP_IntHandlerSPI2>:
void  BSP_IntHandlerSPI2          (void)  { BSP_IntHandler(BSP_INT_ID_SPI2);            }
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0
 80021dc:	2024      	movs	r0, #36	; 0x24
 80021de:	f000 f8c3 	bl	8002368 <BSP_IntHandler>
 80021e2:	bf00      	nop
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop

080021e8 <BSP_IntHandlerUSART1>:
void  BSP_IntHandlerUSART1        (void)  { BSP_IntHandler(BSP_INT_ID_USART1);          }
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	2025      	movs	r0, #37	; 0x25
 80021ee:	f000 f8bb 	bl	8002368 <BSP_IntHandler>
 80021f2:	bf00      	nop
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop

080021f8 <BSP_IntHandlerUSART2>:
void  BSP_IntHandlerUSART2        (void)  { BSP_IntHandler(BSP_INT_ID_USART2);          }
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	2026      	movs	r0, #38	; 0x26
 80021fe:	f000 f8b3 	bl	8002368 <BSP_IntHandler>
 8002202:	bf00      	nop
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop

08002208 <BSP_IntHandlerUSART3>:
void  BSP_IntHandlerUSART3        (void)  { BSP_IntHandler(BSP_INT_ID_USART3);          }
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
 800220c:	2027      	movs	r0, #39	; 0x27
 800220e:	f000 f8ab 	bl	8002368 <BSP_IntHandler>
 8002212:	bf00      	nop
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop

08002218 <BSP_IntHandlerEXTI15_10>:
void  BSP_IntHandlerEXTI15_10     (void)  { BSP_IntHandler(BSP_INT_ID_EXTI15_10);       }
 8002218:	b580      	push	{r7, lr}
 800221a:	af00      	add	r7, sp, #0
 800221c:	2028      	movs	r0, #40	; 0x28
 800221e:	f000 f8a3 	bl	8002368 <BSP_IntHandler>
 8002222:	bf00      	nop
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop

08002228 <BSP_IntHandlerRTCAlarm>:
void  BSP_IntHandlerRTCAlarm      (void)  { BSP_IntHandler(BSP_INT_ID_RTC_ALARM);       }
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
 800222c:	2029      	movs	r0, #41	; 0x29
 800222e:	f000 f89b 	bl	8002368 <BSP_IntHandler>
 8002232:	bf00      	nop
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop

08002238 <BSP_IntHandlerUSBWakeUp>:
void  BSP_IntHandlerUSBWakeUp     (void)  { BSP_IntHandler(BSP_INT_ID_OTG_FS_WKUP);     }
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
 800223c:	202a      	movs	r0, #42	; 0x2a
 800223e:	f000 f893 	bl	8002368 <BSP_IntHandler>
 8002242:	bf00      	nop
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop

08002248 <BSP_IntHandlerTIM5>:
void  BSP_IntHandlerTIM5          (void)  { BSP_IntHandler(BSP_INT_ID_TIM5);            }
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
 800224c:	2032      	movs	r0, #50	; 0x32
 800224e:	f000 f88b 	bl	8002368 <BSP_IntHandler>
 8002252:	bf00      	nop
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop

08002258 <BSP_IntHandlerSPI3>:
void  BSP_IntHandlerSPI3          (void)  { BSP_IntHandler(BSP_INT_ID_SPI3);            }
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0
 800225c:	2033      	movs	r0, #51	; 0x33
 800225e:	f000 f883 	bl	8002368 <BSP_IntHandler>
 8002262:	bf00      	nop
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop

08002268 <BSP_IntHandlerUSART4>:
void  BSP_IntHandlerUSART4        (void)  { BSP_IntHandler(BSP_INT_ID_USART4);          }
 8002268:	b580      	push	{r7, lr}
 800226a:	af00      	add	r7, sp, #0
 800226c:	2034      	movs	r0, #52	; 0x34
 800226e:	f000 f87b 	bl	8002368 <BSP_IntHandler>
 8002272:	bf00      	nop
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop

08002278 <BSP_IntHandlerUSART5>:
void  BSP_IntHandlerUSART5        (void)  { BSP_IntHandler(BSP_INT_ID_USART5);          }
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
 800227c:	2035      	movs	r0, #53	; 0x35
 800227e:	f000 f873 	bl	8002368 <BSP_IntHandler>
 8002282:	bf00      	nop
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop

08002288 <BSP_IntHandlerTIM6>:
void  BSP_IntHandlerTIM6          (void)  { BSP_IntHandler(BSP_INT_ID_TIM6);            }
 8002288:	b580      	push	{r7, lr}
 800228a:	af00      	add	r7, sp, #0
 800228c:	2036      	movs	r0, #54	; 0x36
 800228e:	f000 f86b 	bl	8002368 <BSP_IntHandler>
 8002292:	bf00      	nop
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop

08002298 <BSP_IntHandlerTIM7>:
void  BSP_IntHandlerTIM7          (void)  { BSP_IntHandler(BSP_INT_ID_TIM7);            }
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
 800229c:	2037      	movs	r0, #55	; 0x37
 800229e:	f000 f863 	bl	8002368 <BSP_IntHandler>
 80022a2:	bf00      	nop
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop

080022a8 <BSP_IntHandlerDMA2_CH1>:
void  BSP_IntHandlerDMA2_CH1      (void)  { BSP_IntHandler(BSP_INT_ID_DMA2_CH1);        }
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	2038      	movs	r0, #56	; 0x38
 80022ae:	f000 f85b 	bl	8002368 <BSP_IntHandler>
 80022b2:	bf00      	nop
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop

080022b8 <BSP_IntHandlerDMA2_CH2>:
void  BSP_IntHandlerDMA2_CH2      (void)  { BSP_IntHandler(BSP_INT_ID_DMA2_CH2);        }
 80022b8:	b580      	push	{r7, lr}
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	2039      	movs	r0, #57	; 0x39
 80022be:	f000 f853 	bl	8002368 <BSP_IntHandler>
 80022c2:	bf00      	nop
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop

080022c8 <BSP_IntHandlerDMA2_CH3>:
void  BSP_IntHandlerDMA2_CH3      (void)  { BSP_IntHandler(BSP_INT_ID_DMA2_CH3);        }
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	203a      	movs	r0, #58	; 0x3a
 80022ce:	f000 f84b 	bl	8002368 <BSP_IntHandler>
 80022d2:	bf00      	nop
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop

080022d8 <BSP_IntHandlerDMA2_CH4>:
void  BSP_IntHandlerDMA2_CH4      (void)  { BSP_IntHandler(BSP_INT_ID_DMA2_CH4);        }
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
 80022dc:	203b      	movs	r0, #59	; 0x3b
 80022de:	f000 f843 	bl	8002368 <BSP_IntHandler>
 80022e2:	bf00      	nop
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop

080022e8 <BSP_IntHandlerDMA2_CH5>:
void  BSP_IntHandlerDMA2_CH5      (void)  { BSP_IntHandler(BSP_INT_ID_DMA2_CH5);        }
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	203c      	movs	r0, #60	; 0x3c
 80022ee:	f000 f83b 	bl	8002368 <BSP_IntHandler>
 80022f2:	bf00      	nop
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop

080022f8 <BSP_IntHandlerETH>:
void  BSP_IntHandlerETH           (void)  { BSP_IntHandler(BSP_INT_ID_ETH);             }
 80022f8:	b580      	push	{r7, lr}
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	203d      	movs	r0, #61	; 0x3d
 80022fe:	f000 f833 	bl	8002368 <BSP_IntHandler>
 8002302:	bf00      	nop
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop

08002308 <BSP_IntHandlerETHWakeup>:
void  BSP_IntHandlerETHWakeup     (void)  { BSP_IntHandler(BSP_INT_ID_ETH_WKUP);        }
 8002308:	b580      	push	{r7, lr}
 800230a:	af00      	add	r7, sp, #0
 800230c:	203e      	movs	r0, #62	; 0x3e
 800230e:	f000 f82b 	bl	8002368 <BSP_IntHandler>
 8002312:	bf00      	nop
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop

08002318 <BSP_IntHandlerCAN2_TX>:
void  BSP_IntHandlerCAN2_TX       (void)  { BSP_IntHandler(BSP_INT_ID_CAN2_TX);         }
 8002318:	b580      	push	{r7, lr}
 800231a:	af00      	add	r7, sp, #0
 800231c:	203f      	movs	r0, #63	; 0x3f
 800231e:	f000 f823 	bl	8002368 <BSP_IntHandler>
 8002322:	bf00      	nop
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop

08002328 <BSP_IntHandlerCAN2_RX0>:
void  BSP_IntHandlerCAN2_RX0      (void)  { BSP_IntHandler(BSP_INT_ID_CAN2_RX0);        }
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0
 800232c:	2040      	movs	r0, #64	; 0x40
 800232e:	f000 f81b 	bl	8002368 <BSP_IntHandler>
 8002332:	bf00      	nop
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop

08002338 <BSP_IntHandlerCAN2_RX1>:
void  BSP_IntHandlerCAN2_RX1      (void)  { BSP_IntHandler(BSP_INT_ID_CAN2_RX1);        }
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
 800233c:	2041      	movs	r0, #65	; 0x41
 800233e:	f000 f813 	bl	8002368 <BSP_IntHandler>
 8002342:	bf00      	nop
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop

08002348 <BSP_IntHandlerCAN2_SCE>:
void  BSP_IntHandlerCAN2_SCE      (void)  { BSP_IntHandler(BSP_INT_ID_CAN2_SCE);        }
 8002348:	b580      	push	{r7, lr}
 800234a:	af00      	add	r7, sp, #0
 800234c:	2042      	movs	r0, #66	; 0x42
 800234e:	f000 f80b 	bl	8002368 <BSP_IntHandler>
 8002352:	bf00      	nop
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop

08002358 <BSP_IntHandlerOTG>:
void  BSP_IntHandlerOTG           (void)  { BSP_IntHandler(BSP_INT_ID_OTG_FS);          }
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0
 800235c:	2043      	movs	r0, #67	; 0x43
 800235e:	f000 f803 	bl	8002368 <BSP_IntHandler>
 8002362:	bf00      	nop
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop

08002368 <BSP_IntHandler>:
* Note(s)     : none.
*********************************************************************************************************
*/

static  void  BSP_IntHandler (CPU_DATA  int_id)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
    CPU_FNCT_VOID  isr;
    CPU_SR_ALLOC();
 8002370:	2300      	movs	r3, #0
 8002372:	60fb      	str	r3, [r7, #12]


    CPU_CRITICAL_ENTER();                                       /* Tell the OS that we are starting an ISR            */
 8002374:	f7fd ff10 	bl	8000198 <CPU_SR_Save>
 8002378:	60f8      	str	r0, [r7, #12]

    OSIntEnter();
 800237a:	f000 ff2b 	bl	80031d4 <OSIntEnter>

    CPU_CRITICAL_EXIT();
 800237e:	68f8      	ldr	r0, [r7, #12]
 8002380:	f7fd ff0e 	bl	80001a0 <CPU_SR_Restore>

    if (int_id < BSP_INT_SRC_NBR) {
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2b43      	cmp	r3, #67	; 0x43
 8002388:	d809      	bhi.n	800239e <BSP_IntHandler+0x36>
        isr = BSP_IntVectTbl[int_id];
 800238a:	4a08      	ldr	r2, [pc, #32]	; (80023ac <BSP_IntHandler+0x44>)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002392:	60bb      	str	r3, [r7, #8]
        if (isr != (CPU_FNCT_VOID)0) {
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d001      	beq.n	800239e <BSP_IntHandler+0x36>
            isr();
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	4798      	blx	r3
        }
    }

    OSIntExit();                                                /* Tell the OS that we are leaving the ISR            */
 800239e:	f000 ff31 	bl	8003204 <OSIntExit>
}
 80023a2:	bf00      	nop
 80023a4:	3710      	adds	r7, #16
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	20000958 	.word	0x20000958

080023b0 <BSP_IntHandlerDummy>:
* Note(s)     : none.
*********************************************************************************************************
*/

static  void  BSP_IntHandlerDummy (void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0

}
 80023b4:	bf00      	nop
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bc80      	pop	{r7}
 80023ba:	4770      	bx	lr

080023bc <BSP_PeriphEn>:
* Note(s)     : none.
*********************************************************************************************************
*/

void  BSP_PeriphEn (CPU_DATA  pwr_clk_id)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
    switch (pwr_clk_id) {
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2b5d      	cmp	r3, #93	; 0x5d
 80023c8:	f200 80e0 	bhi.w	800258c <BSP_PeriphEn+0x1d0>
 80023cc:	a201      	add	r2, pc, #4	; (adr r2, 80023d4 <BSP_PeriphEn+0x18>)
 80023ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023d2:	bf00      	nop
 80023d4:	0800254d 	.word	0x0800254d
 80023d8:	0800254d 	.word	0x0800254d
 80023dc:	0800254d 	.word	0x0800254d
 80023e0:	0800258d 	.word	0x0800258d
 80023e4:	0800254d 	.word	0x0800254d
 80023e8:	0800258d 	.word	0x0800258d
 80023ec:	0800254d 	.word	0x0800254d
 80023f0:	0800258d 	.word	0x0800258d
 80023f4:	0800258d 	.word	0x0800258d
 80023f8:	0800258d 	.word	0x0800258d
 80023fc:	0800258d 	.word	0x0800258d
 8002400:	0800258d 	.word	0x0800258d
 8002404:	0800254d 	.word	0x0800254d
 8002408:	0800258d 	.word	0x0800258d
 800240c:	0800254d 	.word	0x0800254d
 8002410:	0800254d 	.word	0x0800254d
 8002414:	0800258d 	.word	0x0800258d
 8002418:	0800258d 	.word	0x0800258d
 800241c:	0800258d 	.word	0x0800258d
 8002420:	0800258d 	.word	0x0800258d
 8002424:	0800258d 	.word	0x0800258d
 8002428:	0800258d 	.word	0x0800258d
 800242c:	0800258d 	.word	0x0800258d
 8002430:	0800258d 	.word	0x0800258d
 8002434:	0800258d 	.word	0x0800258d
 8002438:	0800258d 	.word	0x0800258d
 800243c:	0800258d 	.word	0x0800258d
 8002440:	0800258d 	.word	0x0800258d
 8002444:	0800258d 	.word	0x0800258d
 8002448:	0800258d 	.word	0x0800258d
 800244c:	0800258d 	.word	0x0800258d
 8002450:	0800258d 	.word	0x0800258d
 8002454:	08002561 	.word	0x08002561
 8002458:	0800258d 	.word	0x0800258d
 800245c:	08002561 	.word	0x08002561
 8002460:	08002561 	.word	0x08002561
 8002464:	08002561 	.word	0x08002561
 8002468:	08002561 	.word	0x08002561
 800246c:	08002561 	.word	0x08002561
 8002470:	0800258d 	.word	0x0800258d
 8002474:	0800258d 	.word	0x0800258d
 8002478:	08002561 	.word	0x08002561
 800247c:	08002561 	.word	0x08002561
 8002480:	08002561 	.word	0x08002561
 8002484:	08002561 	.word	0x08002561
 8002488:	0800258d 	.word	0x0800258d
 800248c:	08002561 	.word	0x08002561
 8002490:	0800258d 	.word	0x0800258d
 8002494:	0800258d 	.word	0x0800258d
 8002498:	0800258d 	.word	0x0800258d
 800249c:	0800258d 	.word	0x0800258d
 80024a0:	0800258d 	.word	0x0800258d
 80024a4:	0800258d 	.word	0x0800258d
 80024a8:	0800258d 	.word	0x0800258d
 80024ac:	0800258d 	.word	0x0800258d
 80024b0:	0800258d 	.word	0x0800258d
 80024b4:	0800258d 	.word	0x0800258d
 80024b8:	0800258d 	.word	0x0800258d
 80024bc:	0800258d 	.word	0x0800258d
 80024c0:	0800258d 	.word	0x0800258d
 80024c4:	0800258d 	.word	0x0800258d
 80024c8:	0800258d 	.word	0x0800258d
 80024cc:	0800258d 	.word	0x0800258d
 80024d0:	0800258d 	.word	0x0800258d
 80024d4:	08002577 	.word	0x08002577
 80024d8:	08002577 	.word	0x08002577
 80024dc:	08002577 	.word	0x08002577
 80024e0:	08002577 	.word	0x08002577
 80024e4:	08002577 	.word	0x08002577
 80024e8:	08002577 	.word	0x08002577
 80024ec:	0800258d 	.word	0x0800258d
 80024f0:	0800258d 	.word	0x0800258d
 80024f4:	0800258d 	.word	0x0800258d
 80024f8:	0800258d 	.word	0x0800258d
 80024fc:	0800258d 	.word	0x0800258d
 8002500:	08002577 	.word	0x08002577
 8002504:	0800258d 	.word	0x0800258d
 8002508:	0800258d 	.word	0x0800258d
 800250c:	08002577 	.word	0x08002577
 8002510:	08002577 	.word	0x08002577
 8002514:	0800258d 	.word	0x0800258d
 8002518:	08002577 	.word	0x08002577
 800251c:	08002577 	.word	0x08002577
 8002520:	08002577 	.word	0x08002577
 8002524:	08002577 	.word	0x08002577
 8002528:	08002577 	.word	0x08002577
 800252c:	08002577 	.word	0x08002577
 8002530:	0800258d 	.word	0x0800258d
 8002534:	0800258d 	.word	0x0800258d
 8002538:	08002577 	.word	0x08002577
 800253c:	08002577 	.word	0x08002577
 8002540:	08002577 	.word	0x08002577
 8002544:	08002577 	.word	0x08002577
 8002548:	08002577 	.word	0x08002577
        case BSP_PERIPH_ID_FLITF:
        case BSP_PERIPH_ID_CRC:
        case BSP_PERIPH_ID_OTGFS:
        case BSP_PERIPH_ID_ETHMAC:
        case BSP_PERIPH_ID_ETHMACTX:        
             BSP_PERIPH_REG_RCC_AHBENR |= DEF_BIT(pwr_clk_id);
 800254c:	4912      	ldr	r1, [pc, #72]	; (8002598 <BSP_PeriphEn+0x1dc>)
 800254e:	4b12      	ldr	r3, [pc, #72]	; (8002598 <BSP_PeriphEn+0x1dc>)
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	2001      	movs	r0, #1
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	fa00 f303 	lsl.w	r3, r0, r3
 800255a:	4313      	orrs	r3, r2
 800255c:	600b      	str	r3, [r1, #0]
             break;
 800255e:	e015      	b.n	800258c <BSP_PeriphEn+0x1d0>
        case BSP_PERIPH_ID_ADC1:
        case BSP_PERIPH_ID_ADC2:
        case BSP_PERIPH_ID_TIM1:
        case BSP_PERIPH_ID_SPI1:
        case BSP_PERIPH_ID_USART1:
             BSP_PERIPH_REG_RCC_APB2ENR |= DEF_BIT(pwr_clk_id - 32);
 8002560:	490e      	ldr	r1, [pc, #56]	; (800259c <BSP_PeriphEn+0x1e0>)
 8002562:	4b0e      	ldr	r3, [pc, #56]	; (800259c <BSP_PeriphEn+0x1e0>)
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	3b20      	subs	r3, #32
 800256a:	2001      	movs	r0, #1
 800256c:	fa00 f303 	lsl.w	r3, r0, r3
 8002570:	4313      	orrs	r3, r2
 8002572:	600b      	str	r3, [r1, #0]
             break;
 8002574:	e00a      	b.n	800258c <BSP_PeriphEn+0x1d0>
        case BSP_PERIPH_ID_CAN1:
        case BSP_PERIPH_ID_CAN2:        
        case BSP_PERIPH_ID_BKP:
        case BSP_PERIPH_ID_PWR:
        case BSP_PERIPH_ID_DAC:
             BSP_PERIPH_REG_RCC_APB1ENR |= DEF_BIT(pwr_clk_id - 64);
 8002576:	490a      	ldr	r1, [pc, #40]	; (80025a0 <BSP_PeriphEn+0x1e4>)
 8002578:	4b09      	ldr	r3, [pc, #36]	; (80025a0 <BSP_PeriphEn+0x1e4>)
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	3b40      	subs	r3, #64	; 0x40
 8002580:	2001      	movs	r0, #1
 8002582:	fa00 f303 	lsl.w	r3, r0, r3
 8002586:	4313      	orrs	r3, r2
 8002588:	600b      	str	r3, [r1, #0]
             break;
 800258a:	bf00      	nop
    }
}
 800258c:	bf00      	nop
 800258e:	370c      	adds	r7, #12
 8002590:	46bd      	mov	sp, r7
 8002592:	bc80      	pop	{r7}
 8002594:	4770      	bx	lr
 8002596:	bf00      	nop
 8002598:	40021014 	.word	0x40021014
 800259c:	40021018 	.word	0x40021018
 80025a0:	4002101c 	.word	0x4002101c

080025a4 <BSP_Ser_Init>:
* Note(s)     : none.
*********************************************************************************************************
*/

void  BSP_Ser_Init (CPU_INT32U  baud_rate)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b08a      	sub	sp, #40	; 0x28
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
    USART_InitTypeDef       usart_init;
    USART_ClockInitTypeDef  usart_clk_init;


                                                                /* ------------------ INIT OS OBJECTS ----------------- */
    BSP_OS_SemCreate(&BSP_SerTxWait,   0, "Serial Tx Wait");
 80025ac:	4a48      	ldr	r2, [pc, #288]	; (80026d0 <BSP_Ser_Init+0x12c>)
 80025ae:	2100      	movs	r1, #0
 80025b0:	4848      	ldr	r0, [pc, #288]	; (80026d4 <BSP_Ser_Init+0x130>)
 80025b2:	f000 f979 	bl	80028a8 <BSP_OS_SemCreate>
    BSP_OS_SemCreate(&BSP_SerRxWait,   0, "Serial Rx Wait");
 80025b6:	4a48      	ldr	r2, [pc, #288]	; (80026d8 <BSP_Ser_Init+0x134>)
 80025b8:	2100      	movs	r1, #0
 80025ba:	4848      	ldr	r0, [pc, #288]	; (80026dc <BSP_Ser_Init+0x138>)
 80025bc:	f000 f974 	bl	80028a8 <BSP_OS_SemCreate>
    BSP_OS_SemCreate(&BSP_SerLock,     1, "Serial Lock");
 80025c0:	4a47      	ldr	r2, [pc, #284]	; (80026e0 <BSP_Ser_Init+0x13c>)
 80025c2:	2101      	movs	r1, #1
 80025c4:	4847      	ldr	r0, [pc, #284]	; (80026e4 <BSP_Ser_Init+0x140>)
 80025c6:	f000 f96f 	bl	80028a8 <BSP_OS_SemCreate>
#if (BSP_CFG_SER_CMD_HISTORY_LEN > 0u)
    BSP_SerCmdHistory[0] = (CPU_CHAR)'\0';
#endif

                                                                /* ----------------- INIT USART STRUCT ---------------- */
    usart_init.USART_BaudRate            = baud_rate;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	613b      	str	r3, [r7, #16]
    usart_init.USART_WordLength          = USART_WordLength_8b;
 80025ce:	2300      	movs	r3, #0
 80025d0:	82bb      	strh	r3, [r7, #20]
    usart_init.USART_StopBits            = USART_StopBits_1;
 80025d2:	2300      	movs	r3, #0
 80025d4:	82fb      	strh	r3, [r7, #22]
    usart_init.USART_Parity              = USART_Parity_No ;
 80025d6:	2300      	movs	r3, #0
 80025d8:	833b      	strh	r3, [r7, #24]
    usart_init.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 80025da:	2300      	movs	r3, #0
 80025dc:	83bb      	strh	r3, [r7, #28]
    usart_init.USART_Mode                = USART_Mode_Rx | USART_Mode_Tx;
 80025de:	230c      	movs	r3, #12
 80025e0:	837b      	strh	r3, [r7, #26]

    usart_clk_init.USART_Clock           = USART_Clock_Disable;
 80025e2:	2300      	movs	r3, #0
 80025e4:	813b      	strh	r3, [r7, #8]
    usart_clk_init.USART_CPOL            = USART_CPOL_Low;
 80025e6:	2300      	movs	r3, #0
 80025e8:	817b      	strh	r3, [r7, #10]
    usart_clk_init.USART_CPHA            = USART_CPHA_2Edge;
 80025ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025ee:	81bb      	strh	r3, [r7, #12]
    usart_clk_init.USART_LastBit         = USART_LastBit_Disable;
 80025f0:	2300      	movs	r3, #0
 80025f2:	81fb      	strh	r3, [r7, #14]


    BSP_PeriphEn(BSP_PERIPH_ID_USART2);
 80025f4:	2051      	movs	r0, #81	; 0x51
 80025f6:	f7ff fee1 	bl	80023bc <BSP_PeriphEn>
    BSP_PeriphEn(BSP_PERIPH_ID_IOPD);
 80025fa:	2025      	movs	r0, #37	; 0x25
 80025fc:	f7ff fede 	bl	80023bc <BSP_PeriphEn>
    BSP_PeriphEn(BSP_PERIPH_ID_AFIO);
 8002600:	2020      	movs	r0, #32
 8002602:	f7ff fedb 	bl	80023bc <BSP_PeriphEn>
    GPIO_PinRemapConfig(GPIO_Remap_USART2, ENABLE);
 8002606:	2101      	movs	r1, #1
 8002608:	2008      	movs	r0, #8
 800260a:	f7fe fe27 	bl	800125c <GPIO_PinRemapConfig>
                                                                /* ----------------- SETUP USART2 GPIO ---------------- */
                                                                /* Configure GPIOD.5 as push-pull.                      */
    gpio_init.GPIO_Pin   = GPIO_Pin_5;
 800260e:	2320      	movs	r3, #32
 8002610:	843b      	strh	r3, [r7, #32]
    gpio_init.GPIO_Speed = GPIO_Speed_50MHz;
 8002612:	2303      	movs	r3, #3
 8002614:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    gpio_init.GPIO_Mode  = GPIO_Mode_AF_PP;
 8002618:	2318      	movs	r3, #24
 800261a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    GPIO_Init(GPIOD, &gpio_init);
 800261e:	f107 0320 	add.w	r3, r7, #32
 8002622:	4619      	mov	r1, r3
 8002624:	4830      	ldr	r0, [pc, #192]	; (80026e8 <BSP_Ser_Init+0x144>)
 8002626:	f7fe fd35 	bl	8001094 <GPIO_Init>

                                                                /* Configure GPIOD.6 as input floating.                 */
    gpio_init.GPIO_Pin   = GPIO_Pin_6;
 800262a:	2340      	movs	r3, #64	; 0x40
 800262c:	843b      	strh	r3, [r7, #32]
    gpio_init.GPIO_Mode  = GPIO_Mode_IN_FLOATING;
 800262e:	2304      	movs	r3, #4
 8002630:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    GPIO_Init(GPIOD, &gpio_init);
 8002634:	f107 0320 	add.w	r3, r7, #32
 8002638:	4619      	mov	r1, r3
 800263a:	482b      	ldr	r0, [pc, #172]	; (80026e8 <BSP_Ser_Init+0x144>)
 800263c:	f7fe fd2a 	bl	8001094 <GPIO_Init>

                                                                /* ------------------ SETUP USART2 -------------------- */
    USART_Init(USART2, &usart_init);
 8002640:	f107 0310 	add.w	r3, r7, #16
 8002644:	4619      	mov	r1, r3
 8002646:	4829      	ldr	r0, [pc, #164]	; (80026ec <BSP_Ser_Init+0x148>)
 8002648:	f7ff f988 	bl	800195c <USART_Init>
    USART_ClockInit(USART2, &usart_clk_init);
 800264c:	f107 0308 	add.w	r3, r7, #8
 8002650:	4619      	mov	r1, r3
 8002652:	4826      	ldr	r0, [pc, #152]	; (80026ec <BSP_Ser_Init+0x148>)
 8002654:	f7ff fa16 	bl	8001a84 <USART_ClockInit>
    USART_Cmd(USART2, ENABLE);
 8002658:	2101      	movs	r1, #1
 800265a:	4824      	ldr	r0, [pc, #144]	; (80026ec <BSP_Ser_Init+0x148>)
 800265c:	f7ff fa3e 	bl	8001adc <USART_Cmd>
    
    USART_ITConfig(USART2, USART_IT_TC, DISABLE);
 8002660:	2200      	movs	r2, #0
 8002662:	f240 6126 	movw	r1, #1574	; 0x626
 8002666:	4821      	ldr	r0, [pc, #132]	; (80026ec <BSP_Ser_Init+0x148>)
 8002668:	f7ff fa58 	bl	8001b1c <USART_ITConfig>
    USART_ITConfig(USART2, USART_IT_TXE, DISABLE);
 800266c:	2200      	movs	r2, #0
 800266e:	f240 7127 	movw	r1, #1831	; 0x727
 8002672:	481e      	ldr	r0, [pc, #120]	; (80026ec <BSP_Ser_Init+0x148>)
 8002674:	f7ff fa52 	bl	8001b1c <USART_ITConfig>
    tc_status  = USART_GetFlagStatus(USART2, USART_FLAG_TC);
 8002678:	2140      	movs	r1, #64	; 0x40
 800267a:	481c      	ldr	r0, [pc, #112]	; (80026ec <BSP_Ser_Init+0x148>)
 800267c:	f7ff fab8 	bl	8001bf0 <USART_GetFlagStatus>
 8002680:	4603      	mov	r3, r0
 8002682:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    
    while (tc_status == SET) {
 8002686:	e013      	b.n	80026b0 <BSP_Ser_Init+0x10c>
        USART_ClearITPendingBit(USART2, USART_IT_TC);
 8002688:	f240 6126 	movw	r1, #1574	; 0x626
 800268c:	4817      	ldr	r0, [pc, #92]	; (80026ec <BSP_Ser_Init+0x148>)
 800268e:	f7ff fadb 	bl	8001c48 <USART_ClearITPendingBit>
        USART_ClearFlag(USART2, USART_IT_TC);
 8002692:	f240 6126 	movw	r1, #1574	; 0x626
 8002696:	4815      	ldr	r0, [pc, #84]	; (80026ec <BSP_Ser_Init+0x148>)
 8002698:	f7ff fac6 	bl	8001c28 <USART_ClearFlag>
        BSP_OS_TimeDlyMs(10);
 800269c:	200a      	movs	r0, #10
 800269e:	f000 f95d 	bl	800295c <BSP_OS_TimeDlyMs>
        tc_status = USART_GetFlagStatus(USART2, USART_FLAG_TC);        
 80026a2:	2140      	movs	r1, #64	; 0x40
 80026a4:	4811      	ldr	r0, [pc, #68]	; (80026ec <BSP_Ser_Init+0x148>)
 80026a6:	f7ff faa3 	bl	8001bf0 <USART_GetFlagStatus>
 80026aa:	4603      	mov	r3, r0
 80026ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    
    USART_ITConfig(USART2, USART_IT_TC, DISABLE);
    USART_ITConfig(USART2, USART_IT_TXE, DISABLE);
    tc_status  = USART_GetFlagStatus(USART2, USART_FLAG_TC);
    
    while (tc_status == SET) {
 80026b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d0e7      	beq.n	8002688 <BSP_Ser_Init+0xe4>
        USART_ClearFlag(USART2, USART_IT_TC);
        BSP_OS_TimeDlyMs(10);
        tc_status = USART_GetFlagStatus(USART2, USART_FLAG_TC);        
    }
           
    BSP_IntVectSet(BSP_INT_ID_USART2, BSP_Ser_ISR_Handler);
 80026b8:	490d      	ldr	r1, [pc, #52]	; (80026f0 <BSP_Ser_Init+0x14c>)
 80026ba:	2026      	movs	r0, #38	; 0x26
 80026bc:	f7ff fc3a 	bl	8001f34 <BSP_IntVectSet>
    BSP_IntEn(BSP_INT_ID_USART2);
 80026c0:	2026      	movs	r0, #38	; 0x26
 80026c2:	f7ff fc25 	bl	8001f10 <BSP_IntEn>
}
 80026c6:	bf00      	nop
 80026c8:	3728      	adds	r7, #40	; 0x28
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	08007ab4 	.word	0x08007ab4
 80026d4:	20000a68 	.word	0x20000a68
 80026d8:	08007ac4 	.word	0x08007ac4
 80026dc:	20000a6c 	.word	0x20000a6c
 80026e0:	08007ad4 	.word	0x08007ad4
 80026e4:	20000a70 	.word	0x20000a70
 80026e8:	40011400 	.word	0x40011400
 80026ec:	40004400 	.word	0x40004400
 80026f0:	080026f5 	.word	0x080026f5

080026f4 <BSP_Ser_ISR_Handler>:
* Note(s)     : none.
*********************************************************************************************************
*/

void  BSP_Ser_ISR_Handler (void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
    FlagStatus tc_status;
    FlagStatus rxne_status;


    rxne_status = USART_GetFlagStatus(USART2, USART_FLAG_RXNE);
 80026fa:	2120      	movs	r1, #32
 80026fc:	4818      	ldr	r0, [pc, #96]	; (8002760 <BSP_Ser_ISR_Handler+0x6c>)
 80026fe:	f7ff fa77 	bl	8001bf0 <USART_GetFlagStatus>
 8002702:	4603      	mov	r3, r0
 8002704:	71fb      	strb	r3, [r7, #7]
    if (rxne_status == SET) {
 8002706:	79fb      	ldrb	r3, [r7, #7]
 8002708:	2b01      	cmp	r3, #1
 800270a:	d10e      	bne.n	800272a <BSP_Ser_ISR_Handler+0x36>
        BSP_SerRxData = USART_ReceiveData(USART2) & 0xFF;       /* Read one byte from the receive data register.      */
 800270c:	4814      	ldr	r0, [pc, #80]	; (8002760 <BSP_Ser_ISR_Handler+0x6c>)
 800270e:	f7ff fa5f 	bl	8001bd0 <USART_ReceiveData>
 8002712:	4603      	mov	r3, r0
 8002714:	b2da      	uxtb	r2, r3
 8002716:	4b13      	ldr	r3, [pc, #76]	; (8002764 <BSP_Ser_ISR_Handler+0x70>)
 8002718:	701a      	strb	r2, [r3, #0]
        USART_ClearITPendingBit(USART2, USART_IT_RXNE);         /* Clear the USART2 receive interrupt.                */
 800271a:	f240 5125 	movw	r1, #1317	; 0x525
 800271e:	4810      	ldr	r0, [pc, #64]	; (8002760 <BSP_Ser_ISR_Handler+0x6c>)
 8002720:	f7ff fa92 	bl	8001c48 <USART_ClearITPendingBit>
        BSP_OS_SemPost(&BSP_SerRxWait);                         /* Post to the sempahore                              */
 8002724:	4810      	ldr	r0, [pc, #64]	; (8002768 <BSP_Ser_ISR_Handler+0x74>)
 8002726:	f000 f903 	bl	8002930 <BSP_OS_SemPost>
    }

    tc_status = USART_GetFlagStatus(USART2, USART_FLAG_TC);
 800272a:	2140      	movs	r1, #64	; 0x40
 800272c:	480c      	ldr	r0, [pc, #48]	; (8002760 <BSP_Ser_ISR_Handler+0x6c>)
 800272e:	f7ff fa5f 	bl	8001bf0 <USART_GetFlagStatus>
 8002732:	4603      	mov	r3, r0
 8002734:	71bb      	strb	r3, [r7, #6]
    if (tc_status == SET) {
 8002736:	79bb      	ldrb	r3, [r7, #6]
 8002738:	2b01      	cmp	r3, #1
 800273a:	d10d      	bne.n	8002758 <BSP_Ser_ISR_Handler+0x64>
        USART_ITConfig(USART2, USART_IT_TC, DISABLE);
 800273c:	2200      	movs	r2, #0
 800273e:	f240 6126 	movw	r1, #1574	; 0x626
 8002742:	4807      	ldr	r0, [pc, #28]	; (8002760 <BSP_Ser_ISR_Handler+0x6c>)
 8002744:	f7ff f9ea 	bl	8001b1c <USART_ITConfig>
        USART_ClearITPendingBit(USART2, USART_IT_TC);           /* Clear the USART2 receive interrupt.                */
 8002748:	f240 6126 	movw	r1, #1574	; 0x626
 800274c:	4804      	ldr	r0, [pc, #16]	; (8002760 <BSP_Ser_ISR_Handler+0x6c>)
 800274e:	f7ff fa7b 	bl	8001c48 <USART_ClearITPendingBit>
        BSP_OS_SemPost(&BSP_SerTxWait);                         /* Post to the semaphore                              */
 8002752:	4806      	ldr	r0, [pc, #24]	; (800276c <BSP_Ser_ISR_Handler+0x78>)
 8002754:	f000 f8ec 	bl	8002930 <BSP_OS_SemPost>
    }
}
 8002758:	bf00      	nop
 800275a:	3708      	adds	r7, #8
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	40004400 	.word	0x40004400
 8002764:	20000a74 	.word	0x20000a74
 8002768:	20000a6c 	.word	0x20000a6c
 800276c:	20000a68 	.word	0x20000a68

08002770 <BSP_Ser_Printf>:
*                   be able fit into this string buffer or hence the output string will be truncated.
*********************************************************************************************************
*/

void  BSP_Ser_Printf (CPU_CHAR  *format, ...)
{
 8002770:	b40f      	push	{r0, r1, r2, r3}
 8002772:	b580      	push	{r7, lr}
 8002774:	b096      	sub	sp, #88	; 0x58
 8002776:	af00      	add	r7, sp, #0
    CPU_CHAR  buf_str[BSP_SER_PRINTF_STR_BUF_SIZE + 1u];
    va_list   v_args;


    va_start(v_args, format);
 8002778:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800277c:	603b      	str	r3, [r7, #0]
   (void)vsnprintf((char       *)&buf_str[0],
 800277e:	1d38      	adds	r0, r7, #4
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002784:	2151      	movs	r1, #81	; 0x51
 8002786:	f002 fab7 	bl	8004cf8 <vsnprintf>
                   (size_t      ) sizeof(buf_str),
                   (char const *) format,
                                  v_args);
    va_end(v_args);

    BSP_Ser_WrStr(buf_str);
 800278a:	1d3b      	adds	r3, r7, #4
 800278c:	4618      	mov	r0, r3
 800278e:	f000 f82b 	bl	80027e8 <BSP_Ser_WrStr>
}
 8002792:	bf00      	nop
 8002794:	3758      	adds	r7, #88	; 0x58
 8002796:	46bd      	mov	sp, r7
 8002798:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800279c:	b004      	add	sp, #16
 800279e:	4770      	bx	lr

080027a0 <BSP_Ser_WrByteUnlocked>:
* Note(s)     : (1) This function blocks until room is available in the UART for the byte to be sent.
*********************************************************************************************************
*/

void  BSP_Ser_WrByteUnlocked (CPU_INT08U c)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	4603      	mov	r3, r0
 80027a8:	71fb      	strb	r3, [r7, #7]
    USART_ITConfig(USART2, USART_IT_TC, ENABLE);
 80027aa:	2201      	movs	r2, #1
 80027ac:	f240 6126 	movw	r1, #1574	; 0x626
 80027b0:	480b      	ldr	r0, [pc, #44]	; (80027e0 <BSP_Ser_WrByteUnlocked+0x40>)
 80027b2:	f7ff f9b3 	bl	8001b1c <USART_ITConfig>
    USART_SendData(USART2, c);
 80027b6:	79fb      	ldrb	r3, [r7, #7]
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	4619      	mov	r1, r3
 80027bc:	4808      	ldr	r0, [pc, #32]	; (80027e0 <BSP_Ser_WrByteUnlocked+0x40>)
 80027be:	f7ff f9f5 	bl	8001bac <USART_SendData>
    BSP_OS_SemWait(&BSP_SerTxWait, 0);
 80027c2:	2100      	movs	r1, #0
 80027c4:	4807      	ldr	r0, [pc, #28]	; (80027e4 <BSP_Ser_WrByteUnlocked+0x44>)
 80027c6:	f000 f88f 	bl	80028e8 <BSP_OS_SemWait>
    USART_ITConfig(USART2, USART_IT_TC, DISABLE);
 80027ca:	2200      	movs	r2, #0
 80027cc:	f240 6126 	movw	r1, #1574	; 0x626
 80027d0:	4803      	ldr	r0, [pc, #12]	; (80027e0 <BSP_Ser_WrByteUnlocked+0x40>)
 80027d2:	f7ff f9a3 	bl	8001b1c <USART_ITConfig>
}
 80027d6:	bf00      	nop
 80027d8:	3708      	adds	r7, #8
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	40004400 	.word	0x40004400
 80027e4:	20000a68 	.word	0x20000a68

080027e8 <BSP_Ser_WrStr>:
* Note(s)     : none.
*********************************************************************************************************
*/

void  BSP_Ser_WrStr (CPU_CHAR  *p_str)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
    CPU_BOOLEAN  err;


    if (p_str == (CPU_CHAR *)0) {
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d026      	beq.n	8002844 <BSP_Ser_WrStr+0x5c>
        return;
    }


    err = BSP_OS_SemWait(&BSP_SerLock, 0);                      /* Obtain access to the serial interface              */
 80027f6:	2100      	movs	r1, #0
 80027f8:	4815      	ldr	r0, [pc, #84]	; (8002850 <BSP_Ser_WrStr+0x68>)
 80027fa:	f000 f875 	bl	80028e8 <BSP_OS_SemWait>
 80027fe:	4603      	mov	r3, r0
 8002800:	73fb      	strb	r3, [r7, #15]
    if (err != DEF_OK ) {
 8002802:	7bfb      	ldrb	r3, [r7, #15]
 8002804:	2b01      	cmp	r3, #1
 8002806:	d11f      	bne.n	8002848 <BSP_Ser_WrStr+0x60>
        return;
    }

    while ((*p_str) != (CPU_CHAR )0) {
 8002808:	e014      	b.n	8002834 <BSP_Ser_WrStr+0x4c>
        if (*p_str == ASCII_CHAR_LINE_FEED) {
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	2b0a      	cmp	r3, #10
 8002810:	d109      	bne.n	8002826 <BSP_Ser_WrStr+0x3e>
            BSP_Ser_WrByteUnlocked(ASCII_CHAR_CARRIAGE_RETURN);
 8002812:	200d      	movs	r0, #13
 8002814:	f7ff ffc4 	bl	80027a0 <BSP_Ser_WrByteUnlocked>
            BSP_Ser_WrByteUnlocked(ASCII_CHAR_LINE_FEED);
 8002818:	200a      	movs	r0, #10
 800281a:	f7ff ffc1 	bl	80027a0 <BSP_Ser_WrByteUnlocked>
            p_str++;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	3301      	adds	r3, #1
 8002822:	607b      	str	r3, [r7, #4]
 8002824:	e006      	b.n	8002834 <BSP_Ser_WrStr+0x4c>
        } else {
            BSP_Ser_WrByteUnlocked(*p_str++);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	1c5a      	adds	r2, r3, #1
 800282a:	607a      	str	r2, [r7, #4]
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	4618      	mov	r0, r3
 8002830:	f7ff ffb6 	bl	80027a0 <BSP_Ser_WrByteUnlocked>
    err = BSP_OS_SemWait(&BSP_SerLock, 0);                      /* Obtain access to the serial interface              */
    if (err != DEF_OK ) {
        return;
    }

    while ((*p_str) != (CPU_CHAR )0) {
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d1e6      	bne.n	800280a <BSP_Ser_WrStr+0x22>
        } else {
            BSP_Ser_WrByteUnlocked(*p_str++);
        }
    }

    BSP_OS_SemPost(&BSP_SerLock);                               /* Release access to the serial interface             */
 800283c:	4804      	ldr	r0, [pc, #16]	; (8002850 <BSP_Ser_WrStr+0x68>)
 800283e:	f000 f877 	bl	8002930 <BSP_OS_SemPost>
 8002842:	e002      	b.n	800284a <BSP_Ser_WrStr+0x62>
{
    CPU_BOOLEAN  err;


    if (p_str == (CPU_CHAR *)0) {
        return;
 8002844:	bf00      	nop
 8002846:	e000      	b.n	800284a <BSP_Ser_WrStr+0x62>
    }


    err = BSP_OS_SemWait(&BSP_SerLock, 0);                      /* Obtain access to the serial interface              */
    if (err != DEF_OK ) {
        return;
 8002848:	bf00      	nop
            BSP_Ser_WrByteUnlocked(*p_str++);
        }
    }

    BSP_OS_SemPost(&BSP_SerLock);                               /* Release access to the serial interface             */
}
 800284a:	3710      	adds	r7, #16
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}
 8002850:	20000a70 	.word	0x20000a70

08002854 <Reset_Handler>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002854:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002856:	e003      	b.n	8002860 <LoopCopyDataInit>

08002858 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002858:	4b0a      	ldr	r3, [pc, #40]	; (8002884 <LoopFillZerobss+0x10>)
	ldr	r3, [r3, r1]
 800285a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800285c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800285e:	3104      	adds	r1, #4

08002860 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002860:	4809      	ldr	r0, [pc, #36]	; (8002888 <LoopFillZerobss+0x14>)
	ldr	r3, =_edata
 8002862:	4b0a      	ldr	r3, [pc, #40]	; (800288c <LoopFillZerobss+0x18>)
	adds	r2, r0, r1
 8002864:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002866:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002868:	d3f6      	bcc.n	8002858 <CopyDataInit>
	ldr	r2, =_sbss
 800286a:	4a09      	ldr	r2, [pc, #36]	; (8002890 <LoopFillZerobss+0x1c>)
	b	LoopFillZerobss
 800286c:	e002      	b.n	8002874 <LoopFillZerobss>

0800286e <FillZerobss>:

/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800286e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002870:	f842 3b04 	str.w	r3, [r2], #4

08002874 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002874:	4b07      	ldr	r3, [pc, #28]	; (8002894 <LoopFillZerobss+0x20>)
	cmp	r2, r3
 8002876:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002878:	d3f9      	bcc.n	800286e <FillZerobss>

/* Call the clock system intitialization function.*/
  	@bl  SystemInit
/* Call static constructors */
    bl __libc_init_array
 800287a:	f002 f9eb 	bl	8004c54 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800287e:	f7fe fb21 	bl	8000ec4 <main>
	bx	lr
 8002882:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
 8002884:	08007e6c 	.word	0x08007e6c
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002888:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800288c:	2000053c 	.word	0x2000053c
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
 8002890:	2000053c 	.word	0x2000053c
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4

LoopFillZerobss:
	ldr	r3, = _ebss
 8002894:	20008c70 	.word	0x20008c70

08002898 <App_NMI_ISR>:
*
*******************************************************************************/

    .section	.text.App_NMI_ISR
App_NMI_ISR:
	b	App_NMI_ISR
 8002898:	e7fe      	b.n	8002898 <App_NMI_ISR>

0800289a <App_Fault_ISR>:
	.size	App_NMI_ISR, .-App_NMI_ISR


    .section	.text.App_Fault_ISR
App_Fault_ISR:
	b	App_Fault_ISR
 800289a:	e7fe      	b.n	800289a <App_Fault_ISR>

0800289c <App_MemFault_ISR>:
	.size	App_Fault_ISR, .-App_Fault_ISR


    .section	.text.App_MemFault_ISR
App_MemFault_ISR:
	b	App_MemFault_ISR
 800289c:	e7fe      	b.n	800289c <App_MemFault_ISR>

0800289e <App_BusFault_ISR>:
	.size	App_MemFault_ISR, .-App_MemFault_ISR


    .section	.text.App_BusFault_ISR
App_BusFault_ISR:
	b	App_BusFault_ISR
 800289e:	e7fe      	b.n	800289e <App_BusFault_ISR>

080028a0 <App_UsageFault_ISR>:
	.size	App_BusFault_ISR, .-App_BusFault_ISR


    .section	.text.App_UsageFault_ISR
App_UsageFault_ISR:
	b	App_UsageFault_ISR
 80028a0:	e7fe      	b.n	80028a0 <App_UsageFault_ISR>

080028a2 <App_Spurious_ISR>:
	.size	App_UsageFault_ISR, .-App_UsageFault_ISR

    .section	.text.App_Spurious_ISR
App_Spurious_ISR:
	b	App_Spurious_ISR
 80028a2:	e7fe      	b.n	80028a2 <App_Spurious_ISR>

080028a4 <App_Reserved_ISR>:
	.size	App_Spurious_ISR, .-App_Spurious_ISR


    .section	.text.App_Reserved_ISR
App_Reserved_ISR:
	b	App_Reserved_ISR
 80028a4:	e7fe      	b.n	80028a4 <App_Reserved_ISR>
	...

080028a8 <BSP_OS_SemCreate>:
*/

CPU_BOOLEAN  BSP_OS_SemCreate (BSP_OS_SEM       *p_sem,
                               BSP_OS_SEM_VAL    sem_val,
                               CPU_CHAR         *p_sem_name)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b086      	sub	sp, #24
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	460b      	mov	r3, r1
 80028b2:	607a      	str	r2, [r7, #4]
 80028b4:	817b      	strh	r3, [r7, #10]

#if (OS_EVENT_NAME_EN > 0)
    CPU_INT08U  err;
#endif
    
    p_event = OSSemCreate(sem_val);
 80028b6:	897b      	ldrh	r3, [r7, #10]
 80028b8:	4618      	mov	r0, r3
 80028ba:	f001 fbcd 	bl	8004058 <OSSemCreate>
 80028be:	6178      	str	r0, [r7, #20]
    
    if (p_event == (OS_EVENT *)0) {
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d101      	bne.n	80028ca <BSP_OS_SemCreate+0x22>
        return (DEF_FAIL);    
 80028c6:	2300      	movs	r3, #0
 80028c8:	e00a      	b.n	80028e0 <BSP_OS_SemCreate+0x38>
    }
    
    *p_sem = (BSP_OS_SEM)(p_event);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	697a      	ldr	r2, [r7, #20]
 80028ce:	601a      	str	r2, [r3, #0]
    
#if (OS_EVENT_NAME_EN > 0)
    OSEventNameSet((OS_EVENT *)p_event, 
 80028d0:	f107 0313 	add.w	r3, r7, #19
 80028d4:	461a      	mov	r2, r3
 80028d6:	6879      	ldr	r1, [r7, #4]
 80028d8:	6978      	ldr	r0, [r7, #20]
 80028da:	f000 fc31 	bl	8003140 <OSEventNameSet>
                   (INT8U    *)p_sem_name, 
                   (INT8U    *)&err);
#endif
    

    return (DEF_OK);
 80028de:	2301      	movs	r3, #1
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3718      	adds	r7, #24
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}

080028e8 <BSP_OS_SemWait>:
*********************************************************************************************************
*/

CPU_BOOLEAN  BSP_OS_SemWait (BSP_OS_SEM *p_sem,
                             CPU_INT32U  dly_ms)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	6039      	str	r1, [r7, #0]
    CPU_INT08U  err;
    CPU_INT32U  dly_ticks;
    

    dly_ticks  = ((dly_ms * DEF_TIME_NBR_mS_PER_SEC) / OS_TICKS_PER_SEC);
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80028f8:	fb02 f303 	mul.w	r3, r2, r3
 80028fc:	4a0b      	ldr	r2, [pc, #44]	; (800292c <BSP_OS_SemWait+0x44>)
 80028fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002902:	099b      	lsrs	r3, r3, #6
 8002904:	60fb      	str	r3, [r7, #12]
    
    OSSemPend((OS_EVENT   *)*p_sem,
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f107 020b 	add.w	r2, r7, #11
 800290e:	68f9      	ldr	r1, [r7, #12]
 8002910:	4618      	mov	r0, r3
 8002912:	f001 fbdd 	bl	80040d0 <OSSemPend>
              (CPU_INT32U  )dly_ticks,
              (CPU_INT08U *)&err);

    if (err != OS_ERR_NONE) {
 8002916:	7afb      	ldrb	r3, [r7, #11]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d001      	beq.n	8002920 <BSP_OS_SemWait+0x38>
       return (DEF_FAIL);
 800291c:	2300      	movs	r3, #0
 800291e:	e000      	b.n	8002922 <BSP_OS_SemWait+0x3a>
    }

    return (DEF_OK);
 8002920:	2301      	movs	r3, #1
}
 8002922:	4618      	mov	r0, r3
 8002924:	3710      	adds	r7, #16
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	10624dd3 	.word	0x10624dd3

08002930 <BSP_OS_SemPost>:
* Note(s)     : none.
*********************************************************************************************************
*/

CPU_BOOLEAN  BSP_OS_SemPost (BSP_OS_SEM * p_sem)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b084      	sub	sp, #16
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
    CPU_INT08U  err;
    
        
    err = OSSemPost((OS_EVENT *)*p_sem);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4618      	mov	r0, r3
 800293e:	f001 fc53 	bl	80041e8 <OSSemPost>
 8002942:	4603      	mov	r3, r0
 8002944:	73fb      	strb	r3, [r7, #15]
    
    if (err != OS_ERR_NONE) {
 8002946:	7bfb      	ldrb	r3, [r7, #15]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d001      	beq.n	8002950 <BSP_OS_SemPost+0x20>
        return (DEF_FAIL);
 800294c:	2300      	movs	r3, #0
 800294e:	e000      	b.n	8002952 <BSP_OS_SemPost+0x22>
    }

    return (DEF_OK);
 8002950:	2301      	movs	r3, #1
}
 8002952:	4618      	mov	r0, r3
 8002954:	3710      	adds	r7, #16
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop

0800295c <BSP_OS_TimeDlyMs>:
*               
*********************************************************************************************************
*/

void   BSP_OS_TimeDlyMs (CPU_INT32U  dly_ms)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b084      	sub	sp, #16
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
    CPU_INT16U  os_ms;
    CPU_INT08U  os_sec;
    

    if (dly_ms > 10000) {                                       /* Limit delays to 10 seconds.                        */
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f242 7210 	movw	r2, #10000	; 0x2710
 800296a:	4293      	cmp	r3, r2
 800296c:	d902      	bls.n	8002974 <BSP_OS_TimeDlyMs+0x18>
        dly_ms = 10000;
 800296e:	f242 7310 	movw	r3, #10000	; 0x2710
 8002972:	607b      	str	r3, [r7, #4]
    }

    os_sec = dly_ms / 1000;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	4a0d      	ldr	r2, [pc, #52]	; (80029ac <BSP_OS_TimeDlyMs+0x50>)
 8002978:	fba2 2303 	umull	r2, r3, r2, r3
 800297c:	099b      	lsrs	r3, r3, #6
 800297e:	73fb      	strb	r3, [r7, #15]
    os_ms  = dly_ms % 1000;
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	4b0a      	ldr	r3, [pc, #40]	; (80029ac <BSP_OS_TimeDlyMs+0x50>)
 8002984:	fba3 1302 	umull	r1, r3, r3, r2
 8002988:	099b      	lsrs	r3, r3, #6
 800298a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800298e:	fb01 f303 	mul.w	r3, r1, r3
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	81bb      	strh	r3, [r7, #12]

    OSTimeDlyHMSM(0, 0, os_sec, os_ms);    
 8002996:	89bb      	ldrh	r3, [r7, #12]
 8002998:	7bfa      	ldrb	r2, [r7, #15]
 800299a:	2100      	movs	r1, #0
 800299c:	2000      	movs	r0, #0
 800299e:	f001 ff51 	bl	8004844 <OSTimeDlyHMSM>
}
 80029a2:	bf00      	nop
 80029a4:	3710      	adds	r7, #16
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	10624dd3 	.word	0x10624dd3

080029b0 <CPU_IntSrcEn>:
*               (3) See 'CPU_IntSrcDis()  Note #3'.
*********************************************************************************************************
*/

void  CPU_IntSrcEn (CPU_INT08U  pos)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b084      	sub	sp, #16
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	4603      	mov	r3, r0
 80029b8:	71fb      	strb	r3, [r7, #7]
    CPU_INT08U  group;
    CPU_INT08U  nbr;
    CPU_INT08U  pos_max;
    CPU_SR_ALLOC();
 80029ba:	2300      	movs	r3, #0
 80029bc:	60fb      	str	r3, [r7, #12]


    switch (pos) {
 80029be:	79fb      	ldrb	r3, [r7, #7]
 80029c0:	2b0f      	cmp	r3, #15
 80029c2:	d857      	bhi.n	8002a74 <CPU_IntSrcEn+0xc4>
 80029c4:	a201      	add	r2, pc, #4	; (adr r2, 80029cc <CPU_IntSrcEn+0x1c>)
 80029c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029ca:	bf00      	nop
 80029cc:	08002add 	.word	0x08002add
 80029d0:	08002add 	.word	0x08002add
 80029d4:	08002add 	.word	0x08002add
 80029d8:	08002add 	.word	0x08002add
 80029dc:	08002a0d 	.word	0x08002a0d
 80029e0:	08002a27 	.word	0x08002a27
 80029e4:	08002a41 	.word	0x08002a41
 80029e8:	08002add 	.word	0x08002add
 80029ec:	08002add 	.word	0x08002add
 80029f0:	08002add 	.word	0x08002add
 80029f4:	08002add 	.word	0x08002add
 80029f8:	08002add 	.word	0x08002add
 80029fc:	08002add 	.word	0x08002add
 8002a00:	08002add 	.word	0x08002add
 8002a04:	08002add 	.word	0x08002add
 8002a08:	08002a5b 	.word	0x08002a5b
        case CPU_INT_DBGMON:                                    /* Debug monitor (see Note #2).                         */
        case CPU_INT_PENDSV:                                    /* PendSV (see Note #2).                                */
             break;

        case CPU_INT_MEM:                                       /* Memory management.                                   */
             CPU_CRITICAL_ENTER();
 8002a0c:	f7fd fbc4 	bl	8000198 <CPU_SR_Save>
 8002a10:	60f8      	str	r0, [r7, #12]
             CPU_REG_NVIC_SHCSR |= CPU_REG_NVIC_SHCSR_MEMFAULTENA;
 8002a12:	4a36      	ldr	r2, [pc, #216]	; (8002aec <CPU_IntSrcEn+0x13c>)
 8002a14:	4b35      	ldr	r3, [pc, #212]	; (8002aec <CPU_IntSrcEn+0x13c>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a1c:	6013      	str	r3, [r2, #0]
             CPU_CRITICAL_EXIT();
 8002a1e:	68f8      	ldr	r0, [r7, #12]
 8002a20:	f7fd fbbe 	bl	80001a0 <CPU_SR_Restore>
             break;
 8002a24:	e05d      	b.n	8002ae2 <CPU_IntSrcEn+0x132>

        case CPU_INT_BUSFAULT:                                  /* Bus fault.                                           */
             CPU_CRITICAL_ENTER();
 8002a26:	f7fd fbb7 	bl	8000198 <CPU_SR_Save>
 8002a2a:	60f8      	str	r0, [r7, #12]
             CPU_REG_NVIC_SHCSR |= CPU_REG_NVIC_SHCSR_BUSFAULTENA;
 8002a2c:	4a2f      	ldr	r2, [pc, #188]	; (8002aec <CPU_IntSrcEn+0x13c>)
 8002a2e:	4b2f      	ldr	r3, [pc, #188]	; (8002aec <CPU_IntSrcEn+0x13c>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a36:	6013      	str	r3, [r2, #0]
             CPU_CRITICAL_EXIT();
 8002a38:	68f8      	ldr	r0, [r7, #12]
 8002a3a:	f7fd fbb1 	bl	80001a0 <CPU_SR_Restore>
             break;
 8002a3e:	e050      	b.n	8002ae2 <CPU_IntSrcEn+0x132>

        case CPU_INT_USAGEFAULT:                                /* Usage fault.                                         */
             CPU_CRITICAL_ENTER();
 8002a40:	f7fd fbaa 	bl	8000198 <CPU_SR_Save>
 8002a44:	60f8      	str	r0, [r7, #12]
             CPU_REG_NVIC_SHCSR |= CPU_REG_NVIC_SHCSR_USGFAULTENA;
 8002a46:	4a29      	ldr	r2, [pc, #164]	; (8002aec <CPU_IntSrcEn+0x13c>)
 8002a48:	4b28      	ldr	r3, [pc, #160]	; (8002aec <CPU_IntSrcEn+0x13c>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a50:	6013      	str	r3, [r2, #0]
             CPU_CRITICAL_EXIT();
 8002a52:	68f8      	ldr	r0, [r7, #12]
 8002a54:	f7fd fba4 	bl	80001a0 <CPU_SR_Restore>
             break;
 8002a58:	e043      	b.n	8002ae2 <CPU_IntSrcEn+0x132>

        case CPU_INT_SYSTICK:                                   /* SysTick.                                             */
             CPU_CRITICAL_ENTER();
 8002a5a:	f7fd fb9d 	bl	8000198 <CPU_SR_Save>
 8002a5e:	60f8      	str	r0, [r7, #12]
             CPU_REG_NVIC_ST_CTRL |= CPU_REG_NVIC_ST_CTRL_ENABLE;
 8002a60:	4a23      	ldr	r2, [pc, #140]	; (8002af0 <CPU_IntSrcEn+0x140>)
 8002a62:	4b23      	ldr	r3, [pc, #140]	; (8002af0 <CPU_IntSrcEn+0x140>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f043 0301 	orr.w	r3, r3, #1
 8002a6a:	6013      	str	r3, [r2, #0]
             CPU_CRITICAL_EXIT();
 8002a6c:	68f8      	ldr	r0, [r7, #12]
 8002a6e:	f7fd fb97 	bl	80001a0 <CPU_SR_Restore>
             break;
 8002a72:	e036      	b.n	8002ae2 <CPU_IntSrcEn+0x132>


                                                                /* ---------------- EXTERNAL INTERRUPT ---------------- */
        default:
            pos_max = CPU_INT_SRC_POS_MAX;
 8002a74:	4b1f      	ldr	r3, [pc, #124]	; (8002af4 <CPU_IntSrcEn+0x144>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	3301      	adds	r3, #1
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	f003 031f 	and.w	r3, r3, #31
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	015b      	lsls	r3, r3, #5
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	3310      	adds	r3, #16
 8002a88:	72fb      	strb	r3, [r7, #11]
            if (pos < pos_max) {                                /* See Note #3.                                         */
 8002a8a:	79fa      	ldrb	r2, [r7, #7]
 8002a8c:	7afb      	ldrb	r3, [r7, #11]
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d226      	bcs.n	8002ae0 <CPU_IntSrcEn+0x130>
                 group = (pos - 16) / 32;
 8002a92:	79fb      	ldrb	r3, [r7, #7]
 8002a94:	3b10      	subs	r3, #16
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	da00      	bge.n	8002a9c <CPU_IntSrcEn+0xec>
 8002a9a:	331f      	adds	r3, #31
 8002a9c:	115b      	asrs	r3, r3, #5
 8002a9e:	72bb      	strb	r3, [r7, #10]
                 nbr   = (pos - 16) % 32;
 8002aa0:	79fb      	ldrb	r3, [r7, #7]
 8002aa2:	f1a3 0210 	sub.w	r2, r3, #16
 8002aa6:	4b14      	ldr	r3, [pc, #80]	; (8002af8 <CPU_IntSrcEn+0x148>)
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	da03      	bge.n	8002ab6 <CPU_IntSrcEn+0x106>
 8002aae:	3b01      	subs	r3, #1
 8002ab0:	f063 031f 	orn	r3, r3, #31
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	727b      	strb	r3, [r7, #9]

                 CPU_CRITICAL_ENTER();
 8002ab8:	f7fd fb6e 	bl	8000198 <CPU_SR_Save>
 8002abc:	60f8      	str	r0, [r7, #12]
                 CPU_REG_NVIC_SETEN(group) = DEF_BIT(nbr);
 8002abe:	7abb      	ldrb	r3, [r7, #10]
 8002ac0:	f103 2338 	add.w	r3, r3, #939538432	; 0x38003800
 8002ac4:	3340      	adds	r3, #64	; 0x40
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	4619      	mov	r1, r3
 8002aca:	7a7b      	ldrb	r3, [r7, #9]
 8002acc:	2201      	movs	r2, #1
 8002ace:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad2:	600b      	str	r3, [r1, #0]
                 CPU_CRITICAL_EXIT();
 8002ad4:	68f8      	ldr	r0, [r7, #12]
 8002ad6:	f7fd fb63 	bl	80001a0 <CPU_SR_Restore>
             }
             break;
 8002ada:	e001      	b.n	8002ae0 <CPU_IntSrcEn+0x130>
        case CPU_INT_RSVD_07:
        case CPU_INT_RSVD_08:
        case CPU_INT_RSVD_09:
        case CPU_INT_RSVD_10:
        case CPU_INT_RSVD_13:
             break;
 8002adc:	bf00      	nop
 8002ade:	e000      	b.n	8002ae2 <CPU_IntSrcEn+0x132>

                 CPU_CRITICAL_ENTER();
                 CPU_REG_NVIC_SETEN(group) = DEF_BIT(nbr);
                 CPU_CRITICAL_EXIT();
             }
             break;
 8002ae0:	bf00      	nop
    }
}
 8002ae2:	bf00      	nop
 8002ae4:	3710      	adds	r7, #16
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	e000ed24 	.word	0xe000ed24
 8002af0:	e000e010 	.word	0xe000e010
 8002af4:	e000e004 	.word	0xe000e004
 8002af8:	8000001f 	.word	0x8000001f

08002afc <CPU_Init>:
*                                                   & other CPU interrupts disabled time measurement functions
*********************************************************************************************************
*/

void  CPU_Init (void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	af00      	add	r7, sp, #0
    CPU_IntDisMeasInit();                                       /* See Note #3b.                                        */
#endif

                                                                /* ------------------ INIT CPU NAME ------------------- */
#if (CPU_CFG_NAME_EN == DEF_ENABLED)
     CPU_NameInit();
 8002b00:	f000 f818 	bl	8002b34 <CPU_NameInit>
#endif
}
 8002b04:	bf00      	nop
 8002b06:	bd80      	pop	{r7, pc}

08002b08 <CPU_NameClr>:
*********************************************************************************************************
*/

#if (CPU_CFG_NAME_EN == DEF_ENABLED)
void  CPU_NameClr (void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b082      	sub	sp, #8
 8002b0c:	af00      	add	r7, sp, #0
    CPU_SR_ALLOC();
 8002b0e:	2300      	movs	r3, #0
 8002b10:	607b      	str	r3, [r7, #4]


    CPU_CRITICAL_ENTER();
 8002b12:	f7fd fb41 	bl	8000198 <CPU_SR_Save>
 8002b16:	6078      	str	r0, [r7, #4]
    Mem_Clr((void     *)&CPU_Name[0],
 8002b18:	2110      	movs	r1, #16
 8002b1a:	4805      	ldr	r0, [pc, #20]	; (8002b30 <CPU_NameClr+0x28>)
 8002b1c:	f000 f876 	bl	8002c0c <Mem_Clr>
            (CPU_SIZE_T) CPU_CFG_NAME_SIZE);
    CPU_CRITICAL_EXIT();
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	f7fd fb3d 	bl	80001a0 <CPU_SR_Restore>
}
 8002b26:	bf00      	nop
 8002b28:	3708      	adds	r7, #8
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	20000ab4 	.word	0x20000ab4

08002b34 <CPU_NameInit>:
*********************************************************************************************************
*/

#if (CPU_CFG_NAME_EN == DEF_ENABLED)
static  void  CPU_NameInit (void)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	af00      	add	r7, sp, #0
    CPU_NameClr();
 8002b38:	f7ff ffe6 	bl	8002b08 <CPU_NameClr>
}
 8002b3c:	bf00      	nop
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <Math_Init>:
*                   as when srand() is first called with a seed value of 1".
*********************************************************************************************************
*/

void  Math_Init (void)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	af00      	add	r7, sp, #0
    Math_RandSetSeed((RAND_NBR)RAND_SEED_INIT_VAL);             /* See Note #2.                                         */
 8002b44:	2001      	movs	r0, #1
 8002b46:	f000 f803 	bl	8002b50 <Math_RandSetSeed>
}
 8002b4a:	bf00      	nop
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop

08002b50 <Math_RandSetSeed>:
*                   See also 'Math_Rand()  Note #1b'.
*********************************************************************************************************
*/

void  Math_RandSetSeed (RAND_NBR  seed)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
    CPU_SR_ALLOC();
 8002b58:	2300      	movs	r3, #0
 8002b5a:	60fb      	str	r3, [r7, #12]


    CPU_CRITICAL_ENTER();
 8002b5c:	f7fd fb1c 	bl	8000198 <CPU_SR_Save>
 8002b60:	60f8      	str	r0, [r7, #12]
    Math_RandSeedCur = seed;
 8002b62:	4a05      	ldr	r2, [pc, #20]	; (8002b78 <Math_RandSetSeed+0x28>)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6013      	str	r3, [r2, #0]
    CPU_CRITICAL_EXIT();
 8002b68:	68f8      	ldr	r0, [r7, #12]
 8002b6a:	f7fd fb19 	bl	80001a0 <CPU_SR_Restore>
}
 8002b6e:	bf00      	nop
 8002b70:	3710      	adds	r7, #16
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	20000ac4 	.word	0x20000ac4

08002b7c <Mem_Init>:
*                   (b) BEFORE product's application calls any memory library module function(s)
*********************************************************************************************************
*/

void  Mem_Init (void)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
#if (LIB_MEM_CFG_ALLOC_EN == DEF_ENABLED)
    MEM_POOL  *pmem_pool;

                                                                        /* --------- INIT MEM HEAP SEG / POOL --------- */
    pmem_pool                   = (MEM_POOL   *)&Mem_PoolHeap;
 8002b82:	4b1e      	ldr	r3, [pc, #120]	; (8002bfc <Mem_Init+0x80>)
 8002b84:	607b      	str	r3, [r7, #4]
    pmem_pool->Type             = (LIB_MEM_TYPE) LIB_MEM_TYPE_HEAP;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a1d      	ldr	r2, [pc, #116]	; (8002c00 <Mem_Init+0x84>)
 8002b8a:	601a      	str	r2, [r3, #0]
    pmem_pool->SegHeadPtr       = (MEM_POOL   *)&Mem_PoolHeap;          /* Heap seg head = heap seg.                    */
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	4a1b      	ldr	r2, [pc, #108]	; (8002bfc <Mem_Init+0x80>)
 8002b90:	605a      	str	r2, [r3, #4]
    pmem_pool->SegPrevPtr       = (MEM_POOL   *) 0;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	609a      	str	r2, [r3, #8]
    pmem_pool->SegNextPtr       = (MEM_POOL   *) 0;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	60da      	str	r2, [r3, #12]
    pmem_pool->PoolPrevPtr      = (MEM_POOL   *) 0;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	611a      	str	r2, [r3, #16]
    pmem_pool->PoolNextPtr      = (MEM_POOL   *) 0;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	615a      	str	r2, [r3, #20]
    pmem_pool->PoolAddrStart    = (void       *) 0;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2200      	movs	r2, #0
 8002bae:	619a      	str	r2, [r3, #24]
    pmem_pool->PoolAddrEnd      = (void       *) 0;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	61da      	str	r2, [r3, #28]
    pmem_pool->PoolPtrs         = (void      **) 0;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	621a      	str	r2, [r3, #32]
    pmem_pool->BlkSize          = (CPU_SIZE_T  ) 0u;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	631a      	str	r2, [r3, #48]	; 0x30
    pmem_pool->BlkNbr           = (CPU_SIZE_T  ) 0u;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	62da      	str	r2, [r3, #44]	; 0x2c
    pmem_pool->BlkIx            = (MEM_POOL_IX ) 0u;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	625a      	str	r2, [r3, #36]	; 0x24

#ifdef  LIB_MEM_CFG_HEAP_BASE_ADDR
    pmem_pool->SegAddr          = (void       *) LIB_MEM_CFG_HEAP_BASE_ADDR;
    pmem_pool->SegAddrNextAvail = (void       *) LIB_MEM_CFG_HEAP_BASE_ADDR;
#else
    pmem_pool->SegAddr          = (void       *)&Mem_Heap[0];
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a0c      	ldr	r2, [pc, #48]	; (8002c04 <Mem_Init+0x88>)
 8002bd2:	639a      	str	r2, [r3, #56]	; 0x38
    pmem_pool->SegAddrNextAvail = (void       *)&Mem_Heap[0];
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	4a0b      	ldr	r2, [pc, #44]	; (8002c04 <Mem_Init+0x88>)
 8002bd8:	63da      	str	r2, [r3, #60]	; 0x3c
#endif

    pmem_pool->SegSizeTot       = (CPU_SIZE_T  ) LIB_MEM_CFG_HEAP_SIZE;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f44f 42b8 	mov.w	r2, #23552	; 0x5c00
 8002be0:	641a      	str	r2, [r3, #64]	; 0x40
    pmem_pool->SegSizeRem       = (CPU_SIZE_T  ) LIB_MEM_CFG_HEAP_SIZE;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	f44f 42b8 	mov.w	r2, #23552	; 0x5c00
 8002be8:	645a      	str	r2, [r3, #68]	; 0x44

                                                                        /* ------------ INIT MEM POOL TBL ------------- */
    Mem_PoolTbl = &Mem_PoolHeap;
 8002bea:	4b07      	ldr	r3, [pc, #28]	; (8002c08 <Mem_Init+0x8c>)
 8002bec:	4a03      	ldr	r2, [pc, #12]	; (8002bfc <Mem_Init+0x80>)
 8002bee:	601a      	str	r2, [r3, #0]
#endif
}
 8002bf0:	bf00      	nop
 8002bf2:	370c      	adds	r7, #12
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bc80      	pop	{r7}
 8002bf8:	4770      	bx	lr
 8002bfa:	bf00      	nop
 8002bfc:	20000ac8 	.word	0x20000ac8
 8002c00:	50414548 	.word	0x50414548
 8002c04:	20000b10 	.word	0x20000b10
 8002c08:	20006710 	.word	0x20006710

08002c0c <Mem_Clr>:
*********************************************************************************************************
*/

void  Mem_Clr (void        *pmem,
               CPU_SIZE_T   size)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b082      	sub	sp, #8
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	6039      	str	r1, [r7, #0]
    Mem_Set(pmem,
 8002c16:	683a      	ldr	r2, [r7, #0]
 8002c18:	2100      	movs	r1, #0
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f000 f804 	bl	8002c28 <Mem_Set>
            0u,                                                 /* See Note #2.                                         */
            size);
}
 8002c20:	bf00      	nop
 8002c22:	3708      	adds	r7, #8
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <Mem_Set>:
*/

void  Mem_Set (void        *pmem,
               CPU_INT08U   data_val,
               CPU_SIZE_T   size)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b08b      	sub	sp, #44	; 0x2c
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	60f8      	str	r0, [r7, #12]
 8002c30:	460b      	mov	r3, r1
 8002c32:	607a      	str	r2, [r7, #4]
 8002c34:	72fb      	strb	r3, [r7, #11]
    CPU_DATA     mem_align_mod;
    CPU_DATA     i;


#if (LIB_MEM_CFG_ARG_CHK_EXT_EN == DEF_ENABLED)
    if (size < 1) {                                             /* See Note #1.                                         */
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d050      	beq.n	8002cde <Mem_Set+0xb6>
        return;
    }
    if (pmem == (void *)0) {
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d04f      	beq.n	8002ce2 <Mem_Set+0xba>
        return;
    }
#endif


    data_align = 0u;
 8002c42:	2300      	movs	r3, #0
 8002c44:	623b      	str	r3, [r7, #32]
    for (i = 0u; i < sizeof(CPU_ALIGN); i++) {                  /* Fill each data_align octet with data val.            */
 8002c46:	2300      	movs	r3, #0
 8002c48:	617b      	str	r3, [r7, #20]
 8002c4a:	e009      	b.n	8002c60 <Mem_Set+0x38>
        data_align <<=  DEF_OCTET_NBR_BITS;
 8002c4c:	6a3b      	ldr	r3, [r7, #32]
 8002c4e:	021b      	lsls	r3, r3, #8
 8002c50:	623b      	str	r3, [r7, #32]
        data_align  |= (CPU_ALIGN)data_val;
 8002c52:	7afb      	ldrb	r3, [r7, #11]
 8002c54:	6a3a      	ldr	r2, [r7, #32]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	623b      	str	r3, [r7, #32]
    }
#endif


    data_align = 0u;
    for (i = 0u; i < sizeof(CPU_ALIGN); i++) {                  /* Fill each data_align octet with data val.            */
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	3301      	adds	r3, #1
 8002c5e:	617b      	str	r3, [r7, #20]
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	2b03      	cmp	r3, #3
 8002c64:	d9f2      	bls.n	8002c4c <Mem_Set+0x24>
        data_align <<=  DEF_OCTET_NBR_BITS;
        data_align  |= (CPU_ALIGN)data_val;
    }

    size_rem      =  size;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	627b      	str	r3, [r7, #36]	; 0x24
    mem_align_mod = (CPU_INT08U)((CPU_ADDR)pmem % sizeof(CPU_ALIGN));   /* See Note #3.                                 */
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	f003 0303 	and.w	r3, r3, #3
 8002c70:	613b      	str	r3, [r7, #16]

    pmem_08 = (CPU_INT08U *)pmem;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	61bb      	str	r3, [r7, #24]
    if (mem_align_mod != 0u) {                                  /* If leading octets avail,                   ...       */
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d013      	beq.n	8002ca4 <Mem_Set+0x7c>
        i = mem_align_mod;
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	617b      	str	r3, [r7, #20]
        while ((size_rem > 0) &&                                /* ... start mem buf fill with leading octets ...       */
 8002c80:	e00a      	b.n	8002c98 <Mem_Set+0x70>
               (i        < sizeof(CPU_ALIGN ))) {               /* ... until next CPU_ALIGN word boundary.              */
           *pmem_08++ = data_val;
 8002c82:	69bb      	ldr	r3, [r7, #24]
 8002c84:	1c5a      	adds	r2, r3, #1
 8002c86:	61ba      	str	r2, [r7, #24]
 8002c88:	7afa      	ldrb	r2, [r7, #11]
 8002c8a:	701a      	strb	r2, [r3, #0]
            size_rem -= sizeof(CPU_INT08U);
 8002c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8e:	3b01      	subs	r3, #1
 8002c90:	627b      	str	r3, [r7, #36]	; 0x24
            i++;
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	3301      	adds	r3, #1
 8002c96:	617b      	str	r3, [r7, #20]
    mem_align_mod = (CPU_INT08U)((CPU_ADDR)pmem % sizeof(CPU_ALIGN));   /* See Note #3.                                 */

    pmem_08 = (CPU_INT08U *)pmem;
    if (mem_align_mod != 0u) {                                  /* If leading octets avail,                   ...       */
        i = mem_align_mod;
        while ((size_rem > 0) &&                                /* ... start mem buf fill with leading octets ...       */
 8002c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d002      	beq.n	8002ca4 <Mem_Set+0x7c>
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	2b03      	cmp	r3, #3
 8002ca2:	d9ee      	bls.n	8002c82 <Mem_Set+0x5a>
            size_rem -= sizeof(CPU_INT08U);
            i++;
        }
    }

    pmem_align = (CPU_ALIGN *)pmem_08;                          /* See Note #2a.                                        */
 8002ca4:	69bb      	ldr	r3, [r7, #24]
 8002ca6:	61fb      	str	r3, [r7, #28]
    while (size_rem >= sizeof(CPU_ALIGN)) {                     /* While mem buf aligned on CPU_ALIGN word boundaries,  */
 8002ca8:	e007      	b.n	8002cba <Mem_Set+0x92>
       *pmem_align++ = data_align;                              /* ... fill mem buf with    CPU_ALIGN-sized data.       */
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	1d1a      	adds	r2, r3, #4
 8002cae:	61fa      	str	r2, [r7, #28]
 8002cb0:	6a3a      	ldr	r2, [r7, #32]
 8002cb2:	601a      	str	r2, [r3, #0]
        size_rem    -= sizeof(CPU_ALIGN);
 8002cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb6:	3b04      	subs	r3, #4
 8002cb8:	627b      	str	r3, [r7, #36]	; 0x24
            i++;
        }
    }

    pmem_align = (CPU_ALIGN *)pmem_08;                          /* See Note #2a.                                        */
    while (size_rem >= sizeof(CPU_ALIGN)) {                     /* While mem buf aligned on CPU_ALIGN word boundaries,  */
 8002cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cbc:	2b03      	cmp	r3, #3
 8002cbe:	d8f4      	bhi.n	8002caa <Mem_Set+0x82>
       *pmem_align++ = data_align;                              /* ... fill mem buf with    CPU_ALIGN-sized data.       */
        size_rem    -= sizeof(CPU_ALIGN);
    }

    pmem_08 = (CPU_INT08U *)pmem_align;
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	61bb      	str	r3, [r7, #24]
    while (size_rem > 0) {                                      /* Finish mem buf fill with trailing octets.            */
 8002cc4:	e007      	b.n	8002cd6 <Mem_Set+0xae>
       *pmem_08++   = data_val;
 8002cc6:	69bb      	ldr	r3, [r7, #24]
 8002cc8:	1c5a      	adds	r2, r3, #1
 8002cca:	61ba      	str	r2, [r7, #24]
 8002ccc:	7afa      	ldrb	r2, [r7, #11]
 8002cce:	701a      	strb	r2, [r3, #0]
        size_rem   -= sizeof(CPU_INT08U);
 8002cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd2:	3b01      	subs	r3, #1
 8002cd4:	627b      	str	r3, [r7, #36]	; 0x24
       *pmem_align++ = data_align;                              /* ... fill mem buf with    CPU_ALIGN-sized data.       */
        size_rem    -= sizeof(CPU_ALIGN);
    }

    pmem_08 = (CPU_INT08U *)pmem_align;
    while (size_rem > 0) {                                      /* Finish mem buf fill with trailing octets.            */
 8002cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d1f4      	bne.n	8002cc6 <Mem_Set+0x9e>
 8002cdc:	e002      	b.n	8002ce4 <Mem_Set+0xbc>
    CPU_DATA     i;


#if (LIB_MEM_CFG_ARG_CHK_EXT_EN == DEF_ENABLED)
    if (size < 1) {                                             /* See Note #1.                                         */
        return;
 8002cde:	bf00      	nop
 8002ce0:	e000      	b.n	8002ce4 <Mem_Set+0xbc>
    }
    if (pmem == (void *)0) {
        return;
 8002ce2:	bf00      	nop
    pmem_08 = (CPU_INT08U *)pmem_align;
    while (size_rem > 0) {                                      /* Finish mem buf fill with trailing octets.            */
       *pmem_08++   = data_val;
        size_rem   -= sizeof(CPU_INT08U);
    }
}
 8002ce4:	372c      	adds	r7, #44	; 0x2c
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bc80      	pop	{r7}
 8002cea:	4770      	bx	lr

08002cec <OSInitHookBegin>:
* Note(s)    : 1) Interrupts should be disabled during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0u
void  OSInitHookBegin (void)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
    INT32U   size;
    OS_STK  *pstk;

                                                           /* Clear exception stack for stack checking.*/
    pstk = &OS_CPU_ExceptStk[0];
 8002cf2:	4b0d      	ldr	r3, [pc, #52]	; (8002d28 <OSInitHookBegin+0x3c>)
 8002cf4:	603b      	str	r3, [r7, #0]
    size = OS_CPU_EXCEPT_STK_SIZE;
 8002cf6:	2380      	movs	r3, #128	; 0x80
 8002cf8:	607b      	str	r3, [r7, #4]
    while (size > 0u) {
 8002cfa:	e007      	b.n	8002d0c <OSInitHookBegin+0x20>
        size--;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	3b01      	subs	r3, #1
 8002d00:	607b      	str	r3, [r7, #4]
       *pstk++ = (OS_STK)0;
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	1d1a      	adds	r2, r3, #4
 8002d06:	603a      	str	r2, [r7, #0]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	601a      	str	r2, [r3, #0]
    OS_STK  *pstk;

                                                           /* Clear exception stack for stack checking.*/
    pstk = &OS_CPU_ExceptStk[0];
    size = OS_CPU_EXCEPT_STK_SIZE;
    while (size > 0u) {
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d1f4      	bne.n	8002cfc <OSInitHookBegin+0x10>
        size--;
       *pstk++ = (OS_STK)0;
    }

    OS_CPU_ExceptStkBase = &OS_CPU_ExceptStk[OS_CPU_EXCEPT_STK_SIZE - 1u];
 8002d12:	4b06      	ldr	r3, [pc, #24]	; (8002d2c <OSInitHookBegin+0x40>)
 8002d14:	4a06      	ldr	r2, [pc, #24]	; (8002d30 <OSInitHookBegin+0x44>)
 8002d16:	601a      	str	r2, [r3, #0]

#if OS_TMR_EN > 0u
    OSTmrCtr = 0u;
 8002d18:	4b06      	ldr	r3, [pc, #24]	; (8002d34 <OSInitHookBegin+0x48>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	801a      	strh	r2, [r3, #0]
#endif
}
 8002d1e:	bf00      	nop
 8002d20:	370c      	adds	r7, #12
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bc80      	pop	{r7}
 8002d26:	4770      	bx	lr
 8002d28:	20006718 	.word	0x20006718
 8002d2c:	20006714 	.word	0x20006714
 8002d30:	20006914 	.word	0x20006914
 8002d34:	20000a76 	.word	0x20000a76

08002d38 <OSInitHookEnd>:
* Note(s)    : 1) Interrupts should be disabled during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0u
void  OSInitHookEnd (void)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	af00      	add	r7, sp, #0
}
 8002d3c:	bf00      	nop
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bc80      	pop	{r7}
 8002d42:	4770      	bx	lr

08002d44 <OSTaskCreateHook>:
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0u
void  OSTaskCreateHook (OS_TCB *ptcb)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
#if OS_APP_HOOKS_EN > 0u
    App_TaskCreateHook(ptcb);
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	f7fe f931 	bl	8000fb4 <App_TaskCreateHook>
#else
    (void)ptcb;                                  /* Prevent compiler warning                           */
#endif
}
 8002d52:	bf00      	nop
 8002d54:	3708      	adds	r7, #8
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop

08002d5c <OSTaskDelHook>:
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0u
void  OSTaskDelHook (OS_TCB *ptcb)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b082      	sub	sp, #8
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
#if OS_APP_HOOKS_EN > 0u
    App_TaskDelHook(ptcb);
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f7fe f92f 	bl	8000fc8 <App_TaskDelHook>
#else
    (void)ptcb;                                  /* Prevent compiler warning                           */
#endif
}
 8002d6a:	bf00      	nop
 8002d6c:	3708      	adds	r7, #8
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop

08002d74 <OSTaskIdleHook>:
* Note(s)    : 1) Interrupts are enabled during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0u
void  OSTaskIdleHook (void)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	af00      	add	r7, sp, #0
#if OS_APP_HOOKS_EN > 0u
    App_TaskIdleHook();
 8002d78:	f7fe f930 	bl	8000fdc <App_TaskIdleHook>
#endif
}
 8002d7c:	bf00      	nop
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <OSTaskReturnHook>:
*********************************************************************************************************
*/

#if OS_CPU_HOOKS_EN > 0u
void  OSTaskReturnHook (OS_TCB  *ptcb)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b082      	sub	sp, #8
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
#if OS_APP_HOOKS_EN > 0u
    App_TaskReturnHook(ptcb);
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	f7fe f933 	bl	8000ff4 <App_TaskReturnHook>
#else
    (void)ptcb;
#endif
}
 8002d8e:	bf00      	nop
 8002d90:	3708      	adds	r7, #8
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop

08002d98 <OSTaskStatHook>:
*********************************************************************************************************
*/

#if OS_CPU_HOOKS_EN > 0u
void  OSTaskStatHook (void)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	af00      	add	r7, sp, #0
#if OS_APP_HOOKS_EN > 0u
    App_TaskStatHook();
 8002d9c:	f7fe f924 	bl	8000fe8 <App_TaskStatHook>
#endif
}
 8002da0:	bf00      	nop
 8002da2:	bd80      	pop	{r7, pc}

08002da4 <OSTaskStkInit>:
*              2) All tasks run in Thread mode, using process stack.
*********************************************************************************************************
*/

OS_STK *OSTaskStkInit (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT16U opt)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b087      	sub	sp, #28
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	60f8      	str	r0, [r7, #12]
 8002dac:	60b9      	str	r1, [r7, #8]
 8002dae:	607a      	str	r2, [r7, #4]
 8002db0:	807b      	strh	r3, [r7, #2]
    OS_STK *stk;


    (void)opt;                                   /* 'opt' is not used, prevent warning                 */
    stk       = ptos;                            /* Load stack pointer                                 */
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	617b      	str	r3, [r7, #20]

                                                 /* Registers stacked as if auto-saved on exception    */
    *(stk)    = (INT32U)0x01000000uL;            /* xPSR                                               */
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002dbc:	601a      	str	r2, [r3, #0]
    *(--stk)  = (INT32U)task;                    /* Entry Point                                        */
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	3b04      	subs	r3, #4
 8002dc2:	617b      	str	r3, [r7, #20]
 8002dc4:	68fa      	ldr	r2, [r7, #12]
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	601a      	str	r2, [r3, #0]
    *(--stk)  = (INT32U)OS_TaskReturn;           /* R14 (LR)                                           */
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	3b04      	subs	r3, #4
 8002dce:	617b      	str	r3, [r7, #20]
 8002dd0:	4a31      	ldr	r2, [pc, #196]	; (8002e98 <OSTaskStkInit+0xf4>)
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	601a      	str	r2, [r3, #0]
    *(--stk)  = (INT32U)0x12121212uL;            /* R12                                                */
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	3b04      	subs	r3, #4
 8002dda:	617b      	str	r3, [r7, #20]
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	f04f 3212 	mov.w	r2, #303174162	; 0x12121212
 8002de2:	601a      	str	r2, [r3, #0]
    *(--stk)  = (INT32U)0x03030303uL;            /* R3                                                 */
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	3b04      	subs	r3, #4
 8002de8:	617b      	str	r3, [r7, #20]
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	f04f 3203 	mov.w	r2, #50529027	; 0x3030303
 8002df0:	601a      	str	r2, [r3, #0]
    *(--stk)  = (INT32U)0x02020202uL;            /* R2                                                 */
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	3b04      	subs	r3, #4
 8002df6:	617b      	str	r3, [r7, #20]
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	f04f 3202 	mov.w	r2, #33686018	; 0x2020202
 8002dfe:	601a      	str	r2, [r3, #0]
    *(--stk)  = (INT32U)0x01010101uL;            /* R1                                                 */
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	3b04      	subs	r3, #4
 8002e04:	617b      	str	r3, [r7, #20]
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
 8002e0c:	601a      	str	r2, [r3, #0]
    *(--stk)  = (INT32U)p_arg;                   /* R0 : argument                                      */
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	3b04      	subs	r3, #4
 8002e12:	617b      	str	r3, [r7, #20]
 8002e14:	68ba      	ldr	r2, [r7, #8]
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	601a      	str	r2, [r3, #0]

                                                 /* Remaining registers saved on process stack         */
    *(--stk)  = (INT32U)0x11111111uL;            /* R11                                                */
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	3b04      	subs	r3, #4
 8002e1e:	617b      	str	r3, [r7, #20]
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 8002e26:	601a      	str	r2, [r3, #0]
    *(--stk)  = (INT32U)0x10101010uL;            /* R10                                                */
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	3b04      	subs	r3, #4
 8002e2c:	617b      	str	r3, [r7, #20]
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	f04f 3210 	mov.w	r2, #269488144	; 0x10101010
 8002e34:	601a      	str	r2, [r3, #0]
    *(--stk)  = (INT32U)0x09090909uL;            /* R9                                                 */
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	3b04      	subs	r3, #4
 8002e3a:	617b      	str	r3, [r7, #20]
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	f04f 3209 	mov.w	r2, #151587081	; 0x9090909
 8002e42:	601a      	str	r2, [r3, #0]
    *(--stk)  = (INT32U)0x08080808uL;            /* R8                                                 */
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	3b04      	subs	r3, #4
 8002e48:	617b      	str	r3, [r7, #20]
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	f04f 3208 	mov.w	r2, #134744072	; 0x8080808
 8002e50:	601a      	str	r2, [r3, #0]
    *(--stk)  = (INT32U)0x07070707uL;            /* R7                                                 */
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	3b04      	subs	r3, #4
 8002e56:	617b      	str	r3, [r7, #20]
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	f04f 3207 	mov.w	r2, #117901063	; 0x7070707
 8002e5e:	601a      	str	r2, [r3, #0]
    *(--stk)  = (INT32U)0x06060606uL;            /* R6                                                 */
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	3b04      	subs	r3, #4
 8002e64:	617b      	str	r3, [r7, #20]
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	f04f 3206 	mov.w	r2, #101058054	; 0x6060606
 8002e6c:	601a      	str	r2, [r3, #0]
    *(--stk)  = (INT32U)0x05050505uL;            /* R5                                                 */
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	3b04      	subs	r3, #4
 8002e72:	617b      	str	r3, [r7, #20]
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	f04f 3205 	mov.w	r2, #84215045	; 0x5050505
 8002e7a:	601a      	str	r2, [r3, #0]
    *(--stk)  = (INT32U)0x04040404uL;            /* R4                                                 */
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	3b04      	subs	r3, #4
 8002e80:	617b      	str	r3, [r7, #20]
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	f04f 3204 	mov.w	r2, #67372036	; 0x4040404
 8002e88:	601a      	str	r2, [r3, #0]

    return (stk);
 8002e8a:	697b      	ldr	r3, [r7, #20]
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	371c      	adds	r7, #28
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bc80      	pop	{r7}
 8002e94:	4770      	bx	lr
 8002e96:	bf00      	nop
 8002e98:	08004741 	.word	0x08004741

08002e9c <OSTaskSwHook>:
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
#if (OS_CPU_HOOKS_EN > 0u) && (OS_TASK_SW_HOOK_EN > 0u)
void  OSTaskSwHook (void)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	af00      	add	r7, sp, #0
#if OS_APP_HOOKS_EN > 0u
    App_TaskSwHook();
 8002ea0:	f7fe f8b2 	bl	8001008 <App_TaskSwHook>
#endif
}
 8002ea4:	bf00      	nop
 8002ea6:	bd80      	pop	{r7, pc}

08002ea8 <OSTCBInitHook>:
* Note(s)    : 1) Interrupts may or may not be ENABLED during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0u
void  OSTCBInitHook (OS_TCB *ptcb)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
#if OS_APP_HOOKS_EN > 0u
    App_TCBInitHook(ptcb);
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f7fe f8af 	bl	8001014 <App_TCBInitHook>
#else
    (void)ptcb;                                  /* Prevent compiler warning                           */
#endif
}
 8002eb6:	bf00      	nop
 8002eb8:	3708      	adds	r7, #8
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop

08002ec0 <OSTimeTickHook>:
* Note(s)    : 1) Interrupts may or may not be ENABLED during this call.
*********************************************************************************************************
*/
#if (OS_CPU_HOOKS_EN > 0u) && (OS_TIME_TICK_HOOK_EN > 0u)
void  OSTimeTickHook (void)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	af00      	add	r7, sp, #0
#if OS_APP_HOOKS_EN > 0u
    App_TimeTickHook();
 8002ec4:	f7fe f8b0 	bl	8001028 <App_TimeTickHook>
#endif

#if OS_TMR_EN > 0u
    OSTmrCtr++;
 8002ec8:	4b08      	ldr	r3, [pc, #32]	; (8002eec <OSTimeTickHook+0x2c>)
 8002eca:	881b      	ldrh	r3, [r3, #0]
 8002ecc:	3301      	adds	r3, #1
 8002ece:	b29a      	uxth	r2, r3
 8002ed0:	4b06      	ldr	r3, [pc, #24]	; (8002eec <OSTimeTickHook+0x2c>)
 8002ed2:	801a      	strh	r2, [r3, #0]
    if (OSTmrCtr >= (OS_TICKS_PER_SEC / OS_TMR_CFG_TICKS_PER_SEC)) {
 8002ed4:	4b05      	ldr	r3, [pc, #20]	; (8002eec <OSTimeTickHook+0x2c>)
 8002ed6:	881b      	ldrh	r3, [r3, #0]
 8002ed8:	2b63      	cmp	r3, #99	; 0x63
 8002eda:	d904      	bls.n	8002ee6 <OSTimeTickHook+0x26>
        OSTmrCtr = 0;
 8002edc:	4b03      	ldr	r3, [pc, #12]	; (8002eec <OSTimeTickHook+0x2c>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	801a      	strh	r2, [r3, #0]
        OSTmrSignal();
 8002ee2:	f001 fcf5 	bl	80048d0 <OSTmrSignal>
    }
#endif
}
 8002ee6:	bf00      	nop
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	20000a76 	.word	0x20000a76

08002ef0 <OS_CPU_SysTickHandler>:
* Note(s)    : 1) This function MUST be placed on entry 15 of the Cortex-M3 vector table.
*********************************************************************************************************
*/

void  OS_CPU_SysTickHandler (void)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b082      	sub	sp, #8
 8002ef4:	af00      	add	r7, sp, #0
    OS_CPU_SR  cpu_sr;


    OS_ENTER_CRITICAL();                         /* Tell uC/OS-II that we are starting an ISR          */
 8002ef6:	f7fd f965 	bl	80001c4 <OS_CPU_SR_Save>
 8002efa:	6078      	str	r0, [r7, #4]
    OSIntNesting++;
 8002efc:	4b08      	ldr	r3, [pc, #32]	; (8002f20 <OS_CPU_SysTickHandler+0x30>)
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	3301      	adds	r3, #1
 8002f02:	b2da      	uxtb	r2, r3
 8002f04:	4b06      	ldr	r3, [pc, #24]	; (8002f20 <OS_CPU_SysTickHandler+0x30>)
 8002f06:	701a      	strb	r2, [r3, #0]
    OS_EXIT_CRITICAL();
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f7fd f95f 	bl	80001cc <OS_CPU_SR_Restore>

    OSTimeTick();                                /* Call uC/OS-II's OSTimeTick()                       */
 8002f0e:	f000 fa55 	bl	80033bc <OSTimeTick>

    OSIntExit();                                 /* Tell uC/OS-II that we are leaving the ISR          */
 8002f12:	f000 f977 	bl	8003204 <OSIntExit>
}
 8002f16:	bf00      	nop
 8002f18:	3708      	adds	r7, #8
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	20007154 	.word	0x20007154

08002f24 <OS_CPU_SysTickInit>:
* Note(s)    : 1) This function MUST be called after OSStart() & after processor initialization.
*********************************************************************************************************
*/

void  OS_CPU_SysTickInit (INT32U  cnts)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
    OS_CPU_CM3_NVIC_ST_RELOAD = cnts - 1u;
 8002f2c:	4a0b      	ldr	r2, [pc, #44]	; (8002f5c <OS_CPU_SysTickInit+0x38>)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	3b01      	subs	r3, #1
 8002f32:	6013      	str	r3, [r2, #0]
                                                 /* Set prio of SysTick handler to min prio.           */
    OS_CPU_CM3_NVIC_PRIO_ST   = OS_CPU_CM3_NVIC_PRIO_MIN;
 8002f34:	4b0a      	ldr	r3, [pc, #40]	; (8002f60 <OS_CPU_SysTickInit+0x3c>)
 8002f36:	22ff      	movs	r2, #255	; 0xff
 8002f38:	701a      	strb	r2, [r3, #0]
                                                 /* Enable timer.                                      */
    OS_CPU_CM3_NVIC_ST_CTRL  |= OS_CPU_CM3_NVIC_ST_CTRL_CLK_SRC | OS_CPU_CM3_NVIC_ST_CTRL_ENABLE;
 8002f3a:	4a0a      	ldr	r2, [pc, #40]	; (8002f64 <OS_CPU_SysTickInit+0x40>)
 8002f3c:	4b09      	ldr	r3, [pc, #36]	; (8002f64 <OS_CPU_SysTickInit+0x40>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f043 0305 	orr.w	r3, r3, #5
 8002f44:	6013      	str	r3, [r2, #0]
                                                 /* Enable timer interrupt.                            */
    OS_CPU_CM3_NVIC_ST_CTRL  |= OS_CPU_CM3_NVIC_ST_CTRL_INTEN;
 8002f46:	4a07      	ldr	r2, [pc, #28]	; (8002f64 <OS_CPU_SysTickInit+0x40>)
 8002f48:	4b06      	ldr	r3, [pc, #24]	; (8002f64 <OS_CPU_SysTickInit+0x40>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f043 0302 	orr.w	r3, r3, #2
 8002f50:	6013      	str	r3, [r2, #0]
}
 8002f52:	bf00      	nop
 8002f54:	370c      	adds	r7, #12
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bc80      	pop	{r7}
 8002f5a:	4770      	bx	lr
 8002f5c:	e000e014 	.word	0xe000e014
 8002f60:	e000ed23 	.word	0xe000ed23
 8002f64:	e000e010 	.word	0xe000e010

08002f68 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0u
void  OSDebugInit (void)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
    void  *ptemp;


    ptemp = (void *)&OSDebugEn;
 8002f6e:	4b3b      	ldr	r3, [pc, #236]	; (800305c <OSDebugInit+0xf4>)
 8002f70:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSEndiannessTest;
 8002f72:	4b3b      	ldr	r3, [pc, #236]	; (8003060 <OSDebugInit+0xf8>)
 8002f74:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSEventMax;
 8002f76:	4b3b      	ldr	r3, [pc, #236]	; (8003064 <OSDebugInit+0xfc>)
 8002f78:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSEventNameEn;
 8002f7a:	4b3b      	ldr	r3, [pc, #236]	; (8003068 <OSDebugInit+0x100>)
 8002f7c:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSEventEn;
 8002f7e:	4b3b      	ldr	r3, [pc, #236]	; (800306c <OSDebugInit+0x104>)
 8002f80:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSEventSize;
 8002f82:	4b3b      	ldr	r3, [pc, #236]	; (8003070 <OSDebugInit+0x108>)
 8002f84:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSEventTblSize;
 8002f86:	4b3b      	ldr	r3, [pc, #236]	; (8003074 <OSDebugInit+0x10c>)
 8002f88:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSEventMultiEn;
 8002f8a:	4b3b      	ldr	r3, [pc, #236]	; (8003078 <OSDebugInit+0x110>)
 8002f8c:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSFlagEn;
 8002f8e:	4b3b      	ldr	r3, [pc, #236]	; (800307c <OSDebugInit+0x114>)
 8002f90:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSFlagGrpSize;
 8002f92:	4b3b      	ldr	r3, [pc, #236]	; (8003080 <OSDebugInit+0x118>)
 8002f94:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSFlagNodeSize;
 8002f96:	4b3b      	ldr	r3, [pc, #236]	; (8003084 <OSDebugInit+0x11c>)
 8002f98:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSFlagWidth;
 8002f9a:	4b3b      	ldr	r3, [pc, #236]	; (8003088 <OSDebugInit+0x120>)
 8002f9c:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSFlagMax;
 8002f9e:	4b3b      	ldr	r3, [pc, #236]	; (800308c <OSDebugInit+0x124>)
 8002fa0:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSFlagNameEn;
 8002fa2:	4b3b      	ldr	r3, [pc, #236]	; (8003090 <OSDebugInit+0x128>)
 8002fa4:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSLowestPrio;
 8002fa6:	4b3b      	ldr	r3, [pc, #236]	; (8003094 <OSDebugInit+0x12c>)
 8002fa8:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSMboxEn;
 8002faa:	4b3b      	ldr	r3, [pc, #236]	; (8003098 <OSDebugInit+0x130>)
 8002fac:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSMemEn;
 8002fae:	4b3b      	ldr	r3, [pc, #236]	; (800309c <OSDebugInit+0x134>)
 8002fb0:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSMemMax;
 8002fb2:	4b3b      	ldr	r3, [pc, #236]	; (80030a0 <OSDebugInit+0x138>)
 8002fb4:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSMemNameEn;
 8002fb6:	4b3b      	ldr	r3, [pc, #236]	; (80030a4 <OSDebugInit+0x13c>)
 8002fb8:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSMemSize;
 8002fba:	4b3b      	ldr	r3, [pc, #236]	; (80030a8 <OSDebugInit+0x140>)
 8002fbc:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSMemTblSize;
 8002fbe:	4b3b      	ldr	r3, [pc, #236]	; (80030ac <OSDebugInit+0x144>)
 8002fc0:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSMutexEn;
 8002fc2:	4b3b      	ldr	r3, [pc, #236]	; (80030b0 <OSDebugInit+0x148>)
 8002fc4:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSPtrSize;
 8002fc6:	4b3b      	ldr	r3, [pc, #236]	; (80030b4 <OSDebugInit+0x14c>)
 8002fc8:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSQEn;
 8002fca:	4b3b      	ldr	r3, [pc, #236]	; (80030b8 <OSDebugInit+0x150>)
 8002fcc:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSQMax;
 8002fce:	4b3b      	ldr	r3, [pc, #236]	; (80030bc <OSDebugInit+0x154>)
 8002fd0:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSQSize;
 8002fd2:	4b3b      	ldr	r3, [pc, #236]	; (80030c0 <OSDebugInit+0x158>)
 8002fd4:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSRdyTblSize;
 8002fd6:	4b3b      	ldr	r3, [pc, #236]	; (80030c4 <OSDebugInit+0x15c>)
 8002fd8:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSSemEn;
 8002fda:	4b3b      	ldr	r3, [pc, #236]	; (80030c8 <OSDebugInit+0x160>)
 8002fdc:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSStkWidth;
 8002fde:	4b3b      	ldr	r3, [pc, #236]	; (80030cc <OSDebugInit+0x164>)
 8002fe0:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSTaskCreateEn;
 8002fe2:	4b3b      	ldr	r3, [pc, #236]	; (80030d0 <OSDebugInit+0x168>)
 8002fe4:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskCreateExtEn;
 8002fe6:	4b3b      	ldr	r3, [pc, #236]	; (80030d4 <OSDebugInit+0x16c>)
 8002fe8:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskDelEn;
 8002fea:	4b3b      	ldr	r3, [pc, #236]	; (80030d8 <OSDebugInit+0x170>)
 8002fec:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskIdleStkSize;
 8002fee:	4b3b      	ldr	r3, [pc, #236]	; (80030dc <OSDebugInit+0x174>)
 8002ff0:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskProfileEn;
 8002ff2:	4b3b      	ldr	r3, [pc, #236]	; (80030e0 <OSDebugInit+0x178>)
 8002ff4:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskMax;
 8002ff6:	4b3b      	ldr	r3, [pc, #236]	; (80030e4 <OSDebugInit+0x17c>)
 8002ff8:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskNameEn;
 8002ffa:	4b3b      	ldr	r3, [pc, #236]	; (80030e8 <OSDebugInit+0x180>)
 8002ffc:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskStatEn;
 8002ffe:	4b3b      	ldr	r3, [pc, #236]	; (80030ec <OSDebugInit+0x184>)
 8003000:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskStatStkSize;
 8003002:	4b3b      	ldr	r3, [pc, #236]	; (80030f0 <OSDebugInit+0x188>)
 8003004:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskStatStkChkEn;
 8003006:	4b3b      	ldr	r3, [pc, #236]	; (80030f4 <OSDebugInit+0x18c>)
 8003008:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTaskSwHookEn;
 800300a:	4b3b      	ldr	r3, [pc, #236]	; (80030f8 <OSDebugInit+0x190>)
 800300c:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSTCBPrioTblMax;
 800300e:	4b3b      	ldr	r3, [pc, #236]	; (80030fc <OSDebugInit+0x194>)
 8003010:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTCBSize;
 8003012:	4b3b      	ldr	r3, [pc, #236]	; (8003100 <OSDebugInit+0x198>)
 8003014:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSTicksPerSec;
 8003016:	4b3b      	ldr	r3, [pc, #236]	; (8003104 <OSDebugInit+0x19c>)
 8003018:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTimeTickHookEn;
 800301a:	4b3b      	ldr	r3, [pc, #236]	; (8003108 <OSDebugInit+0x1a0>)
 800301c:	607b      	str	r3, [r7, #4]

#if OS_TMR_EN > 0u
    ptemp = (void *)&OSTmrTbl[0];
 800301e:	4b3b      	ldr	r3, [pc, #236]	; (800310c <OSDebugInit+0x1a4>)
 8003020:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTmrWheelTbl[0];
 8003022:	4b3b      	ldr	r3, [pc, #236]	; (8003110 <OSDebugInit+0x1a8>)
 8003024:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSTmrEn;
 8003026:	4b3b      	ldr	r3, [pc, #236]	; (8003114 <OSDebugInit+0x1ac>)
 8003028:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTmrCfgMax;
 800302a:	4b3b      	ldr	r3, [pc, #236]	; (8003118 <OSDebugInit+0x1b0>)
 800302c:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTmrCfgNameEn;
 800302e:	4b3b      	ldr	r3, [pc, #236]	; (800311c <OSDebugInit+0x1b4>)
 8003030:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTmrCfgWheelSize;
 8003032:	4b3b      	ldr	r3, [pc, #236]	; (8003120 <OSDebugInit+0x1b8>)
 8003034:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTmrCfgTicksPerSec;
 8003036:	4b3b      	ldr	r3, [pc, #236]	; (8003124 <OSDebugInit+0x1bc>)
 8003038:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTmrSize;
 800303a:	4b3b      	ldr	r3, [pc, #236]	; (8003128 <OSDebugInit+0x1c0>)
 800303c:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTmrTblSize;
 800303e:	4b3b      	ldr	r3, [pc, #236]	; (800312c <OSDebugInit+0x1c4>)
 8003040:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSTmrWheelSize;
 8003042:	4b3b      	ldr	r3, [pc, #236]	; (8003130 <OSDebugInit+0x1c8>)
 8003044:	607b      	str	r3, [r7, #4]
    ptemp = (void *)&OSTmrWheelTblSize;
 8003046:	4b3b      	ldr	r3, [pc, #236]	; (8003134 <OSDebugInit+0x1cc>)
 8003048:	607b      	str	r3, [r7, #4]
#endif

    ptemp = (void *)&OSVersionNbr;
 800304a:	4b3b      	ldr	r3, [pc, #236]	; (8003138 <OSDebugInit+0x1d0>)
 800304c:	607b      	str	r3, [r7, #4]

    ptemp = (void *)&OSDataSize;
 800304e:	4b3b      	ldr	r3, [pc, #236]	; (800313c <OSDebugInit+0x1d4>)
 8003050:	607b      	str	r3, [r7, #4]

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
 8003052:	bf00      	nop
 8003054:	370c      	adds	r7, #12
 8003056:	46bd      	mov	sp, r7
 8003058:	bc80      	pop	{r7}
 800305a:	4770      	bx	lr
 800305c:	08007b64 	.word	0x08007b64
 8003060:	08007b68 	.word	0x08007b68
 8003064:	08007b6e 	.word	0x08007b6e
 8003068:	08007b70 	.word	0x08007b70
 800306c:	08007b6c 	.word	0x08007b6c
 8003070:	08007b72 	.word	0x08007b72
 8003074:	08007b74 	.word	0x08007b74
 8003078:	08007b76 	.word	0x08007b76
 800307c:	08007b78 	.word	0x08007b78
 8003080:	08007b7a 	.word	0x08007b7a
 8003084:	08007b7c 	.word	0x08007b7c
 8003088:	08007b7e 	.word	0x08007b7e
 800308c:	08007b80 	.word	0x08007b80
 8003090:	08007b82 	.word	0x08007b82
 8003094:	08007b84 	.word	0x08007b84
 8003098:	08007b86 	.word	0x08007b86
 800309c:	08007b88 	.word	0x08007b88
 80030a0:	08007b8a 	.word	0x08007b8a
 80030a4:	08007b8c 	.word	0x08007b8c
 80030a8:	08007b8e 	.word	0x08007b8e
 80030ac:	08007b90 	.word	0x08007b90
 80030b0:	08007b92 	.word	0x08007b92
 80030b4:	08007b94 	.word	0x08007b94
 80030b8:	08007b96 	.word	0x08007b96
 80030bc:	08007b98 	.word	0x08007b98
 80030c0:	08007b9a 	.word	0x08007b9a
 80030c4:	08007b9c 	.word	0x08007b9c
 80030c8:	08007b9e 	.word	0x08007b9e
 80030cc:	08007ba0 	.word	0x08007ba0
 80030d0:	08007ba2 	.word	0x08007ba2
 80030d4:	08007ba4 	.word	0x08007ba4
 80030d8:	08007ba6 	.word	0x08007ba6
 80030dc:	08007ba8 	.word	0x08007ba8
 80030e0:	08007baa 	.word	0x08007baa
 80030e4:	08007bac 	.word	0x08007bac
 80030e8:	08007bae 	.word	0x08007bae
 80030ec:	08007bb0 	.word	0x08007bb0
 80030f0:	08007bb2 	.word	0x08007bb2
 80030f4:	08007bb4 	.word	0x08007bb4
 80030f8:	08007bb6 	.word	0x08007bb6
 80030fc:	08007bb8 	.word	0x08007bb8
 8003100:	08007bba 	.word	0x08007bba
 8003104:	08007bbc 	.word	0x08007bbc
 8003108:	08007bbe 	.word	0x08007bbe
 800310c:	200069c0 	.word	0x200069c0
 8003110:	2000691c 	.word	0x2000691c
 8003114:	08007bc2 	.word	0x08007bc2
 8003118:	08007bc4 	.word	0x08007bc4
 800311c:	08007bc6 	.word	0x08007bc6
 8003120:	08007bc8 	.word	0x08007bc8
 8003124:	08007bca 	.word	0x08007bca
 8003128:	08007bcc 	.word	0x08007bcc
 800312c:	08007bce 	.word	0x08007bce
 8003130:	08007bd0 	.word	0x08007bd0
 8003134:	08007bd2 	.word	0x08007bd2
 8003138:	08007bc0 	.word	0x08007bc0
 800313c:	08007bd4 	.word	0x08007bd4

08003140 <OSEventNameSet>:

#if (OS_EVENT_EN) && (OS_EVENT_NAME_EN > 0u)
void  OSEventNameSet (OS_EVENT  *pevent,
                      INT8U     *pname,
                      INT8U     *perr)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b086      	sub	sp, #24
 8003144:	af00      	add	r7, sp, #0
 8003146:	60f8      	str	r0, [r7, #12]
 8003148:	60b9      	str	r1, [r7, #8]
 800314a:	607a      	str	r2, [r7, #4]
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
 800314c:	2300      	movs	r3, #0
 800314e:	617b      	str	r3, [r7, #20]
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
        *perr = OS_ERR_PNAME_NULL;
        return;
    }
#endif
    if (OSIntNesting > 0u) {                     /* See if trying to call from an ISR                  */
 8003150:	4b10      	ldr	r3, [pc, #64]	; (8003194 <OSEventNameSet+0x54>)
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d003      	beq.n	8003160 <OSEventNameSet+0x20>
        *perr = OS_ERR_NAME_SET_ISR;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2212      	movs	r2, #18
 800315c:	701a      	strb	r2, [r3, #0]
        return;
 800315e:	e015      	b.n	800318c <OSEventNameSet+0x4c>
    }
    switch (pevent->OSEventType) {
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	781b      	ldrb	r3, [r3, #0]
 8003164:	3b01      	subs	r3, #1
 8003166:	2b03      	cmp	r3, #3
 8003168:	d903      	bls.n	8003172 <OSEventNameSet+0x32>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2201      	movs	r2, #1
 800316e:	701a      	strb	r2, [r3, #0]
             return;
 8003170:	e00c      	b.n	800318c <OSEventNameSet+0x4c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
 8003172:	bf00      	nop

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
 8003174:	f7fd f826 	bl	80001c4 <OS_CPU_SR_Save>
 8003178:	6178      	str	r0, [r7, #20]
    pevent->OSEventName = pname;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	68ba      	ldr	r2, [r7, #8]
 800317e:	615a      	str	r2, [r3, #20]
    OS_EXIT_CRITICAL();
 8003180:	6978      	ldr	r0, [r7, #20]
 8003182:	f7fd f823 	bl	80001cc <OS_CPU_SR_Restore>
    *perr = OS_ERR_NONE;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	701a      	strb	r2, [r3, #0]
}
 800318c:	3718      	adds	r7, #24
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	20007154 	.word	0x20007154

08003198 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	af00      	add	r7, sp, #0
    OSInitHookBegin();                                           /* Call port specific initialization code   */
 800319c:	f7ff fda6 	bl	8002cec <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
 80031a0:	f000 fb52 	bl	8003848 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
 80031a4:	f000 fb8e 	bl	80038c4 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
 80031a8:	f000 fc08 	bl	80039bc <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
 80031ac:	f000 fb00 	bl	80037b0 <OS_InitEventList>

#if (OS_FLAG_EN > 0u) && (OS_MAX_FLAGS > 0u)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
 80031b0:	f000 fe66 	bl	8003e80 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0u) && (OS_MAX_MEM_PART > 0u)
    OS_MemInit();                                                /* Initialize the memory manager            */
 80031b4:	f000 fed4 	bl	8003f60 <OS_MemInit>
#endif

#if (OS_Q_EN > 0u) && (OS_MAX_QS > 0u)
    OS_QInit();                                                  /* Initialize the message queue structures  */
 80031b8:	f000 ff12 	bl	8003fe0 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
 80031bc:	f000 fbb2 	bl	8003924 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0u
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
 80031c0:	f000 fbd6 	bl	8003970 <OS_InitTaskStat>
#endif

#if OS_TMR_EN > 0u
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
 80031c4:	f001 fb96 	bl	80048f4 <OSTmr_Init>
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
 80031c8:	f7ff fdb6 	bl	8002d38 <OSInitHookEnd>

#if OS_DEBUG_EN > 0u
    OSDebugInit();
 80031cc:	f7ff fecc 	bl	8002f68 <OSDebugInit>
#endif
}
 80031d0:	bf00      	nop
 80031d2:	bd80      	pop	{r7, pc}

080031d4 <OSIntEnter>:
*                 OSIntEnter() is always called with interrupts disabled.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
 80031d4:	b480      	push	{r7}
 80031d6:	af00      	add	r7, sp, #0
    if (OSRunning == OS_TRUE) {
 80031d8:	4b08      	ldr	r3, [pc, #32]	; (80031fc <OSIntEnter+0x28>)
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d109      	bne.n	80031f4 <OSIntEnter+0x20>
        if (OSIntNesting < 255u) {
 80031e0:	4b07      	ldr	r3, [pc, #28]	; (8003200 <OSIntEnter+0x2c>)
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	2bff      	cmp	r3, #255	; 0xff
 80031e6:	d005      	beq.n	80031f4 <OSIntEnter+0x20>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
 80031e8:	4b05      	ldr	r3, [pc, #20]	; (8003200 <OSIntEnter+0x2c>)
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	3301      	adds	r3, #1
 80031ee:	b2da      	uxtb	r2, r3
 80031f0:	4b03      	ldr	r3, [pc, #12]	; (8003200 <OSIntEnter+0x2c>)
 80031f2:	701a      	strb	r2, [r3, #0]
        }
    }
}
 80031f4:	bf00      	nop
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bc80      	pop	{r7}
 80031fa:	4770      	bx	lr
 80031fc:	20006965 	.word	0x20006965
 8003200:	20007154 	.word	0x20007154

08003204 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b082      	sub	sp, #8
 8003208:	af00      	add	r7, sp, #0
#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0u;
 800320a:	2300      	movs	r3, #0
 800320c:	607b      	str	r3, [r7, #4]
#endif



    if (OSRunning == OS_TRUE) {
 800320e:	4b1e      	ldr	r3, [pc, #120]	; (8003288 <OSIntExit+0x84>)
 8003210:	781b      	ldrb	r3, [r3, #0]
 8003212:	2b01      	cmp	r3, #1
 8003214:	d133      	bne.n	800327e <OSIntExit+0x7a>
        OS_ENTER_CRITICAL();
 8003216:	f7fc ffd5 	bl	80001c4 <OS_CPU_SR_Save>
 800321a:	6078      	str	r0, [r7, #4]
        if (OSIntNesting > 0u) {                           /* Prevent OSIntNesting from wrapping       */
 800321c:	4b1b      	ldr	r3, [pc, #108]	; (800328c <OSIntExit+0x88>)
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d005      	beq.n	8003230 <OSIntExit+0x2c>
            OSIntNesting--;
 8003224:	4b19      	ldr	r3, [pc, #100]	; (800328c <OSIntExit+0x88>)
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	3b01      	subs	r3, #1
 800322a:	b2da      	uxtb	r2, r3
 800322c:	4b17      	ldr	r3, [pc, #92]	; (800328c <OSIntExit+0x88>)
 800322e:	701a      	strb	r2, [r3, #0]
        }
        if (OSIntNesting == 0u) {                          /* Reschedule only if all ISRs complete ... */
 8003230:	4b16      	ldr	r3, [pc, #88]	; (800328c <OSIntExit+0x88>)
 8003232:	781b      	ldrb	r3, [r3, #0]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d11f      	bne.n	8003278 <OSIntExit+0x74>
            if (OSLockNesting == 0u) {                     /* ... and not locked.                      */
 8003238:	4b15      	ldr	r3, [pc, #84]	; (8003290 <OSIntExit+0x8c>)
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d11b      	bne.n	8003278 <OSIntExit+0x74>
                OS_SchedNew();
 8003240:	f000 fc64 	bl	8003b0c <OS_SchedNew>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
 8003244:	4b13      	ldr	r3, [pc, #76]	; (8003294 <OSIntExit+0x90>)
 8003246:	781b      	ldrb	r3, [r3, #0]
 8003248:	461a      	mov	r2, r3
 800324a:	4b13      	ldr	r3, [pc, #76]	; (8003298 <OSIntExit+0x94>)
 800324c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003250:	4a12      	ldr	r2, [pc, #72]	; (800329c <OSIntExit+0x98>)
 8003252:	6013      	str	r3, [r2, #0]
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
 8003254:	4b0f      	ldr	r3, [pc, #60]	; (8003294 <OSIntExit+0x90>)
 8003256:	781a      	ldrb	r2, [r3, #0]
 8003258:	4b11      	ldr	r3, [pc, #68]	; (80032a0 <OSIntExit+0x9c>)
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	429a      	cmp	r2, r3
 800325e:	d00b      	beq.n	8003278 <OSIntExit+0x74>
#if OS_TASK_PROFILE_EN > 0u
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
 8003260:	4b0e      	ldr	r3, [pc, #56]	; (800329c <OSIntExit+0x98>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003266:	3201      	adds	r2, #1
 8003268:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
 800326a:	4b0e      	ldr	r3, [pc, #56]	; (80032a4 <OSIntExit+0xa0>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	3301      	adds	r3, #1
 8003270:	4a0c      	ldr	r2, [pc, #48]	; (80032a4 <OSIntExit+0xa0>)
 8003272:	6013      	str	r3, [r2, #0]
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
 8003274:	f7fc ffc5 	bl	8000202 <OSIntCtxSw>
                }
            }
        }
        OS_EXIT_CRITICAL();
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	f7fc ffa7 	bl	80001cc <OS_CPU_SR_Restore>
    }
}
 800327e:	bf00      	nop
 8003280:	3708      	adds	r7, #8
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	20006965 	.word	0x20006965
 800328c:	20007154 	.word	0x20007154
 8003290:	2000695c 	.word	0x2000695c
 8003294:	2000696e 	.word	0x2000696e
 8003298:	20008b68 	.word	0x20008b68
 800329c:	20006f3c 	.word	0x20006f3c
 80032a0:	20006c40 	.word	0x20006c40
 80032a4:	20006ec4 	.word	0x20006ec4

080032a8 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0u
void  OSSchedLock (void)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b082      	sub	sp, #8
 80032ac:	af00      	add	r7, sp, #0
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
 80032ae:	2300      	movs	r3, #0
 80032b0:	607b      	str	r3, [r7, #4]
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
 80032b2:	4b0e      	ldr	r3, [pc, #56]	; (80032ec <OSSchedLock+0x44>)
 80032b4:	781b      	ldrb	r3, [r3, #0]
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d113      	bne.n	80032e2 <OSSchedLock+0x3a>
        OS_ENTER_CRITICAL();
 80032ba:	f7fc ff83 	bl	80001c4 <OS_CPU_SR_Save>
 80032be:	6078      	str	r0, [r7, #4]
        if (OSIntNesting == 0u) {                /* Can't call from an ISR                             */
 80032c0:	4b0b      	ldr	r3, [pc, #44]	; (80032f0 <OSSchedLock+0x48>)
 80032c2:	781b      	ldrb	r3, [r3, #0]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d109      	bne.n	80032dc <OSSchedLock+0x34>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
 80032c8:	4b0a      	ldr	r3, [pc, #40]	; (80032f4 <OSSchedLock+0x4c>)
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	2bff      	cmp	r3, #255	; 0xff
 80032ce:	d005      	beq.n	80032dc <OSSchedLock+0x34>
                OSLockNesting++;                 /* Increment lock nesting level                       */
 80032d0:	4b08      	ldr	r3, [pc, #32]	; (80032f4 <OSSchedLock+0x4c>)
 80032d2:	781b      	ldrb	r3, [r3, #0]
 80032d4:	3301      	adds	r3, #1
 80032d6:	b2da      	uxtb	r2, r3
 80032d8:	4b06      	ldr	r3, [pc, #24]	; (80032f4 <OSSchedLock+0x4c>)
 80032da:	701a      	strb	r2, [r3, #0]
            }
        }
        OS_EXIT_CRITICAL();
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	f7fc ff75 	bl	80001cc <OS_CPU_SR_Restore>
    }
}
 80032e2:	bf00      	nop
 80032e4:	3708      	adds	r7, #8
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	20006965 	.word	0x20006965
 80032f0:	20007154 	.word	0x20007154
 80032f4:	2000695c 	.word	0x2000695c

080032f8 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0u
void  OSSchedUnlock (void)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0u;
 80032fe:	2300      	movs	r3, #0
 8003300:	607b      	str	r3, [r7, #4]
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
 8003302:	4b17      	ldr	r3, [pc, #92]	; (8003360 <OSSchedUnlock+0x68>)
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	2b01      	cmp	r3, #1
 8003308:	d125      	bne.n	8003356 <OSSchedUnlock+0x5e>
        OS_ENTER_CRITICAL();
 800330a:	f7fc ff5b 	bl	80001c4 <OS_CPU_SR_Save>
 800330e:	6078      	str	r0, [r7, #4]
        if (OSIntNesting == 0u) {                          /* Can't call from an ISR                   */
 8003310:	4b14      	ldr	r3, [pc, #80]	; (8003364 <OSSchedUnlock+0x6c>)
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d11b      	bne.n	8003350 <OSSchedUnlock+0x58>
            if (OSLockNesting > 0u) {                      /* Do not decrement if already 0            */
 8003318:	4b13      	ldr	r3, [pc, #76]	; (8003368 <OSSchedUnlock+0x70>)
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d013      	beq.n	8003348 <OSSchedUnlock+0x50>
                OSLockNesting--;                           /* Decrement lock nesting level             */
 8003320:	4b11      	ldr	r3, [pc, #68]	; (8003368 <OSSchedUnlock+0x70>)
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	3b01      	subs	r3, #1
 8003326:	b2da      	uxtb	r2, r3
 8003328:	4b0f      	ldr	r3, [pc, #60]	; (8003368 <OSSchedUnlock+0x70>)
 800332a:	701a      	strb	r2, [r3, #0]
                if (OSLockNesting == 0u) {                 /* See if scheduler is enabled              */
 800332c:	4b0e      	ldr	r3, [pc, #56]	; (8003368 <OSSchedUnlock+0x70>)
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d105      	bne.n	8003340 <OSSchedUnlock+0x48>
                    OS_EXIT_CRITICAL();
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f7fc ff49 	bl	80001cc <OS_CPU_SR_Restore>
                    OS_Sched();                            /* See if a HPT is ready                    */
 800333a:	f000 fba5 	bl	8003a88 <OS_Sched>
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
 800333e:	e00a      	b.n	8003356 <OSSchedUnlock+0x5e>
                OSLockNesting--;                           /* Decrement lock nesting level             */
                if (OSLockNesting == 0u) {                 /* See if scheduler is enabled              */
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
                } else {
                    OS_EXIT_CRITICAL();
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f7fc ff43 	bl	80001cc <OS_CPU_SR_Restore>
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
 8003346:	e006      	b.n	8003356 <OSSchedUnlock+0x5e>
                    OS_Sched();                            /* See if a HPT is ready                    */
                } else {
                    OS_EXIT_CRITICAL();
                }
            } else {
                OS_EXIT_CRITICAL();
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f7fc ff3f 	bl	80001cc <OS_CPU_SR_Restore>
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
 800334e:	e002      	b.n	8003356 <OSSchedUnlock+0x5e>
                }
            } else {
                OS_EXIT_CRITICAL();
            }
        } else {
            OS_EXIT_CRITICAL();
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	f7fc ff3b 	bl	80001cc <OS_CPU_SR_Restore>
        }
    }
}
 8003356:	bf00      	nop
 8003358:	3708      	adds	r7, #8
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	20006965 	.word	0x20006965
 8003364:	20007154 	.word	0x20007154
 8003368:	2000695c 	.word	0x2000695c

0800336c <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	af00      	add	r7, sp, #0
    if (OSRunning == OS_FALSE) {
 8003370:	4b0c      	ldr	r3, [pc, #48]	; (80033a4 <OSStart+0x38>)
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d113      	bne.n	80033a0 <OSStart+0x34>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
 8003378:	f000 fbc8 	bl	8003b0c <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
 800337c:	4b0a      	ldr	r3, [pc, #40]	; (80033a8 <OSStart+0x3c>)
 800337e:	781a      	ldrb	r2, [r3, #0]
 8003380:	4b0a      	ldr	r3, [pc, #40]	; (80033ac <OSStart+0x40>)
 8003382:	701a      	strb	r2, [r3, #0]
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
 8003384:	4b08      	ldr	r3, [pc, #32]	; (80033a8 <OSStart+0x3c>)
 8003386:	781b      	ldrb	r3, [r3, #0]
 8003388:	461a      	mov	r2, r3
 800338a:	4b09      	ldr	r3, [pc, #36]	; (80033b0 <OSStart+0x44>)
 800338c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003390:	4a08      	ldr	r2, [pc, #32]	; (80033b4 <OSStart+0x48>)
 8003392:	6013      	str	r3, [r2, #0]
        OSTCBCur      = OSTCBHighRdy;
 8003394:	4b07      	ldr	r3, [pc, #28]	; (80033b4 <OSStart+0x48>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a07      	ldr	r2, [pc, #28]	; (80033b8 <OSStart+0x4c>)
 800339a:	6013      	str	r3, [r2, #0]
        OSStartHighRdy();                            /* Execute target specific code to start task     */
 800339c:	f7fc ff19 	bl	80001d2 <OSStartHighRdy>
    }
}
 80033a0:	bf00      	nop
 80033a2:	bd80      	pop	{r7, pc}
 80033a4:	20006965 	.word	0x20006965
 80033a8:	2000696e 	.word	0x2000696e
 80033ac:	20006c40 	.word	0x20006c40
 80033b0:	20008b68 	.word	0x20008b68
 80033b4:	20006f3c 	.word	0x20006f3c
 80033b8:	20007158 	.word	0x20007158

080033bc <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b084      	sub	sp, #16
 80033c0:	af00      	add	r7, sp, #0
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0u
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0u;
 80033c2:	2300      	movs	r3, #0
 80033c4:	607b      	str	r3, [r7, #4]
#endif



#if OS_TIME_TICK_HOOK_EN > 0u
    OSTimeTickHook();                                      /* Call user definable hook                     */
 80033c6:	f7ff fd7b 	bl	8002ec0 <OSTimeTickHook>
#endif
#if OS_TIME_GET_SET_EN > 0u
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
 80033ca:	f7fc fefb 	bl	80001c4 <OS_CPU_SR_Save>
 80033ce:	6078      	str	r0, [r7, #4]
    OSTime++;
 80033d0:	4b43      	ldr	r3, [pc, #268]	; (80034e0 <OSTimeTick+0x124>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	3301      	adds	r3, #1
 80033d6:	4a42      	ldr	r2, [pc, #264]	; (80034e0 <OSTimeTick+0x124>)
 80033d8:	6013      	str	r3, [r2, #0]
    OS_EXIT_CRITICAL();
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f7fc fef6 	bl	80001cc <OS_CPU_SR_Restore>
#endif
    if (OSRunning == OS_TRUE) {
 80033e0:	4b40      	ldr	r3, [pc, #256]	; (80034e4 <OSTimeTick+0x128>)
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d177      	bne.n	80034d8 <OSTimeTick+0x11c>
#if OS_TICK_STEP_EN > 0u
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
 80033e8:	4b3f      	ldr	r3, [pc, #252]	; (80034e8 <OSTimeTick+0x12c>)
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d006      	beq.n	80033fe <OSTimeTick+0x42>
 80033f0:	2b02      	cmp	r3, #2
 80033f2:	d007      	beq.n	8003404 <OSTimeTick+0x48>
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d10b      	bne.n	8003410 <OSTimeTick+0x54>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
 80033f8:	2301      	movs	r3, #1
 80033fa:	72fb      	strb	r3, [r7, #11]
                 break;
 80033fc:	e00e      	b.n	800341c <OSTimeTick+0x60>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
 80033fe:	2300      	movs	r3, #0
 8003400:	72fb      	strb	r3, [r7, #11]
                 break;
 8003402:	e00b      	b.n	800341c <OSTimeTick+0x60>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
 8003404:	2301      	movs	r3, #1
 8003406:	72fb      	strb	r3, [r7, #11]
                 OSTickStepState = OS_TICK_STEP_WAIT;
 8003408:	4b37      	ldr	r3, [pc, #220]	; (80034e8 <OSTimeTick+0x12c>)
 800340a:	2201      	movs	r2, #1
 800340c:	701a      	strb	r2, [r3, #0]
                 break;
 800340e:	e005      	b.n	800341c <OSTimeTick+0x60>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
 8003410:	2301      	movs	r3, #1
 8003412:	72fb      	strb	r3, [r7, #11]
                 OSTickStepState = OS_TICK_STEP_DIS;
 8003414:	4b34      	ldr	r3, [pc, #208]	; (80034e8 <OSTimeTick+0x12c>)
 8003416:	2200      	movs	r2, #0
 8003418:	701a      	strb	r2, [r3, #0]
                 break;
 800341a:	bf00      	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
 800341c:	7afb      	ldrb	r3, [r7, #11]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d059      	beq.n	80034d6 <OSTimeTick+0x11a>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
 8003422:	4b32      	ldr	r3, [pc, #200]	; (80034ec <OSTimeTick+0x130>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	60fb      	str	r3, [r7, #12]
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
 8003428:	e04f      	b.n	80034ca <OSTimeTick+0x10e>
            OS_ENTER_CRITICAL();
 800342a:	f7fc fecb 	bl	80001c4 <OS_CPU_SR_Save>
 800342e:	6078      	str	r0, [r7, #4]
            if (ptcb->OSTCBDly != 0u) {                    /* No, Delayed or waiting for event with TO     */
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003434:	2b00      	cmp	r3, #0
 8003436:	d042      	beq.n	80034be <OSTimeTick+0x102>
                ptcb->OSTCBDly--;                          /* Decrement nbr of ticks to end of delay       */
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343c:	1e5a      	subs	r2, r3, #1
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	631a      	str	r2, [r3, #48]	; 0x30
                if (ptcb->OSTCBDly == 0u) {                /* Check for timeout                            */
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003446:	2b00      	cmp	r3, #0
 8003448:	d139      	bne.n	80034be <OSTimeTick+0x102>

                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003450:	f003 0337 	and.w	r3, r3, #55	; 0x37
 8003454:	2b00      	cmp	r3, #0
 8003456:	d00d      	beq.n	8003474 <OSTimeTick+0xb8>
                        ptcb->OSTCBStat  &= (INT8U)~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800345e:	f023 0337 	bic.w	r3, r3, #55	; 0x37
 8003462:	b2da      	uxtb	r2, r3
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2201      	movs	r2, #1
 800346e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003472:	e003      	b.n	800347c <OSTimeTick+0xc0>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2200      	movs	r2, #0
 8003478:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003482:	f003 0308 	and.w	r3, r3, #8
 8003486:	2b00      	cmp	r3, #0
 8003488:	d119      	bne.n	80034be <OSTimeTick+0x102>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
 8003490:	4b17      	ldr	r3, [pc, #92]	; (80034f0 <OSTimeTick+0x134>)
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	4313      	orrs	r3, r2
 8003496:	b2da      	uxtb	r2, r3
 8003498:	4b15      	ldr	r3, [pc, #84]	; (80034f0 <OSTimeTick+0x134>)
 800349a:	701a      	strb	r2, [r3, #0]
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80034a2:	4619      	mov	r1, r3
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80034aa:	461a      	mov	r2, r3
 80034ac:	4b11      	ldr	r3, [pc, #68]	; (80034f4 <OSTimeTick+0x138>)
 80034ae:	5c9a      	ldrb	r2, [r3, r2]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80034b6:	4313      	orrs	r3, r2
 80034b8:	b2da      	uxtb	r2, r3
 80034ba:	4b0e      	ldr	r3, [pc, #56]	; (80034f4 <OSTimeTick+0x138>)
 80034bc:	545a      	strb	r2, [r3, r1]
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	695b      	ldr	r3, [r3, #20]
 80034c2:	60fb      	str	r3, [r7, #12]
            OS_EXIT_CRITICAL();
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f7fc fe81 	bl	80001cc <OS_CPU_SR_Restore>
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80034d0:	2b3f      	cmp	r3, #63	; 0x3f
 80034d2:	d1aa      	bne.n	800342a <OSTimeTick+0x6e>
 80034d4:	e000      	b.n	80034d8 <OSTimeTick+0x11c>
                 step            = OS_TRUE;
                 OSTickStepState = OS_TICK_STEP_DIS;
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
 80034d6:	bf00      	nop
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
 80034d8:	3710      	adds	r7, #16
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	20007160 	.word	0x20007160
 80034e4:	20006965 	.word	0x20006965
 80034e8:	20006cc0 	.word	0x20006cc0
 80034ec:	20006c44 	.word	0x20006c44
 80034f0:	20006f44 	.word	0x20006f44
 80034f4:	20006f48 	.word	0x20006f48

080034f8 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0u
void  OS_Dummy (void)
{
 80034f8:	b480      	push	{r7}
 80034fa:	af00      	add	r7, sp, #0
}
 80034fc:	bf00      	nop
 80034fe:	46bd      	mov	sp, r7
 8003500:	bc80      	pop	{r7}
 8003502:	4770      	bx	lr

08003504 <OS_EventTaskRdy>:
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT  *pevent,
                        void      *pmsg,
                        INT8U      msk,
                        INT8U      pend_stat)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b086      	sub	sp, #24
 8003508:	af00      	add	r7, sp, #0
 800350a:	60f8      	str	r0, [r7, #12]
 800350c:	60b9      	str	r1, [r7, #8]
 800350e:	4611      	mov	r1, r2
 8003510:	461a      	mov	r2, r3
 8003512:	460b      	mov	r3, r1
 8003514:	71fb      	strb	r3, [r7, #7]
 8003516:	4613      	mov	r3, r2
 8003518:	71bb      	strb	r3, [r7, #6]
    OS_PRIO  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63u
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	7a9b      	ldrb	r3, [r3, #10]
 800351e:	461a      	mov	r2, r3
 8003520:	4b2d      	ldr	r3, [pc, #180]	; (80035d8 <OS_EventTaskRdy+0xd4>)
 8003522:	5c9b      	ldrb	r3, [r3, r2]
 8003524:	75fb      	strb	r3, [r7, #23]
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
 8003526:	7dfb      	ldrb	r3, [r7, #23]
 8003528:	68fa      	ldr	r2, [r7, #12]
 800352a:	4413      	add	r3, r2
 800352c:	7adb      	ldrb	r3, [r3, #11]
 800352e:	461a      	mov	r2, r3
 8003530:	4b29      	ldr	r3, [pc, #164]	; (80035d8 <OS_EventTaskRdy+0xd4>)
 8003532:	5c9b      	ldrb	r3, [r3, r2]
 8003534:	75bb      	strb	r3, [r7, #22]
    prio = (INT8U)((y << 3u) + x);                      /* Find priority of task getting the msg       */
 8003536:	7dfb      	ldrb	r3, [r7, #23]
 8003538:	00db      	lsls	r3, r3, #3
 800353a:	b2da      	uxtb	r2, r3
 800353c:	7dbb      	ldrb	r3, [r7, #22]
 800353e:	4413      	add	r3, r2
 8003540:	757b      	strb	r3, [r7, #21]
        x = OSUnMapTbl[(OS_PRIO)(*ptbl >> 8u) & 0xFFu] + 8u;
    }
    prio = (INT8U)((y << 4u) + x);                      /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
 8003542:	7d7b      	ldrb	r3, [r7, #21]
 8003544:	4a25      	ldr	r2, [pc, #148]	; (80035dc <OS_EventTaskRdy+0xd8>)
 8003546:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800354a:	613b      	str	r3, [r7, #16]
    ptcb->OSTCBDly        =  0u;                        /* Prevent OSTimeTick() from readying task     */
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	2200      	movs	r2, #0
 8003550:	631a      	str	r2, [r3, #48]	; 0x30
#if ((OS_Q_EN > 0u) && (OS_MAX_QS > 0u)) || (OS_MBOX_EN > 0u)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	68ba      	ldr	r2, [r7, #8]
 8003556:	625a      	str	r2, [r3, #36]	; 0x24
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= (INT8U)~msk;                /* Clear bit associated with event type        */
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800355e:	79fb      	ldrb	r3, [r7, #7]
 8003560:	43db      	mvns	r3, r3
 8003562:	b2db      	uxtb	r3, r3
 8003564:	4013      	ands	r3, r2
 8003566:	b2da      	uxtb	r2, r3
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	79ba      	ldrb	r2, [r7, #6]
 8003572:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800357c:	f003 0308 	and.w	r3, r3, #8
 8003580:	2b00      	cmp	r3, #0
 8003582:	d113      	bne.n	80035ac <OS_EventTaskRdy+0xa8>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
 800358a:	4b15      	ldr	r3, [pc, #84]	; (80035e0 <OS_EventTaskRdy+0xdc>)
 800358c:	781b      	ldrb	r3, [r3, #0]
 800358e:	4313      	orrs	r3, r2
 8003590:	b2da      	uxtb	r2, r3
 8003592:	4b13      	ldr	r3, [pc, #76]	; (80035e0 <OS_EventTaskRdy+0xdc>)
 8003594:	701a      	strb	r2, [r3, #0]
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
 8003596:	7dfb      	ldrb	r3, [r7, #23]
 8003598:	7dfa      	ldrb	r2, [r7, #23]
 800359a:	4912      	ldr	r1, [pc, #72]	; (80035e4 <OS_EventTaskRdy+0xe0>)
 800359c:	5c89      	ldrb	r1, [r1, r2]
 800359e:	693a      	ldr	r2, [r7, #16]
 80035a0:	f892 2039 	ldrb.w	r2, [r2, #57]	; 0x39
 80035a4:	430a      	orrs	r2, r1
 80035a6:	b2d1      	uxtb	r1, r2
 80035a8:	4a0e      	ldr	r2, [pc, #56]	; (80035e4 <OS_EventTaskRdy+0xe0>)
 80035aa:	54d1      	strb	r1, [r2, r3]
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
 80035ac:	68f9      	ldr	r1, [r7, #12]
 80035ae:	6938      	ldr	r0, [r7, #16]
 80035b0:	f000 f872 	bl	8003698 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0u)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	6a1b      	ldr	r3, [r3, #32]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d008      	beq.n	80035ce <OS_EventTaskRdy+0xca>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	6a1b      	ldr	r3, [r3, #32]
 80035c0:	4619      	mov	r1, r3
 80035c2:	6938      	ldr	r0, [r7, #16]
 80035c4:	f000 f898 	bl	80036f8 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	68fa      	ldr	r2, [r7, #12]
 80035cc:	61da      	str	r2, [r3, #28]
    }
#endif

    return (prio);
 80035ce:	7d7b      	ldrb	r3, [r7, #21]
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3718      	adds	r7, #24
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	08007bd8 	.word	0x08007bd8
 80035dc:	20008b68 	.word	0x20008b68
 80035e0:	20006f44 	.word	0x20006f44
 80035e4:	20006f48 	.word	0x20006f48

080035e8 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b085      	sub	sp, #20
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
 80035f0:	4b26      	ldr	r3, [pc, #152]	; (800368c <OS_EventTaskWait+0xa4>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	61da      	str	r2, [r3, #28]

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
 80035f8:	4b24      	ldr	r3, [pc, #144]	; (800368c <OS_EventTaskWait+0xa4>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003600:	4619      	mov	r1, r3
 8003602:	4b22      	ldr	r3, [pc, #136]	; (800368c <OS_EventTaskWait+0xa4>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800360a:	461a      	mov	r2, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	4413      	add	r3, r2
 8003610:	7ada      	ldrb	r2, [r3, #11]
 8003612:	4b1e      	ldr	r3, [pc, #120]	; (800368c <OS_EventTaskWait+0xa4>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800361a:	4313      	orrs	r3, r2
 800361c:	b2da      	uxtb	r2, r3
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	440b      	add	r3, r1
 8003622:	72da      	strb	r2, [r3, #11]
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	7a9a      	ldrb	r2, [r3, #10]
 8003628:	4b18      	ldr	r3, [pc, #96]	; (800368c <OS_EventTaskWait+0xa4>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003630:	4313      	orrs	r3, r2
 8003632:	b2da      	uxtb	r2, r3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	729a      	strb	r2, [r3, #10]

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
 8003638:	4b14      	ldr	r3, [pc, #80]	; (800368c <OS_EventTaskWait+0xa4>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003640:	73fb      	strb	r3, [r7, #15]
    OSRdyTbl[y]  &= (OS_PRIO)~OSTCBCur->OSTCBBitX;
 8003642:	7bfb      	ldrb	r3, [r7, #15]
 8003644:	7bfa      	ldrb	r2, [r7, #15]
 8003646:	4912      	ldr	r1, [pc, #72]	; (8003690 <OS_EventTaskWait+0xa8>)
 8003648:	5c89      	ldrb	r1, [r1, r2]
 800364a:	4a10      	ldr	r2, [pc, #64]	; (800368c <OS_EventTaskWait+0xa4>)
 800364c:	6812      	ldr	r2, [r2, #0]
 800364e:	f892 2039 	ldrb.w	r2, [r2, #57]	; 0x39
 8003652:	43d2      	mvns	r2, r2
 8003654:	b2d2      	uxtb	r2, r2
 8003656:	400a      	ands	r2, r1
 8003658:	b2d1      	uxtb	r1, r2
 800365a:	4a0d      	ldr	r2, [pc, #52]	; (8003690 <OS_EventTaskWait+0xa8>)
 800365c:	54d1      	strb	r1, [r2, r3]
    if (OSRdyTbl[y] == 0u) {                      /* Clear event grp bit if this was only task pending */
 800365e:	7bfb      	ldrb	r3, [r7, #15]
 8003660:	4a0b      	ldr	r2, [pc, #44]	; (8003690 <OS_EventTaskWait+0xa8>)
 8003662:	5cd3      	ldrb	r3, [r2, r3]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d10b      	bne.n	8003680 <OS_EventTaskWait+0x98>
        OSRdyGrp &= (OS_PRIO)~OSTCBCur->OSTCBBitY;
 8003668:	4b08      	ldr	r3, [pc, #32]	; (800368c <OS_EventTaskWait+0xa4>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003670:	43db      	mvns	r3, r3
 8003672:	b2da      	uxtb	r2, r3
 8003674:	4b07      	ldr	r3, [pc, #28]	; (8003694 <OS_EventTaskWait+0xac>)
 8003676:	781b      	ldrb	r3, [r3, #0]
 8003678:	4013      	ands	r3, r2
 800367a:	b2da      	uxtb	r2, r3
 800367c:	4b05      	ldr	r3, [pc, #20]	; (8003694 <OS_EventTaskWait+0xac>)
 800367e:	701a      	strb	r2, [r3, #0]
    }
}
 8003680:	bf00      	nop
 8003682:	3714      	adds	r7, #20
 8003684:	46bd      	mov	sp, r7
 8003686:	bc80      	pop	{r7}
 8003688:	4770      	bx	lr
 800368a:	bf00      	nop
 800368c:	20007158 	.word	0x20007158
 8003690:	20006f48 	.word	0x20006f48
 8003694:	20006f44 	.word	0x20006f44

08003698 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
 8003698:	b480      	push	{r7}
 800369a:	b085      	sub	sp, #20
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	6039      	str	r1, [r7, #0]
    INT8U  y;


    y                       =  ptcb->OSTCBY;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80036a8:	73fb      	strb	r3, [r7, #15]
    pevent->OSEventTbl[y]  &= (OS_PRIO)~ptcb->OSTCBBitX;    /* Remove task from wait list              */
 80036aa:	7bfb      	ldrb	r3, [r7, #15]
 80036ac:	7bfa      	ldrb	r2, [r7, #15]
 80036ae:	6839      	ldr	r1, [r7, #0]
 80036b0:	440a      	add	r2, r1
 80036b2:	7ad1      	ldrb	r1, [r2, #11]
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	f892 2039 	ldrb.w	r2, [r2, #57]	; 0x39
 80036ba:	43d2      	mvns	r2, r2
 80036bc:	b2d2      	uxtb	r2, r2
 80036be:	400a      	ands	r2, r1
 80036c0:	b2d1      	uxtb	r1, r2
 80036c2:	683a      	ldr	r2, [r7, #0]
 80036c4:	4413      	add	r3, r2
 80036c6:	460a      	mov	r2, r1
 80036c8:	72da      	strb	r2, [r3, #11]
    if (pevent->OSEventTbl[y] == 0u) {
 80036ca:	7bfb      	ldrb	r3, [r7, #15]
 80036cc:	683a      	ldr	r2, [r7, #0]
 80036ce:	4413      	add	r3, r2
 80036d0:	7adb      	ldrb	r3, [r3, #11]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d10a      	bne.n	80036ec <OS_EventTaskRemove+0x54>
        pevent->OSEventGrp &= (OS_PRIO)~ptcb->OSTCBBitY;
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	7a9a      	ldrb	r2, [r3, #10]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80036e0:	43db      	mvns	r3, r3
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	4013      	ands	r3, r2
 80036e6:	b2da      	uxtb	r2, r3
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	729a      	strb	r2, [r3, #10]
    }
}
 80036ec:	bf00      	nop
 80036ee:	3714      	adds	r7, #20
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bc80      	pop	{r7}
 80036f4:	4770      	bx	lr
 80036f6:	bf00      	nop

080036f8 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0u))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b087      	sub	sp, #28
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	6039      	str	r1, [r7, #0]
    INT8U      y;
    OS_PRIO    bity;
    OS_PRIO    bitx;


    y       =  ptcb->OSTCBY;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003708:	73fb      	strb	r3, [r7, #15]
    bity    =  ptcb->OSTCBBitY;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003710:	73bb      	strb	r3, [r7, #14]
    bitx    =  ptcb->OSTCBBitX;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003718:	737b      	strb	r3, [r7, #13]
    pevents =  pevents_multi;
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	617b      	str	r3, [r7, #20]
    pevent  = *pevents;
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	613b      	str	r3, [r7, #16]
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
 8003724:	e022      	b.n	800376c <OS_EventTaskRemoveMulti+0x74>
        pevent->OSEventTbl[y]  &= (OS_PRIO)~bitx;
 8003726:	7bfb      	ldrb	r3, [r7, #15]
 8003728:	7bfa      	ldrb	r2, [r7, #15]
 800372a:	6939      	ldr	r1, [r7, #16]
 800372c:	440a      	add	r2, r1
 800372e:	7ad1      	ldrb	r1, [r2, #11]
 8003730:	7b7a      	ldrb	r2, [r7, #13]
 8003732:	43d2      	mvns	r2, r2
 8003734:	b2d2      	uxtb	r2, r2
 8003736:	400a      	ands	r2, r1
 8003738:	b2d1      	uxtb	r1, r2
 800373a:	693a      	ldr	r2, [r7, #16]
 800373c:	4413      	add	r3, r2
 800373e:	460a      	mov	r2, r1
 8003740:	72da      	strb	r2, [r3, #11]
        if (pevent->OSEventTbl[y] == 0u) {
 8003742:	7bfb      	ldrb	r3, [r7, #15]
 8003744:	693a      	ldr	r2, [r7, #16]
 8003746:	4413      	add	r3, r2
 8003748:	7adb      	ldrb	r3, [r3, #11]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d108      	bne.n	8003760 <OS_EventTaskRemoveMulti+0x68>
            pevent->OSEventGrp &= (OS_PRIO)~bity;
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	7a9a      	ldrb	r2, [r3, #10]
 8003752:	7bbb      	ldrb	r3, [r7, #14]
 8003754:	43db      	mvns	r3, r3
 8003756:	b2db      	uxtb	r3, r3
 8003758:	4013      	ands	r3, r2
 800375a:	b2da      	uxtb	r2, r3
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	729a      	strb	r2, [r3, #10]
        }
        pevents++;
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	3304      	adds	r3, #4
 8003764:	617b      	str	r3, [r7, #20]
        pevent = *pevents;
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	613b      	str	r3, [r7, #16]
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d1d9      	bne.n	8003726 <OS_EventTaskRemoveMulti+0x2e>
            pevent->OSEventGrp &= (OS_PRIO)~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
 8003772:	bf00      	nop
 8003774:	371c      	adds	r7, #28
 8003776:	46bd      	mov	sp, r7
 8003778:	bc80      	pop	{r7}
 800377a:	4770      	bx	lr

0800377c <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
 800377c:	b480      	push	{r7}
 800377e:	b085      	sub	sp, #20
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
    INT8U  i;


    pevent->OSEventGrp = 0u;                     /* No task waiting on event                           */
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	729a      	strb	r2, [r3, #10]
    for (i = 0u; i < OS_EVENT_TBL_SIZE; i++) {
 800378a:	2300      	movs	r3, #0
 800378c:	73fb      	strb	r3, [r7, #15]
 800378e:	e007      	b.n	80037a0 <OS_EventWaitListInit+0x24>
        pevent->OSEventTbl[i] = 0u;
 8003790:	7bfb      	ldrb	r3, [r7, #15]
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	4413      	add	r3, r2
 8003796:	2200      	movs	r2, #0
 8003798:	72da      	strb	r2, [r3, #11]
{
    INT8U  i;


    pevent->OSEventGrp = 0u;                     /* No task waiting on event                           */
    for (i = 0u; i < OS_EVENT_TBL_SIZE; i++) {
 800379a:	7bfb      	ldrb	r3, [r7, #15]
 800379c:	3301      	adds	r3, #1
 800379e:	73fb      	strb	r3, [r7, #15]
 80037a0:	7bfb      	ldrb	r3, [r7, #15]
 80037a2:	2b07      	cmp	r3, #7
 80037a4:	d9f4      	bls.n	8003790 <OS_EventWaitListInit+0x14>
        pevent->OSEventTbl[i] = 0u;
    }
}
 80037a6:	bf00      	nop
 80037a8:	3714      	adds	r7, #20
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bc80      	pop	{r7}
 80037ae:	4770      	bx	lr

080037b0 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b084      	sub	sp, #16
 80037b4:	af00      	add	r7, sp, #0
    INT16U     ix_next;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
 80037b6:	f241 0168 	movw	r1, #4200	; 0x1068
 80037ba:	4820      	ldr	r0, [pc, #128]	; (800383c <OS_InitEventList+0x8c>)
 80037bc:	f000 f94c 	bl	8003a58 <OS_MemClr>
    for (ix = 0u; ix < (OS_MAX_EVENTS - 1u); ix++) {        /* Init. list of free EVENT control blocks */
 80037c0:	2300      	movs	r3, #0
 80037c2:	81fb      	strh	r3, [r7, #14]
 80037c4:	e01e      	b.n	8003804 <OS_InitEventList+0x54>
        ix_next = ix + 1u;
 80037c6:	89fb      	ldrh	r3, [r7, #14]
 80037c8:	3301      	adds	r3, #1
 80037ca:	81bb      	strh	r3, [r7, #12]
        pevent1 = &OSEventTbl[ix];
 80037cc:	89fa      	ldrh	r2, [r7, #14]
 80037ce:	4613      	mov	r3, r2
 80037d0:	005b      	lsls	r3, r3, #1
 80037d2:	4413      	add	r3, r2
 80037d4:	00db      	lsls	r3, r3, #3
 80037d6:	4a19      	ldr	r2, [pc, #100]	; (800383c <OS_InitEventList+0x8c>)
 80037d8:	4413      	add	r3, r2
 80037da:	60bb      	str	r3, [r7, #8]
        pevent2 = &OSEventTbl[ix_next];
 80037dc:	89ba      	ldrh	r2, [r7, #12]
 80037de:	4613      	mov	r3, r2
 80037e0:	005b      	lsls	r3, r3, #1
 80037e2:	4413      	add	r3, r2
 80037e4:	00db      	lsls	r3, r3, #3
 80037e6:	4a15      	ldr	r2, [pc, #84]	; (800383c <OS_InitEventList+0x8c>)
 80037e8:	4413      	add	r3, r2
 80037ea:	607b      	str	r3, [r7, #4]
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	2200      	movs	r2, #0
 80037f0:	701a      	strb	r2, [r3, #0]
        pevent1->OSEventPtr     = pevent2;
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	687a      	ldr	r2, [r7, #4]
 80037f6:	605a      	str	r2, [r3, #4]
#if OS_EVENT_NAME_EN > 0u
        pevent1->OSEventName    = (INT8U *)(void *)"?";     /* Unknown name                            */
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	4a11      	ldr	r2, [pc, #68]	; (8003840 <OS_InitEventList+0x90>)
 80037fc:	615a      	str	r2, [r3, #20]
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    for (ix = 0u; ix < (OS_MAX_EVENTS - 1u); ix++) {        /* Init. list of free EVENT control blocks */
 80037fe:	89fb      	ldrh	r3, [r7, #14]
 8003800:	3301      	adds	r3, #1
 8003802:	81fb      	strh	r3, [r7, #14]
 8003804:	89fb      	ldrh	r3, [r7, #14]
 8003806:	2bad      	cmp	r3, #173	; 0xad
 8003808:	d9dd      	bls.n	80037c6 <OS_InitEventList+0x16>
        pevent1->OSEventPtr     = pevent2;
#if OS_EVENT_NAME_EN > 0u
        pevent1->OSEventName    = (INT8U *)(void *)"?";     /* Unknown name                            */
#endif
    }
    pevent1                         = &OSEventTbl[ix];
 800380a:	89fa      	ldrh	r2, [r7, #14]
 800380c:	4613      	mov	r3, r2
 800380e:	005b      	lsls	r3, r3, #1
 8003810:	4413      	add	r3, r2
 8003812:	00db      	lsls	r3, r3, #3
 8003814:	4a09      	ldr	r2, [pc, #36]	; (800383c <OS_InitEventList+0x8c>)
 8003816:	4413      	add	r3, r2
 8003818:	60bb      	str	r3, [r7, #8]
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	2200      	movs	r2, #0
 800381e:	701a      	strb	r2, [r3, #0]
    pevent1->OSEventPtr             = (OS_EVENT *)0;
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	2200      	movs	r2, #0
 8003824:	605a      	str	r2, [r3, #4]
#if OS_EVENT_NAME_EN > 0u
    pevent1->OSEventName            = (INT8U *)(void *)"?"; /* Unknown name                            */
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	4a05      	ldr	r2, [pc, #20]	; (8003840 <OS_InitEventList+0x90>)
 800382a:	615a      	str	r2, [r3, #20]
#endif
    OSEventFreeList                 = &OSEventTbl[0];
 800382c:	4b05      	ldr	r3, [pc, #20]	; (8003844 <OS_InitEventList+0x94>)
 800382e:	4a03      	ldr	r2, [pc, #12]	; (800383c <OS_InitEventList+0x8c>)
 8003830:	601a      	str	r2, [r3, #0]
#if OS_EVENT_NAME_EN > 0u
    OSEventFreeList->OSEventName    = (INT8U *)"?";         /* Unknown name                            */
#endif
#endif
#endif
}
 8003832:	bf00      	nop
 8003834:	3710      	adds	r7, #16
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	20007368 	.word	0x20007368
 8003840:	08007ae0 	.word	0x08007ae0
 8003844:	20007150 	.word	0x20007150

08003848 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
 8003848:	b480      	push	{r7}
 800384a:	af00      	add	r7, sp, #0
#if OS_TIME_GET_SET_EN > 0u
    OSTime                    = 0uL;                       /* Clear the 32-bit system clock            */
 800384c:	4b12      	ldr	r3, [pc, #72]	; (8003898 <OS_InitMisc+0x50>)
 800384e:	2200      	movs	r2, #0
 8003850:	601a      	str	r2, [r3, #0]
#endif

    OSIntNesting              = 0u;                        /* Clear the interrupt nesting counter      */
 8003852:	4b12      	ldr	r3, [pc, #72]	; (800389c <OS_InitMisc+0x54>)
 8003854:	2200      	movs	r2, #0
 8003856:	701a      	strb	r2, [r3, #0]
    OSLockNesting             = 0u;                        /* Clear the scheduling lock counter        */
 8003858:	4b11      	ldr	r3, [pc, #68]	; (80038a0 <OS_InitMisc+0x58>)
 800385a:	2200      	movs	r2, #0
 800385c:	701a      	strb	r2, [r3, #0]

    OSTaskCtr                 = 0u;                        /* Clear the number of tasks                */
 800385e:	4b11      	ldr	r3, [pc, #68]	; (80038a4 <OS_InitMisc+0x5c>)
 8003860:	2200      	movs	r2, #0
 8003862:	701a      	strb	r2, [r3, #0]

    OSRunning                 = OS_FALSE;                  /* Indicate that multitasking not started   */
 8003864:	4b10      	ldr	r3, [pc, #64]	; (80038a8 <OS_InitMisc+0x60>)
 8003866:	2200      	movs	r2, #0
 8003868:	701a      	strb	r2, [r3, #0]

    OSCtxSwCtr                = 0u;                        /* Clear the context switch counter         */
 800386a:	4b10      	ldr	r3, [pc, #64]	; (80038ac <OS_InitMisc+0x64>)
 800386c:	2200      	movs	r2, #0
 800386e:	601a      	str	r2, [r3, #0]
    OSIdleCtr                 = 0uL;                       /* Clear the 32-bit idle counter            */
 8003870:	4b0f      	ldr	r3, [pc, #60]	; (80038b0 <OS_InitMisc+0x68>)
 8003872:	2200      	movs	r2, #0
 8003874:	601a      	str	r2, [r3, #0]

#if OS_TASK_STAT_EN > 0u
    OSIdleCtrRun              = 0uL;
 8003876:	4b0f      	ldr	r3, [pc, #60]	; (80038b4 <OS_InitMisc+0x6c>)
 8003878:	2200      	movs	r2, #0
 800387a:	601a      	str	r2, [r3, #0]
    OSIdleCtrMax              = 0uL;
 800387c:	4b0e      	ldr	r3, [pc, #56]	; (80038b8 <OS_InitMisc+0x70>)
 800387e:	2200      	movs	r2, #0
 8003880:	601a      	str	r2, [r3, #0]
    OSStatRdy                 = OS_FALSE;                  /* Statistic task is not ready              */
 8003882:	4b0e      	ldr	r3, [pc, #56]	; (80038bc <OS_InitMisc+0x74>)
 8003884:	2200      	movs	r2, #0
 8003886:	701a      	strb	r2, [r3, #0]
#ifdef OS_SAFETY_CRITICAL_IEC61508
    OSSafetyCriticalStartFlag = OS_FALSE;                  /* Still allow creation of objects          */
#endif

#if OS_TASK_REG_TBL_SIZE > 0u
    OSTaskRegNextAvailID      = 0u;                        /* Initialize the task register ID          */
 8003888:	4b0d      	ldr	r3, [pc, #52]	; (80038c0 <OS_InitMisc+0x78>)
 800388a:	2200      	movs	r2, #0
 800388c:	701a      	strb	r2, [r3, #0]
#endif
}
 800388e:	bf00      	nop
 8003890:	46bd      	mov	sp, r7
 8003892:	bc80      	pop	{r7}
 8003894:	4770      	bx	lr
 8003896:	bf00      	nop
 8003898:	20007160 	.word	0x20007160
 800389c:	20007154 	.word	0x20007154
 80038a0:	2000695c 	.word	0x2000695c
 80038a4:	20006ed5 	.word	0x20006ed5
 80038a8:	20006965 	.word	0x20006965
 80038ac:	20006ec4 	.word	0x20006ec4
 80038b0:	20006968 	.word	0x20006968
 80038b4:	20008c68 	.word	0x20008c68
 80038b8:	20006ecc 	.word	0x20006ecc
 80038bc:	20008b64 	.word	0x20008b64
 80038c0:	20006964 	.word	0x20006964

080038c4 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b083      	sub	sp, #12
 80038c8:	af00      	add	r7, sp, #0
    INT8U  i;


    OSRdyGrp      = 0u;                                    /* Clear the ready list                     */
 80038ca:	4b10      	ldr	r3, [pc, #64]	; (800390c <OS_InitRdyList+0x48>)
 80038cc:	2200      	movs	r2, #0
 80038ce:	701a      	strb	r2, [r3, #0]
    for (i = 0u; i < OS_RDY_TBL_SIZE; i++) {
 80038d0:	2300      	movs	r3, #0
 80038d2:	71fb      	strb	r3, [r7, #7]
 80038d4:	e006      	b.n	80038e4 <OS_InitRdyList+0x20>
        OSRdyTbl[i] = 0u;
 80038d6:	79fb      	ldrb	r3, [r7, #7]
 80038d8:	4a0d      	ldr	r2, [pc, #52]	; (8003910 <OS_InitRdyList+0x4c>)
 80038da:	2100      	movs	r1, #0
 80038dc:	54d1      	strb	r1, [r2, r3]
{
    INT8U  i;


    OSRdyGrp      = 0u;                                    /* Clear the ready list                     */
    for (i = 0u; i < OS_RDY_TBL_SIZE; i++) {
 80038de:	79fb      	ldrb	r3, [r7, #7]
 80038e0:	3301      	adds	r3, #1
 80038e2:	71fb      	strb	r3, [r7, #7]
 80038e4:	79fb      	ldrb	r3, [r7, #7]
 80038e6:	2b07      	cmp	r3, #7
 80038e8:	d9f5      	bls.n	80038d6 <OS_InitRdyList+0x12>
        OSRdyTbl[i] = 0u;
    }

    OSPrioCur     = 0u;
 80038ea:	4b0a      	ldr	r3, [pc, #40]	; (8003914 <OS_InitRdyList+0x50>)
 80038ec:	2200      	movs	r2, #0
 80038ee:	701a      	strb	r2, [r3, #0]
    OSPrioHighRdy = 0u;
 80038f0:	4b09      	ldr	r3, [pc, #36]	; (8003918 <OS_InitRdyList+0x54>)
 80038f2:	2200      	movs	r2, #0
 80038f4:	701a      	strb	r2, [r3, #0]

    OSTCBHighRdy  = (OS_TCB *)0;
 80038f6:	4b09      	ldr	r3, [pc, #36]	; (800391c <OS_InitRdyList+0x58>)
 80038f8:	2200      	movs	r2, #0
 80038fa:	601a      	str	r2, [r3, #0]
    OSTCBCur      = (OS_TCB *)0;
 80038fc:	4b08      	ldr	r3, [pc, #32]	; (8003920 <OS_InitRdyList+0x5c>)
 80038fe:	2200      	movs	r2, #0
 8003900:	601a      	str	r2, [r3, #0]
}
 8003902:	bf00      	nop
 8003904:	370c      	adds	r7, #12
 8003906:	46bd      	mov	sp, r7
 8003908:	bc80      	pop	{r7}
 800390a:	4770      	bx	lr
 800390c:	20006f44 	.word	0x20006f44
 8003910:	20006f48 	.word	0x20006f48
 8003914:	20006c40 	.word	0x20006c40
 8003918:	2000696e 	.word	0x2000696e
 800391c:	20006f3c 	.word	0x20006f3c
 8003920:	20007158 	.word	0x20007158

08003924 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b088      	sub	sp, #32
 8003928:	af06      	add	r7, sp, #24
#endif


#if OS_TASK_CREATE_EXT_EN > 0u
    #if OS_STK_GROWTH == 1u
    (void)OSTaskCreateExt(OS_TaskIdle,
 800392a:	2303      	movs	r3, #3
 800392c:	9304      	str	r3, [sp, #16]
 800392e:	2300      	movs	r3, #0
 8003930:	9303      	str	r3, [sp, #12]
 8003932:	2380      	movs	r3, #128	; 0x80
 8003934:	9302      	str	r3, [sp, #8]
 8003936:	4b0a      	ldr	r3, [pc, #40]	; (8003960 <OS_InitTaskIdle+0x3c>)
 8003938:	9301      	str	r3, [sp, #4]
 800393a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800393e:	9300      	str	r3, [sp, #0]
 8003940:	233f      	movs	r3, #63	; 0x3f
 8003942:	4a08      	ldr	r2, [pc, #32]	; (8003964 <OS_InitTaskIdle+0x40>)
 8003944:	2100      	movs	r1, #0
 8003946:	4808      	ldr	r0, [pc, #32]	; (8003968 <OS_InitTaskIdle+0x44>)
 8003948:	f000 fc88 	bl	800425c <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_EN > 0u
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)(void *)"uC/OS-II Idle", &err);
 800394c:	1dfb      	adds	r3, r7, #7
 800394e:	461a      	mov	r2, r3
 8003950:	4906      	ldr	r1, [pc, #24]	; (800396c <OS_InitTaskIdle+0x48>)
 8003952:	203f      	movs	r0, #63	; 0x3f
 8003954:	f000 fdd6 	bl	8004504 <OSTaskNameSet>
#endif
}
 8003958:	bf00      	nop
 800395a:	3708      	adds	r7, #8
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}
 8003960:	20007168 	.word	0x20007168
 8003964:	20007364 	.word	0x20007364
 8003968:	08003b55 	.word	0x08003b55
 800396c:	08007ae4 	.word	0x08007ae4

08003970 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0u
static  void  OS_InitTaskStat (void)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b088      	sub	sp, #32
 8003974:	af06      	add	r7, sp, #24
#endif


#if OS_TASK_CREATE_EXT_EN > 0u
    #if OS_STK_GROWTH == 1u
    (void)OSTaskCreateExt(OS_TaskStat,
 8003976:	2303      	movs	r3, #3
 8003978:	9304      	str	r3, [sp, #16]
 800397a:	2300      	movs	r3, #0
 800397c:	9303      	str	r3, [sp, #12]
 800397e:	2380      	movs	r3, #128	; 0x80
 8003980:	9302      	str	r3, [sp, #8]
 8003982:	4b0a      	ldr	r3, [pc, #40]	; (80039ac <OS_InitTaskStat+0x3c>)
 8003984:	9301      	str	r3, [sp, #4]
 8003986:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800398a:	9300      	str	r3, [sp, #0]
 800398c:	233e      	movs	r3, #62	; 0x3e
 800398e:	4a08      	ldr	r2, [pc, #32]	; (80039b0 <OS_InitTaskStat+0x40>)
 8003990:	2100      	movs	r1, #0
 8003992:	4808      	ldr	r0, [pc, #32]	; (80039b4 <OS_InitTaskStat+0x44>)
 8003994:	f000 fc62 	bl	800425c <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_EN > 0u
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)(void *)"uC/OS-II Stat", &err);
 8003998:	1dfb      	adds	r3, r7, #7
 800399a:	461a      	mov	r2, r3
 800399c:	4906      	ldr	r1, [pc, #24]	; (80039b8 <OS_InitTaskStat+0x48>)
 800399e:	203e      	movs	r0, #62	; 0x3e
 80039a0:	f000 fdb0 	bl	8004504 <OSTaskNameSet>
#endif
}
 80039a4:	bf00      	nop
 80039a6:	3708      	adds	r7, #8
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	20006cc4 	.word	0x20006cc4
 80039b0:	20006ec0 	.word	0x20006ec0
 80039b4:	08003b81 	.word	0x08003b81
 80039b8:	08007af4 	.word	0x08007af4

080039bc <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b084      	sub	sp, #16
 80039c0:	af00      	add	r7, sp, #0
    INT8U    ix_next;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
 80039c2:	f44f 61f2 	mov.w	r1, #1936	; 0x790
 80039c6:	481f      	ldr	r0, [pc, #124]	; (8003a44 <OS_InitTCBList+0x88>)
 80039c8:	f000 f846 	bl	8003a58 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
 80039cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80039d0:	481d      	ldr	r0, [pc, #116]	; (8003a48 <OS_InitTCBList+0x8c>)
 80039d2:	f000 f841 	bl	8003a58 <OS_MemClr>
    for (ix = 0u; ix < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1u); ix++) {    /* Init. list of free TCBs     */
 80039d6:	2300      	movs	r3, #0
 80039d8:	73fb      	strb	r3, [r7, #15]
 80039da:	e019      	b.n	8003a10 <OS_InitTCBList+0x54>
        ix_next =  ix + 1u;
 80039dc:	7bfb      	ldrb	r3, [r7, #15]
 80039de:	3301      	adds	r3, #1
 80039e0:	73bb      	strb	r3, [r7, #14]
        ptcb1   = &OSTCBTbl[ix];
 80039e2:	7bfb      	ldrb	r3, [r7, #15]
 80039e4:	2258      	movs	r2, #88	; 0x58
 80039e6:	fb02 f303 	mul.w	r3, r2, r3
 80039ea:	4a16      	ldr	r2, [pc, #88]	; (8003a44 <OS_InitTCBList+0x88>)
 80039ec:	4413      	add	r3, r2
 80039ee:	60bb      	str	r3, [r7, #8]
        ptcb2   = &OSTCBTbl[ix_next];
 80039f0:	7bbb      	ldrb	r3, [r7, #14]
 80039f2:	2258      	movs	r2, #88	; 0x58
 80039f4:	fb02 f303 	mul.w	r3, r2, r3
 80039f8:	4a12      	ldr	r2, [pc, #72]	; (8003a44 <OS_InitTCBList+0x88>)
 80039fa:	4413      	add	r3, r2
 80039fc:	607b      	str	r3, [r7, #4]
        ptcb1->OSTCBNext = ptcb2;
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	687a      	ldr	r2, [r7, #4]
 8003a02:	615a      	str	r2, [r3, #20]
#if OS_TASK_NAME_EN > 0u
        ptcb1->OSTCBTaskName = (INT8U *)(void *)"?";             /* Unknown name                       */
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	4a11      	ldr	r2, [pc, #68]	; (8003a4c <OS_InitTCBList+0x90>)
 8003a08:	651a      	str	r2, [r3, #80]	; 0x50
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    for (ix = 0u; ix < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1u); ix++) {    /* Init. list of free TCBs     */
 8003a0a:	7bfb      	ldrb	r3, [r7, #15]
 8003a0c:	3301      	adds	r3, #1
 8003a0e:	73fb      	strb	r3, [r7, #15]
 8003a10:	7bfb      	ldrb	r3, [r7, #15]
 8003a12:	2b14      	cmp	r3, #20
 8003a14:	d9e2      	bls.n	80039dc <OS_InitTCBList+0x20>
        ptcb1->OSTCBNext = ptcb2;
#if OS_TASK_NAME_EN > 0u
        ptcb1->OSTCBTaskName = (INT8U *)(void *)"?";             /* Unknown name                       */
#endif
    }
    ptcb1                   = &OSTCBTbl[ix];
 8003a16:	7bfb      	ldrb	r3, [r7, #15]
 8003a18:	2258      	movs	r2, #88	; 0x58
 8003a1a:	fb02 f303 	mul.w	r3, r2, r3
 8003a1e:	4a09      	ldr	r2, [pc, #36]	; (8003a44 <OS_InitTCBList+0x88>)
 8003a20:	4413      	add	r3, r2
 8003a22:	60bb      	str	r3, [r7, #8]
    ptcb1->OSTCBNext        = (OS_TCB *)0;                       /* Last OS_TCB                        */
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	2200      	movs	r2, #0
 8003a28:	615a      	str	r2, [r3, #20]
#if OS_TASK_NAME_EN > 0u
    ptcb1->OSTCBTaskName    = (INT8U *)(void *)"?";              /* Unknown name                       */
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	4a07      	ldr	r2, [pc, #28]	; (8003a4c <OS_InitTCBList+0x90>)
 8003a2e:	651a      	str	r2, [r3, #80]	; 0x50
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
 8003a30:	4b07      	ldr	r3, [pc, #28]	; (8003a50 <OS_InitTCBList+0x94>)
 8003a32:	2200      	movs	r2, #0
 8003a34:	601a      	str	r2, [r3, #0]
    OSTCBFreeList           = &OSTCBTbl[0];
 8003a36:	4b07      	ldr	r3, [pc, #28]	; (8003a54 <OS_InitTCBList+0x98>)
 8003a38:	4a02      	ldr	r2, [pc, #8]	; (8003a44 <OS_InitTCBList+0x88>)
 8003a3a:	601a      	str	r2, [r3, #0]
}
 8003a3c:	bf00      	nop
 8003a3e:	3710      	adds	r7, #16
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	200083d0 	.word	0x200083d0
 8003a48:	20008b68 	.word	0x20008b68
 8003a4c:	08007ae0 	.word	0x08007ae0
 8003a50:	20006c44 	.word	0x20006c44
 8003a54:	20006ed0 	.word	0x20006ed0

08003a58 <OS_MemClr>:
*********************************************************************************************************
*/

void  OS_MemClr (INT8U  *pdest,
                 INT16U  size)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	460b      	mov	r3, r1
 8003a62:	807b      	strh	r3, [r7, #2]
    while (size > 0u) {
 8003a64:	e007      	b.n	8003a76 <OS_MemClr+0x1e>
        *pdest++ = (INT8U)0;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	1c5a      	adds	r2, r3, #1
 8003a6a:	607a      	str	r2, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	701a      	strb	r2, [r3, #0]
        size--;
 8003a70:	887b      	ldrh	r3, [r7, #2]
 8003a72:	3b01      	subs	r3, #1
 8003a74:	807b      	strh	r3, [r7, #2]
*/

void  OS_MemClr (INT8U  *pdest,
                 INT16U  size)
{
    while (size > 0u) {
 8003a76:	887b      	ldrh	r3, [r7, #2]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d1f4      	bne.n	8003a66 <OS_MemClr+0xe>
        *pdest++ = (INT8U)0;
        size--;
    }
}
 8003a7c:	bf00      	nop
 8003a7e:	370c      	adds	r7, #12
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bc80      	pop	{r7}
 8003a84:	4770      	bx	lr
 8003a86:	bf00      	nop

08003a88 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b082      	sub	sp, #8
 8003a8c:	af00      	add	r7, sp, #0
#if OS_CRITICAL_METHOD == 3u                           /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0u;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	607b      	str	r3, [r7, #4]
#endif



    OS_ENTER_CRITICAL();
 8003a92:	f7fc fb97 	bl	80001c4 <OS_CPU_SR_Save>
 8003a96:	6078      	str	r0, [r7, #4]
    if (OSIntNesting == 0u) {                          /* Schedule only if all ISRs done and ...       */
 8003a98:	4b15      	ldr	r3, [pc, #84]	; (8003af0 <OS_Sched+0x68>)
 8003a9a:	781b      	ldrb	r3, [r3, #0]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d11f      	bne.n	8003ae0 <OS_Sched+0x58>
        if (OSLockNesting == 0u) {                     /* ... scheduler is not locked                  */
 8003aa0:	4b14      	ldr	r3, [pc, #80]	; (8003af4 <OS_Sched+0x6c>)
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d11b      	bne.n	8003ae0 <OS_Sched+0x58>
            OS_SchedNew();
 8003aa8:	f000 f830 	bl	8003b0c <OS_SchedNew>
            OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
 8003aac:	4b12      	ldr	r3, [pc, #72]	; (8003af8 <OS_Sched+0x70>)
 8003aae:	781b      	ldrb	r3, [r3, #0]
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	4b12      	ldr	r3, [pc, #72]	; (8003afc <OS_Sched+0x74>)
 8003ab4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ab8:	4a11      	ldr	r2, [pc, #68]	; (8003b00 <OS_Sched+0x78>)
 8003aba:	6013      	str	r3, [r2, #0]
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
 8003abc:	4b0e      	ldr	r3, [pc, #56]	; (8003af8 <OS_Sched+0x70>)
 8003abe:	781a      	ldrb	r2, [r3, #0]
 8003ac0:	4b10      	ldr	r3, [pc, #64]	; (8003b04 <OS_Sched+0x7c>)
 8003ac2:	781b      	ldrb	r3, [r3, #0]
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d00b      	beq.n	8003ae0 <OS_Sched+0x58>
#if OS_TASK_PROFILE_EN > 0u
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
 8003ac8:	4b0d      	ldr	r3, [pc, #52]	; (8003b00 <OS_Sched+0x78>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ace:	3201      	adds	r2, #1
 8003ad0:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
 8003ad2:	4b0d      	ldr	r3, [pc, #52]	; (8003b08 <OS_Sched+0x80>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	3301      	adds	r3, #1
 8003ad8:	4a0b      	ldr	r2, [pc, #44]	; (8003b08 <OS_Sched+0x80>)
 8003ada:	6013      	str	r3, [r2, #0]
                OS_TASK_SW();                          /* Perform a context switch                     */
 8003adc:	f7fc fb8c 	bl	80001f8 <OSCtxSw>
            }
        }
    }
    OS_EXIT_CRITICAL();
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f7fc fb73 	bl	80001cc <OS_CPU_SR_Restore>
}
 8003ae6:	bf00      	nop
 8003ae8:	3708      	adds	r7, #8
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	20007154 	.word	0x20007154
 8003af4:	2000695c 	.word	0x2000695c
 8003af8:	2000696e 	.word	0x2000696e
 8003afc:	20008b68 	.word	0x20008b68
 8003b00:	20006f3c 	.word	0x20006f3c
 8003b04:	20006c40 	.word	0x20006c40
 8003b08:	20006ec4 	.word	0x20006ec4

08003b0c <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
#if OS_LOWEST_PRIO <= 63u                        /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
 8003b12:	4b0c      	ldr	r3, [pc, #48]	; (8003b44 <OS_SchedNew+0x38>)
 8003b14:	781b      	ldrb	r3, [r3, #0]
 8003b16:	461a      	mov	r2, r3
 8003b18:	4b0b      	ldr	r3, [pc, #44]	; (8003b48 <OS_SchedNew+0x3c>)
 8003b1a:	5c9b      	ldrb	r3, [r3, r2]
 8003b1c:	71fb      	strb	r3, [r7, #7]
    OSPrioHighRdy = (INT8U)((y << 3u) + OSUnMapTbl[OSRdyTbl[y]]);
 8003b1e:	79fb      	ldrb	r3, [r7, #7]
 8003b20:	00db      	lsls	r3, r3, #3
 8003b22:	b2da      	uxtb	r2, r3
 8003b24:	79fb      	ldrb	r3, [r7, #7]
 8003b26:	4909      	ldr	r1, [pc, #36]	; (8003b4c <OS_SchedNew+0x40>)
 8003b28:	5ccb      	ldrb	r3, [r1, r3]
 8003b2a:	4619      	mov	r1, r3
 8003b2c:	4b06      	ldr	r3, [pc, #24]	; (8003b48 <OS_SchedNew+0x3c>)
 8003b2e:	5c5b      	ldrb	r3, [r3, r1]
 8003b30:	4413      	add	r3, r2
 8003b32:	b2da      	uxtb	r2, r3
 8003b34:	4b06      	ldr	r3, [pc, #24]	; (8003b50 <OS_SchedNew+0x44>)
 8003b36:	701a      	strb	r2, [r3, #0]
        OSPrioHighRdy = (INT8U)((y << 4u) + OSUnMapTbl[(*ptbl & 0xFFu)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4u) + OSUnMapTbl[(OS_PRIO)(*ptbl >> 8u) & 0xFFu] + 8u);
    }
#endif
}
 8003b38:	bf00      	nop
 8003b3a:	370c      	adds	r7, #12
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bc80      	pop	{r7}
 8003b40:	4770      	bx	lr
 8003b42:	bf00      	nop
 8003b44:	20006f44 	.word	0x20006f44
 8003b48:	08007bd8 	.word	0x08007bd8
 8003b4c:	20006f48 	.word	0x20006f48
 8003b50:	2000696e 	.word	0x2000696e

08003b54 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b084      	sub	sp, #16
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	60fb      	str	r3, [r7, #12]



    p_arg = p_arg;                               /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
 8003b60:	f7fc fb30 	bl	80001c4 <OS_CPU_SR_Save>
 8003b64:	60f8      	str	r0, [r7, #12]
        OSIdleCtr++;
 8003b66:	4b05      	ldr	r3, [pc, #20]	; (8003b7c <OS_TaskIdle+0x28>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	3301      	adds	r3, #1
 8003b6c:	4a03      	ldr	r2, [pc, #12]	; (8003b7c <OS_TaskIdle+0x28>)
 8003b6e:	6013      	str	r3, [r2, #0]
        OS_EXIT_CRITICAL();
 8003b70:	68f8      	ldr	r0, [r7, #12]
 8003b72:	f7fc fb2b 	bl	80001cc <OS_CPU_SR_Restore>
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
 8003b76:	f7ff f8fd 	bl	8002d74 <OSTaskIdleHook>
    }
 8003b7a:	e7f1      	b.n	8003b60 <OS_TaskIdle+0xc>
 8003b7c:	20006968 	.word	0x20006968

08003b80 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0u
void  OS_TaskStat (void *p_arg)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b084      	sub	sp, #16
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	60fb      	str	r3, [r7, #12]
#endif



    p_arg = p_arg;                               /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
 8003b8c:	e002      	b.n	8003b94 <OS_TaskStat+0x14>
        OSTimeDly(2u * OS_TICKS_PER_SEC / 10u);  /* Wait until statistic task is ready                 */
 8003b8e:	20c8      	movs	r0, #200	; 0xc8
 8003b90:	f000 fe06 	bl	80047a0 <OSTimeDly>
#endif



    p_arg = p_arg;                               /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
 8003b94:	4b21      	ldr	r3, [pc, #132]	; (8003c1c <OS_TaskStat+0x9c>)
 8003b96:	781b      	ldrb	r3, [r3, #0]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d0f8      	beq.n	8003b8e <OS_TaskStat+0xe>
        OSTimeDly(2u * OS_TICKS_PER_SEC / 10u);  /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100uL;
 8003b9c:	4b20      	ldr	r3, [pc, #128]	; (8003c20 <OS_TaskStat+0xa0>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a20      	ldr	r2, [pc, #128]	; (8003c24 <OS_TaskStat+0xa4>)
 8003ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ba6:	095b      	lsrs	r3, r3, #5
 8003ba8:	4a1d      	ldr	r2, [pc, #116]	; (8003c20 <OS_TaskStat+0xa0>)
 8003baa:	6013      	str	r3, [r2, #0]
    if (OSIdleCtrMax == 0uL) {
 8003bac:	4b1c      	ldr	r3, [pc, #112]	; (8003c20 <OS_TaskStat+0xa0>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d105      	bne.n	8003bc0 <OS_TaskStat+0x40>
        OSCPUUsage = 0u;
 8003bb4:	4b1c      	ldr	r3, [pc, #112]	; (8003c28 <OS_TaskStat+0xa8>)
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	701a      	strb	r2, [r3, #0]
#if OS_TASK_SUSPEND_EN > 0u
        (void)OSTaskSuspend(OS_PRIO_SELF);
 8003bba:	20ff      	movs	r0, #255	; 0xff
 8003bbc:	f000 fd4a 	bl	8004654 <OSTaskSuspend>
        for (;;) {
            OSTimeDly(OS_TICKS_PER_SEC);
        }
#endif
    }
    OS_ENTER_CRITICAL();
 8003bc0:	f7fc fb00 	bl	80001c4 <OS_CPU_SR_Save>
 8003bc4:	60f8      	str	r0, [r7, #12]
    OSIdleCtr = OSIdleCtrMax * 100uL;            /* Set initial CPU usage as 0%                        */
 8003bc6:	4b16      	ldr	r3, [pc, #88]	; (8003c20 <OS_TaskStat+0xa0>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	2264      	movs	r2, #100	; 0x64
 8003bcc:	fb02 f303 	mul.w	r3, r2, r3
 8003bd0:	4a16      	ldr	r2, [pc, #88]	; (8003c2c <OS_TaskStat+0xac>)
 8003bd2:	6013      	str	r3, [r2, #0]
    OS_EXIT_CRITICAL();
 8003bd4:	68f8      	ldr	r0, [r7, #12]
 8003bd6:	f7fc faf9 	bl	80001cc <OS_CPU_SR_Restore>
    for (;;) {
        OS_ENTER_CRITICAL();
 8003bda:	f7fc faf3 	bl	80001c4 <OS_CPU_SR_Save>
 8003bde:	60f8      	str	r0, [r7, #12]
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
 8003be0:	4b12      	ldr	r3, [pc, #72]	; (8003c2c <OS_TaskStat+0xac>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a12      	ldr	r2, [pc, #72]	; (8003c30 <OS_TaskStat+0xb0>)
 8003be6:	6013      	str	r3, [r2, #0]
        OSIdleCtr    = 0uL;                      /* Reset the idle counter for the next second         */
 8003be8:	4b10      	ldr	r3, [pc, #64]	; (8003c2c <OS_TaskStat+0xac>)
 8003bea:	2200      	movs	r2, #0
 8003bec:	601a      	str	r2, [r3, #0]
        OS_EXIT_CRITICAL();
 8003bee:	68f8      	ldr	r0, [r7, #12]
 8003bf0:	f7fc faec 	bl	80001cc <OS_CPU_SR_Restore>
        OSCPUUsage   = (INT8U)(100uL - OSIdleCtrRun / OSIdleCtrMax);
 8003bf4:	4b0e      	ldr	r3, [pc, #56]	; (8003c30 <OS_TaskStat+0xb0>)
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	4b09      	ldr	r3, [pc, #36]	; (8003c20 <OS_TaskStat+0xa0>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8003c06:	b2da      	uxtb	r2, r3
 8003c08:	4b07      	ldr	r3, [pc, #28]	; (8003c28 <OS_TaskStat+0xa8>)
 8003c0a:	701a      	strb	r2, [r3, #0]
        OSTaskStatHook();                        /* Invoke user definable hook                         */
 8003c0c:	f7ff f8c4 	bl	8002d98 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0u) && (OS_TASK_CREATE_EXT_EN > 0u)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
 8003c10:	f000 f810 	bl	8003c34 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10u);       /* Accumulate OSIdleCtr for the next 1/10 second      */
 8003c14:	2064      	movs	r0, #100	; 0x64
 8003c16:	f000 fdc3 	bl	80047a0 <OSTimeDly>
    }
 8003c1a:	e7de      	b.n	8003bda <OS_TaskStat+0x5a>
 8003c1c:	20008b64 	.word	0x20008b64
 8003c20:	20006ecc 	.word	0x20006ecc
 8003c24:	51eb851f 	.word	0x51eb851f
 8003c28:	20006ed4 	.word	0x20006ed4
 8003c2c:	20006968 	.word	0x20006968
 8003c30:	20008c68 	.word	0x20008c68

08003c34 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0u) && (OS_TASK_CREATE_EXT_EN > 0u)
void  OS_TaskStatStkChk (void)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b084      	sub	sp, #16
 8003c38:	af00      	add	r7, sp, #0
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0u; prio <= OS_TASK_IDLE_PRIO; prio++) {
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	73fb      	strb	r3, [r7, #15]
 8003c3e:	e023      	b.n	8003c88 <OS_TaskStatStkChk+0x54>
        err = OSTaskStkChk(prio, &stk_data);
 8003c40:	463a      	mov	r2, r7
 8003c42:	7bfb      	ldrb	r3, [r7, #15]
 8003c44:	4611      	mov	r1, r2
 8003c46:	4618      	mov	r0, r3
 8003c48:	f000 fca4 	bl	8004594 <OSTaskStkChk>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	73bb      	strb	r3, [r7, #14]
        if (err == OS_ERR_NONE) {
 8003c50:	7bbb      	ldrb	r3, [r7, #14]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d115      	bne.n	8003c82 <OS_TaskStatStkChk+0x4e>
            ptcb = OSTCBPrioTbl[prio];
 8003c56:	7bfb      	ldrb	r3, [r7, #15]
 8003c58:	4a0f      	ldr	r2, [pc, #60]	; (8003c98 <OS_TaskStatStkChk+0x64>)
 8003c5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c5e:	60bb      	str	r3, [r7, #8]
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d00d      	beq.n	8003c82 <OS_TaskStatStkChk+0x4e>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d00a      	beq.n	8003c82 <OS_TaskStatStkChk+0x4e>
#if OS_TASK_PROFILE_EN > 0u
                    #if OS_STK_GROWTH == 1u
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	689a      	ldr	r2, [r3, #8]
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	009b      	lsls	r3, r3, #2
 8003c76:	441a      	add	r2, r3
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	649a      	str	r2, [r3, #72]	; 0x48
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store number of entries used   */
 8003c7c:	687a      	ldr	r2, [r7, #4]
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	64da      	str	r2, [r3, #76]	; 0x4c
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0u; prio <= OS_TASK_IDLE_PRIO; prio++) {
 8003c82:	7bfb      	ldrb	r3, [r7, #15]
 8003c84:	3301      	adds	r3, #1
 8003c86:	73fb      	strb	r3, [r7, #15]
 8003c88:	7bfb      	ldrb	r3, [r7, #15]
 8003c8a:	2b3f      	cmp	r3, #63	; 0x3f
 8003c8c:	d9d8      	bls.n	8003c40 <OS_TaskStatStkChk+0xc>
#endif
                }
            }
        }
    }
}
 8003c8e:	bf00      	nop
 8003c90:	3710      	adds	r7, #16
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	bf00      	nop
 8003c98:	20008b68 	.word	0x20008b68

08003c9c <OS_TCBInit>:
                   OS_STK  *pbos,
                   INT16U   id,
                   INT32U   stk_size,
                   void    *pext,
                   INT16U   opt)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b088      	sub	sp, #32
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	60b9      	str	r1, [r7, #8]
 8003ca4:	607a      	str	r2, [r7, #4]
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	4603      	mov	r3, r0
 8003caa:	73fb      	strb	r3, [r7, #15]
 8003cac:	4613      	mov	r3, r2
 8003cae:	81bb      	strh	r3, [r7, #12]
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0u;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	61bb      	str	r3, [r7, #24]
#if OS_TASK_REG_TBL_SIZE > 0u
    INT8U      i;
#endif


    OS_ENTER_CRITICAL();
 8003cb4:	f7fc fa86 	bl	80001c4 <OS_CPU_SR_Save>
 8003cb8:	61b8      	str	r0, [r7, #24]
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
 8003cba:	4b6a      	ldr	r3, [pc, #424]	; (8003e64 <OS_TCBInit+0x1c8>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	617b      	str	r3, [r7, #20]
    if (ptcb != (OS_TCB *)0) {
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	f000 80c6 	beq.w	8003e54 <OS_TCBInit+0x1b8>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	695b      	ldr	r3, [r3, #20]
 8003ccc:	4a65      	ldr	r2, [pc, #404]	; (8003e64 <OS_TCBInit+0x1c8>)
 8003cce:	6013      	str	r3, [r2, #0]
        OS_EXIT_CRITICAL();
 8003cd0:	69b8      	ldr	r0, [r7, #24]
 8003cd2:	f7fc fa7b 	bl	80001cc <OS_CPU_SR_Restore>
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	68ba      	ldr	r2, [r7, #8]
 8003cda:	601a      	str	r2, [r3, #0]
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	7bfa      	ldrb	r2, [r7, #15]
 8003ce0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        ptcb->OSTCBDly           = 0u;                     /* Task is not delayed                      */
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	631a      	str	r2, [r3, #48]	; 0x30

#if OS_TASK_CREATE_EXT_EN > 0u
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cfe:	605a      	str	r2, [r3, #4]
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d04:	60da      	str	r2, [r3, #12]
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	609a      	str	r2, [r3, #8]
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8003d10:	821a      	strh	r2, [r3, #16]
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	89ba      	ldrh	r2, [r7, #12]
 8003d16:	825a      	strh	r2, [r3, #18]
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0u
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
#endif

#if OS_LOWEST_PRIO <= 63u                                         /* Pre-compute X, Y                  */
        ptcb->OSTCBY             = (INT8U)(prio >> 3u);
 8003d20:	7bfb      	ldrb	r3, [r7, #15]
 8003d22:	08db      	lsrs	r3, r3, #3
 8003d24:	b2da      	uxtb	r2, r3
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        ptcb->OSTCBX             = (INT8U)(prio & 0x07u);
 8003d2c:	7bfb      	ldrb	r3, [r7, #15]
 8003d2e:	f003 0307 	and.w	r3, r3, #7
 8003d32:	b2da      	uxtb	r2, r3
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
#else                                                             /* Pre-compute X, Y                  */
        ptcb->OSTCBY             = (INT8U)((INT8U)(prio >> 4u) & 0xFFu);
        ptcb->OSTCBX             = (INT8U) (prio & 0x0Fu);
#endif
                                                                  /* Pre-compute BitX and BitY         */
        ptcb->OSTCBBitY          = (OS_PRIO)(1uL << ptcb->OSTCBY);
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003d40:	461a      	mov	r2, r3
 8003d42:	2301      	movs	r3, #1
 8003d44:	4093      	lsls	r3, r2
 8003d46:	b2da      	uxtb	r2, r3
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        ptcb->OSTCBBitX          = (OS_PRIO)(1uL << ptcb->OSTCBX);
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8003d54:	461a      	mov	r2, r3
 8003d56:	2301      	movs	r3, #1
 8003d58:	4093      	lsls	r3, r2
 8003d5a:	b2da      	uxtb	r2, r3
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	2200      	movs	r2, #0
 8003d66:	61da      	str	r2, [r3, #28]
#if (OS_EVENT_MULTI_EN > 0u)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	621a      	str	r2, [r3, #32]
#endif
#endif

#if (OS_FLAG_EN > 0u) && (OS_MAX_FLAGS > 0u) && (OS_TASK_DEL_EN > 0u)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	2200      	movs	r2, #0
 8003d72:	629a      	str	r2, [r3, #40]	; 0x28
#endif

#if (OS_MBOX_EN > 0u) || ((OS_Q_EN > 0u) && (OS_MAX_QS > 0u))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	2200      	movs	r2, #0
 8003d78:	625a      	str	r2, [r3, #36]	; 0x24
#endif

#if OS_TASK_PROFILE_EN > 0u
        ptcb->OSTCBCtxSwCtr    = 0uL;                      /* Initialize profiling variables           */
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	63da      	str	r2, [r3, #60]	; 0x3c
        ptcb->OSTCBCyclesStart = 0uL;
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	2200      	movs	r2, #0
 8003d84:	645a      	str	r2, [r3, #68]	; 0x44
        ptcb->OSTCBCyclesTot   = 0uL;
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	641a      	str	r2, [r3, #64]	; 0x40
        ptcb->OSTCBStkBase     = (OS_STK *)0;
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	649a      	str	r2, [r3, #72]	; 0x48
        ptcb->OSTCBStkUsed     = 0uL;
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	2200      	movs	r2, #0
 8003d96:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

#if OS_TASK_NAME_EN > 0u
        ptcb->OSTCBTaskName    = (INT8U *)(void *)"?";
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	4a33      	ldr	r2, [pc, #204]	; (8003e68 <OS_TCBInit+0x1cc>)
 8003d9c:	651a      	str	r2, [r3, #80]	; 0x50
#endif

#if OS_TASK_REG_TBL_SIZE > 0u                              /* Initialize the task variables            */
        for (i = 0u; i < OS_TASK_REG_TBL_SIZE; i++) {
 8003d9e:	2300      	movs	r3, #0
 8003da0:	77fb      	strb	r3, [r7, #31]
 8003da2:	e009      	b.n	8003db8 <OS_TCBInit+0x11c>
            ptcb->OSTCBRegTbl[i] = 0u;
 8003da4:	7ffb      	ldrb	r3, [r7, #31]
 8003da6:	697a      	ldr	r2, [r7, #20]
 8003da8:	3314      	adds	r3, #20
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	4413      	add	r3, r2
 8003dae:	2200      	movs	r2, #0
 8003db0:	605a      	str	r2, [r3, #4]
#if OS_TASK_NAME_EN > 0u
        ptcb->OSTCBTaskName    = (INT8U *)(void *)"?";
#endif

#if OS_TASK_REG_TBL_SIZE > 0u                              /* Initialize the task variables            */
        for (i = 0u; i < OS_TASK_REG_TBL_SIZE; i++) {
 8003db2:	7ffb      	ldrb	r3, [r7, #31]
 8003db4:	3301      	adds	r3, #1
 8003db6:	77fb      	strb	r3, [r7, #31]
 8003db8:	7ffb      	ldrb	r3, [r7, #31]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d0f2      	beq.n	8003da4 <OS_TCBInit+0x108>
            ptcb->OSTCBRegTbl[i] = 0u;
        }
#endif

        OSTCBInitHook(ptcb);
 8003dbe:	6978      	ldr	r0, [r7, #20]
 8003dc0:	f7ff f872 	bl	8002ea8 <OSTCBInitHook>

        OS_ENTER_CRITICAL();
 8003dc4:	f7fc f9fe 	bl	80001c4 <OS_CPU_SR_Save>
 8003dc8:	61b8      	str	r0, [r7, #24]
        OSTCBPrioTbl[prio] = ptcb;
 8003dca:	7bfb      	ldrb	r3, [r7, #15]
 8003dcc:	4927      	ldr	r1, [pc, #156]	; (8003e6c <OS_TCBInit+0x1d0>)
 8003dce:	697a      	ldr	r2, [r7, #20]
 8003dd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        OS_EXIT_CRITICAL();
 8003dd4:	69b8      	ldr	r0, [r7, #24]
 8003dd6:	f7fc f9f9 	bl	80001cc <OS_CPU_SR_Restore>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
 8003dda:	6978      	ldr	r0, [r7, #20]
 8003ddc:	f7fe ffb2 	bl	8002d44 <OSTaskCreateHook>

        OS_ENTER_CRITICAL();
 8003de0:	f7fc f9f0 	bl	80001c4 <OS_CPU_SR_Save>
 8003de4:	61b8      	str	r0, [r7, #24]
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
 8003de6:	4b22      	ldr	r3, [pc, #136]	; (8003e70 <OS_TCBInit+0x1d4>)
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	615a      	str	r2, [r3, #20]
        ptcb->OSTCBPrev    = (OS_TCB *)0;
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	2200      	movs	r2, #0
 8003df2:	619a      	str	r2, [r3, #24]
        if (OSTCBList != (OS_TCB *)0) {
 8003df4:	4b1e      	ldr	r3, [pc, #120]	; (8003e70 <OS_TCBInit+0x1d4>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d003      	beq.n	8003e04 <OS_TCBInit+0x168>
            OSTCBList->OSTCBPrev = ptcb;
 8003dfc:	4b1c      	ldr	r3, [pc, #112]	; (8003e70 <OS_TCBInit+0x1d4>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	697a      	ldr	r2, [r7, #20]
 8003e02:	619a      	str	r2, [r3, #24]
        }
        OSTCBList               = ptcb;
 8003e04:	4a1a      	ldr	r2, [pc, #104]	; (8003e70 <OS_TCBInit+0x1d4>)
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	6013      	str	r3, [r2, #0]
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
 8003e10:	4b18      	ldr	r3, [pc, #96]	; (8003e74 <OS_TCBInit+0x1d8>)
 8003e12:	781b      	ldrb	r3, [r3, #0]
 8003e14:	4313      	orrs	r3, r2
 8003e16:	b2da      	uxtb	r2, r3
 8003e18:	4b16      	ldr	r3, [pc, #88]	; (8003e74 <OS_TCBInit+0x1d8>)
 8003e1a:	701a      	strb	r2, [r3, #0]
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003e22:	4619      	mov	r1, r3
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	4b12      	ldr	r3, [pc, #72]	; (8003e78 <OS_TCBInit+0x1dc>)
 8003e2e:	5c9a      	ldrb	r2, [r3, r2]
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003e36:	4313      	orrs	r3, r2
 8003e38:	b2da      	uxtb	r2, r3
 8003e3a:	4b0f      	ldr	r3, [pc, #60]	; (8003e78 <OS_TCBInit+0x1dc>)
 8003e3c:	545a      	strb	r2, [r3, r1]
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
 8003e3e:	4b0f      	ldr	r3, [pc, #60]	; (8003e7c <OS_TCBInit+0x1e0>)
 8003e40:	781b      	ldrb	r3, [r3, #0]
 8003e42:	3301      	adds	r3, #1
 8003e44:	b2da      	uxtb	r2, r3
 8003e46:	4b0d      	ldr	r3, [pc, #52]	; (8003e7c <OS_TCBInit+0x1e0>)
 8003e48:	701a      	strb	r2, [r3, #0]
        OS_EXIT_CRITICAL();
 8003e4a:	69b8      	ldr	r0, [r7, #24]
 8003e4c:	f7fc f9be 	bl	80001cc <OS_CPU_SR_Restore>
        return (OS_ERR_NONE);
 8003e50:	2300      	movs	r3, #0
 8003e52:	e003      	b.n	8003e5c <OS_TCBInit+0x1c0>
    }
    OS_EXIT_CRITICAL();
 8003e54:	69b8      	ldr	r0, [r7, #24]
 8003e56:	f7fc f9b9 	bl	80001cc <OS_CPU_SR_Restore>
    return (OS_ERR_TASK_NO_MORE_TCB);
 8003e5a:	2342      	movs	r3, #66	; 0x42
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3720      	adds	r7, #32
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}
 8003e64:	20006ed0 	.word	0x20006ed0
 8003e68:	08007ae0 	.word	0x08007ae0
 8003e6c:	20008b68 	.word	0x20008b68
 8003e70:	20006c44 	.word	0x20006c44
 8003e74:	20006f44 	.word	0x20006f44
 8003e78:	20006f48 	.word	0x20006f48
 8003e7c:	20006ed5 	.word	0x20006ed5

08003e80 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b084      	sub	sp, #16
 8003e84:	af00      	add	r7, sp, #0
    INT16U        ix_next;
    OS_FLAG_GRP  *pgrp1;
    OS_FLAG_GRP  *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
 8003e86:	2150      	movs	r1, #80	; 0x50
 8003e88:	481b      	ldr	r0, [pc, #108]	; (8003ef8 <OS_FlagInit+0x78>)
 8003e8a:	f7ff fde5 	bl	8003a58 <OS_MemClr>
    for (ix = 0u; ix < (OS_MAX_FLAGS - 1u); ix++) {                 /* Init. list of free EVENT FLAGS  */
 8003e8e:	2300      	movs	r3, #0
 8003e90:	81fb      	strh	r3, [r7, #14]
 8003e92:	e018      	b.n	8003ec6 <OS_FlagInit+0x46>
        ix_next = ix + 1u;
 8003e94:	89fb      	ldrh	r3, [r7, #14]
 8003e96:	3301      	adds	r3, #1
 8003e98:	81bb      	strh	r3, [r7, #12]
        pgrp1 = &OSFlagTbl[ix];
 8003e9a:	89fb      	ldrh	r3, [r7, #14]
 8003e9c:	011b      	lsls	r3, r3, #4
 8003e9e:	4a16      	ldr	r2, [pc, #88]	; (8003ef8 <OS_FlagInit+0x78>)
 8003ea0:	4413      	add	r3, r2
 8003ea2:	60bb      	str	r3, [r7, #8]
        pgrp2 = &OSFlagTbl[ix_next];
 8003ea4:	89bb      	ldrh	r3, [r7, #12]
 8003ea6:	011b      	lsls	r3, r3, #4
 8003ea8:	4a13      	ldr	r2, [pc, #76]	; (8003ef8 <OS_FlagInit+0x78>)
 8003eaa:	4413      	add	r3, r2
 8003eac:	607b      	str	r3, [r7, #4]
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	701a      	strb	r2, [r3, #0]
        pgrp1->OSFlagWaitList = (void *)pgrp2;
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	605a      	str	r2, [r3, #4]
#if OS_FLAG_NAME_EN > 0u
        pgrp1->OSFlagName     = (INT8U *)(void *)"?";               /* Unknown name                    */
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	4a0f      	ldr	r2, [pc, #60]	; (8003efc <OS_FlagInit+0x7c>)
 8003ebe:	60da      	str	r2, [r3, #12]
    OS_FLAG_GRP  *pgrp1;
    OS_FLAG_GRP  *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    for (ix = 0u; ix < (OS_MAX_FLAGS - 1u); ix++) {                 /* Init. list of free EVENT FLAGS  */
 8003ec0:	89fb      	ldrh	r3, [r7, #14]
 8003ec2:	3301      	adds	r3, #1
 8003ec4:	81fb      	strh	r3, [r7, #14]
 8003ec6:	89fb      	ldrh	r3, [r7, #14]
 8003ec8:	2b03      	cmp	r3, #3
 8003eca:	d9e3      	bls.n	8003e94 <OS_FlagInit+0x14>
        pgrp1->OSFlagWaitList = (void *)pgrp2;
#if OS_FLAG_NAME_EN > 0u
        pgrp1->OSFlagName     = (INT8U *)(void *)"?";               /* Unknown name                    */
#endif
    }
    pgrp1                 = &OSFlagTbl[ix];
 8003ecc:	89fb      	ldrh	r3, [r7, #14]
 8003ece:	011b      	lsls	r3, r3, #4
 8003ed0:	4a09      	ldr	r2, [pc, #36]	; (8003ef8 <OS_FlagInit+0x78>)
 8003ed2:	4413      	add	r3, r2
 8003ed4:	60bb      	str	r3, [r7, #8]
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	701a      	strb	r2, [r3, #0]
    pgrp1->OSFlagWaitList = (void *)0;
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	605a      	str	r2, [r3, #4]
#if OS_FLAG_NAME_EN > 0u
    pgrp1->OSFlagName     = (INT8U *)(void *)"?";                   /* Unknown name                    */
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	4a05      	ldr	r2, [pc, #20]	; (8003efc <OS_FlagInit+0x7c>)
 8003ee6:	60da      	str	r2, [r3, #12]
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
 8003ee8:	4b05      	ldr	r3, [pc, #20]	; (8003f00 <OS_FlagInit+0x80>)
 8003eea:	4a03      	ldr	r2, [pc, #12]	; (8003ef8 <OS_FlagInit+0x78>)
 8003eec:	601a      	str	r2, [r3, #0]
#endif
}
 8003eee:	bf00      	nop
 8003ef0:	3710      	adds	r7, #16
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	bf00      	nop
 8003ef8:	20006970 	.word	0x20006970
 8003efc:	08007b04 	.word	0x08007b04
 8003f00:	20008b60 	.word	0x20008b60

08003f04 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b087      	sub	sp, #28
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	617b      	str	r3, [r7, #20]
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	613b      	str	r3, [r7, #16]
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d10c      	bne.n	8003f38 <OS_FlagUnlink+0x34>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	68db      	ldr	r3, [r3, #12]
 8003f22:	60fb      	str	r3, [r7, #12]
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	693a      	ldr	r2, [r7, #16]
 8003f28:	605a      	str	r2, [r3, #4]
        if (pnode_next != (OS_FLAG_NODE *)0) {
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d00c      	beq.n	8003f4a <OS_FlagUnlink+0x46>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	2200      	movs	r2, #0
 8003f34:	605a      	str	r2, [r3, #4]
 8003f36:	e008      	b.n	8003f4a <OS_FlagUnlink+0x46>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	693a      	ldr	r2, [r7, #16]
 8003f3c:	601a      	str	r2, [r3, #0]
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d002      	beq.n	8003f4a <OS_FlagUnlink+0x46>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	697a      	ldr	r2, [r7, #20]
 8003f48:	605a      	str	r2, [r3, #4]
        }
    }
#if OS_TASK_DEL_EN > 0u
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	60bb      	str	r3, [r7, #8]
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	2200      	movs	r2, #0
 8003f54:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
 8003f56:	bf00      	nop
 8003f58:	371c      	adds	r7, #28
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bc80      	pop	{r7}
 8003f5e:	4770      	bx	lr

08003f60 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b082      	sub	sp, #8
 8003f64:	af00      	add	r7, sp, #0
#if OS_MAX_MEM_PART >= 2u
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
 8003f66:	2178      	movs	r1, #120	; 0x78
 8003f68:	481a      	ldr	r0, [pc, #104]	; (8003fd4 <OS_MemInit+0x74>)
 8003f6a:	f7ff fd75 	bl	8003a58 <OS_MemClr>
    for (i = 0u; i < (OS_MAX_MEM_PART - 1u); i++) {       /* Init. list of free memory partitions      */
 8003f6e:	2300      	movs	r3, #0
 8003f70:	80fb      	strh	r3, [r7, #6]
 8003f72:	e017      	b.n	8003fa4 <OS_MemInit+0x44>
        pmem                = &OSMemTbl[i];               /* Point to memory control block (MCB)       */
 8003f74:	88fa      	ldrh	r2, [r7, #6]
 8003f76:	4613      	mov	r3, r2
 8003f78:	005b      	lsls	r3, r3, #1
 8003f7a:	4413      	add	r3, r2
 8003f7c:	00db      	lsls	r3, r3, #3
 8003f7e:	4a15      	ldr	r2, [pc, #84]	; (8003fd4 <OS_MemInit+0x74>)
 8003f80:	4413      	add	r3, r2
 8003f82:	603b      	str	r3, [r7, #0]
        pmem->OSMemFreeList = (void *)&OSMemTbl[i + 1u];  /* Chain list of free partitions             */
 8003f84:	88fb      	ldrh	r3, [r7, #6]
 8003f86:	1c5a      	adds	r2, r3, #1
 8003f88:	4613      	mov	r3, r2
 8003f8a:	005b      	lsls	r3, r3, #1
 8003f8c:	4413      	add	r3, r2
 8003f8e:	00db      	lsls	r3, r3, #3
 8003f90:	4a10      	ldr	r2, [pc, #64]	; (8003fd4 <OS_MemInit+0x74>)
 8003f92:	441a      	add	r2, r3
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	605a      	str	r2, [r3, #4]
#if OS_MEM_NAME_EN > 0u
        pmem->OSMemName  = (INT8U *)(void *)"?";
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	4a0f      	ldr	r2, [pc, #60]	; (8003fd8 <OS_MemInit+0x78>)
 8003f9c:	615a      	str	r2, [r3, #20]
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    for (i = 0u; i < (OS_MAX_MEM_PART - 1u); i++) {       /* Init. list of free memory partitions      */
 8003f9e:	88fb      	ldrh	r3, [r7, #6]
 8003fa0:	3301      	adds	r3, #1
 8003fa2:	80fb      	strh	r3, [r7, #6]
 8003fa4:	88fb      	ldrh	r3, [r7, #6]
 8003fa6:	2b03      	cmp	r3, #3
 8003fa8:	d9e4      	bls.n	8003f74 <OS_MemInit+0x14>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i + 1u];  /* Chain list of free partitions             */
#if OS_MEM_NAME_EN > 0u
        pmem->OSMemName  = (INT8U *)(void *)"?";
#endif
    }
    pmem                = &OSMemTbl[i];
 8003faa:	88fa      	ldrh	r2, [r7, #6]
 8003fac:	4613      	mov	r3, r2
 8003fae:	005b      	lsls	r3, r3, #1
 8003fb0:	4413      	add	r3, r2
 8003fb2:	00db      	lsls	r3, r3, #3
 8003fb4:	4a07      	ldr	r2, [pc, #28]	; (8003fd4 <OS_MemInit+0x74>)
 8003fb6:	4413      	add	r3, r2
 8003fb8:	603b      	str	r3, [r7, #0]
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	605a      	str	r2, [r3, #4]
#if OS_MEM_NAME_EN > 0u
    pmem->OSMemName = (INT8U *)(void *)"?";
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	4a05      	ldr	r2, [pc, #20]	; (8003fd8 <OS_MemInit+0x78>)
 8003fc4:	615a      	str	r2, [r3, #20]
#endif

    OSMemFreeList   = &OSMemTbl[0];                       /* Point to beginning of free list           */
 8003fc6:	4b05      	ldr	r3, [pc, #20]	; (8003fdc <OS_MemInit+0x7c>)
 8003fc8:	4a02      	ldr	r2, [pc, #8]	; (8003fd4 <OS_MemInit+0x74>)
 8003fca:	601a      	str	r2, [r3, #0]
#endif
}
 8003fcc:	bf00      	nop
 8003fce:	3708      	adds	r7, #8
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}
 8003fd4:	20006c48 	.word	0x20006c48
 8003fd8:	08007b08 	.word	0x08007b08
 8003fdc:	20006ed8 	.word	0x20006ed8

08003fe0 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b084      	sub	sp, #16
 8003fe4:	af00      	add	r7, sp, #0
    OS_Q    *pq1;
    OS_Q    *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
 8003fe6:	2160      	movs	r1, #96	; 0x60
 8003fe8:	4819      	ldr	r0, [pc, #100]	; (8004050 <OS_QInit+0x70>)
 8003fea:	f7ff fd35 	bl	8003a58 <OS_MemClr>
    for (ix = 0u; ix < (OS_MAX_QS - 1u); ix++) {     /* Init. list of free QUEUE control blocks        */
 8003fee:	2300      	movs	r3, #0
 8003ff0:	81fb      	strh	r3, [r7, #14]
 8003ff2:	e018      	b.n	8004026 <OS_QInit+0x46>
        ix_next = ix + 1u;
 8003ff4:	89fb      	ldrh	r3, [r7, #14]
 8003ff6:	3301      	adds	r3, #1
 8003ff8:	81bb      	strh	r3, [r7, #12]
        pq1 = &OSQTbl[ix];
 8003ffa:	89fa      	ldrh	r2, [r7, #14]
 8003ffc:	4613      	mov	r3, r2
 8003ffe:	005b      	lsls	r3, r3, #1
 8004000:	4413      	add	r3, r2
 8004002:	00db      	lsls	r3, r3, #3
 8004004:	4a12      	ldr	r2, [pc, #72]	; (8004050 <OS_QInit+0x70>)
 8004006:	4413      	add	r3, r2
 8004008:	60bb      	str	r3, [r7, #8]
        pq2 = &OSQTbl[ix_next];
 800400a:	89ba      	ldrh	r2, [r7, #12]
 800400c:	4613      	mov	r3, r2
 800400e:	005b      	lsls	r3, r3, #1
 8004010:	4413      	add	r3, r2
 8004012:	00db      	lsls	r3, r3, #3
 8004014:	4a0e      	ldr	r2, [pc, #56]	; (8004050 <OS_QInit+0x70>)
 8004016:	4413      	add	r3, r2
 8004018:	607b      	str	r3, [r7, #4]
        pq1->OSQPtr = pq2;
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	687a      	ldr	r2, [r7, #4]
 800401e:	601a      	str	r2, [r3, #0]
    OS_Q    *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    for (ix = 0u; ix < (OS_MAX_QS - 1u); ix++) {     /* Init. list of free QUEUE control blocks        */
 8004020:	89fb      	ldrh	r3, [r7, #14]
 8004022:	3301      	adds	r3, #1
 8004024:	81fb      	strh	r3, [r7, #14]
 8004026:	89fb      	ldrh	r3, [r7, #14]
 8004028:	2b02      	cmp	r3, #2
 800402a:	d9e3      	bls.n	8003ff4 <OS_QInit+0x14>
        ix_next = ix + 1u;
        pq1 = &OSQTbl[ix];
        pq2 = &OSQTbl[ix_next];
        pq1->OSQPtr = pq2;
    }
    pq1         = &OSQTbl[ix];
 800402c:	89fa      	ldrh	r2, [r7, #14]
 800402e:	4613      	mov	r3, r2
 8004030:	005b      	lsls	r3, r3, #1
 8004032:	4413      	add	r3, r2
 8004034:	00db      	lsls	r3, r3, #3
 8004036:	4a06      	ldr	r2, [pc, #24]	; (8004050 <OS_QInit+0x70>)
 8004038:	4413      	add	r3, r2
 800403a:	60bb      	str	r3, [r7, #8]
    pq1->OSQPtr = (OS_Q *)0;
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	2200      	movs	r2, #0
 8004040:	601a      	str	r2, [r3, #0]
    OSQFreeList = &OSQTbl[0];
 8004042:	4b04      	ldr	r3, [pc, #16]	; (8004054 <OS_QInit+0x74>)
 8004044:	4a02      	ldr	r2, [pc, #8]	; (8004050 <OS_QInit+0x70>)
 8004046:	601a      	str	r2, [r3, #0]
#endif
}
 8004048:	bf00      	nop
 800404a:	3710      	adds	r7, #16
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}
 8004050:	20006edc 	.word	0x20006edc
 8004054:	20006f40 	.word	0x20006f40

08004058 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b084      	sub	sp, #16
 800405c:	af00      	add	r7, sp, #0
 800405e:	4603      	mov	r3, r0
 8004060:	80fb      	strh	r3, [r7, #6]
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3u                               /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0u;
 8004062:	2300      	movs	r3, #0
 8004064:	60fb      	str	r3, [r7, #12]
        OS_SAFETY_CRITICAL_EXCEPTION();
        return ((OS_EVENT *)0);
    }
#endif

    if (OSIntNesting > 0u) {                               /* See if called from ISR ...               */
 8004066:	4b17      	ldr	r3, [pc, #92]	; (80040c4 <OSSemCreate+0x6c>)
 8004068:	781b      	ldrb	r3, [r3, #0]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d001      	beq.n	8004072 <OSSemCreate+0x1a>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
 800406e:	2300      	movs	r3, #0
 8004070:	e024      	b.n	80040bc <OSSemCreate+0x64>
    }
    OS_ENTER_CRITICAL();
 8004072:	f7fc f8a7 	bl	80001c4 <OS_CPU_SR_Save>
 8004076:	60f8      	str	r0, [r7, #12]
    pevent = OSEventFreeList;                              /* Get next free event control block        */
 8004078:	4b13      	ldr	r3, [pc, #76]	; (80040c8 <OSSemCreate+0x70>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	60bb      	str	r3, [r7, #8]
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
 800407e:	4b12      	ldr	r3, [pc, #72]	; (80040c8 <OSSemCreate+0x70>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d004      	beq.n	8004090 <OSSemCreate+0x38>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 8004086:	4b10      	ldr	r3, [pc, #64]	; (80040c8 <OSSemCreate+0x70>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	4a0e      	ldr	r2, [pc, #56]	; (80040c8 <OSSemCreate+0x70>)
 800408e:	6013      	str	r3, [r2, #0]
    }
    OS_EXIT_CRITICAL();
 8004090:	68f8      	ldr	r0, [r7, #12]
 8004092:	f7fc f89b 	bl	80001cc <OS_CPU_SR_Restore>
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d00e      	beq.n	80040ba <OSSemCreate+0x62>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	2203      	movs	r2, #3
 80040a0:	701a      	strb	r2, [r3, #0]
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	88fa      	ldrh	r2, [r7, #6]
 80040a6:	811a      	strh	r2, [r3, #8]
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	2200      	movs	r2, #0
 80040ac:	605a      	str	r2, [r3, #4]
#if OS_EVENT_NAME_EN > 0u
        pevent->OSEventName    = (INT8U *)(void *)"?";
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	4a06      	ldr	r2, [pc, #24]	; (80040cc <OSSemCreate+0x74>)
 80040b2:	615a      	str	r2, [r3, #20]
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
 80040b4:	68b8      	ldr	r0, [r7, #8]
 80040b6:	f7ff fb61 	bl	800377c <OS_EventWaitListInit>
    }
    return (pevent);
 80040ba:	68bb      	ldr	r3, [r7, #8]
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3710      	adds	r7, #16
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}
 80040c4:	20007154 	.word	0x20007154
 80040c8:	20007150 	.word	0x20007150
 80040cc:	08007b0c 	.word	0x08007b0c

080040d0 <OSSemPend>:
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT  *pevent,
                 INT32U     timeout,
                 INT8U     *perr)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b086      	sub	sp, #24
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	60f8      	str	r0, [r7, #12]
 80040d8:	60b9      	str	r1, [r7, #8]
 80040da:	607a      	str	r2, [r7, #4]
#if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0u;
 80040dc:	2300      	movs	r3, #0
 80040de:	617b      	str	r3, [r7, #20]
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
        *perr = OS_ERR_PEVENT_NULL;
        return;
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	781b      	ldrb	r3, [r3, #0]
 80040e4:	2b03      	cmp	r3, #3
 80040e6:	d003      	beq.n	80040f0 <OSSemPend+0x20>
        *perr = OS_ERR_EVENT_TYPE;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2201      	movs	r2, #1
 80040ec:	701a      	strb	r2, [r3, #0]
        return;
 80040ee:	e072      	b.n	80041d6 <OSSemPend+0x106>
    }
    if (OSIntNesting > 0u) {                          /* See if called from ISR ...                    */
 80040f0:	4b3a      	ldr	r3, [pc, #232]	; (80041dc <OSSemPend+0x10c>)
 80040f2:	781b      	ldrb	r3, [r3, #0]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d003      	beq.n	8004100 <OSSemPend+0x30>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2202      	movs	r2, #2
 80040fc:	701a      	strb	r2, [r3, #0]
        return;
 80040fe:	e06a      	b.n	80041d6 <OSSemPend+0x106>
    }
    if (OSLockNesting > 0u) {                         /* See if called with scheduler locked ...       */
 8004100:	4b37      	ldr	r3, [pc, #220]	; (80041e0 <OSSemPend+0x110>)
 8004102:	781b      	ldrb	r3, [r3, #0]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d003      	beq.n	8004110 <OSSemPend+0x40>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	220d      	movs	r2, #13
 800410c:	701a      	strb	r2, [r3, #0]
        return;
 800410e:	e062      	b.n	80041d6 <OSSemPend+0x106>
    }
    OS_ENTER_CRITICAL();
 8004110:	f7fc f858 	bl	80001c4 <OS_CPU_SR_Save>
 8004114:	6178      	str	r0, [r7, #20]
    if (pevent->OSEventCnt > 0u) {                    /* If sem. is positive, resource available ...   */
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	891b      	ldrh	r3, [r3, #8]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d00c      	beq.n	8004138 <OSSemPend+0x68>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	891b      	ldrh	r3, [r3, #8]
 8004122:	3b01      	subs	r3, #1
 8004124:	b29a      	uxth	r2, r3
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	811a      	strh	r2, [r3, #8]
        OS_EXIT_CRITICAL();
 800412a:	6978      	ldr	r0, [r7, #20]
 800412c:	f7fc f84e 	bl	80001cc <OS_CPU_SR_Restore>
        *perr = OS_ERR_NONE;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2200      	movs	r2, #0
 8004134:	701a      	strb	r2, [r3, #0]
        return;
 8004136:	e04e      	b.n	80041d6 <OSSemPend+0x106>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
 8004138:	4b2a      	ldr	r3, [pc, #168]	; (80041e4 <OSSemPend+0x114>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a29      	ldr	r2, [pc, #164]	; (80041e4 <OSSemPend+0x114>)
 800413e:	6812      	ldr	r2, [r2, #0]
 8004140:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8004144:	f042 0201 	orr.w	r2, r2, #1
 8004148:	b2d2      	uxtb	r2, r2
 800414a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 800414e:	4b25      	ldr	r3, [pc, #148]	; (80041e4 <OSSemPend+0x114>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	2200      	movs	r2, #0
 8004154:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
 8004158:	4b22      	ldr	r3, [pc, #136]	; (80041e4 <OSSemPend+0x114>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	68ba      	ldr	r2, [r7, #8]
 800415e:	631a      	str	r2, [r3, #48]	; 0x30
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
 8004160:	68f8      	ldr	r0, [r7, #12]
 8004162:	f7ff fa41 	bl	80035e8 <OS_EventTaskWait>
    OS_EXIT_CRITICAL();
 8004166:	6978      	ldr	r0, [r7, #20]
 8004168:	f7fc f830 	bl	80001cc <OS_CPU_SR_Restore>
    OS_Sched();                                       /* Find next highest priority task ready         */
 800416c:	f7ff fc8c 	bl	8003a88 <OS_Sched>
    OS_ENTER_CRITICAL();
 8004170:	f7fc f828 	bl	80001c4 <OS_CPU_SR_Save>
 8004174:	6178      	str	r0, [r7, #20]
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 8004176:	4b1b      	ldr	r3, [pc, #108]	; (80041e4 <OSSemPend+0x114>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800417e:	2b00      	cmp	r3, #0
 8004180:	d002      	beq.n	8004188 <OSSemPend+0xb8>
 8004182:	2b02      	cmp	r3, #2
 8004184:	d004      	beq.n	8004190 <OSSemPend+0xc0>
 8004186:	e007      	b.n	8004198 <OSSemPend+0xc8>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2200      	movs	r2, #0
 800418c:	701a      	strb	r2, [r3, #0]
             break;
 800418e:	e00d      	b.n	80041ac <OSSemPend+0xdc>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	220e      	movs	r2, #14
 8004194:	701a      	strb	r2, [r3, #0]
             break;
 8004196:	e009      	b.n	80041ac <OSSemPend+0xdc>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
 8004198:	4b12      	ldr	r3, [pc, #72]	; (80041e4 <OSSemPend+0x114>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	68f9      	ldr	r1, [r7, #12]
 800419e:	4618      	mov	r0, r3
 80041a0:	f7ff fa7a 	bl	8003698 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	220a      	movs	r2, #10
 80041a8:	701a      	strb	r2, [r3, #0]
             break;
 80041aa:	bf00      	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 80041ac:	4b0d      	ldr	r3, [pc, #52]	; (80041e4 <OSSemPend+0x114>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	2200      	movs	r2, #0
 80041b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 80041b6:	4b0b      	ldr	r3, [pc, #44]	; (80041e4 <OSSemPend+0x114>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	2200      	movs	r2, #0
 80041bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 80041c0:	4b08      	ldr	r3, [pc, #32]	; (80041e4 <OSSemPend+0x114>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	2200      	movs	r2, #0
 80041c6:	61da      	str	r2, [r3, #28]
#if (OS_EVENT_MULTI_EN > 0u)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 80041c8:	4b06      	ldr	r3, [pc, #24]	; (80041e4 <OSSemPend+0x114>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	2200      	movs	r2, #0
 80041ce:	621a      	str	r2, [r3, #32]
#endif
    OS_EXIT_CRITICAL();
 80041d0:	6978      	ldr	r0, [r7, #20]
 80041d2:	f7fb fffb 	bl	80001cc <OS_CPU_SR_Restore>
}
 80041d6:	3718      	adds	r7, #24
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}
 80041dc:	20007154 	.word	0x20007154
 80041e0:	2000695c 	.word	0x2000695c
 80041e4:	20007158 	.word	0x20007158

080041e8 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b084      	sub	sp, #16
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
#if OS_CRITICAL_METHOD == 3u                          /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0u;
 80041f0:	2300      	movs	r3, #0
 80041f2:	60fb      	str	r3, [r7, #12]
#if OS_ARG_CHK_EN > 0u
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
        return (OS_ERR_PEVENT_NULL);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	781b      	ldrb	r3, [r3, #0]
 80041f8:	2b03      	cmp	r3, #3
 80041fa:	d001      	beq.n	8004200 <OSSemPost+0x18>
        return (OS_ERR_EVENT_TYPE);
 80041fc:	2301      	movs	r3, #1
 80041fe:	e028      	b.n	8004252 <OSSemPost+0x6a>
    }
    OS_ENTER_CRITICAL();
 8004200:	f7fb ffe0 	bl	80001c4 <OS_CPU_SR_Save>
 8004204:	60f8      	str	r0, [r7, #12]
    if (pevent->OSEventGrp != 0u) {                   /* See if any task waiting for semaphore         */
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	7a9b      	ldrb	r3, [r3, #10]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d00c      	beq.n	8004228 <OSSemPost+0x40>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
 800420e:	2300      	movs	r3, #0
 8004210:	2201      	movs	r2, #1
 8004212:	2100      	movs	r1, #0
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f7ff f975 	bl	8003504 <OS_EventTaskRdy>
        OS_EXIT_CRITICAL();
 800421a:	68f8      	ldr	r0, [r7, #12]
 800421c:	f7fb ffd6 	bl	80001cc <OS_CPU_SR_Restore>
        OS_Sched();                                   /* Find HPT ready to run                         */
 8004220:	f7ff fc32 	bl	8003a88 <OS_Sched>
        return (OS_ERR_NONE);
 8004224:	2300      	movs	r3, #0
 8004226:	e014      	b.n	8004252 <OSSemPost+0x6a>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	891b      	ldrh	r3, [r3, #8]
 800422c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004230:	4293      	cmp	r3, r2
 8004232:	d00a      	beq.n	800424a <OSSemPost+0x62>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	891b      	ldrh	r3, [r3, #8]
 8004238:	3301      	adds	r3, #1
 800423a:	b29a      	uxth	r2, r3
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	811a      	strh	r2, [r3, #8]
        OS_EXIT_CRITICAL();
 8004240:	68f8      	ldr	r0, [r7, #12]
 8004242:	f7fb ffc3 	bl	80001cc <OS_CPU_SR_Restore>
        return (OS_ERR_NONE);
 8004246:	2300      	movs	r3, #0
 8004248:	e003      	b.n	8004252 <OSSemPost+0x6a>
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
 800424a:	68f8      	ldr	r0, [r7, #12]
 800424c:	f7fb ffbe 	bl	80001cc <OS_CPU_SR_Restore>
    return (OS_ERR_SEM_OVF);
 8004250:	2333      	movs	r3, #51	; 0x33
}
 8004252:	4618      	mov	r0, r3
 8004254:	3710      	adds	r7, #16
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}
 800425a:	bf00      	nop

0800425c <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b08c      	sub	sp, #48	; 0x30
 8004260:	af04      	add	r7, sp, #16
 8004262:	60f8      	str	r0, [r7, #12]
 8004264:	60b9      	str	r1, [r7, #8]
 8004266:	607a      	str	r2, [r7, #4]
 8004268:	70fb      	strb	r3, [r7, #3]
    OS_STK     *psp;
    INT8U       err;
#if OS_CRITICAL_METHOD == 3u                 /* Allocate storage for CPU status register               */
    OS_CPU_SR   cpu_sr = 0u;
 800426a:	2300      	movs	r3, #0
 800426c:	61fb      	str	r3, [r7, #28]
#if OS_ARG_CHK_EN > 0u
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
        return (OS_ERR_PRIO_INVALID);
    }
#endif
    OS_ENTER_CRITICAL();
 800426e:	f7fb ffa9 	bl	80001c4 <OS_CPU_SR_Save>
 8004272:	61f8      	str	r0, [r7, #28]
    if (OSIntNesting > 0u) {                 /* Make sure we don't create the task from within an ISR  */
 8004274:	4b28      	ldr	r3, [pc, #160]	; (8004318 <OSTaskCreateExt+0xbc>)
 8004276:	781b      	ldrb	r3, [r3, #0]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d004      	beq.n	8004286 <OSTaskCreateExt+0x2a>
        OS_EXIT_CRITICAL();
 800427c:	69f8      	ldr	r0, [r7, #28]
 800427e:	f7fb ffa5 	bl	80001cc <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_CREATE_ISR);
 8004282:	233c      	movs	r3, #60	; 0x3c
 8004284:	e044      	b.n	8004310 <OSTaskCreateExt+0xb4>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
 8004286:	78fb      	ldrb	r3, [r7, #3]
 8004288:	4a24      	ldr	r2, [pc, #144]	; (800431c <OSTaskCreateExt+0xc0>)
 800428a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d13a      	bne.n	8004308 <OSTaskCreateExt+0xac>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
 8004292:	78fb      	ldrb	r3, [r7, #3]
 8004294:	4a21      	ldr	r2, [pc, #132]	; (800431c <OSTaskCreateExt+0xc0>)
 8004296:	2101      	movs	r1, #1
 8004298:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
 800429c:	69f8      	ldr	r0, [r7, #28]
 800429e:	f7fb ff95 	bl	80001cc <OS_CPU_SR_Restore>

#if (OS_TASK_STAT_STK_CHK_EN > 0u)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
 80042a2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80042a4:	461a      	mov	r2, r3
 80042a6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80042a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80042aa:	f000 fa57 	bl	800475c <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
 80042ae:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	68b9      	ldr	r1, [r7, #8]
 80042b4:	68f8      	ldr	r0, [r7, #12]
 80042b6:	f7fe fd75 	bl	8002da4 <OSTaskStkInit>
 80042ba:	61b8      	str	r0, [r7, #24]
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
 80042bc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80042be:	78f8      	ldrb	r0, [r7, #3]
 80042c0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80042c2:	9302      	str	r3, [sp, #8]
 80042c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042c6:	9301      	str	r3, [sp, #4]
 80042c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ca:	9300      	str	r3, [sp, #0]
 80042cc:	4613      	mov	r3, r2
 80042ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042d0:	69b9      	ldr	r1, [r7, #24]
 80042d2:	f7ff fce3 	bl	8003c9c <OS_TCBInit>
 80042d6:	4603      	mov	r3, r0
 80042d8:	75fb      	strb	r3, [r7, #23]
        if (err == OS_ERR_NONE) {
 80042da:	7dfb      	ldrb	r3, [r7, #23]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d106      	bne.n	80042ee <OSTaskCreateExt+0x92>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
 80042e0:	4b0f      	ldr	r3, [pc, #60]	; (8004320 <OSTaskCreateExt+0xc4>)
 80042e2:	781b      	ldrb	r3, [r3, #0]
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d10d      	bne.n	8004304 <OSTaskCreateExt+0xa8>
                OS_Sched();
 80042e8:	f7ff fbce 	bl	8003a88 <OS_Sched>
 80042ec:	e00a      	b.n	8004304 <OSTaskCreateExt+0xa8>
            }
        } else {
            OS_ENTER_CRITICAL();
 80042ee:	f7fb ff69 	bl	80001c4 <OS_CPU_SR_Save>
 80042f2:	61f8      	str	r0, [r7, #28]
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
 80042f4:	78fb      	ldrb	r3, [r7, #3]
 80042f6:	4a09      	ldr	r2, [pc, #36]	; (800431c <OSTaskCreateExt+0xc0>)
 80042f8:	2100      	movs	r1, #0
 80042fa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            OS_EXIT_CRITICAL();
 80042fe:	69f8      	ldr	r0, [r7, #28]
 8004300:	f7fb ff64 	bl	80001cc <OS_CPU_SR_Restore>
        }
        return (err);
 8004304:	7dfb      	ldrb	r3, [r7, #23]
 8004306:	e003      	b.n	8004310 <OSTaskCreateExt+0xb4>
    }
    OS_EXIT_CRITICAL();
 8004308:	69f8      	ldr	r0, [r7, #28]
 800430a:	f7fb ff5f 	bl	80001cc <OS_CPU_SR_Restore>
    return (OS_ERR_PRIO_EXIST);
 800430e:	2328      	movs	r3, #40	; 0x28
}
 8004310:	4618      	mov	r0, r3
 8004312:	3720      	adds	r7, #32
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}
 8004318:	20007154 	.word	0x20007154
 800431c:	20008b68 	.word	0x20008b68
 8004320:	20006965 	.word	0x20006965

08004324 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0u
INT8U  OSTaskDel (INT8U prio)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b086      	sub	sp, #24
 8004328:	af00      	add	r7, sp, #0
 800432a:	4603      	mov	r3, r0
 800432c:	71fb      	strb	r3, [r7, #7]
#if (OS_FLAG_EN > 0u) && (OS_MAX_FLAGS > 0u)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3u                            /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0u;
 800432e:	2300      	movs	r3, #0
 8004330:	617b      	str	r3, [r7, #20]
#endif



    if (OSIntNesting > 0u) {                            /* See if trying to delete from ISR            */
 8004332:	4b69      	ldr	r3, [pc, #420]	; (80044d8 <OSTaskDel+0x1b4>)
 8004334:	781b      	ldrb	r3, [r3, #0]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d001      	beq.n	800433e <OSTaskDel+0x1a>
        return (OS_ERR_TASK_DEL_ISR);
 800433a:	2340      	movs	r3, #64	; 0x40
 800433c:	e0c7      	b.n	80044ce <OSTaskDel+0x1aa>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
 800433e:	79fb      	ldrb	r3, [r7, #7]
 8004340:	2b3f      	cmp	r3, #63	; 0x3f
 8004342:	d101      	bne.n	8004348 <OSTaskDel+0x24>
        return (OS_ERR_TASK_DEL_IDLE);
 8004344:	233e      	movs	r3, #62	; 0x3e
 8004346:	e0c2      	b.n	80044ce <OSTaskDel+0x1aa>
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
 8004348:	f7fb ff3c 	bl	80001c4 <OS_CPU_SR_Save>
 800434c:	6178      	str	r0, [r7, #20]
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
 800434e:	79fb      	ldrb	r3, [r7, #7]
 8004350:	2bff      	cmp	r3, #255	; 0xff
 8004352:	d104      	bne.n	800435e <OSTaskDel+0x3a>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
 8004354:	4b61      	ldr	r3, [pc, #388]	; (80044dc <OSTaskDel+0x1b8>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800435c:	71fb      	strb	r3, [r7, #7]
    }
    ptcb = OSTCBPrioTbl[prio];
 800435e:	79fb      	ldrb	r3, [r7, #7]
 8004360:	4a5f      	ldr	r2, [pc, #380]	; (80044e0 <OSTaskDel+0x1bc>)
 8004362:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004366:	613b      	str	r3, [r7, #16]
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d104      	bne.n	8004378 <OSTaskDel+0x54>
        OS_EXIT_CRITICAL();
 800436e:	6978      	ldr	r0, [r7, #20]
 8004370:	f7fb ff2c 	bl	80001cc <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_NOT_EXIST);
 8004374:	2343      	movs	r3, #67	; 0x43
 8004376:	e0aa      	b.n	80044ce <OSTaskDel+0x1aa>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	2b01      	cmp	r3, #1
 800437c:	d104      	bne.n	8004388 <OSTaskDel+0x64>
        OS_EXIT_CRITICAL();
 800437e:	6978      	ldr	r0, [r7, #20]
 8004380:	f7fb ff24 	bl	80001cc <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_DEL);
 8004384:	233d      	movs	r3, #61	; 0x3d
 8004386:	e0a2      	b.n	80044ce <OSTaskDel+0x1aa>
    }

    OSRdyTbl[ptcb->OSTCBY] &= (OS_PRIO)~ptcb->OSTCBBitX;
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800438e:	4619      	mov	r1, r3
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004396:	461a      	mov	r2, r3
 8004398:	4b52      	ldr	r3, [pc, #328]	; (80044e4 <OSTaskDel+0x1c0>)
 800439a:	5c9a      	ldrb	r2, [r3, r2]
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80043a2:	43db      	mvns	r3, r3
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	4013      	ands	r3, r2
 80043a8:	b2da      	uxtb	r2, r3
 80043aa:	4b4e      	ldr	r3, [pc, #312]	; (80044e4 <OSTaskDel+0x1c0>)
 80043ac:	545a      	strb	r2, [r3, r1]
    if (OSRdyTbl[ptcb->OSTCBY] == 0u) {                 /* Make task not ready                         */
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80043b4:	461a      	mov	r2, r3
 80043b6:	4b4b      	ldr	r3, [pc, #300]	; (80044e4 <OSTaskDel+0x1c0>)
 80043b8:	5c9b      	ldrb	r3, [r3, r2]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d10a      	bne.n	80043d4 <OSTaskDel+0xb0>
        OSRdyGrp           &= (OS_PRIO)~ptcb->OSTCBBitY;
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80043c4:	43db      	mvns	r3, r3
 80043c6:	b2da      	uxtb	r2, r3
 80043c8:	4b47      	ldr	r3, [pc, #284]	; (80044e8 <OSTaskDel+0x1c4>)
 80043ca:	781b      	ldrb	r3, [r3, #0]
 80043cc:	4013      	ands	r3, r2
 80043ce:	b2da      	uxtb	r2, r3
 80043d0:	4b45      	ldr	r3, [pc, #276]	; (80044e8 <OSTaskDel+0x1c4>)
 80043d2:	701a      	strb	r2, [r3, #0]
    }

#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	69db      	ldr	r3, [r3, #28]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d005      	beq.n	80043e8 <OSTaskDel+0xc4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	69db      	ldr	r3, [r3, #28]
 80043e0:	4619      	mov	r1, r3
 80043e2:	6938      	ldr	r0, [r7, #16]
 80043e4:	f7ff f958 	bl	8003698 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0u)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	6a1b      	ldr	r3, [r3, #32]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d005      	beq.n	80043fc <OSTaskDel+0xd8>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	6a1b      	ldr	r3, [r3, #32]
 80043f4:	4619      	mov	r1, r3
 80043f6:	6938      	ldr	r0, [r7, #16]
 80043f8:	f7ff f97e 	bl	80036f8 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0u) && (OS_MAX_FLAGS > 0u)
    pnode = ptcb->OSTCBFlagNode;
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004400:	60fb      	str	r3, [r7, #12]
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d002      	beq.n	800440e <OSTaskDel+0xea>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
 8004408:	68f8      	ldr	r0, [r7, #12]
 800440a:	f7ff fd7b 	bl	8003f04 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0u;                           /* Prevent OSTimeTick() from updating          */
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	2200      	movs	r2, #0
 8004412:	631a      	str	r2, [r3, #48]	; 0x30
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	2200      	movs	r2, #0
 8004418:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	2200      	movs	r2, #0
 8004420:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
 8004424:	4b31      	ldr	r3, [pc, #196]	; (80044ec <OSTaskDel+0x1c8>)
 8004426:	781b      	ldrb	r3, [r3, #0]
 8004428:	2bff      	cmp	r3, #255	; 0xff
 800442a:	d005      	beq.n	8004438 <OSTaskDel+0x114>
        OSLockNesting++;
 800442c:	4b2f      	ldr	r3, [pc, #188]	; (80044ec <OSTaskDel+0x1c8>)
 800442e:	781b      	ldrb	r3, [r3, #0]
 8004430:	3301      	adds	r3, #1
 8004432:	b2da      	uxtb	r2, r3
 8004434:	4b2d      	ldr	r3, [pc, #180]	; (80044ec <OSTaskDel+0x1c8>)
 8004436:	701a      	strb	r2, [r3, #0]
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
 8004438:	6978      	ldr	r0, [r7, #20]
 800443a:	f7fb fec7 	bl	80001cc <OS_CPU_SR_Restore>
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
 800443e:	f7ff f85b 	bl	80034f8 <OS_Dummy>
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
 8004442:	f7fb febf 	bl	80001c4 <OS_CPU_SR_Save>
 8004446:	6178      	str	r0, [r7, #20]
    if (OSLockNesting > 0u) {                           /* Remove context switch lock                  */
 8004448:	4b28      	ldr	r3, [pc, #160]	; (80044ec <OSTaskDel+0x1c8>)
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d005      	beq.n	800445c <OSTaskDel+0x138>
        OSLockNesting--;
 8004450:	4b26      	ldr	r3, [pc, #152]	; (80044ec <OSTaskDel+0x1c8>)
 8004452:	781b      	ldrb	r3, [r3, #0]
 8004454:	3b01      	subs	r3, #1
 8004456:	b2da      	uxtb	r2, r3
 8004458:	4b24      	ldr	r3, [pc, #144]	; (80044ec <OSTaskDel+0x1c8>)
 800445a:	701a      	strb	r2, [r3, #0]
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
 800445c:	6938      	ldr	r0, [r7, #16]
 800445e:	f7fe fc7d 	bl	8002d5c <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
 8004462:	4b23      	ldr	r3, [pc, #140]	; (80044f0 <OSTaskDel+0x1cc>)
 8004464:	781b      	ldrb	r3, [r3, #0]
 8004466:	3b01      	subs	r3, #1
 8004468:	b2da      	uxtb	r2, r3
 800446a:	4b21      	ldr	r3, [pc, #132]	; (80044f0 <OSTaskDel+0x1cc>)
 800446c:	701a      	strb	r2, [r3, #0]
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
 800446e:	79fb      	ldrb	r3, [r7, #7]
 8004470:	4a1b      	ldr	r2, [pc, #108]	; (80044e0 <OSTaskDel+0x1bc>)
 8004472:	2100      	movs	r1, #0
 8004474:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	699b      	ldr	r3, [r3, #24]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d108      	bne.n	8004492 <OSTaskDel+0x16e>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	695b      	ldr	r3, [r3, #20]
 8004484:	2200      	movs	r2, #0
 8004486:	619a      	str	r2, [r3, #24]
        OSTCBList                  = ptcb->OSTCBNext;
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	695b      	ldr	r3, [r3, #20]
 800448c:	4a19      	ldr	r2, [pc, #100]	; (80044f4 <OSTaskDel+0x1d0>)
 800448e:	6013      	str	r3, [r2, #0]
 8004490:	e009      	b.n	80044a6 <OSTaskDel+0x182>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	699b      	ldr	r3, [r3, #24]
 8004496:	693a      	ldr	r2, [r7, #16]
 8004498:	6952      	ldr	r2, [r2, #20]
 800449a:	615a      	str	r2, [r3, #20]
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	695b      	ldr	r3, [r3, #20]
 80044a0:	693a      	ldr	r2, [r7, #16]
 80044a2:	6992      	ldr	r2, [r2, #24]
 80044a4:	619a      	str	r2, [r3, #24]
    }
    ptcb->OSTCBNext     = OSTCBFreeList;                /* Return TCB to free TCB list                 */
 80044a6:	4b14      	ldr	r3, [pc, #80]	; (80044f8 <OSTaskDel+0x1d4>)
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	615a      	str	r2, [r3, #20]
    OSTCBFreeList       = ptcb;
 80044ae:	4a12      	ldr	r2, [pc, #72]	; (80044f8 <OSTaskDel+0x1d4>)
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	6013      	str	r3, [r2, #0]
#if OS_TASK_NAME_EN > 0u
    ptcb->OSTCBTaskName = (INT8U *)(void *)"?";
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	4a11      	ldr	r2, [pc, #68]	; (80044fc <OSTaskDel+0x1d8>)
 80044b8:	651a      	str	r2, [r3, #80]	; 0x50
#endif
    OS_EXIT_CRITICAL();
 80044ba:	6978      	ldr	r0, [r7, #20]
 80044bc:	f7fb fe86 	bl	80001cc <OS_CPU_SR_Restore>
    if (OSRunning == OS_TRUE) {
 80044c0:	4b0f      	ldr	r3, [pc, #60]	; (8004500 <OSTaskDel+0x1dc>)
 80044c2:	781b      	ldrb	r3, [r3, #0]
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d101      	bne.n	80044cc <OSTaskDel+0x1a8>
        OS_Sched();                                     /* Find new highest priority task              */
 80044c8:	f7ff fade 	bl	8003a88 <OS_Sched>
    }
    return (OS_ERR_NONE);
 80044cc:	2300      	movs	r3, #0
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3718      	adds	r7, #24
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}
 80044d6:	bf00      	nop
 80044d8:	20007154 	.word	0x20007154
 80044dc:	20007158 	.word	0x20007158
 80044e0:	20008b68 	.word	0x20008b68
 80044e4:	20006f48 	.word	0x20006f48
 80044e8:	20006f44 	.word	0x20006f44
 80044ec:	2000695c 	.word	0x2000695c
 80044f0:	20006ed5 	.word	0x20006ed5
 80044f4:	20006c44 	.word	0x20006c44
 80044f8:	20006ed0 	.word	0x20006ed0
 80044fc:	08007b10 	.word	0x08007b10
 8004500:	20006965 	.word	0x20006965

08004504 <OSTaskNameSet>:
*/
#if OS_TASK_NAME_EN > 0u
void  OSTaskNameSet (INT8U   prio,
                     INT8U  *pname,
                     INT8U  *perr)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b086      	sub	sp, #24
 8004508:	af00      	add	r7, sp, #0
 800450a:	4603      	mov	r3, r0
 800450c:	60b9      	str	r1, [r7, #8]
 800450e:	607a      	str	r2, [r7, #4]
 8004510:	73fb      	strb	r3, [r7, #15]
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3u                         /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0u;
 8004512:	2300      	movs	r3, #0
 8004514:	617b      	str	r3, [r7, #20]
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
        return;
    }
#endif
    if (OSIntNesting > 0u) {                         /* See if trying to call from an ISR              */
 8004516:	4b1c      	ldr	r3, [pc, #112]	; (8004588 <OSTaskNameSet+0x84>)
 8004518:	781b      	ldrb	r3, [r3, #0]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d003      	beq.n	8004526 <OSTaskNameSet+0x22>
        *perr = OS_ERR_NAME_SET_ISR;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2212      	movs	r2, #18
 8004522:	701a      	strb	r2, [r3, #0]
        return;
 8004524:	e02c      	b.n	8004580 <OSTaskNameSet+0x7c>
    }
    OS_ENTER_CRITICAL();
 8004526:	f7fb fe4d 	bl	80001c4 <OS_CPU_SR_Save>
 800452a:	6178      	str	r0, [r7, #20]
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
 800452c:	7bfb      	ldrb	r3, [r7, #15]
 800452e:	2bff      	cmp	r3, #255	; 0xff
 8004530:	d104      	bne.n	800453c <OSTaskNameSet+0x38>
        prio = OSTCBCur->OSTCBPrio;
 8004532:	4b16      	ldr	r3, [pc, #88]	; (800458c <OSTaskNameSet+0x88>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800453a:	73fb      	strb	r3, [r7, #15]
    }
    ptcb = OSTCBPrioTbl[prio];
 800453c:	7bfb      	ldrb	r3, [r7, #15]
 800453e:	4a14      	ldr	r2, [pc, #80]	; (8004590 <OSTaskNameSet+0x8c>)
 8004540:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004544:	613b      	str	r3, [r7, #16]
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d106      	bne.n	800455a <OSTaskNameSet+0x56>
        OS_EXIT_CRITICAL();                          /* No                                             */
 800454c:	6978      	ldr	r0, [r7, #20]
 800454e:	f7fb fe3d 	bl	80001cc <OS_CPU_SR_Restore>
        *perr = OS_ERR_TASK_NOT_EXIST;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2243      	movs	r2, #67	; 0x43
 8004556:	701a      	strb	r2, [r3, #0]
        return;
 8004558:	e012      	b.n	8004580 <OSTaskNameSet+0x7c>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	2b01      	cmp	r3, #1
 800455e:	d106      	bne.n	800456e <OSTaskNameSet+0x6a>
        OS_EXIT_CRITICAL();                          /* Yes                                            */
 8004560:	6978      	ldr	r0, [r7, #20]
 8004562:	f7fb fe33 	bl	80001cc <OS_CPU_SR_Restore>
        *perr = OS_ERR_TASK_NOT_EXIST;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2243      	movs	r2, #67	; 0x43
 800456a:	701a      	strb	r2, [r3, #0]
        return;
 800456c:	e008      	b.n	8004580 <OSTaskNameSet+0x7c>
    }
    ptcb->OSTCBTaskName = pname;
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	68ba      	ldr	r2, [r7, #8]
 8004572:	651a      	str	r2, [r3, #80]	; 0x50
    OS_EXIT_CRITICAL();
 8004574:	6978      	ldr	r0, [r7, #20]
 8004576:	f7fb fe29 	bl	80001cc <OS_CPU_SR_Restore>
    *perr               = OS_ERR_NONE;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2200      	movs	r2, #0
 800457e:	701a      	strb	r2, [r3, #0]
}
 8004580:	3718      	adds	r7, #24
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
 8004586:	bf00      	nop
 8004588:	20007154 	.word	0x20007154
 800458c:	20007158 	.word	0x20007158
 8004590:	20008b68 	.word	0x20008b68

08004594 <OSTaskStkChk>:
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0u) && (OS_TASK_CREATE_EXT_EN > 0u)
INT8U  OSTaskStkChk (INT8U         prio,
                     OS_STK_DATA  *p_stk_data)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b088      	sub	sp, #32
 8004598:	af00      	add	r7, sp, #0
 800459a:	4603      	mov	r3, r0
 800459c:	6039      	str	r1, [r7, #0]
 800459e:	71fb      	strb	r3, [r7, #7]
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3u                           /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0u;
 80045a0:	2300      	movs	r3, #0
 80045a2:	617b      	str	r3, [r7, #20]
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
        return (OS_ERR_PDATA_NULL);
    }
#endif
    p_stk_data->OSFree = 0u;                           /* Assume failure, set to 0 size                */
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	2200      	movs	r2, #0
 80045a8:	601a      	str	r2, [r3, #0]
    p_stk_data->OSUsed = 0u;
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	2200      	movs	r2, #0
 80045ae:	605a      	str	r2, [r3, #4]
    OS_ENTER_CRITICAL();
 80045b0:	f7fb fe08 	bl	80001c4 <OS_CPU_SR_Save>
 80045b4:	6178      	str	r0, [r7, #20]
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
 80045b6:	79fb      	ldrb	r3, [r7, #7]
 80045b8:	2bff      	cmp	r3, #255	; 0xff
 80045ba:	d104      	bne.n	80045c6 <OSTaskStkChk+0x32>
        prio = OSTCBCur->OSTCBPrio;
 80045bc:	4b23      	ldr	r3, [pc, #140]	; (800464c <OSTaskStkChk+0xb8>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80045c4:	71fb      	strb	r3, [r7, #7]
    }
    ptcb = OSTCBPrioTbl[prio];
 80045c6:	79fb      	ldrb	r3, [r7, #7]
 80045c8:	4a21      	ldr	r2, [pc, #132]	; (8004650 <OSTaskStkChk+0xbc>)
 80045ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045ce:	613b      	str	r3, [r7, #16]
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d104      	bne.n	80045e0 <OSTaskStkChk+0x4c>
        OS_EXIT_CRITICAL();
 80045d6:	6978      	ldr	r0, [r7, #20]
 80045d8:	f7fb fdf8 	bl	80001cc <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_NOT_EXIST);
 80045dc:	2343      	movs	r3, #67	; 0x43
 80045de:	e030      	b.n	8004642 <OSTaskStkChk+0xae>
    }
    if (ptcb == OS_TCB_RESERVED) {
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d104      	bne.n	80045f0 <OSTaskStkChk+0x5c>
        OS_EXIT_CRITICAL();
 80045e6:	6978      	ldr	r0, [r7, #20]
 80045e8:	f7fb fdf0 	bl	80001cc <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_NOT_EXIST);
 80045ec:	2343      	movs	r3, #67	; 0x43
 80045ee:	e028      	b.n	8004642 <OSTaskStkChk+0xae>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0u) { /* Make sure stack checking option is set      */
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	8a1b      	ldrh	r3, [r3, #16]
 80045f4:	f003 0301 	and.w	r3, r3, #1
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d104      	bne.n	8004606 <OSTaskStkChk+0x72>
        OS_EXIT_CRITICAL();
 80045fc:	6978      	ldr	r0, [r7, #20]
 80045fe:	f7fb fde5 	bl	80001cc <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_OPT);
 8004602:	2345      	movs	r3, #69	; 0x45
 8004604:	e01d      	b.n	8004642 <OSTaskStkChk+0xae>
    }
    nfree = 0u;
 8004606:	2300      	movs	r3, #0
 8004608:	61bb      	str	r3, [r7, #24]
    size  = ptcb->OSTCBStkSize;
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	68db      	ldr	r3, [r3, #12]
 800460e:	60fb      	str	r3, [r7, #12]
    pchk  = ptcb->OSTCBStkBottom;
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	61fb      	str	r3, [r7, #28]
    OS_EXIT_CRITICAL();
 8004616:	6978      	ldr	r0, [r7, #20]
 8004618:	f7fb fdd8 	bl	80001cc <OS_CPU_SR_Restore>
#if OS_STK_GROWTH == 1u
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
 800461c:	e002      	b.n	8004624 <OSTaskStkChk+0x90>
        nfree++;
 800461e:	69bb      	ldr	r3, [r7, #24]
 8004620:	3301      	adds	r3, #1
 8004622:	61bb      	str	r3, [r7, #24]
    nfree = 0u;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1u
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
 8004624:	69fb      	ldr	r3, [r7, #28]
 8004626:	1d1a      	adds	r2, r3, #4
 8004628:	61fa      	str	r2, [r7, #28]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d0f6      	beq.n	800461e <OSTaskStkChk+0x8a>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree;                       /* Store   number of free entries on the stk     */
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	69ba      	ldr	r2, [r7, #24]
 8004634:	601a      	str	r2, [r3, #0]
    p_stk_data->OSUsed = size - nfree;                /* Compute number of entries used on the stk     */
 8004636:	68fa      	ldr	r2, [r7, #12]
 8004638:	69bb      	ldr	r3, [r7, #24]
 800463a:	1ad2      	subs	r2, r2, r3
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	605a      	str	r2, [r3, #4]
    return (OS_ERR_NONE);
 8004640:	2300      	movs	r3, #0
}
 8004642:	4618      	mov	r0, r3
 8004644:	3720      	adds	r7, #32
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}
 800464a:	bf00      	nop
 800464c:	20007158 	.word	0x20007158
 8004650:	20008b68 	.word	0x20008b68

08004654 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0u
INT8U  OSTaskSuspend (INT8U prio)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b086      	sub	sp, #24
 8004658:	af00      	add	r7, sp, #0
 800465a:	4603      	mov	r3, r0
 800465c:	71fb      	strb	r3, [r7, #7]
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
 800465e:	2300      	movs	r3, #0
 8004660:	613b      	str	r3, [r7, #16]
        if (prio != OS_PRIO_SELF) {
            return (OS_ERR_PRIO_INVALID);
        }
    }
#endif
    OS_ENTER_CRITICAL();
 8004662:	f7fb fdaf 	bl	80001c4 <OS_CPU_SR_Save>
 8004666:	6138      	str	r0, [r7, #16]
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
 8004668:	79fb      	ldrb	r3, [r7, #7]
 800466a:	2bff      	cmp	r3, #255	; 0xff
 800466c:	d107      	bne.n	800467e <OSTaskSuspend+0x2a>
        prio = OSTCBCur->OSTCBPrio;
 800466e:	4b30      	ldr	r3, [pc, #192]	; (8004730 <OSTaskSuspend+0xdc>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004676:	71fb      	strb	r3, [r7, #7]
        self = OS_TRUE;
 8004678:	2301      	movs	r3, #1
 800467a:	75fb      	strb	r3, [r7, #23]
 800467c:	e00b      	b.n	8004696 <OSTaskSuspend+0x42>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
 800467e:	4b2c      	ldr	r3, [pc, #176]	; (8004730 <OSTaskSuspend+0xdc>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8004686:	79fa      	ldrb	r2, [r7, #7]
 8004688:	429a      	cmp	r2, r3
 800468a:	d102      	bne.n	8004692 <OSTaskSuspend+0x3e>
        self = OS_TRUE;
 800468c:	2301      	movs	r3, #1
 800468e:	75fb      	strb	r3, [r7, #23]
 8004690:	e001      	b.n	8004696 <OSTaskSuspend+0x42>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
 8004692:	2300      	movs	r3, #0
 8004694:	75fb      	strb	r3, [r7, #23]
    }
    ptcb = OSTCBPrioTbl[prio];
 8004696:	79fb      	ldrb	r3, [r7, #7]
 8004698:	4a26      	ldr	r2, [pc, #152]	; (8004734 <OSTaskSuspend+0xe0>)
 800469a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800469e:	60fb      	str	r3, [r7, #12]
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d104      	bne.n	80046b0 <OSTaskSuspend+0x5c>
        OS_EXIT_CRITICAL();
 80046a6:	6938      	ldr	r0, [r7, #16]
 80046a8:	f7fb fd90 	bl	80001cc <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_SUSPEND_PRIO);
 80046ac:	2348      	movs	r3, #72	; 0x48
 80046ae:	e03a      	b.n	8004726 <OSTaskSuspend+0xd2>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	d104      	bne.n	80046c0 <OSTaskSuspend+0x6c>
        OS_EXIT_CRITICAL();
 80046b6:	6938      	ldr	r0, [r7, #16]
 80046b8:	f7fb fd88 	bl	80001cc <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_NOT_EXIST);
 80046bc:	2343      	movs	r3, #67	; 0x43
 80046be:	e032      	b.n	8004726 <OSTaskSuspend+0xd2>
    }
    y            = ptcb->OSTCBY;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80046c6:	72fb      	strb	r3, [r7, #11]
    OSRdyTbl[y] &= (OS_PRIO)~ptcb->OSTCBBitX;                   /* Make task not ready                 */
 80046c8:	7afb      	ldrb	r3, [r7, #11]
 80046ca:	7afa      	ldrb	r2, [r7, #11]
 80046cc:	491a      	ldr	r1, [pc, #104]	; (8004738 <OSTaskSuspend+0xe4>)
 80046ce:	5c89      	ldrb	r1, [r1, r2]
 80046d0:	68fa      	ldr	r2, [r7, #12]
 80046d2:	f892 2039 	ldrb.w	r2, [r2, #57]	; 0x39
 80046d6:	43d2      	mvns	r2, r2
 80046d8:	b2d2      	uxtb	r2, r2
 80046da:	400a      	ands	r2, r1
 80046dc:	b2d1      	uxtb	r1, r2
 80046de:	4a16      	ldr	r2, [pc, #88]	; (8004738 <OSTaskSuspend+0xe4>)
 80046e0:	54d1      	strb	r1, [r2, r3]
    if (OSRdyTbl[y] == 0u) {
 80046e2:	7afb      	ldrb	r3, [r7, #11]
 80046e4:	4a14      	ldr	r2, [pc, #80]	; (8004738 <OSTaskSuspend+0xe4>)
 80046e6:	5cd3      	ldrb	r3, [r2, r3]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d10a      	bne.n	8004702 <OSTaskSuspend+0xae>
        OSRdyGrp &= (OS_PRIO)~ptcb->OSTCBBitY;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80046f2:	43db      	mvns	r3, r3
 80046f4:	b2da      	uxtb	r2, r3
 80046f6:	4b11      	ldr	r3, [pc, #68]	; (800473c <OSTaskSuspend+0xe8>)
 80046f8:	781b      	ldrb	r3, [r3, #0]
 80046fa:	4013      	ands	r3, r2
 80046fc:	b2da      	uxtb	r2, r3
 80046fe:	4b0f      	ldr	r3, [pc, #60]	; (800473c <OSTaskSuspend+0xe8>)
 8004700:	701a      	strb	r2, [r3, #0]
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004708:	f043 0308 	orr.w	r3, r3, #8
 800470c:	b2da      	uxtb	r2, r3
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    OS_EXIT_CRITICAL();
 8004714:	6938      	ldr	r0, [r7, #16]
 8004716:	f7fb fd59 	bl	80001cc <OS_CPU_SR_Restore>
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
 800471a:	7dfb      	ldrb	r3, [r7, #23]
 800471c:	2b01      	cmp	r3, #1
 800471e:	d101      	bne.n	8004724 <OSTaskSuspend+0xd0>
        OS_Sched();                                             /* Find new highest priority task      */
 8004720:	f7ff f9b2 	bl	8003a88 <OS_Sched>
    }
    return (OS_ERR_NONE);
 8004724:	2300      	movs	r3, #0
}
 8004726:	4618      	mov	r0, r3
 8004728:	3718      	adds	r7, #24
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}
 800472e:	bf00      	nop
 8004730:	20007158 	.word	0x20007158
 8004734:	20008b68 	.word	0x20008b68
 8004738:	20006f48 	.word	0x20006f48
 800473c:	20006f44 	.word	0x20006f44

08004740 <OS_TaskReturn>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_TaskReturn (void)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	af00      	add	r7, sp, #0
    OSTaskReturnHook(OSTCBCur);                   /* Call hook to let user decide on what to do        */
 8004744:	4b04      	ldr	r3, [pc, #16]	; (8004758 <OS_TaskReturn+0x18>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4618      	mov	r0, r3
 800474a:	f7fe fb19 	bl	8002d80 <OSTaskReturnHook>

#if OS_TASK_DEL_EN > 0u
    (void)OSTaskDel(OS_PRIO_SELF);                /* Delete task if it accidentally returns!           */
 800474e:	20ff      	movs	r0, #255	; 0xff
 8004750:	f7ff fde8 	bl	8004324 <OSTaskDel>
#else
    for (;;) {
        OSTimeDly(OS_TICKS_PER_SEC);
    }
#endif
}
 8004754:	bf00      	nop
 8004756:	bd80      	pop	{r7, pc}
 8004758:	20007158 	.word	0x20007158

0800475c <OS_TaskStkClr>:
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0u) && (OS_TASK_CREATE_EXT_EN > 0u)
void  OS_TaskStkClr (OS_STK  *pbos,
                     INT32U   size,
                     INT16U   opt)
{
 800475c:	b480      	push	{r7}
 800475e:	b085      	sub	sp, #20
 8004760:	af00      	add	r7, sp, #0
 8004762:	60f8      	str	r0, [r7, #12]
 8004764:	60b9      	str	r1, [r7, #8]
 8004766:	4613      	mov	r3, r2
 8004768:	80fb      	strh	r3, [r7, #6]
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000u) {      /* See if stack checking has been enabled       */
 800476a:	88fb      	ldrh	r3, [r7, #6]
 800476c:	f003 0301 	and.w	r3, r3, #1
 8004770:	2b00      	cmp	r3, #0
 8004772:	d010      	beq.n	8004796 <OS_TaskStkClr+0x3a>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000u) {  /* See if stack needs to be cleared             */
 8004774:	88fb      	ldrh	r3, [r7, #6]
 8004776:	f003 0302 	and.w	r3, r3, #2
 800477a:	2b00      	cmp	r3, #0
 800477c:	d00b      	beq.n	8004796 <OS_TaskStkClr+0x3a>
#if OS_STK_GROWTH == 1u
            while (size > 0u) {                        /* Stack grows from HIGH to LOW memory          */
 800477e:	e007      	b.n	8004790 <OS_TaskStkClr+0x34>
                size--;
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	3b01      	subs	r3, #1
 8004784:	60bb      	str	r3, [r7, #8]
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	1d1a      	adds	r2, r3, #4
 800478a:	60fa      	str	r2, [r7, #12]
 800478c:	2200      	movs	r2, #0
 800478e:	601a      	str	r2, [r3, #0]
                     INT16U   opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000u) {      /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000u) {  /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1u
            while (size > 0u) {                        /* Stack grows from HIGH to LOW memory          */
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d1f4      	bne.n	8004780 <OS_TaskStkClr+0x24>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
 8004796:	bf00      	nop
 8004798:	3714      	adds	r7, #20
 800479a:	46bd      	mov	sp, r7
 800479c:	bc80      	pop	{r7}
 800479e:	4770      	bx	lr

080047a0 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT32U ticks)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b084      	sub	sp, #16
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
    INT8U      y;
#if OS_CRITICAL_METHOD == 3u                     /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0u;
 80047a8:	2300      	movs	r3, #0
 80047aa:	60fb      	str	r3, [r7, #12]
#endif



    if (OSIntNesting > 0u) {                     /* See if trying to call from an ISR                  */
 80047ac:	4b20      	ldr	r3, [pc, #128]	; (8004830 <OSTimeDly+0x90>)
 80047ae:	781b      	ldrb	r3, [r3, #0]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d137      	bne.n	8004824 <OSTimeDly+0x84>
        return;
    }
    if (OSLockNesting > 0u) {                    /* See if called with scheduler locked                */
 80047b4:	4b1f      	ldr	r3, [pc, #124]	; (8004834 <OSTimeDly+0x94>)
 80047b6:	781b      	ldrb	r3, [r3, #0]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d135      	bne.n	8004828 <OSTimeDly+0x88>
        return;
    }
    if (ticks > 0u) {                            /* 0 means no delay!                                  */
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d033      	beq.n	800482a <OSTimeDly+0x8a>
        OS_ENTER_CRITICAL();
 80047c2:	f7fb fcff 	bl	80001c4 <OS_CPU_SR_Save>
 80047c6:	60f8      	str	r0, [r7, #12]
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
 80047c8:	4b1b      	ldr	r3, [pc, #108]	; (8004838 <OSTimeDly+0x98>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80047d0:	72fb      	strb	r3, [r7, #11]
        OSRdyTbl[y] &= (OS_PRIO)~OSTCBCur->OSTCBBitX;
 80047d2:	7afb      	ldrb	r3, [r7, #11]
 80047d4:	7afa      	ldrb	r2, [r7, #11]
 80047d6:	4919      	ldr	r1, [pc, #100]	; (800483c <OSTimeDly+0x9c>)
 80047d8:	5c89      	ldrb	r1, [r1, r2]
 80047da:	4a17      	ldr	r2, [pc, #92]	; (8004838 <OSTimeDly+0x98>)
 80047dc:	6812      	ldr	r2, [r2, #0]
 80047de:	f892 2039 	ldrb.w	r2, [r2, #57]	; 0x39
 80047e2:	43d2      	mvns	r2, r2
 80047e4:	b2d2      	uxtb	r2, r2
 80047e6:	400a      	ands	r2, r1
 80047e8:	b2d1      	uxtb	r1, r2
 80047ea:	4a14      	ldr	r2, [pc, #80]	; (800483c <OSTimeDly+0x9c>)
 80047ec:	54d1      	strb	r1, [r2, r3]
        if (OSRdyTbl[y] == 0u) {
 80047ee:	7afb      	ldrb	r3, [r7, #11]
 80047f0:	4a12      	ldr	r2, [pc, #72]	; (800483c <OSTimeDly+0x9c>)
 80047f2:	5cd3      	ldrb	r3, [r2, r3]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d10b      	bne.n	8004810 <OSTimeDly+0x70>
            OSRdyGrp &= (OS_PRIO)~OSTCBCur->OSTCBBitY;
 80047f8:	4b0f      	ldr	r3, [pc, #60]	; (8004838 <OSTimeDly+0x98>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004800:	43db      	mvns	r3, r3
 8004802:	b2da      	uxtb	r2, r3
 8004804:	4b0e      	ldr	r3, [pc, #56]	; (8004840 <OSTimeDly+0xa0>)
 8004806:	781b      	ldrb	r3, [r3, #0]
 8004808:	4013      	ands	r3, r2
 800480a:	b2da      	uxtb	r2, r3
 800480c:	4b0c      	ldr	r3, [pc, #48]	; (8004840 <OSTimeDly+0xa0>)
 800480e:	701a      	strb	r2, [r3, #0]
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
 8004810:	4b09      	ldr	r3, [pc, #36]	; (8004838 <OSTimeDly+0x98>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	631a      	str	r2, [r3, #48]	; 0x30
        OS_EXIT_CRITICAL();
 8004818:	68f8      	ldr	r0, [r7, #12]
 800481a:	f7fb fcd7 	bl	80001cc <OS_CPU_SR_Restore>
        OS_Sched();                              /* Find next task to run!                             */
 800481e:	f7ff f933 	bl	8003a88 <OS_Sched>
 8004822:	e002      	b.n	800482a <OSTimeDly+0x8a>
#endif



    if (OSIntNesting > 0u) {                     /* See if trying to call from an ISR                  */
        return;
 8004824:	bf00      	nop
 8004826:	e000      	b.n	800482a <OSTimeDly+0x8a>
    }
    if (OSLockNesting > 0u) {                    /* See if called with scheduler locked                */
        return;
 8004828:	bf00      	nop
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
    }
}
 800482a:	3710      	adds	r7, #16
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}
 8004830:	20007154 	.word	0x20007154
 8004834:	2000695c 	.word	0x2000695c
 8004838:	20007158 	.word	0x20007158
 800483c:	20006f48 	.word	0x20006f48
 8004840:	20006f44 	.word	0x20006f44

08004844 <OSTimeDlyHMSM>:
#if OS_TIME_DLY_HMSM_EN > 0u
INT8U  OSTimeDlyHMSM (INT8U   hours,
                      INT8U   minutes,
                      INT8U   seconds,
                      INT16U  ms)
{
 8004844:	b590      	push	{r4, r7, lr}
 8004846:	b085      	sub	sp, #20
 8004848:	af00      	add	r7, sp, #0
 800484a:	4604      	mov	r4, r0
 800484c:	4608      	mov	r0, r1
 800484e:	4611      	mov	r1, r2
 8004850:	461a      	mov	r2, r3
 8004852:	4623      	mov	r3, r4
 8004854:	71fb      	strb	r3, [r7, #7]
 8004856:	4603      	mov	r3, r0
 8004858:	71bb      	strb	r3, [r7, #6]
 800485a:	460b      	mov	r3, r1
 800485c:	717b      	strb	r3, [r7, #5]
 800485e:	4613      	mov	r3, r2
 8004860:	807b      	strh	r3, [r7, #2]
    INT32U ticks;


    if (OSIntNesting > 0u) {                     /* See if trying to call from an ISR                  */
 8004862:	4b18      	ldr	r3, [pc, #96]	; (80048c4 <OSTimeDlyHMSM+0x80>)
 8004864:	781b      	ldrb	r3, [r3, #0]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d001      	beq.n	800486e <OSTimeDlyHMSM+0x2a>
        return (OS_ERR_TIME_DLY_ISR);
 800486a:	2355      	movs	r3, #85	; 0x55
 800486c:	e025      	b.n	80048ba <OSTimeDlyHMSM+0x76>
    }
    if (OSLockNesting > 0u) {                    /* See if called with scheduler locked                */
 800486e:	4b16      	ldr	r3, [pc, #88]	; (80048c8 <OSTimeDlyHMSM+0x84>)
 8004870:	781b      	ldrb	r3, [r3, #0]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d001      	beq.n	800487a <OSTimeDlyHMSM+0x36>
        return (OS_ERR_SCHED_LOCKED);
 8004876:	2332      	movs	r3, #50	; 0x32
 8004878:	e01f      	b.n	80048ba <OSTimeDlyHMSM+0x76>
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600uL + (INT32U)minutes * 60uL + (INT32U)seconds) * OS_TICKS_PER_SEC
 800487a:	79fb      	ldrb	r3, [r7, #7]
 800487c:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8004880:	fb02 f103 	mul.w	r1, r2, r3
 8004884:	79ba      	ldrb	r2, [r7, #6]
 8004886:	4613      	mov	r3, r2
 8004888:	011b      	lsls	r3, r3, #4
 800488a:	1a9b      	subs	r3, r3, r2
 800488c:	009b      	lsls	r3, r3, #2
 800488e:	18ca      	adds	r2, r1, r3
 8004890:	797b      	ldrb	r3, [r7, #5]
 8004892:	4413      	add	r3, r2
 8004894:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004898:	fb02 f203 	mul.w	r2, r2, r3
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500uL / OS_TICKS_PER_SEC) / 1000uL;
 800489c:	887b      	ldrh	r3, [r7, #2]
 800489e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80048a2:	fb01 f303 	mul.w	r3, r1, r3
 80048a6:	4909      	ldr	r1, [pc, #36]	; (80048cc <OSTimeDlyHMSM+0x88>)
 80048a8:	fba1 1303 	umull	r1, r3, r1, r3
 80048ac:	099b      	lsrs	r3, r3, #6
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600uL + (INT32U)minutes * 60uL + (INT32U)seconds) * OS_TICKS_PER_SEC
 80048ae:	4413      	add	r3, r2
 80048b0:	60fb      	str	r3, [r7, #12]
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500uL / OS_TICKS_PER_SEC) / 1000uL;
    OSTimeDly(ticks);
 80048b2:	68f8      	ldr	r0, [r7, #12]
 80048b4:	f7ff ff74 	bl	80047a0 <OSTimeDly>
    return (OS_ERR_NONE);
 80048b8:	2300      	movs	r3, #0
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3714      	adds	r7, #20
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd90      	pop	{r4, r7, pc}
 80048c2:	bf00      	nop
 80048c4:	20007154 	.word	0x20007154
 80048c8:	2000695c 	.word	0x2000695c
 80048cc:	10624dd3 	.word	0x10624dd3

080048d0 <OSTmrSignal>:
*********************************************************************************************************
*/

#if OS_TMR_EN > 0u
INT8U  OSTmrSignal (void)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b082      	sub	sp, #8
 80048d4:	af00      	add	r7, sp, #0
    INT8U  err;


    err = OSSemPost(OSTmrSemSignal);
 80048d6:	4b06      	ldr	r3, [pc, #24]	; (80048f0 <OSTmrSignal+0x20>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4618      	mov	r0, r3
 80048dc:	f7ff fc84 	bl	80041e8 <OSSemPost>
 80048e0:	4603      	mov	r3, r0
 80048e2:	71fb      	strb	r3, [r7, #7]
    return (err);
 80048e4:	79fb      	ldrb	r3, [r7, #7]
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3708      	adds	r7, #8
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}
 80048ee:	bf00      	nop
 80048f0:	20006960 	.word	0x20006960

080048f4 <OSTmr_Init>:
*********************************************************************************************************
*/

#if OS_TMR_EN > 0u
void  OSTmr_Init (void)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b084      	sub	sp, #16
 80048f8:	af00      	add	r7, sp, #0
    INT16U   ix_next;
    OS_TMR  *ptmr1;
    OS_TMR  *ptmr2;


    OS_MemClr((INT8U *)&OSTmrTbl[0],      sizeof(OSTmrTbl));            /* Clear all the TMRs                         */
 80048fa:	f44f 7120 	mov.w	r1, #640	; 0x280
 80048fe:	4838      	ldr	r0, [pc, #224]	; (80049e0 <OSTmr_Init+0xec>)
 8004900:	f7ff f8aa 	bl	8003a58 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTmrWheelTbl[0], sizeof(OSTmrWheelTbl));       /* Clear the timer wheel                      */
 8004904:	2140      	movs	r1, #64	; 0x40
 8004906:	4837      	ldr	r0, [pc, #220]	; (80049e4 <OSTmr_Init+0xf0>)
 8004908:	f7ff f8a6 	bl	8003a58 <OS_MemClr>

    for (ix = 0u; ix < (OS_TMR_CFG_MAX - 1u); ix++) {                   /* Init. list of free TMRs                    */
 800490c:	2300      	movs	r3, #0
 800490e:	81fb      	strh	r3, [r7, #14]
 8004910:	e022      	b.n	8004958 <OSTmr_Init+0x64>
        ix_next = ix + 1u;
 8004912:	89fb      	ldrh	r3, [r7, #14]
 8004914:	3301      	adds	r3, #1
 8004916:	81bb      	strh	r3, [r7, #12]
        ptmr1 = &OSTmrTbl[ix];
 8004918:	89fa      	ldrh	r2, [r7, #14]
 800491a:	4613      	mov	r3, r2
 800491c:	009b      	lsls	r3, r3, #2
 800491e:	4413      	add	r3, r2
 8004920:	00db      	lsls	r3, r3, #3
 8004922:	4a2f      	ldr	r2, [pc, #188]	; (80049e0 <OSTmr_Init+0xec>)
 8004924:	4413      	add	r3, r2
 8004926:	60bb      	str	r3, [r7, #8]
        ptmr2 = &OSTmrTbl[ix_next];
 8004928:	89ba      	ldrh	r2, [r7, #12]
 800492a:	4613      	mov	r3, r2
 800492c:	009b      	lsls	r3, r3, #2
 800492e:	4413      	add	r3, r2
 8004930:	00db      	lsls	r3, r3, #3
 8004932:	4a2b      	ldr	r2, [pc, #172]	; (80049e0 <OSTmr_Init+0xec>)
 8004934:	4413      	add	r3, r2
 8004936:	607b      	str	r3, [r7, #4]
        ptmr1->OSTmrType    = OS_TMR_TYPE;
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	2264      	movs	r2, #100	; 0x64
 800493c:	701a      	strb	r2, [r3, #0]
        ptmr1->OSTmrState   = OS_TMR_STATE_UNUSED;                      /* Indicate that timer is inactive            */
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	2200      	movs	r2, #0
 8004942:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
        ptmr1->OSTmrNext    = (void *)ptmr2;                            /* Link to next timer                         */
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	60da      	str	r2, [r3, #12]
#if OS_TMR_CFG_NAME_EN > 0u
        ptmr1->OSTmrName    = (INT8U *)(void *)"?";
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	4a26      	ldr	r2, [pc, #152]	; (80049e8 <OSTmr_Init+0xf4>)
 8004950:	621a      	str	r2, [r3, #32]


    OS_MemClr((INT8U *)&OSTmrTbl[0],      sizeof(OSTmrTbl));            /* Clear all the TMRs                         */
    OS_MemClr((INT8U *)&OSTmrWheelTbl[0], sizeof(OSTmrWheelTbl));       /* Clear the timer wheel                      */

    for (ix = 0u; ix < (OS_TMR_CFG_MAX - 1u); ix++) {                   /* Init. list of free TMRs                    */
 8004952:	89fb      	ldrh	r3, [r7, #14]
 8004954:	3301      	adds	r3, #1
 8004956:	81fb      	strh	r3, [r7, #14]
 8004958:	89fb      	ldrh	r3, [r7, #14]
 800495a:	2b0e      	cmp	r3, #14
 800495c:	d9d9      	bls.n	8004912 <OSTmr_Init+0x1e>
        ptmr1->OSTmrNext    = (void *)ptmr2;                            /* Link to next timer                         */
#if OS_TMR_CFG_NAME_EN > 0u
        ptmr1->OSTmrName    = (INT8U *)(void *)"?";
#endif
    }
    ptmr1               = &OSTmrTbl[ix];
 800495e:	89fa      	ldrh	r2, [r7, #14]
 8004960:	4613      	mov	r3, r2
 8004962:	009b      	lsls	r3, r3, #2
 8004964:	4413      	add	r3, r2
 8004966:	00db      	lsls	r3, r3, #3
 8004968:	4a1d      	ldr	r2, [pc, #116]	; (80049e0 <OSTmr_Init+0xec>)
 800496a:	4413      	add	r3, r2
 800496c:	60bb      	str	r3, [r7, #8]
    ptmr1->OSTmrType    = OS_TMR_TYPE;
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	2264      	movs	r2, #100	; 0x64
 8004972:	701a      	strb	r2, [r3, #0]
    ptmr1->OSTmrState   = OS_TMR_STATE_UNUSED;                          /* Indicate that timer is inactive            */
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	2200      	movs	r2, #0
 8004978:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    ptmr1->OSTmrNext    = (void *)0;                                    /* Last OS_TMR                                */
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	2200      	movs	r2, #0
 8004980:	60da      	str	r2, [r3, #12]
#if OS_TMR_CFG_NAME_EN > 0u
    ptmr1->OSTmrName    = (INT8U *)(void *)"?";
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	4a18      	ldr	r2, [pc, #96]	; (80049e8 <OSTmr_Init+0xf4>)
 8004986:	621a      	str	r2, [r3, #32]
#endif
    OSTmrTime           = 0u;
 8004988:	4b18      	ldr	r3, [pc, #96]	; (80049ec <OSTmr_Init+0xf8>)
 800498a:	2200      	movs	r2, #0
 800498c:	601a      	str	r2, [r3, #0]
    OSTmrUsed           = 0u;
 800498e:	4b18      	ldr	r3, [pc, #96]	; (80049f0 <OSTmr_Init+0xfc>)
 8004990:	2200      	movs	r2, #0
 8004992:	801a      	strh	r2, [r3, #0]
    OSTmrFree           = OS_TMR_CFG_MAX;
 8004994:	4b17      	ldr	r3, [pc, #92]	; (80049f4 <OSTmr_Init+0x100>)
 8004996:	2210      	movs	r2, #16
 8004998:	801a      	strh	r2, [r3, #0]
    OSTmrFreeList       = &OSTmrTbl[0];
 800499a:	4b17      	ldr	r3, [pc, #92]	; (80049f8 <OSTmr_Init+0x104>)
 800499c:	4a10      	ldr	r2, [pc, #64]	; (80049e0 <OSTmr_Init+0xec>)
 800499e:	601a      	str	r2, [r3, #0]
    OSTmrSem            = OSSemCreate(1u);
 80049a0:	2001      	movs	r0, #1
 80049a2:	f7ff fb59 	bl	8004058 <OSSemCreate>
 80049a6:	4602      	mov	r2, r0
 80049a8:	4b14      	ldr	r3, [pc, #80]	; (80049fc <OSTmr_Init+0x108>)
 80049aa:	601a      	str	r2, [r3, #0]
    OSTmrSemSignal      = OSSemCreate(0u);
 80049ac:	2000      	movs	r0, #0
 80049ae:	f7ff fb53 	bl	8004058 <OSSemCreate>
 80049b2:	4602      	mov	r2, r0
 80049b4:	4b12      	ldr	r3, [pc, #72]	; (8004a00 <OSTmr_Init+0x10c>)
 80049b6:	601a      	str	r2, [r3, #0]

#if OS_EVENT_NAME_EN > 0u                                               /* Assign names to semaphores                 */
    OSEventNameSet(OSTmrSem,       (INT8U *)(void *)"uC/OS-II TmrLock",   &err);
 80049b8:	4b10      	ldr	r3, [pc, #64]	; (80049fc <OSTmr_Init+0x108>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	1cfa      	adds	r2, r7, #3
 80049be:	4911      	ldr	r1, [pc, #68]	; (8004a04 <OSTmr_Init+0x110>)
 80049c0:	4618      	mov	r0, r3
 80049c2:	f7fe fbbd 	bl	8003140 <OSEventNameSet>
    OSEventNameSet(OSTmrSemSignal, (INT8U *)(void *)"uC/OS-II TmrSignal", &err);
 80049c6:	4b0e      	ldr	r3, [pc, #56]	; (8004a00 <OSTmr_Init+0x10c>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	1cfa      	adds	r2, r7, #3
 80049cc:	490e      	ldr	r1, [pc, #56]	; (8004a08 <OSTmr_Init+0x114>)
 80049ce:	4618      	mov	r0, r3
 80049d0:	f7fe fbb6 	bl	8003140 <OSEventNameSet>
#endif

    OSTmr_InitTask();
 80049d4:	f000 f81a 	bl	8004a0c <OSTmr_InitTask>
}
 80049d8:	bf00      	nop
 80049da:	3710      	adds	r7, #16
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}
 80049e0:	200069c0 	.word	0x200069c0
 80049e4:	2000691c 	.word	0x2000691c
 80049e8:	08007b14 	.word	0x08007b14
 80049ec:	2000715c 	.word	0x2000715c
 80049f0:	2000696c 	.word	0x2000696c
 80049f4:	20006ec8 	.word	0x20006ec8
 80049f8:	20006918 	.word	0x20006918
 80049fc:	20007164 	.word	0x20007164
 8004a00:	20006960 	.word	0x20006960
 8004a04:	08007b18 	.word	0x08007b18
 8004a08:	08007b2c 	.word	0x08007b2c

08004a0c <OSTmr_InitTask>:
*********************************************************************************************************
*/

#if OS_TMR_EN > 0u
static  void  OSTmr_InitTask (void)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b088      	sub	sp, #32
 8004a10:	af06      	add	r7, sp, #24
#endif


#if OS_TASK_CREATE_EXT_EN > 0u
    #if OS_STK_GROWTH == 1u
    (void)OSTaskCreateExt(OSTmr_Task,
 8004a12:	2303      	movs	r3, #3
 8004a14:	9304      	str	r3, [sp, #16]
 8004a16:	2300      	movs	r3, #0
 8004a18:	9303      	str	r3, [sp, #12]
 8004a1a:	2380      	movs	r3, #128	; 0x80
 8004a1c:	9302      	str	r3, [sp, #8]
 8004a1e:	4b0a      	ldr	r3, [pc, #40]	; (8004a48 <OSTmr_InitTask+0x3c>)
 8004a20:	9301      	str	r3, [sp, #4]
 8004a22:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 8004a26:	9300      	str	r3, [sp, #0]
 8004a28:	233d      	movs	r3, #61	; 0x3d
 8004a2a:	4a08      	ldr	r2, [pc, #32]	; (8004a4c <OSTmr_InitTask+0x40>)
 8004a2c:	2100      	movs	r1, #0
 8004a2e:	4808      	ldr	r0, [pc, #32]	; (8004a50 <OSTmr_InitTask+0x44>)
 8004a30:	f7ff fc14 	bl	800425c <OSTaskCreateExt>
                       OS_TASK_TMR_PRIO);
    #endif
#endif

#if OS_TASK_NAME_EN > 0u
    OSTaskNameSet(OS_TASK_TMR_PRIO, (INT8U *)(void *)"uC/OS-II Tmr", &err);
 8004a34:	1dfb      	adds	r3, r7, #7
 8004a36:	461a      	mov	r2, r3
 8004a38:	4906      	ldr	r1, [pc, #24]	; (8004a54 <OSTmr_InitTask+0x48>)
 8004a3a:	203d      	movs	r0, #61	; 0x3d
 8004a3c:	f7ff fd62 	bl	8004504 <OSTaskNameSet>
#endif
}
 8004a40:	bf00      	nop
 8004a42:	3708      	adds	r7, #8
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}
 8004a48:	20006f50 	.word	0x20006f50
 8004a4c:	2000714c 	.word	0x2000714c
 8004a50:	08004ba9 	.word	0x08004ba9
 8004a54:	08007b40 	.word	0x08007b40

08004a58 <OSTmr_Link>:
*/

#if OS_TMR_EN > 0u
static  void  OSTmr_Link (OS_TMR  *ptmr,
                          INT8U    type)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b087      	sub	sp, #28
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
 8004a60:	460b      	mov	r3, r1
 8004a62:	70fb      	strb	r3, [r7, #3]
    OS_TMR       *ptmr1;
    OS_TMR_WHEEL *pspoke;
    INT16U        spoke;


    ptmr->OSTmrState = OS_TMR_STATE_RUNNING;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2203      	movs	r2, #3
 8004a68:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    if (type == OS_TMR_LINK_PERIODIC) {                            /* Determine when timer will expire                */
 8004a6c:	78fb      	ldrb	r3, [r7, #3]
 8004a6e:	2b01      	cmp	r3, #1
 8004a70:	d107      	bne.n	8004a82 <OSTmr_Link+0x2a>
        ptmr->OSTmrMatch = ptmr->OSTmrPeriod + OSTmrTime;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	69da      	ldr	r2, [r3, #28]
 8004a76:	4b26      	ldr	r3, [pc, #152]	; (8004b10 <OSTmr_Link+0xb8>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	441a      	add	r2, r3
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	615a      	str	r2, [r3, #20]
 8004a80:	e012      	b.n	8004aa8 <OSTmr_Link+0x50>
    } else {
        if (ptmr->OSTmrDly == 0u) {
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	699b      	ldr	r3, [r3, #24]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d107      	bne.n	8004a9a <OSTmr_Link+0x42>
            ptmr->OSTmrMatch = ptmr->OSTmrPeriod + OSTmrTime;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	69da      	ldr	r2, [r3, #28]
 8004a8e:	4b20      	ldr	r3, [pc, #128]	; (8004b10 <OSTmr_Link+0xb8>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	441a      	add	r2, r3
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	615a      	str	r2, [r3, #20]
 8004a98:	e006      	b.n	8004aa8 <OSTmr_Link+0x50>
        } else {
            ptmr->OSTmrMatch = ptmr->OSTmrDly    + OSTmrTime;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	699a      	ldr	r2, [r3, #24]
 8004a9e:	4b1c      	ldr	r3, [pc, #112]	; (8004b10 <OSTmr_Link+0xb8>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	441a      	add	r2, r3
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	615a      	str	r2, [r3, #20]
        }
    }
    spoke  = (INT16U)(ptmr->OSTmrMatch % OS_TMR_CFG_WHEEL_SIZE);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	695b      	ldr	r3, [r3, #20]
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	f003 0307 	and.w	r3, r3, #7
 8004ab2:	82fb      	strh	r3, [r7, #22]
    pspoke = &OSTmrWheelTbl[spoke];
 8004ab4:	8afb      	ldrh	r3, [r7, #22]
 8004ab6:	00db      	lsls	r3, r3, #3
 8004ab8:	4a16      	ldr	r2, [pc, #88]	; (8004b14 <OSTmr_Link+0xbc>)
 8004aba:	4413      	add	r3, r2
 8004abc:	613b      	str	r3, [r7, #16]

    if (pspoke->OSTmrFirst == (OS_TMR *)0) {                       /* Link into timer wheel                           */
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d109      	bne.n	8004ada <OSTmr_Link+0x82>
        pspoke->OSTmrFirst   = ptmr;
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	601a      	str	r2, [r3, #0]
        ptmr->OSTmrNext      = (OS_TMR *)0;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	60da      	str	r2, [r3, #12]
        pspoke->OSTmrEntries = 1u;
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	809a      	strh	r2, [r3, #4]
 8004ad8:	e011      	b.n	8004afe <OSTmr_Link+0xa6>
    } else {
        ptmr1                = pspoke->OSTmrFirst;                 /* Point to first timer in the spoke               */
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	60fb      	str	r3, [r7, #12]
        pspoke->OSTmrFirst   = ptmr;
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	601a      	str	r2, [r3, #0]
        ptmr->OSTmrNext      = (void *)ptmr1;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	68fa      	ldr	r2, [r7, #12]
 8004aea:	60da      	str	r2, [r3, #12]
        ptmr1->OSTmrPrev     = (void *)ptmr;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	611a      	str	r2, [r3, #16]
        pspoke->OSTmrEntries++;
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	889b      	ldrh	r3, [r3, #4]
 8004af6:	3301      	adds	r3, #1
 8004af8:	b29a      	uxth	r2, r3
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	809a      	strh	r2, [r3, #4]
    }
    ptmr->OSTmrPrev = (void *)0;                                   /* Timer always inserted as first node in list     */
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2200      	movs	r2, #0
 8004b02:	611a      	str	r2, [r3, #16]
}
 8004b04:	bf00      	nop
 8004b06:	371c      	adds	r7, #28
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bc80      	pop	{r7}
 8004b0c:	4770      	bx	lr
 8004b0e:	bf00      	nop
 8004b10:	2000715c 	.word	0x2000715c
 8004b14:	2000691c 	.word	0x2000691c

08004b18 <OSTmr_Unlink>:
*********************************************************************************************************
*/

#if OS_TMR_EN > 0u
static  void  OSTmr_Unlink (OS_TMR *ptmr)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b087      	sub	sp, #28
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
    OS_TMR        *ptmr2;
    OS_TMR_WHEEL  *pspoke;
    INT16U         spoke;


    spoke  = (INT16U)(ptmr->OSTmrMatch % OS_TMR_CFG_WHEEL_SIZE);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	695b      	ldr	r3, [r3, #20]
 8004b24:	b29b      	uxth	r3, r3
 8004b26:	f003 0307 	and.w	r3, r3, #7
 8004b2a:	82fb      	strh	r3, [r7, #22]
    pspoke = &OSTmrWheelTbl[spoke];
 8004b2c:	8afb      	ldrh	r3, [r7, #22]
 8004b2e:	00db      	lsls	r3, r3, #3
 8004b30:	4a1c      	ldr	r2, [pc, #112]	; (8004ba4 <OSTmr_Unlink+0x8c>)
 8004b32:	4413      	add	r3, r2
 8004b34:	613b      	str	r3, [r7, #16]

    if (pspoke->OSTmrFirst == ptmr) {                       /* See if timer to remove is at the beginning of list     */
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d10c      	bne.n	8004b5a <OSTmr_Unlink+0x42>
        ptmr1              = (OS_TMR *)ptmr->OSTmrNext;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	68db      	ldr	r3, [r3, #12]
 8004b44:	60fb      	str	r3, [r7, #12]
        pspoke->OSTmrFirst = (OS_TMR *)ptmr1;
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	68fa      	ldr	r2, [r7, #12]
 8004b4a:	601a      	str	r2, [r3, #0]
        if (ptmr1 != (OS_TMR *)0) {
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d012      	beq.n	8004b78 <OSTmr_Unlink+0x60>
            ptmr1->OSTmrPrev = (void *)0;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2200      	movs	r2, #0
 8004b56:	611a      	str	r2, [r3, #16]
 8004b58:	e00e      	b.n	8004b78 <OSTmr_Unlink+0x60>
        }
    } else {
        ptmr1            = (OS_TMR *)ptmr->OSTmrPrev;       /* Remove timer from somewhere in the list                */
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	691b      	ldr	r3, [r3, #16]
 8004b5e:	60fb      	str	r3, [r7, #12]
        ptmr2            = (OS_TMR *)ptmr->OSTmrNext;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	68db      	ldr	r3, [r3, #12]
 8004b64:	60bb      	str	r3, [r7, #8]
        ptmr1->OSTmrNext = ptmr2;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	68ba      	ldr	r2, [r7, #8]
 8004b6a:	60da      	str	r2, [r3, #12]
        if (ptmr2 != (OS_TMR *)0) {
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d002      	beq.n	8004b78 <OSTmr_Unlink+0x60>
            ptmr2->OSTmrPrev = (void *)ptmr1;
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	68fa      	ldr	r2, [r7, #12]
 8004b76:	611a      	str	r2, [r3, #16]
        }
    }
    ptmr->OSTmrState = OS_TMR_STATE_STOPPED;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    ptmr->OSTmrNext  = (void *)0;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2200      	movs	r2, #0
 8004b84:	60da      	str	r2, [r3, #12]
    ptmr->OSTmrPrev  = (void *)0;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	611a      	str	r2, [r3, #16]
    pspoke->OSTmrEntries--;
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	889b      	ldrh	r3, [r3, #4]
 8004b90:	3b01      	subs	r3, #1
 8004b92:	b29a      	uxth	r2, r3
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	809a      	strh	r2, [r3, #4]
}
 8004b98:	bf00      	nop
 8004b9a:	371c      	adds	r7, #28
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bc80      	pop	{r7}
 8004ba0:	4770      	bx	lr
 8004ba2:	bf00      	nop
 8004ba4:	2000691c 	.word	0x2000691c

08004ba8 <OSTmr_Task>:
*********************************************************************************************************
*/

#if OS_TMR_EN > 0u
static  void  OSTmr_Task (void *p_arg)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b088      	sub	sp, #32
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
    INT16U           spoke;


    p_arg = p_arg;                                               /* Prevent compiler warning for not using 'p_arg'    */
    for (;;) {
        OSSemPend(OSTmrSemSignal, 0u, &err);                     /* Wait for signal indicating time to update timers  */
 8004bb0:	4b25      	ldr	r3, [pc, #148]	; (8004c48 <OSTmr_Task+0xa0>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f107 020b 	add.w	r2, r7, #11
 8004bb8:	2100      	movs	r1, #0
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f7ff fa88 	bl	80040d0 <OSSemPend>
        OSSchedLock();
 8004bc0:	f7fe fb72 	bl	80032a8 <OSSchedLock>
        OSTmrTime++;                                             /* Increment the current time                        */
 8004bc4:	4b21      	ldr	r3, [pc, #132]	; (8004c4c <OSTmr_Task+0xa4>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	3301      	adds	r3, #1
 8004bca:	4a20      	ldr	r2, [pc, #128]	; (8004c4c <OSTmr_Task+0xa4>)
 8004bcc:	6013      	str	r3, [r2, #0]
        spoke  = (INT16U)(OSTmrTime % OS_TMR_CFG_WHEEL_SIZE);    /* Position on current timer wheel entry             */
 8004bce:	4b1f      	ldr	r3, [pc, #124]	; (8004c4c <OSTmr_Task+0xa4>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	b29b      	uxth	r3, r3
 8004bd4:	f003 0307 	and.w	r3, r3, #7
 8004bd8:	837b      	strh	r3, [r7, #26]
        pspoke = &OSTmrWheelTbl[spoke];
 8004bda:	8b7b      	ldrh	r3, [r7, #26]
 8004bdc:	00db      	lsls	r3, r3, #3
 8004bde:	4a1c      	ldr	r2, [pc, #112]	; (8004c50 <OSTmr_Task+0xa8>)
 8004be0:	4413      	add	r3, r2
 8004be2:	617b      	str	r3, [r7, #20]
        ptmr   = pspoke->OSTmrFirst;
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	61fb      	str	r3, [r7, #28]
        while (ptmr != (OS_TMR *)0) {
 8004bea:	e027      	b.n	8004c3c <OSTmr_Task+0x94>
            ptmr_next = (OS_TMR *)ptmr->OSTmrNext;               /* Point to next timer to update because current ... */
 8004bec:	69fb      	ldr	r3, [r7, #28]
 8004bee:	68db      	ldr	r3, [r3, #12]
 8004bf0:	613b      	str	r3, [r7, #16]
                                                                 /* ... timer could get unlinked from the wheel.      */
            if (OSTmrTime == ptmr->OSTmrMatch) {                 /* Process each timer that expires                   */
 8004bf2:	69fb      	ldr	r3, [r7, #28]
 8004bf4:	695a      	ldr	r2, [r3, #20]
 8004bf6:	4b15      	ldr	r3, [pc, #84]	; (8004c4c <OSTmr_Task+0xa4>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d11c      	bne.n	8004c38 <OSTmr_Task+0x90>
                OSTmr_Unlink(ptmr);                              /* Remove from current wheel spoke                   */
 8004bfe:	69f8      	ldr	r0, [r7, #28]
 8004c00:	f7ff ff8a 	bl	8004b18 <OSTmr_Unlink>
                if (ptmr->OSTmrOpt == OS_TMR_OPT_PERIODIC) {
 8004c04:	69fb      	ldr	r3, [r7, #28]
 8004c06:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004c0a:	2b02      	cmp	r3, #2
 8004c0c:	d104      	bne.n	8004c18 <OSTmr_Task+0x70>
                    OSTmr_Link(ptmr, OS_TMR_LINK_PERIODIC);      /* Recalculate new position of timer in wheel        */
 8004c0e:	2101      	movs	r1, #1
 8004c10:	69f8      	ldr	r0, [r7, #28]
 8004c12:	f7ff ff21 	bl	8004a58 <OSTmr_Link>
 8004c16:	e003      	b.n	8004c20 <OSTmr_Task+0x78>
                } else {
                    ptmr->OSTmrState = OS_TMR_STATE_COMPLETED;   /* Indicate that the timer has completed             */
 8004c18:	69fb      	ldr	r3, [r7, #28]
 8004c1a:	2202      	movs	r2, #2
 8004c1c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
                }
                pfnct = ptmr->OSTmrCallback;                     /* Execute callback function if available            */
 8004c20:	69fb      	ldr	r3, [r7, #28]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	60fb      	str	r3, [r7, #12]
                if (pfnct != (OS_TMR_CALLBACK)0) {
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d005      	beq.n	8004c38 <OSTmr_Task+0x90>
                    (*pfnct)((void *)ptmr, ptmr->OSTmrCallbackArg);
 8004c2c:	69fb      	ldr	r3, [r7, #28]
 8004c2e:	689a      	ldr	r2, [r3, #8]
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	4611      	mov	r1, r2
 8004c34:	69f8      	ldr	r0, [r7, #28]
 8004c36:	4798      	blx	r3
                }
            }
            ptmr = ptmr_next;
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	61fb      	str	r3, [r7, #28]
        OSSchedLock();
        OSTmrTime++;                                             /* Increment the current time                        */
        spoke  = (INT16U)(OSTmrTime % OS_TMR_CFG_WHEEL_SIZE);    /* Position on current timer wheel entry             */
        pspoke = &OSTmrWheelTbl[spoke];
        ptmr   = pspoke->OSTmrFirst;
        while (ptmr != (OS_TMR *)0) {
 8004c3c:	69fb      	ldr	r3, [r7, #28]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d1d4      	bne.n	8004bec <OSTmr_Task+0x44>
                    (*pfnct)((void *)ptmr, ptmr->OSTmrCallbackArg);
                }
            }
            ptmr = ptmr_next;
        }
        OSSchedUnlock();
 8004c42:	f7fe fb59 	bl	80032f8 <OSSchedUnlock>
    }
 8004c46:	e7b3      	b.n	8004bb0 <OSTmr_Task+0x8>
 8004c48:	20006960 	.word	0x20006960
 8004c4c:	2000715c 	.word	0x2000715c
 8004c50:	2000691c 	.word	0x2000691c

08004c54 <__libc_init_array>:
 8004c54:	4b0e      	ldr	r3, [pc, #56]	; (8004c90 <__libc_init_array+0x3c>)
 8004c56:	b570      	push	{r4, r5, r6, lr}
 8004c58:	461e      	mov	r6, r3
 8004c5a:	4c0e      	ldr	r4, [pc, #56]	; (8004c94 <__libc_init_array+0x40>)
 8004c5c:	2500      	movs	r5, #0
 8004c5e:	1ae4      	subs	r4, r4, r3
 8004c60:	10a4      	asrs	r4, r4, #2
 8004c62:	42a5      	cmp	r5, r4
 8004c64:	d004      	beq.n	8004c70 <__libc_init_array+0x1c>
 8004c66:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004c6a:	4798      	blx	r3
 8004c6c:	3501      	adds	r5, #1
 8004c6e:	e7f8      	b.n	8004c62 <__libc_init_array+0xe>
 8004c70:	f003 f8e8 	bl	8007e44 <_init>
 8004c74:	4b08      	ldr	r3, [pc, #32]	; (8004c98 <__libc_init_array+0x44>)
 8004c76:	4c09      	ldr	r4, [pc, #36]	; (8004c9c <__libc_init_array+0x48>)
 8004c78:	461e      	mov	r6, r3
 8004c7a:	1ae4      	subs	r4, r4, r3
 8004c7c:	10a4      	asrs	r4, r4, #2
 8004c7e:	2500      	movs	r5, #0
 8004c80:	42a5      	cmp	r5, r4
 8004c82:	d004      	beq.n	8004c8e <__libc_init_array+0x3a>
 8004c84:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004c88:	4798      	blx	r3
 8004c8a:	3501      	adds	r5, #1
 8004c8c:	e7f8      	b.n	8004c80 <__libc_init_array+0x2c>
 8004c8e:	bd70      	pop	{r4, r5, r6, pc}
 8004c90:	08007e64 	.word	0x08007e64
 8004c94:	08007e64 	.word	0x08007e64
 8004c98:	08007e64 	.word	0x08007e64
 8004c9c:	08007e68 	.word	0x08007e68

08004ca0 <_vsnprintf_r>:
 8004ca0:	b530      	push	{r4, r5, lr}
 8004ca2:	1e14      	subs	r4, r2, #0
 8004ca4:	4605      	mov	r5, r0
 8004ca6:	b09b      	sub	sp, #108	; 0x6c
 8004ca8:	4618      	mov	r0, r3
 8004caa:	da04      	bge.n	8004cb6 <_vsnprintf_r+0x16>
 8004cac:	238b      	movs	r3, #139	; 0x8b
 8004cae:	602b      	str	r3, [r5, #0]
 8004cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8004cb4:	e01d      	b.n	8004cf2 <_vsnprintf_r+0x52>
 8004cb6:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004cba:	f8ad 300c 	strh.w	r3, [sp, #12]
 8004cbe:	bf0c      	ite	eq
 8004cc0:	4623      	moveq	r3, r4
 8004cc2:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004cc6:	9302      	str	r3, [sp, #8]
 8004cc8:	9305      	str	r3, [sp, #20]
 8004cca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004cce:	9100      	str	r1, [sp, #0]
 8004cd0:	9104      	str	r1, [sp, #16]
 8004cd2:	f8ad 300e 	strh.w	r3, [sp, #14]
 8004cd6:	4602      	mov	r2, r0
 8004cd8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004cda:	4669      	mov	r1, sp
 8004cdc:	4628      	mov	r0, r5
 8004cde:	f000 f819 	bl	8004d14 <_svfprintf_r>
 8004ce2:	1c43      	adds	r3, r0, #1
 8004ce4:	bfbc      	itt	lt
 8004ce6:	238b      	movlt	r3, #139	; 0x8b
 8004ce8:	602b      	strlt	r3, [r5, #0]
 8004cea:	b114      	cbz	r4, 8004cf2 <_vsnprintf_r+0x52>
 8004cec:	9b00      	ldr	r3, [sp, #0]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	701a      	strb	r2, [r3, #0]
 8004cf2:	b01b      	add	sp, #108	; 0x6c
 8004cf4:	bd30      	pop	{r4, r5, pc}
	...

08004cf8 <vsnprintf>:
 8004cf8:	b507      	push	{r0, r1, r2, lr}
 8004cfa:	9300      	str	r3, [sp, #0]
 8004cfc:	4613      	mov	r3, r2
 8004cfe:	460a      	mov	r2, r1
 8004d00:	4601      	mov	r1, r0
 8004d02:	4803      	ldr	r0, [pc, #12]	; (8004d10 <vsnprintf+0x18>)
 8004d04:	6800      	ldr	r0, [r0, #0]
 8004d06:	f7ff ffcb 	bl	8004ca0 <_vsnprintf_r>
 8004d0a:	b003      	add	sp, #12
 8004d0c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004d10:	200000f0 	.word	0x200000f0

08004d14 <_svfprintf_r>:
 8004d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d18:	b0bd      	sub	sp, #244	; 0xf4
 8004d1a:	468b      	mov	fp, r1
 8004d1c:	9209      	str	r2, [sp, #36]	; 0x24
 8004d1e:	461f      	mov	r7, r3
 8004d20:	4681      	mov	r9, r0
 8004d22:	f001 fdd5 	bl	80068d0 <_localeconv_r>
 8004d26:	6803      	ldr	r3, [r0, #0]
 8004d28:	4618      	mov	r0, r3
 8004d2a:	9311      	str	r3, [sp, #68]	; 0x44
 8004d2c:	f7fb faa2 	bl	8000274 <strlen>
 8004d30:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8004d34:	900a      	str	r0, [sp, #40]	; 0x28
 8004d36:	0619      	lsls	r1, r3, #24
 8004d38:	d515      	bpl.n	8004d66 <_svfprintf_r+0x52>
 8004d3a:	f8db 3010 	ldr.w	r3, [fp, #16]
 8004d3e:	b993      	cbnz	r3, 8004d66 <_svfprintf_r+0x52>
 8004d40:	2140      	movs	r1, #64	; 0x40
 8004d42:	4648      	mov	r0, r9
 8004d44:	f001 fdd0 	bl	80068e8 <_malloc_r>
 8004d48:	f8cb 0000 	str.w	r0, [fp]
 8004d4c:	f8cb 0010 	str.w	r0, [fp, #16]
 8004d50:	b930      	cbnz	r0, 8004d60 <_svfprintf_r+0x4c>
 8004d52:	230c      	movs	r3, #12
 8004d54:	f8c9 3000 	str.w	r3, [r9]
 8004d58:	f04f 30ff 	mov.w	r0, #4294967295
 8004d5c:	f000 bf8b 	b.w	8005c76 <_svfprintf_r+0xf62>
 8004d60:	2340      	movs	r3, #64	; 0x40
 8004d62:	f8cb 3014 	str.w	r3, [fp, #20]
 8004d66:	2300      	movs	r3, #0
 8004d68:	ac2c      	add	r4, sp, #176	; 0xb0
 8004d6a:	941f      	str	r4, [sp, #124]	; 0x7c
 8004d6c:	9321      	str	r3, [sp, #132]	; 0x84
 8004d6e:	9320      	str	r3, [sp, #128]	; 0x80
 8004d70:	9308      	str	r3, [sp, #32]
 8004d72:	930c      	str	r3, [sp, #48]	; 0x30
 8004d74:	930d      	str	r3, [sp, #52]	; 0x34
 8004d76:	9313      	str	r3, [sp, #76]	; 0x4c
 8004d78:	9312      	str	r3, [sp, #72]	; 0x48
 8004d7a:	930e      	str	r3, [sp, #56]	; 0x38
 8004d7c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004d7e:	462b      	mov	r3, r5
 8004d80:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004d84:	b11a      	cbz	r2, 8004d8e <_svfprintf_r+0x7a>
 8004d86:	2a25      	cmp	r2, #37	; 0x25
 8004d88:	d001      	beq.n	8004d8e <_svfprintf_r+0x7a>
 8004d8a:	461d      	mov	r5, r3
 8004d8c:	e7f7      	b.n	8004d7e <_svfprintf_r+0x6a>
 8004d8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d90:	1aee      	subs	r6, r5, r3
 8004d92:	d017      	beq.n	8004dc4 <_svfprintf_r+0xb0>
 8004d94:	e884 0048 	stmia.w	r4, {r3, r6}
 8004d98:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004d9a:	4433      	add	r3, r6
 8004d9c:	9321      	str	r3, [sp, #132]	; 0x84
 8004d9e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004da0:	3301      	adds	r3, #1
 8004da2:	2b07      	cmp	r3, #7
 8004da4:	9320      	str	r3, [sp, #128]	; 0x80
 8004da6:	dc01      	bgt.n	8004dac <_svfprintf_r+0x98>
 8004da8:	3408      	adds	r4, #8
 8004daa:	e008      	b.n	8004dbe <_svfprintf_r+0xaa>
 8004dac:	aa1f      	add	r2, sp, #124	; 0x7c
 8004dae:	4659      	mov	r1, fp
 8004db0:	4648      	mov	r0, r9
 8004db2:	f002 fab5 	bl	8007320 <__ssprint_r>
 8004db6:	2800      	cmp	r0, #0
 8004db8:	f040 8622 	bne.w	8005a00 <_svfprintf_r+0xcec>
 8004dbc:	ac2c      	add	r4, sp, #176	; 0xb0
 8004dbe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004dc0:	4433      	add	r3, r6
 8004dc2:	930e      	str	r3, [sp, #56]	; 0x38
 8004dc4:	782b      	ldrb	r3, [r5, #0]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	f000 8613 	beq.w	80059f2 <_svfprintf_r+0xcde>
 8004dcc:	2200      	movs	r2, #0
 8004dce:	1c6b      	adds	r3, r5, #1
 8004dd0:	4611      	mov	r1, r2
 8004dd2:	4615      	mov	r5, r2
 8004dd4:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8004dd8:	f04f 3aff 	mov.w	sl, #4294967295
 8004ddc:	920b      	str	r2, [sp, #44]	; 0x2c
 8004dde:	200a      	movs	r0, #10
 8004de0:	1c5e      	adds	r6, r3, #1
 8004de2:	781b      	ldrb	r3, [r3, #0]
 8004de4:	9609      	str	r6, [sp, #36]	; 0x24
 8004de6:	9306      	str	r3, [sp, #24]
 8004de8:	9b06      	ldr	r3, [sp, #24]
 8004dea:	3b20      	subs	r3, #32
 8004dec:	2b58      	cmp	r3, #88	; 0x58
 8004dee:	f200 8259 	bhi.w	80052a4 <_svfprintf_r+0x590>
 8004df2:	e8df f013 	tbh	[pc, r3, lsl #1]
 8004df6:	005c      	.short	0x005c
 8004df8:	02570257 	.word	0x02570257
 8004dfc:	0257006b 	.word	0x0257006b
 8004e00:	02570257 	.word	0x02570257
 8004e04:	02570257 	.word	0x02570257
 8004e08:	006e0257 	.word	0x006e0257
 8004e0c:	02570059 	.word	0x02570059
 8004e10:	007b0078 	.word	0x007b0078
 8004e14:	009f0257 	.word	0x009f0257
 8004e18:	00a200a2 	.word	0x00a200a2
 8004e1c:	00a200a2 	.word	0x00a200a2
 8004e20:	00a200a2 	.word	0x00a200a2
 8004e24:	00a200a2 	.word	0x00a200a2
 8004e28:	025700a2 	.word	0x025700a2
 8004e2c:	02570257 	.word	0x02570257
 8004e30:	02570257 	.word	0x02570257
 8004e34:	02570257 	.word	0x02570257
 8004e38:	02570257 	.word	0x02570257
 8004e3c:	00d20257 	.word	0x00d20257
 8004e40:	025700fe 	.word	0x025700fe
 8004e44:	025700fe 	.word	0x025700fe
 8004e48:	02570257 	.word	0x02570257
 8004e4c:	00b50257 	.word	0x00b50257
 8004e50:	02570257 	.word	0x02570257
 8004e54:	02570143 	.word	0x02570143
 8004e58:	02570257 	.word	0x02570257
 8004e5c:	02570257 	.word	0x02570257
 8004e60:	0257018a 	.word	0x0257018a
 8004e64:	00660257 	.word	0x00660257
 8004e68:	02570257 	.word	0x02570257
 8004e6c:	02570257 	.word	0x02570257
 8004e70:	02570257 	.word	0x02570257
 8004e74:	02570257 	.word	0x02570257
 8004e78:	02570257 	.word	0x02570257
 8004e7c:	006100c9 	.word	0x006100c9
 8004e80:	00fe00fe 	.word	0x00fe00fe
 8004e84:	00b800fe 	.word	0x00b800fe
 8004e88:	02570061 	.word	0x02570061
 8004e8c:	00bb0257 	.word	0x00bb0257
 8004e90:	01250257 	.word	0x01250257
 8004e94:	01600145 	.word	0x01600145
 8004e98:	025700c6 	.word	0x025700c6
 8004e9c:	02570171 	.word	0x02570171
 8004ea0:	0257018c 	.word	0x0257018c
 8004ea4:	01a40257 	.word	0x01a40257
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	212b      	movs	r1, #43	; 0x2b
 8004eac:	e002      	b.n	8004eb4 <_svfprintf_r+0x1a0>
 8004eae:	b909      	cbnz	r1, 8004eb4 <_svfprintf_r+0x1a0>
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	2120      	movs	r1, #32
 8004eb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004eb6:	e793      	b.n	8004de0 <_svfprintf_r+0xcc>
 8004eb8:	2a00      	cmp	r2, #0
 8004eba:	d073      	beq.n	8004fa4 <_svfprintf_r+0x290>
 8004ebc:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8004ec0:	e070      	b.n	8004fa4 <_svfprintf_r+0x290>
 8004ec2:	b10a      	cbz	r2, 8004ec8 <_svfprintf_r+0x1b4>
 8004ec4:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8004ec8:	4ba9      	ldr	r3, [pc, #676]	; (8005170 <_svfprintf_r+0x45c>)
 8004eca:	e13c      	b.n	8005146 <_svfprintf_r+0x432>
 8004ecc:	f045 0501 	orr.w	r5, r5, #1
 8004ed0:	e7f0      	b.n	8004eb4 <_svfprintf_r+0x1a0>
 8004ed2:	683e      	ldr	r6, [r7, #0]
 8004ed4:	1d3b      	adds	r3, r7, #4
 8004ed6:	2e00      	cmp	r6, #0
 8004ed8:	960b      	str	r6, [sp, #44]	; 0x2c
 8004eda:	db01      	blt.n	8004ee0 <_svfprintf_r+0x1cc>
 8004edc:	461f      	mov	r7, r3
 8004ede:	e7e9      	b.n	8004eb4 <_svfprintf_r+0x1a0>
 8004ee0:	461f      	mov	r7, r3
 8004ee2:	4276      	negs	r6, r6
 8004ee4:	960b      	str	r6, [sp, #44]	; 0x2c
 8004ee6:	f045 0504 	orr.w	r5, r5, #4
 8004eea:	e7e3      	b.n	8004eb4 <_svfprintf_r+0x1a0>
 8004eec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004eee:	1c5e      	adds	r6, r3, #1
 8004ef0:	781b      	ldrb	r3, [r3, #0]
 8004ef2:	2b2a      	cmp	r3, #42	; 0x2a
 8004ef4:	9306      	str	r3, [sp, #24]
 8004ef6:	d001      	beq.n	8004efc <_svfprintf_r+0x1e8>
 8004ef8:	2300      	movs	r3, #0
 8004efa:	e00a      	b.n	8004f12 <_svfprintf_r+0x1fe>
 8004efc:	f8d7 a000 	ldr.w	sl, [r7]
 8004f00:	1d3b      	adds	r3, r7, #4
 8004f02:	f1ba 0f00 	cmp.w	sl, #0
 8004f06:	461f      	mov	r7, r3
 8004f08:	9609      	str	r6, [sp, #36]	; 0x24
 8004f0a:	dad3      	bge.n	8004eb4 <_svfprintf_r+0x1a0>
 8004f0c:	f04f 3aff 	mov.w	sl, #4294967295
 8004f10:	e7d0      	b.n	8004eb4 <_svfprintf_r+0x1a0>
 8004f12:	9609      	str	r6, [sp, #36]	; 0x24
 8004f14:	9e06      	ldr	r6, [sp, #24]
 8004f16:	3e30      	subs	r6, #48	; 0x30
 8004f18:	2e09      	cmp	r6, #9
 8004f1a:	d808      	bhi.n	8004f2e <_svfprintf_r+0x21a>
 8004f1c:	fb00 6303 	mla	r3, r0, r3, r6
 8004f20:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8004f22:	46b6      	mov	lr, r6
 8004f24:	f81e 6b01 	ldrb.w	r6, [lr], #1
 8004f28:	9606      	str	r6, [sp, #24]
 8004f2a:	4676      	mov	r6, lr
 8004f2c:	e7f1      	b.n	8004f12 <_svfprintf_r+0x1fe>
 8004f2e:	ea43 7ae3 	orr.w	sl, r3, r3, asr #31
 8004f32:	e759      	b.n	8004de8 <_svfprintf_r+0xd4>
 8004f34:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8004f38:	e7bc      	b.n	8004eb4 <_svfprintf_r+0x1a0>
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	930b      	str	r3, [sp, #44]	; 0x2c
 8004f3e:	9b06      	ldr	r3, [sp, #24]
 8004f40:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8004f42:	3b30      	subs	r3, #48	; 0x30
 8004f44:	fb00 3306 	mla	r3, r0, r6, r3
 8004f48:	930b      	str	r3, [sp, #44]	; 0x2c
 8004f4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f4c:	461e      	mov	r6, r3
 8004f4e:	f816 3b01 	ldrb.w	r3, [r6], #1
 8004f52:	9306      	str	r3, [sp, #24]
 8004f54:	9b06      	ldr	r3, [sp, #24]
 8004f56:	9609      	str	r6, [sp, #36]	; 0x24
 8004f58:	3b30      	subs	r3, #48	; 0x30
 8004f5a:	2b09      	cmp	r3, #9
 8004f5c:	d9ef      	bls.n	8004f3e <_svfprintf_r+0x22a>
 8004f5e:	e743      	b.n	8004de8 <_svfprintf_r+0xd4>
 8004f60:	f045 0508 	orr.w	r5, r5, #8
 8004f64:	e7a6      	b.n	8004eb4 <_svfprintf_r+0x1a0>
 8004f66:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 8004f6a:	e7a3      	b.n	8004eb4 <_svfprintf_r+0x1a0>
 8004f6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f6e:	781b      	ldrb	r3, [r3, #0]
 8004f70:	2b6c      	cmp	r3, #108	; 0x6c
 8004f72:	d103      	bne.n	8004f7c <_svfprintf_r+0x268>
 8004f74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f76:	3301      	adds	r3, #1
 8004f78:	9309      	str	r3, [sp, #36]	; 0x24
 8004f7a:	e002      	b.n	8004f82 <_svfprintf_r+0x26e>
 8004f7c:	f045 0510 	orr.w	r5, r5, #16
 8004f80:	e798      	b.n	8004eb4 <_svfprintf_r+0x1a0>
 8004f82:	f045 0520 	orr.w	r5, r5, #32
 8004f86:	e795      	b.n	8004eb4 <_svfprintf_r+0x1a0>
 8004f88:	1d3b      	adds	r3, r7, #4
 8004f8a:	9307      	str	r3, [sp, #28]
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	2600      	movs	r6, #0
 8004f90:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 8004f94:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8004f98:	e193      	b.n	80052c2 <_svfprintf_r+0x5ae>
 8004f9a:	b10a      	cbz	r2, 8004fa0 <_svfprintf_r+0x28c>
 8004f9c:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8004fa0:	f045 0510 	orr.w	r5, r5, #16
 8004fa4:	06aa      	lsls	r2, r5, #26
 8004fa6:	d508      	bpl.n	8004fba <_svfprintf_r+0x2a6>
 8004fa8:	3707      	adds	r7, #7
 8004faa:	f027 0707 	bic.w	r7, r7, #7
 8004fae:	f107 0308 	add.w	r3, r7, #8
 8004fb2:	9307      	str	r3, [sp, #28]
 8004fb4:	e9d7 6700 	ldrd	r6, r7, [r7]
 8004fb8:	e00e      	b.n	8004fd8 <_svfprintf_r+0x2c4>
 8004fba:	f015 0f10 	tst.w	r5, #16
 8004fbe:	f107 0304 	add.w	r3, r7, #4
 8004fc2:	d002      	beq.n	8004fca <_svfprintf_r+0x2b6>
 8004fc4:	9307      	str	r3, [sp, #28]
 8004fc6:	683e      	ldr	r6, [r7, #0]
 8004fc8:	e005      	b.n	8004fd6 <_svfprintf_r+0x2c2>
 8004fca:	683e      	ldr	r6, [r7, #0]
 8004fcc:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004fd0:	9307      	str	r3, [sp, #28]
 8004fd2:	bf18      	it	ne
 8004fd4:	b236      	sxthne	r6, r6
 8004fd6:	17f7      	asrs	r7, r6, #31
 8004fd8:	2e00      	cmp	r6, #0
 8004fda:	f177 0300 	sbcs.w	r3, r7, #0
 8004fde:	f280 80e2 	bge.w	80051a6 <_svfprintf_r+0x492>
 8004fe2:	4276      	negs	r6, r6
 8004fe4:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8004fe8:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8004fec:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8004ff0:	e0d9      	b.n	80051a6 <_svfprintf_r+0x492>
 8004ff2:	b10a      	cbz	r2, 8004ff8 <_svfprintf_r+0x2e4>
 8004ff4:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8004ff8:	3707      	adds	r7, #7
 8004ffa:	f027 0707 	bic.w	r7, r7, #7
 8004ffe:	f107 0308 	add.w	r3, r7, #8
 8005002:	9307      	str	r3, [sp, #28]
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	f04f 32ff 	mov.w	r2, #4294967295
 800500a:	930c      	str	r3, [sp, #48]	; 0x30
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8005010:	930d      	str	r3, [sp, #52]	; 0x34
 8005012:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005014:	4638      	mov	r0, r7
 8005016:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
 800501a:	4631      	mov	r1, r6
 800501c:	4b55      	ldr	r3, [pc, #340]	; (8005174 <_svfprintf_r+0x460>)
 800501e:	f7fb fd83 	bl	8000b28 <__aeabi_dcmpun>
 8005022:	2800      	cmp	r0, #0
 8005024:	f040 84f6 	bne.w	8005a14 <_svfprintf_r+0xd00>
 8005028:	f04f 32ff 	mov.w	r2, #4294967295
 800502c:	4b51      	ldr	r3, [pc, #324]	; (8005174 <_svfprintf_r+0x460>)
 800502e:	4638      	mov	r0, r7
 8005030:	4631      	mov	r1, r6
 8005032:	f7fb fd5b 	bl	8000aec <__aeabi_dcmple>
 8005036:	2800      	cmp	r0, #0
 8005038:	f040 84ec 	bne.w	8005a14 <_svfprintf_r+0xd00>
 800503c:	f000 be04 	b.w	8005c48 <_svfprintf_r+0xf34>
 8005040:	b10a      	cbz	r2, 8005046 <_svfprintf_r+0x332>
 8005042:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8005046:	f015 0f20 	tst.w	r5, #32
 800504a:	f107 0304 	add.w	r3, r7, #4
 800504e:	d007      	beq.n	8005060 <_svfprintf_r+0x34c>
 8005050:	990e      	ldr	r1, [sp, #56]	; 0x38
 8005052:	683a      	ldr	r2, [r7, #0]
 8005054:	17ce      	asrs	r6, r1, #31
 8005056:	4608      	mov	r0, r1
 8005058:	4631      	mov	r1, r6
 800505a:	e9c2 0100 	strd	r0, r1, [r2]
 800505e:	e00b      	b.n	8005078 <_svfprintf_r+0x364>
 8005060:	06e9      	lsls	r1, r5, #27
 8005062:	d406      	bmi.n	8005072 <_svfprintf_r+0x35e>
 8005064:	066a      	lsls	r2, r5, #25
 8005066:	d504      	bpl.n	8005072 <_svfprintf_r+0x35e>
 8005068:	683a      	ldr	r2, [r7, #0]
 800506a:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 800506e:	8011      	strh	r1, [r2, #0]
 8005070:	e002      	b.n	8005078 <_svfprintf_r+0x364>
 8005072:	683a      	ldr	r2, [r7, #0]
 8005074:	990e      	ldr	r1, [sp, #56]	; 0x38
 8005076:	6011      	str	r1, [r2, #0]
 8005078:	461f      	mov	r7, r3
 800507a:	e67f      	b.n	8004d7c <_svfprintf_r+0x68>
 800507c:	f045 0510 	orr.w	r5, r5, #16
 8005080:	f015 0320 	ands.w	r3, r5, #32
 8005084:	d009      	beq.n	800509a <_svfprintf_r+0x386>
 8005086:	3707      	adds	r7, #7
 8005088:	f027 0707 	bic.w	r7, r7, #7
 800508c:	f107 0308 	add.w	r3, r7, #8
 8005090:	9307      	str	r3, [sp, #28]
 8005092:	e9d7 6700 	ldrd	r6, r7, [r7]
 8005096:	2300      	movs	r3, #0
 8005098:	e081      	b.n	800519e <_svfprintf_r+0x48a>
 800509a:	1d3a      	adds	r2, r7, #4
 800509c:	f015 0110 	ands.w	r1, r5, #16
 80050a0:	9207      	str	r2, [sp, #28]
 80050a2:	d105      	bne.n	80050b0 <_svfprintf_r+0x39c>
 80050a4:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 80050a8:	d002      	beq.n	80050b0 <_svfprintf_r+0x39c>
 80050aa:	883e      	ldrh	r6, [r7, #0]
 80050ac:	2700      	movs	r7, #0
 80050ae:	e7f2      	b.n	8005096 <_svfprintf_r+0x382>
 80050b0:	683e      	ldr	r6, [r7, #0]
 80050b2:	2700      	movs	r7, #0
 80050b4:	e073      	b.n	800519e <_svfprintf_r+0x48a>
 80050b6:	1d3b      	adds	r3, r7, #4
 80050b8:	9307      	str	r3, [sp, #28]
 80050ba:	2330      	movs	r3, #48	; 0x30
 80050bc:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 80050c0:	4b2d      	ldr	r3, [pc, #180]	; (8005178 <_svfprintf_r+0x464>)
 80050c2:	2278      	movs	r2, #120	; 0x78
 80050c4:	683e      	ldr	r6, [r7, #0]
 80050c6:	9313      	str	r3, [sp, #76]	; 0x4c
 80050c8:	2700      	movs	r7, #0
 80050ca:	f045 0502 	orr.w	r5, r5, #2
 80050ce:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
 80050d2:	2302      	movs	r3, #2
 80050d4:	9206      	str	r2, [sp, #24]
 80050d6:	e062      	b.n	800519e <_svfprintf_r+0x48a>
 80050d8:	2600      	movs	r6, #0
 80050da:	1d3b      	adds	r3, r7, #4
 80050dc:	45b2      	cmp	sl, r6
 80050de:	9307      	str	r3, [sp, #28]
 80050e0:	f8d7 8000 	ldr.w	r8, [r7]
 80050e4:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 80050e8:	db0a      	blt.n	8005100 <_svfprintf_r+0x3ec>
 80050ea:	4652      	mov	r2, sl
 80050ec:	4631      	mov	r1, r6
 80050ee:	4640      	mov	r0, r8
 80050f0:	f001 fe16 	bl	8006d20 <memchr>
 80050f4:	2800      	cmp	r0, #0
 80050f6:	f000 80ea 	beq.w	80052ce <_svfprintf_r+0x5ba>
 80050fa:	ebc8 0a00 	rsb	sl, r8, r0
 80050fe:	e0e7      	b.n	80052d0 <_svfprintf_r+0x5bc>
 8005100:	4640      	mov	r0, r8
 8005102:	f7fb f8b7 	bl	8000274 <strlen>
 8005106:	4682      	mov	sl, r0
 8005108:	e0e2      	b.n	80052d0 <_svfprintf_r+0x5bc>
 800510a:	f045 0510 	orr.w	r5, r5, #16
 800510e:	06ae      	lsls	r6, r5, #26
 8005110:	d508      	bpl.n	8005124 <_svfprintf_r+0x410>
 8005112:	3707      	adds	r7, #7
 8005114:	f027 0707 	bic.w	r7, r7, #7
 8005118:	f107 0308 	add.w	r3, r7, #8
 800511c:	9307      	str	r3, [sp, #28]
 800511e:	e9d7 6700 	ldrd	r6, r7, [r7]
 8005122:	e00a      	b.n	800513a <_svfprintf_r+0x426>
 8005124:	1d3b      	adds	r3, r7, #4
 8005126:	f015 0f10 	tst.w	r5, #16
 800512a:	9307      	str	r3, [sp, #28]
 800512c:	d103      	bne.n	8005136 <_svfprintf_r+0x422>
 800512e:	0668      	lsls	r0, r5, #25
 8005130:	d501      	bpl.n	8005136 <_svfprintf_r+0x422>
 8005132:	883e      	ldrh	r6, [r7, #0]
 8005134:	e000      	b.n	8005138 <_svfprintf_r+0x424>
 8005136:	683e      	ldr	r6, [r7, #0]
 8005138:	2700      	movs	r7, #0
 800513a:	2301      	movs	r3, #1
 800513c:	e02f      	b.n	800519e <_svfprintf_r+0x48a>
 800513e:	b10a      	cbz	r2, 8005144 <_svfprintf_r+0x430>
 8005140:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8005144:	4b0c      	ldr	r3, [pc, #48]	; (8005178 <_svfprintf_r+0x464>)
 8005146:	06a9      	lsls	r1, r5, #26
 8005148:	9313      	str	r3, [sp, #76]	; 0x4c
 800514a:	d508      	bpl.n	800515e <_svfprintf_r+0x44a>
 800514c:	3707      	adds	r7, #7
 800514e:	f027 0707 	bic.w	r7, r7, #7
 8005152:	f107 0308 	add.w	r3, r7, #8
 8005156:	9307      	str	r3, [sp, #28]
 8005158:	e9d7 6700 	ldrd	r6, r7, [r7]
 800515c:	e010      	b.n	8005180 <_svfprintf_r+0x46c>
 800515e:	1d3b      	adds	r3, r7, #4
 8005160:	f015 0f10 	tst.w	r5, #16
 8005164:	9307      	str	r3, [sp, #28]
 8005166:	d109      	bne.n	800517c <_svfprintf_r+0x468>
 8005168:	066a      	lsls	r2, r5, #25
 800516a:	d507      	bpl.n	800517c <_svfprintf_r+0x468>
 800516c:	883e      	ldrh	r6, [r7, #0]
 800516e:	e006      	b.n	800517e <_svfprintf_r+0x46a>
 8005170:	08007cfa 	.word	0x08007cfa
 8005174:	7fefffff 	.word	0x7fefffff
 8005178:	08007d0b 	.word	0x08007d0b
 800517c:	683e      	ldr	r6, [r7, #0]
 800517e:	2700      	movs	r7, #0
 8005180:	07eb      	lsls	r3, r5, #31
 8005182:	d50b      	bpl.n	800519c <_svfprintf_r+0x488>
 8005184:	ea56 0307 	orrs.w	r3, r6, r7
 8005188:	d008      	beq.n	800519c <_svfprintf_r+0x488>
 800518a:	2330      	movs	r3, #48	; 0x30
 800518c:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8005190:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8005194:	f045 0502 	orr.w	r5, r5, #2
 8005198:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
 800519c:	2302      	movs	r3, #2
 800519e:	2200      	movs	r2, #0
 80051a0:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80051a4:	e000      	b.n	80051a8 <_svfprintf_r+0x494>
 80051a6:	2301      	movs	r3, #1
 80051a8:	f1ba 0f00 	cmp.w	sl, #0
 80051ac:	f2c0 855d 	blt.w	8005c6a <_svfprintf_r+0xf56>
 80051b0:	ea56 0207 	orrs.w	r2, r6, r7
 80051b4:	f025 0180 	bic.w	r1, r5, #128	; 0x80
 80051b8:	d103      	bne.n	80051c2 <_svfprintf_r+0x4ae>
 80051ba:	f1ba 0f00 	cmp.w	sl, #0
 80051be:	d05f      	beq.n	8005280 <_svfprintf_r+0x56c>
 80051c0:	e006      	b.n	80051d0 <_svfprintf_r+0x4bc>
 80051c2:	460d      	mov	r5, r1
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d025      	beq.n	8005214 <_svfprintf_r+0x500>
 80051c8:	2b02      	cmp	r3, #2
 80051ca:	d046      	beq.n	800525a <_svfprintf_r+0x546>
 80051cc:	4629      	mov	r1, r5
 80051ce:	e007      	b.n	80051e0 <_svfprintf_r+0x4cc>
 80051d0:	460d      	mov	r5, r1
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d022      	beq.n	800521c <_svfprintf_r+0x508>
 80051d6:	2b02      	cmp	r3, #2
 80051d8:	d03d      	beq.n	8005256 <_svfprintf_r+0x542>
 80051da:	4629      	mov	r1, r5
 80051dc:	2600      	movs	r6, #0
 80051de:	2700      	movs	r7, #0
 80051e0:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 80051e4:	08f2      	lsrs	r2, r6, #3
 80051e6:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
 80051ea:	08f8      	lsrs	r0, r7, #3
 80051ec:	f006 0307 	and.w	r3, r6, #7
 80051f0:	4607      	mov	r7, r0
 80051f2:	4616      	mov	r6, r2
 80051f4:	3330      	adds	r3, #48	; 0x30
 80051f6:	ea56 0207 	orrs.w	r2, r6, r7
 80051fa:	f808 3d01 	strb.w	r3, [r8, #-1]!
 80051fe:	d1f1      	bne.n	80051e4 <_svfprintf_r+0x4d0>
 8005200:	07e8      	lsls	r0, r5, #31
 8005202:	d548      	bpl.n	8005296 <_svfprintf_r+0x582>
 8005204:	2b30      	cmp	r3, #48	; 0x30
 8005206:	d046      	beq.n	8005296 <_svfprintf_r+0x582>
 8005208:	2330      	movs	r3, #48	; 0x30
 800520a:	f808 3c01 	strb.w	r3, [r8, #-1]
 800520e:	f108 38ff 	add.w	r8, r8, #4294967295
 8005212:	e040      	b.n	8005296 <_svfprintf_r+0x582>
 8005214:	2f00      	cmp	r7, #0
 8005216:	bf08      	it	eq
 8005218:	2e0a      	cmpeq	r6, #10
 800521a:	d205      	bcs.n	8005228 <_svfprintf_r+0x514>
 800521c:	3630      	adds	r6, #48	; 0x30
 800521e:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 8005222:	f808 6d41 	strb.w	r6, [r8, #-65]!
 8005226:	e029      	b.n	800527c <_svfprintf_r+0x568>
 8005228:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 800522c:	4630      	mov	r0, r6
 800522e:	4639      	mov	r1, r7
 8005230:	220a      	movs	r2, #10
 8005232:	2300      	movs	r3, #0
 8005234:	f7fb fcb6 	bl	8000ba4 <__aeabi_uldivmod>
 8005238:	3230      	adds	r2, #48	; 0x30
 800523a:	f808 2d01 	strb.w	r2, [r8, #-1]!
 800523e:	2300      	movs	r3, #0
 8005240:	4630      	mov	r0, r6
 8005242:	4639      	mov	r1, r7
 8005244:	220a      	movs	r2, #10
 8005246:	f7fb fcad 	bl	8000ba4 <__aeabi_uldivmod>
 800524a:	4606      	mov	r6, r0
 800524c:	460f      	mov	r7, r1
 800524e:	ea56 0307 	orrs.w	r3, r6, r7
 8005252:	d1eb      	bne.n	800522c <_svfprintf_r+0x518>
 8005254:	e012      	b.n	800527c <_svfprintf_r+0x568>
 8005256:	2600      	movs	r6, #0
 8005258:	2700      	movs	r7, #0
 800525a:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 800525e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005260:	f006 030f 	and.w	r3, r6, #15
 8005264:	5cd3      	ldrb	r3, [r2, r3]
 8005266:	093a      	lsrs	r2, r7, #4
 8005268:	f808 3d01 	strb.w	r3, [r8, #-1]!
 800526c:	0933      	lsrs	r3, r6, #4
 800526e:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8005272:	461e      	mov	r6, r3
 8005274:	4617      	mov	r7, r2
 8005276:	ea56 0307 	orrs.w	r3, r6, r7
 800527a:	d1f0      	bne.n	800525e <_svfprintf_r+0x54a>
 800527c:	4629      	mov	r1, r5
 800527e:	e00a      	b.n	8005296 <_svfprintf_r+0x582>
 8005280:	b93b      	cbnz	r3, 8005292 <_svfprintf_r+0x57e>
 8005282:	07ea      	lsls	r2, r5, #31
 8005284:	d505      	bpl.n	8005292 <_svfprintf_r+0x57e>
 8005286:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 800528a:	2330      	movs	r3, #48	; 0x30
 800528c:	f808 3d41 	strb.w	r3, [r8, #-65]!
 8005290:	e001      	b.n	8005296 <_svfprintf_r+0x582>
 8005292:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8005296:	ab2c      	add	r3, sp, #176	; 0xb0
 8005298:	4656      	mov	r6, sl
 800529a:	460d      	mov	r5, r1
 800529c:	ebc8 0a03 	rsb	sl, r8, r3
 80052a0:	2700      	movs	r7, #0
 80052a2:	e016      	b.n	80052d2 <_svfprintf_r+0x5be>
 80052a4:	b10a      	cbz	r2, 80052aa <_svfprintf_r+0x596>
 80052a6:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 80052aa:	9b06      	ldr	r3, [sp, #24]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	f000 83a0 	beq.w	80059f2 <_svfprintf_r+0xcde>
 80052b2:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80052b6:	2600      	movs	r6, #0
 80052b8:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 80052bc:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 80052c0:	9707      	str	r7, [sp, #28]
 80052c2:	f04f 0a01 	mov.w	sl, #1
 80052c6:	4637      	mov	r7, r6
 80052c8:	f10d 0888 	add.w	r8, sp, #136	; 0x88
 80052cc:	e001      	b.n	80052d2 <_svfprintf_r+0x5be>
 80052ce:	4606      	mov	r6, r0
 80052d0:	4637      	mov	r7, r6
 80052d2:	4556      	cmp	r6, sl
 80052d4:	4633      	mov	r3, r6
 80052d6:	bfb8      	it	lt
 80052d8:	4653      	movlt	r3, sl
 80052da:	930f      	str	r3, [sp, #60]	; 0x3c
 80052dc:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 80052e0:	b113      	cbz	r3, 80052e8 <_svfprintf_r+0x5d4>
 80052e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80052e4:	3301      	adds	r3, #1
 80052e6:	930f      	str	r3, [sp, #60]	; 0x3c
 80052e8:	f015 0302 	ands.w	r3, r5, #2
 80052ec:	9314      	str	r3, [sp, #80]	; 0x50
 80052ee:	bf1e      	ittt	ne
 80052f0:	9b0f      	ldrne	r3, [sp, #60]	; 0x3c
 80052f2:	3302      	addne	r3, #2
 80052f4:	930f      	strne	r3, [sp, #60]	; 0x3c
 80052f6:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 80052fa:	9315      	str	r3, [sp, #84]	; 0x54
 80052fc:	d139      	bne.n	8005372 <_svfprintf_r+0x65e>
 80052fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005300:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005302:	1a9b      	subs	r3, r3, r2
 8005304:	2b00      	cmp	r3, #0
 8005306:	9310      	str	r3, [sp, #64]	; 0x40
 8005308:	dd33      	ble.n	8005372 <_svfprintf_r+0x65e>
 800530a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800530c:	2b10      	cmp	r3, #16
 800530e:	4ba3      	ldr	r3, [pc, #652]	; (800559c <_svfprintf_r+0x888>)
 8005310:	6023      	str	r3, [r4, #0]
 8005312:	dd18      	ble.n	8005346 <_svfprintf_r+0x632>
 8005314:	2310      	movs	r3, #16
 8005316:	6063      	str	r3, [r4, #4]
 8005318:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800531a:	3310      	adds	r3, #16
 800531c:	9321      	str	r3, [sp, #132]	; 0x84
 800531e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005320:	3301      	adds	r3, #1
 8005322:	2b07      	cmp	r3, #7
 8005324:	9320      	str	r3, [sp, #128]	; 0x80
 8005326:	dc01      	bgt.n	800532c <_svfprintf_r+0x618>
 8005328:	3408      	adds	r4, #8
 800532a:	e008      	b.n	800533e <_svfprintf_r+0x62a>
 800532c:	aa1f      	add	r2, sp, #124	; 0x7c
 800532e:	4659      	mov	r1, fp
 8005330:	4648      	mov	r0, r9
 8005332:	f001 fff5 	bl	8007320 <__ssprint_r>
 8005336:	2800      	cmp	r0, #0
 8005338:	f040 8362 	bne.w	8005a00 <_svfprintf_r+0xcec>
 800533c:	ac2c      	add	r4, sp, #176	; 0xb0
 800533e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005340:	3b10      	subs	r3, #16
 8005342:	9310      	str	r3, [sp, #64]	; 0x40
 8005344:	e7e1      	b.n	800530a <_svfprintf_r+0x5f6>
 8005346:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005348:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800534a:	6063      	str	r3, [r4, #4]
 800534c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800534e:	4413      	add	r3, r2
 8005350:	9321      	str	r3, [sp, #132]	; 0x84
 8005352:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005354:	3301      	adds	r3, #1
 8005356:	2b07      	cmp	r3, #7
 8005358:	9320      	str	r3, [sp, #128]	; 0x80
 800535a:	dc01      	bgt.n	8005360 <_svfprintf_r+0x64c>
 800535c:	3408      	adds	r4, #8
 800535e:	e008      	b.n	8005372 <_svfprintf_r+0x65e>
 8005360:	aa1f      	add	r2, sp, #124	; 0x7c
 8005362:	4659      	mov	r1, fp
 8005364:	4648      	mov	r0, r9
 8005366:	f001 ffdb 	bl	8007320 <__ssprint_r>
 800536a:	2800      	cmp	r0, #0
 800536c:	f040 8348 	bne.w	8005a00 <_svfprintf_r+0xcec>
 8005370:	ac2c      	add	r4, sp, #176	; 0xb0
 8005372:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 8005376:	b1bb      	cbz	r3, 80053a8 <_svfprintf_r+0x694>
 8005378:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
 800537c:	6023      	str	r3, [r4, #0]
 800537e:	2301      	movs	r3, #1
 8005380:	6063      	str	r3, [r4, #4]
 8005382:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005384:	3301      	adds	r3, #1
 8005386:	9321      	str	r3, [sp, #132]	; 0x84
 8005388:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800538a:	3301      	adds	r3, #1
 800538c:	2b07      	cmp	r3, #7
 800538e:	9320      	str	r3, [sp, #128]	; 0x80
 8005390:	dc01      	bgt.n	8005396 <_svfprintf_r+0x682>
 8005392:	3408      	adds	r4, #8
 8005394:	e008      	b.n	80053a8 <_svfprintf_r+0x694>
 8005396:	aa1f      	add	r2, sp, #124	; 0x7c
 8005398:	4659      	mov	r1, fp
 800539a:	4648      	mov	r0, r9
 800539c:	f001 ffc0 	bl	8007320 <__ssprint_r>
 80053a0:	2800      	cmp	r0, #0
 80053a2:	f040 832d 	bne.w	8005a00 <_svfprintf_r+0xcec>
 80053a6:	ac2c      	add	r4, sp, #176	; 0xb0
 80053a8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80053aa:	b1b3      	cbz	r3, 80053da <_svfprintf_r+0x6c6>
 80053ac:	ab18      	add	r3, sp, #96	; 0x60
 80053ae:	6023      	str	r3, [r4, #0]
 80053b0:	2302      	movs	r3, #2
 80053b2:	6063      	str	r3, [r4, #4]
 80053b4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80053b6:	3302      	adds	r3, #2
 80053b8:	9321      	str	r3, [sp, #132]	; 0x84
 80053ba:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80053bc:	3301      	adds	r3, #1
 80053be:	2b07      	cmp	r3, #7
 80053c0:	9320      	str	r3, [sp, #128]	; 0x80
 80053c2:	dc01      	bgt.n	80053c8 <_svfprintf_r+0x6b4>
 80053c4:	3408      	adds	r4, #8
 80053c6:	e008      	b.n	80053da <_svfprintf_r+0x6c6>
 80053c8:	aa1f      	add	r2, sp, #124	; 0x7c
 80053ca:	4659      	mov	r1, fp
 80053cc:	4648      	mov	r0, r9
 80053ce:	f001 ffa7 	bl	8007320 <__ssprint_r>
 80053d2:	2800      	cmp	r0, #0
 80053d4:	f040 8314 	bne.w	8005a00 <_svfprintf_r+0xcec>
 80053d8:	ac2c      	add	r4, sp, #176	; 0xb0
 80053da:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80053dc:	2b80      	cmp	r3, #128	; 0x80
 80053de:	d139      	bne.n	8005454 <_svfprintf_r+0x740>
 80053e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80053e2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80053e4:	1a9b      	subs	r3, r3, r2
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	9310      	str	r3, [sp, #64]	; 0x40
 80053ea:	dd33      	ble.n	8005454 <_svfprintf_r+0x740>
 80053ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80053ee:	2b10      	cmp	r3, #16
 80053f0:	4b6b      	ldr	r3, [pc, #428]	; (80055a0 <_svfprintf_r+0x88c>)
 80053f2:	6023      	str	r3, [r4, #0]
 80053f4:	dd18      	ble.n	8005428 <_svfprintf_r+0x714>
 80053f6:	2310      	movs	r3, #16
 80053f8:	6063      	str	r3, [r4, #4]
 80053fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80053fc:	3310      	adds	r3, #16
 80053fe:	9321      	str	r3, [sp, #132]	; 0x84
 8005400:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005402:	3301      	adds	r3, #1
 8005404:	2b07      	cmp	r3, #7
 8005406:	9320      	str	r3, [sp, #128]	; 0x80
 8005408:	dc01      	bgt.n	800540e <_svfprintf_r+0x6fa>
 800540a:	3408      	adds	r4, #8
 800540c:	e008      	b.n	8005420 <_svfprintf_r+0x70c>
 800540e:	aa1f      	add	r2, sp, #124	; 0x7c
 8005410:	4659      	mov	r1, fp
 8005412:	4648      	mov	r0, r9
 8005414:	f001 ff84 	bl	8007320 <__ssprint_r>
 8005418:	2800      	cmp	r0, #0
 800541a:	f040 82f1 	bne.w	8005a00 <_svfprintf_r+0xcec>
 800541e:	ac2c      	add	r4, sp, #176	; 0xb0
 8005420:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005422:	3b10      	subs	r3, #16
 8005424:	9310      	str	r3, [sp, #64]	; 0x40
 8005426:	e7e1      	b.n	80053ec <_svfprintf_r+0x6d8>
 8005428:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800542a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800542c:	6063      	str	r3, [r4, #4]
 800542e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005430:	4413      	add	r3, r2
 8005432:	9321      	str	r3, [sp, #132]	; 0x84
 8005434:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005436:	3301      	adds	r3, #1
 8005438:	2b07      	cmp	r3, #7
 800543a:	9320      	str	r3, [sp, #128]	; 0x80
 800543c:	dc01      	bgt.n	8005442 <_svfprintf_r+0x72e>
 800543e:	3408      	adds	r4, #8
 8005440:	e008      	b.n	8005454 <_svfprintf_r+0x740>
 8005442:	aa1f      	add	r2, sp, #124	; 0x7c
 8005444:	4659      	mov	r1, fp
 8005446:	4648      	mov	r0, r9
 8005448:	f001 ff6a 	bl	8007320 <__ssprint_r>
 800544c:	2800      	cmp	r0, #0
 800544e:	f040 82d7 	bne.w	8005a00 <_svfprintf_r+0xcec>
 8005452:	ac2c      	add	r4, sp, #176	; 0xb0
 8005454:	ebca 0606 	rsb	r6, sl, r6
 8005458:	2e00      	cmp	r6, #0
 800545a:	dd2e      	ble.n	80054ba <_svfprintf_r+0x7a6>
 800545c:	4b50      	ldr	r3, [pc, #320]	; (80055a0 <_svfprintf_r+0x88c>)
 800545e:	2e10      	cmp	r6, #16
 8005460:	6023      	str	r3, [r4, #0]
 8005462:	dd16      	ble.n	8005492 <_svfprintf_r+0x77e>
 8005464:	2310      	movs	r3, #16
 8005466:	6063      	str	r3, [r4, #4]
 8005468:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800546a:	3310      	adds	r3, #16
 800546c:	9321      	str	r3, [sp, #132]	; 0x84
 800546e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005470:	3301      	adds	r3, #1
 8005472:	2b07      	cmp	r3, #7
 8005474:	9320      	str	r3, [sp, #128]	; 0x80
 8005476:	dc01      	bgt.n	800547c <_svfprintf_r+0x768>
 8005478:	3408      	adds	r4, #8
 800547a:	e008      	b.n	800548e <_svfprintf_r+0x77a>
 800547c:	aa1f      	add	r2, sp, #124	; 0x7c
 800547e:	4659      	mov	r1, fp
 8005480:	4648      	mov	r0, r9
 8005482:	f001 ff4d 	bl	8007320 <__ssprint_r>
 8005486:	2800      	cmp	r0, #0
 8005488:	f040 82ba 	bne.w	8005a00 <_svfprintf_r+0xcec>
 800548c:	ac2c      	add	r4, sp, #176	; 0xb0
 800548e:	3e10      	subs	r6, #16
 8005490:	e7e4      	b.n	800545c <_svfprintf_r+0x748>
 8005492:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005494:	9821      	ldr	r0, [sp, #132]	; 0x84
 8005496:	3301      	adds	r3, #1
 8005498:	6066      	str	r6, [r4, #4]
 800549a:	2b07      	cmp	r3, #7
 800549c:	4406      	add	r6, r0
 800549e:	9621      	str	r6, [sp, #132]	; 0x84
 80054a0:	9320      	str	r3, [sp, #128]	; 0x80
 80054a2:	dc01      	bgt.n	80054a8 <_svfprintf_r+0x794>
 80054a4:	3408      	adds	r4, #8
 80054a6:	e008      	b.n	80054ba <_svfprintf_r+0x7a6>
 80054a8:	aa1f      	add	r2, sp, #124	; 0x7c
 80054aa:	4659      	mov	r1, fp
 80054ac:	4648      	mov	r0, r9
 80054ae:	f001 ff37 	bl	8007320 <__ssprint_r>
 80054b2:	2800      	cmp	r0, #0
 80054b4:	f040 82a4 	bne.w	8005a00 <_svfprintf_r+0xcec>
 80054b8:	ac2c      	add	r4, sp, #176	; 0xb0
 80054ba:	05eb      	lsls	r3, r5, #23
 80054bc:	d414      	bmi.n	80054e8 <_svfprintf_r+0x7d4>
 80054be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80054c0:	e884 0500 	stmia.w	r4, {r8, sl}
 80054c4:	4453      	add	r3, sl
 80054c6:	9321      	str	r3, [sp, #132]	; 0x84
 80054c8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80054ca:	3301      	adds	r3, #1
 80054cc:	2b07      	cmp	r3, #7
 80054ce:	9320      	str	r3, [sp, #128]	; 0x80
 80054d0:	f340 8245 	ble.w	800595e <_svfprintf_r+0xc4a>
 80054d4:	aa1f      	add	r2, sp, #124	; 0x7c
 80054d6:	4659      	mov	r1, fp
 80054d8:	4648      	mov	r0, r9
 80054da:	f001 ff21 	bl	8007320 <__ssprint_r>
 80054de:	2800      	cmp	r0, #0
 80054e0:	f040 828e 	bne.w	8005a00 <_svfprintf_r+0xcec>
 80054e4:	ac2c      	add	r4, sp, #176	; 0xb0
 80054e6:	e23b      	b.n	8005960 <_svfprintf_r+0xc4c>
 80054e8:	9b06      	ldr	r3, [sp, #24]
 80054ea:	2b65      	cmp	r3, #101	; 0x65
 80054ec:	f340 81ae 	ble.w	800584c <_svfprintf_r+0xb38>
 80054f0:	2200      	movs	r2, #0
 80054f2:	2300      	movs	r3, #0
 80054f4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80054f6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80054f8:	f7fb fae4 	bl	8000ac4 <__aeabi_dcmpeq>
 80054fc:	2800      	cmp	r0, #0
 80054fe:	d05e      	beq.n	80055be <_svfprintf_r+0x8aa>
 8005500:	4b28      	ldr	r3, [pc, #160]	; (80055a4 <_svfprintf_r+0x890>)
 8005502:	6023      	str	r3, [r4, #0]
 8005504:	2301      	movs	r3, #1
 8005506:	6063      	str	r3, [r4, #4]
 8005508:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800550a:	3301      	adds	r3, #1
 800550c:	9321      	str	r3, [sp, #132]	; 0x84
 800550e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005510:	3301      	adds	r3, #1
 8005512:	2b07      	cmp	r3, #7
 8005514:	9320      	str	r3, [sp, #128]	; 0x80
 8005516:	dc01      	bgt.n	800551c <_svfprintf_r+0x808>
 8005518:	3408      	adds	r4, #8
 800551a:	e008      	b.n	800552e <_svfprintf_r+0x81a>
 800551c:	aa1f      	add	r2, sp, #124	; 0x7c
 800551e:	4659      	mov	r1, fp
 8005520:	4648      	mov	r0, r9
 8005522:	f001 fefd 	bl	8007320 <__ssprint_r>
 8005526:	2800      	cmp	r0, #0
 8005528:	f040 826a 	bne.w	8005a00 <_svfprintf_r+0xcec>
 800552c:	ac2c      	add	r4, sp, #176	; 0xb0
 800552e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005530:	9a08      	ldr	r2, [sp, #32]
 8005532:	4293      	cmp	r3, r2
 8005534:	db02      	blt.n	800553c <_svfprintf_r+0x828>
 8005536:	07ee      	lsls	r6, r5, #31
 8005538:	f140 8212 	bpl.w	8005960 <_svfprintf_r+0xc4c>
 800553c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800553e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005540:	6023      	str	r3, [r4, #0]
 8005542:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005544:	6063      	str	r3, [r4, #4]
 8005546:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005548:	4413      	add	r3, r2
 800554a:	9321      	str	r3, [sp, #132]	; 0x84
 800554c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800554e:	3301      	adds	r3, #1
 8005550:	2b07      	cmp	r3, #7
 8005552:	9320      	str	r3, [sp, #128]	; 0x80
 8005554:	dc01      	bgt.n	800555a <_svfprintf_r+0x846>
 8005556:	3408      	adds	r4, #8
 8005558:	e008      	b.n	800556c <_svfprintf_r+0x858>
 800555a:	aa1f      	add	r2, sp, #124	; 0x7c
 800555c:	4659      	mov	r1, fp
 800555e:	4648      	mov	r0, r9
 8005560:	f001 fede 	bl	8007320 <__ssprint_r>
 8005564:	2800      	cmp	r0, #0
 8005566:	f040 824b 	bne.w	8005a00 <_svfprintf_r+0xcec>
 800556a:	ac2c      	add	r4, sp, #176	; 0xb0
 800556c:	9b08      	ldr	r3, [sp, #32]
 800556e:	1e5e      	subs	r6, r3, #1
 8005570:	2e00      	cmp	r6, #0
 8005572:	f340 81f5 	ble.w	8005960 <_svfprintf_r+0xc4c>
 8005576:	4f0a      	ldr	r7, [pc, #40]	; (80055a0 <_svfprintf_r+0x88c>)
 8005578:	f04f 0810 	mov.w	r8, #16
 800557c:	2e10      	cmp	r6, #16
 800557e:	f340 8159 	ble.w	8005834 <_svfprintf_r+0xb20>
 8005582:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005584:	e884 0180 	stmia.w	r4, {r7, r8}
 8005588:	3310      	adds	r3, #16
 800558a:	9321      	str	r3, [sp, #132]	; 0x84
 800558c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800558e:	3301      	adds	r3, #1
 8005590:	2b07      	cmp	r3, #7
 8005592:	9320      	str	r3, [sp, #128]	; 0x80
 8005594:	dc08      	bgt.n	80055a8 <_svfprintf_r+0x894>
 8005596:	3408      	adds	r4, #8
 8005598:	e00f      	b.n	80055ba <_svfprintf_r+0x8a6>
 800559a:	bf00      	nop
 800559c:	08007d1e 	.word	0x08007d1e
 80055a0:	08007cda 	.word	0x08007cda
 80055a4:	08007d1c 	.word	0x08007d1c
 80055a8:	aa1f      	add	r2, sp, #124	; 0x7c
 80055aa:	4659      	mov	r1, fp
 80055ac:	4648      	mov	r0, r9
 80055ae:	f001 feb7 	bl	8007320 <__ssprint_r>
 80055b2:	2800      	cmp	r0, #0
 80055b4:	f040 8224 	bne.w	8005a00 <_svfprintf_r+0xcec>
 80055b8:	ac2c      	add	r4, sp, #176	; 0xb0
 80055ba:	3e10      	subs	r6, #16
 80055bc:	e7de      	b.n	800557c <_svfprintf_r+0x868>
 80055be:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	dc7c      	bgt.n	80056be <_svfprintf_r+0x9aa>
 80055c4:	4b9f      	ldr	r3, [pc, #636]	; (8005844 <_svfprintf_r+0xb30>)
 80055c6:	6023      	str	r3, [r4, #0]
 80055c8:	2301      	movs	r3, #1
 80055ca:	6063      	str	r3, [r4, #4]
 80055cc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80055ce:	3301      	adds	r3, #1
 80055d0:	9321      	str	r3, [sp, #132]	; 0x84
 80055d2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80055d4:	3301      	adds	r3, #1
 80055d6:	2b07      	cmp	r3, #7
 80055d8:	9320      	str	r3, [sp, #128]	; 0x80
 80055da:	dc01      	bgt.n	80055e0 <_svfprintf_r+0x8cc>
 80055dc:	3408      	adds	r4, #8
 80055de:	e008      	b.n	80055f2 <_svfprintf_r+0x8de>
 80055e0:	aa1f      	add	r2, sp, #124	; 0x7c
 80055e2:	4659      	mov	r1, fp
 80055e4:	4648      	mov	r0, r9
 80055e6:	f001 fe9b 	bl	8007320 <__ssprint_r>
 80055ea:	2800      	cmp	r0, #0
 80055ec:	f040 8208 	bne.w	8005a00 <_svfprintf_r+0xcec>
 80055f0:	ac2c      	add	r4, sp, #176	; 0xb0
 80055f2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80055f4:	b923      	cbnz	r3, 8005600 <_svfprintf_r+0x8ec>
 80055f6:	9b08      	ldr	r3, [sp, #32]
 80055f8:	b913      	cbnz	r3, 8005600 <_svfprintf_r+0x8ec>
 80055fa:	07e8      	lsls	r0, r5, #31
 80055fc:	f140 81b0 	bpl.w	8005960 <_svfprintf_r+0xc4c>
 8005600:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005602:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005604:	6023      	str	r3, [r4, #0]
 8005606:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005608:	6063      	str	r3, [r4, #4]
 800560a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800560c:	4413      	add	r3, r2
 800560e:	9321      	str	r3, [sp, #132]	; 0x84
 8005610:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005612:	3301      	adds	r3, #1
 8005614:	2b07      	cmp	r3, #7
 8005616:	9320      	str	r3, [sp, #128]	; 0x80
 8005618:	dc02      	bgt.n	8005620 <_svfprintf_r+0x90c>
 800561a:	f104 0308 	add.w	r3, r4, #8
 800561e:	e008      	b.n	8005632 <_svfprintf_r+0x91e>
 8005620:	aa1f      	add	r2, sp, #124	; 0x7c
 8005622:	4659      	mov	r1, fp
 8005624:	4648      	mov	r0, r9
 8005626:	f001 fe7b 	bl	8007320 <__ssprint_r>
 800562a:	2800      	cmp	r0, #0
 800562c:	f040 81e8 	bne.w	8005a00 <_svfprintf_r+0xcec>
 8005630:	ab2c      	add	r3, sp, #176	; 0xb0
 8005632:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8005634:	4276      	negs	r6, r6
 8005636:	2e00      	cmp	r6, #0
 8005638:	dd30      	ble.n	800569c <_svfprintf_r+0x988>
 800563a:	4f83      	ldr	r7, [pc, #524]	; (8005848 <_svfprintf_r+0xb34>)
 800563c:	2410      	movs	r4, #16
 800563e:	2e10      	cmp	r6, #16
 8005640:	dd16      	ble.n	8005670 <_svfprintf_r+0x95c>
 8005642:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005644:	601f      	str	r7, [r3, #0]
 8005646:	3210      	adds	r2, #16
 8005648:	9221      	str	r2, [sp, #132]	; 0x84
 800564a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800564c:	605c      	str	r4, [r3, #4]
 800564e:	3201      	adds	r2, #1
 8005650:	2a07      	cmp	r2, #7
 8005652:	9220      	str	r2, [sp, #128]	; 0x80
 8005654:	dc01      	bgt.n	800565a <_svfprintf_r+0x946>
 8005656:	3308      	adds	r3, #8
 8005658:	e008      	b.n	800566c <_svfprintf_r+0x958>
 800565a:	aa1f      	add	r2, sp, #124	; 0x7c
 800565c:	4659      	mov	r1, fp
 800565e:	4648      	mov	r0, r9
 8005660:	f001 fe5e 	bl	8007320 <__ssprint_r>
 8005664:	2800      	cmp	r0, #0
 8005666:	f040 81cb 	bne.w	8005a00 <_svfprintf_r+0xcec>
 800566a:	ab2c      	add	r3, sp, #176	; 0xb0
 800566c:	3e10      	subs	r6, #16
 800566e:	e7e6      	b.n	800563e <_svfprintf_r+0x92a>
 8005670:	4a75      	ldr	r2, [pc, #468]	; (8005848 <_svfprintf_r+0xb34>)
 8005672:	e883 0044 	stmia.w	r3, {r2, r6}
 8005676:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005678:	4416      	add	r6, r2
 800567a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800567c:	9621      	str	r6, [sp, #132]	; 0x84
 800567e:	3201      	adds	r2, #1
 8005680:	2a07      	cmp	r2, #7
 8005682:	9220      	str	r2, [sp, #128]	; 0x80
 8005684:	dc01      	bgt.n	800568a <_svfprintf_r+0x976>
 8005686:	3308      	adds	r3, #8
 8005688:	e008      	b.n	800569c <_svfprintf_r+0x988>
 800568a:	aa1f      	add	r2, sp, #124	; 0x7c
 800568c:	4659      	mov	r1, fp
 800568e:	4648      	mov	r0, r9
 8005690:	f001 fe46 	bl	8007320 <__ssprint_r>
 8005694:	2800      	cmp	r0, #0
 8005696:	f040 81b3 	bne.w	8005a00 <_svfprintf_r+0xcec>
 800569a:	ab2c      	add	r3, sp, #176	; 0xb0
 800569c:	9a08      	ldr	r2, [sp, #32]
 800569e:	9908      	ldr	r1, [sp, #32]
 80056a0:	605a      	str	r2, [r3, #4]
 80056a2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80056a4:	f8c3 8000 	str.w	r8, [r3]
 80056a8:	440a      	add	r2, r1
 80056aa:	9221      	str	r2, [sp, #132]	; 0x84
 80056ac:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80056ae:	3201      	adds	r2, #1
 80056b0:	2a07      	cmp	r2, #7
 80056b2:	9220      	str	r2, [sp, #128]	; 0x80
 80056b4:	f73f af0e 	bgt.w	80054d4 <_svfprintf_r+0x7c0>
 80056b8:	f103 0408 	add.w	r4, r3, #8
 80056bc:	e150      	b.n	8005960 <_svfprintf_r+0xc4c>
 80056be:	9b08      	ldr	r3, [sp, #32]
 80056c0:	42bb      	cmp	r3, r7
 80056c2:	bfa8      	it	ge
 80056c4:	463b      	movge	r3, r7
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	461e      	mov	r6, r3
 80056ca:	dd15      	ble.n	80056f8 <_svfprintf_r+0x9e4>
 80056cc:	6063      	str	r3, [r4, #4]
 80056ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80056d0:	f8c4 8000 	str.w	r8, [r4]
 80056d4:	4433      	add	r3, r6
 80056d6:	9321      	str	r3, [sp, #132]	; 0x84
 80056d8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80056da:	3301      	adds	r3, #1
 80056dc:	2b07      	cmp	r3, #7
 80056de:	9320      	str	r3, [sp, #128]	; 0x80
 80056e0:	dc01      	bgt.n	80056e6 <_svfprintf_r+0x9d2>
 80056e2:	3408      	adds	r4, #8
 80056e4:	e008      	b.n	80056f8 <_svfprintf_r+0x9e4>
 80056e6:	aa1f      	add	r2, sp, #124	; 0x7c
 80056e8:	4659      	mov	r1, fp
 80056ea:	4648      	mov	r0, r9
 80056ec:	f001 fe18 	bl	8007320 <__ssprint_r>
 80056f0:	2800      	cmp	r0, #0
 80056f2:	f040 8185 	bne.w	8005a00 <_svfprintf_r+0xcec>
 80056f6:	ac2c      	add	r4, sp, #176	; 0xb0
 80056f8:	2e00      	cmp	r6, #0
 80056fa:	bfb4      	ite	lt
 80056fc:	463e      	movlt	r6, r7
 80056fe:	1bbe      	subge	r6, r7, r6
 8005700:	2e00      	cmp	r6, #0
 8005702:	dd30      	ble.n	8005766 <_svfprintf_r+0xa52>
 8005704:	f04f 0a10 	mov.w	sl, #16
 8005708:	4b4f      	ldr	r3, [pc, #316]	; (8005848 <_svfprintf_r+0xb34>)
 800570a:	2e10      	cmp	r6, #16
 800570c:	6023      	str	r3, [r4, #0]
 800570e:	dd16      	ble.n	800573e <_svfprintf_r+0xa2a>
 8005710:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005712:	f8c4 a004 	str.w	sl, [r4, #4]
 8005716:	3310      	adds	r3, #16
 8005718:	9321      	str	r3, [sp, #132]	; 0x84
 800571a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800571c:	3301      	adds	r3, #1
 800571e:	2b07      	cmp	r3, #7
 8005720:	9320      	str	r3, [sp, #128]	; 0x80
 8005722:	dc01      	bgt.n	8005728 <_svfprintf_r+0xa14>
 8005724:	3408      	adds	r4, #8
 8005726:	e008      	b.n	800573a <_svfprintf_r+0xa26>
 8005728:	aa1f      	add	r2, sp, #124	; 0x7c
 800572a:	4659      	mov	r1, fp
 800572c:	4648      	mov	r0, r9
 800572e:	f001 fdf7 	bl	8007320 <__ssprint_r>
 8005732:	2800      	cmp	r0, #0
 8005734:	f040 8164 	bne.w	8005a00 <_svfprintf_r+0xcec>
 8005738:	ac2c      	add	r4, sp, #176	; 0xb0
 800573a:	3e10      	subs	r6, #16
 800573c:	e7e4      	b.n	8005708 <_svfprintf_r+0x9f4>
 800573e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005740:	6066      	str	r6, [r4, #4]
 8005742:	441e      	add	r6, r3
 8005744:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005746:	9621      	str	r6, [sp, #132]	; 0x84
 8005748:	3301      	adds	r3, #1
 800574a:	2b07      	cmp	r3, #7
 800574c:	9320      	str	r3, [sp, #128]	; 0x80
 800574e:	dc01      	bgt.n	8005754 <_svfprintf_r+0xa40>
 8005750:	3408      	adds	r4, #8
 8005752:	e008      	b.n	8005766 <_svfprintf_r+0xa52>
 8005754:	aa1f      	add	r2, sp, #124	; 0x7c
 8005756:	4659      	mov	r1, fp
 8005758:	4648      	mov	r0, r9
 800575a:	f001 fde1 	bl	8007320 <__ssprint_r>
 800575e:	2800      	cmp	r0, #0
 8005760:	f040 814e 	bne.w	8005a00 <_svfprintf_r+0xcec>
 8005764:	ac2c      	add	r4, sp, #176	; 0xb0
 8005766:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005768:	9a08      	ldr	r2, [sp, #32]
 800576a:	4447      	add	r7, r8
 800576c:	4293      	cmp	r3, r2
 800576e:	db01      	blt.n	8005774 <_svfprintf_r+0xa60>
 8005770:	07e9      	lsls	r1, r5, #31
 8005772:	d517      	bpl.n	80057a4 <_svfprintf_r+0xa90>
 8005774:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005776:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005778:	6023      	str	r3, [r4, #0]
 800577a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800577c:	6063      	str	r3, [r4, #4]
 800577e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005780:	4413      	add	r3, r2
 8005782:	9321      	str	r3, [sp, #132]	; 0x84
 8005784:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005786:	3301      	adds	r3, #1
 8005788:	2b07      	cmp	r3, #7
 800578a:	9320      	str	r3, [sp, #128]	; 0x80
 800578c:	dc01      	bgt.n	8005792 <_svfprintf_r+0xa7e>
 800578e:	3408      	adds	r4, #8
 8005790:	e008      	b.n	80057a4 <_svfprintf_r+0xa90>
 8005792:	aa1f      	add	r2, sp, #124	; 0x7c
 8005794:	4659      	mov	r1, fp
 8005796:	4648      	mov	r0, r9
 8005798:	f001 fdc2 	bl	8007320 <__ssprint_r>
 800579c:	2800      	cmp	r0, #0
 800579e:	f040 812f 	bne.w	8005a00 <_svfprintf_r+0xcec>
 80057a2:	ac2c      	add	r4, sp, #176	; 0xb0
 80057a4:	9b08      	ldr	r3, [sp, #32]
 80057a6:	9a08      	ldr	r2, [sp, #32]
 80057a8:	eb08 0603 	add.w	r6, r8, r3
 80057ac:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80057ae:	1bf6      	subs	r6, r6, r7
 80057b0:	1ad3      	subs	r3, r2, r3
 80057b2:	429e      	cmp	r6, r3
 80057b4:	bfa8      	it	ge
 80057b6:	461e      	movge	r6, r3
 80057b8:	2e00      	cmp	r6, #0
 80057ba:	dd14      	ble.n	80057e6 <_svfprintf_r+0xad2>
 80057bc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80057be:	6027      	str	r7, [r4, #0]
 80057c0:	4433      	add	r3, r6
 80057c2:	9321      	str	r3, [sp, #132]	; 0x84
 80057c4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80057c6:	6066      	str	r6, [r4, #4]
 80057c8:	3301      	adds	r3, #1
 80057ca:	2b07      	cmp	r3, #7
 80057cc:	9320      	str	r3, [sp, #128]	; 0x80
 80057ce:	dc01      	bgt.n	80057d4 <_svfprintf_r+0xac0>
 80057d0:	3408      	adds	r4, #8
 80057d2:	e008      	b.n	80057e6 <_svfprintf_r+0xad2>
 80057d4:	aa1f      	add	r2, sp, #124	; 0x7c
 80057d6:	4659      	mov	r1, fp
 80057d8:	4648      	mov	r0, r9
 80057da:	f001 fda1 	bl	8007320 <__ssprint_r>
 80057de:	2800      	cmp	r0, #0
 80057e0:	f040 810e 	bne.w	8005a00 <_svfprintf_r+0xcec>
 80057e4:	ac2c      	add	r4, sp, #176	; 0xb0
 80057e6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80057e8:	9a08      	ldr	r2, [sp, #32]
 80057ea:	2e00      	cmp	r6, #0
 80057ec:	eba2 0303 	sub.w	r3, r2, r3
 80057f0:	bfb4      	ite	lt
 80057f2:	461e      	movlt	r6, r3
 80057f4:	1b9e      	subge	r6, r3, r6
 80057f6:	2e00      	cmp	r6, #0
 80057f8:	f340 80b2 	ble.w	8005960 <_svfprintf_r+0xc4c>
 80057fc:	4f12      	ldr	r7, [pc, #72]	; (8005848 <_svfprintf_r+0xb34>)
 80057fe:	f04f 0810 	mov.w	r8, #16
 8005802:	2e10      	cmp	r6, #16
 8005804:	dd16      	ble.n	8005834 <_svfprintf_r+0xb20>
 8005806:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005808:	e884 0180 	stmia.w	r4, {r7, r8}
 800580c:	3310      	adds	r3, #16
 800580e:	9321      	str	r3, [sp, #132]	; 0x84
 8005810:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005812:	3301      	adds	r3, #1
 8005814:	2b07      	cmp	r3, #7
 8005816:	9320      	str	r3, [sp, #128]	; 0x80
 8005818:	dc01      	bgt.n	800581e <_svfprintf_r+0xb0a>
 800581a:	3408      	adds	r4, #8
 800581c:	e008      	b.n	8005830 <_svfprintf_r+0xb1c>
 800581e:	aa1f      	add	r2, sp, #124	; 0x7c
 8005820:	4659      	mov	r1, fp
 8005822:	4648      	mov	r0, r9
 8005824:	f001 fd7c 	bl	8007320 <__ssprint_r>
 8005828:	2800      	cmp	r0, #0
 800582a:	f040 80e9 	bne.w	8005a00 <_svfprintf_r+0xcec>
 800582e:	ac2c      	add	r4, sp, #176	; 0xb0
 8005830:	3e10      	subs	r6, #16
 8005832:	e7e6      	b.n	8005802 <_svfprintf_r+0xaee>
 8005834:	4b04      	ldr	r3, [pc, #16]	; (8005848 <_svfprintf_r+0xb34>)
 8005836:	e884 0048 	stmia.w	r4, {r3, r6}
 800583a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800583c:	441e      	add	r6, r3
 800583e:	9621      	str	r6, [sp, #132]	; 0x84
 8005840:	e642      	b.n	80054c8 <_svfprintf_r+0x7b4>
 8005842:	bf00      	nop
 8005844:	08007d1c 	.word	0x08007d1c
 8005848:	08007cda 	.word	0x08007cda
 800584c:	9b08      	ldr	r3, [sp, #32]
 800584e:	2b01      	cmp	r3, #1
 8005850:	dc01      	bgt.n	8005856 <_svfprintf_r+0xb42>
 8005852:	07ea      	lsls	r2, r5, #31
 8005854:	d573      	bpl.n	800593e <_svfprintf_r+0xc2a>
 8005856:	2301      	movs	r3, #1
 8005858:	6063      	str	r3, [r4, #4]
 800585a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800585c:	f8c4 8000 	str.w	r8, [r4]
 8005860:	3301      	adds	r3, #1
 8005862:	9321      	str	r3, [sp, #132]	; 0x84
 8005864:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005866:	3301      	adds	r3, #1
 8005868:	2b07      	cmp	r3, #7
 800586a:	9320      	str	r3, [sp, #128]	; 0x80
 800586c:	dc01      	bgt.n	8005872 <_svfprintf_r+0xb5e>
 800586e:	3408      	adds	r4, #8
 8005870:	e008      	b.n	8005884 <_svfprintf_r+0xb70>
 8005872:	aa1f      	add	r2, sp, #124	; 0x7c
 8005874:	4659      	mov	r1, fp
 8005876:	4648      	mov	r0, r9
 8005878:	f001 fd52 	bl	8007320 <__ssprint_r>
 800587c:	2800      	cmp	r0, #0
 800587e:	f040 80bf 	bne.w	8005a00 <_svfprintf_r+0xcec>
 8005882:	ac2c      	add	r4, sp, #176	; 0xb0
 8005884:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005886:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005888:	6023      	str	r3, [r4, #0]
 800588a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800588c:	6063      	str	r3, [r4, #4]
 800588e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005890:	4413      	add	r3, r2
 8005892:	9321      	str	r3, [sp, #132]	; 0x84
 8005894:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005896:	3301      	adds	r3, #1
 8005898:	2b07      	cmp	r3, #7
 800589a:	9320      	str	r3, [sp, #128]	; 0x80
 800589c:	dc01      	bgt.n	80058a2 <_svfprintf_r+0xb8e>
 800589e:	3408      	adds	r4, #8
 80058a0:	e008      	b.n	80058b4 <_svfprintf_r+0xba0>
 80058a2:	aa1f      	add	r2, sp, #124	; 0x7c
 80058a4:	4659      	mov	r1, fp
 80058a6:	4648      	mov	r0, r9
 80058a8:	f001 fd3a 	bl	8007320 <__ssprint_r>
 80058ac:	2800      	cmp	r0, #0
 80058ae:	f040 80a7 	bne.w	8005a00 <_svfprintf_r+0xcec>
 80058b2:	ac2c      	add	r4, sp, #176	; 0xb0
 80058b4:	2300      	movs	r3, #0
 80058b6:	2200      	movs	r2, #0
 80058b8:	980c      	ldr	r0, [sp, #48]	; 0x30
 80058ba:	990d      	ldr	r1, [sp, #52]	; 0x34
 80058bc:	f7fb f902 	bl	8000ac4 <__aeabi_dcmpeq>
 80058c0:	9b08      	ldr	r3, [sp, #32]
 80058c2:	1e5e      	subs	r6, r3, #1
 80058c4:	b9b8      	cbnz	r0, 80058f6 <_svfprintf_r+0xbe2>
 80058c6:	f108 0301 	add.w	r3, r8, #1
 80058ca:	e884 0048 	stmia.w	r4, {r3, r6}
 80058ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80058d0:	9a08      	ldr	r2, [sp, #32]
 80058d2:	3b01      	subs	r3, #1
 80058d4:	4413      	add	r3, r2
 80058d6:	9321      	str	r3, [sp, #132]	; 0x84
 80058d8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80058da:	3301      	adds	r3, #1
 80058dc:	2b07      	cmp	r3, #7
 80058de:	9320      	str	r3, [sp, #128]	; 0x80
 80058e0:	dd34      	ble.n	800594c <_svfprintf_r+0xc38>
 80058e2:	aa1f      	add	r2, sp, #124	; 0x7c
 80058e4:	4659      	mov	r1, fp
 80058e6:	4648      	mov	r0, r9
 80058e8:	f001 fd1a 	bl	8007320 <__ssprint_r>
 80058ec:	2800      	cmp	r0, #0
 80058ee:	f040 8087 	bne.w	8005a00 <_svfprintf_r+0xcec>
 80058f2:	ac2c      	add	r4, sp, #176	; 0xb0
 80058f4:	e02b      	b.n	800594e <_svfprintf_r+0xc3a>
 80058f6:	2e00      	cmp	r6, #0
 80058f8:	dd29      	ble.n	800594e <_svfprintf_r+0xc3a>
 80058fa:	4f8f      	ldr	r7, [pc, #572]	; (8005b38 <_svfprintf_r+0xe24>)
 80058fc:	f04f 0810 	mov.w	r8, #16
 8005900:	2e10      	cmp	r6, #16
 8005902:	dd15      	ble.n	8005930 <_svfprintf_r+0xc1c>
 8005904:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005906:	e884 0180 	stmia.w	r4, {r7, r8}
 800590a:	3310      	adds	r3, #16
 800590c:	9321      	str	r3, [sp, #132]	; 0x84
 800590e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005910:	3301      	adds	r3, #1
 8005912:	2b07      	cmp	r3, #7
 8005914:	9320      	str	r3, [sp, #128]	; 0x80
 8005916:	dc01      	bgt.n	800591c <_svfprintf_r+0xc08>
 8005918:	3408      	adds	r4, #8
 800591a:	e007      	b.n	800592c <_svfprintf_r+0xc18>
 800591c:	aa1f      	add	r2, sp, #124	; 0x7c
 800591e:	4659      	mov	r1, fp
 8005920:	4648      	mov	r0, r9
 8005922:	f001 fcfd 	bl	8007320 <__ssprint_r>
 8005926:	2800      	cmp	r0, #0
 8005928:	d16a      	bne.n	8005a00 <_svfprintf_r+0xcec>
 800592a:	ac2c      	add	r4, sp, #176	; 0xb0
 800592c:	3e10      	subs	r6, #16
 800592e:	e7e7      	b.n	8005900 <_svfprintf_r+0xbec>
 8005930:	4b81      	ldr	r3, [pc, #516]	; (8005b38 <_svfprintf_r+0xe24>)
 8005932:	e884 0048 	stmia.w	r4, {r3, r6}
 8005936:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005938:	441e      	add	r6, r3
 800593a:	9621      	str	r6, [sp, #132]	; 0x84
 800593c:	e7cc      	b.n	80058d8 <_svfprintf_r+0xbc4>
 800593e:	2301      	movs	r3, #1
 8005940:	6063      	str	r3, [r4, #4]
 8005942:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005944:	f8c4 8000 	str.w	r8, [r4]
 8005948:	3301      	adds	r3, #1
 800594a:	e7c4      	b.n	80058d6 <_svfprintf_r+0xbc2>
 800594c:	3408      	adds	r4, #8
 800594e:	ab1b      	add	r3, sp, #108	; 0x6c
 8005950:	6023      	str	r3, [r4, #0]
 8005952:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005954:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005956:	6063      	str	r3, [r4, #4]
 8005958:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800595a:	4413      	add	r3, r2
 800595c:	e5b3      	b.n	80054c6 <_svfprintf_r+0x7b2>
 800595e:	3408      	adds	r4, #8
 8005960:	076b      	lsls	r3, r5, #29
 8005962:	d40b      	bmi.n	800597c <_svfprintf_r+0xc68>
 8005964:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005966:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005968:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800596a:	428a      	cmp	r2, r1
 800596c:	bfac      	ite	ge
 800596e:	189b      	addge	r3, r3, r2
 8005970:	185b      	addlt	r3, r3, r1
 8005972:	930e      	str	r3, [sp, #56]	; 0x38
 8005974:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005976:	2b00      	cmp	r3, #0
 8005978:	d035      	beq.n	80059e6 <_svfprintf_r+0xcd2>
 800597a:	e02e      	b.n	80059da <_svfprintf_r+0xcc6>
 800597c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800597e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005980:	1a9d      	subs	r5, r3, r2
 8005982:	2d00      	cmp	r5, #0
 8005984:	ddee      	ble.n	8005964 <_svfprintf_r+0xc50>
 8005986:	2610      	movs	r6, #16
 8005988:	4b6c      	ldr	r3, [pc, #432]	; (8005b3c <_svfprintf_r+0xe28>)
 800598a:	2d10      	cmp	r5, #16
 800598c:	6023      	str	r3, [r4, #0]
 800598e:	dd13      	ble.n	80059b8 <_svfprintf_r+0xca4>
 8005990:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005992:	6066      	str	r6, [r4, #4]
 8005994:	3310      	adds	r3, #16
 8005996:	9321      	str	r3, [sp, #132]	; 0x84
 8005998:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800599a:	3301      	adds	r3, #1
 800599c:	2b07      	cmp	r3, #7
 800599e:	9320      	str	r3, [sp, #128]	; 0x80
 80059a0:	dc01      	bgt.n	80059a6 <_svfprintf_r+0xc92>
 80059a2:	3408      	adds	r4, #8
 80059a4:	e006      	b.n	80059b4 <_svfprintf_r+0xca0>
 80059a6:	aa1f      	add	r2, sp, #124	; 0x7c
 80059a8:	4659      	mov	r1, fp
 80059aa:	4648      	mov	r0, r9
 80059ac:	f001 fcb8 	bl	8007320 <__ssprint_r>
 80059b0:	bb30      	cbnz	r0, 8005a00 <_svfprintf_r+0xcec>
 80059b2:	ac2c      	add	r4, sp, #176	; 0xb0
 80059b4:	3d10      	subs	r5, #16
 80059b6:	e7e7      	b.n	8005988 <_svfprintf_r+0xc74>
 80059b8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80059ba:	6065      	str	r5, [r4, #4]
 80059bc:	441d      	add	r5, r3
 80059be:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80059c0:	9521      	str	r5, [sp, #132]	; 0x84
 80059c2:	3301      	adds	r3, #1
 80059c4:	2b07      	cmp	r3, #7
 80059c6:	9320      	str	r3, [sp, #128]	; 0x80
 80059c8:	ddcc      	ble.n	8005964 <_svfprintf_r+0xc50>
 80059ca:	aa1f      	add	r2, sp, #124	; 0x7c
 80059cc:	4659      	mov	r1, fp
 80059ce:	4648      	mov	r0, r9
 80059d0:	f001 fca6 	bl	8007320 <__ssprint_r>
 80059d4:	2800      	cmp	r0, #0
 80059d6:	d0c5      	beq.n	8005964 <_svfprintf_r+0xc50>
 80059d8:	e012      	b.n	8005a00 <_svfprintf_r+0xcec>
 80059da:	aa1f      	add	r2, sp, #124	; 0x7c
 80059dc:	4659      	mov	r1, fp
 80059de:	4648      	mov	r0, r9
 80059e0:	f001 fc9e 	bl	8007320 <__ssprint_r>
 80059e4:	b960      	cbnz	r0, 8005a00 <_svfprintf_r+0xcec>
 80059e6:	2300      	movs	r3, #0
 80059e8:	9320      	str	r3, [sp, #128]	; 0x80
 80059ea:	9f07      	ldr	r7, [sp, #28]
 80059ec:	ac2c      	add	r4, sp, #176	; 0xb0
 80059ee:	f7ff b9c5 	b.w	8004d7c <_svfprintf_r+0x68>
 80059f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80059f4:	b123      	cbz	r3, 8005a00 <_svfprintf_r+0xcec>
 80059f6:	aa1f      	add	r2, sp, #124	; 0x7c
 80059f8:	4659      	mov	r1, fp
 80059fa:	4648      	mov	r0, r9
 80059fc:	f001 fc90 	bl	8007320 <__ssprint_r>
 8005a00:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8005a04:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005a08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a0a:	bf18      	it	ne
 8005a0c:	f04f 33ff 	movne.w	r3, #4294967295
 8005a10:	4618      	mov	r0, r3
 8005a12:	e130      	b.n	8005c76 <_svfprintf_r+0xf62>
 8005a14:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005a16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005a18:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005a1a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005a1c:	f7fb f884 	bl	8000b28 <__aeabi_dcmpun>
 8005a20:	b160      	cbz	r0, 8005a3c <_svfprintf_r+0xd28>
 8005a22:	4b47      	ldr	r3, [pc, #284]	; (8005b40 <_svfprintf_r+0xe2c>)
 8005a24:	4a47      	ldr	r2, [pc, #284]	; (8005b44 <_svfprintf_r+0xe30>)
 8005a26:	9906      	ldr	r1, [sp, #24]
 8005a28:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 8005a2c:	2947      	cmp	r1, #71	; 0x47
 8005a2e:	bfcc      	ite	gt
 8005a30:	4690      	movgt	r8, r2
 8005a32:	4698      	movle	r8, r3
 8005a34:	f04f 0a03 	mov.w	sl, #3
 8005a38:	2600      	movs	r6, #0
 8005a3a:	e449      	b.n	80052d0 <_svfprintf_r+0x5bc>
 8005a3c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8005a40:	d00a      	beq.n	8005a58 <_svfprintf_r+0xd44>
 8005a42:	9b06      	ldr	r3, [sp, #24]
 8005a44:	f023 0320 	bic.w	r3, r3, #32
 8005a48:	2b47      	cmp	r3, #71	; 0x47
 8005a4a:	d107      	bne.n	8005a5c <_svfprintf_r+0xd48>
 8005a4c:	f1ba 0f00 	cmp.w	sl, #0
 8005a50:	bf08      	it	eq
 8005a52:	f04f 0a01 	moveq.w	sl, #1
 8005a56:	e001      	b.n	8005a5c <_svfprintf_r+0xd48>
 8005a58:	f04f 0a06 	mov.w	sl, #6
 8005a5c:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 8005a60:	9315      	str	r3, [sp, #84]	; 0x54
 8005a62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005a64:	1e1f      	subs	r7, r3, #0
 8005a66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005a68:	bfa8      	it	ge
 8005a6a:	9710      	strge	r7, [sp, #64]	; 0x40
 8005a6c:	930f      	str	r3, [sp, #60]	; 0x3c
 8005a6e:	bfbd      	ittte	lt
 8005a70:	463b      	movlt	r3, r7
 8005a72:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005a76:	9310      	strlt	r3, [sp, #64]	; 0x40
 8005a78:	2300      	movge	r3, #0
 8005a7a:	bfb8      	it	lt
 8005a7c:	232d      	movlt	r3, #45	; 0x2d
 8005a7e:	9314      	str	r3, [sp, #80]	; 0x50
 8005a80:	9b06      	ldr	r3, [sp, #24]
 8005a82:	f023 0720 	bic.w	r7, r3, #32
 8005a86:	2f46      	cmp	r7, #70	; 0x46
 8005a88:	d004      	beq.n	8005a94 <_svfprintf_r+0xd80>
 8005a8a:	2f45      	cmp	r7, #69	; 0x45
 8005a8c:	d105      	bne.n	8005a9a <_svfprintf_r+0xd86>
 8005a8e:	f10a 0601 	add.w	r6, sl, #1
 8005a92:	e003      	b.n	8005a9c <_svfprintf_r+0xd88>
 8005a94:	4656      	mov	r6, sl
 8005a96:	2303      	movs	r3, #3
 8005a98:	e001      	b.n	8005a9e <_svfprintf_r+0xd8a>
 8005a9a:	4656      	mov	r6, sl
 8005a9c:	2302      	movs	r3, #2
 8005a9e:	aa1d      	add	r2, sp, #116	; 0x74
 8005aa0:	9204      	str	r2, [sp, #16]
 8005aa2:	aa1a      	add	r2, sp, #104	; 0x68
 8005aa4:	9203      	str	r2, [sp, #12]
 8005aa6:	aa19      	add	r2, sp, #100	; 0x64
 8005aa8:	9202      	str	r2, [sp, #8]
 8005aaa:	e88d 0048 	stmia.w	sp, {r3, r6}
 8005aae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005ab0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005ab2:	4648      	mov	r0, r9
 8005ab4:	f000 f974 	bl	8005da0 <_dtoa_r>
 8005ab8:	2f47      	cmp	r7, #71	; 0x47
 8005aba:	4680      	mov	r8, r0
 8005abc:	d102      	bne.n	8005ac4 <_svfprintf_r+0xdb0>
 8005abe:	07eb      	lsls	r3, r5, #31
 8005ac0:	f140 80cf 	bpl.w	8005c62 <_svfprintf_r+0xf4e>
 8005ac4:	eb08 0306 	add.w	r3, r8, r6
 8005ac8:	2f46      	cmp	r7, #70	; 0x46
 8005aca:	9308      	str	r3, [sp, #32]
 8005acc:	d111      	bne.n	8005af2 <_svfprintf_r+0xdde>
 8005ace:	f898 3000 	ldrb.w	r3, [r8]
 8005ad2:	2b30      	cmp	r3, #48	; 0x30
 8005ad4:	d109      	bne.n	8005aea <_svfprintf_r+0xdd6>
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	2300      	movs	r3, #0
 8005ada:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8005adc:	9910      	ldr	r1, [sp, #64]	; 0x40
 8005ade:	f7fa fff1 	bl	8000ac4 <__aeabi_dcmpeq>
 8005ae2:	b910      	cbnz	r0, 8005aea <_svfprintf_r+0xdd6>
 8005ae4:	f1c6 0601 	rsb	r6, r6, #1
 8005ae8:	9619      	str	r6, [sp, #100]	; 0x64
 8005aea:	9a08      	ldr	r2, [sp, #32]
 8005aec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005aee:	441a      	add	r2, r3
 8005af0:	9208      	str	r2, [sp, #32]
 8005af2:	2200      	movs	r2, #0
 8005af4:	2300      	movs	r3, #0
 8005af6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8005af8:	9910      	ldr	r1, [sp, #64]	; 0x40
 8005afa:	f7fa ffe3 	bl	8000ac4 <__aeabi_dcmpeq>
 8005afe:	b908      	cbnz	r0, 8005b04 <_svfprintf_r+0xdf0>
 8005b00:	2230      	movs	r2, #48	; 0x30
 8005b02:	e002      	b.n	8005b0a <_svfprintf_r+0xdf6>
 8005b04:	9b08      	ldr	r3, [sp, #32]
 8005b06:	931d      	str	r3, [sp, #116]	; 0x74
 8005b08:	e007      	b.n	8005b1a <_svfprintf_r+0xe06>
 8005b0a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005b0c:	9908      	ldr	r1, [sp, #32]
 8005b0e:	4299      	cmp	r1, r3
 8005b10:	d903      	bls.n	8005b1a <_svfprintf_r+0xe06>
 8005b12:	1c59      	adds	r1, r3, #1
 8005b14:	911d      	str	r1, [sp, #116]	; 0x74
 8005b16:	701a      	strb	r2, [r3, #0]
 8005b18:	e7f7      	b.n	8005b0a <_svfprintf_r+0xdf6>
 8005b1a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005b1c:	2f47      	cmp	r7, #71	; 0x47
 8005b1e:	ebc8 0303 	rsb	r3, r8, r3
 8005b22:	9308      	str	r3, [sp, #32]
 8005b24:	d110      	bne.n	8005b48 <_svfprintf_r+0xe34>
 8005b26:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005b28:	1cdf      	adds	r7, r3, #3
 8005b2a:	db01      	blt.n	8005b30 <_svfprintf_r+0xe1c>
 8005b2c:	459a      	cmp	sl, r3
 8005b2e:	da6a      	bge.n	8005c06 <_svfprintf_r+0xef2>
 8005b30:	9b06      	ldr	r3, [sp, #24]
 8005b32:	3b02      	subs	r3, #2
 8005b34:	9306      	str	r3, [sp, #24]
 8005b36:	e00a      	b.n	8005b4e <_svfprintf_r+0xe3a>
 8005b38:	08007cda 	.word	0x08007cda
 8005b3c:	08007d1e 	.word	0x08007d1e
 8005b40:	08007cf2 	.word	0x08007cf2
 8005b44:	08007cf6 	.word	0x08007cf6
 8005b48:	9b06      	ldr	r3, [sp, #24]
 8005b4a:	2b65      	cmp	r3, #101	; 0x65
 8005b4c:	dc44      	bgt.n	8005bd8 <_svfprintf_r+0xec4>
 8005b4e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005b50:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8005b54:	3b01      	subs	r3, #1
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	9319      	str	r3, [sp, #100]	; 0x64
 8005b5a:	bfb8      	it	lt
 8005b5c:	425b      	neglt	r3, r3
 8005b5e:	f88d 206c 	strb.w	r2, [sp, #108]	; 0x6c
 8005b62:	bfb4      	ite	lt
 8005b64:	222d      	movlt	r2, #45	; 0x2d
 8005b66:	222b      	movge	r2, #43	; 0x2b
 8005b68:	2b09      	cmp	r3, #9
 8005b6a:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 8005b6e:	dd1d      	ble.n	8005bac <_svfprintf_r+0xe98>
 8005b70:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 8005b74:	200a      	movs	r0, #10
 8005b76:	fb93 f1f0 	sdiv	r1, r3, r0
 8005b7a:	fb00 3311 	mls	r3, r0, r1, r3
 8005b7e:	2909      	cmp	r1, #9
 8005b80:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8005b84:	f802 3d01 	strb.w	r3, [r2, #-1]!
 8005b88:	460b      	mov	r3, r1
 8005b8a:	dcf4      	bgt.n	8005b76 <_svfprintf_r+0xe62>
 8005b8c:	3330      	adds	r3, #48	; 0x30
 8005b8e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005b92:	1e51      	subs	r1, r2, #1
 8005b94:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
 8005b98:	f10d 007b 	add.w	r0, sp, #123	; 0x7b
 8005b9c:	4281      	cmp	r1, r0
 8005b9e:	461a      	mov	r2, r3
 8005ba0:	d20b      	bcs.n	8005bba <_svfprintf_r+0xea6>
 8005ba2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005ba6:	f803 2b01 	strb.w	r2, [r3], #1
 8005baa:	e7f7      	b.n	8005b9c <_svfprintf_r+0xe88>
 8005bac:	2230      	movs	r2, #48	; 0x30
 8005bae:	4413      	add	r3, r2
 8005bb0:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 8005bb4:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8005bb8:	aa1c      	add	r2, sp, #112	; 0x70
 8005bba:	ab1b      	add	r3, sp, #108	; 0x6c
 8005bbc:	1ad3      	subs	r3, r2, r3
 8005bbe:	9a08      	ldr	r2, [sp, #32]
 8005bc0:	9312      	str	r3, [sp, #72]	; 0x48
 8005bc2:	2a01      	cmp	r2, #1
 8005bc4:	eb03 0a02 	add.w	sl, r3, r2
 8005bc8:	dc02      	bgt.n	8005bd0 <_svfprintf_r+0xebc>
 8005bca:	f015 0701 	ands.w	r7, r5, #1
 8005bce:	d032      	beq.n	8005c36 <_svfprintf_r+0xf22>
 8005bd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bd2:	2700      	movs	r7, #0
 8005bd4:	449a      	add	sl, r3
 8005bd6:	e02e      	b.n	8005c36 <_svfprintf_r+0xf22>
 8005bd8:	9b06      	ldr	r3, [sp, #24]
 8005bda:	2b66      	cmp	r3, #102	; 0x66
 8005bdc:	d113      	bne.n	8005c06 <_svfprintf_r+0xef2>
 8005bde:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	dd07      	ble.n	8005bf4 <_svfprintf_r+0xee0>
 8005be4:	f1ba 0f00 	cmp.w	sl, #0
 8005be8:	d101      	bne.n	8005bee <_svfprintf_r+0xeda>
 8005bea:	07ee      	lsls	r6, r5, #31
 8005bec:	d521      	bpl.n	8005c32 <_svfprintf_r+0xf1e>
 8005bee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005bf0:	4413      	add	r3, r2
 8005bf2:	e006      	b.n	8005c02 <_svfprintf_r+0xeee>
 8005bf4:	f1ba 0f00 	cmp.w	sl, #0
 8005bf8:	d101      	bne.n	8005bfe <_svfprintf_r+0xeea>
 8005bfa:	07ed      	lsls	r5, r5, #31
 8005bfc:	d514      	bpl.n	8005c28 <_svfprintf_r+0xf14>
 8005bfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c00:	3301      	adds	r3, #1
 8005c02:	4453      	add	r3, sl
 8005c04:	e015      	b.n	8005c32 <_svfprintf_r+0xf1e>
 8005c06:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005c08:	9a08      	ldr	r2, [sp, #32]
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	db03      	blt.n	8005c16 <_svfprintf_r+0xf02>
 8005c0e:	07e8      	lsls	r0, r5, #31
 8005c10:	d50d      	bpl.n	8005c2e <_svfprintf_r+0xf1a>
 8005c12:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005c14:	e006      	b.n	8005c24 <_svfprintf_r+0xf10>
 8005c16:	9a08      	ldr	r2, [sp, #32]
 8005c18:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	440a      	add	r2, r1
 8005c1e:	dc05      	bgt.n	8005c2c <_svfprintf_r+0xf18>
 8005c20:	f1c3 0301 	rsb	r3, r3, #1
 8005c24:	4413      	add	r3, r2
 8005c26:	e002      	b.n	8005c2e <_svfprintf_r+0xf1a>
 8005c28:	2301      	movs	r3, #1
 8005c2a:	e002      	b.n	8005c32 <_svfprintf_r+0xf1e>
 8005c2c:	4613      	mov	r3, r2
 8005c2e:	2267      	movs	r2, #103	; 0x67
 8005c30:	9206      	str	r2, [sp, #24]
 8005c32:	469a      	mov	sl, r3
 8005c34:	9f19      	ldr	r7, [sp, #100]	; 0x64
 8005c36:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005c38:	b113      	cbz	r3, 8005c40 <_svfprintf_r+0xf2c>
 8005c3a:	232d      	movs	r3, #45	; 0x2d
 8005c3c:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8005c40:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8005c42:	2600      	movs	r6, #0
 8005c44:	f7ff bb45 	b.w	80052d2 <_svfprintf_r+0x5be>
 8005c48:	2200      	movs	r2, #0
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005c4e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005c50:	f7fa ff42 	bl	8000ad8 <__aeabi_dcmplt>
 8005c54:	b110      	cbz	r0, 8005c5c <_svfprintf_r+0xf48>
 8005c56:	232d      	movs	r3, #45	; 0x2d
 8005c58:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8005c5c:	4b07      	ldr	r3, [pc, #28]	; (8005c7c <_svfprintf_r+0xf68>)
 8005c5e:	4a08      	ldr	r2, [pc, #32]	; (8005c80 <_svfprintf_r+0xf6c>)
 8005c60:	e6e1      	b.n	8005a26 <_svfprintf_r+0xd12>
 8005c62:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005c64:	1a1b      	subs	r3, r3, r0
 8005c66:	9308      	str	r3, [sp, #32]
 8005c68:	e75d      	b.n	8005b26 <_svfprintf_r+0xe12>
 8005c6a:	ea56 0207 	orrs.w	r2, r6, r7
 8005c6e:	f47f aaa9 	bne.w	80051c4 <_svfprintf_r+0x4b0>
 8005c72:	f7ff baae 	b.w	80051d2 <_svfprintf_r+0x4be>
 8005c76:	b03d      	add	sp, #244	; 0xf4
 8005c78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c7c:	08007cea 	.word	0x08007cea
 8005c80:	08007cee 	.word	0x08007cee

08005c84 <quorem>:
 8005c84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c88:	6903      	ldr	r3, [r0, #16]
 8005c8a:	690c      	ldr	r4, [r1, #16]
 8005c8c:	4680      	mov	r8, r0
 8005c8e:	429c      	cmp	r4, r3
 8005c90:	dc7f      	bgt.n	8005d92 <quorem+0x10e>
 8005c92:	3c01      	subs	r4, #1
 8005c94:	f101 0714 	add.w	r7, r1, #20
 8005c98:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8005c9c:	f100 0614 	add.w	r6, r0, #20
 8005ca0:	eb06 030e 	add.w	r3, r6, lr
 8005ca4:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8005ca8:	9301      	str	r3, [sp, #4]
 8005caa:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 8005cae:	3501      	adds	r5, #1
 8005cb0:	fbb3 f5f5 	udiv	r5, r3, r5
 8005cb4:	eb07 090e 	add.w	r9, r7, lr
 8005cb8:	b3c5      	cbz	r5, 8005d2c <quorem+0xa8>
 8005cba:	f04f 0a00 	mov.w	sl, #0
 8005cbe:	4638      	mov	r0, r7
 8005cc0:	46b4      	mov	ip, r6
 8005cc2:	46d3      	mov	fp, sl
 8005cc4:	f850 3b04 	ldr.w	r3, [r0], #4
 8005cc8:	b29a      	uxth	r2, r3
 8005cca:	fb05 a202 	mla	r2, r5, r2, sl
 8005cce:	0c1b      	lsrs	r3, r3, #16
 8005cd0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8005cd4:	fb05 a303 	mla	r3, r5, r3, sl
 8005cd8:	b292      	uxth	r2, r2
 8005cda:	ebc2 0b0b 	rsb	fp, r2, fp
 8005cde:	f8bc 2000 	ldrh.w	r2, [ip]
 8005ce2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005ce6:	445a      	add	r2, fp
 8005ce8:	fa1f fb83 	uxth.w	fp, r3
 8005cec:	f8dc 3000 	ldr.w	r3, [ip]
 8005cf0:	4581      	cmp	r9, r0
 8005cf2:	ebcb 4313 	rsb	r3, fp, r3, lsr #16
 8005cf6:	eb03 4322 	add.w	r3, r3, r2, asr #16
 8005cfa:	b292      	uxth	r2, r2
 8005cfc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005d00:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005d04:	f84c 2b04 	str.w	r2, [ip], #4
 8005d08:	d2dc      	bcs.n	8005cc4 <quorem+0x40>
 8005d0a:	f856 300e 	ldr.w	r3, [r6, lr]
 8005d0e:	b96b      	cbnz	r3, 8005d2c <quorem+0xa8>
 8005d10:	9b01      	ldr	r3, [sp, #4]
 8005d12:	3b04      	subs	r3, #4
 8005d14:	429e      	cmp	r6, r3
 8005d16:	461a      	mov	r2, r3
 8005d18:	d302      	bcc.n	8005d20 <quorem+0x9c>
 8005d1a:	f8c8 4010 	str.w	r4, [r8, #16]
 8005d1e:	e005      	b.n	8005d2c <quorem+0xa8>
 8005d20:	6812      	ldr	r2, [r2, #0]
 8005d22:	3b04      	subs	r3, #4
 8005d24:	2a00      	cmp	r2, #0
 8005d26:	d1f8      	bne.n	8005d1a <quorem+0x96>
 8005d28:	3c01      	subs	r4, #1
 8005d2a:	e7f3      	b.n	8005d14 <quorem+0x90>
 8005d2c:	4640      	mov	r0, r8
 8005d2e:	f001 fa1e 	bl	800716e <__mcmp>
 8005d32:	2800      	cmp	r0, #0
 8005d34:	db2b      	blt.n	8005d8e <quorem+0x10a>
 8005d36:	4630      	mov	r0, r6
 8005d38:	3501      	adds	r5, #1
 8005d3a:	f04f 0e00 	mov.w	lr, #0
 8005d3e:	f857 2b04 	ldr.w	r2, [r7], #4
 8005d42:	6803      	ldr	r3, [r0, #0]
 8005d44:	b291      	uxth	r1, r2
 8005d46:	ebc1 0e0e 	rsb	lr, r1, lr
 8005d4a:	0c12      	lsrs	r2, r2, #16
 8005d4c:	b299      	uxth	r1, r3
 8005d4e:	4471      	add	r1, lr
 8005d50:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
 8005d54:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005d58:	b289      	uxth	r1, r1
 8005d5a:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8005d5e:	45b9      	cmp	r9, r7
 8005d60:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005d64:	f840 3b04 	str.w	r3, [r0], #4
 8005d68:	d2e9      	bcs.n	8005d3e <quorem+0xba>
 8005d6a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8005d6e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8005d72:	b962      	cbnz	r2, 8005d8e <quorem+0x10a>
 8005d74:	3b04      	subs	r3, #4
 8005d76:	429e      	cmp	r6, r3
 8005d78:	461a      	mov	r2, r3
 8005d7a:	d302      	bcc.n	8005d82 <quorem+0xfe>
 8005d7c:	f8c8 4010 	str.w	r4, [r8, #16]
 8005d80:	e005      	b.n	8005d8e <quorem+0x10a>
 8005d82:	6812      	ldr	r2, [r2, #0]
 8005d84:	3b04      	subs	r3, #4
 8005d86:	2a00      	cmp	r2, #0
 8005d88:	d1f8      	bne.n	8005d7c <quorem+0xf8>
 8005d8a:	3c01      	subs	r4, #1
 8005d8c:	e7f3      	b.n	8005d76 <quorem+0xf2>
 8005d8e:	4628      	mov	r0, r5
 8005d90:	e000      	b.n	8005d94 <quorem+0x110>
 8005d92:	2000      	movs	r0, #0
 8005d94:	b003      	add	sp, #12
 8005d96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d9a:	0000      	movs	r0, r0
 8005d9c:	0000      	movs	r0, r0
	...

08005da0 <_dtoa_r>:
 8005da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005da4:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005da6:	b095      	sub	sp, #84	; 0x54
 8005da8:	4682      	mov	sl, r0
 8005daa:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8005dac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005db0:	b945      	cbnz	r5, 8005dc4 <_dtoa_r+0x24>
 8005db2:	2010      	movs	r0, #16
 8005db4:	f000 fd90 	bl	80068d8 <malloc>
 8005db8:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
 8005dbc:	6045      	str	r5, [r0, #4]
 8005dbe:	6085      	str	r5, [r0, #8]
 8005dc0:	6005      	str	r5, [r0, #0]
 8005dc2:	60c5      	str	r5, [r0, #12]
 8005dc4:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 8005dc8:	6819      	ldr	r1, [r3, #0]
 8005dca:	b159      	cbz	r1, 8005de4 <_dtoa_r+0x44>
 8005dcc:	685a      	ldr	r2, [r3, #4]
 8005dce:	2301      	movs	r3, #1
 8005dd0:	4093      	lsls	r3, r2
 8005dd2:	604a      	str	r2, [r1, #4]
 8005dd4:	608b      	str	r3, [r1, #8]
 8005dd6:	4650      	mov	r0, sl
 8005dd8:	f000 fff2 	bl	8006dc0 <_Bfree>
 8005ddc:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 8005de0:	2200      	movs	r2, #0
 8005de2:	601a      	str	r2, [r3, #0]
 8005de4:	9b03      	ldr	r3, [sp, #12]
 8005de6:	4aa0      	ldr	r2, [pc, #640]	; (8006068 <_dtoa_r+0x2c8>)
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	bfbd      	ittte	lt
 8005dec:	2301      	movlt	r3, #1
 8005dee:	6023      	strlt	r3, [r4, #0]
 8005df0:	9b03      	ldrlt	r3, [sp, #12]
 8005df2:	2300      	movge	r3, #0
 8005df4:	bfbc      	itt	lt
 8005df6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005dfa:	9303      	strlt	r3, [sp, #12]
 8005dfc:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005e00:	bfa8      	it	ge
 8005e02:	6023      	strge	r3, [r4, #0]
 8005e04:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8005e08:	0d1b      	lsrs	r3, r3, #20
 8005e0a:	051b      	lsls	r3, r3, #20
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d11d      	bne.n	8005e4c <_dtoa_r+0xac>
 8005e10:	f242 730f 	movw	r3, #9999	; 0x270f
 8005e14:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005e16:	6013      	str	r3, [r2, #0]
 8005e18:	9b02      	ldr	r3, [sp, #8]
 8005e1a:	b943      	cbnz	r3, 8005e2e <_dtoa_r+0x8e>
 8005e1c:	4a93      	ldr	r2, [pc, #588]	; (800606c <_dtoa_r+0x2cc>)
 8005e1e:	4b94      	ldr	r3, [pc, #592]	; (8006070 <_dtoa_r+0x2d0>)
 8005e20:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8005e24:	2800      	cmp	r0, #0
 8005e26:	bf14      	ite	ne
 8005e28:	4618      	movne	r0, r3
 8005e2a:	4610      	moveq	r0, r2
 8005e2c:	e000      	b.n	8005e30 <_dtoa_r+0x90>
 8005e2e:	4890      	ldr	r0, [pc, #576]	; (8006070 <_dtoa_r+0x2d0>)
 8005e30:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	f000 8546 	beq.w	80068c4 <_dtoa_r+0xb24>
 8005e38:	78c3      	ldrb	r3, [r0, #3]
 8005e3a:	b113      	cbz	r3, 8005e42 <_dtoa_r+0xa2>
 8005e3c:	f100 0308 	add.w	r3, r0, #8
 8005e40:	e000      	b.n	8005e44 <_dtoa_r+0xa4>
 8005e42:	1cc3      	adds	r3, r0, #3
 8005e44:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005e46:	6013      	str	r3, [r2, #0]
 8005e48:	f000 bd3c 	b.w	80068c4 <_dtoa_r+0xb24>
 8005e4c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005e50:	2200      	movs	r2, #0
 8005e52:	2300      	movs	r3, #0
 8005e54:	4620      	mov	r0, r4
 8005e56:	4629      	mov	r1, r5
 8005e58:	f7fa fe34 	bl	8000ac4 <__aeabi_dcmpeq>
 8005e5c:	4607      	mov	r7, r0
 8005e5e:	b158      	cbz	r0, 8005e78 <_dtoa_r+0xd8>
 8005e60:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005e62:	2301      	movs	r3, #1
 8005e64:	6013      	str	r3, [r2, #0]
 8005e66:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	f000 851e 	beq.w	80068aa <_dtoa_r+0xb0a>
 8005e6e:	4881      	ldr	r0, [pc, #516]	; (8006074 <_dtoa_r+0x2d4>)
 8005e70:	6018      	str	r0, [r3, #0]
 8005e72:	3801      	subs	r0, #1
 8005e74:	f000 bd26 	b.w	80068c4 <_dtoa_r+0xb24>
 8005e78:	ab12      	add	r3, sp, #72	; 0x48
 8005e7a:	9301      	str	r3, [sp, #4]
 8005e7c:	ab13      	add	r3, sp, #76	; 0x4c
 8005e7e:	9300      	str	r3, [sp, #0]
 8005e80:	4622      	mov	r2, r4
 8005e82:	462b      	mov	r3, r5
 8005e84:	4650      	mov	r0, sl
 8005e86:	f001 f9ed 	bl	8007264 <__d2b>
 8005e8a:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8005e8e:	9004      	str	r0, [sp, #16]
 8005e90:	b156      	cbz	r6, 8005ea8 <_dtoa_r+0x108>
 8005e92:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8005e96:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8005e9a:	4620      	mov	r0, r4
 8005e9c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8005ea0:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
 8005ea4:	9711      	str	r7, [sp, #68]	; 0x44
 8005ea6:	e01d      	b.n	8005ee4 <_dtoa_r+0x144>
 8005ea8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005eaa:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8005eac:	441e      	add	r6, r3
 8005eae:	f206 4332 	addw	r3, r6, #1074	; 0x432
 8005eb2:	2b20      	cmp	r3, #32
 8005eb4:	dd0a      	ble.n	8005ecc <_dtoa_r+0x12c>
 8005eb6:	9a02      	ldr	r2, [sp, #8]
 8005eb8:	f206 4012 	addw	r0, r6, #1042	; 0x412
 8005ebc:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8005ec0:	fa22 f000 	lsr.w	r0, r2, r0
 8005ec4:	fa08 f303 	lsl.w	r3, r8, r3
 8005ec8:	4318      	orrs	r0, r3
 8005eca:	e004      	b.n	8005ed6 <_dtoa_r+0x136>
 8005ecc:	f1c3 0020 	rsb	r0, r3, #32
 8005ed0:	9b02      	ldr	r3, [sp, #8]
 8005ed2:	fa03 f000 	lsl.w	r0, r3, r0
 8005ed6:	f7fa fb17 	bl	8000508 <__aeabi_ui2d>
 8005eda:	2301      	movs	r3, #1
 8005edc:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8005ee0:	3e01      	subs	r6, #1
 8005ee2:	9311      	str	r3, [sp, #68]	; 0x44
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	4b64      	ldr	r3, [pc, #400]	; (8006078 <_dtoa_r+0x2d8>)
 8005ee8:	f7fa f9d0 	bl	800028c <__aeabi_dsub>
 8005eec:	a358      	add	r3, pc, #352	; (adr r3, 8006050 <_dtoa_r+0x2b0>)
 8005eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ef2:	f7fa fb7f 	bl	80005f4 <__aeabi_dmul>
 8005ef6:	a358      	add	r3, pc, #352	; (adr r3, 8006058 <_dtoa_r+0x2b8>)
 8005ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005efc:	f7fa f9c8 	bl	8000290 <__adddf3>
 8005f00:	4604      	mov	r4, r0
 8005f02:	4630      	mov	r0, r6
 8005f04:	460d      	mov	r5, r1
 8005f06:	f7fa fb0f 	bl	8000528 <__aeabi_i2d>
 8005f0a:	a355      	add	r3, pc, #340	; (adr r3, 8006060 <_dtoa_r+0x2c0>)
 8005f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f10:	f7fa fb70 	bl	80005f4 <__aeabi_dmul>
 8005f14:	4602      	mov	r2, r0
 8005f16:	460b      	mov	r3, r1
 8005f18:	4620      	mov	r0, r4
 8005f1a:	4629      	mov	r1, r5
 8005f1c:	f7fa f9b8 	bl	8000290 <__adddf3>
 8005f20:	4604      	mov	r4, r0
 8005f22:	460d      	mov	r5, r1
 8005f24:	f7fa fe16 	bl	8000b54 <__aeabi_d2iz>
 8005f28:	2200      	movs	r2, #0
 8005f2a:	4683      	mov	fp, r0
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	4620      	mov	r0, r4
 8005f30:	4629      	mov	r1, r5
 8005f32:	f7fa fdd1 	bl	8000ad8 <__aeabi_dcmplt>
 8005f36:	b158      	cbz	r0, 8005f50 <_dtoa_r+0x1b0>
 8005f38:	4658      	mov	r0, fp
 8005f3a:	f7fa faf5 	bl	8000528 <__aeabi_i2d>
 8005f3e:	4602      	mov	r2, r0
 8005f40:	460b      	mov	r3, r1
 8005f42:	4620      	mov	r0, r4
 8005f44:	4629      	mov	r1, r5
 8005f46:	f7fa fdbd 	bl	8000ac4 <__aeabi_dcmpeq>
 8005f4a:	b908      	cbnz	r0, 8005f50 <_dtoa_r+0x1b0>
 8005f4c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005f50:	f1bb 0f16 	cmp.w	fp, #22
 8005f54:	d80d      	bhi.n	8005f72 <_dtoa_r+0x1d2>
 8005f56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005f5a:	4948      	ldr	r1, [pc, #288]	; (800607c <_dtoa_r+0x2dc>)
 8005f5c:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8005f60:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f64:	f7fa fdd6 	bl	8000b14 <__aeabi_dcmpgt>
 8005f68:	b130      	cbz	r0, 8005f78 <_dtoa_r+0x1d8>
 8005f6a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005f6e:	2300      	movs	r3, #0
 8005f70:	e000      	b.n	8005f74 <_dtoa_r+0x1d4>
 8005f72:	2301      	movs	r3, #1
 8005f74:	9310      	str	r3, [sp, #64]	; 0x40
 8005f76:	e000      	b.n	8005f7a <_dtoa_r+0x1da>
 8005f78:	9010      	str	r0, [sp, #64]	; 0x40
 8005f7a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005f7c:	1b9e      	subs	r6, r3, r6
 8005f7e:	1e73      	subs	r3, r6, #1
 8005f80:	9307      	str	r3, [sp, #28]
 8005f82:	bf43      	ittte	mi
 8005f84:	f1c3 0800 	rsbmi	r8, r3, #0
 8005f88:	2300      	movmi	r3, #0
 8005f8a:	9307      	strmi	r3, [sp, #28]
 8005f8c:	f04f 0800 	movpl.w	r8, #0
 8005f90:	f1bb 0f00 	cmp.w	fp, #0
 8005f94:	db06      	blt.n	8005fa4 <_dtoa_r+0x204>
 8005f96:	9b07      	ldr	r3, [sp, #28]
 8005f98:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8005f9c:	445b      	add	r3, fp
 8005f9e:	9307      	str	r3, [sp, #28]
 8005fa0:	2700      	movs	r7, #0
 8005fa2:	e005      	b.n	8005fb0 <_dtoa_r+0x210>
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	ebcb 0808 	rsb	r8, fp, r8
 8005faa:	f1cb 0700 	rsb	r7, fp, #0
 8005fae:	930b      	str	r3, [sp, #44]	; 0x2c
 8005fb0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005fb2:	2b09      	cmp	r3, #9
 8005fb4:	d828      	bhi.n	8006008 <_dtoa_r+0x268>
 8005fb6:	2b05      	cmp	r3, #5
 8005fb8:	bfc4      	itt	gt
 8005fba:	3b04      	subgt	r3, #4
 8005fbc:	931e      	strgt	r3, [sp, #120]	; 0x78
 8005fbe:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005fc0:	bfc8      	it	gt
 8005fc2:	2500      	movgt	r5, #0
 8005fc4:	f1a3 0302 	sub.w	r3, r3, #2
 8005fc8:	bfd8      	it	le
 8005fca:	2501      	movle	r5, #1
 8005fcc:	2b03      	cmp	r3, #3
 8005fce:	d820      	bhi.n	8006012 <_dtoa_r+0x272>
 8005fd0:	e8df f003 	tbb	[pc, r3]
 8005fd4:	04020e06 	.word	0x04020e06
 8005fd8:	2301      	movs	r3, #1
 8005fda:	e002      	b.n	8005fe2 <_dtoa_r+0x242>
 8005fdc:	2301      	movs	r3, #1
 8005fde:	e008      	b.n	8005ff2 <_dtoa_r+0x252>
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	930a      	str	r3, [sp, #40]	; 0x28
 8005fe4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	dd1d      	ble.n	8006026 <_dtoa_r+0x286>
 8005fea:	4699      	mov	r9, r3
 8005fec:	9305      	str	r3, [sp, #20]
 8005fee:	e021      	b.n	8006034 <_dtoa_r+0x294>
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	930a      	str	r3, [sp, #40]	; 0x28
 8005ff4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005ff6:	eb0b 0903 	add.w	r9, fp, r3
 8005ffa:	f109 0301 	add.w	r3, r9, #1
 8005ffe:	2b01      	cmp	r3, #1
 8006000:	9305      	str	r3, [sp, #20]
 8006002:	bfb8      	it	lt
 8006004:	2301      	movlt	r3, #1
 8006006:	e015      	b.n	8006034 <_dtoa_r+0x294>
 8006008:	2501      	movs	r5, #1
 800600a:	2300      	movs	r3, #0
 800600c:	931e      	str	r3, [sp, #120]	; 0x78
 800600e:	950a      	str	r5, [sp, #40]	; 0x28
 8006010:	e001      	b.n	8006016 <_dtoa_r+0x276>
 8006012:	2301      	movs	r3, #1
 8006014:	930a      	str	r3, [sp, #40]	; 0x28
 8006016:	f04f 39ff 	mov.w	r9, #4294967295
 800601a:	2200      	movs	r2, #0
 800601c:	f8cd 9014 	str.w	r9, [sp, #20]
 8006020:	2312      	movs	r3, #18
 8006022:	921f      	str	r2, [sp, #124]	; 0x7c
 8006024:	e006      	b.n	8006034 <_dtoa_r+0x294>
 8006026:	f04f 0901 	mov.w	r9, #1
 800602a:	464b      	mov	r3, r9
 800602c:	f8cd 9014 	str.w	r9, [sp, #20]
 8006030:	f8cd 907c 	str.w	r9, [sp, #124]	; 0x7c
 8006034:	f8da 4024 	ldr.w	r4, [sl, #36]	; 0x24
 8006038:	2200      	movs	r2, #0
 800603a:	6062      	str	r2, [r4, #4]
 800603c:	2104      	movs	r1, #4
 800603e:	f101 0214 	add.w	r2, r1, #20
 8006042:	429a      	cmp	r2, r3
 8006044:	d81c      	bhi.n	8006080 <_dtoa_r+0x2e0>
 8006046:	6862      	ldr	r2, [r4, #4]
 8006048:	0049      	lsls	r1, r1, #1
 800604a:	3201      	adds	r2, #1
 800604c:	6062      	str	r2, [r4, #4]
 800604e:	e7f6      	b.n	800603e <_dtoa_r+0x29e>
 8006050:	636f4361 	.word	0x636f4361
 8006054:	3fd287a7 	.word	0x3fd287a7
 8006058:	8b60c8b3 	.word	0x8b60c8b3
 800605c:	3fc68a28 	.word	0x3fc68a28
 8006060:	509f79fb 	.word	0x509f79fb
 8006064:	3fd34413 	.word	0x3fd34413
 8006068:	7ff00000 	.word	0x7ff00000
 800606c:	08007d2e 	.word	0x08007d2e
 8006070:	08007d37 	.word	0x08007d37
 8006074:	08007d1d 	.word	0x08007d1d
 8006078:	3ff80000 	.word	0x3ff80000
 800607c:	08007d48 	.word	0x08007d48
 8006080:	6861      	ldr	r1, [r4, #4]
 8006082:	4650      	mov	r0, sl
 8006084:	f000 fe67 	bl	8006d56 <_Balloc>
 8006088:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 800608c:	6020      	str	r0, [r4, #0]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	9306      	str	r3, [sp, #24]
 8006092:	9b05      	ldr	r3, [sp, #20]
 8006094:	2b0e      	cmp	r3, #14
 8006096:	f200 815b 	bhi.w	8006350 <_dtoa_r+0x5b0>
 800609a:	2d00      	cmp	r5, #0
 800609c:	f000 8158 	beq.w	8006350 <_dtoa_r+0x5b0>
 80060a0:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
 80060a4:	f1bb 0f00 	cmp.w	fp, #0
 80060a8:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38
 80060ac:	dd30      	ble.n	8006110 <_dtoa_r+0x370>
 80060ae:	4a9f      	ldr	r2, [pc, #636]	; (800632c <_dtoa_r+0x58c>)
 80060b0:	f00b 030f 	and.w	r3, fp, #15
 80060b4:	ea4f 152b 	mov.w	r5, fp, asr #4
 80060b8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80060bc:	06e8      	lsls	r0, r5, #27
 80060be:	cb18      	ldmia	r3, {r3, r4}
 80060c0:	e9cd 3408 	strd	r3, r4, [sp, #32]
 80060c4:	d50c      	bpl.n	80060e0 <_dtoa_r+0x340>
 80060c6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80060ca:	4b99      	ldr	r3, [pc, #612]	; (8006330 <_dtoa_r+0x590>)
 80060cc:	f005 050f 	and.w	r5, r5, #15
 80060d0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80060d4:	f7fa fbb8 	bl	8000848 <__aeabi_ddiv>
 80060d8:	2403      	movs	r4, #3
 80060da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80060de:	e000      	b.n	80060e2 <_dtoa_r+0x342>
 80060e0:	2402      	movs	r4, #2
 80060e2:	4e93      	ldr	r6, [pc, #588]	; (8006330 <_dtoa_r+0x590>)
 80060e4:	b16d      	cbz	r5, 8006102 <_dtoa_r+0x362>
 80060e6:	07e9      	lsls	r1, r5, #31
 80060e8:	d508      	bpl.n	80060fc <_dtoa_r+0x35c>
 80060ea:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80060ee:	e9d6 2300 	ldrd	r2, r3, [r6]
 80060f2:	f7fa fa7f 	bl	80005f4 <__aeabi_dmul>
 80060f6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80060fa:	3401      	adds	r4, #1
 80060fc:	106d      	asrs	r5, r5, #1
 80060fe:	3608      	adds	r6, #8
 8006100:	e7f0      	b.n	80060e4 <_dtoa_r+0x344>
 8006102:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006106:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800610a:	f7fa fb9d 	bl	8000848 <__aeabi_ddiv>
 800610e:	e020      	b.n	8006152 <_dtoa_r+0x3b2>
 8006110:	f1cb 0500 	rsb	r5, fp, #0
 8006114:	b305      	cbz	r5, 8006158 <_dtoa_r+0x3b8>
 8006116:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800611a:	4b84      	ldr	r3, [pc, #528]	; (800632c <_dtoa_r+0x58c>)
 800611c:	f005 020f 	and.w	r2, r5, #15
 8006120:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006128:	f7fa fa64 	bl	80005f4 <__aeabi_dmul>
 800612c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006130:	4e7f      	ldr	r6, [pc, #508]	; (8006330 <_dtoa_r+0x590>)
 8006132:	112d      	asrs	r5, r5, #4
 8006134:	2300      	movs	r3, #0
 8006136:	2402      	movs	r4, #2
 8006138:	b155      	cbz	r5, 8006150 <_dtoa_r+0x3b0>
 800613a:	07ea      	lsls	r2, r5, #31
 800613c:	d505      	bpl.n	800614a <_dtoa_r+0x3aa>
 800613e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006142:	f7fa fa57 	bl	80005f4 <__aeabi_dmul>
 8006146:	3401      	adds	r4, #1
 8006148:	2301      	movs	r3, #1
 800614a:	106d      	asrs	r5, r5, #1
 800614c:	3608      	adds	r6, #8
 800614e:	e7f3      	b.n	8006138 <_dtoa_r+0x398>
 8006150:	b11b      	cbz	r3, 800615a <_dtoa_r+0x3ba>
 8006152:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006156:	e000      	b.n	800615a <_dtoa_r+0x3ba>
 8006158:	2402      	movs	r4, #2
 800615a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800615c:	b1e3      	cbz	r3, 8006198 <_dtoa_r+0x3f8>
 800615e:	e9dd 5602 	ldrd	r5, r6, [sp, #8]
 8006162:	2200      	movs	r2, #0
 8006164:	4b73      	ldr	r3, [pc, #460]	; (8006334 <_dtoa_r+0x594>)
 8006166:	4628      	mov	r0, r5
 8006168:	4631      	mov	r1, r6
 800616a:	f7fa fcb5 	bl	8000ad8 <__aeabi_dcmplt>
 800616e:	b198      	cbz	r0, 8006198 <_dtoa_r+0x3f8>
 8006170:	9b05      	ldr	r3, [sp, #20]
 8006172:	b18b      	cbz	r3, 8006198 <_dtoa_r+0x3f8>
 8006174:	f1b9 0f00 	cmp.w	r9, #0
 8006178:	f340 80e6 	ble.w	8006348 <_dtoa_r+0x5a8>
 800617c:	f10b 33ff 	add.w	r3, fp, #4294967295
 8006180:	9308      	str	r3, [sp, #32]
 8006182:	4631      	mov	r1, r6
 8006184:	2200      	movs	r2, #0
 8006186:	4b6c      	ldr	r3, [pc, #432]	; (8006338 <_dtoa_r+0x598>)
 8006188:	4628      	mov	r0, r5
 800618a:	f7fa fa33 	bl	80005f4 <__aeabi_dmul>
 800618e:	3401      	adds	r4, #1
 8006190:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006194:	464e      	mov	r6, r9
 8006196:	e002      	b.n	800619e <_dtoa_r+0x3fe>
 8006198:	9e05      	ldr	r6, [sp, #20]
 800619a:	f8cd b020 	str.w	fp, [sp, #32]
 800619e:	4620      	mov	r0, r4
 80061a0:	f7fa f9c2 	bl	8000528 <__aeabi_i2d>
 80061a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80061a8:	f7fa fa24 	bl	80005f4 <__aeabi_dmul>
 80061ac:	4b63      	ldr	r3, [pc, #396]	; (800633c <_dtoa_r+0x59c>)
 80061ae:	2200      	movs	r2, #0
 80061b0:	f7fa f86e 	bl	8000290 <__adddf3>
 80061b4:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80061b8:	4604      	mov	r4, r0
 80061ba:	930c      	str	r3, [sp, #48]	; 0x30
 80061bc:	461d      	mov	r5, r3
 80061be:	b9d6      	cbnz	r6, 80061f6 <_dtoa_r+0x456>
 80061c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061c4:	2200      	movs	r2, #0
 80061c6:	4b5e      	ldr	r3, [pc, #376]	; (8006340 <_dtoa_r+0x5a0>)
 80061c8:	f7fa f860 	bl	800028c <__aeabi_dsub>
 80061cc:	4622      	mov	r2, r4
 80061ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80061d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80061d4:	f7fa fc9e 	bl	8000b14 <__aeabi_dcmpgt>
 80061d8:	2800      	cmp	r0, #0
 80061da:	f040 823f 	bne.w	800665c <_dtoa_r+0x8bc>
 80061de:	990c      	ldr	r1, [sp, #48]	; 0x30
 80061e0:	4622      	mov	r2, r4
 80061e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80061e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061ea:	f7fa fc75 	bl	8000ad8 <__aeabi_dcmplt>
 80061ee:	2800      	cmp	r0, #0
 80061f0:	f040 822b 	bne.w	800664a <_dtoa_r+0x8aa>
 80061f4:	e0a8      	b.n	8006348 <_dtoa_r+0x5a8>
 80061f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80061f8:	4b4c      	ldr	r3, [pc, #304]	; (800632c <_dtoa_r+0x58c>)
 80061fa:	1e71      	subs	r1, r6, #1
 80061fc:	2a00      	cmp	r2, #0
 80061fe:	d049      	beq.n	8006294 <_dtoa_r+0x4f4>
 8006200:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8006204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006208:	2000      	movs	r0, #0
 800620a:	494e      	ldr	r1, [pc, #312]	; (8006344 <_dtoa_r+0x5a4>)
 800620c:	f7fa fb1c 	bl	8000848 <__aeabi_ddiv>
 8006210:	4622      	mov	r2, r4
 8006212:	462b      	mov	r3, r5
 8006214:	f7fa f83a 	bl	800028c <__aeabi_dsub>
 8006218:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800621c:	9c06      	ldr	r4, [sp, #24]
 800621e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006222:	f7fa fc97 	bl	8000b54 <__aeabi_d2iz>
 8006226:	4605      	mov	r5, r0
 8006228:	f7fa f97e 	bl	8000528 <__aeabi_i2d>
 800622c:	4602      	mov	r2, r0
 800622e:	460b      	mov	r3, r1
 8006230:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006234:	f7fa f82a 	bl	800028c <__aeabi_dsub>
 8006238:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800623c:	3530      	adds	r5, #48	; 0x30
 800623e:	f804 5b01 	strb.w	r5, [r4], #1
 8006242:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006246:	f7fa fc47 	bl	8000ad8 <__aeabi_dcmplt>
 800624a:	2800      	cmp	r0, #0
 800624c:	f040 831d 	bne.w	800688a <_dtoa_r+0xaea>
 8006250:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006254:	2000      	movs	r0, #0
 8006256:	4937      	ldr	r1, [pc, #220]	; (8006334 <_dtoa_r+0x594>)
 8006258:	f7fa f818 	bl	800028c <__aeabi_dsub>
 800625c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006260:	f7fa fc3a 	bl	8000ad8 <__aeabi_dcmplt>
 8006264:	2800      	cmp	r0, #0
 8006266:	f040 80d1 	bne.w	800640c <_dtoa_r+0x66c>
 800626a:	9b06      	ldr	r3, [sp, #24]
 800626c:	1ae3      	subs	r3, r4, r3
 800626e:	42b3      	cmp	r3, r6
 8006270:	da6a      	bge.n	8006348 <_dtoa_r+0x5a8>
 8006272:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006276:	2200      	movs	r2, #0
 8006278:	4b2f      	ldr	r3, [pc, #188]	; (8006338 <_dtoa_r+0x598>)
 800627a:	f7fa f9bb 	bl	80005f4 <__aeabi_dmul>
 800627e:	2200      	movs	r2, #0
 8006280:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006284:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006288:	4b2b      	ldr	r3, [pc, #172]	; (8006338 <_dtoa_r+0x598>)
 800628a:	f7fa f9b3 	bl	80005f4 <__aeabi_dmul>
 800628e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006292:	e7c4      	b.n	800621e <_dtoa_r+0x47e>
 8006294:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8006298:	4622      	mov	r2, r4
 800629a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800629e:	462b      	mov	r3, r5
 80062a0:	f7fa f9a8 	bl	80005f4 <__aeabi_dmul>
 80062a4:	9b06      	ldr	r3, [sp, #24]
 80062a6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80062aa:	461d      	mov	r5, r3
 80062ac:	199c      	adds	r4, r3, r6
 80062ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80062b2:	f7fa fc4f 	bl	8000b54 <__aeabi_d2iz>
 80062b6:	4606      	mov	r6, r0
 80062b8:	f7fa f936 	bl	8000528 <__aeabi_i2d>
 80062bc:	4602      	mov	r2, r0
 80062be:	460b      	mov	r3, r1
 80062c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80062c4:	f7f9 ffe2 	bl	800028c <__aeabi_dsub>
 80062c8:	3630      	adds	r6, #48	; 0x30
 80062ca:	f805 6b01 	strb.w	r6, [r5], #1
 80062ce:	42ac      	cmp	r4, r5
 80062d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80062d4:	f04f 0200 	mov.w	r2, #0
 80062d8:	d122      	bne.n	8006320 <_dtoa_r+0x580>
 80062da:	4b1a      	ldr	r3, [pc, #104]	; (8006344 <_dtoa_r+0x5a4>)
 80062dc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80062e0:	f7f9 ffd6 	bl	8000290 <__adddf3>
 80062e4:	4602      	mov	r2, r0
 80062e6:	460b      	mov	r3, r1
 80062e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80062ec:	f7fa fc12 	bl	8000b14 <__aeabi_dcmpgt>
 80062f0:	2800      	cmp	r0, #0
 80062f2:	f040 808b 	bne.w	800640c <_dtoa_r+0x66c>
 80062f6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80062fa:	2000      	movs	r0, #0
 80062fc:	4911      	ldr	r1, [pc, #68]	; (8006344 <_dtoa_r+0x5a4>)
 80062fe:	f7f9 ffc5 	bl	800028c <__aeabi_dsub>
 8006302:	4602      	mov	r2, r0
 8006304:	460b      	mov	r3, r1
 8006306:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800630a:	f7fa fbe5 	bl	8000ad8 <__aeabi_dcmplt>
 800630e:	b1d8      	cbz	r0, 8006348 <_dtoa_r+0x5a8>
 8006310:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 8006314:	1e62      	subs	r2, r4, #1
 8006316:	2b30      	cmp	r3, #48	; 0x30
 8006318:	f040 82b7 	bne.w	800688a <_dtoa_r+0xaea>
 800631c:	4614      	mov	r4, r2
 800631e:	e7f7      	b.n	8006310 <_dtoa_r+0x570>
 8006320:	4b05      	ldr	r3, [pc, #20]	; (8006338 <_dtoa_r+0x598>)
 8006322:	f7fa f967 	bl	80005f4 <__aeabi_dmul>
 8006326:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800632a:	e7c0      	b.n	80062ae <_dtoa_r+0x50e>
 800632c:	08007d48 	.word	0x08007d48
 8006330:	08007e10 	.word	0x08007e10
 8006334:	3ff00000 	.word	0x3ff00000
 8006338:	40240000 	.word	0x40240000
 800633c:	401c0000 	.word	0x401c0000
 8006340:	40140000 	.word	0x40140000
 8006344:	3fe00000 	.word	0x3fe00000
 8006348:	e9dd 340e 	ldrd	r3, r4, [sp, #56]	; 0x38
 800634c:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006350:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006352:	2b00      	cmp	r3, #0
 8006354:	db7c      	blt.n	8006450 <_dtoa_r+0x6b0>
 8006356:	f1bb 0f0e 	cmp.w	fp, #14
 800635a:	dc79      	bgt.n	8006450 <_dtoa_r+0x6b0>
 800635c:	4bab      	ldr	r3, [pc, #684]	; (800660c <_dtoa_r+0x86c>)
 800635e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006362:	e9d3 6700 	ldrd	r6, r7, [r3]
 8006366:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006368:	2b00      	cmp	r3, #0
 800636a:	da14      	bge.n	8006396 <_dtoa_r+0x5f6>
 800636c:	9b05      	ldr	r3, [sp, #20]
 800636e:	2b00      	cmp	r3, #0
 8006370:	dc11      	bgt.n	8006396 <_dtoa_r+0x5f6>
 8006372:	f040 816c 	bne.w	800664e <_dtoa_r+0x8ae>
 8006376:	2200      	movs	r2, #0
 8006378:	4ba5      	ldr	r3, [pc, #660]	; (8006610 <_dtoa_r+0x870>)
 800637a:	4630      	mov	r0, r6
 800637c:	4639      	mov	r1, r7
 800637e:	f7fa f939 	bl	80005f4 <__aeabi_dmul>
 8006382:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006386:	f7fa fbbb 	bl	8000b00 <__aeabi_dcmpge>
 800638a:	9d05      	ldr	r5, [sp, #20]
 800638c:	462e      	mov	r6, r5
 800638e:	2800      	cmp	r0, #0
 8006390:	f040 815f 	bne.w	8006652 <_dtoa_r+0x8b2>
 8006394:	e165      	b.n	8006662 <_dtoa_r+0x8c2>
 8006396:	9c06      	ldr	r4, [sp, #24]
 8006398:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800639c:	4632      	mov	r2, r6
 800639e:	463b      	mov	r3, r7
 80063a0:	4640      	mov	r0, r8
 80063a2:	4649      	mov	r1, r9
 80063a4:	f7fa fa50 	bl	8000848 <__aeabi_ddiv>
 80063a8:	f7fa fbd4 	bl	8000b54 <__aeabi_d2iz>
 80063ac:	4605      	mov	r5, r0
 80063ae:	f7fa f8bb 	bl	8000528 <__aeabi_i2d>
 80063b2:	4632      	mov	r2, r6
 80063b4:	463b      	mov	r3, r7
 80063b6:	f7fa f91d 	bl	80005f4 <__aeabi_dmul>
 80063ba:	460b      	mov	r3, r1
 80063bc:	4602      	mov	r2, r0
 80063be:	4649      	mov	r1, r9
 80063c0:	4640      	mov	r0, r8
 80063c2:	f7f9 ff63 	bl	800028c <__aeabi_dsub>
 80063c6:	f105 0e30 	add.w	lr, r5, #48	; 0x30
 80063ca:	9b06      	ldr	r3, [sp, #24]
 80063cc:	f804 eb01 	strb.w	lr, [r4], #1
 80063d0:	ebc3 0e04 	rsb	lr, r3, r4
 80063d4:	9b05      	ldr	r3, [sp, #20]
 80063d6:	4573      	cmp	r3, lr
 80063d8:	d12d      	bne.n	8006436 <_dtoa_r+0x696>
 80063da:	4602      	mov	r2, r0
 80063dc:	460b      	mov	r3, r1
 80063de:	f7f9 ff57 	bl	8000290 <__adddf3>
 80063e2:	4680      	mov	r8, r0
 80063e4:	4689      	mov	r9, r1
 80063e6:	4602      	mov	r2, r0
 80063e8:	460b      	mov	r3, r1
 80063ea:	4630      	mov	r0, r6
 80063ec:	4639      	mov	r1, r7
 80063ee:	f7fa fb73 	bl	8000ad8 <__aeabi_dcmplt>
 80063f2:	b978      	cbnz	r0, 8006414 <_dtoa_r+0x674>
 80063f4:	4642      	mov	r2, r8
 80063f6:	464b      	mov	r3, r9
 80063f8:	4630      	mov	r0, r6
 80063fa:	4639      	mov	r1, r7
 80063fc:	f7fa fb62 	bl	8000ac4 <__aeabi_dcmpeq>
 8006400:	2800      	cmp	r0, #0
 8006402:	f000 8244 	beq.w	800688e <_dtoa_r+0xaee>
 8006406:	07eb      	lsls	r3, r5, #31
 8006408:	d404      	bmi.n	8006414 <_dtoa_r+0x674>
 800640a:	e240      	b.n	800688e <_dtoa_r+0xaee>
 800640c:	f8dd b020 	ldr.w	fp, [sp, #32]
 8006410:	e000      	b.n	8006414 <_dtoa_r+0x674>
 8006412:	461c      	mov	r4, r3
 8006414:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 8006418:	1e63      	subs	r3, r4, #1
 800641a:	2a39      	cmp	r2, #57	; 0x39
 800641c:	d107      	bne.n	800642e <_dtoa_r+0x68e>
 800641e:	9a06      	ldr	r2, [sp, #24]
 8006420:	429a      	cmp	r2, r3
 8006422:	d1f6      	bne.n	8006412 <_dtoa_r+0x672>
 8006424:	9906      	ldr	r1, [sp, #24]
 8006426:	2230      	movs	r2, #48	; 0x30
 8006428:	f10b 0b01 	add.w	fp, fp, #1
 800642c:	700a      	strb	r2, [r1, #0]
 800642e:	781a      	ldrb	r2, [r3, #0]
 8006430:	3201      	adds	r2, #1
 8006432:	701a      	strb	r2, [r3, #0]
 8006434:	e22b      	b.n	800688e <_dtoa_r+0xaee>
 8006436:	2200      	movs	r2, #0
 8006438:	4b76      	ldr	r3, [pc, #472]	; (8006614 <_dtoa_r+0x874>)
 800643a:	f7fa f8db 	bl	80005f4 <__aeabi_dmul>
 800643e:	2200      	movs	r2, #0
 8006440:	2300      	movs	r3, #0
 8006442:	4680      	mov	r8, r0
 8006444:	4689      	mov	r9, r1
 8006446:	f7fa fb3d 	bl	8000ac4 <__aeabi_dcmpeq>
 800644a:	2800      	cmp	r0, #0
 800644c:	d0a6      	beq.n	800639c <_dtoa_r+0x5fc>
 800644e:	e21e      	b.n	800688e <_dtoa_r+0xaee>
 8006450:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006452:	2a00      	cmp	r2, #0
 8006454:	d02b      	beq.n	80064ae <_dtoa_r+0x70e>
 8006456:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006458:	2a01      	cmp	r2, #1
 800645a:	dc0a      	bgt.n	8006472 <_dtoa_r+0x6d2>
 800645c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800645e:	b112      	cbz	r2, 8006466 <_dtoa_r+0x6c6>
 8006460:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006464:	e002      	b.n	800646c <_dtoa_r+0x6cc>
 8006466:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006468:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800646c:	463d      	mov	r5, r7
 800646e:	4644      	mov	r4, r8
 8006470:	e013      	b.n	800649a <_dtoa_r+0x6fa>
 8006472:	9b05      	ldr	r3, [sp, #20]
 8006474:	1e5d      	subs	r5, r3, #1
 8006476:	42af      	cmp	r7, r5
 8006478:	bfbf      	itttt	lt
 800647a:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 800647c:	1bea      	sublt	r2, r5, r7
 800647e:	189b      	addlt	r3, r3, r2
 8006480:	930b      	strlt	r3, [sp, #44]	; 0x2c
 8006482:	9b05      	ldr	r3, [sp, #20]
 8006484:	bfb6      	itet	lt
 8006486:	462f      	movlt	r7, r5
 8006488:	1b7d      	subge	r5, r7, r5
 800648a:	2500      	movlt	r5, #0
 800648c:	2b00      	cmp	r3, #0
 800648e:	bfa7      	ittee	ge
 8006490:	4644      	movge	r4, r8
 8006492:	9b05      	ldrge	r3, [sp, #20]
 8006494:	ebc3 0408 	rsblt	r4, r3, r8
 8006498:	2300      	movlt	r3, #0
 800649a:	9a07      	ldr	r2, [sp, #28]
 800649c:	2101      	movs	r1, #1
 800649e:	441a      	add	r2, r3
 80064a0:	4650      	mov	r0, sl
 80064a2:	4498      	add	r8, r3
 80064a4:	9207      	str	r2, [sp, #28]
 80064a6:	f000 fd2a 	bl	8006efe <__i2b>
 80064aa:	4606      	mov	r6, r0
 80064ac:	e002      	b.n	80064b4 <_dtoa_r+0x714>
 80064ae:	463d      	mov	r5, r7
 80064b0:	4644      	mov	r4, r8
 80064b2:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80064b4:	b15c      	cbz	r4, 80064ce <_dtoa_r+0x72e>
 80064b6:	9b07      	ldr	r3, [sp, #28]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	dd08      	ble.n	80064ce <_dtoa_r+0x72e>
 80064bc:	42a3      	cmp	r3, r4
 80064be:	bfa8      	it	ge
 80064c0:	4623      	movge	r3, r4
 80064c2:	9a07      	ldr	r2, [sp, #28]
 80064c4:	ebc3 0808 	rsb	r8, r3, r8
 80064c8:	1ae4      	subs	r4, r4, r3
 80064ca:	1ad3      	subs	r3, r2, r3
 80064cc:	9307      	str	r3, [sp, #28]
 80064ce:	2f00      	cmp	r7, #0
 80064d0:	dd1d      	ble.n	800650e <_dtoa_r+0x76e>
 80064d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064d4:	b1ab      	cbz	r3, 8006502 <_dtoa_r+0x762>
 80064d6:	b18d      	cbz	r5, 80064fc <_dtoa_r+0x75c>
 80064d8:	4631      	mov	r1, r6
 80064da:	462a      	mov	r2, r5
 80064dc:	4650      	mov	r0, sl
 80064de:	f000 fda7 	bl	8007030 <__pow5mult>
 80064e2:	9a04      	ldr	r2, [sp, #16]
 80064e4:	4601      	mov	r1, r0
 80064e6:	4606      	mov	r6, r0
 80064e8:	4650      	mov	r0, sl
 80064ea:	f000 fd11 	bl	8006f10 <__multiply>
 80064ee:	9904      	ldr	r1, [sp, #16]
 80064f0:	9008      	str	r0, [sp, #32]
 80064f2:	4650      	mov	r0, sl
 80064f4:	f000 fc64 	bl	8006dc0 <_Bfree>
 80064f8:	9b08      	ldr	r3, [sp, #32]
 80064fa:	9304      	str	r3, [sp, #16]
 80064fc:	1b7a      	subs	r2, r7, r5
 80064fe:	d006      	beq.n	800650e <_dtoa_r+0x76e>
 8006500:	e000      	b.n	8006504 <_dtoa_r+0x764>
 8006502:	463a      	mov	r2, r7
 8006504:	9904      	ldr	r1, [sp, #16]
 8006506:	4650      	mov	r0, sl
 8006508:	f000 fd92 	bl	8007030 <__pow5mult>
 800650c:	9004      	str	r0, [sp, #16]
 800650e:	2101      	movs	r1, #1
 8006510:	4650      	mov	r0, sl
 8006512:	f000 fcf4 	bl	8006efe <__i2b>
 8006516:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006518:	4605      	mov	r5, r0
 800651a:	b35b      	cbz	r3, 8006574 <_dtoa_r+0x7d4>
 800651c:	461a      	mov	r2, r3
 800651e:	4601      	mov	r1, r0
 8006520:	4650      	mov	r0, sl
 8006522:	f000 fd85 	bl	8007030 <__pow5mult>
 8006526:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006528:	4605      	mov	r5, r0
 800652a:	2b01      	cmp	r3, #1
 800652c:	dc18      	bgt.n	8006560 <_dtoa_r+0x7c0>
 800652e:	9b02      	ldr	r3, [sp, #8]
 8006530:	b983      	cbnz	r3, 8006554 <_dtoa_r+0x7b4>
 8006532:	9b03      	ldr	r3, [sp, #12]
 8006534:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006538:	b973      	cbnz	r3, 8006558 <_dtoa_r+0x7b8>
 800653a:	9b03      	ldr	r3, [sp, #12]
 800653c:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
 8006540:	0d3f      	lsrs	r7, r7, #20
 8006542:	053f      	lsls	r7, r7, #20
 8006544:	b14f      	cbz	r7, 800655a <_dtoa_r+0x7ba>
 8006546:	9b07      	ldr	r3, [sp, #28]
 8006548:	f108 0801 	add.w	r8, r8, #1
 800654c:	3301      	adds	r3, #1
 800654e:	9307      	str	r3, [sp, #28]
 8006550:	2701      	movs	r7, #1
 8006552:	e002      	b.n	800655a <_dtoa_r+0x7ba>
 8006554:	2700      	movs	r7, #0
 8006556:	e000      	b.n	800655a <_dtoa_r+0x7ba>
 8006558:	9f02      	ldr	r7, [sp, #8]
 800655a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800655c:	b173      	cbz	r3, 800657c <_dtoa_r+0x7dc>
 800655e:	e000      	b.n	8006562 <_dtoa_r+0x7c2>
 8006560:	2700      	movs	r7, #0
 8006562:	692b      	ldr	r3, [r5, #16]
 8006564:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8006568:	6918      	ldr	r0, [r3, #16]
 800656a:	f000 fc7b 	bl	8006e64 <__hi0bits>
 800656e:	f1c0 0020 	rsb	r0, r0, #32
 8006572:	e004      	b.n	800657e <_dtoa_r+0x7de>
 8006574:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006576:	2b01      	cmp	r3, #1
 8006578:	ddd9      	ble.n	800652e <_dtoa_r+0x78e>
 800657a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800657c:	2001      	movs	r0, #1
 800657e:	9b07      	ldr	r3, [sp, #28]
 8006580:	4418      	add	r0, r3
 8006582:	f010 001f 	ands.w	r0, r0, #31
 8006586:	d008      	beq.n	800659a <_dtoa_r+0x7fa>
 8006588:	f1c0 0320 	rsb	r3, r0, #32
 800658c:	2b04      	cmp	r3, #4
 800658e:	dd02      	ble.n	8006596 <_dtoa_r+0x7f6>
 8006590:	f1c0 001c 	rsb	r0, r0, #28
 8006594:	e002      	b.n	800659c <_dtoa_r+0x7fc>
 8006596:	d006      	beq.n	80065a6 <_dtoa_r+0x806>
 8006598:	4618      	mov	r0, r3
 800659a:	301c      	adds	r0, #28
 800659c:	9b07      	ldr	r3, [sp, #28]
 800659e:	4480      	add	r8, r0
 80065a0:	4403      	add	r3, r0
 80065a2:	4404      	add	r4, r0
 80065a4:	9307      	str	r3, [sp, #28]
 80065a6:	f1b8 0f00 	cmp.w	r8, #0
 80065aa:	dd05      	ble.n	80065b8 <_dtoa_r+0x818>
 80065ac:	4642      	mov	r2, r8
 80065ae:	9904      	ldr	r1, [sp, #16]
 80065b0:	4650      	mov	r0, sl
 80065b2:	f000 fd8b 	bl	80070cc <__lshift>
 80065b6:	9004      	str	r0, [sp, #16]
 80065b8:	9b07      	ldr	r3, [sp, #28]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	dd05      	ble.n	80065ca <_dtoa_r+0x82a>
 80065be:	4629      	mov	r1, r5
 80065c0:	461a      	mov	r2, r3
 80065c2:	4650      	mov	r0, sl
 80065c4:	f000 fd82 	bl	80070cc <__lshift>
 80065c8:	4605      	mov	r5, r0
 80065ca:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80065cc:	b323      	cbz	r3, 8006618 <_dtoa_r+0x878>
 80065ce:	4629      	mov	r1, r5
 80065d0:	9804      	ldr	r0, [sp, #16]
 80065d2:	f000 fdcc 	bl	800716e <__mcmp>
 80065d6:	2800      	cmp	r0, #0
 80065d8:	da1e      	bge.n	8006618 <_dtoa_r+0x878>
 80065da:	2300      	movs	r3, #0
 80065dc:	220a      	movs	r2, #10
 80065de:	9904      	ldr	r1, [sp, #16]
 80065e0:	4650      	mov	r0, sl
 80065e2:	f000 fc04 	bl	8006dee <__multadd>
 80065e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065e8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80065ec:	9004      	str	r0, [sp, #16]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	f000 815f 	beq.w	80068b2 <_dtoa_r+0xb12>
 80065f4:	4631      	mov	r1, r6
 80065f6:	2300      	movs	r3, #0
 80065f8:	220a      	movs	r2, #10
 80065fa:	4650      	mov	r0, sl
 80065fc:	f000 fbf7 	bl	8006dee <__multadd>
 8006600:	f1b9 0f00 	cmp.w	r9, #0
 8006604:	4606      	mov	r6, r0
 8006606:	dc3f      	bgt.n	8006688 <_dtoa_r+0x8e8>
 8006608:	e03b      	b.n	8006682 <_dtoa_r+0x8e2>
 800660a:	bf00      	nop
 800660c:	08007d48 	.word	0x08007d48
 8006610:	40140000 	.word	0x40140000
 8006614:	40240000 	.word	0x40240000
 8006618:	9b05      	ldr	r3, [sp, #20]
 800661a:	2b00      	cmp	r3, #0
 800661c:	dc2b      	bgt.n	8006676 <_dtoa_r+0x8d6>
 800661e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006620:	2b02      	cmp	r3, #2
 8006622:	dd28      	ble.n	8006676 <_dtoa_r+0x8d6>
 8006624:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8006628:	f1b9 0f00 	cmp.w	r9, #0
 800662c:	d111      	bne.n	8006652 <_dtoa_r+0x8b2>
 800662e:	4629      	mov	r1, r5
 8006630:	464b      	mov	r3, r9
 8006632:	2205      	movs	r2, #5
 8006634:	4650      	mov	r0, sl
 8006636:	f000 fbda 	bl	8006dee <__multadd>
 800663a:	4601      	mov	r1, r0
 800663c:	4605      	mov	r5, r0
 800663e:	9804      	ldr	r0, [sp, #16]
 8006640:	f000 fd95 	bl	800716e <__mcmp>
 8006644:	2800      	cmp	r0, #0
 8006646:	dc0c      	bgt.n	8006662 <_dtoa_r+0x8c2>
 8006648:	e003      	b.n	8006652 <_dtoa_r+0x8b2>
 800664a:	4635      	mov	r5, r6
 800664c:	e000      	b.n	8006650 <_dtoa_r+0x8b0>
 800664e:	2500      	movs	r5, #0
 8006650:	462e      	mov	r6, r5
 8006652:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006654:	9c06      	ldr	r4, [sp, #24]
 8006656:	ea6f 0b03 	mvn.w	fp, r3
 800665a:	e009      	b.n	8006670 <_dtoa_r+0x8d0>
 800665c:	4635      	mov	r5, r6
 800665e:	f8dd b020 	ldr.w	fp, [sp, #32]
 8006662:	9b06      	ldr	r3, [sp, #24]
 8006664:	9a06      	ldr	r2, [sp, #24]
 8006666:	1c5c      	adds	r4, r3, #1
 8006668:	2331      	movs	r3, #49	; 0x31
 800666a:	7013      	strb	r3, [r2, #0]
 800666c:	f10b 0b01 	add.w	fp, fp, #1
 8006670:	9605      	str	r6, [sp, #20]
 8006672:	2600      	movs	r6, #0
 8006674:	e0f7      	b.n	8006866 <_dtoa_r+0xac6>
 8006676:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006678:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800667c:	b923      	cbnz	r3, 8006688 <_dtoa_r+0x8e8>
 800667e:	9c06      	ldr	r4, [sp, #24]
 8006680:	e0b2      	b.n	80067e8 <_dtoa_r+0xa48>
 8006682:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006684:	2b02      	cmp	r3, #2
 8006686:	dccf      	bgt.n	8006628 <_dtoa_r+0x888>
 8006688:	2c00      	cmp	r4, #0
 800668a:	dd05      	ble.n	8006698 <_dtoa_r+0x8f8>
 800668c:	4631      	mov	r1, r6
 800668e:	4622      	mov	r2, r4
 8006690:	4650      	mov	r0, sl
 8006692:	f000 fd1b 	bl	80070cc <__lshift>
 8006696:	4606      	mov	r6, r0
 8006698:	b19f      	cbz	r7, 80066c2 <_dtoa_r+0x922>
 800669a:	6871      	ldr	r1, [r6, #4]
 800669c:	4650      	mov	r0, sl
 800669e:	f000 fb5a 	bl	8006d56 <_Balloc>
 80066a2:	4604      	mov	r4, r0
 80066a4:	6932      	ldr	r2, [r6, #16]
 80066a6:	f106 010c 	add.w	r1, r6, #12
 80066aa:	3202      	adds	r2, #2
 80066ac:	0092      	lsls	r2, r2, #2
 80066ae:	300c      	adds	r0, #12
 80066b0:	f000 fb44 	bl	8006d3c <memcpy>
 80066b4:	2201      	movs	r2, #1
 80066b6:	4621      	mov	r1, r4
 80066b8:	4650      	mov	r0, sl
 80066ba:	f000 fd07 	bl	80070cc <__lshift>
 80066be:	9005      	str	r0, [sp, #20]
 80066c0:	e000      	b.n	80066c4 <_dtoa_r+0x924>
 80066c2:	9605      	str	r6, [sp, #20]
 80066c4:	9b02      	ldr	r3, [sp, #8]
 80066c6:	9f06      	ldr	r7, [sp, #24]
 80066c8:	f003 0301 	and.w	r3, r3, #1
 80066cc:	9307      	str	r3, [sp, #28]
 80066ce:	4629      	mov	r1, r5
 80066d0:	9804      	ldr	r0, [sp, #16]
 80066d2:	f7ff fad7 	bl	8005c84 <quorem>
 80066d6:	4631      	mov	r1, r6
 80066d8:	4604      	mov	r4, r0
 80066da:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80066de:	9804      	ldr	r0, [sp, #16]
 80066e0:	f000 fd45 	bl	800716e <__mcmp>
 80066e4:	9a05      	ldr	r2, [sp, #20]
 80066e6:	9002      	str	r0, [sp, #8]
 80066e8:	4629      	mov	r1, r5
 80066ea:	4650      	mov	r0, sl
 80066ec:	f000 fd5b 	bl	80071a6 <__mdiff>
 80066f0:	68c3      	ldr	r3, [r0, #12]
 80066f2:	4602      	mov	r2, r0
 80066f4:	b93b      	cbnz	r3, 8006706 <_dtoa_r+0x966>
 80066f6:	4601      	mov	r1, r0
 80066f8:	900a      	str	r0, [sp, #40]	; 0x28
 80066fa:	9804      	ldr	r0, [sp, #16]
 80066fc:	f000 fd37 	bl	800716e <__mcmp>
 8006700:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006702:	4603      	mov	r3, r0
 8006704:	e000      	b.n	8006708 <_dtoa_r+0x968>
 8006706:	2301      	movs	r3, #1
 8006708:	4611      	mov	r1, r2
 800670a:	4650      	mov	r0, sl
 800670c:	930a      	str	r3, [sp, #40]	; 0x28
 800670e:	f000 fb57 	bl	8006dc0 <_Bfree>
 8006712:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006714:	b953      	cbnz	r3, 800672c <_dtoa_r+0x98c>
 8006716:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006718:	b942      	cbnz	r2, 800672c <_dtoa_r+0x98c>
 800671a:	9a07      	ldr	r2, [sp, #28]
 800671c:	b932      	cbnz	r2, 800672c <_dtoa_r+0x98c>
 800671e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006722:	d02a      	beq.n	800677a <_dtoa_r+0x9da>
 8006724:	9b02      	ldr	r3, [sp, #8]
 8006726:	2b00      	cmp	r3, #0
 8006728:	dc1c      	bgt.n	8006764 <_dtoa_r+0x9c4>
 800672a:	e01d      	b.n	8006768 <_dtoa_r+0x9c8>
 800672c:	9a02      	ldr	r2, [sp, #8]
 800672e:	2a00      	cmp	r2, #0
 8006730:	db04      	blt.n	800673c <_dtoa_r+0x99c>
 8006732:	d11b      	bne.n	800676c <_dtoa_r+0x9cc>
 8006734:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006736:	b9ca      	cbnz	r2, 800676c <_dtoa_r+0x9cc>
 8006738:	9a07      	ldr	r2, [sp, #28]
 800673a:	b9ba      	cbnz	r2, 800676c <_dtoa_r+0x9cc>
 800673c:	2b00      	cmp	r3, #0
 800673e:	dd13      	ble.n	8006768 <_dtoa_r+0x9c8>
 8006740:	2201      	movs	r2, #1
 8006742:	9904      	ldr	r1, [sp, #16]
 8006744:	4650      	mov	r0, sl
 8006746:	f000 fcc1 	bl	80070cc <__lshift>
 800674a:	4629      	mov	r1, r5
 800674c:	9004      	str	r0, [sp, #16]
 800674e:	f000 fd0e 	bl	800716e <__mcmp>
 8006752:	2800      	cmp	r0, #0
 8006754:	dc03      	bgt.n	800675e <_dtoa_r+0x9be>
 8006756:	d107      	bne.n	8006768 <_dtoa_r+0x9c8>
 8006758:	f018 0f01 	tst.w	r8, #1
 800675c:	d004      	beq.n	8006768 <_dtoa_r+0x9c8>
 800675e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006762:	d00a      	beq.n	800677a <_dtoa_r+0x9da>
 8006764:	f104 0831 	add.w	r8, r4, #49	; 0x31
 8006768:	1c7c      	adds	r4, r7, #1
 800676a:	e00c      	b.n	8006786 <_dtoa_r+0x9e6>
 800676c:	2b00      	cmp	r3, #0
 800676e:	f107 0401 	add.w	r4, r7, #1
 8006772:	dd0b      	ble.n	800678c <_dtoa_r+0x9ec>
 8006774:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006778:	d103      	bne.n	8006782 <_dtoa_r+0x9e2>
 800677a:	2339      	movs	r3, #57	; 0x39
 800677c:	703b      	strb	r3, [r7, #0]
 800677e:	3701      	adds	r7, #1
 8006780:	e056      	b.n	8006830 <_dtoa_r+0xa90>
 8006782:	f108 0801 	add.w	r8, r8, #1
 8006786:	f887 8000 	strb.w	r8, [r7]
 800678a:	e06c      	b.n	8006866 <_dtoa_r+0xac6>
 800678c:	9b06      	ldr	r3, [sp, #24]
 800678e:	4627      	mov	r7, r4
 8006790:	1ae3      	subs	r3, r4, r3
 8006792:	454b      	cmp	r3, r9
 8006794:	f804 8c01 	strb.w	r8, [r4, #-1]
 8006798:	d03b      	beq.n	8006812 <_dtoa_r+0xa72>
 800679a:	2300      	movs	r3, #0
 800679c:	220a      	movs	r2, #10
 800679e:	9904      	ldr	r1, [sp, #16]
 80067a0:	4650      	mov	r0, sl
 80067a2:	f000 fb24 	bl	8006dee <__multadd>
 80067a6:	9b05      	ldr	r3, [sp, #20]
 80067a8:	9004      	str	r0, [sp, #16]
 80067aa:	429e      	cmp	r6, r3
 80067ac:	f04f 020a 	mov.w	r2, #10
 80067b0:	f04f 0300 	mov.w	r3, #0
 80067b4:	4631      	mov	r1, r6
 80067b6:	4650      	mov	r0, sl
 80067b8:	d104      	bne.n	80067c4 <_dtoa_r+0xa24>
 80067ba:	f000 fb18 	bl	8006dee <__multadd>
 80067be:	4606      	mov	r6, r0
 80067c0:	9005      	str	r0, [sp, #20]
 80067c2:	e784      	b.n	80066ce <_dtoa_r+0x92e>
 80067c4:	f000 fb13 	bl	8006dee <__multadd>
 80067c8:	2300      	movs	r3, #0
 80067ca:	4606      	mov	r6, r0
 80067cc:	220a      	movs	r2, #10
 80067ce:	9905      	ldr	r1, [sp, #20]
 80067d0:	4650      	mov	r0, sl
 80067d2:	f000 fb0c 	bl	8006dee <__multadd>
 80067d6:	9005      	str	r0, [sp, #20]
 80067d8:	e779      	b.n	80066ce <_dtoa_r+0x92e>
 80067da:	2300      	movs	r3, #0
 80067dc:	220a      	movs	r2, #10
 80067de:	9904      	ldr	r1, [sp, #16]
 80067e0:	4650      	mov	r0, sl
 80067e2:	f000 fb04 	bl	8006dee <__multadd>
 80067e6:	9004      	str	r0, [sp, #16]
 80067e8:	4629      	mov	r1, r5
 80067ea:	9804      	ldr	r0, [sp, #16]
 80067ec:	f7ff fa4a 	bl	8005c84 <quorem>
 80067f0:	9b06      	ldr	r3, [sp, #24]
 80067f2:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80067f6:	f804 8b01 	strb.w	r8, [r4], #1
 80067fa:	1ae3      	subs	r3, r4, r3
 80067fc:	454b      	cmp	r3, r9
 80067fe:	dbec      	blt.n	80067da <_dtoa_r+0xa3a>
 8006800:	9b06      	ldr	r3, [sp, #24]
 8006802:	9605      	str	r6, [sp, #20]
 8006804:	f1b9 0f01 	cmp.w	r9, #1
 8006808:	bfac      	ite	ge
 800680a:	444b      	addge	r3, r9
 800680c:	3301      	addlt	r3, #1
 800680e:	461f      	mov	r7, r3
 8006810:	2600      	movs	r6, #0
 8006812:	2201      	movs	r2, #1
 8006814:	9904      	ldr	r1, [sp, #16]
 8006816:	4650      	mov	r0, sl
 8006818:	f000 fc58 	bl	80070cc <__lshift>
 800681c:	4629      	mov	r1, r5
 800681e:	9004      	str	r0, [sp, #16]
 8006820:	f000 fca5 	bl	800716e <__mcmp>
 8006824:	2800      	cmp	r0, #0
 8006826:	dc03      	bgt.n	8006830 <_dtoa_r+0xa90>
 8006828:	d115      	bne.n	8006856 <_dtoa_r+0xab6>
 800682a:	f018 0f01 	tst.w	r8, #1
 800682e:	d012      	beq.n	8006856 <_dtoa_r+0xab6>
 8006830:	463c      	mov	r4, r7
 8006832:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 8006836:	1e62      	subs	r2, r4, #1
 8006838:	2b39      	cmp	r3, #57	; 0x39
 800683a:	d109      	bne.n	8006850 <_dtoa_r+0xab0>
 800683c:	9b06      	ldr	r3, [sp, #24]
 800683e:	4293      	cmp	r3, r2
 8006840:	d104      	bne.n	800684c <_dtoa_r+0xaac>
 8006842:	f10b 0b01 	add.w	fp, fp, #1
 8006846:	2331      	movs	r3, #49	; 0x31
 8006848:	9a06      	ldr	r2, [sp, #24]
 800684a:	e002      	b.n	8006852 <_dtoa_r+0xab2>
 800684c:	4614      	mov	r4, r2
 800684e:	e7f0      	b.n	8006832 <_dtoa_r+0xa92>
 8006850:	3301      	adds	r3, #1
 8006852:	7013      	strb	r3, [r2, #0]
 8006854:	e007      	b.n	8006866 <_dtoa_r+0xac6>
 8006856:	463c      	mov	r4, r7
 8006858:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 800685c:	1e62      	subs	r2, r4, #1
 800685e:	2b30      	cmp	r3, #48	; 0x30
 8006860:	d101      	bne.n	8006866 <_dtoa_r+0xac6>
 8006862:	4614      	mov	r4, r2
 8006864:	e7f8      	b.n	8006858 <_dtoa_r+0xab8>
 8006866:	4629      	mov	r1, r5
 8006868:	4650      	mov	r0, sl
 800686a:	f000 faa9 	bl	8006dc0 <_Bfree>
 800686e:	9b05      	ldr	r3, [sp, #20]
 8006870:	b16b      	cbz	r3, 800688e <_dtoa_r+0xaee>
 8006872:	b12e      	cbz	r6, 8006880 <_dtoa_r+0xae0>
 8006874:	429e      	cmp	r6, r3
 8006876:	d003      	beq.n	8006880 <_dtoa_r+0xae0>
 8006878:	4631      	mov	r1, r6
 800687a:	4650      	mov	r0, sl
 800687c:	f000 faa0 	bl	8006dc0 <_Bfree>
 8006880:	9905      	ldr	r1, [sp, #20]
 8006882:	4650      	mov	r0, sl
 8006884:	f000 fa9c 	bl	8006dc0 <_Bfree>
 8006888:	e001      	b.n	800688e <_dtoa_r+0xaee>
 800688a:	f8dd b020 	ldr.w	fp, [sp, #32]
 800688e:	9904      	ldr	r1, [sp, #16]
 8006890:	4650      	mov	r0, sl
 8006892:	f000 fa95 	bl	8006dc0 <_Bfree>
 8006896:	2300      	movs	r3, #0
 8006898:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800689a:	7023      	strb	r3, [r4, #0]
 800689c:	f10b 0301 	add.w	r3, fp, #1
 80068a0:	6013      	str	r3, [r2, #0]
 80068a2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80068a4:	b11b      	cbz	r3, 80068ae <_dtoa_r+0xb0e>
 80068a6:	601c      	str	r4, [r3, #0]
 80068a8:	e001      	b.n	80068ae <_dtoa_r+0xb0e>
 80068aa:	4808      	ldr	r0, [pc, #32]	; (80068cc <_dtoa_r+0xb2c>)
 80068ac:	e00a      	b.n	80068c4 <_dtoa_r+0xb24>
 80068ae:	9806      	ldr	r0, [sp, #24]
 80068b0:	e008      	b.n	80068c4 <_dtoa_r+0xb24>
 80068b2:	f1b9 0f00 	cmp.w	r9, #0
 80068b6:	f73f aee2 	bgt.w	800667e <_dtoa_r+0x8de>
 80068ba:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80068bc:	2b02      	cmp	r3, #2
 80068be:	f77f aede 	ble.w	800667e <_dtoa_r+0x8de>
 80068c2:	e6b1      	b.n	8006628 <_dtoa_r+0x888>
 80068c4:	b015      	add	sp, #84	; 0x54
 80068c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068ca:	bf00      	nop
 80068cc:	08007d1c 	.word	0x08007d1c

080068d0 <_localeconv_r>:
 80068d0:	4800      	ldr	r0, [pc, #0]	; (80068d4 <_localeconv_r+0x4>)
 80068d2:	4770      	bx	lr
 80068d4:	200000f4 	.word	0x200000f4

080068d8 <malloc>:
 80068d8:	4b02      	ldr	r3, [pc, #8]	; (80068e4 <malloc+0xc>)
 80068da:	4601      	mov	r1, r0
 80068dc:	6818      	ldr	r0, [r3, #0]
 80068de:	f000 b803 	b.w	80068e8 <_malloc_r>
 80068e2:	bf00      	nop
 80068e4:	200000f0 	.word	0x200000f0

080068e8 <_malloc_r>:
 80068e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068ec:	f101 040b 	add.w	r4, r1, #11
 80068f0:	2c16      	cmp	r4, #22
 80068f2:	b085      	sub	sp, #20
 80068f4:	4681      	mov	r9, r0
 80068f6:	d903      	bls.n	8006900 <_malloc_r+0x18>
 80068f8:	f034 0407 	bics.w	r4, r4, #7
 80068fc:	d501      	bpl.n	8006902 <_malloc_r+0x1a>
 80068fe:	e002      	b.n	8006906 <_malloc_r+0x1e>
 8006900:	2410      	movs	r4, #16
 8006902:	428c      	cmp	r4, r1
 8006904:	d203      	bcs.n	800690e <_malloc_r+0x26>
 8006906:	230c      	movs	r3, #12
 8006908:	f8c9 3000 	str.w	r3, [r9]
 800690c:	e1e7      	b.n	8006cde <_malloc_r+0x3f6>
 800690e:	4648      	mov	r0, r9
 8006910:	f000 fa1f 	bl	8006d52 <__malloc_lock>
 8006914:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 8006918:	4d9d      	ldr	r5, [pc, #628]	; (8006b90 <_malloc_r+0x2a8>)
 800691a:	d217      	bcs.n	800694c <_malloc_r+0x64>
 800691c:	f104 0208 	add.w	r2, r4, #8
 8006920:	442a      	add	r2, r5
 8006922:	6856      	ldr	r6, [r2, #4]
 8006924:	f1a2 0108 	sub.w	r1, r2, #8
 8006928:	428e      	cmp	r6, r1
 800692a:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 800692e:	d102      	bne.n	8006936 <_malloc_r+0x4e>
 8006930:	68d6      	ldr	r6, [r2, #12]
 8006932:	42b2      	cmp	r2, r6
 8006934:	d008      	beq.n	8006948 <_malloc_r+0x60>
 8006936:	6873      	ldr	r3, [r6, #4]
 8006938:	68f2      	ldr	r2, [r6, #12]
 800693a:	68b1      	ldr	r1, [r6, #8]
 800693c:	f023 0303 	bic.w	r3, r3, #3
 8006940:	60ca      	str	r2, [r1, #12]
 8006942:	4433      	add	r3, r6
 8006944:	6091      	str	r1, [r2, #8]
 8006946:	e02f      	b.n	80069a8 <_malloc_r+0xc0>
 8006948:	3302      	adds	r3, #2
 800694a:	e03d      	b.n	80069c8 <_malloc_r+0xe0>
 800694c:	0a63      	lsrs	r3, r4, #9
 800694e:	d01a      	beq.n	8006986 <_malloc_r+0x9e>
 8006950:	2b04      	cmp	r3, #4
 8006952:	d802      	bhi.n	800695a <_malloc_r+0x72>
 8006954:	09a3      	lsrs	r3, r4, #6
 8006956:	3338      	adds	r3, #56	; 0x38
 8006958:	e018      	b.n	800698c <_malloc_r+0xa4>
 800695a:	2b14      	cmp	r3, #20
 800695c:	d801      	bhi.n	8006962 <_malloc_r+0x7a>
 800695e:	335b      	adds	r3, #91	; 0x5b
 8006960:	e014      	b.n	800698c <_malloc_r+0xa4>
 8006962:	2b54      	cmp	r3, #84	; 0x54
 8006964:	d802      	bhi.n	800696c <_malloc_r+0x84>
 8006966:	0b23      	lsrs	r3, r4, #12
 8006968:	336e      	adds	r3, #110	; 0x6e
 800696a:	e00f      	b.n	800698c <_malloc_r+0xa4>
 800696c:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8006970:	d802      	bhi.n	8006978 <_malloc_r+0x90>
 8006972:	0be3      	lsrs	r3, r4, #15
 8006974:	3377      	adds	r3, #119	; 0x77
 8006976:	e009      	b.n	800698c <_malloc_r+0xa4>
 8006978:	f240 5254 	movw	r2, #1364	; 0x554
 800697c:	4293      	cmp	r3, r2
 800697e:	d804      	bhi.n	800698a <_malloc_r+0xa2>
 8006980:	0ca3      	lsrs	r3, r4, #18
 8006982:	337c      	adds	r3, #124	; 0x7c
 8006984:	e002      	b.n	800698c <_malloc_r+0xa4>
 8006986:	233f      	movs	r3, #63	; 0x3f
 8006988:	e000      	b.n	800698c <_malloc_r+0xa4>
 800698a:	237e      	movs	r3, #126	; 0x7e
 800698c:	1c5a      	adds	r2, r3, #1
 800698e:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8006992:	f1a2 0008 	sub.w	r0, r2, #8
 8006996:	6856      	ldr	r6, [r2, #4]
 8006998:	e00c      	b.n	80069b4 <_malloc_r+0xcc>
 800699a:	2900      	cmp	r1, #0
 800699c:	68f1      	ldr	r1, [r6, #12]
 800699e:	db08      	blt.n	80069b2 <_malloc_r+0xca>
 80069a0:	68b3      	ldr	r3, [r6, #8]
 80069a2:	60d9      	str	r1, [r3, #12]
 80069a4:	608b      	str	r3, [r1, #8]
 80069a6:	18b3      	adds	r3, r6, r2
 80069a8:	685a      	ldr	r2, [r3, #4]
 80069aa:	f042 0201 	orr.w	r2, r2, #1
 80069ae:	605a      	str	r2, [r3, #4]
 80069b0:	e1a0      	b.n	8006cf4 <_malloc_r+0x40c>
 80069b2:	460e      	mov	r6, r1
 80069b4:	4286      	cmp	r6, r0
 80069b6:	d006      	beq.n	80069c6 <_malloc_r+0xde>
 80069b8:	6872      	ldr	r2, [r6, #4]
 80069ba:	f022 0203 	bic.w	r2, r2, #3
 80069be:	1b11      	subs	r1, r2, r4
 80069c0:	290f      	cmp	r1, #15
 80069c2:	ddea      	ble.n	800699a <_malloc_r+0xb2>
 80069c4:	3b01      	subs	r3, #1
 80069c6:	3301      	adds	r3, #1
 80069c8:	4a71      	ldr	r2, [pc, #452]	; (8006b90 <_malloc_r+0x2a8>)
 80069ca:	692e      	ldr	r6, [r5, #16]
 80069cc:	f102 0708 	add.w	r7, r2, #8
 80069d0:	42be      	cmp	r6, r7
 80069d2:	4639      	mov	r1, r7
 80069d4:	d079      	beq.n	8006aca <_malloc_r+0x1e2>
 80069d6:	6870      	ldr	r0, [r6, #4]
 80069d8:	f020 0003 	bic.w	r0, r0, #3
 80069dc:	ebc4 0e00 	rsb	lr, r4, r0
 80069e0:	f1be 0f0f 	cmp.w	lr, #15
 80069e4:	dd0d      	ble.n	8006a02 <_malloc_r+0x11a>
 80069e6:	1933      	adds	r3, r6, r4
 80069e8:	f044 0401 	orr.w	r4, r4, #1
 80069ec:	6074      	str	r4, [r6, #4]
 80069ee:	6153      	str	r3, [r2, #20]
 80069f0:	6113      	str	r3, [r2, #16]
 80069f2:	f04e 0201 	orr.w	r2, lr, #1
 80069f6:	60df      	str	r7, [r3, #12]
 80069f8:	609f      	str	r7, [r3, #8]
 80069fa:	605a      	str	r2, [r3, #4]
 80069fc:	f843 e00e 	str.w	lr, [r3, lr]
 8006a00:	e178      	b.n	8006cf4 <_malloc_r+0x40c>
 8006a02:	f1be 0f00 	cmp.w	lr, #0
 8006a06:	6157      	str	r7, [r2, #20]
 8006a08:	6117      	str	r7, [r2, #16]
 8006a0a:	db05      	blt.n	8006a18 <_malloc_r+0x130>
 8006a0c:	4430      	add	r0, r6
 8006a0e:	6843      	ldr	r3, [r0, #4]
 8006a10:	f043 0301 	orr.w	r3, r3, #1
 8006a14:	6043      	str	r3, [r0, #4]
 8006a16:	e16d      	b.n	8006cf4 <_malloc_r+0x40c>
 8006a18:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8006a1c:	d215      	bcs.n	8006a4a <_malloc_r+0x162>
 8006a1e:	08c0      	lsrs	r0, r0, #3
 8006a20:	ea4f 0ea0 	mov.w	lr, r0, asr #2
 8006a24:	2701      	movs	r7, #1
 8006a26:	fa07 fe0e 	lsl.w	lr, r7, lr
 8006a2a:	6857      	ldr	r7, [r2, #4]
 8006a2c:	3001      	adds	r0, #1
 8006a2e:	ea4e 0707 	orr.w	r7, lr, r7
 8006a32:	6057      	str	r7, [r2, #4]
 8006a34:	f852 e030 	ldr.w	lr, [r2, r0, lsl #3]
 8006a38:	eb02 07c0 	add.w	r7, r2, r0, lsl #3
 8006a3c:	3f08      	subs	r7, #8
 8006a3e:	60f7      	str	r7, [r6, #12]
 8006a40:	f8c6 e008 	str.w	lr, [r6, #8]
 8006a44:	f842 6030 	str.w	r6, [r2, r0, lsl #3]
 8006a48:	e03d      	b.n	8006ac6 <_malloc_r+0x1de>
 8006a4a:	0a42      	lsrs	r2, r0, #9
 8006a4c:	2a04      	cmp	r2, #4
 8006a4e:	d802      	bhi.n	8006a56 <_malloc_r+0x16e>
 8006a50:	0982      	lsrs	r2, r0, #6
 8006a52:	3238      	adds	r2, #56	; 0x38
 8006a54:	e015      	b.n	8006a82 <_malloc_r+0x19a>
 8006a56:	2a14      	cmp	r2, #20
 8006a58:	d801      	bhi.n	8006a5e <_malloc_r+0x176>
 8006a5a:	325b      	adds	r2, #91	; 0x5b
 8006a5c:	e011      	b.n	8006a82 <_malloc_r+0x19a>
 8006a5e:	2a54      	cmp	r2, #84	; 0x54
 8006a60:	d802      	bhi.n	8006a68 <_malloc_r+0x180>
 8006a62:	0b02      	lsrs	r2, r0, #12
 8006a64:	326e      	adds	r2, #110	; 0x6e
 8006a66:	e00c      	b.n	8006a82 <_malloc_r+0x19a>
 8006a68:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8006a6c:	d802      	bhi.n	8006a74 <_malloc_r+0x18c>
 8006a6e:	0bc2      	lsrs	r2, r0, #15
 8006a70:	3277      	adds	r2, #119	; 0x77
 8006a72:	e006      	b.n	8006a82 <_malloc_r+0x19a>
 8006a74:	f240 5754 	movw	r7, #1364	; 0x554
 8006a78:	42ba      	cmp	r2, r7
 8006a7a:	bf9a      	itte	ls
 8006a7c:	0c82      	lsrls	r2, r0, #18
 8006a7e:	327c      	addls	r2, #124	; 0x7c
 8006a80:	227e      	movhi	r2, #126	; 0x7e
 8006a82:	1c57      	adds	r7, r2, #1
 8006a84:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 8006a88:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 8006a8c:	45be      	cmp	lr, r7
 8006a8e:	f8df c100 	ldr.w	ip, [pc, #256]	; 8006b90 <_malloc_r+0x2a8>
 8006a92:	d10d      	bne.n	8006ab0 <_malloc_r+0x1c8>
 8006a94:	2001      	movs	r0, #1
 8006a96:	1092      	asrs	r2, r2, #2
 8006a98:	fa00 f202 	lsl.w	r2, r0, r2
 8006a9c:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8006aa0:	4310      	orrs	r0, r2
 8006aa2:	f8cc 0004 	str.w	r0, [ip, #4]
 8006aa6:	4672      	mov	r2, lr
 8006aa8:	e009      	b.n	8006abe <_malloc_r+0x1d6>
 8006aaa:	68bf      	ldr	r7, [r7, #8]
 8006aac:	45be      	cmp	lr, r7
 8006aae:	d004      	beq.n	8006aba <_malloc_r+0x1d2>
 8006ab0:	687a      	ldr	r2, [r7, #4]
 8006ab2:	f022 0203 	bic.w	r2, r2, #3
 8006ab6:	4290      	cmp	r0, r2
 8006ab8:	d3f7      	bcc.n	8006aaa <_malloc_r+0x1c2>
 8006aba:	46be      	mov	lr, r7
 8006abc:	68fa      	ldr	r2, [r7, #12]
 8006abe:	60f2      	str	r2, [r6, #12]
 8006ac0:	f8c6 e008 	str.w	lr, [r6, #8]
 8006ac4:	6096      	str	r6, [r2, #8]
 8006ac6:	f8ce 600c 	str.w	r6, [lr, #12]
 8006aca:	2001      	movs	r0, #1
 8006acc:	109a      	asrs	r2, r3, #2
 8006ace:	fa00 f202 	lsl.w	r2, r0, r2
 8006ad2:	6868      	ldr	r0, [r5, #4]
 8006ad4:	4282      	cmp	r2, r0
 8006ad6:	d85d      	bhi.n	8006b94 <_malloc_r+0x2ac>
 8006ad8:	4202      	tst	r2, r0
 8006ada:	d106      	bne.n	8006aea <_malloc_r+0x202>
 8006adc:	f023 0303 	bic.w	r3, r3, #3
 8006ae0:	0052      	lsls	r2, r2, #1
 8006ae2:	4202      	tst	r2, r0
 8006ae4:	f103 0304 	add.w	r3, r3, #4
 8006ae8:	d0fa      	beq.n	8006ae0 <_malloc_r+0x1f8>
 8006aea:	eb05 08c3 	add.w	r8, r5, r3, lsl #3
 8006aee:	46c2      	mov	sl, r8
 8006af0:	469c      	mov	ip, r3
 8006af2:	f8da 600c 	ldr.w	r6, [sl, #12]
 8006af6:	4556      	cmp	r6, sl
 8006af8:	d02c      	beq.n	8006b54 <_malloc_r+0x26c>
 8006afa:	6870      	ldr	r0, [r6, #4]
 8006afc:	68f7      	ldr	r7, [r6, #12]
 8006afe:	f020 0003 	bic.w	r0, r0, #3
 8006b02:	ebc4 0e00 	rsb	lr, r4, r0
 8006b06:	f1be 0f0f 	cmp.w	lr, #15
 8006b0a:	dd11      	ble.n	8006b30 <_malloc_r+0x248>
 8006b0c:	1933      	adds	r3, r6, r4
 8006b0e:	f044 0401 	orr.w	r4, r4, #1
 8006b12:	6074      	str	r4, [r6, #4]
 8006b14:	f856 2f08 	ldr.w	r2, [r6, #8]!
 8006b18:	60d7      	str	r7, [r2, #12]
 8006b1a:	60ba      	str	r2, [r7, #8]
 8006b1c:	f04e 0201 	orr.w	r2, lr, #1
 8006b20:	616b      	str	r3, [r5, #20]
 8006b22:	612b      	str	r3, [r5, #16]
 8006b24:	60d9      	str	r1, [r3, #12]
 8006b26:	6099      	str	r1, [r3, #8]
 8006b28:	605a      	str	r2, [r3, #4]
 8006b2a:	f843 e00e 	str.w	lr, [r3, lr]
 8006b2e:	e00b      	b.n	8006b48 <_malloc_r+0x260>
 8006b30:	f1be 0f00 	cmp.w	lr, #0
 8006b34:	db0c      	blt.n	8006b50 <_malloc_r+0x268>
 8006b36:	1833      	adds	r3, r6, r0
 8006b38:	685a      	ldr	r2, [r3, #4]
 8006b3a:	f042 0201 	orr.w	r2, r2, #1
 8006b3e:	605a      	str	r2, [r3, #4]
 8006b40:	f856 3f08 	ldr.w	r3, [r6, #8]!
 8006b44:	60df      	str	r7, [r3, #12]
 8006b46:	60bb      	str	r3, [r7, #8]
 8006b48:	4648      	mov	r0, r9
 8006b4a:	f000 f903 	bl	8006d54 <__malloc_unlock>
 8006b4e:	e0d5      	b.n	8006cfc <_malloc_r+0x414>
 8006b50:	463e      	mov	r6, r7
 8006b52:	e7d0      	b.n	8006af6 <_malloc_r+0x20e>
 8006b54:	f10c 0c01 	add.w	ip, ip, #1
 8006b58:	f01c 0f03 	tst.w	ip, #3
 8006b5c:	f10a 0a08 	add.w	sl, sl, #8
 8006b60:	d1c7      	bne.n	8006af2 <_malloc_r+0x20a>
 8006b62:	0798      	lsls	r0, r3, #30
 8006b64:	d104      	bne.n	8006b70 <_malloc_r+0x288>
 8006b66:	686b      	ldr	r3, [r5, #4]
 8006b68:	ea23 0302 	bic.w	r3, r3, r2
 8006b6c:	606b      	str	r3, [r5, #4]
 8006b6e:	e004      	b.n	8006b7a <_malloc_r+0x292>
 8006b70:	f858 0908 	ldr.w	r0, [r8], #-8
 8006b74:	3b01      	subs	r3, #1
 8006b76:	4580      	cmp	r8, r0
 8006b78:	d0f3      	beq.n	8006b62 <_malloc_r+0x27a>
 8006b7a:	6868      	ldr	r0, [r5, #4]
 8006b7c:	0052      	lsls	r2, r2, #1
 8006b7e:	4282      	cmp	r2, r0
 8006b80:	d808      	bhi.n	8006b94 <_malloc_r+0x2ac>
 8006b82:	b13a      	cbz	r2, 8006b94 <_malloc_r+0x2ac>
 8006b84:	4663      	mov	r3, ip
 8006b86:	4202      	tst	r2, r0
 8006b88:	d1af      	bne.n	8006aea <_malloc_r+0x202>
 8006b8a:	3304      	adds	r3, #4
 8006b8c:	0052      	lsls	r2, r2, #1
 8006b8e:	e7fa      	b.n	8006b86 <_malloc_r+0x29e>
 8006b90:	2000012c 	.word	0x2000012c
 8006b94:	f8d5 b008 	ldr.w	fp, [r5, #8]
 8006b98:	f8db 6004 	ldr.w	r6, [fp, #4]
 8006b9c:	f026 0603 	bic.w	r6, r6, #3
 8006ba0:	42b4      	cmp	r4, r6
 8006ba2:	d803      	bhi.n	8006bac <_malloc_r+0x2c4>
 8006ba4:	1b33      	subs	r3, r6, r4
 8006ba6:	2b0f      	cmp	r3, #15
 8006ba8:	f300 809b 	bgt.w	8006ce2 <_malloc_r+0x3fa>
 8006bac:	4a55      	ldr	r2, [pc, #340]	; (8006d04 <_malloc_r+0x41c>)
 8006bae:	4956      	ldr	r1, [pc, #344]	; (8006d08 <_malloc_r+0x420>)
 8006bb0:	6812      	ldr	r2, [r2, #0]
 8006bb2:	6808      	ldr	r0, [r1, #0]
 8006bb4:	f102 0810 	add.w	r8, r2, #16
 8006bb8:	4a54      	ldr	r2, [pc, #336]	; (8006d0c <_malloc_r+0x424>)
 8006bba:	3001      	adds	r0, #1
 8006bbc:	9101      	str	r1, [sp, #4]
 8006bbe:	44a0      	add	r8, r4
 8006bc0:	bf1f      	itttt	ne
 8006bc2:	f102 31ff 	addne.w	r1, r2, #4294967295
 8006bc6:	4488      	addne	r8, r1
 8006bc8:	4251      	negne	r1, r2
 8006bca:	ea01 0808 	andne.w	r8, r1, r8
 8006bce:	eb0b 0306 	add.w	r3, fp, r6
 8006bd2:	4641      	mov	r1, r8
 8006bd4:	4648      	mov	r0, r9
 8006bd6:	9203      	str	r2, [sp, #12]
 8006bd8:	9302      	str	r3, [sp, #8]
 8006bda:	f000 fb91 	bl	8007300 <_sbrk_r>
 8006bde:	1c42      	adds	r2, r0, #1
 8006be0:	4607      	mov	r7, r0
 8006be2:	d06f      	beq.n	8006cc4 <_malloc_r+0x3dc>
 8006be4:	9b02      	ldr	r3, [sp, #8]
 8006be6:	9a03      	ldr	r2, [sp, #12]
 8006be8:	4283      	cmp	r3, r0
 8006bea:	d901      	bls.n	8006bf0 <_malloc_r+0x308>
 8006bec:	45ab      	cmp	fp, r5
 8006bee:	d169      	bne.n	8006cc4 <_malloc_r+0x3dc>
 8006bf0:	f8df a124 	ldr.w	sl, [pc, #292]	; 8006d18 <_malloc_r+0x430>
 8006bf4:	42bb      	cmp	r3, r7
 8006bf6:	f8da 0000 	ldr.w	r0, [sl]
 8006bfa:	f8df c120 	ldr.w	ip, [pc, #288]	; 8006d1c <_malloc_r+0x434>
 8006bfe:	4440      	add	r0, r8
 8006c00:	f8ca 0000 	str.w	r0, [sl]
 8006c04:	d108      	bne.n	8006c18 <_malloc_r+0x330>
 8006c06:	ea13 0f0c 	tst.w	r3, ip
 8006c0a:	d105      	bne.n	8006c18 <_malloc_r+0x330>
 8006c0c:	68ab      	ldr	r3, [r5, #8]
 8006c0e:	4446      	add	r6, r8
 8006c10:	f046 0601 	orr.w	r6, r6, #1
 8006c14:	605e      	str	r6, [r3, #4]
 8006c16:	e049      	b.n	8006cac <_malloc_r+0x3c4>
 8006c18:	9901      	ldr	r1, [sp, #4]
 8006c1a:	f8d1 e000 	ldr.w	lr, [r1]
 8006c1e:	f1be 3fff 	cmp.w	lr, #4294967295
 8006c22:	bf15      	itete	ne
 8006c24:	1afb      	subne	r3, r7, r3
 8006c26:	4b38      	ldreq	r3, [pc, #224]	; (8006d08 <_malloc_r+0x420>)
 8006c28:	181b      	addne	r3, r3, r0
 8006c2a:	601f      	streq	r7, [r3, #0]
 8006c2c:	bf18      	it	ne
 8006c2e:	f8ca 3000 	strne.w	r3, [sl]
 8006c32:	f017 0307 	ands.w	r3, r7, #7
 8006c36:	bf1c      	itt	ne
 8006c38:	f1c3 0308 	rsbne	r3, r3, #8
 8006c3c:	18ff      	addne	r7, r7, r3
 8006c3e:	44b8      	add	r8, r7
 8006c40:	441a      	add	r2, r3
 8006c42:	ea08 080c 	and.w	r8, r8, ip
 8006c46:	ebc8 0802 	rsb	r8, r8, r2
 8006c4a:	4641      	mov	r1, r8
 8006c4c:	4648      	mov	r0, r9
 8006c4e:	f000 fb57 	bl	8007300 <_sbrk_r>
 8006c52:	1c43      	adds	r3, r0, #1
 8006c54:	bf04      	itt	eq
 8006c56:	4638      	moveq	r0, r7
 8006c58:	f04f 0800 	moveq.w	r8, #0
 8006c5c:	f8da 3000 	ldr.w	r3, [sl]
 8006c60:	1bc2      	subs	r2, r0, r7
 8006c62:	4442      	add	r2, r8
 8006c64:	4443      	add	r3, r8
 8006c66:	f042 0201 	orr.w	r2, r2, #1
 8006c6a:	45ab      	cmp	fp, r5
 8006c6c:	60af      	str	r7, [r5, #8]
 8006c6e:	f8ca 3000 	str.w	r3, [sl]
 8006c72:	607a      	str	r2, [r7, #4]
 8006c74:	d01a      	beq.n	8006cac <_malloc_r+0x3c4>
 8006c76:	2e0f      	cmp	r6, #15
 8006c78:	d802      	bhi.n	8006c80 <_malloc_r+0x398>
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	607b      	str	r3, [r7, #4]
 8006c7e:	e021      	b.n	8006cc4 <_malloc_r+0x3dc>
 8006c80:	f8db 3004 	ldr.w	r3, [fp, #4]
 8006c84:	3e0c      	subs	r6, #12
 8006c86:	f026 0607 	bic.w	r6, r6, #7
 8006c8a:	f003 0301 	and.w	r3, r3, #1
 8006c8e:	4333      	orrs	r3, r6
 8006c90:	f8cb 3004 	str.w	r3, [fp, #4]
 8006c94:	2205      	movs	r2, #5
 8006c96:	eb0b 0306 	add.w	r3, fp, r6
 8006c9a:	2e0f      	cmp	r6, #15
 8006c9c:	605a      	str	r2, [r3, #4]
 8006c9e:	609a      	str	r2, [r3, #8]
 8006ca0:	d904      	bls.n	8006cac <_malloc_r+0x3c4>
 8006ca2:	f10b 0108 	add.w	r1, fp, #8
 8006ca6:	4648      	mov	r0, r9
 8006ca8:	f000 fc3c 	bl	8007524 <_free_r>
 8006cac:	4a18      	ldr	r2, [pc, #96]	; (8006d10 <_malloc_r+0x428>)
 8006cae:	f8da 3000 	ldr.w	r3, [sl]
 8006cb2:	6811      	ldr	r1, [r2, #0]
 8006cb4:	428b      	cmp	r3, r1
 8006cb6:	bf88      	it	hi
 8006cb8:	6013      	strhi	r3, [r2, #0]
 8006cba:	4a16      	ldr	r2, [pc, #88]	; (8006d14 <_malloc_r+0x42c>)
 8006cbc:	6811      	ldr	r1, [r2, #0]
 8006cbe:	428b      	cmp	r3, r1
 8006cc0:	bf88      	it	hi
 8006cc2:	6013      	strhi	r3, [r2, #0]
 8006cc4:	68ab      	ldr	r3, [r5, #8]
 8006cc6:	685a      	ldr	r2, [r3, #4]
 8006cc8:	f022 0203 	bic.w	r2, r2, #3
 8006ccc:	4294      	cmp	r4, r2
 8006cce:	eba2 0304 	sub.w	r3, r2, r4
 8006cd2:	d801      	bhi.n	8006cd8 <_malloc_r+0x3f0>
 8006cd4:	2b0f      	cmp	r3, #15
 8006cd6:	dc04      	bgt.n	8006ce2 <_malloc_r+0x3fa>
 8006cd8:	4648      	mov	r0, r9
 8006cda:	f000 f83b 	bl	8006d54 <__malloc_unlock>
 8006cde:	2600      	movs	r6, #0
 8006ce0:	e00c      	b.n	8006cfc <_malloc_r+0x414>
 8006ce2:	68ae      	ldr	r6, [r5, #8]
 8006ce4:	f044 0201 	orr.w	r2, r4, #1
 8006ce8:	f043 0301 	orr.w	r3, r3, #1
 8006cec:	4434      	add	r4, r6
 8006cee:	6072      	str	r2, [r6, #4]
 8006cf0:	60ac      	str	r4, [r5, #8]
 8006cf2:	6063      	str	r3, [r4, #4]
 8006cf4:	4648      	mov	r0, r9
 8006cf6:	f000 f82d 	bl	8006d54 <__malloc_unlock>
 8006cfa:	3608      	adds	r6, #8
 8006cfc:	4630      	mov	r0, r6
 8006cfe:	b005      	add	sp, #20
 8006d00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d04:	20000a80 	.word	0x20000a80
 8006d08:	20000538 	.word	0x20000538
 8006d0c:	00000080 	.word	0x00000080
 8006d10:	20000a7c 	.word	0x20000a7c
 8006d14:	20000a78 	.word	0x20000a78
 8006d18:	20000a84 	.word	0x20000a84
 8006d1c:	0000007f 	.word	0x0000007f

08006d20 <memchr>:
 8006d20:	b510      	push	{r4, lr}
 8006d22:	b2c9      	uxtb	r1, r1
 8006d24:	4402      	add	r2, r0
 8006d26:	4290      	cmp	r0, r2
 8006d28:	4603      	mov	r3, r0
 8006d2a:	d005      	beq.n	8006d38 <memchr+0x18>
 8006d2c:	781c      	ldrb	r4, [r3, #0]
 8006d2e:	3001      	adds	r0, #1
 8006d30:	428c      	cmp	r4, r1
 8006d32:	d1f8      	bne.n	8006d26 <memchr+0x6>
 8006d34:	4618      	mov	r0, r3
 8006d36:	bd10      	pop	{r4, pc}
 8006d38:	2000      	movs	r0, #0
 8006d3a:	bd10      	pop	{r4, pc}

08006d3c <memcpy>:
 8006d3c:	b510      	push	{r4, lr}
 8006d3e:	1e43      	subs	r3, r0, #1
 8006d40:	440a      	add	r2, r1
 8006d42:	4291      	cmp	r1, r2
 8006d44:	d004      	beq.n	8006d50 <memcpy+0x14>
 8006d46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d4a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d4e:	e7f8      	b.n	8006d42 <memcpy+0x6>
 8006d50:	bd10      	pop	{r4, pc}

08006d52 <__malloc_lock>:
 8006d52:	4770      	bx	lr

08006d54 <__malloc_unlock>:
 8006d54:	4770      	bx	lr

08006d56 <_Balloc>:
 8006d56:	b570      	push	{r4, r5, r6, lr}
 8006d58:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006d5a:	4604      	mov	r4, r0
 8006d5c:	460e      	mov	r6, r1
 8006d5e:	b93d      	cbnz	r5, 8006d70 <_Balloc+0x1a>
 8006d60:	2010      	movs	r0, #16
 8006d62:	f7ff fdb9 	bl	80068d8 <malloc>
 8006d66:	6260      	str	r0, [r4, #36]	; 0x24
 8006d68:	6045      	str	r5, [r0, #4]
 8006d6a:	6085      	str	r5, [r0, #8]
 8006d6c:	6005      	str	r5, [r0, #0]
 8006d6e:	60c5      	str	r5, [r0, #12]
 8006d70:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006d72:	68eb      	ldr	r3, [r5, #12]
 8006d74:	b143      	cbz	r3, 8006d88 <_Balloc+0x32>
 8006d76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d78:	68db      	ldr	r3, [r3, #12]
 8006d7a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006d7e:	b178      	cbz	r0, 8006da0 <_Balloc+0x4a>
 8006d80:	6802      	ldr	r2, [r0, #0]
 8006d82:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8006d86:	e017      	b.n	8006db8 <_Balloc+0x62>
 8006d88:	2221      	movs	r2, #33	; 0x21
 8006d8a:	2104      	movs	r1, #4
 8006d8c:	4620      	mov	r0, r4
 8006d8e:	f000 fb46 	bl	800741e <_calloc_r>
 8006d92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d94:	60e8      	str	r0, [r5, #12]
 8006d96:	68db      	ldr	r3, [r3, #12]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d1ec      	bne.n	8006d76 <_Balloc+0x20>
 8006d9c:	2000      	movs	r0, #0
 8006d9e:	bd70      	pop	{r4, r5, r6, pc}
 8006da0:	2101      	movs	r1, #1
 8006da2:	fa01 f506 	lsl.w	r5, r1, r6
 8006da6:	1d6a      	adds	r2, r5, #5
 8006da8:	0092      	lsls	r2, r2, #2
 8006daa:	4620      	mov	r0, r4
 8006dac:	f000 fb37 	bl	800741e <_calloc_r>
 8006db0:	2800      	cmp	r0, #0
 8006db2:	d0f3      	beq.n	8006d9c <_Balloc+0x46>
 8006db4:	6046      	str	r6, [r0, #4]
 8006db6:	6085      	str	r5, [r0, #8]
 8006db8:	2300      	movs	r3, #0
 8006dba:	6103      	str	r3, [r0, #16]
 8006dbc:	60c3      	str	r3, [r0, #12]
 8006dbe:	bd70      	pop	{r4, r5, r6, pc}

08006dc0 <_Bfree>:
 8006dc0:	b570      	push	{r4, r5, r6, lr}
 8006dc2:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006dc4:	4606      	mov	r6, r0
 8006dc6:	460d      	mov	r5, r1
 8006dc8:	b93c      	cbnz	r4, 8006dda <_Bfree+0x1a>
 8006dca:	2010      	movs	r0, #16
 8006dcc:	f7ff fd84 	bl	80068d8 <malloc>
 8006dd0:	6270      	str	r0, [r6, #36]	; 0x24
 8006dd2:	6044      	str	r4, [r0, #4]
 8006dd4:	6084      	str	r4, [r0, #8]
 8006dd6:	6004      	str	r4, [r0, #0]
 8006dd8:	60c4      	str	r4, [r0, #12]
 8006dda:	b13d      	cbz	r5, 8006dec <_Bfree+0x2c>
 8006ddc:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006dde:	686a      	ldr	r2, [r5, #4]
 8006de0:	68db      	ldr	r3, [r3, #12]
 8006de2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006de6:	6029      	str	r1, [r5, #0]
 8006de8:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8006dec:	bd70      	pop	{r4, r5, r6, pc}

08006dee <__multadd>:
 8006dee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006df2:	4606      	mov	r6, r0
 8006df4:	460c      	mov	r4, r1
 8006df6:	690d      	ldr	r5, [r1, #16]
 8006df8:	461f      	mov	r7, r3
 8006dfa:	f101 0e14 	add.w	lr, r1, #20
 8006dfe:	2300      	movs	r3, #0
 8006e00:	f8de 0000 	ldr.w	r0, [lr]
 8006e04:	3301      	adds	r3, #1
 8006e06:	b281      	uxth	r1, r0
 8006e08:	fb02 7101 	mla	r1, r2, r1, r7
 8006e0c:	0c00      	lsrs	r0, r0, #16
 8006e0e:	0c0f      	lsrs	r7, r1, #16
 8006e10:	fb02 7000 	mla	r0, r2, r0, r7
 8006e14:	b289      	uxth	r1, r1
 8006e16:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8006e1a:	429d      	cmp	r5, r3
 8006e1c:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8006e20:	f84e 1b04 	str.w	r1, [lr], #4
 8006e24:	dcec      	bgt.n	8006e00 <__multadd+0x12>
 8006e26:	b1d7      	cbz	r7, 8006e5e <__multadd+0x70>
 8006e28:	68a3      	ldr	r3, [r4, #8]
 8006e2a:	429d      	cmp	r5, r3
 8006e2c:	db12      	blt.n	8006e54 <__multadd+0x66>
 8006e2e:	6861      	ldr	r1, [r4, #4]
 8006e30:	4630      	mov	r0, r6
 8006e32:	3101      	adds	r1, #1
 8006e34:	f7ff ff8f 	bl	8006d56 <_Balloc>
 8006e38:	4680      	mov	r8, r0
 8006e3a:	6922      	ldr	r2, [r4, #16]
 8006e3c:	f104 010c 	add.w	r1, r4, #12
 8006e40:	3202      	adds	r2, #2
 8006e42:	0092      	lsls	r2, r2, #2
 8006e44:	300c      	adds	r0, #12
 8006e46:	f7ff ff79 	bl	8006d3c <memcpy>
 8006e4a:	4621      	mov	r1, r4
 8006e4c:	4630      	mov	r0, r6
 8006e4e:	f7ff ffb7 	bl	8006dc0 <_Bfree>
 8006e52:	4644      	mov	r4, r8
 8006e54:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006e58:	3501      	adds	r5, #1
 8006e5a:	615f      	str	r7, [r3, #20]
 8006e5c:	6125      	str	r5, [r4, #16]
 8006e5e:	4620      	mov	r0, r4
 8006e60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006e64 <__hi0bits>:
 8006e64:	0c03      	lsrs	r3, r0, #16
 8006e66:	041b      	lsls	r3, r3, #16
 8006e68:	b913      	cbnz	r3, 8006e70 <__hi0bits+0xc>
 8006e6a:	0400      	lsls	r0, r0, #16
 8006e6c:	2310      	movs	r3, #16
 8006e6e:	e000      	b.n	8006e72 <__hi0bits+0xe>
 8006e70:	2300      	movs	r3, #0
 8006e72:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006e76:	bf04      	itt	eq
 8006e78:	0200      	lsleq	r0, r0, #8
 8006e7a:	3308      	addeq	r3, #8
 8006e7c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006e80:	bf04      	itt	eq
 8006e82:	0100      	lsleq	r0, r0, #4
 8006e84:	3304      	addeq	r3, #4
 8006e86:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006e8a:	bf04      	itt	eq
 8006e8c:	0080      	lsleq	r0, r0, #2
 8006e8e:	3302      	addeq	r3, #2
 8006e90:	2800      	cmp	r0, #0
 8006e92:	db03      	blt.n	8006e9c <__hi0bits+0x38>
 8006e94:	0042      	lsls	r2, r0, #1
 8006e96:	d503      	bpl.n	8006ea0 <__hi0bits+0x3c>
 8006e98:	1c58      	adds	r0, r3, #1
 8006e9a:	4770      	bx	lr
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	4770      	bx	lr
 8006ea0:	2020      	movs	r0, #32
 8006ea2:	4770      	bx	lr

08006ea4 <__lo0bits>:
 8006ea4:	6803      	ldr	r3, [r0, #0]
 8006ea6:	f013 0207 	ands.w	r2, r3, #7
 8006eaa:	d00b      	beq.n	8006ec4 <__lo0bits+0x20>
 8006eac:	07d9      	lsls	r1, r3, #31
 8006eae:	d422      	bmi.n	8006ef6 <__lo0bits+0x52>
 8006eb0:	079a      	lsls	r2, r3, #30
 8006eb2:	bf4b      	itete	mi
 8006eb4:	085b      	lsrmi	r3, r3, #1
 8006eb6:	089b      	lsrpl	r3, r3, #2
 8006eb8:	6003      	strmi	r3, [r0, #0]
 8006eba:	6003      	strpl	r3, [r0, #0]
 8006ebc:	bf4c      	ite	mi
 8006ebe:	2001      	movmi	r0, #1
 8006ec0:	2002      	movpl	r0, #2
 8006ec2:	4770      	bx	lr
 8006ec4:	b299      	uxth	r1, r3
 8006ec6:	b909      	cbnz	r1, 8006ecc <__lo0bits+0x28>
 8006ec8:	0c1b      	lsrs	r3, r3, #16
 8006eca:	2210      	movs	r2, #16
 8006ecc:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006ed0:	bf04      	itt	eq
 8006ed2:	0a1b      	lsreq	r3, r3, #8
 8006ed4:	3208      	addeq	r2, #8
 8006ed6:	0719      	lsls	r1, r3, #28
 8006ed8:	bf04      	itt	eq
 8006eda:	091b      	lsreq	r3, r3, #4
 8006edc:	3204      	addeq	r2, #4
 8006ede:	0799      	lsls	r1, r3, #30
 8006ee0:	bf04      	itt	eq
 8006ee2:	089b      	lsreq	r3, r3, #2
 8006ee4:	3202      	addeq	r2, #2
 8006ee6:	07d9      	lsls	r1, r3, #31
 8006ee8:	d402      	bmi.n	8006ef0 <__lo0bits+0x4c>
 8006eea:	085b      	lsrs	r3, r3, #1
 8006eec:	d005      	beq.n	8006efa <__lo0bits+0x56>
 8006eee:	3201      	adds	r2, #1
 8006ef0:	6003      	str	r3, [r0, #0]
 8006ef2:	4610      	mov	r0, r2
 8006ef4:	4770      	bx	lr
 8006ef6:	2000      	movs	r0, #0
 8006ef8:	4770      	bx	lr
 8006efa:	2020      	movs	r0, #32
 8006efc:	4770      	bx	lr

08006efe <__i2b>:
 8006efe:	b510      	push	{r4, lr}
 8006f00:	460c      	mov	r4, r1
 8006f02:	2101      	movs	r1, #1
 8006f04:	f7ff ff27 	bl	8006d56 <_Balloc>
 8006f08:	2201      	movs	r2, #1
 8006f0a:	6144      	str	r4, [r0, #20]
 8006f0c:	6102      	str	r2, [r0, #16]
 8006f0e:	bd10      	pop	{r4, pc}

08006f10 <__multiply>:
 8006f10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f14:	4614      	mov	r4, r2
 8006f16:	690a      	ldr	r2, [r1, #16]
 8006f18:	6923      	ldr	r3, [r4, #16]
 8006f1a:	4688      	mov	r8, r1
 8006f1c:	429a      	cmp	r2, r3
 8006f1e:	bfbe      	ittt	lt
 8006f20:	460b      	movlt	r3, r1
 8006f22:	46a0      	movlt	r8, r4
 8006f24:	461c      	movlt	r4, r3
 8006f26:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006f2a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006f2e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006f32:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006f36:	eb07 0609 	add.w	r6, r7, r9
 8006f3a:	429e      	cmp	r6, r3
 8006f3c:	bfc8      	it	gt
 8006f3e:	3101      	addgt	r1, #1
 8006f40:	f7ff ff09 	bl	8006d56 <_Balloc>
 8006f44:	f100 0514 	add.w	r5, r0, #20
 8006f48:	462b      	mov	r3, r5
 8006f4a:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
 8006f4e:	2200      	movs	r2, #0
 8006f50:	4563      	cmp	r3, ip
 8006f52:	d202      	bcs.n	8006f5a <__multiply+0x4a>
 8006f54:	f843 2b04 	str.w	r2, [r3], #4
 8006f58:	e7fa      	b.n	8006f50 <__multiply+0x40>
 8006f5a:	f104 0214 	add.w	r2, r4, #20
 8006f5e:	f108 0114 	add.w	r1, r8, #20
 8006f62:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8006f66:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8006f6a:	9300      	str	r3, [sp, #0]
 8006f6c:	9b00      	ldr	r3, [sp, #0]
 8006f6e:	9201      	str	r2, [sp, #4]
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d957      	bls.n	8007024 <__multiply+0x114>
 8006f74:	f8b2 b000 	ldrh.w	fp, [r2]
 8006f78:	f1bb 0f00 	cmp.w	fp, #0
 8006f7c:	d023      	beq.n	8006fc6 <__multiply+0xb6>
 8006f7e:	4689      	mov	r9, r1
 8006f80:	46ae      	mov	lr, r5
 8006f82:	f04f 0800 	mov.w	r8, #0
 8006f86:	f859 4b04 	ldr.w	r4, [r9], #4
 8006f8a:	f8be a000 	ldrh.w	sl, [lr]
 8006f8e:	b2a3      	uxth	r3, r4
 8006f90:	fb0b a303 	mla	r3, fp, r3, sl
 8006f94:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006f98:	f8de 4000 	ldr.w	r4, [lr]
 8006f9c:	4443      	add	r3, r8
 8006f9e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006fa2:	fb0b 840a 	mla	r4, fp, sl, r8
 8006fa6:	46f2      	mov	sl, lr
 8006fa8:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8006fac:	b29b      	uxth	r3, r3
 8006fae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006fb2:	454f      	cmp	r7, r9
 8006fb4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006fb8:	f84a 3b04 	str.w	r3, [sl], #4
 8006fbc:	d901      	bls.n	8006fc2 <__multiply+0xb2>
 8006fbe:	46d6      	mov	lr, sl
 8006fc0:	e7e1      	b.n	8006f86 <__multiply+0x76>
 8006fc2:	f8ce 8004 	str.w	r8, [lr, #4]
 8006fc6:	9b01      	ldr	r3, [sp, #4]
 8006fc8:	3204      	adds	r2, #4
 8006fca:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8006fce:	f1ba 0f00 	cmp.w	sl, #0
 8006fd2:	d021      	beq.n	8007018 <__multiply+0x108>
 8006fd4:	462c      	mov	r4, r5
 8006fd6:	4689      	mov	r9, r1
 8006fd8:	682b      	ldr	r3, [r5, #0]
 8006fda:	f04f 0800 	mov.w	r8, #0
 8006fde:	f8b9 e000 	ldrh.w	lr, [r9]
 8006fe2:	f8b4 b002 	ldrh.w	fp, [r4, #2]
 8006fe6:	b29b      	uxth	r3, r3
 8006fe8:	fb0a be0e 	mla	lr, sl, lr, fp
 8006fec:	46a3      	mov	fp, r4
 8006fee:	44f0      	add	r8, lr
 8006ff0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8006ff4:	f84b 3b04 	str.w	r3, [fp], #4
 8006ff8:	f859 3b04 	ldr.w	r3, [r9], #4
 8006ffc:	f8b4 e004 	ldrh.w	lr, [r4, #4]
 8007000:	0c1b      	lsrs	r3, r3, #16
 8007002:	fb0a e303 	mla	r3, sl, r3, lr
 8007006:	454f      	cmp	r7, r9
 8007008:	eb03 4318 	add.w	r3, r3, r8, lsr #16
 800700c:	ea4f 4813 	mov.w	r8, r3, lsr #16
 8007010:	d901      	bls.n	8007016 <__multiply+0x106>
 8007012:	465c      	mov	r4, fp
 8007014:	e7e3      	b.n	8006fde <__multiply+0xce>
 8007016:	6063      	str	r3, [r4, #4]
 8007018:	3504      	adds	r5, #4
 800701a:	e7a7      	b.n	8006f6c <__multiply+0x5c>
 800701c:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
 8007020:	b913      	cbnz	r3, 8007028 <__multiply+0x118>
 8007022:	3e01      	subs	r6, #1
 8007024:	2e00      	cmp	r6, #0
 8007026:	dcf9      	bgt.n	800701c <__multiply+0x10c>
 8007028:	6106      	str	r6, [r0, #16]
 800702a:	b003      	add	sp, #12
 800702c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007030 <__pow5mult>:
 8007030:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007034:	4615      	mov	r5, r2
 8007036:	f012 0203 	ands.w	r2, r2, #3
 800703a:	4606      	mov	r6, r0
 800703c:	460f      	mov	r7, r1
 800703e:	d007      	beq.n	8007050 <__pow5mult+0x20>
 8007040:	4c21      	ldr	r4, [pc, #132]	; (80070c8 <__pow5mult+0x98>)
 8007042:	3a01      	subs	r2, #1
 8007044:	2300      	movs	r3, #0
 8007046:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800704a:	f7ff fed0 	bl	8006dee <__multadd>
 800704e:	4607      	mov	r7, r0
 8007050:	10ad      	asrs	r5, r5, #2
 8007052:	d036      	beq.n	80070c2 <__pow5mult+0x92>
 8007054:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007056:	b93c      	cbnz	r4, 8007068 <__pow5mult+0x38>
 8007058:	2010      	movs	r0, #16
 800705a:	f7ff fc3d 	bl	80068d8 <malloc>
 800705e:	6270      	str	r0, [r6, #36]	; 0x24
 8007060:	6044      	str	r4, [r0, #4]
 8007062:	6084      	str	r4, [r0, #8]
 8007064:	6004      	str	r4, [r0, #0]
 8007066:	60c4      	str	r4, [r0, #12]
 8007068:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800706c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007070:	b94c      	cbnz	r4, 8007086 <__pow5mult+0x56>
 8007072:	f240 2171 	movw	r1, #625	; 0x271
 8007076:	4630      	mov	r0, r6
 8007078:	f7ff ff41 	bl	8006efe <__i2b>
 800707c:	4604      	mov	r4, r0
 800707e:	2300      	movs	r3, #0
 8007080:	f8c8 0008 	str.w	r0, [r8, #8]
 8007084:	6003      	str	r3, [r0, #0]
 8007086:	f04f 0800 	mov.w	r8, #0
 800708a:	07eb      	lsls	r3, r5, #31
 800708c:	d50a      	bpl.n	80070a4 <__pow5mult+0x74>
 800708e:	4639      	mov	r1, r7
 8007090:	4622      	mov	r2, r4
 8007092:	4630      	mov	r0, r6
 8007094:	f7ff ff3c 	bl	8006f10 <__multiply>
 8007098:	4681      	mov	r9, r0
 800709a:	4639      	mov	r1, r7
 800709c:	4630      	mov	r0, r6
 800709e:	f7ff fe8f 	bl	8006dc0 <_Bfree>
 80070a2:	464f      	mov	r7, r9
 80070a4:	106d      	asrs	r5, r5, #1
 80070a6:	d00c      	beq.n	80070c2 <__pow5mult+0x92>
 80070a8:	6820      	ldr	r0, [r4, #0]
 80070aa:	b108      	cbz	r0, 80070b0 <__pow5mult+0x80>
 80070ac:	4604      	mov	r4, r0
 80070ae:	e7ec      	b.n	800708a <__pow5mult+0x5a>
 80070b0:	4622      	mov	r2, r4
 80070b2:	4621      	mov	r1, r4
 80070b4:	4630      	mov	r0, r6
 80070b6:	f7ff ff2b 	bl	8006f10 <__multiply>
 80070ba:	6020      	str	r0, [r4, #0]
 80070bc:	f8c0 8000 	str.w	r8, [r0]
 80070c0:	e7f4      	b.n	80070ac <__pow5mult+0x7c>
 80070c2:	4638      	mov	r0, r7
 80070c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070c8:	08007e38 	.word	0x08007e38

080070cc <__lshift>:
 80070cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070d0:	460c      	mov	r4, r1
 80070d2:	4607      	mov	r7, r0
 80070d4:	4691      	mov	r9, r2
 80070d6:	6926      	ldr	r6, [r4, #16]
 80070d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80070dc:	4456      	add	r6, sl
 80070de:	6849      	ldr	r1, [r1, #4]
 80070e0:	68a3      	ldr	r3, [r4, #8]
 80070e2:	1c75      	adds	r5, r6, #1
 80070e4:	42ab      	cmp	r3, r5
 80070e6:	da02      	bge.n	80070ee <__lshift+0x22>
 80070e8:	3101      	adds	r1, #1
 80070ea:	005b      	lsls	r3, r3, #1
 80070ec:	e7fa      	b.n	80070e4 <__lshift+0x18>
 80070ee:	4638      	mov	r0, r7
 80070f0:	f7ff fe31 	bl	8006d56 <_Balloc>
 80070f4:	2300      	movs	r3, #0
 80070f6:	4680      	mov	r8, r0
 80070f8:	461a      	mov	r2, r3
 80070fa:	f100 0114 	add.w	r1, r0, #20
 80070fe:	4553      	cmp	r3, sl
 8007100:	da03      	bge.n	800710a <__lshift+0x3e>
 8007102:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007106:	3301      	adds	r3, #1
 8007108:	e7f9      	b.n	80070fe <__lshift+0x32>
 800710a:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 800710e:	6920      	ldr	r0, [r4, #16]
 8007110:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8007114:	f019 091f 	ands.w	r9, r9, #31
 8007118:	f104 0114 	add.w	r1, r4, #20
 800711c:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8007120:	d014      	beq.n	800714c <__lshift+0x80>
 8007122:	f1c9 0c20 	rsb	ip, r9, #32
 8007126:	2200      	movs	r2, #0
 8007128:	6808      	ldr	r0, [r1, #0]
 800712a:	469a      	mov	sl, r3
 800712c:	fa00 f009 	lsl.w	r0, r0, r9
 8007130:	4302      	orrs	r2, r0
 8007132:	f843 2b04 	str.w	r2, [r3], #4
 8007136:	f851 2b04 	ldr.w	r2, [r1], #4
 800713a:	458e      	cmp	lr, r1
 800713c:	fa22 f20c 	lsr.w	r2, r2, ip
 8007140:	d8f2      	bhi.n	8007128 <__lshift+0x5c>
 8007142:	f8ca 2004 	str.w	r2, [sl, #4]
 8007146:	b142      	cbz	r2, 800715a <__lshift+0x8e>
 8007148:	1cb5      	adds	r5, r6, #2
 800714a:	e006      	b.n	800715a <__lshift+0x8e>
 800714c:	3b04      	subs	r3, #4
 800714e:	f851 2b04 	ldr.w	r2, [r1], #4
 8007152:	458e      	cmp	lr, r1
 8007154:	f843 2f04 	str.w	r2, [r3, #4]!
 8007158:	d8f9      	bhi.n	800714e <__lshift+0x82>
 800715a:	3d01      	subs	r5, #1
 800715c:	4638      	mov	r0, r7
 800715e:	f8c8 5010 	str.w	r5, [r8, #16]
 8007162:	4621      	mov	r1, r4
 8007164:	f7ff fe2c 	bl	8006dc0 <_Bfree>
 8007168:	4640      	mov	r0, r8
 800716a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800716e <__mcmp>:
 800716e:	6903      	ldr	r3, [r0, #16]
 8007170:	690a      	ldr	r2, [r1, #16]
 8007172:	b510      	push	{r4, lr}
 8007174:	1a9b      	subs	r3, r3, r2
 8007176:	d111      	bne.n	800719c <__mcmp+0x2e>
 8007178:	0092      	lsls	r2, r2, #2
 800717a:	3014      	adds	r0, #20
 800717c:	3114      	adds	r1, #20
 800717e:	1883      	adds	r3, r0, r2
 8007180:	440a      	add	r2, r1
 8007182:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8007186:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800718a:	428c      	cmp	r4, r1
 800718c:	d002      	beq.n	8007194 <__mcmp+0x26>
 800718e:	d307      	bcc.n	80071a0 <__mcmp+0x32>
 8007190:	2001      	movs	r0, #1
 8007192:	bd10      	pop	{r4, pc}
 8007194:	4298      	cmp	r0, r3
 8007196:	d3f4      	bcc.n	8007182 <__mcmp+0x14>
 8007198:	2000      	movs	r0, #0
 800719a:	bd10      	pop	{r4, pc}
 800719c:	4618      	mov	r0, r3
 800719e:	bd10      	pop	{r4, pc}
 80071a0:	f04f 30ff 	mov.w	r0, #4294967295
 80071a4:	bd10      	pop	{r4, pc}

080071a6 <__mdiff>:
 80071a6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071aa:	460c      	mov	r4, r1
 80071ac:	4607      	mov	r7, r0
 80071ae:	4611      	mov	r1, r2
 80071b0:	4620      	mov	r0, r4
 80071b2:	4615      	mov	r5, r2
 80071b4:	f7ff ffdb 	bl	800716e <__mcmp>
 80071b8:	1e06      	subs	r6, r0, #0
 80071ba:	d108      	bne.n	80071ce <__mdiff+0x28>
 80071bc:	4631      	mov	r1, r6
 80071be:	4638      	mov	r0, r7
 80071c0:	f7ff fdc9 	bl	8006d56 <_Balloc>
 80071c4:	2301      	movs	r3, #1
 80071c6:	6103      	str	r3, [r0, #16]
 80071c8:	6146      	str	r6, [r0, #20]
 80071ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071ce:	bfbc      	itt	lt
 80071d0:	4623      	movlt	r3, r4
 80071d2:	462c      	movlt	r4, r5
 80071d4:	4638      	mov	r0, r7
 80071d6:	6861      	ldr	r1, [r4, #4]
 80071d8:	bfba      	itte	lt
 80071da:	461d      	movlt	r5, r3
 80071dc:	2601      	movlt	r6, #1
 80071de:	2600      	movge	r6, #0
 80071e0:	f7ff fdb9 	bl	8006d56 <_Balloc>
 80071e4:	692b      	ldr	r3, [r5, #16]
 80071e6:	60c6      	str	r6, [r0, #12]
 80071e8:	6926      	ldr	r6, [r4, #16]
 80071ea:	f105 0914 	add.w	r9, r5, #20
 80071ee:	f104 0114 	add.w	r1, r4, #20
 80071f2:	eb01 0786 	add.w	r7, r1, r6, lsl #2
 80071f6:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80071fa:	f100 0514 	add.w	r5, r0, #20
 80071fe:	f04f 0c00 	mov.w	ip, #0
 8007202:	f851 2b04 	ldr.w	r2, [r1], #4
 8007206:	f859 4b04 	ldr.w	r4, [r9], #4
 800720a:	b293      	uxth	r3, r2
 800720c:	449c      	add	ip, r3
 800720e:	b2a3      	uxth	r3, r4
 8007210:	0c24      	lsrs	r4, r4, #16
 8007212:	ebc3 030c 	rsb	r3, r3, ip
 8007216:	ebc4 4212 	rsb	r2, r4, r2, lsr #16
 800721a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800721e:	b29b      	uxth	r3, r3
 8007220:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007224:	45c8      	cmp	r8, r9
 8007226:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 800722a:	468e      	mov	lr, r1
 800722c:	f845 2b04 	str.w	r2, [r5], #4
 8007230:	d8e7      	bhi.n	8007202 <__mdiff+0x5c>
 8007232:	45be      	cmp	lr, r7
 8007234:	d20e      	bcs.n	8007254 <__mdiff+0xae>
 8007236:	f85e 1b04 	ldr.w	r1, [lr], #4
 800723a:	b28a      	uxth	r2, r1
 800723c:	4462      	add	r2, ip
 800723e:	1413      	asrs	r3, r2, #16
 8007240:	eb03 4311 	add.w	r3, r3, r1, lsr #16
 8007244:	b292      	uxth	r2, r2
 8007246:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800724a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800724e:	f845 2b04 	str.w	r2, [r5], #4
 8007252:	e7ee      	b.n	8007232 <__mdiff+0x8c>
 8007254:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8007258:	b90b      	cbnz	r3, 800725e <__mdiff+0xb8>
 800725a:	3e01      	subs	r6, #1
 800725c:	e7fa      	b.n	8007254 <__mdiff+0xae>
 800725e:	6106      	str	r6, [r0, #16]
 8007260:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08007264 <__d2b>:
 8007264:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007268:	461c      	mov	r4, r3
 800726a:	2101      	movs	r1, #1
 800726c:	4690      	mov	r8, r2
 800726e:	9e08      	ldr	r6, [sp, #32]
 8007270:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007272:	f7ff fd70 	bl	8006d56 <_Balloc>
 8007276:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800727a:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800727e:	4607      	mov	r7, r0
 8007280:	b10c      	cbz	r4, 8007286 <__d2b+0x22>
 8007282:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007286:	9201      	str	r2, [sp, #4]
 8007288:	f1b8 0f00 	cmp.w	r8, #0
 800728c:	d019      	beq.n	80072c2 <__d2b+0x5e>
 800728e:	a802      	add	r0, sp, #8
 8007290:	f840 8d08 	str.w	r8, [r0, #-8]!
 8007294:	f7ff fe06 	bl	8006ea4 <__lo0bits>
 8007298:	9b00      	ldr	r3, [sp, #0]
 800729a:	b148      	cbz	r0, 80072b0 <__d2b+0x4c>
 800729c:	9a01      	ldr	r2, [sp, #4]
 800729e:	f1c0 0120 	rsb	r1, r0, #32
 80072a2:	fa02 f101 	lsl.w	r1, r2, r1
 80072a6:	430b      	orrs	r3, r1
 80072a8:	40c2      	lsrs	r2, r0
 80072aa:	617b      	str	r3, [r7, #20]
 80072ac:	9201      	str	r2, [sp, #4]
 80072ae:	e000      	b.n	80072b2 <__d2b+0x4e>
 80072b0:	617b      	str	r3, [r7, #20]
 80072b2:	9b01      	ldr	r3, [sp, #4]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	bf14      	ite	ne
 80072b8:	2102      	movne	r1, #2
 80072ba:	2101      	moveq	r1, #1
 80072bc:	61bb      	str	r3, [r7, #24]
 80072be:	6139      	str	r1, [r7, #16]
 80072c0:	e007      	b.n	80072d2 <__d2b+0x6e>
 80072c2:	a801      	add	r0, sp, #4
 80072c4:	f7ff fdee 	bl	8006ea4 <__lo0bits>
 80072c8:	9b01      	ldr	r3, [sp, #4]
 80072ca:	2101      	movs	r1, #1
 80072cc:	617b      	str	r3, [r7, #20]
 80072ce:	6139      	str	r1, [r7, #16]
 80072d0:	3020      	adds	r0, #32
 80072d2:	b134      	cbz	r4, 80072e2 <__d2b+0x7e>
 80072d4:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80072d8:	4404      	add	r4, r0
 80072da:	6034      	str	r4, [r6, #0]
 80072dc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80072e0:	e009      	b.n	80072f6 <__d2b+0x92>
 80072e2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80072e6:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80072ea:	6030      	str	r0, [r6, #0]
 80072ec:	6918      	ldr	r0, [r3, #16]
 80072ee:	f7ff fdb9 	bl	8006e64 <__hi0bits>
 80072f2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80072f6:	6028      	str	r0, [r5, #0]
 80072f8:	4638      	mov	r0, r7
 80072fa:	b002      	add	sp, #8
 80072fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007300 <_sbrk_r>:
 8007300:	b538      	push	{r3, r4, r5, lr}
 8007302:	4c06      	ldr	r4, [pc, #24]	; (800731c <_sbrk_r+0x1c>)
 8007304:	2300      	movs	r3, #0
 8007306:	4605      	mov	r5, r0
 8007308:	4608      	mov	r0, r1
 800730a:	6023      	str	r3, [r4, #0]
 800730c:	f000 fb98 	bl	8007a40 <_sbrk>
 8007310:	1c43      	adds	r3, r0, #1
 8007312:	d102      	bne.n	800731a <_sbrk_r+0x1a>
 8007314:	6823      	ldr	r3, [r4, #0]
 8007316:	b103      	cbz	r3, 800731a <_sbrk_r+0x1a>
 8007318:	602b      	str	r3, [r5, #0]
 800731a:	bd38      	pop	{r3, r4, r5, pc}
 800731c:	20008c6c 	.word	0x20008c6c

08007320 <__ssprint_r>:
 8007320:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007324:	4693      	mov	fp, r2
 8007326:	6892      	ldr	r2, [r2, #8]
 8007328:	4681      	mov	r9, r0
 800732a:	460c      	mov	r4, r1
 800732c:	b34a      	cbz	r2, 8007382 <__ssprint_r+0x62>
 800732e:	2300      	movs	r3, #0
 8007330:	f8db a000 	ldr.w	sl, [fp]
 8007334:	9301      	str	r3, [sp, #4]
 8007336:	461f      	mov	r7, r3
 8007338:	e006      	b.n	8007348 <__ssprint_r+0x28>
 800733a:	f8da 3000 	ldr.w	r3, [sl]
 800733e:	f8da 7004 	ldr.w	r7, [sl, #4]
 8007342:	9301      	str	r3, [sp, #4]
 8007344:	f10a 0a08 	add.w	sl, sl, #8
 8007348:	2f00      	cmp	r7, #0
 800734a:	d0f6      	beq.n	800733a <__ssprint_r+0x1a>
 800734c:	68a6      	ldr	r6, [r4, #8]
 800734e:	42b7      	cmp	r7, r6
 8007350:	d360      	bcc.n	8007414 <__ssprint_r+0xf4>
 8007352:	89a0      	ldrh	r0, [r4, #12]
 8007354:	f410 6f90 	tst.w	r0, #1152	; 0x480
 8007358:	d117      	bne.n	800738a <__ssprint_r+0x6a>
 800735a:	42b7      	cmp	r7, r6
 800735c:	d35a      	bcc.n	8007414 <__ssprint_r+0xf4>
 800735e:	4632      	mov	r2, r6
 8007360:	9901      	ldr	r1, [sp, #4]
 8007362:	6820      	ldr	r0, [r4, #0]
 8007364:	f000 f99c 	bl	80076a0 <memmove>
 8007368:	68a2      	ldr	r2, [r4, #8]
 800736a:	1b92      	subs	r2, r2, r6
 800736c:	60a2      	str	r2, [r4, #8]
 800736e:	6822      	ldr	r2, [r4, #0]
 8007370:	4416      	add	r6, r2
 8007372:	f8db 2008 	ldr.w	r2, [fp, #8]
 8007376:	6026      	str	r6, [r4, #0]
 8007378:	1bd7      	subs	r7, r2, r7
 800737a:	f8cb 7008 	str.w	r7, [fp, #8]
 800737e:	2f00      	cmp	r7, #0
 8007380:	d1db      	bne.n	800733a <__ssprint_r+0x1a>
 8007382:	2000      	movs	r0, #0
 8007384:	f8cb 0004 	str.w	r0, [fp, #4]
 8007388:	e046      	b.n	8007418 <__ssprint_r+0xf8>
 800738a:	6825      	ldr	r5, [r4, #0]
 800738c:	6921      	ldr	r1, [r4, #16]
 800738e:	2302      	movs	r3, #2
 8007390:	ebc1 0805 	rsb	r8, r1, r5
 8007394:	6965      	ldr	r5, [r4, #20]
 8007396:	f108 0201 	add.w	r2, r8, #1
 800739a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800739e:	fb95 f5f3 	sdiv	r5, r5, r3
 80073a2:	443a      	add	r2, r7
 80073a4:	4295      	cmp	r5, r2
 80073a6:	bf38      	it	cc
 80073a8:	4615      	movcc	r5, r2
 80073aa:	0543      	lsls	r3, r0, #21
 80073ac:	d510      	bpl.n	80073d0 <__ssprint_r+0xb0>
 80073ae:	4629      	mov	r1, r5
 80073b0:	4648      	mov	r0, r9
 80073b2:	f7ff fa99 	bl	80068e8 <_malloc_r>
 80073b6:	4606      	mov	r6, r0
 80073b8:	b1a0      	cbz	r0, 80073e4 <__ssprint_r+0xc4>
 80073ba:	4642      	mov	r2, r8
 80073bc:	6921      	ldr	r1, [r4, #16]
 80073be:	f7ff fcbd 	bl	8006d3c <memcpy>
 80073c2:	89a2      	ldrh	r2, [r4, #12]
 80073c4:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 80073c8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80073cc:	81a2      	strh	r2, [r4, #12]
 80073ce:	e018      	b.n	8007402 <__ssprint_r+0xe2>
 80073d0:	462a      	mov	r2, r5
 80073d2:	4648      	mov	r0, r9
 80073d4:	f000 f988 	bl	80076e8 <_realloc_r>
 80073d8:	4606      	mov	r6, r0
 80073da:	b990      	cbnz	r0, 8007402 <__ssprint_r+0xe2>
 80073dc:	6921      	ldr	r1, [r4, #16]
 80073de:	4648      	mov	r0, r9
 80073e0:	f000 f8a0 	bl	8007524 <_free_r>
 80073e4:	220c      	movs	r2, #12
 80073e6:	f8c9 2000 	str.w	r2, [r9]
 80073ea:	89a2      	ldrh	r2, [r4, #12]
 80073ec:	f04f 30ff 	mov.w	r0, #4294967295
 80073f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80073f4:	81a2      	strh	r2, [r4, #12]
 80073f6:	2200      	movs	r2, #0
 80073f8:	f8cb 2008 	str.w	r2, [fp, #8]
 80073fc:	f8cb 2004 	str.w	r2, [fp, #4]
 8007400:	e00a      	b.n	8007418 <__ssprint_r+0xf8>
 8007402:	6126      	str	r6, [r4, #16]
 8007404:	6165      	str	r5, [r4, #20]
 8007406:	4446      	add	r6, r8
 8007408:	ebc8 0505 	rsb	r5, r8, r5
 800740c:	6026      	str	r6, [r4, #0]
 800740e:	60a5      	str	r5, [r4, #8]
 8007410:	463e      	mov	r6, r7
 8007412:	e7a2      	b.n	800735a <__ssprint_r+0x3a>
 8007414:	463e      	mov	r6, r7
 8007416:	e7a2      	b.n	800735e <__ssprint_r+0x3e>
 8007418:	b003      	add	sp, #12
 800741a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800741e <_calloc_r>:
 800741e:	b510      	push	{r4, lr}
 8007420:	4351      	muls	r1, r2
 8007422:	f7ff fa61 	bl	80068e8 <_malloc_r>
 8007426:	4604      	mov	r4, r0
 8007428:	b320      	cbz	r0, 8007474 <_calloc_r+0x56>
 800742a:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800742e:	f022 0203 	bic.w	r2, r2, #3
 8007432:	3a04      	subs	r2, #4
 8007434:	2a24      	cmp	r2, #36	; 0x24
 8007436:	d81a      	bhi.n	800746e <_calloc_r+0x50>
 8007438:	2a13      	cmp	r2, #19
 800743a:	d912      	bls.n	8007462 <_calloc_r+0x44>
 800743c:	2100      	movs	r1, #0
 800743e:	2a1b      	cmp	r2, #27
 8007440:	6001      	str	r1, [r0, #0]
 8007442:	6041      	str	r1, [r0, #4]
 8007444:	d802      	bhi.n	800744c <_calloc_r+0x2e>
 8007446:	f100 0308 	add.w	r3, r0, #8
 800744a:	e00b      	b.n	8007464 <_calloc_r+0x46>
 800744c:	2a24      	cmp	r2, #36	; 0x24
 800744e:	6081      	str	r1, [r0, #8]
 8007450:	60c1      	str	r1, [r0, #12]
 8007452:	bf11      	iteee	ne
 8007454:	f100 0310 	addne.w	r3, r0, #16
 8007458:	6101      	streq	r1, [r0, #16]
 800745a:	f100 0318 	addeq.w	r3, r0, #24
 800745e:	6141      	streq	r1, [r0, #20]
 8007460:	e000      	b.n	8007464 <_calloc_r+0x46>
 8007462:	4603      	mov	r3, r0
 8007464:	2200      	movs	r2, #0
 8007466:	601a      	str	r2, [r3, #0]
 8007468:	605a      	str	r2, [r3, #4]
 800746a:	609a      	str	r2, [r3, #8]
 800746c:	e002      	b.n	8007474 <_calloc_r+0x56>
 800746e:	2100      	movs	r1, #0
 8007470:	f000 f931 	bl	80076d6 <memset>
 8007474:	4620      	mov	r0, r4
 8007476:	bd10      	pop	{r4, pc}

08007478 <_malloc_trim_r>:
 8007478:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800747c:	4689      	mov	r9, r1
 800747e:	4f25      	ldr	r7, [pc, #148]	; (8007514 <_malloc_trim_r+0x9c>)
 8007480:	4606      	mov	r6, r0
 8007482:	f7ff fc66 	bl	8006d52 <__malloc_lock>
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	f8df 8094 	ldr.w	r8, [pc, #148]	; 8007520 <_malloc_trim_r+0xa8>
 800748c:	685d      	ldr	r5, [r3, #4]
 800748e:	f1a8 0411 	sub.w	r4, r8, #17
 8007492:	f025 0503 	bic.w	r5, r5, #3
 8007496:	442c      	add	r4, r5
 8007498:	ebc9 0404 	rsb	r4, r9, r4
 800749c:	fbb4 f4f8 	udiv	r4, r4, r8
 80074a0:	3c01      	subs	r4, #1
 80074a2:	fb08 f404 	mul.w	r4, r8, r4
 80074a6:	4544      	cmp	r4, r8
 80074a8:	da05      	bge.n	80074b6 <_malloc_trim_r+0x3e>
 80074aa:	4630      	mov	r0, r6
 80074ac:	f7ff fc52 	bl	8006d54 <__malloc_unlock>
 80074b0:	2000      	movs	r0, #0
 80074b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074b6:	2100      	movs	r1, #0
 80074b8:	4630      	mov	r0, r6
 80074ba:	f7ff ff21 	bl	8007300 <_sbrk_r>
 80074be:	68bb      	ldr	r3, [r7, #8]
 80074c0:	442b      	add	r3, r5
 80074c2:	4298      	cmp	r0, r3
 80074c4:	d1f1      	bne.n	80074aa <_malloc_trim_r+0x32>
 80074c6:	4261      	negs	r1, r4
 80074c8:	4630      	mov	r0, r6
 80074ca:	f7ff ff19 	bl	8007300 <_sbrk_r>
 80074ce:	3001      	adds	r0, #1
 80074d0:	d110      	bne.n	80074f4 <_malloc_trim_r+0x7c>
 80074d2:	2100      	movs	r1, #0
 80074d4:	4630      	mov	r0, r6
 80074d6:	f7ff ff13 	bl	8007300 <_sbrk_r>
 80074da:	68ba      	ldr	r2, [r7, #8]
 80074dc:	1a83      	subs	r3, r0, r2
 80074de:	2b0f      	cmp	r3, #15
 80074e0:	dde3      	ble.n	80074aa <_malloc_trim_r+0x32>
 80074e2:	490d      	ldr	r1, [pc, #52]	; (8007518 <_malloc_trim_r+0xa0>)
 80074e4:	f043 0301 	orr.w	r3, r3, #1
 80074e8:	6809      	ldr	r1, [r1, #0]
 80074ea:	6053      	str	r3, [r2, #4]
 80074ec:	1a40      	subs	r0, r0, r1
 80074ee:	490b      	ldr	r1, [pc, #44]	; (800751c <_malloc_trim_r+0xa4>)
 80074f0:	6008      	str	r0, [r1, #0]
 80074f2:	e7da      	b.n	80074aa <_malloc_trim_r+0x32>
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	4a09      	ldr	r2, [pc, #36]	; (800751c <_malloc_trim_r+0xa4>)
 80074f8:	1b2d      	subs	r5, r5, r4
 80074fa:	f045 0501 	orr.w	r5, r5, #1
 80074fe:	605d      	str	r5, [r3, #4]
 8007500:	6813      	ldr	r3, [r2, #0]
 8007502:	4630      	mov	r0, r6
 8007504:	1b1c      	subs	r4, r3, r4
 8007506:	6014      	str	r4, [r2, #0]
 8007508:	f7ff fc24 	bl	8006d54 <__malloc_unlock>
 800750c:	2001      	movs	r0, #1
 800750e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007512:	bf00      	nop
 8007514:	2000012c 	.word	0x2000012c
 8007518:	20000538 	.word	0x20000538
 800751c:	20000a84 	.word	0x20000a84
 8007520:	00000080 	.word	0x00000080

08007524 <_free_r>:
 8007524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007528:	4604      	mov	r4, r0
 800752a:	4688      	mov	r8, r1
 800752c:	2900      	cmp	r1, #0
 800752e:	f000 80ad 	beq.w	800768c <_free_r+0x168>
 8007532:	f7ff fc0e 	bl	8006d52 <__malloc_lock>
 8007536:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800753a:	4d55      	ldr	r5, [pc, #340]	; (8007690 <_free_r+0x16c>)
 800753c:	f022 0001 	bic.w	r0, r2, #1
 8007540:	f1a8 0308 	sub.w	r3, r8, #8
 8007544:	181f      	adds	r7, r3, r0
 8007546:	68a9      	ldr	r1, [r5, #8]
 8007548:	687e      	ldr	r6, [r7, #4]
 800754a:	428f      	cmp	r7, r1
 800754c:	f026 0603 	bic.w	r6, r6, #3
 8007550:	f002 0201 	and.w	r2, r2, #1
 8007554:	d11b      	bne.n	800758e <_free_r+0x6a>
 8007556:	4430      	add	r0, r6
 8007558:	b93a      	cbnz	r2, 800756a <_free_r+0x46>
 800755a:	f858 2c08 	ldr.w	r2, [r8, #-8]
 800755e:	1a9b      	subs	r3, r3, r2
 8007560:	6899      	ldr	r1, [r3, #8]
 8007562:	4410      	add	r0, r2
 8007564:	68da      	ldr	r2, [r3, #12]
 8007566:	60ca      	str	r2, [r1, #12]
 8007568:	6091      	str	r1, [r2, #8]
 800756a:	f040 0201 	orr.w	r2, r0, #1
 800756e:	605a      	str	r2, [r3, #4]
 8007570:	60ab      	str	r3, [r5, #8]
 8007572:	4b48      	ldr	r3, [pc, #288]	; (8007694 <_free_r+0x170>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4298      	cmp	r0, r3
 8007578:	d304      	bcc.n	8007584 <_free_r+0x60>
 800757a:	4b47      	ldr	r3, [pc, #284]	; (8007698 <_free_r+0x174>)
 800757c:	4620      	mov	r0, r4
 800757e:	6819      	ldr	r1, [r3, #0]
 8007580:	f7ff ff7a 	bl	8007478 <_malloc_trim_r>
 8007584:	4620      	mov	r0, r4
 8007586:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800758a:	f7ff bbe3 	b.w	8006d54 <__malloc_unlock>
 800758e:	607e      	str	r6, [r7, #4]
 8007590:	b97a      	cbnz	r2, 80075b2 <_free_r+0x8e>
 8007592:	f858 1c08 	ldr.w	r1, [r8, #-8]
 8007596:	f105 0e08 	add.w	lr, r5, #8
 800759a:	1a5b      	subs	r3, r3, r1
 800759c:	4408      	add	r0, r1
 800759e:	6899      	ldr	r1, [r3, #8]
 80075a0:	4571      	cmp	r1, lr
 80075a2:	d008      	beq.n	80075b6 <_free_r+0x92>
 80075a4:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 80075a8:	f8c1 e00c 	str.w	lr, [r1, #12]
 80075ac:	f8ce 1008 	str.w	r1, [lr, #8]
 80075b0:	e002      	b.n	80075b8 <_free_r+0x94>
 80075b2:	2200      	movs	r2, #0
 80075b4:	e000      	b.n	80075b8 <_free_r+0x94>
 80075b6:	2201      	movs	r2, #1
 80075b8:	19b9      	adds	r1, r7, r6
 80075ba:	6849      	ldr	r1, [r1, #4]
 80075bc:	07c9      	lsls	r1, r1, #31
 80075be:	d40e      	bmi.n	80075de <_free_r+0xba>
 80075c0:	4430      	add	r0, r6
 80075c2:	68b9      	ldr	r1, [r7, #8]
 80075c4:	b942      	cbnz	r2, 80075d8 <_free_r+0xb4>
 80075c6:	4e35      	ldr	r6, [pc, #212]	; (800769c <_free_r+0x178>)
 80075c8:	42b1      	cmp	r1, r6
 80075ca:	d105      	bne.n	80075d8 <_free_r+0xb4>
 80075cc:	616b      	str	r3, [r5, #20]
 80075ce:	612b      	str	r3, [r5, #16]
 80075d0:	2201      	movs	r2, #1
 80075d2:	60d9      	str	r1, [r3, #12]
 80075d4:	6099      	str	r1, [r3, #8]
 80075d6:	e002      	b.n	80075de <_free_r+0xba>
 80075d8:	68fe      	ldr	r6, [r7, #12]
 80075da:	60ce      	str	r6, [r1, #12]
 80075dc:	60b1      	str	r1, [r6, #8]
 80075de:	f040 0101 	orr.w	r1, r0, #1
 80075e2:	6059      	str	r1, [r3, #4]
 80075e4:	5018      	str	r0, [r3, r0]
 80075e6:	2a00      	cmp	r2, #0
 80075e8:	d1cc      	bne.n	8007584 <_free_r+0x60>
 80075ea:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80075ee:	d212      	bcs.n	8007616 <_free_r+0xf2>
 80075f0:	08c0      	lsrs	r0, r0, #3
 80075f2:	1081      	asrs	r1, r0, #2
 80075f4:	2201      	movs	r2, #1
 80075f6:	fa02 f101 	lsl.w	r1, r2, r1
 80075fa:	686a      	ldr	r2, [r5, #4]
 80075fc:	3001      	adds	r0, #1
 80075fe:	430a      	orrs	r2, r1
 8007600:	606a      	str	r2, [r5, #4]
 8007602:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 8007606:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 800760a:	3a08      	subs	r2, #8
 800760c:	60da      	str	r2, [r3, #12]
 800760e:	6099      	str	r1, [r3, #8]
 8007610:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 8007614:	e038      	b.n	8007688 <_free_r+0x164>
 8007616:	0a42      	lsrs	r2, r0, #9
 8007618:	2a04      	cmp	r2, #4
 800761a:	d802      	bhi.n	8007622 <_free_r+0xfe>
 800761c:	0982      	lsrs	r2, r0, #6
 800761e:	3238      	adds	r2, #56	; 0x38
 8007620:	e015      	b.n	800764e <_free_r+0x12a>
 8007622:	2a14      	cmp	r2, #20
 8007624:	d801      	bhi.n	800762a <_free_r+0x106>
 8007626:	325b      	adds	r2, #91	; 0x5b
 8007628:	e011      	b.n	800764e <_free_r+0x12a>
 800762a:	2a54      	cmp	r2, #84	; 0x54
 800762c:	d802      	bhi.n	8007634 <_free_r+0x110>
 800762e:	0b02      	lsrs	r2, r0, #12
 8007630:	326e      	adds	r2, #110	; 0x6e
 8007632:	e00c      	b.n	800764e <_free_r+0x12a>
 8007634:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8007638:	d802      	bhi.n	8007640 <_free_r+0x11c>
 800763a:	0bc2      	lsrs	r2, r0, #15
 800763c:	3277      	adds	r2, #119	; 0x77
 800763e:	e006      	b.n	800764e <_free_r+0x12a>
 8007640:	f240 5154 	movw	r1, #1364	; 0x554
 8007644:	428a      	cmp	r2, r1
 8007646:	bf9a      	itte	ls
 8007648:	0c82      	lsrls	r2, r0, #18
 800764a:	327c      	addls	r2, #124	; 0x7c
 800764c:	227e      	movhi	r2, #126	; 0x7e
 800764e:	1c51      	adds	r1, r2, #1
 8007650:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 8007654:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8007658:	428e      	cmp	r6, r1
 800765a:	4f0d      	ldr	r7, [pc, #52]	; (8007690 <_free_r+0x16c>)
 800765c:	d10b      	bne.n	8007676 <_free_r+0x152>
 800765e:	2101      	movs	r1, #1
 8007660:	1092      	asrs	r2, r2, #2
 8007662:	fa01 f202 	lsl.w	r2, r1, r2
 8007666:	6879      	ldr	r1, [r7, #4]
 8007668:	4311      	orrs	r1, r2
 800766a:	6079      	str	r1, [r7, #4]
 800766c:	4631      	mov	r1, r6
 800766e:	e008      	b.n	8007682 <_free_r+0x15e>
 8007670:	6889      	ldr	r1, [r1, #8]
 8007672:	428e      	cmp	r6, r1
 8007674:	d004      	beq.n	8007680 <_free_r+0x15c>
 8007676:	684a      	ldr	r2, [r1, #4]
 8007678:	f022 0203 	bic.w	r2, r2, #3
 800767c:	4290      	cmp	r0, r2
 800767e:	d3f7      	bcc.n	8007670 <_free_r+0x14c>
 8007680:	68ce      	ldr	r6, [r1, #12]
 8007682:	60de      	str	r6, [r3, #12]
 8007684:	6099      	str	r1, [r3, #8]
 8007686:	60b3      	str	r3, [r6, #8]
 8007688:	60cb      	str	r3, [r1, #12]
 800768a:	e77b      	b.n	8007584 <_free_r+0x60>
 800768c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007690:	2000012c 	.word	0x2000012c
 8007694:	20000534 	.word	0x20000534
 8007698:	20000a80 	.word	0x20000a80
 800769c:	20000134 	.word	0x20000134

080076a0 <memmove>:
 80076a0:	4288      	cmp	r0, r1
 80076a2:	b510      	push	{r4, lr}
 80076a4:	eb01 0302 	add.w	r3, r1, r2
 80076a8:	d801      	bhi.n	80076ae <memmove+0xe>
 80076aa:	1e42      	subs	r2, r0, #1
 80076ac:	e00b      	b.n	80076c6 <memmove+0x26>
 80076ae:	4298      	cmp	r0, r3
 80076b0:	d2fb      	bcs.n	80076aa <memmove+0xa>
 80076b2:	1881      	adds	r1, r0, r2
 80076b4:	1ad2      	subs	r2, r2, r3
 80076b6:	42d3      	cmn	r3, r2
 80076b8:	d004      	beq.n	80076c4 <memmove+0x24>
 80076ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80076be:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80076c2:	e7f8      	b.n	80076b6 <memmove+0x16>
 80076c4:	bd10      	pop	{r4, pc}
 80076c6:	4299      	cmp	r1, r3
 80076c8:	d004      	beq.n	80076d4 <memmove+0x34>
 80076ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80076ce:	f802 4f01 	strb.w	r4, [r2, #1]!
 80076d2:	e7f8      	b.n	80076c6 <memmove+0x26>
 80076d4:	bd10      	pop	{r4, pc}

080076d6 <memset>:
 80076d6:	4603      	mov	r3, r0
 80076d8:	4402      	add	r2, r0
 80076da:	4293      	cmp	r3, r2
 80076dc:	d002      	beq.n	80076e4 <memset+0xe>
 80076de:	f803 1b01 	strb.w	r1, [r3], #1
 80076e2:	e7fa      	b.n	80076da <memset+0x4>
 80076e4:	4770      	bx	lr
	...

080076e8 <_realloc_r>:
 80076e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076ec:	4681      	mov	r9, r0
 80076ee:	460c      	mov	r4, r1
 80076f0:	b929      	cbnz	r1, 80076fe <_realloc_r+0x16>
 80076f2:	4611      	mov	r1, r2
 80076f4:	b003      	add	sp, #12
 80076f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076fa:	f7ff b8f5 	b.w	80068e8 <_malloc_r>
 80076fe:	9201      	str	r2, [sp, #4]
 8007700:	f7ff fb27 	bl	8006d52 <__malloc_lock>
 8007704:	9a01      	ldr	r2, [sp, #4]
 8007706:	f854 ec04 	ldr.w	lr, [r4, #-4]
 800770a:	f102 080b 	add.w	r8, r2, #11
 800770e:	f1b8 0f16 	cmp.w	r8, #22
 8007712:	f1a4 0b08 	sub.w	fp, r4, #8
 8007716:	f02e 0503 	bic.w	r5, lr, #3
 800771a:	d903      	bls.n	8007724 <_realloc_r+0x3c>
 800771c:	f038 0807 	bics.w	r8, r8, #7
 8007720:	d502      	bpl.n	8007728 <_realloc_r+0x40>
 8007722:	e003      	b.n	800772c <_realloc_r+0x44>
 8007724:	f04f 0810 	mov.w	r8, #16
 8007728:	4590      	cmp	r8, r2
 800772a:	d204      	bcs.n	8007736 <_realloc_r+0x4e>
 800772c:	230c      	movs	r3, #12
 800772e:	f8c9 3000 	str.w	r3, [r9]
 8007732:	2000      	movs	r0, #0
 8007734:	e181      	b.n	8007a3a <_realloc_r+0x352>
 8007736:	45a8      	cmp	r8, r5
 8007738:	f340 8154 	ble.w	80079e4 <_realloc_r+0x2fc>
 800773c:	4ba8      	ldr	r3, [pc, #672]	; (80079e0 <_realloc_r+0x2f8>)
 800773e:	eb0b 0105 	add.w	r1, fp, r5
 8007742:	6898      	ldr	r0, [r3, #8]
 8007744:	684f      	ldr	r7, [r1, #4]
 8007746:	4281      	cmp	r1, r0
 8007748:	d005      	beq.n	8007756 <_realloc_r+0x6e>
 800774a:	f027 0601 	bic.w	r6, r7, #1
 800774e:	440e      	add	r6, r1
 8007750:	6876      	ldr	r6, [r6, #4]
 8007752:	07f6      	lsls	r6, r6, #31
 8007754:	d426      	bmi.n	80077a4 <_realloc_r+0xbc>
 8007756:	f027 0a03 	bic.w	sl, r7, #3
 800775a:	4281      	cmp	r1, r0
 800775c:	eb05 070a 	add.w	r7, r5, sl
 8007760:	d118      	bne.n	8007794 <_realloc_r+0xac>
 8007762:	f108 0610 	add.w	r6, r8, #16
 8007766:	42b7      	cmp	r7, r6
 8007768:	db1f      	blt.n	80077aa <_realloc_r+0xc2>
 800776a:	ebc8 0707 	rsb	r7, r8, r7
 800776e:	eb0b 0008 	add.w	r0, fp, r8
 8007772:	f047 0701 	orr.w	r7, r7, #1
 8007776:	6098      	str	r0, [r3, #8]
 8007778:	6047      	str	r7, [r0, #4]
 800777a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800777e:	4648      	mov	r0, r9
 8007780:	f003 0301 	and.w	r3, r3, #1
 8007784:	ea43 0308 	orr.w	r3, r3, r8
 8007788:	f844 3c04 	str.w	r3, [r4, #-4]
 800778c:	f7ff fae2 	bl	8006d54 <__malloc_unlock>
 8007790:	4620      	mov	r0, r4
 8007792:	e152      	b.n	8007a3a <_realloc_r+0x352>
 8007794:	45b8      	cmp	r8, r7
 8007796:	dc08      	bgt.n	80077aa <_realloc_r+0xc2>
 8007798:	68cb      	ldr	r3, [r1, #12]
 800779a:	688a      	ldr	r2, [r1, #8]
 800779c:	463d      	mov	r5, r7
 800779e:	60d3      	str	r3, [r2, #12]
 80077a0:	609a      	str	r2, [r3, #8]
 80077a2:	e11f      	b.n	80079e4 <_realloc_r+0x2fc>
 80077a4:	f04f 0a00 	mov.w	sl, #0
 80077a8:	4651      	mov	r1, sl
 80077aa:	f01e 0f01 	tst.w	lr, #1
 80077ae:	f040 80c6 	bne.w	800793e <_realloc_r+0x256>
 80077b2:	f854 7c08 	ldr.w	r7, [r4, #-8]
 80077b6:	ebc7 070b 	rsb	r7, r7, fp
 80077ba:	687e      	ldr	r6, [r7, #4]
 80077bc:	f026 0603 	bic.w	r6, r6, #3
 80077c0:	442e      	add	r6, r5
 80077c2:	2900      	cmp	r1, #0
 80077c4:	f000 8085 	beq.w	80078d2 <_realloc_r+0x1ea>
 80077c8:	4281      	cmp	r1, r0
 80077ca:	44b2      	add	sl, r6
 80077cc:	d148      	bne.n	8007860 <_realloc_r+0x178>
 80077ce:	f108 0110 	add.w	r1, r8, #16
 80077d2:	458a      	cmp	sl, r1
 80077d4:	db7d      	blt.n	80078d2 <_realloc_r+0x1ea>
 80077d6:	463e      	mov	r6, r7
 80077d8:	68fa      	ldr	r2, [r7, #12]
 80077da:	f856 1f08 	ldr.w	r1, [r6, #8]!
 80077de:	60ca      	str	r2, [r1, #12]
 80077e0:	6091      	str	r1, [r2, #8]
 80077e2:	1f2a      	subs	r2, r5, #4
 80077e4:	2a24      	cmp	r2, #36	; 0x24
 80077e6:	d826      	bhi.n	8007836 <_realloc_r+0x14e>
 80077e8:	2a13      	cmp	r2, #19
 80077ea:	d91c      	bls.n	8007826 <_realloc_r+0x13e>
 80077ec:	6821      	ldr	r1, [r4, #0]
 80077ee:	2a1b      	cmp	r2, #27
 80077f0:	60b9      	str	r1, [r7, #8]
 80077f2:	6861      	ldr	r1, [r4, #4]
 80077f4:	60f9      	str	r1, [r7, #12]
 80077f6:	d803      	bhi.n	8007800 <_realloc_r+0x118>
 80077f8:	f107 0210 	add.w	r2, r7, #16
 80077fc:	3408      	adds	r4, #8
 80077fe:	e013      	b.n	8007828 <_realloc_r+0x140>
 8007800:	68a1      	ldr	r1, [r4, #8]
 8007802:	2a24      	cmp	r2, #36	; 0x24
 8007804:	6139      	str	r1, [r7, #16]
 8007806:	68e1      	ldr	r1, [r4, #12]
 8007808:	bf18      	it	ne
 800780a:	f107 0218 	addne.w	r2, r7, #24
 800780e:	6179      	str	r1, [r7, #20]
 8007810:	bf09      	itett	eq
 8007812:	6922      	ldreq	r2, [r4, #16]
 8007814:	3410      	addne	r4, #16
 8007816:	61ba      	streq	r2, [r7, #24]
 8007818:	6961      	ldreq	r1, [r4, #20]
 800781a:	bf02      	ittt	eq
 800781c:	f107 0220 	addeq.w	r2, r7, #32
 8007820:	61f9      	streq	r1, [r7, #28]
 8007822:	3418      	addeq	r4, #24
 8007824:	e000      	b.n	8007828 <_realloc_r+0x140>
 8007826:	4632      	mov	r2, r6
 8007828:	6821      	ldr	r1, [r4, #0]
 800782a:	6011      	str	r1, [r2, #0]
 800782c:	6861      	ldr	r1, [r4, #4]
 800782e:	6051      	str	r1, [r2, #4]
 8007830:	68a1      	ldr	r1, [r4, #8]
 8007832:	6091      	str	r1, [r2, #8]
 8007834:	e005      	b.n	8007842 <_realloc_r+0x15a>
 8007836:	4621      	mov	r1, r4
 8007838:	4630      	mov	r0, r6
 800783a:	9301      	str	r3, [sp, #4]
 800783c:	f7ff ff30 	bl	80076a0 <memmove>
 8007840:	9b01      	ldr	r3, [sp, #4]
 8007842:	eb07 0208 	add.w	r2, r7, r8
 8007846:	ebc8 0a0a 	rsb	sl, r8, sl
 800784a:	609a      	str	r2, [r3, #8]
 800784c:	f04a 0301 	orr.w	r3, sl, #1
 8007850:	6053      	str	r3, [r2, #4]
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f003 0301 	and.w	r3, r3, #1
 8007858:	ea43 0308 	orr.w	r3, r3, r8
 800785c:	607b      	str	r3, [r7, #4]
 800785e:	e0b9      	b.n	80079d4 <_realloc_r+0x2ec>
 8007860:	45d0      	cmp	r8, sl
 8007862:	dc36      	bgt.n	80078d2 <_realloc_r+0x1ea>
 8007864:	4638      	mov	r0, r7
 8007866:	68cb      	ldr	r3, [r1, #12]
 8007868:	688a      	ldr	r2, [r1, #8]
 800786a:	60d3      	str	r3, [r2, #12]
 800786c:	609a      	str	r2, [r3, #8]
 800786e:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	60d3      	str	r3, [r2, #12]
 8007876:	609a      	str	r2, [r3, #8]
 8007878:	1f2a      	subs	r2, r5, #4
 800787a:	2a24      	cmp	r2, #36	; 0x24
 800787c:	d824      	bhi.n	80078c8 <_realloc_r+0x1e0>
 800787e:	2a13      	cmp	r2, #19
 8007880:	d91b      	bls.n	80078ba <_realloc_r+0x1d2>
 8007882:	6823      	ldr	r3, [r4, #0]
 8007884:	2a1b      	cmp	r2, #27
 8007886:	60bb      	str	r3, [r7, #8]
 8007888:	6863      	ldr	r3, [r4, #4]
 800788a:	60fb      	str	r3, [r7, #12]
 800788c:	d803      	bhi.n	8007896 <_realloc_r+0x1ae>
 800788e:	f107 0010 	add.w	r0, r7, #16
 8007892:	3408      	adds	r4, #8
 8007894:	e011      	b.n	80078ba <_realloc_r+0x1d2>
 8007896:	68a3      	ldr	r3, [r4, #8]
 8007898:	2a24      	cmp	r2, #36	; 0x24
 800789a:	613b      	str	r3, [r7, #16]
 800789c:	68e3      	ldr	r3, [r4, #12]
 800789e:	bf18      	it	ne
 80078a0:	f107 0018 	addne.w	r0, r7, #24
 80078a4:	617b      	str	r3, [r7, #20]
 80078a6:	bf09      	itett	eq
 80078a8:	6923      	ldreq	r3, [r4, #16]
 80078aa:	3410      	addne	r4, #16
 80078ac:	61bb      	streq	r3, [r7, #24]
 80078ae:	6963      	ldreq	r3, [r4, #20]
 80078b0:	bf02      	ittt	eq
 80078b2:	f107 0020 	addeq.w	r0, r7, #32
 80078b6:	61fb      	streq	r3, [r7, #28]
 80078b8:	3418      	addeq	r4, #24
 80078ba:	6823      	ldr	r3, [r4, #0]
 80078bc:	6003      	str	r3, [r0, #0]
 80078be:	6863      	ldr	r3, [r4, #4]
 80078c0:	6043      	str	r3, [r0, #4]
 80078c2:	68a3      	ldr	r3, [r4, #8]
 80078c4:	6083      	str	r3, [r0, #8]
 80078c6:	e002      	b.n	80078ce <_realloc_r+0x1e6>
 80078c8:	4621      	mov	r1, r4
 80078ca:	f7ff fee9 	bl	80076a0 <memmove>
 80078ce:	4655      	mov	r5, sl
 80078d0:	e02f      	b.n	8007932 <_realloc_r+0x24a>
 80078d2:	45b0      	cmp	r8, r6
 80078d4:	dc33      	bgt.n	800793e <_realloc_r+0x256>
 80078d6:	4638      	mov	r0, r7
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	f850 2f08 	ldr.w	r2, [r0, #8]!
 80078de:	60d3      	str	r3, [r2, #12]
 80078e0:	609a      	str	r2, [r3, #8]
 80078e2:	1f2a      	subs	r2, r5, #4
 80078e4:	2a24      	cmp	r2, #36	; 0x24
 80078e6:	d826      	bhi.n	8007936 <_realloc_r+0x24e>
 80078e8:	2a13      	cmp	r2, #19
 80078ea:	d91b      	bls.n	8007924 <_realloc_r+0x23c>
 80078ec:	6823      	ldr	r3, [r4, #0]
 80078ee:	2a1b      	cmp	r2, #27
 80078f0:	60bb      	str	r3, [r7, #8]
 80078f2:	6863      	ldr	r3, [r4, #4]
 80078f4:	60fb      	str	r3, [r7, #12]
 80078f6:	d803      	bhi.n	8007900 <_realloc_r+0x218>
 80078f8:	f107 0010 	add.w	r0, r7, #16
 80078fc:	3408      	adds	r4, #8
 80078fe:	e011      	b.n	8007924 <_realloc_r+0x23c>
 8007900:	68a3      	ldr	r3, [r4, #8]
 8007902:	2a24      	cmp	r2, #36	; 0x24
 8007904:	613b      	str	r3, [r7, #16]
 8007906:	68e3      	ldr	r3, [r4, #12]
 8007908:	bf18      	it	ne
 800790a:	f107 0018 	addne.w	r0, r7, #24
 800790e:	617b      	str	r3, [r7, #20]
 8007910:	bf09      	itett	eq
 8007912:	6923      	ldreq	r3, [r4, #16]
 8007914:	3410      	addne	r4, #16
 8007916:	61bb      	streq	r3, [r7, #24]
 8007918:	6963      	ldreq	r3, [r4, #20]
 800791a:	bf02      	ittt	eq
 800791c:	f107 0020 	addeq.w	r0, r7, #32
 8007920:	61fb      	streq	r3, [r7, #28]
 8007922:	3418      	addeq	r4, #24
 8007924:	6823      	ldr	r3, [r4, #0]
 8007926:	6003      	str	r3, [r0, #0]
 8007928:	6863      	ldr	r3, [r4, #4]
 800792a:	6043      	str	r3, [r0, #4]
 800792c:	68a3      	ldr	r3, [r4, #8]
 800792e:	6083      	str	r3, [r0, #8]
 8007930:	4635      	mov	r5, r6
 8007932:	46bb      	mov	fp, r7
 8007934:	e056      	b.n	80079e4 <_realloc_r+0x2fc>
 8007936:	4621      	mov	r1, r4
 8007938:	f7ff feb2 	bl	80076a0 <memmove>
 800793c:	e7f8      	b.n	8007930 <_realloc_r+0x248>
 800793e:	4611      	mov	r1, r2
 8007940:	4648      	mov	r0, r9
 8007942:	f7fe ffd1 	bl	80068e8 <_malloc_r>
 8007946:	4606      	mov	r6, r0
 8007948:	2800      	cmp	r0, #0
 800794a:	d043      	beq.n	80079d4 <_realloc_r+0x2ec>
 800794c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8007950:	f1a0 0208 	sub.w	r2, r0, #8
 8007954:	f023 0301 	bic.w	r3, r3, #1
 8007958:	445b      	add	r3, fp
 800795a:	429a      	cmp	r2, r3
 800795c:	d105      	bne.n	800796a <_realloc_r+0x282>
 800795e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8007962:	f023 0303 	bic.w	r3, r3, #3
 8007966:	441d      	add	r5, r3
 8007968:	e03c      	b.n	80079e4 <_realloc_r+0x2fc>
 800796a:	1f2a      	subs	r2, r5, #4
 800796c:	2a24      	cmp	r2, #36	; 0x24
 800796e:	d82a      	bhi.n	80079c6 <_realloc_r+0x2de>
 8007970:	2a13      	cmp	r2, #19
 8007972:	d91f      	bls.n	80079b4 <_realloc_r+0x2cc>
 8007974:	6823      	ldr	r3, [r4, #0]
 8007976:	2a1b      	cmp	r2, #27
 8007978:	6003      	str	r3, [r0, #0]
 800797a:	6863      	ldr	r3, [r4, #4]
 800797c:	6043      	str	r3, [r0, #4]
 800797e:	d804      	bhi.n	800798a <_realloc_r+0x2a2>
 8007980:	f100 0308 	add.w	r3, r0, #8
 8007984:	f104 0208 	add.w	r2, r4, #8
 8007988:	e016      	b.n	80079b8 <_realloc_r+0x2d0>
 800798a:	68a3      	ldr	r3, [r4, #8]
 800798c:	2a24      	cmp	r2, #36	; 0x24
 800798e:	6083      	str	r3, [r0, #8]
 8007990:	68e3      	ldr	r3, [r4, #12]
 8007992:	bf18      	it	ne
 8007994:	f104 0210 	addne.w	r2, r4, #16
 8007998:	60c3      	str	r3, [r0, #12]
 800799a:	bf09      	itett	eq
 800799c:	6923      	ldreq	r3, [r4, #16]
 800799e:	f100 0310 	addne.w	r3, r0, #16
 80079a2:	6103      	streq	r3, [r0, #16]
 80079a4:	6961      	ldreq	r1, [r4, #20]
 80079a6:	bf02      	ittt	eq
 80079a8:	f100 0318 	addeq.w	r3, r0, #24
 80079ac:	f104 0218 	addeq.w	r2, r4, #24
 80079b0:	6141      	streq	r1, [r0, #20]
 80079b2:	e001      	b.n	80079b8 <_realloc_r+0x2d0>
 80079b4:	4603      	mov	r3, r0
 80079b6:	4622      	mov	r2, r4
 80079b8:	6811      	ldr	r1, [r2, #0]
 80079ba:	6019      	str	r1, [r3, #0]
 80079bc:	6851      	ldr	r1, [r2, #4]
 80079be:	6059      	str	r1, [r3, #4]
 80079c0:	6892      	ldr	r2, [r2, #8]
 80079c2:	609a      	str	r2, [r3, #8]
 80079c4:	e002      	b.n	80079cc <_realloc_r+0x2e4>
 80079c6:	4621      	mov	r1, r4
 80079c8:	f7ff fe6a 	bl	80076a0 <memmove>
 80079cc:	4621      	mov	r1, r4
 80079ce:	4648      	mov	r0, r9
 80079d0:	f7ff fda8 	bl	8007524 <_free_r>
 80079d4:	4648      	mov	r0, r9
 80079d6:	f7ff f9bd 	bl	8006d54 <__malloc_unlock>
 80079da:	4630      	mov	r0, r6
 80079dc:	e02d      	b.n	8007a3a <_realloc_r+0x352>
 80079de:	bf00      	nop
 80079e0:	2000012c 	.word	0x2000012c
 80079e4:	ebc8 0205 	rsb	r2, r8, r5
 80079e8:	2a0f      	cmp	r2, #15
 80079ea:	f8db 3004 	ldr.w	r3, [fp, #4]
 80079ee:	d914      	bls.n	8007a1a <_realloc_r+0x332>
 80079f0:	f003 0301 	and.w	r3, r3, #1
 80079f4:	ea43 0308 	orr.w	r3, r3, r8
 80079f8:	f8cb 3004 	str.w	r3, [fp, #4]
 80079fc:	eb0b 0108 	add.w	r1, fp, r8
 8007a00:	f042 0301 	orr.w	r3, r2, #1
 8007a04:	604b      	str	r3, [r1, #4]
 8007a06:	440a      	add	r2, r1
 8007a08:	6853      	ldr	r3, [r2, #4]
 8007a0a:	3108      	adds	r1, #8
 8007a0c:	f043 0301 	orr.w	r3, r3, #1
 8007a10:	6053      	str	r3, [r2, #4]
 8007a12:	4648      	mov	r0, r9
 8007a14:	f7ff fd86 	bl	8007524 <_free_r>
 8007a18:	e00a      	b.n	8007a30 <_realloc_r+0x348>
 8007a1a:	f003 0301 	and.w	r3, r3, #1
 8007a1e:	432b      	orrs	r3, r5
 8007a20:	f8cb 3004 	str.w	r3, [fp, #4]
 8007a24:	eb0b 0205 	add.w	r2, fp, r5
 8007a28:	6853      	ldr	r3, [r2, #4]
 8007a2a:	f043 0301 	orr.w	r3, r3, #1
 8007a2e:	6053      	str	r3, [r2, #4]
 8007a30:	4648      	mov	r0, r9
 8007a32:	f7ff f98f 	bl	8006d54 <__malloc_unlock>
 8007a36:	f10b 0008 	add.w	r0, fp, #8
 8007a3a:	b003      	add	sp, #12
 8007a3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007a40 <_sbrk>:
 8007a40:	4b04      	ldr	r3, [pc, #16]	; (8007a54 <_sbrk+0x14>)
 8007a42:	4602      	mov	r2, r0
 8007a44:	6819      	ldr	r1, [r3, #0]
 8007a46:	b909      	cbnz	r1, 8007a4c <_sbrk+0xc>
 8007a48:	4903      	ldr	r1, [pc, #12]	; (8007a58 <_sbrk+0x18>)
 8007a4a:	6019      	str	r1, [r3, #0]
 8007a4c:	6818      	ldr	r0, [r3, #0]
 8007a4e:	4402      	add	r2, r0
 8007a50:	601a      	str	r2, [r3, #0]
 8007a52:	4770      	bx	lr
 8007a54:	20000aac 	.word	0x20000aac
 8007a58:	20008c70 	.word	0x20008c70
 8007a5c:	72617453 	.word	0x72617453
 8007a60:	61542074 	.word	0x61542074
 8007a64:	00006b73 	.word	0x00006b73
 8007a68:	000d0a0a 	.word	0x000d0a0a
 8007a6c:	61657243 	.word	0x61657243
 8007a70:	676e6974 	.word	0x676e6974
 8007a74:	70704120 	.word	0x70704120
 8007a78:	6163696c 	.word	0x6163696c
 8007a7c:	6e6f6974 	.word	0x6e6f6974
 8007a80:	72656b20 	.word	0x72656b20
 8007a84:	206c656e 	.word	0x206c656e
 8007a88:	656a626f 	.word	0x656a626f
 8007a8c:	0a737463 	.word	0x0a737463
 8007a90:	0000000d 	.word	0x0000000d
 8007a94:	61657243 	.word	0x61657243
 8007a98:	676e6974 	.word	0x676e6974
 8007a9c:	70704120 	.word	0x70704120
 8007aa0:	6163696c 	.word	0x6163696c
 8007aa4:	6e6f6974 	.word	0x6e6f6974
 8007aa8:	73615420 	.word	0x73615420
 8007aac:	0d0a736b 	.word	0x0d0a736b
 8007ab0:	00000000 	.word	0x00000000
 8007ab4:	69726553 	.word	0x69726553
 8007ab8:	54206c61 	.word	0x54206c61
 8007abc:	61572078 	.word	0x61572078
 8007ac0:	00007469 	.word	0x00007469
 8007ac4:	69726553 	.word	0x69726553
 8007ac8:	52206c61 	.word	0x52206c61
 8007acc:	61572078 	.word	0x61572078
 8007ad0:	00007469 	.word	0x00007469
 8007ad4:	69726553 	.word	0x69726553
 8007ad8:	4c206c61 	.word	0x4c206c61
 8007adc:	006b636f 	.word	0x006b636f
 8007ae0:	0000003f 	.word	0x0000003f
 8007ae4:	4f2f4375 	.word	0x4f2f4375
 8007ae8:	49492d53 	.word	0x49492d53
 8007aec:	6c644920 	.word	0x6c644920
 8007af0:	00000065 	.word	0x00000065
 8007af4:	4f2f4375 	.word	0x4f2f4375
 8007af8:	49492d53 	.word	0x49492d53
 8007afc:	61745320 	.word	0x61745320
 8007b00:	00000074 	.word	0x00000074
 8007b04:	0000003f 	.word	0x0000003f
 8007b08:	0000003f 	.word	0x0000003f
 8007b0c:	0000003f 	.word	0x0000003f
 8007b10:	0000003f 	.word	0x0000003f
 8007b14:	0000003f 	.word	0x0000003f
 8007b18:	4f2f4375 	.word	0x4f2f4375
 8007b1c:	49492d53 	.word	0x49492d53
 8007b20:	726d5420 	.word	0x726d5420
 8007b24:	6b636f4c 	.word	0x6b636f4c
 8007b28:	00000000 	.word	0x00000000
 8007b2c:	4f2f4375 	.word	0x4f2f4375
 8007b30:	49492d53 	.word	0x49492d53
 8007b34:	726d5420 	.word	0x726d5420
 8007b38:	6e676953 	.word	0x6e676953
 8007b3c:	00006c61 	.word	0x00006c61
 8007b40:	4f2f4375 	.word	0x4f2f4375
 8007b44:	49492d53 	.word	0x49492d53
 8007b48:	726d5420 	.word	0x726d5420
 8007b4c:	00000000 	.word	0x00000000

08007b50 <APBAHBPrescTable>:
 8007b50:	00000000 04030201 04030201 09080706     ................

08007b60 <ADCPrescTable>:
 8007b60:	08060402                                ....

08007b64 <OSDebugEn>:
 8007b64:	00000001                                ....

08007b68 <OSEndiannessTest>:
 8007b68:	12345678                                xV4.

08007b6c <OSEventEn>:
 8007b6c:	00af0001                                         ..

08007b6e <OSEventMax>:
 8007b6e:	000100af                                         ..

08007b70 <OSEventNameEn>:
 8007b70:	00180001                                         ..

08007b72 <OSEventSize>:
 8007b72:	10680018                                         ..

08007b74 <OSEventTblSize>:
 8007b74:	00011068                                         h.

08007b76 <OSEventMultiEn>:
 8007b76:	00010001                                         ..

08007b78 <OSFlagEn>:
 8007b78:	00100001                                         ..

08007b7a <OSFlagGrpSize>:
 8007b7a:	00140010                                         ..

08007b7c <OSFlagNodeSize>:
 8007b7c:	00020014                                         ..

08007b7e <OSFlagWidth>:
 8007b7e:	00050002                                         ..

08007b80 <OSFlagMax>:
 8007b80:	00010005                                         ..

08007b82 <OSFlagNameEn>:
 8007b82:	003f0001                                         ..

08007b84 <OSLowestPrio>:
 8007b84:	0001003f                                         ?.

08007b86 <OSMboxEn>:
 8007b86:	00010001                                         ..

08007b88 <OSMemEn>:
 8007b88:	00050001                                         ..

08007b8a <OSMemMax>:
 8007b8a:	00010005                                         ..

08007b8c <OSMemNameEn>:
 8007b8c:	00180001                                         ..

08007b8e <OSMemSize>:
 8007b8e:	00780018                                         ..

08007b90 <OSMemTblSize>:
 8007b90:	00010078                                         x.

08007b92 <OSMutexEn>:
 8007b92:	00040001                                         ..

08007b94 <OSPtrSize>:
 8007b94:	00010004                                         ..

08007b96 <OSQEn>:
 8007b96:	00040001                                         ..

08007b98 <OSQMax>:
 8007b98:	00180004                                         ..

08007b9a <OSQSize>:
 8007b9a:	00080018                                         ..

08007b9c <OSRdyTblSize>:
 8007b9c:	00010008                                         ..

08007b9e <OSSemEn>:
 8007b9e:	00040001                                         ..

08007ba0 <OSStkWidth>:
 8007ba0:	00010004                                         ..

08007ba2 <OSTaskCreateEn>:
 8007ba2:	00010001                                         ..

08007ba4 <OSTaskCreateExtEn>:
 8007ba4:	00010001                                         ..

08007ba6 <OSTaskDelEn>:
 8007ba6:	00800001                                         ..

08007ba8 <OSTaskIdleStkSize>:
 8007ba8:	00010080                                         ..

08007baa <OSTaskProfileEn>:
 8007baa:	00160001                                         ..

08007bac <OSTaskMax>:
 8007bac:	00010016                                         ..

08007bae <OSTaskNameEn>:
 8007bae:	00010001                                         ..

08007bb0 <OSTaskStatEn>:
 8007bb0:	00800001                                         ..

08007bb2 <OSTaskStatStkSize>:
 8007bb2:	00010080                                         ..

08007bb4 <OSTaskStatStkChkEn>:
 8007bb4:	00010001                                         ..

08007bb6 <OSTaskSwHookEn>:
 8007bb6:	00400001                                         ..

08007bb8 <OSTCBPrioTblMax>:
 8007bb8:	00580040                                         @.

08007bba <OSTCBSize>:
 8007bba:	03e80058                                         X.

08007bbc <OSTicksPerSec>:
 8007bbc:	000103e8                                         ..

08007bbe <OSTimeTickHookEn>:
 8007bbe:	72170001                                         ..

08007bc0 <OSVersionNbr>:
 8007bc0:	00017217                                         .r

08007bc2 <OSTmrEn>:
 8007bc2:	00100001                                         ..

08007bc4 <OSTmrCfgMax>:
 8007bc4:	00010010                                         ..

08007bc6 <OSTmrCfgNameEn>:
 8007bc6:	00080001                                         ..

08007bc8 <OSTmrCfgWheelSize>:
 8007bc8:	000a0008                                         ..

08007bca <OSTmrCfgTicksPerSec>:
 8007bca:	0028000a                                         ..

08007bcc <OSTmrSize>:
 8007bcc:	02800028                                         (.

08007bce <OSTmrTblSize>:
 8007bce:	00080280                                         ..

08007bd0 <OSTmrWheelSize>:
 8007bd0:	00400008                                         ..

08007bd2 <OSTmrWheelTblSize>:
 8007bd2:	213a0040                                         @.

08007bd4 <OSDataSize>:
 8007bd4:	0000213a                                :!..

08007bd8 <OSUnMapTbl>:
 8007bd8:	00010000 00010002 00010003 00010002     ................
 8007be8:	00010004 00010002 00010003 00010002     ................
 8007bf8:	00010005 00010002 00010003 00010002     ................
 8007c08:	00010004 00010002 00010003 00010002     ................
 8007c18:	00010006 00010002 00010003 00010002     ................
 8007c28:	00010004 00010002 00010003 00010002     ................
 8007c38:	00010005 00010002 00010003 00010002     ................
 8007c48:	00010004 00010002 00010003 00010002     ................
 8007c58:	00010007 00010002 00010003 00010002     ................
 8007c68:	00010004 00010002 00010003 00010002     ................
 8007c78:	00010005 00010002 00010003 00010002     ................
 8007c88:	00010004 00010002 00010003 00010002     ................
 8007c98:	00010006 00010002 00010003 00010002     ................
 8007ca8:	00010004 00010002 00010003 00010002     ................
 8007cb8:	00010005 00010002 00010003 00010002     ................
 8007cc8:	00010004 00010002 00010003 00010002     ................
 8007cd8:	30300043                                         C.

08007cda <zeroes.7043>:
 8007cda:	30303030 30303030 30303030 30303030     0000000000000000
 8007cea:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
 8007cfa:	33323130 37363534 42413938 46454443     0123456789ABCDEF
 8007d0a:	32313000 36353433 61393837 65646362     .0123456789abcde
 8007d1a:	00300066                                f.0.

08007d1e <blanks.7042>:
 8007d1e:	20202020 20202020 20202020 20202020                     
 8007d2e:	69666e49 7974696e 4e614e00 534f5000     Infinity.NaN.POS
 8007d3e:	2e005849 00000000 00000000                       IX........

08007d48 <__mprec_tens>:
 8007d48:	00000000 3ff00000 00000000 40240000     .......?......$@
 8007d58:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
 8007d68:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
 8007d78:	00000000 412e8480 00000000 416312d0     .......A......cA
 8007d88:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
 8007d98:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
 8007da8:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
 8007db8:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
 8007dc8:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
 8007dd8:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
 8007de8:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
 8007df8:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
 8007e08:	79d99db4 44ea7843                       ...yCx.D

08007e10 <__mprec_bigtens>:
 8007e10:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
 8007e20:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
 8007e30:	7f73bf3c 75154fdd                       <.s..O.u

08007e38 <p05.5386>:
 8007e38:	00000005 00000019 0000007d              ........}...

08007e44 <_init>:
 8007e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e46:	bf00      	nop
 8007e48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e4a:	bc08      	pop	{r3}
 8007e4c:	469e      	mov	lr, r3
 8007e4e:	4770      	bx	lr

08007e50 <_fini>:
 8007e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e52:	bf00      	nop
 8007e54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e56:	bc08      	pop	{r3}
 8007e58:	469e      	mov	lr, r3
 8007e5a:	4770      	bx	lr
