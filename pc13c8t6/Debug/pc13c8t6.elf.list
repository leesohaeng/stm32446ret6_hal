
pc13c8t6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ca0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08000dac  08000dac  00010dac  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08000dd0  08000dd0  00010dd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000dd4  08000dd4  00010dd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08000dd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  20000004  08000ddc  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000024  08000ddc  00020024  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_line   00001b30  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00003bfd  00000000  00000000  00021b5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000e9c  00000000  00000000  0002575a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000300  00000000  00000000  000265f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000470  00000000  00000000  000268f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000113d  00000000  00000000  00026d68  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000104b  00000000  00000000  00027ea5  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007e  00000000  00000000  00028ef0  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000062c  00000000  00000000  00028f70  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	08000d94 	.word	0x08000d94

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	08000d94 	.word	0x08000d94

0800014c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800014c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800014e:	e003      	b.n	8000158 <LoopCopyDataInit>

08000150 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000150:	4b0b      	ldr	r3, [pc, #44]	; (8000180 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000152:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000154:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000156:	3104      	adds	r1, #4

08000158 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000158:	480a      	ldr	r0, [pc, #40]	; (8000184 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800015a:	4b0b      	ldr	r3, [pc, #44]	; (8000188 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800015c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800015e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000160:	d3f6      	bcc.n	8000150 <CopyDataInit>
  ldr r2, =_sbss
 8000162:	4a0a      	ldr	r2, [pc, #40]	; (800018c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000164:	e002      	b.n	800016c <LoopFillZerobss>

08000166 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000166:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000168:	f842 3b04 	str.w	r3, [r2], #4

0800016c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800016c:	4b08      	ldr	r3, [pc, #32]	; (8000190 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800016e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000170:	d3f9      	bcc.n	8000166 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000172:	f000 f811 	bl	8000198 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000176:	f000 fde7 	bl	8000d48 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800017a:	f000 fd59 	bl	8000c30 <main>
  bx lr
 800017e:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
  b LoopCopyDataInit

CopyDataInit:
  ldr r3, =_sidata
 8000180:	08000dd8 	.word	0x08000dd8
  ldr r3, [r3, r1]
  str r3, [r0, r1]
  adds r1, r1, #4

LoopCopyDataInit:
  ldr r0, =_sdata
 8000184:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000188:	20000004 	.word	0x20000004
  adds r2, r0, r1
  cmp r2, r3
  bcc CopyDataInit
  ldr r2, =_sbss
 800018c:	20000004 	.word	0x20000004
FillZerobss:
  movs r3, #0
  str r3, [r2], #4

LoopFillZerobss:
  ldr r3, = _ebss
 8000190:	20000024 	.word	0x20000024

08000194 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000194:	e7fe      	b.n	8000194 <ADC1_2_IRQHandler>
	...

08000198 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000198:	4b0f      	ldr	r3, [pc, #60]	; (80001d8 <SystemInit+0x40>)
 800019a:	681a      	ldr	r2, [r3, #0]
 800019c:	f042 0201 	orr.w	r2, r2, #1
 80001a0:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 80001a2:	6859      	ldr	r1, [r3, #4]
 80001a4:	4a0d      	ldr	r2, [pc, #52]	; (80001dc <SystemInit+0x44>)
 80001a6:	400a      	ands	r2, r1
 80001a8:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80001aa:	681a      	ldr	r2, [r3, #0]
 80001ac:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80001b0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80001b4:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80001b6:	681a      	ldr	r2, [r3, #0]
 80001b8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80001bc:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80001be:	685a      	ldr	r2, [r3, #4]
 80001c0:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80001c4:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 80001c6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80001ca:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <SystemInit+0x48>)
 80001ce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80001d2:	609a      	str	r2, [r3, #8]
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	40021000 	.word	0x40021000
 80001dc:	f8ff0000 	.word	0xf8ff0000
 80001e0:	e000ed00 	.word	0xe000ed00

080001e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80001e8:	f000 fce4 	bl	8000bb4 <HAL_RCC_GetHCLKFreq>
 80001ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001f0:	fbb0 f0f3 	udiv	r0, r0, r3
 80001f4:	f000 f87c 	bl	80002f0 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 80001f8:	2200      	movs	r2, #0
 80001fa:	4621      	mov	r1, r4
 80001fc:	f04f 30ff 	mov.w	r0, #4294967295
 8000200:	f000 f842 	bl	8000288 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8000204:	2000      	movs	r0, #0
 8000206:	bd10      	pop	{r4, pc}

08000208 <HAL_Init>:
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000208:	4a07      	ldr	r2, [pc, #28]	; (8000228 <HAL_Init+0x20>)
  *        In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800020a:	b508      	push	{r3, lr}
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800020c:	6813      	ldr	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800020e:	2003      	movs	r0, #3
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000210:	f043 0310 	orr.w	r3, r3, #16
 8000214:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000216:	f000 f825 	bl	8000264 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800021a:	2000      	movs	r0, #0
 800021c:	f7ff ffe2 	bl	80001e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000220:	f000 fd3c 	bl	8000c9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8000224:	2000      	movs	r0, #0
 8000226:	bd08      	pop	{r3, pc}
 8000228:	40022000 	.word	0x40022000

0800022c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 800022c:	4a02      	ldr	r2, [pc, #8]	; (8000238 <HAL_IncTick+0xc>)
 800022e:	6813      	ldr	r3, [r2, #0]
 8000230:	3301      	adds	r3, #1
 8000232:	6013      	str	r3, [r2, #0]
 8000234:	4770      	bx	lr
 8000236:	bf00      	nop
 8000238:	20000020 	.word	0x20000020

0800023c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800023c:	4b01      	ldr	r3, [pc, #4]	; (8000244 <HAL_GetTick+0x8>)
 800023e:	6818      	ldr	r0, [r3, #0]
}
 8000240:	4770      	bx	lr
 8000242:	bf00      	nop
 8000244:	20000020 	.word	0x20000020

08000248 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000248:	b513      	push	{r0, r1, r4, lr}
 800024a:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 800024c:	f7ff fff6 	bl	800023c <HAL_GetTick>
 8000250:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8000252:	f7ff fff3 	bl	800023c <HAL_GetTick>
 8000256:	9b01      	ldr	r3, [sp, #4]
 8000258:	1b00      	subs	r0, r0, r4
 800025a:	4298      	cmp	r0, r3
 800025c:	d3f9      	bcc.n	8000252 <HAL_Delay+0xa>
  {
  }
}
 800025e:	b002      	add	sp, #8
 8000260:	bd10      	pop	{r4, pc}
	...

08000264 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000264:	4a07      	ldr	r2, [pc, #28]	; (8000284 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8000266:	0200      	lsls	r0, r0, #8
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000268:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 800026a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 800026e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000272:	041b      	lsls	r3, r3, #16
 8000274:	0c1b      	lsrs	r3, r3, #16
 8000276:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800027a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800027e:	4303      	orrs	r3, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8000280:	60d3      	str	r3, [r2, #12]
 8000282:	4770      	bx	lr
 8000284:	e000ed00 	.word	0xe000ed00

08000288 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000288:	4b17      	ldr	r3, [pc, #92]	; (80002e8 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800028a:	b530      	push	{r4, r5, lr}
 800028c:	68db      	ldr	r3, [r3, #12]
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800028e:	f3c3 2302 	ubfx	r3, r3, #8, #3
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000292:	f1c3 0407 	rsb	r4, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000296:	1d1d      	adds	r5, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000298:	2c04      	cmp	r4, #4
 800029a:	bf28      	it	cs
 800029c:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800029e:	2d06      	cmp	r5, #6

  return (
 80002a0:	f04f 0501 	mov.w	r5, #1
 80002a4:	fa05 f404 	lsl.w	r4, r5, r4
 80002a8:	f104 34ff 	add.w	r4, r4, #4294967295
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002ac:	bf8c      	ite	hi
 80002ae:	3b03      	subhi	r3, #3
 80002b0:	2300      	movls	r3, #0

  return (
 80002b2:	400c      	ands	r4, r1
 80002b4:	409c      	lsls	r4, r3
 80002b6:	fa05 f303 	lsl.w	r3, r5, r3
 80002ba:	3b01      	subs	r3, #1
 80002bc:	401a      	ands	r2, r3
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 80002be:	2800      	cmp	r0, #0
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 80002c0:	ea42 0204 	orr.w	r2, r2, r4
 80002c4:	ea4f 1202 	mov.w	r2, r2, lsl #4
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002c8:	bfaf      	iteee	ge
 80002ca:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002ce:	4b07      	ldrlt	r3, [pc, #28]	; (80002ec <HAL_NVIC_SetPriority+0x64>)
 80002d0:	f000 000f 	andlt.w	r0, r0, #15
 80002d4:	b2d2      	uxtblt	r2, r2
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002d6:	bfa5      	ittet	ge
 80002d8:	b2d2      	uxtbge	r2, r2
 80002da:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002de:	541a      	strblt	r2, [r3, r0]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002e0:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80002e4:	bd30      	pop	{r4, r5, pc}
 80002e6:	bf00      	nop
 80002e8:	e000ed00 	.word	0xe000ed00
 80002ec:	e000ed14 	.word	0xe000ed14

080002f0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80002f0:	3801      	subs	r0, #1
 80002f2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002f6:	d20a      	bcs.n	800030e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002f8:	4b06      	ldr	r3, [pc, #24]	; (8000314 <HAL_SYSTICK_Config+0x24>)
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002fa:	4a07      	ldr	r2, [pc, #28]	; (8000318 <HAL_SYSTICK_Config+0x28>)
 80002fc:	21f0      	movs	r1, #240	; 0xf0
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002fe:	6058      	str	r0, [r3, #4]
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000300:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000304:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000306:	2207      	movs	r2, #7
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000308:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800030a:	601a      	str	r2, [r3, #0]
 800030c:	4770      	bx	lr
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
 800030e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000310:	4770      	bx	lr
 8000312:	bf00      	nop
 8000314:	e000e010 	.word	0xe000e010
 8000318:	e000ed00 	.word	0xe000ed00

0800031c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800031c:	4b04      	ldr	r3, [pc, #16]	; (8000330 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800031e:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000320:	681a      	ldr	r2, [r3, #0]
 8000322:	bf0c      	ite	eq
 8000324:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000328:	f022 0204 	bicne.w	r2, r2, #4
 800032c:	601a      	str	r2, [r3, #0]
 800032e:	4770      	bx	lr
 8000330:	e000e010 	.word	0xe000e010

08000334 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000334:	4770      	bx	lr

08000336 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000336:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000338:	f7ff fffc 	bl	8000334 <HAL_SYSTICK_Callback>
 800033c:	bd08      	pop	{r3, pc}
	...

08000340 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000340:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00;
  uint32_t iocurrent = 0x00;
  uint32_t temp = 0x00;
  uint32_t config = 0x00;
 8000344:	2400      	movs	r4, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8000346:	4626      	mov	r6, r4
 8000348:	4b62      	ldr	r3, [pc, #392]	; (80004d4 <HAL_GPIO_Init+0x194>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800034a:	f8df e194 	ldr.w	lr, [pc, #404]	; 80004e0 <HAL_GPIO_Init+0x1a0>
 800034e:	f8df c194 	ldr.w	ip, [pc, #404]	; 80004e4 <HAL_GPIO_Init+0x1a4>

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000352:	2201      	movs	r2, #1
    
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if (iocurrent == ioposition)
 8000354:	680d      	ldr	r5, [r1, #0]

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000356:	40b2      	lsls	r2, r6
    
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if (iocurrent == ioposition)
 8000358:	ea32 0505 	bics.w	r5, r2, r5
 800035c:	f040 80b3 	bne.w	80004c6 <HAL_GPIO_Init+0x186>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000360:	684d      	ldr	r5, [r1, #4]
 8000362:	2d12      	cmp	r5, #18
 8000364:	d028      	beq.n	80003b8 <HAL_GPIO_Init+0x78>
 8000366:	d80e      	bhi.n	8000386 <HAL_GPIO_Init+0x46>
 8000368:	2d02      	cmp	r5, #2
 800036a:	d022      	beq.n	80003b2 <HAL_GPIO_Init+0x72>
 800036c:	d804      	bhi.n	8000378 <HAL_GPIO_Init+0x38>
 800036e:	b335      	cbz	r5, 80003be <HAL_GPIO_Init+0x7e>
 8000370:	2d01      	cmp	r5, #1
 8000372:	d12d      	bne.n	80003d0 <HAL_GPIO_Init+0x90>
      {
        /* If we are configuring the pin in OUTPUT push-pull mode */
        case GPIO_MODE_OUTPUT_PP:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000374:	68cc      	ldr	r4, [r1, #12]
          break;
 8000376:	e02b      	b.n	80003d0 <HAL_GPIO_Init+0x90>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000378:	2d03      	cmp	r5, #3
 800037a:	d018      	beq.n	80003ae <HAL_GPIO_Init+0x6e>
 800037c:	2d11      	cmp	r5, #17
 800037e:	d127      	bne.n	80003d0 <HAL_GPIO_Init+0x90>
          
        /* If we are configuring the pin in OUTPUT open-drain mode */
        case GPIO_MODE_OUTPUT_OD:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000380:	68cc      	ldr	r4, [r1, #12]
 8000382:	3404      	adds	r4, #4
          break;
 8000384:	e024      	b.n	80003d0 <HAL_GPIO_Init+0x90>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000386:	4f54      	ldr	r7, [pc, #336]	; (80004d8 <HAL_GPIO_Init+0x198>)
 8000388:	42bd      	cmp	r5, r7
 800038a:	d018      	beq.n	80003be <HAL_GPIO_Init+0x7e>
 800038c:	d806      	bhi.n	800039c <HAL_GPIO_Init+0x5c>
 800038e:	f8df 8158 	ldr.w	r8, [pc, #344]	; 80004e8 <HAL_GPIO_Init+0x1a8>
 8000392:	4545      	cmp	r5, r8
 8000394:	d013      	beq.n	80003be <HAL_GPIO_Init+0x7e>
 8000396:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 800039a:	e005      	b.n	80003a8 <HAL_GPIO_Init+0x68>
 800039c:	4575      	cmp	r5, lr
 800039e:	d00e      	beq.n	80003be <HAL_GPIO_Init+0x7e>
 80003a0:	4565      	cmp	r5, ip
 80003a2:	d00c      	beq.n	80003be <HAL_GPIO_Init+0x7e>
 80003a4:	f8df 8144 	ldr.w	r8, [pc, #324]	; 80004ec <HAL_GPIO_Init+0x1ac>
 80003a8:	4545      	cmp	r5, r8
 80003aa:	d111      	bne.n	80003d0 <HAL_GPIO_Init+0x90>
 80003ac:	e007      	b.n	80003be <HAL_GPIO_Init+0x7e>
          }
          break; 
          
        /* If we are configuring the pin in INPUT analog mode */
        case GPIO_MODE_ANALOG:
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80003ae:	2400      	movs	r4, #0
 80003b0:	e00e      	b.n	80003d0 <HAL_GPIO_Init+0x90>
          
        /* If we are configuring the pin in ALTERNATE FUNCTION push-pull mode */
        case GPIO_MODE_AF_PP:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80003b2:	68cc      	ldr	r4, [r1, #12]
 80003b4:	3408      	adds	r4, #8
          break;
 80003b6:	e00b      	b.n	80003d0 <HAL_GPIO_Init+0x90>
          
        /* If we are configuring the pin in ALTERNATE FUNCTION open-drain mode */
        case GPIO_MODE_AF_OD:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80003b8:	68cc      	ldr	r4, [r1, #12]
 80003ba:	340c      	adds	r4, #12
          break;
 80003bc:	e008      	b.n	80003d0 <HAL_GPIO_Init+0x90>
        case GPIO_MODE_EVT_RISING:
        case GPIO_MODE_EVT_FALLING:
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if(GPIO_Init->Pull == GPIO_NOPULL)
 80003be:	688c      	ldr	r4, [r1, #8]
 80003c0:	b12c      	cbz	r4, 80003ce <HAL_GPIO_Init+0x8e>
          {  
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
          }
          else if(GPIO_Init->Pull == GPIO_PULLUP)
 80003c2:	2c01      	cmp	r4, #1
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
            
            /* Set the corresponding ODR bit */
            GPIOx->BSRR = ioposition;
 80003c4:	bf0c      	ite	eq
 80003c6:	6102      	streq	r2, [r0, #16]
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
            
            /* Reset the corresponding ODR bit */
            GPIOx->BRR = ioposition;
 80003c8:	6142      	strne	r2, [r0, #20]
            /* Set the corresponding ODR bit */
            GPIOx->BSRR = ioposition;
          }
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80003ca:	2408      	movs	r4, #8
 80003cc:	e000      	b.n	80003d0 <HAL_GPIO_Init+0x90>
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if(GPIO_Init->Pull == GPIO_NOPULL)
          {  
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80003ce:	2404      	movs	r4, #4
          break;
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80003d0:	2aff      	cmp	r2, #255	; 0xff
 80003d2:	bf97      	itett	ls
 80003d4:	4683      	movls	fp, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
 80003d6:	f1a6 0508 	subhi.w	r5, r6, #8
          break;
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80003da:	f8d0 9000 	ldrls.w	r9, [r0]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
 80003de:	00b5      	lslls	r5, r6, #2
          break;
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80003e0:	bf84      	itt	hi
 80003e2:	f8d0 9004 	ldrhi.w	r9, [r0, #4]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
 80003e6:	00ad      	lslhi	r5, r5, #2
      
      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 80003e8:	f04f 080f 	mov.w	r8, #15
 80003ec:	fa08 fa05 	lsl.w	sl, r8, r5
 80003f0:	ea29 090a 	bic.w	r9, r9, sl
 80003f4:	fa04 f505 	lsl.w	r5, r4, r5
          break;
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80003f8:	bf88      	it	hi
 80003fa:	f100 0b04 	addhi.w	fp, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
      
      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 80003fe:	ea49 0505 	orr.w	r5, r9, r5
 8000402:	f8cb 5000 	str.w	r5, [fp]
      
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000406:	f8d1 9004 	ldr.w	r9, [r1, #4]
 800040a:	f019 5f80 	tst.w	r9, #268435456	; 0x10000000
 800040e:	d05a      	beq.n	80004c6 <HAL_GPIO_Init+0x186>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000410:	4d32      	ldr	r5, [pc, #200]	; (80004dc <HAL_GPIO_Init+0x19c>)
 8000412:	4f32      	ldr	r7, [pc, #200]	; (80004dc <HAL_GPIO_Init+0x19c>)
 8000414:	69ad      	ldr	r5, [r5, #24]
        temp = AFIO->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000416:	f006 0a03 	and.w	sl, r6, #3
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800041a:	f045 0501 	orr.w	r5, r5, #1
 800041e:	61bd      	str	r5, [r7, #24]
 8000420:	69bd      	ldr	r5, [r7, #24]
        temp = AFIO->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000422:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000426:	f005 0501 	and.w	r5, r5, #1
 800042a:	9501      	str	r5, [sp, #4]
 800042c:	9d01      	ldr	r5, [sp, #4]
 800042e:	f026 0503 	bic.w	r5, r6, #3
 8000432:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 8000436:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2];
 800043a:	f8d5 b008 	ldr.w	fp, [r5, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800043e:	f5a7 3784 	sub.w	r7, r7, #67584	; 0x10800
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
        temp = AFIO->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000442:	fa08 f80a 	lsl.w	r8, r8, sl
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000446:	42b8      	cmp	r0, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
        temp = AFIO->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000448:	ea2b 0808 	bic.w	r8, fp, r8
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800044c:	d010      	beq.n	8000470 <HAL_GPIO_Init+0x130>
 800044e:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000452:	42b8      	cmp	r0, r7
 8000454:	d00f      	beq.n	8000476 <HAL_GPIO_Init+0x136>
 8000456:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 800045a:	42b8      	cmp	r0, r7
 800045c:	d00e      	beq.n	800047c <HAL_GPIO_Init+0x13c>
 800045e:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000462:	42b8      	cmp	r0, r7
 8000464:	bf0c      	ite	eq
 8000466:	f04f 0b03 	moveq.w	fp, #3
 800046a:	f04f 0b04 	movne.w	fp, #4
 800046e:	e007      	b.n	8000480 <HAL_GPIO_Init+0x140>
 8000470:	f04f 0b00 	mov.w	fp, #0
 8000474:	e004      	b.n	8000480 <HAL_GPIO_Init+0x140>
 8000476:	f04f 0b01 	mov.w	fp, #1
 800047a:	e001      	b.n	8000480 <HAL_GPIO_Init+0x140>
 800047c:	f04f 0b02 	mov.w	fp, #2
 8000480:	fa0b fa0a 	lsl.w	sl, fp, sl
 8000484:	ea4a 0a08 	orr.w	sl, sl, r8
        AFIO->EXTICR[position >> 2] = temp;
 8000488:	f8c5 a008 	str.w	sl, [r5, #8]
        

        /* Configure the interrupt mask */
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent); 
 800048c:	681d      	ldr	r5, [r3, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        AFIO->EXTICR[position >> 2] = temp;
        

        /* Configure the interrupt mask */
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800048e:	f419 3f80 	tst.w	r9, #65536	; 0x10000
        {
          SET_BIT(EXTI->IMR, iocurrent); 
 8000492:	bf14      	ite	ne
 8000494:	4315      	orrne	r5, r2
        } 
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent); 
 8000496:	4395      	biceq	r5, r2
 8000498:	601d      	str	r5, [r3, #0]
        } 
        
        /* Configure the event mask */
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent); 
 800049a:	685d      	ldr	r5, [r3, #4]
        {
          CLEAR_BIT(EXTI->IMR, iocurrent); 
        } 
        
        /* Configure the event mask */
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800049c:	f419 3f00 	tst.w	r9, #131072	; 0x20000
        {
          SET_BIT(EXTI->EMR, iocurrent); 
 80004a0:	bf14      	ite	ne
 80004a2:	4315      	orrne	r5, r2
        } 
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent); 
 80004a4:	4395      	biceq	r5, r2
 80004a6:	605d      	str	r5, [r3, #4]
        }
        
        /* Enable or disable the rising trigger */
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent); 
 80004a8:	689d      	ldr	r5, [r3, #8]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent); 
        }
        
        /* Enable or disable the rising trigger */
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80004aa:	f419 1f80 	tst.w	r9, #1048576	; 0x100000
        {
          SET_BIT(EXTI->RTSR, iocurrent); 
 80004ae:	bf14      	ite	ne
 80004b0:	4315      	orrne	r5, r2
        } 
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
 80004b2:	4395      	biceq	r5, r2
 80004b4:	609d      	str	r5, [r3, #8]
        }
        
        /* Enable or disable the falling trigger */
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent); 
 80004b6:	68dd      	ldr	r5, [r3, #12]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
        }
        
        /* Enable or disable the falling trigger */
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80004b8:	f419 1f00 	tst.w	r9, #2097152	; 0x200000
        {
          SET_BIT(EXTI->FTSR, iocurrent); 
 80004bc:	bf14      	ite	ne
 80004be:	432a      	orrne	r2, r5
        } 
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
 80004c0:	ea25 0202 	biceq.w	r2, r5, r2
 80004c4:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80004c6:	3601      	adds	r6, #1
 80004c8:	2e10      	cmp	r6, #16
 80004ca:	f47f af42 	bne.w	8000352 <HAL_GPIO_Init+0x12>
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
        }
      }
    }
  }
}
 80004ce:	b003      	add	sp, #12
 80004d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80004d4:	40010400 	.word	0x40010400
 80004d8:	10210000 	.word	0x10210000
 80004dc:	40021000 	.word	0x40021000
 80004e0:	10310000 	.word	0x10310000
 80004e4:	10320000 	.word	0x10320000
 80004e8:	10110000 	.word	0x10110000
 80004ec:	10220000 	.word	0x10220000

080004f0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80004f0:	b902      	cbnz	r2, 80004f4 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80004f2:	0409      	lsls	r1, r1, #16
 80004f4:	6101      	str	r1, [r0, #16]
 80004f6:	4770      	bx	lr

080004f8 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80004f8:	68c3      	ldr	r3, [r0, #12]
 80004fa:	4059      	eors	r1, r3
 80004fc:	60c1      	str	r1, [r0, #12]
 80004fe:	4770      	bx	lr

08000500 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000500:	6803      	ldr	r3, [r0, #0]
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000502:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000506:	07dc      	lsls	r4, r3, #31
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000508:	4605      	mov	r5, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800050a:	d403      	bmi.n	8000514 <HAL_RCC_OscConfig+0x14>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800050c:	682b      	ldr	r3, [r5, #0]
 800050e:	0798      	lsls	r0, r3, #30
 8000510:	d473      	bmi.n	80005fa <HAL_RCC_OscConfig+0xfa>
 8000512:	e0f2      	b.n	80006fa <HAL_RCC_OscConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000514:	4cb9      	ldr	r4, [pc, #740]	; (80007fc <HAL_RCC_OscConfig+0x2fc>)
 8000516:	6863      	ldr	r3, [r4, #4]
 8000518:	f003 030c 	and.w	r3, r3, #12
 800051c:	2b04      	cmp	r3, #4
 800051e:	d007      	beq.n	8000530 <HAL_RCC_OscConfig+0x30>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000520:	6863      	ldr	r3, [r4, #4]
 8000522:	f003 030c 	and.w	r3, r3, #12
 8000526:	2b08      	cmp	r3, #8
 8000528:	d116      	bne.n	8000558 <HAL_RCC_OscConfig+0x58>
 800052a:	6863      	ldr	r3, [r4, #4]
 800052c:	03d9      	lsls	r1, r3, #15
 800052e:	d513      	bpl.n	8000558 <HAL_RCC_OscConfig+0x58>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000530:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000534:	fa93 f2a3 	rbit	r2, r3
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000538:	6822      	ldr	r2, [r4, #0]
 800053a:	fa93 f3a3 	rbit	r3, r3
 800053e:	fab3 f383 	clz	r3, r3
 8000542:	f003 031f 	and.w	r3, r3, #31
 8000546:	fa22 f303 	lsr.w	r3, r2, r3
 800054a:	07da      	lsls	r2, r3, #31
 800054c:	d5de      	bpl.n	800050c <HAL_RCC_OscConfig+0xc>
 800054e:	686b      	ldr	r3, [r5, #4]
 8000550:	2b00      	cmp	r3, #0
 8000552:	d1db      	bne.n	800050c <HAL_RCC_OscConfig+0xc>
      {
        return HAL_ERROR;
 8000554:	2001      	movs	r0, #1
 8000556:	e22d      	b.n	80009b4 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000558:	686b      	ldr	r3, [r5, #4]
 800055a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800055e:	d015      	beq.n	800058c <HAL_RCC_OscConfig+0x8c>
 8000560:	b96b      	cbnz	r3, 800057e <HAL_RCC_OscConfig+0x7e>
 8000562:	6823      	ldr	r3, [r4, #0]
 8000564:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000568:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800056c:	6023      	str	r3, [r4, #0]
 800056e:	6823      	ldr	r3, [r4, #0]
 8000570:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000574:	6023      	str	r3, [r4, #0]
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000576:	f7ff fe61 	bl	800023c <HAL_GetTick>
 800057a:	4607      	mov	r7, r0
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800057c:	e02f      	b.n	80005de <HAL_RCC_OscConfig+0xde>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800057e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000582:	6823      	ldr	r3, [r4, #0]
 8000584:	d106      	bne.n	8000594 <HAL_RCC_OscConfig+0x94>
 8000586:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800058a:	6023      	str	r3, [r4, #0]
 800058c:	6823      	ldr	r3, [r4, #0]
 800058e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000592:	e005      	b.n	80005a0 <HAL_RCC_OscConfig+0xa0>
 8000594:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000598:	6023      	str	r3, [r4, #0]
 800059a:	6823      	ldr	r3, [r4, #0]
 800059c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80005a0:	6023      	str	r3, [r4, #0]

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80005a2:	f7ff fe4b 	bl	800023c <HAL_GetTick>
 80005a6:	4607      	mov	r7, r0
 80005a8:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 80005ac:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80005b0:	6822      	ldr	r2, [r4, #0]
 80005b2:	fa96 f3a6 	rbit	r3, r6
 80005b6:	fab3 f383 	clz	r3, r3
 80005ba:	f003 031f 	and.w	r3, r3, #31
 80005be:	fa22 f303 	lsr.w	r3, r2, r3
 80005c2:	07db      	lsls	r3, r3, #31
 80005c4:	d4a2      	bmi.n	800050c <HAL_RCC_OscConfig+0xc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80005c6:	f7ff fe39 	bl	800023c <HAL_GetTick>
 80005ca:	1bc0      	subs	r0, r0, r7
 80005cc:	2864      	cmp	r0, #100	; 0x64
 80005ce:	d9ed      	bls.n	80005ac <HAL_RCC_OscConfig+0xac>
          {
            return HAL_TIMEOUT;
 80005d0:	2003      	movs	r0, #3
 80005d2:	e1ef      	b.n	80009b4 <HAL_RCC_OscConfig+0x4b4>
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80005d4:	f7ff fe32 	bl	800023c <HAL_GetTick>
 80005d8:	1bc0      	subs	r0, r0, r7
 80005da:	2864      	cmp	r0, #100	; 0x64
 80005dc:	d8f8      	bhi.n	80005d0 <HAL_RCC_OscConfig+0xd0>
 80005de:	fa96 f3a6 	rbit	r3, r6
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80005e2:	6822      	ldr	r2, [r4, #0]
 80005e4:	fa96 f3a6 	rbit	r3, r6
 80005e8:	fab3 f383 	clz	r3, r3
 80005ec:	f003 031f 	and.w	r3, r3, #31
 80005f0:	fa22 f303 	lsr.w	r3, r2, r3
 80005f4:	07d8      	lsls	r0, r3, #31
 80005f6:	d4ed      	bmi.n	80005d4 <HAL_RCC_OscConfig+0xd4>
 80005f8:	e788      	b.n	800050c <HAL_RCC_OscConfig+0xc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80005fa:	4c80      	ldr	r4, [pc, #512]	; (80007fc <HAL_RCC_OscConfig+0x2fc>)
 80005fc:	6863      	ldr	r3, [r4, #4]
 80005fe:	f013 0f0c 	tst.w	r3, #12
 8000602:	d007      	beq.n	8000614 <HAL_RCC_OscConfig+0x114>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000604:	6863      	ldr	r3, [r4, #4]
 8000606:	f003 030c 	and.w	r3, r3, #12
 800060a:	2b08      	cmp	r3, #8
 800060c:	d121      	bne.n	8000652 <HAL_RCC_OscConfig+0x152>
 800060e:	6863      	ldr	r3, [r4, #4]
 8000610:	03d9      	lsls	r1, r3, #15
 8000612:	d41e      	bmi.n	8000652 <HAL_RCC_OscConfig+0x152>
 8000614:	2302      	movs	r3, #2
 8000616:	fa93 f2a3 	rbit	r2, r3
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800061a:	6822      	ldr	r2, [r4, #0]
 800061c:	fa93 f3a3 	rbit	r3, r3
 8000620:	fab3 f383 	clz	r3, r3
 8000624:	f003 031f 	and.w	r3, r3, #31
 8000628:	fa22 f303 	lsr.w	r3, r2, r3
 800062c:	07da      	lsls	r2, r3, #31
 800062e:	d502      	bpl.n	8000636 <HAL_RCC_OscConfig+0x136>
 8000630:	692b      	ldr	r3, [r5, #16]
 8000632:	2b01      	cmp	r3, #1
 8000634:	d18e      	bne.n	8000554 <HAL_RCC_OscConfig+0x54>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000636:	6823      	ldr	r3, [r4, #0]
 8000638:	22f8      	movs	r2, #248	; 0xf8
 800063a:	fa92 f2a2 	rbit	r2, r2
 800063e:	fab2 f282 	clz	r2, r2
 8000642:	6969      	ldr	r1, [r5, #20]
 8000644:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000648:	fa01 f202 	lsl.w	r2, r1, r2
 800064c:	4313      	orrs	r3, r2
 800064e:	6023      	str	r3, [r4, #0]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000650:	e053      	b.n	80006fa <HAL_RCC_OscConfig+0x1fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000652:	692a      	ldr	r2, [r5, #16]
 8000654:	2301      	movs	r3, #1
 8000656:	b37a      	cbz	r2, 80006b8 <HAL_RCC_OscConfig+0x1b8>
 8000658:	fa93 f2a3 	rbit	r2, r3
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800065c:	fab2 f282 	clz	r2, r2
 8000660:	0092      	lsls	r2, r2, #2
 8000662:	f102 4284 	add.w	r2, r2, #1107296256	; 0x42000000
 8000666:	f502 0284 	add.w	r2, r2, #4325376	; 0x420000
 800066a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800066c:	f7ff fde6 	bl	800023c <HAL_GetTick>
 8000670:	4607      	mov	r7, r0
 8000672:	2602      	movs	r6, #2
 8000674:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000678:	4860      	ldr	r0, [pc, #384]	; (80007fc <HAL_RCC_OscConfig+0x2fc>)
 800067a:	6822      	ldr	r2, [r4, #0]
 800067c:	fa96 f3a6 	rbit	r3, r6
 8000680:	fab3 f383 	clz	r3, r3
 8000684:	f003 031f 	and.w	r3, r3, #31
 8000688:	fa22 f303 	lsr.w	r3, r2, r3
 800068c:	07db      	lsls	r3, r3, #31
 800068e:	d405      	bmi.n	800069c <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000690:	f7ff fdd4 	bl	800023c <HAL_GetTick>
 8000694:	1bc0      	subs	r0, r0, r7
 8000696:	2802      	cmp	r0, #2
 8000698:	d9ec      	bls.n	8000674 <HAL_RCC_OscConfig+0x174>
 800069a:	e799      	b.n	80005d0 <HAL_RCC_OscConfig+0xd0>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800069c:	6803      	ldr	r3, [r0, #0]
 800069e:	22f8      	movs	r2, #248	; 0xf8
 80006a0:	fa92 f2a2 	rbit	r2, r2
 80006a4:	fab2 f282 	clz	r2, r2
 80006a8:	6969      	ldr	r1, [r5, #20]
 80006aa:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80006ae:	fa01 f202 	lsl.w	r2, r1, r2
 80006b2:	4313      	orrs	r3, r2
 80006b4:	6003      	str	r3, [r0, #0]
 80006b6:	e020      	b.n	80006fa <HAL_RCC_OscConfig+0x1fa>
 80006b8:	fa93 f3a3 	rbit	r3, r3
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80006bc:	fab3 f383 	clz	r3, r3
 80006c0:	009b      	lsls	r3, r3, #2
 80006c2:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 80006c6:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 80006ca:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80006cc:	f7ff fdb6 	bl	800023c <HAL_GetTick>
 80006d0:	4607      	mov	r7, r0
 80006d2:	2602      	movs	r6, #2
 80006d4:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80006d8:	6822      	ldr	r2, [r4, #0]
 80006da:	fa96 f3a6 	rbit	r3, r6
 80006de:	fab3 f383 	clz	r3, r3
 80006e2:	f003 031f 	and.w	r3, r3, #31
 80006e6:	fa22 f303 	lsr.w	r3, r2, r3
 80006ea:	07d9      	lsls	r1, r3, #31
 80006ec:	d505      	bpl.n	80006fa <HAL_RCC_OscConfig+0x1fa>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80006ee:	f7ff fda5 	bl	800023c <HAL_GetTick>
 80006f2:	1bc0      	subs	r0, r0, r7
 80006f4:	2802      	cmp	r0, #2
 80006f6:	d9ed      	bls.n	80006d4 <HAL_RCC_OscConfig+0x1d4>
 80006f8:	e76a      	b.n	80005d0 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80006fa:	682b      	ldr	r3, [r5, #0]
 80006fc:	071a      	lsls	r2, r3, #28
 80006fe:	d546      	bpl.n	800078e <HAL_RCC_OscConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000700:	69aa      	ldr	r2, [r5, #24]
 8000702:	4c3e      	ldr	r4, [pc, #248]	; (80007fc <HAL_RCC_OscConfig+0x2fc>)
 8000704:	2301      	movs	r3, #1
 8000706:	493e      	ldr	r1, [pc, #248]	; (8000800 <HAL_RCC_OscConfig+0x300>)
 8000708:	b312      	cbz	r2, 8000750 <HAL_RCC_OscConfig+0x250>
 800070a:	fa93 f2a3 	rbit	r2, r3
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800070e:	fab2 f282 	clz	r2, r2
 8000712:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000716:	f7ff fd91 	bl	800023c <HAL_GetTick>
 800071a:	4607      	mov	r7, r0
 800071c:	2602      	movs	r6, #2
 800071e:	fa96 f3a6 	rbit	r3, r6
 8000722:	fa96 f3a6 	rbit	r3, r6
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000726:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000728:	fa96 f3a6 	rbit	r3, r6
 800072c:	fab3 f383 	clz	r3, r3
 8000730:	f003 031f 	and.w	r3, r3, #31
 8000734:	fa22 f303 	lsr.w	r3, r2, r3
 8000738:	07db      	lsls	r3, r3, #31
 800073a:	d405      	bmi.n	8000748 <HAL_RCC_OscConfig+0x248>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800073c:	f7ff fd7e 	bl	800023c <HAL_GetTick>
 8000740:	1bc0      	subs	r0, r0, r7
 8000742:	2802      	cmp	r0, #2
 8000744:	d9eb      	bls.n	800071e <HAL_RCC_OscConfig+0x21e>
 8000746:	e743      	b.n	80005d0 <HAL_RCC_OscConfig+0xd0>
          return HAL_TIMEOUT;
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      HAL_Delay(1);
 8000748:	2001      	movs	r0, #1
 800074a:	f7ff fd7d 	bl	8000248 <HAL_Delay>
 800074e:	e01e      	b.n	800078e <HAL_RCC_OscConfig+0x28e>
 8000750:	fa93 f3a3 	rbit	r3, r3
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000754:	fab3 f383 	clz	r3, r3
 8000758:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800075c:	f7ff fd6e 	bl	800023c <HAL_GetTick>
 8000760:	4607      	mov	r7, r0
 8000762:	2602      	movs	r6, #2
 8000764:	fa96 f3a6 	rbit	r3, r6
 8000768:	fa96 f3a6 	rbit	r3, r6
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800076c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800076e:	fa96 f3a6 	rbit	r3, r6
 8000772:	fab3 f383 	clz	r3, r3
 8000776:	f003 031f 	and.w	r3, r3, #31
 800077a:	fa22 f303 	lsr.w	r3, r2, r3
 800077e:	07d8      	lsls	r0, r3, #31
 8000780:	d505      	bpl.n	800078e <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000782:	f7ff fd5b 	bl	800023c <HAL_GetTick>
 8000786:	1bc0      	subs	r0, r0, r7
 8000788:	2802      	cmp	r0, #2
 800078a:	d9eb      	bls.n	8000764 <HAL_RCC_OscConfig+0x264>
 800078c:	e720      	b.n	80005d0 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800078e:	682b      	ldr	r3, [r5, #0]
 8000790:	0759      	lsls	r1, r3, #29
 8000792:	d404      	bmi.n	800079e <HAL_RCC_OscConfig+0x29e>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000794:	69ea      	ldr	r2, [r5, #28]
 8000796:	2a00      	cmp	r2, #0
 8000798:	f040 8081 	bne.w	800089e <HAL_RCC_OscConfig+0x39e>
 800079c:	e0d8      	b.n	8000950 <HAL_RCC_OscConfig+0x450>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800079e:	4c17      	ldr	r4, [pc, #92]	; (80007fc <HAL_RCC_OscConfig+0x2fc>)
    
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80007a0:	4e18      	ldr	r6, [pc, #96]	; (8000804 <HAL_RCC_OscConfig+0x304>)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80007a2:	69e3      	ldr	r3, [r4, #28]
 80007a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007a8:	61e3      	str	r3, [r4, #28]
 80007aa:	69e3      	ldr	r3, [r4, #28]
 80007ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007b0:	9301      	str	r3, [sp, #4]
 80007b2:	9b01      	ldr	r3, [sp, #4]
    
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80007b4:	6833      	ldr	r3, [r6, #0]
 80007b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007ba:	6033      	str	r3, [r6, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80007bc:	f7ff fd3e 	bl	800023c <HAL_GetTick>
 80007c0:	4607      	mov	r7, r0

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80007c2:	6833      	ldr	r3, [r6, #0]
 80007c4:	05da      	lsls	r2, r3, #23
 80007c6:	d405      	bmi.n	80007d4 <HAL_RCC_OscConfig+0x2d4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80007c8:	f7ff fd38 	bl	800023c <HAL_GetTick>
 80007cc:	1bc0      	subs	r0, r0, r7
 80007ce:	2864      	cmp	r0, #100	; 0x64
 80007d0:	d9f7      	bls.n	80007c2 <HAL_RCC_OscConfig+0x2c2>
 80007d2:	e6fd      	b.n	80005d0 <HAL_RCC_OscConfig+0xd0>
          return HAL_TIMEOUT;
        }
      }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80007d4:	68eb      	ldr	r3, [r5, #12]
 80007d6:	2b01      	cmp	r3, #1
 80007d8:	d01c      	beq.n	8000814 <HAL_RCC_OscConfig+0x314>
 80007da:	b9ab      	cbnz	r3, 8000808 <HAL_RCC_OscConfig+0x308>
 80007dc:	6a23      	ldr	r3, [r4, #32]
 80007de:	2602      	movs	r6, #2
 80007e0:	f023 0301 	bic.w	r3, r3, #1
 80007e4:	6223      	str	r3, [r4, #32]
 80007e6:	6a23      	ldr	r3, [r4, #32]
 80007e8:	4637      	mov	r7, r6
 80007ea:	f023 0304 	bic.w	r3, r3, #4
 80007ee:	6223      	str	r3, [r4, #32]
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80007f0:	f7ff fd24 	bl	800023c <HAL_GetTick>
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80007f4:	f241 3988 	movw	r9, #5000	; 0x1388
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80007f8:	4680      	mov	r8, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80007fa:	e048      	b.n	800088e <HAL_RCC_OscConfig+0x38e>
 80007fc:	40021000 	.word	0x40021000
 8000800:	42420480 	.word	0x42420480
 8000804:	40007000 	.word	0x40007000
          return HAL_TIMEOUT;
        }
      }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000808:	2b05      	cmp	r3, #5
 800080a:	6a23      	ldr	r3, [r4, #32]
 800080c:	d106      	bne.n	800081c <HAL_RCC_OscConfig+0x31c>
 800080e:	f043 0304 	orr.w	r3, r3, #4
 8000812:	6223      	str	r3, [r4, #32]
 8000814:	6a23      	ldr	r3, [r4, #32]
 8000816:	f043 0301 	orr.w	r3, r3, #1
 800081a:	e005      	b.n	8000828 <HAL_RCC_OscConfig+0x328>
 800081c:	f023 0301 	bic.w	r3, r3, #1
 8000820:	6223      	str	r3, [r4, #32]
 8000822:	6a23      	ldr	r3, [r4, #32]
 8000824:	f023 0304 	bic.w	r3, r3, #4
 8000828:	6223      	str	r3, [r4, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800082a:	f7ff fd07 	bl	800023c <HAL_GetTick>
 800082e:	2602      	movs	r6, #2
 8000830:	4681      	mov	r9, r0
 8000832:	46b0      	mov	r8, r6
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000834:	f241 3788 	movw	r7, #5000	; 0x1388
 8000838:	fa96 f3a6 	rbit	r3, r6
 800083c:	fa96 f3a6 	rbit	r3, r6
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000840:	b10b      	cbz	r3, 8000846 <HAL_RCC_OscConfig+0x346>
 8000842:	6a22      	ldr	r2, [r4, #32]
 8000844:	e000      	b.n	8000848 <HAL_RCC_OscConfig+0x348>
 8000846:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000848:	fa98 f3a8 	rbit	r3, r8
 800084c:	fab3 f383 	clz	r3, r3
 8000850:	f003 031f 	and.w	r3, r3, #31
 8000854:	fa22 f303 	lsr.w	r3, r2, r3
 8000858:	07db      	lsls	r3, r3, #31
 800085a:	d49b      	bmi.n	8000794 <HAL_RCC_OscConfig+0x294>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800085c:	f7ff fcee 	bl	800023c <HAL_GetTick>
 8000860:	ebc9 0000 	rsb	r0, r9, r0
 8000864:	42b8      	cmp	r0, r7
 8000866:	d9e7      	bls.n	8000838 <HAL_RCC_OscConfig+0x338>
 8000868:	e6b2      	b.n	80005d0 <HAL_RCC_OscConfig+0xd0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800086a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800086c:	fa97 f3a7 	rbit	r3, r7
 8000870:	fab3 f383 	clz	r3, r3
 8000874:	f003 031f 	and.w	r3, r3, #31
 8000878:	fa22 f303 	lsr.w	r3, r2, r3
 800087c:	07d8      	lsls	r0, r3, #31
 800087e:	d589      	bpl.n	8000794 <HAL_RCC_OscConfig+0x294>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000880:	f7ff fcdc 	bl	800023c <HAL_GetTick>
 8000884:	ebc8 0000 	rsb	r0, r8, r0
 8000888:	4548      	cmp	r0, r9
 800088a:	f63f aea1 	bhi.w	80005d0 <HAL_RCC_OscConfig+0xd0>
 800088e:	fa96 f3a6 	rbit	r3, r6
 8000892:	fa96 f3a6 	rbit	r3, r6
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000896:	2b00      	cmp	r3, #0
 8000898:	d0e7      	beq.n	800086a <HAL_RCC_OscConfig+0x36a>
 800089a:	6a22      	ldr	r2, [r4, #32]
 800089c:	e7e6      	b.n	800086c <HAL_RCC_OscConfig+0x36c>
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800089e:	4c47      	ldr	r4, [pc, #284]	; (80009bc <HAL_RCC_OscConfig+0x4bc>)
 80008a0:	6863      	ldr	r3, [r4, #4]
 80008a2:	f003 030c 	and.w	r3, r3, #12
 80008a6:	2b08      	cmp	r3, #8
 80008a8:	f43f ae54 	beq.w	8000554 <HAL_RCC_OscConfig+0x54>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80008ac:	2a02      	cmp	r2, #2
 80008ae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80008b2:	d15c      	bne.n	800096e <HAL_RCC_OscConfig+0x46e>
 80008b4:	fa93 f3a3 	rbit	r3, r3
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80008b8:	fab3 f383 	clz	r3, r3
 80008bc:	009b      	lsls	r3, r3, #2
 80008be:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 80008c2:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 80008c6:	2200      	movs	r2, #0
 80008c8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80008ca:	f7ff fcb7 	bl	800023c <HAL_GetTick>
 80008ce:	4680      	mov	r8, r0
 80008d0:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 80008d4:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80008d8:	4f38      	ldr	r7, [pc, #224]	; (80009bc <HAL_RCC_OscConfig+0x4bc>)
 80008da:	6822      	ldr	r2, [r4, #0]
 80008dc:	fa96 f3a6 	rbit	r3, r6
 80008e0:	fab3 f383 	clz	r3, r3
 80008e4:	f003 031f 	and.w	r3, r3, #31
 80008e8:	fa22 f303 	lsr.w	r3, r2, r3
 80008ec:	07d9      	lsls	r1, r3, #31
 80008ee:	d431      	bmi.n	8000954 <HAL_RCC_OscConfig+0x454>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80008f0:	6a2e      	ldr	r6, [r5, #32]
 80008f2:	f5b6 3f80 	cmp.w	r6, #65536	; 0x10000
 80008f6:	d105      	bne.n	8000904 <HAL_RCC_OscConfig+0x404>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80008f8:	6879      	ldr	r1, [r7, #4]
 80008fa:	f421 3000 	bic.w	r0, r1, #131072	; 0x20000
 80008fe:	68a9      	ldr	r1, [r5, #8]
 8000900:	4301      	orrs	r1, r0
 8000902:	6079      	str	r1, [r7, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000904:	6863      	ldr	r3, [r4, #4]
 8000906:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8000908:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 800090c:	4332      	orrs	r2, r6
 800090e:	4313      	orrs	r3, r2
 8000910:	6063      	str	r3, [r4, #4]
 8000912:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000916:	fa93 f3a3 	rbit	r3, r3
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800091a:	fab3 f383 	clz	r3, r3
 800091e:	009b      	lsls	r3, r3, #2
 8000920:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8000924:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8000928:	2201      	movs	r2, #1
 800092a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800092c:	f7ff fc86 	bl	800023c <HAL_GetTick>
 8000930:	4606      	mov	r6, r0
 8000932:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8000936:	fa95 f3a5 	rbit	r3, r5
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800093a:	6822      	ldr	r2, [r4, #0]
 800093c:	fa95 f3a5 	rbit	r3, r5
 8000940:	fab3 f383 	clz	r3, r3
 8000944:	f003 031f 	and.w	r3, r3, #31
 8000948:	fa22 f303 	lsr.w	r3, r2, r3
 800094c:	07da      	lsls	r2, r3, #31
 800094e:	d508      	bpl.n	8000962 <HAL_RCC_OscConfig+0x462>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000950:	2000      	movs	r0, #0
 8000952:	e02f      	b.n	80009b4 <HAL_RCC_OscConfig+0x4b4>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000954:	f7ff fc72 	bl	800023c <HAL_GetTick>
 8000958:	ebc8 0000 	rsb	r0, r8, r0
 800095c:	2802      	cmp	r0, #2
 800095e:	d9b9      	bls.n	80008d4 <HAL_RCC_OscConfig+0x3d4>
 8000960:	e636      	b.n	80005d0 <HAL_RCC_OscConfig+0xd0>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000962:	f7ff fc6b 	bl	800023c <HAL_GetTick>
 8000966:	1b80      	subs	r0, r0, r6
 8000968:	2802      	cmp	r0, #2
 800096a:	d9e4      	bls.n	8000936 <HAL_RCC_OscConfig+0x436>
 800096c:	e630      	b.n	80005d0 <HAL_RCC_OscConfig+0xd0>
 800096e:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000972:	fab3 f383 	clz	r3, r3
 8000976:	009b      	lsls	r3, r3, #2
 8000978:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 800097c:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000984:	f7ff fc5a 	bl	800023c <HAL_GetTick>
 8000988:	4606      	mov	r6, r0
 800098a:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 800098e:	fa95 f3a5 	rbit	r3, r5
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000992:	6822      	ldr	r2, [r4, #0]
 8000994:	fa95 f3a5 	rbit	r3, r5
 8000998:	fab3 f383 	clz	r3, r3
 800099c:	f003 031f 	and.w	r3, r3, #31
 80009a0:	fa22 f303 	lsr.w	r3, r2, r3
 80009a4:	07db      	lsls	r3, r3, #31
 80009a6:	d5d3      	bpl.n	8000950 <HAL_RCC_OscConfig+0x450>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80009a8:	f7ff fc48 	bl	800023c <HAL_GetTick>
 80009ac:	1b80      	subs	r0, r0, r6
 80009ae:	2802      	cmp	r0, #2
 80009b0:	d9ed      	bls.n	800098e <HAL_RCC_OscConfig+0x48e>
 80009b2:	e60d      	b.n	80005d0 <HAL_RCC_OscConfig+0xd0>
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 80009b4:	b003      	add	sp, #12
 80009b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80009ba:	bf00      	nop
 80009bc:	40021000 	.word	0x40021000

080009c0 <HAL_RCC_GetSysClockFreq>:
{
#if   defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[12] = {0, 0, 4,  5,  6,  7,  8,  9, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
 80009c0:	4b1f      	ldr	r3, [pc, #124]	; (8000a40 <HAL_RCC_GetSysClockFreq+0x80>)
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80009c2:	b570      	push	{r4, r5, r6, lr}
#if   defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[12] = {0, 0, 4,  5,  6,  7,  8,  9, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
 80009c4:	f103 0510 	add.w	r5, r3, #16
 80009c8:	462e      	mov	r6, r5
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80009ca:	b086      	sub	sp, #24
#if   defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[12] = {0, 0, 4,  5,  6,  7,  8,  9, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
 80009cc:	ac02      	add	r4, sp, #8
 80009ce:	4622      	mov	r2, r4
 80009d0:	6818      	ldr	r0, [r3, #0]
 80009d2:	6859      	ldr	r1, [r3, #4]
 80009d4:	3308      	adds	r3, #8
 80009d6:	c203      	stmia	r2!, {r0, r1}
 80009d8:	42ab      	cmp	r3, r5
 80009da:	4614      	mov	r4, r2
 80009dc:	d1f7      	bne.n	80009ce <HAL_RCC_GetSysClockFreq+0xe>
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = { 1, 2};
 80009de:	8833      	ldrh	r3, [r6, #0]
  uint32_t sysclockfreq = 0;
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0, pll2mul = 0;
#endif /*RCC_CFGR2_PREDIV1SRC*/
  
  tmpreg = RCC->CFGR;
 80009e0:	4c18      	ldr	r4, [pc, #96]	; (8000a44 <HAL_RCC_GetSysClockFreq+0x84>)
#else
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = { 1, 2};
 80009e2:	f8ad 3004 	strh.w	r3, [sp, #4]
  uint32_t sysclockfreq = 0;
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0, pll2mul = 0;
#endif /*RCC_CFGR2_PREDIV1SRC*/
  
  tmpreg = RCC->CFGR;
 80009e6:	6860      	ldr	r0, [r4, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80009e8:	f000 030c 	and.w	r3, r0, #12
 80009ec:	2b08      	cmp	r3, #8
 80009ee:	d124      	bne.n	8000a3a <HAL_RCC_GetSysClockFreq+0x7a>
 80009f0:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 80009f4:	fa93 f3a3 	rbit	r3, r3
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> POSITION_VAL(RCC_CFGR_PLLMULL)];
 80009f8:	fab3 f383 	clz	r3, r3
 80009fc:	f400 1270 	and.w	r2, r0, #3932160	; 0x3c0000
 8000a00:	fa22 f303 	lsr.w	r3, r2, r3
 8000a04:	aa06      	add	r2, sp, #24
 8000a06:	4413      	add	r3, r2
 8000a08:	f813 1c10 	ldrb.w	r1, [r3, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000a0c:	03c3      	lsls	r3, r0, #15
 8000a0e:	d511      	bpl.n	8000a34 <HAL_RCC_GetSysClockFreq+0x74>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> POSITION_VAL(RCC_CFGR2_PREDIV1)];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> POSITION_VAL(RCC_CFGR_PLLXTPRE)];
 8000a10:	6862      	ldr	r2, [r4, #4]
 8000a12:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a16:	fa93 f3a3 	rbit	r3, r3
 8000a1a:	fab3 f083 	clz	r0, r3
 8000a1e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8000a22:	40c3      	lsrs	r3, r0
 8000a24:	aa06      	add	r2, sp, #24
 8000a26:	4413      	add	r3, r2
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
 8000a28:	f813 0c14 	ldrb.w	r0, [r3, #-20]
 8000a2c:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <HAL_RCC_GetSysClockFreq+0x88>)
 8000a2e:	fbb3 f0f0 	udiv	r0, r3, r0
 8000a32:	e000      	b.n	8000a36 <HAL_RCC_GetSysClockFreq+0x76>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000a34:	4805      	ldr	r0, [pc, #20]	; (8000a4c <HAL_RCC_GetSysClockFreq+0x8c>)
 8000a36:	4348      	muls	r0, r1
 8000a38:	e000      	b.n	8000a3c <HAL_RCC_GetSysClockFreq+0x7c>
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000a3a:	4803      	ldr	r0, [pc, #12]	; (8000a48 <HAL_RCC_GetSysClockFreq+0x88>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000a3c:	b006      	add	sp, #24
 8000a3e:	bd70      	pop	{r4, r5, r6, pc}
 8000a40:	08000dac 	.word	0x08000dac
 8000a44:	40021000 	.word	0x40021000
 8000a48:	007a1200 	.word	0x007a1200
 8000a4c:	003d0900 	.word	0x003d0900

08000a50 <HAL_RCC_ClockConfig>:
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000a50:	4a54      	ldr	r2, [pc, #336]	; (8000ba4 <HAL_RCC_ClockConfig+0x154>)
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000a52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000a56:	6813      	ldr	r3, [r2, #0]
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000a58:	4606      	mov	r6, r0
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000a5a:	f003 0307 	and.w	r3, r3, #7
 8000a5e:	428b      	cmp	r3, r1
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000a60:	460d      	mov	r5, r1
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000a62:	d30a      	bcc.n	8000a7a <HAL_RCC_ClockConfig+0x2a>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000a64:	6831      	ldr	r1, [r6, #0]
 8000a66:	078c      	lsls	r4, r1, #30
 8000a68:	d514      	bpl.n	8000a94 <HAL_RCC_ClockConfig+0x44>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000a6a:	484f      	ldr	r0, [pc, #316]	; (8000ba8 <HAL_RCC_ClockConfig+0x158>)
 8000a6c:	6843      	ldr	r3, [r0, #4]
 8000a6e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000a72:	68b3      	ldr	r3, [r6, #8]
 8000a74:	4313      	orrs	r3, r2
 8000a76:	6043      	str	r3, [r0, #4]
 8000a78:	e00c      	b.n	8000a94 <HAL_RCC_ClockConfig+0x44>
#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000a7a:	6813      	ldr	r3, [r2, #0]
 8000a7c:	f023 0307 	bic.w	r3, r3, #7
 8000a80:	430b      	orrs	r3, r1
 8000a82:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000a84:	6813      	ldr	r3, [r2, #0]
 8000a86:	f003 0307 	and.w	r3, r3, #7
 8000a8a:	4299      	cmp	r1, r3
 8000a8c:	d0ea      	beq.n	8000a64 <HAL_RCC_ClockConfig+0x14>
    {
      return HAL_ERROR;
 8000a8e:	2001      	movs	r0, #1
 8000a90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000a94:	07c8      	lsls	r0, r1, #31
 8000a96:	d406      	bmi.n	8000aa6 <HAL_RCC_ClockConfig+0x56>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000a98:	4a42      	ldr	r2, [pc, #264]	; (8000ba4 <HAL_RCC_ClockConfig+0x154>)
 8000a9a:	6813      	ldr	r3, [r2, #0]
 8000a9c:	f003 0307 	and.w	r3, r3, #7
 8000aa0:	429d      	cmp	r5, r3
 8000aa2:	d34a      	bcc.n	8000b3a <HAL_RCC_ClockConfig+0xea>
 8000aa4:	e053      	b.n	8000b4e <HAL_RCC_ClockConfig+0xfe>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000aa6:	6872      	ldr	r2, [r6, #4]
 8000aa8:	4c3f      	ldr	r4, [pc, #252]	; (8000ba8 <HAL_RCC_ClockConfig+0x158>)
 8000aaa:	2a01      	cmp	r2, #1
 8000aac:	d102      	bne.n	8000ab4 <HAL_RCC_ClockConfig+0x64>
 8000aae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ab2:	e004      	b.n	8000abe <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000ab4:	2a02      	cmp	r2, #2
 8000ab6:	bf0c      	ite	eq
 8000ab8:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8000abc:	2302      	movne	r3, #2
 8000abe:	fa93 f1a3 	rbit	r1, r3
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ac2:	6821      	ldr	r1, [r4, #0]
 8000ac4:	fa93 f3a3 	rbit	r3, r3
 8000ac8:	fab3 f383 	clz	r3, r3
 8000acc:	f003 031f 	and.w	r3, r3, #31
 8000ad0:	fa21 f303 	lsr.w	r3, r1, r3
 8000ad4:	07d9      	lsls	r1, r3, #31
 8000ad6:	d5da      	bpl.n	8000a8e <HAL_RCC_ClockConfig+0x3e>
      {
        return HAL_ERROR;
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000ad8:	6863      	ldr	r3, [r4, #4]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ada:	f241 3888 	movw	r8, #5000	; 0x1388
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
      {
        return HAL_ERROR;
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000ade:	f023 0303 	bic.w	r3, r3, #3
 8000ae2:	431a      	orrs	r2, r3
 8000ae4:	6062      	str	r2, [r4, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000ae6:	f7ff fba9 	bl	800023c <HAL_GetTick>
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000aea:	6873      	ldr	r3, [r6, #4]
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000aec:	4607      	mov	r7, r0
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000aee:	2b01      	cmp	r3, #1
 8000af0:	d10c      	bne.n	8000b0c <HAL_RCC_ClockConfig+0xbc>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000af2:	6863      	ldr	r3, [r4, #4]
 8000af4:	f003 030c 	and.w	r3, r3, #12
 8000af8:	2b04      	cmp	r3, #4
 8000afa:	d0cd      	beq.n	8000a98 <HAL_RCC_ClockConfig+0x48>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000afc:	f7ff fb9e 	bl	800023c <HAL_GetTick>
 8000b00:	1bc0      	subs	r0, r0, r7
 8000b02:	4540      	cmp	r0, r8
 8000b04:	d9f5      	bls.n	8000af2 <HAL_RCC_ClockConfig+0xa2>
        {
          return HAL_TIMEOUT;
 8000b06:	2003      	movs	r0, #3
 8000b08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000b0c:	2b02      	cmp	r3, #2
 8000b0e:	d10f      	bne.n	8000b30 <HAL_RCC_ClockConfig+0xe0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000b10:	6863      	ldr	r3, [r4, #4]
 8000b12:	f003 030c 	and.w	r3, r3, #12
 8000b16:	2b08      	cmp	r3, #8
 8000b18:	d0be      	beq.n	8000a98 <HAL_RCC_ClockConfig+0x48>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b1a:	f7ff fb8f 	bl	800023c <HAL_GetTick>
 8000b1e:	1bc0      	subs	r0, r0, r7
 8000b20:	4540      	cmp	r0, r8
 8000b22:	d9f5      	bls.n	8000b10 <HAL_RCC_ClockConfig+0xc0>
 8000b24:	e7ef      	b.n	8000b06 <HAL_RCC_ClockConfig+0xb6>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b26:	f7ff fb89 	bl	800023c <HAL_GetTick>
 8000b2a:	1bc0      	subs	r0, r0, r7
 8000b2c:	4540      	cmp	r0, r8
 8000b2e:	d8ea      	bhi.n	8000b06 <HAL_RCC_ClockConfig+0xb6>
        }
      }
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000b30:	6863      	ldr	r3, [r4, #4]
 8000b32:	f013 0f0c 	tst.w	r3, #12
 8000b36:	d1f6      	bne.n	8000b26 <HAL_RCC_ClockConfig+0xd6>
 8000b38:	e7ae      	b.n	8000a98 <HAL_RCC_ClockConfig+0x48>
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000b3a:	6813      	ldr	r3, [r2, #0]
 8000b3c:	f023 0307 	bic.w	r3, r3, #7
 8000b40:	432b      	orrs	r3, r5
 8000b42:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000b44:	6813      	ldr	r3, [r2, #0]
 8000b46:	f003 0307 	and.w	r3, r3, #7
 8000b4a:	429d      	cmp	r5, r3
 8000b4c:	d19f      	bne.n	8000a8e <HAL_RCC_ClockConfig+0x3e>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000b4e:	6831      	ldr	r1, [r6, #0]
 8000b50:	4c15      	ldr	r4, [pc, #84]	; (8000ba8 <HAL_RCC_ClockConfig+0x158>)
 8000b52:	f011 0f04 	tst.w	r1, #4
 8000b56:	d005      	beq.n	8000b64 <HAL_RCC_ClockConfig+0x114>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000b58:	6863      	ldr	r3, [r4, #4]
 8000b5a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000b5e:	68f3      	ldr	r3, [r6, #12]
 8000b60:	4313      	orrs	r3, r2
 8000b62:	6063      	str	r3, [r4, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000b64:	070b      	lsls	r3, r1, #28
 8000b66:	d506      	bpl.n	8000b76 <HAL_RCC_ClockConfig+0x126>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000b68:	6863      	ldr	r3, [r4, #4]
 8000b6a:	6932      	ldr	r2, [r6, #16]
 8000b6c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000b70:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000b74:	6063      	str	r3, [r4, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000b76:	f7ff ff23 	bl	80009c0 <HAL_RCC_GetSysClockFreq>
 8000b7a:	6863      	ldr	r3, [r4, #4]
 8000b7c:	22f0      	movs	r2, #240	; 0xf0
 8000b7e:	fa92 f2a2 	rbit	r2, r2
 8000b82:	fab2 f282 	clz	r2, r2
 8000b86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000b8a:	40d3      	lsrs	r3, r2
 8000b8c:	4a07      	ldr	r2, [pc, #28]	; (8000bac <HAL_RCC_ClockConfig+0x15c>)
 8000b8e:	5cd3      	ldrb	r3, [r2, r3]
 8000b90:	40d8      	lsrs	r0, r3
 8000b92:	4b07      	ldr	r3, [pc, #28]	; (8000bb0 <HAL_RCC_ClockConfig+0x160>)
 8000b94:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8000b96:	2000      	movs	r0, #0
 8000b98:	f7ff fb24 	bl	80001e4 <HAL_InitTick>
  
  return HAL_OK;
 8000b9c:	2000      	movs	r0, #0
}
 8000b9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000ba2:	bf00      	nop
 8000ba4:	40022000 	.word	0x40022000
 8000ba8:	40021000 	.word	0x40021000
 8000bac:	08000dbe 	.word	0x08000dbe
 8000bb0:	20000000 	.word	0x20000000

08000bb4 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8000bb4:	4b01      	ldr	r3, [pc, #4]	; (8000bbc <HAL_RCC_GetHCLKFreq+0x8>)
 8000bb6:	6818      	ldr	r0, [r3, #0]
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	20000000 	.word	0x20000000

08000bc0 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8000bc0:	b510      	push	{r4, lr}
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bc2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8000bc6:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bc8:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bca:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000bcc:	2100      	movs	r1, #0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bce:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bd0:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bd2:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000bd4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bd8:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000bda:	9108      	str	r1, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bdc:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bde:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000be0:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000be2:	f7ff fc8d 	bl	8000500 <HAL_RCC_OscConfig>
 8000be6:	b100      	cbz	r0, 8000bea <SystemClock_Config+0x2a>
 8000be8:	e7fe      	b.n	8000be8 <SystemClock_Config+0x28>
    Error_Handler();
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bea:	230f      	movs	r3, #15
 8000bec:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bee:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bf0:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bf4:	9005      	str	r0, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bf6:	4621      	mov	r1, r4
 8000bf8:	a801      	add	r0, sp, #4

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bfa:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bfc:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bfe:	f7ff ff27 	bl	8000a50 <HAL_RCC_ClockConfig>
 8000c02:	4604      	mov	r4, r0
 8000c04:	b100      	cbz	r0, 8000c08 <SystemClock_Config+0x48>
 8000c06:	e7fe      	b.n	8000c06 <SystemClock_Config+0x46>
    Error_Handler();
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000c08:	f7ff ffd4 	bl	8000bb4 <HAL_RCC_GetHCLKFreq>
 8000c0c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c10:	fbb0 f0f3 	udiv	r0, r0, r3
 8000c14:	f7ff fb6c 	bl	80002f0 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000c18:	2004      	movs	r0, #4
 8000c1a:	f7ff fb7f 	bl	800031c <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000c1e:	4622      	mov	r2, r4
 8000c20:	4621      	mov	r1, r4
 8000c22:	f04f 30ff 	mov.w	r0, #4294967295
 8000c26:	f7ff fb2f 	bl	8000288 <HAL_NVIC_SetPriority>
}
 8000c2a:	b010      	add	sp, #64	; 0x40
 8000c2c:	bd10      	pop	{r4, pc}
	...

08000c30 <main>:
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

int main(void)
{
 8000c30:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c32:	f7ff fae9 	bl	8000208 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8000c36:	f7ff ffc3 	bl	8000bc0 <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c3a:	4b16      	ldr	r3, [pc, #88]	; (8000c94 <main+0x64>)
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000c3c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c40:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000c42:	4815      	ldr	r0, [pc, #84]	; (8000c98 <main+0x68>)
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c44:	f042 0210 	orr.w	r2, r2, #16
 8000c48:	619a      	str	r2, [r3, #24]
 8000c4a:	699a      	ldr	r2, [r3, #24]
 8000c4c:	f002 0210 	and.w	r2, r2, #16
 8000c50:	9200      	str	r2, [sp, #0]
 8000c52:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c54:	699a      	ldr	r2, [r3, #24]
 8000c56:	f042 0220 	orr.w	r2, r2, #32
 8000c5a:	619a      	str	r2, [r3, #24]
 8000c5c:	699b      	ldr	r3, [r3, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000c5e:	2200      	movs	r2, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c60:	f003 0320 	and.w	r3, r3, #32
 8000c64:	9301      	str	r3, [sp, #4]
 8000c66:	9b01      	ldr	r3, [sp, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000c68:	f7ff fc42 	bl	80004f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000c6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c70:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c72:	2301      	movs	r3, #1
 8000c74:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c76:	a902      	add	r1, sp, #8
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c78:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c7a:	4807      	ldr	r0, [pc, #28]	; (8000c98 <main+0x68>)
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7c:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c7e:	f7ff fb5f 	bl	8000340 <HAL_GPIO_Init>
  while (1)
  {
  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000c82:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c86:	4804      	ldr	r0, [pc, #16]	; (8000c98 <main+0x68>)
 8000c88:	f7ff fc36 	bl	80004f8 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8000c8c:	2064      	movs	r0, #100	; 0x64
 8000c8e:	f7ff fadb 	bl	8000248 <HAL_Delay>
 8000c92:	e7f6      	b.n	8000c82 <main+0x52>
 8000c94:	40021000 	.word	0x40021000
 8000c98:	40011000 	.word	0x40011000

08000c9c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c9c:	4b20      	ldr	r3, [pc, #128]	; (8000d20 <HAL_MspInit+0x84>)
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c9e:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ca0:	699a      	ldr	r2, [r3, #24]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ca2:	2003      	movs	r0, #3
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ca4:	f042 0201 	orr.w	r2, r2, #1
 8000ca8:	619a      	str	r2, [r3, #24]
 8000caa:	699b      	ldr	r3, [r3, #24]
 8000cac:	f003 0301 	and.w	r3, r3, #1
 8000cb0:	9301      	str	r3, [sp, #4]
 8000cb2:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cb4:	f7ff fad6 	bl	8000264 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8000cb8:	2200      	movs	r2, #0
 8000cba:	4611      	mov	r1, r2
 8000cbc:	f06f 000b 	mvn.w	r0, #11
 8000cc0:	f7ff fae2 	bl	8000288 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	4611      	mov	r1, r2
 8000cc8:	f06f 000a 	mvn.w	r0, #10
 8000ccc:	f7ff fadc 	bl	8000288 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	4611      	mov	r1, r2
 8000cd4:	f06f 0009 	mvn.w	r0, #9
 8000cd8:	f7ff fad6 	bl	8000288 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8000cdc:	2200      	movs	r2, #0
 8000cde:	4611      	mov	r1, r2
 8000ce0:	f06f 0004 	mvn.w	r0, #4
 8000ce4:	f7ff fad0 	bl	8000288 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8000ce8:	2200      	movs	r2, #0
 8000cea:	4611      	mov	r1, r2
 8000cec:	f06f 0003 	mvn.w	r0, #3
 8000cf0:	f7ff faca 	bl	8000288 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	4611      	mov	r1, r2
 8000cf8:	f06f 0001 	mvn.w	r0, #1
 8000cfc:	f7ff fac4 	bl	8000288 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000d00:	2200      	movs	r2, #0
 8000d02:	4611      	mov	r1, r2
 8000d04:	f04f 30ff 	mov.w	r0, #4294967295
 8000d08:	f7ff fabe 	bl	8000288 <HAL_NVIC_SetPriority>

    /**DISABLE: JTAG-DP Disabled and SW-DP Disabled 
    */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000d0c:	4a05      	ldr	r2, [pc, #20]	; (8000d24 <HAL_MspInit+0x88>)
 8000d0e:	6853      	ldr	r3, [r2, #4]
 8000d10:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000d14:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000d18:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d1a:	b003      	add	sp, #12
 8000d1c:	f85d fb04 	ldr.w	pc, [sp], #4
 8000d20:	40021000 	.word	0x40021000
 8000d24:	40010000 	.word	0x40010000

08000d28 <NMI_Handler>:
 8000d28:	4770      	bx	lr

08000d2a <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8000d2a:	e7fe      	b.n	8000d2a <HardFault_Handler>

08000d2c <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8000d2c:	e7fe      	b.n	8000d2c <MemManage_Handler>

08000d2e <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8000d2e:	e7fe      	b.n	8000d2e <BusFault_Handler>

08000d30 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8000d30:	e7fe      	b.n	8000d30 <UsageFault_Handler>

08000d32 <SVC_Handler>:
 8000d32:	4770      	bx	lr

08000d34 <DebugMon_Handler>:
 8000d34:	4770      	bx	lr

08000d36 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8000d36:	4770      	bx	lr

08000d38 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8000d38:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d3a:	f7ff fa77 	bl	800022c <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d3e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  HAL_SYSTICK_IRQHandler();
 8000d42:	f7ff baf8 	b.w	8000336 <HAL_SYSTICK_IRQHandler>
	...

08000d48 <__libc_init_array>:
 8000d48:	4b0e      	ldr	r3, [pc, #56]	; (8000d84 <__libc_init_array+0x3c>)
 8000d4a:	b570      	push	{r4, r5, r6, lr}
 8000d4c:	461e      	mov	r6, r3
 8000d4e:	4c0e      	ldr	r4, [pc, #56]	; (8000d88 <__libc_init_array+0x40>)
 8000d50:	2500      	movs	r5, #0
 8000d52:	1ae4      	subs	r4, r4, r3
 8000d54:	10a4      	asrs	r4, r4, #2
 8000d56:	42a5      	cmp	r5, r4
 8000d58:	d004      	beq.n	8000d64 <__libc_init_array+0x1c>
 8000d5a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000d5e:	4798      	blx	r3
 8000d60:	3501      	adds	r5, #1
 8000d62:	e7f8      	b.n	8000d56 <__libc_init_array+0xe>
 8000d64:	f000 f816 	bl	8000d94 <_init>
 8000d68:	4b08      	ldr	r3, [pc, #32]	; (8000d8c <__libc_init_array+0x44>)
 8000d6a:	4c09      	ldr	r4, [pc, #36]	; (8000d90 <__libc_init_array+0x48>)
 8000d6c:	461e      	mov	r6, r3
 8000d6e:	1ae4      	subs	r4, r4, r3
 8000d70:	10a4      	asrs	r4, r4, #2
 8000d72:	2500      	movs	r5, #0
 8000d74:	42a5      	cmp	r5, r4
 8000d76:	d004      	beq.n	8000d82 <__libc_init_array+0x3a>
 8000d78:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000d7c:	4798      	blx	r3
 8000d7e:	3501      	adds	r5, #1
 8000d80:	e7f8      	b.n	8000d74 <__libc_init_array+0x2c>
 8000d82:	bd70      	pop	{r4, r5, r6, pc}
 8000d84:	08000dd0 	.word	0x08000dd0
 8000d88:	08000dd0 	.word	0x08000dd0
 8000d8c:	08000dd0 	.word	0x08000dd0
 8000d90:	08000dd4 	.word	0x08000dd4

08000d94 <_init>:
 8000d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d96:	bf00      	nop
 8000d98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d9a:	bc08      	pop	{r3}
 8000d9c:	469e      	mov	lr, r3
 8000d9e:	4770      	bx	lr

08000da0 <_fini>:
 8000da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000da2:	bf00      	nop
 8000da4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000da6:	bc08      	pop	{r3}
 8000da8:	469e      	mov	lr, r3
 8000daa:	4770      	bx	lr
