
C:\Users\sohae\Desktop\stm32fdiscovery\pc13c8t6\Debug\pc13c8t6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000150c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08001618  08001618  00011618  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800163c  0800163c  0001163c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001640  08001640  00011640  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08001644  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000098  20000004  08001648  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  2000009c  08001648  0002009c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_line   00003368  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00008bab  00000000  00000000  00023395  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000165e  00000000  00000000  0002bf40  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000660  00000000  00000000  0002d5a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000948  00000000  00000000  0002dc00  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004a92  00000000  00000000  0002e548  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002311  00000000  00000000  00032fda  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007e  00000000  00000000  000352eb  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000120c  00000000  00000000  0003536c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	08001600 	.word	0x08001600

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	08001600 	.word	0x08001600

0800014c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800014c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800014e:	e003      	b.n	8000158 <LoopCopyDataInit>

08000150 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000150:	4b0b      	ldr	r3, [pc, #44]	; (8000180 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000152:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000154:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000156:	3104      	adds	r1, #4

08000158 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000158:	480a      	ldr	r0, [pc, #40]	; (8000184 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800015a:	4b0b      	ldr	r3, [pc, #44]	; (8000188 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800015c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800015e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000160:	d3f6      	bcc.n	8000150 <CopyDataInit>
  ldr r2, =_sbss
 8000162:	4a0a      	ldr	r2, [pc, #40]	; (800018c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000164:	e002      	b.n	800016c <LoopFillZerobss>

08000166 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000166:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000168:	f842 3b04 	str.w	r3, [r2], #4

0800016c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800016c:	4b08      	ldr	r3, [pc, #32]	; (8000190 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800016e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000170:	d3f9      	bcc.n	8000166 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000172:	f001 f9f9 	bl	8001568 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000176:	f001 fa1d 	bl	80015b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800017a:	f001 f88b 	bl	8001294 <main>
  bx lr
 800017e:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
  b LoopCopyDataInit

CopyDataInit:
  ldr r3, =_sidata
 8000180:	08001644 	.word	0x08001644
  ldr r3, [r3, r1]
  str r3, [r0, r1]
  adds r1, r1, #4

LoopCopyDataInit:
  ldr r0, =_sdata
 8000184:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000188:	20000004 	.word	0x20000004
  adds r2, r0, r1
  cmp r2, r3
  bcc CopyDataInit
  ldr r2, =_sbss
 800018c:	20000004 	.word	0x20000004
FillZerobss:
  movs r3, #0
  str r3, [r2], #4

LoopFillZerobss:
  ldr r3, = _ebss
 8000190:	2000009c 	.word	0x2000009c

08000194 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000194:	e7fe      	b.n	8000194 <ADC1_2_IRQHandler>

08000196 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000196:	b510      	push	{r4, lr}
 8000198:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800019a:	f000 fcf1 	bl	8000b80 <HAL_RCC_GetHCLKFreq>
 800019e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001a2:	fbb0 f0f3 	udiv	r0, r0, r3
 80001a6:	f000 f889 	bl	80002bc <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 80001aa:	2200      	movs	r2, #0
 80001ac:	4621      	mov	r1, r4
 80001ae:	f04f 30ff 	mov.w	r0, #4294967295
 80001b2:	f000 f843 	bl	800023c <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 80001b6:	2000      	movs	r0, #0
 80001b8:	bd10      	pop	{r4, pc}
	...

080001bc <HAL_Init>:
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001bc:	4a07      	ldr	r2, [pc, #28]	; (80001dc <HAL_Init+0x20>)
  *        In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80001be:	b508      	push	{r3, lr}
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001c0:	6813      	ldr	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001c2:	2003      	movs	r0, #3
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001c4:	f043 0310 	orr.w	r3, r3, #16
 80001c8:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001ca:	f000 f825 	bl	8000218 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80001ce:	2000      	movs	r0, #0
 80001d0:	f7ff ffe1 	bl	8000196 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80001d4:	f001 f926 	bl	8001424 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80001d8:	2000      	movs	r0, #0
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	40022000 	.word	0x40022000

080001e0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80001e0:	4a02      	ldr	r2, [pc, #8]	; (80001ec <HAL_IncTick+0xc>)
 80001e2:	6813      	ldr	r3, [r2, #0]
 80001e4:	3301      	adds	r3, #1
 80001e6:	6013      	str	r3, [r2, #0]
 80001e8:	4770      	bx	lr
 80001ea:	bf00      	nop
 80001ec:	20000020 	.word	0x20000020

080001f0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001f0:	4b01      	ldr	r3, [pc, #4]	; (80001f8 <HAL_GetTick+0x8>)
 80001f2:	6818      	ldr	r0, [r3, #0]
}
 80001f4:	4770      	bx	lr
 80001f6:	bf00      	nop
 80001f8:	20000020 	.word	0x20000020

080001fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80001fc:	b513      	push	{r0, r1, r4, lr}
 80001fe:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 8000200:	f7ff fff6 	bl	80001f0 <HAL_GetTick>
 8000204:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8000206:	f7ff fff3 	bl	80001f0 <HAL_GetTick>
 800020a:	9b01      	ldr	r3, [sp, #4]
 800020c:	1b00      	subs	r0, r0, r4
 800020e:	4298      	cmp	r0, r3
 8000210:	d3f9      	bcc.n	8000206 <HAL_Delay+0xa>
  {
  }
}
 8000212:	b002      	add	sp, #8
 8000214:	bd10      	pop	{r4, pc}
	...

08000218 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000218:	4a07      	ldr	r2, [pc, #28]	; (8000238 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 800021a:	0200      	lsls	r0, r0, #8
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800021c:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 800021e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8000222:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000226:	041b      	lsls	r3, r3, #16
 8000228:	0c1b      	lsrs	r3, r3, #16
 800022a:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800022e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000232:	4303      	orrs	r3, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8000234:	60d3      	str	r3, [r2, #12]
 8000236:	4770      	bx	lr
 8000238:	e000ed00 	.word	0xe000ed00

0800023c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800023c:	4b17      	ldr	r3, [pc, #92]	; (800029c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800023e:	b530      	push	{r4, r5, lr}
 8000240:	68db      	ldr	r3, [r3, #12]
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000242:	f3c3 2302 	ubfx	r3, r3, #8, #3
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000246:	f1c3 0407 	rsb	r4, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800024a:	1d1d      	adds	r5, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800024c:	2c04      	cmp	r4, #4
 800024e:	bf28      	it	cs
 8000250:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000252:	2d06      	cmp	r5, #6

  return (
 8000254:	f04f 0501 	mov.w	r5, #1
 8000258:	fa05 f404 	lsl.w	r4, r5, r4
 800025c:	f104 34ff 	add.w	r4, r4, #4294967295
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000260:	bf8c      	ite	hi
 8000262:	3b03      	subhi	r3, #3
 8000264:	2300      	movls	r3, #0

  return (
 8000266:	400c      	ands	r4, r1
 8000268:	409c      	lsls	r4, r3
 800026a:	fa05 f303 	lsl.w	r3, r5, r3
 800026e:	3b01      	subs	r3, #1
 8000270:	401a      	ands	r2, r3
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8000272:	2800      	cmp	r0, #0
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8000274:	ea42 0204 	orr.w	r2, r2, r4
 8000278:	ea4f 1202 	mov.w	r2, r2, lsl #4
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800027c:	bfaf      	iteee	ge
 800027e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000282:	4b07      	ldrlt	r3, [pc, #28]	; (80002a0 <HAL_NVIC_SetPriority+0x64>)
 8000284:	f000 000f 	andlt.w	r0, r0, #15
 8000288:	b2d2      	uxtblt	r2, r2
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800028a:	bfa5      	ittet	ge
 800028c:	b2d2      	uxtbge	r2, r2
 800028e:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000292:	541a      	strblt	r2, [r3, r0]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000294:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000298:	bd30      	pop	{r4, r5, pc}
 800029a:	bf00      	nop
 800029c:	e000ed00 	.word	0xe000ed00
 80002a0:	e000ed14 	.word	0xe000ed14

080002a4 <HAL_NVIC_EnableIRQ>:
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80002a4:	0942      	lsrs	r2, r0, #5
 80002a6:	2301      	movs	r3, #1
 80002a8:	f000 001f 	and.w	r0, r0, #31
 80002ac:	fa03 f000 	lsl.w	r0, r3, r0
 80002b0:	4b01      	ldr	r3, [pc, #4]	; (80002b8 <HAL_NVIC_EnableIRQ+0x14>)
 80002b2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80002b6:	4770      	bx	lr
 80002b8:	e000e100 	.word	0xe000e100

080002bc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80002bc:	3801      	subs	r0, #1
 80002be:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80002c2:	d20a      	bcs.n	80002da <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002c4:	4b06      	ldr	r3, [pc, #24]	; (80002e0 <HAL_SYSTICK_Config+0x24>)
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002c6:	4a07      	ldr	r2, [pc, #28]	; (80002e4 <HAL_SYSTICK_Config+0x28>)
 80002c8:	21f0      	movs	r1, #240	; 0xf0
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002ca:	6058      	str	r0, [r3, #4]
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002cc:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002d0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002d2:	2207      	movs	r2, #7
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002d4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002d6:	601a      	str	r2, [r3, #0]
 80002d8:	4770      	bx	lr
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
 80002da:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop
 80002e0:	e000e010 	.word	0xe000e010
 80002e4:	e000ed00 	.word	0xe000ed00

080002e8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80002e8:	4b04      	ldr	r3, [pc, #16]	; (80002fc <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80002ea:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80002ec:	681a      	ldr	r2, [r3, #0]
 80002ee:	bf0c      	ite	eq
 80002f0:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80002f4:	f022 0204 	bicne.w	r2, r2, #4
 80002f8:	601a      	str	r2, [r3, #0]
 80002fa:	4770      	bx	lr
 80002fc:	e000e010 	.word	0xe000e010

08000300 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000300:	4770      	bx	lr

08000302 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000302:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000304:	f7ff fffc 	bl	8000300 <HAL_SYSTICK_Callback>
 8000308:	bd08      	pop	{r3, pc}
	...

0800030c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800030c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00;
  uint32_t iocurrent = 0x00;
  uint32_t temp = 0x00;
  uint32_t config = 0x00;
 8000310:	2400      	movs	r4, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8000312:	4626      	mov	r6, r4
 8000314:	4b62      	ldr	r3, [pc, #392]	; (80004a0 <HAL_GPIO_Init+0x194>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000316:	f8df e194 	ldr.w	lr, [pc, #404]	; 80004ac <HAL_GPIO_Init+0x1a0>
 800031a:	f8df c194 	ldr.w	ip, [pc, #404]	; 80004b0 <HAL_GPIO_Init+0x1a4>

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800031e:	2201      	movs	r2, #1
    
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if (iocurrent == ioposition)
 8000320:	680d      	ldr	r5, [r1, #0]

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000322:	40b2      	lsls	r2, r6
    
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if (iocurrent == ioposition)
 8000324:	ea32 0505 	bics.w	r5, r2, r5
 8000328:	f040 80b3 	bne.w	8000492 <HAL_GPIO_Init+0x186>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800032c:	684d      	ldr	r5, [r1, #4]
 800032e:	2d12      	cmp	r5, #18
 8000330:	d028      	beq.n	8000384 <HAL_GPIO_Init+0x78>
 8000332:	d80e      	bhi.n	8000352 <HAL_GPIO_Init+0x46>
 8000334:	2d02      	cmp	r5, #2
 8000336:	d022      	beq.n	800037e <HAL_GPIO_Init+0x72>
 8000338:	d804      	bhi.n	8000344 <HAL_GPIO_Init+0x38>
 800033a:	b335      	cbz	r5, 800038a <HAL_GPIO_Init+0x7e>
 800033c:	2d01      	cmp	r5, #1
 800033e:	d12d      	bne.n	800039c <HAL_GPIO_Init+0x90>
      {
        /* If we are configuring the pin in OUTPUT push-pull mode */
        case GPIO_MODE_OUTPUT_PP:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000340:	68cc      	ldr	r4, [r1, #12]
          break;
 8000342:	e02b      	b.n	800039c <HAL_GPIO_Init+0x90>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000344:	2d03      	cmp	r5, #3
 8000346:	d018      	beq.n	800037a <HAL_GPIO_Init+0x6e>
 8000348:	2d11      	cmp	r5, #17
 800034a:	d127      	bne.n	800039c <HAL_GPIO_Init+0x90>
          
        /* If we are configuring the pin in OUTPUT open-drain mode */
        case GPIO_MODE_OUTPUT_OD:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800034c:	68cc      	ldr	r4, [r1, #12]
 800034e:	3404      	adds	r4, #4
          break;
 8000350:	e024      	b.n	800039c <HAL_GPIO_Init+0x90>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000352:	4f54      	ldr	r7, [pc, #336]	; (80004a4 <HAL_GPIO_Init+0x198>)
 8000354:	42bd      	cmp	r5, r7
 8000356:	d018      	beq.n	800038a <HAL_GPIO_Init+0x7e>
 8000358:	d806      	bhi.n	8000368 <HAL_GPIO_Init+0x5c>
 800035a:	f8df 8158 	ldr.w	r8, [pc, #344]	; 80004b4 <HAL_GPIO_Init+0x1a8>
 800035e:	4545      	cmp	r5, r8
 8000360:	d013      	beq.n	800038a <HAL_GPIO_Init+0x7e>
 8000362:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 8000366:	e005      	b.n	8000374 <HAL_GPIO_Init+0x68>
 8000368:	4575      	cmp	r5, lr
 800036a:	d00e      	beq.n	800038a <HAL_GPIO_Init+0x7e>
 800036c:	4565      	cmp	r5, ip
 800036e:	d00c      	beq.n	800038a <HAL_GPIO_Init+0x7e>
 8000370:	f8df 8144 	ldr.w	r8, [pc, #324]	; 80004b8 <HAL_GPIO_Init+0x1ac>
 8000374:	4545      	cmp	r5, r8
 8000376:	d111      	bne.n	800039c <HAL_GPIO_Init+0x90>
 8000378:	e007      	b.n	800038a <HAL_GPIO_Init+0x7e>
          }
          break; 
          
        /* If we are configuring the pin in INPUT analog mode */
        case GPIO_MODE_ANALOG:
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800037a:	2400      	movs	r4, #0
 800037c:	e00e      	b.n	800039c <HAL_GPIO_Init+0x90>
          
        /* If we are configuring the pin in ALTERNATE FUNCTION push-pull mode */
        case GPIO_MODE_AF_PP:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800037e:	68cc      	ldr	r4, [r1, #12]
 8000380:	3408      	adds	r4, #8
          break;
 8000382:	e00b      	b.n	800039c <HAL_GPIO_Init+0x90>
          
        /* If we are configuring the pin in ALTERNATE FUNCTION open-drain mode */
        case GPIO_MODE_AF_OD:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000384:	68cc      	ldr	r4, [r1, #12]
 8000386:	340c      	adds	r4, #12
          break;
 8000388:	e008      	b.n	800039c <HAL_GPIO_Init+0x90>
        case GPIO_MODE_EVT_RISING:
        case GPIO_MODE_EVT_FALLING:
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if(GPIO_Init->Pull == GPIO_NOPULL)
 800038a:	688c      	ldr	r4, [r1, #8]
 800038c:	b12c      	cbz	r4, 800039a <HAL_GPIO_Init+0x8e>
          {  
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
          }
          else if(GPIO_Init->Pull == GPIO_PULLUP)
 800038e:	2c01      	cmp	r4, #1
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
            
            /* Set the corresponding ODR bit */
            GPIOx->BSRR = ioposition;
 8000390:	bf0c      	ite	eq
 8000392:	6102      	streq	r2, [r0, #16]
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
            
            /* Reset the corresponding ODR bit */
            GPIOx->BRR = ioposition;
 8000394:	6142      	strne	r2, [r0, #20]
            /* Set the corresponding ODR bit */
            GPIOx->BSRR = ioposition;
          }
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000396:	2408      	movs	r4, #8
 8000398:	e000      	b.n	800039c <HAL_GPIO_Init+0x90>
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if(GPIO_Init->Pull == GPIO_NOPULL)
          {  
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800039a:	2404      	movs	r4, #4
          break;
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800039c:	2aff      	cmp	r2, #255	; 0xff
 800039e:	bf97      	itett	ls
 80003a0:	4683      	movls	fp, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
 80003a2:	f1a6 0508 	subhi.w	r5, r6, #8
          break;
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80003a6:	f8d0 9000 	ldrls.w	r9, [r0]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
 80003aa:	00b5      	lslls	r5, r6, #2
          break;
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80003ac:	bf84      	itt	hi
 80003ae:	f8d0 9004 	ldrhi.w	r9, [r0, #4]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
 80003b2:	00ad      	lslhi	r5, r5, #2
      
      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 80003b4:	f04f 080f 	mov.w	r8, #15
 80003b8:	fa08 fa05 	lsl.w	sl, r8, r5
 80003bc:	ea29 090a 	bic.w	r9, r9, sl
 80003c0:	fa04 f505 	lsl.w	r5, r4, r5
          break;
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80003c4:	bf88      	it	hi
 80003c6:	f100 0b04 	addhi.w	fp, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
      
      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 80003ca:	ea49 0505 	orr.w	r5, r9, r5
 80003ce:	f8cb 5000 	str.w	r5, [fp]
      
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80003d2:	f8d1 9004 	ldr.w	r9, [r1, #4]
 80003d6:	f019 5f80 	tst.w	r9, #268435456	; 0x10000000
 80003da:	d05a      	beq.n	8000492 <HAL_GPIO_Init+0x186>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80003dc:	4d32      	ldr	r5, [pc, #200]	; (80004a8 <HAL_GPIO_Init+0x19c>)
 80003de:	4f32      	ldr	r7, [pc, #200]	; (80004a8 <HAL_GPIO_Init+0x19c>)
 80003e0:	69ad      	ldr	r5, [r5, #24]
        temp = AFIO->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 80003e2:	f006 0a03 	and.w	sl, r6, #3
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80003e6:	f045 0501 	orr.w	r5, r5, #1
 80003ea:	61bd      	str	r5, [r7, #24]
 80003ec:	69bd      	ldr	r5, [r7, #24]
        temp = AFIO->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 80003ee:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80003f2:	f005 0501 	and.w	r5, r5, #1
 80003f6:	9501      	str	r5, [sp, #4]
 80003f8:	9d01      	ldr	r5, [sp, #4]
 80003fa:	f026 0503 	bic.w	r5, r6, #3
 80003fe:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 8000402:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2];
 8000406:	f8d5 b008 	ldr.w	fp, [r5, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800040a:	f5a7 3784 	sub.w	r7, r7, #67584	; 0x10800
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
        temp = AFIO->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 800040e:	fa08 f80a 	lsl.w	r8, r8, sl
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000412:	42b8      	cmp	r0, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
        temp = AFIO->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000414:	ea2b 0808 	bic.w	r8, fp, r8
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000418:	d010      	beq.n	800043c <HAL_GPIO_Init+0x130>
 800041a:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 800041e:	42b8      	cmp	r0, r7
 8000420:	d00f      	beq.n	8000442 <HAL_GPIO_Init+0x136>
 8000422:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000426:	42b8      	cmp	r0, r7
 8000428:	d00e      	beq.n	8000448 <HAL_GPIO_Init+0x13c>
 800042a:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 800042e:	42b8      	cmp	r0, r7
 8000430:	bf0c      	ite	eq
 8000432:	f04f 0b03 	moveq.w	fp, #3
 8000436:	f04f 0b04 	movne.w	fp, #4
 800043a:	e007      	b.n	800044c <HAL_GPIO_Init+0x140>
 800043c:	f04f 0b00 	mov.w	fp, #0
 8000440:	e004      	b.n	800044c <HAL_GPIO_Init+0x140>
 8000442:	f04f 0b01 	mov.w	fp, #1
 8000446:	e001      	b.n	800044c <HAL_GPIO_Init+0x140>
 8000448:	f04f 0b02 	mov.w	fp, #2
 800044c:	fa0b fa0a 	lsl.w	sl, fp, sl
 8000450:	ea4a 0a08 	orr.w	sl, sl, r8
        AFIO->EXTICR[position >> 2] = temp;
 8000454:	f8c5 a008 	str.w	sl, [r5, #8]
        

        /* Configure the interrupt mask */
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent); 
 8000458:	681d      	ldr	r5, [r3, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        AFIO->EXTICR[position >> 2] = temp;
        

        /* Configure the interrupt mask */
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800045a:	f419 3f80 	tst.w	r9, #65536	; 0x10000
        {
          SET_BIT(EXTI->IMR, iocurrent); 
 800045e:	bf14      	ite	ne
 8000460:	4315      	orrne	r5, r2
        } 
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent); 
 8000462:	4395      	biceq	r5, r2
 8000464:	601d      	str	r5, [r3, #0]
        } 
        
        /* Configure the event mask */
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent); 
 8000466:	685d      	ldr	r5, [r3, #4]
        {
          CLEAR_BIT(EXTI->IMR, iocurrent); 
        } 
        
        /* Configure the event mask */
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000468:	f419 3f00 	tst.w	r9, #131072	; 0x20000
        {
          SET_BIT(EXTI->EMR, iocurrent); 
 800046c:	bf14      	ite	ne
 800046e:	4315      	orrne	r5, r2
        } 
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent); 
 8000470:	4395      	biceq	r5, r2
 8000472:	605d      	str	r5, [r3, #4]
        }
        
        /* Enable or disable the rising trigger */
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent); 
 8000474:	689d      	ldr	r5, [r3, #8]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent); 
        }
        
        /* Enable or disable the rising trigger */
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000476:	f419 1f80 	tst.w	r9, #1048576	; 0x100000
        {
          SET_BIT(EXTI->RTSR, iocurrent); 
 800047a:	bf14      	ite	ne
 800047c:	4315      	orrne	r5, r2
        } 
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
 800047e:	4395      	biceq	r5, r2
 8000480:	609d      	str	r5, [r3, #8]
        }
        
        /* Enable or disable the falling trigger */
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent); 
 8000482:	68dd      	ldr	r5, [r3, #12]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
        }
        
        /* Enable or disable the falling trigger */
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000484:	f419 1f00 	tst.w	r9, #2097152	; 0x200000
        {
          SET_BIT(EXTI->FTSR, iocurrent); 
 8000488:	bf14      	ite	ne
 800048a:	432a      	orrne	r2, r5
        } 
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
 800048c:	ea25 0202 	biceq.w	r2, r5, r2
 8000490:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8000492:	3601      	adds	r6, #1
 8000494:	2e10      	cmp	r6, #16
 8000496:	f47f af42 	bne.w	800031e <HAL_GPIO_Init+0x12>
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
        }
      }
    }
  }
}
 800049a:	b003      	add	sp, #12
 800049c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80004a0:	40010400 	.word	0x40010400
 80004a4:	10210000 	.word	0x10210000
 80004a8:	40021000 	.word	0x40021000
 80004ac:	10310000 	.word	0x10310000
 80004b0:	10320000 	.word	0x10320000
 80004b4:	10110000 	.word	0x10110000
 80004b8:	10220000 	.word	0x10220000

080004bc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80004bc:	b902      	cbnz	r2, 80004c0 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80004be:	0409      	lsls	r1, r1, #16
 80004c0:	6101      	str	r1, [r0, #16]
 80004c2:	4770      	bx	lr

080004c4 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80004c4:	68c3      	ldr	r3, [r0, #12]
 80004c6:	4059      	eors	r1, r3
 80004c8:	60c1      	str	r1, [r0, #12]
 80004ca:	4770      	bx	lr

080004cc <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004cc:	6803      	ldr	r3, [r0, #0]
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80004ce:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004d2:	07dc      	lsls	r4, r3, #31
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80004d4:	4605      	mov	r5, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004d6:	d403      	bmi.n	80004e0 <HAL_RCC_OscConfig+0x14>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80004d8:	682b      	ldr	r3, [r5, #0]
 80004da:	0798      	lsls	r0, r3, #30
 80004dc:	d473      	bmi.n	80005c6 <HAL_RCC_OscConfig+0xfa>
 80004de:	e0f2      	b.n	80006c6 <HAL_RCC_OscConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80004e0:	4cb9      	ldr	r4, [pc, #740]	; (80007c8 <HAL_RCC_OscConfig+0x2fc>)
 80004e2:	6863      	ldr	r3, [r4, #4]
 80004e4:	f003 030c 	and.w	r3, r3, #12
 80004e8:	2b04      	cmp	r3, #4
 80004ea:	d007      	beq.n	80004fc <HAL_RCC_OscConfig+0x30>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80004ec:	6863      	ldr	r3, [r4, #4]
 80004ee:	f003 030c 	and.w	r3, r3, #12
 80004f2:	2b08      	cmp	r3, #8
 80004f4:	d116      	bne.n	8000524 <HAL_RCC_OscConfig+0x58>
 80004f6:	6863      	ldr	r3, [r4, #4]
 80004f8:	03d9      	lsls	r1, r3, #15
 80004fa:	d513      	bpl.n	8000524 <HAL_RCC_OscConfig+0x58>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80004fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000500:	fa93 f2a3 	rbit	r2, r3
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000504:	6822      	ldr	r2, [r4, #0]
 8000506:	fa93 f3a3 	rbit	r3, r3
 800050a:	fab3 f383 	clz	r3, r3
 800050e:	f003 031f 	and.w	r3, r3, #31
 8000512:	fa22 f303 	lsr.w	r3, r2, r3
 8000516:	07da      	lsls	r2, r3, #31
 8000518:	d5de      	bpl.n	80004d8 <HAL_RCC_OscConfig+0xc>
 800051a:	686b      	ldr	r3, [r5, #4]
 800051c:	2b00      	cmp	r3, #0
 800051e:	d1db      	bne.n	80004d8 <HAL_RCC_OscConfig+0xc>
      {
        return HAL_ERROR;
 8000520:	2001      	movs	r0, #1
 8000522:	e22d      	b.n	8000980 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000524:	686b      	ldr	r3, [r5, #4]
 8000526:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800052a:	d015      	beq.n	8000558 <HAL_RCC_OscConfig+0x8c>
 800052c:	b96b      	cbnz	r3, 800054a <HAL_RCC_OscConfig+0x7e>
 800052e:	6823      	ldr	r3, [r4, #0]
 8000530:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000534:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000538:	6023      	str	r3, [r4, #0]
 800053a:	6823      	ldr	r3, [r4, #0]
 800053c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000540:	6023      	str	r3, [r4, #0]
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000542:	f7ff fe55 	bl	80001f0 <HAL_GetTick>
 8000546:	4607      	mov	r7, r0
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000548:	e02f      	b.n	80005aa <HAL_RCC_OscConfig+0xde>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800054a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800054e:	6823      	ldr	r3, [r4, #0]
 8000550:	d106      	bne.n	8000560 <HAL_RCC_OscConfig+0x94>
 8000552:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000556:	6023      	str	r3, [r4, #0]
 8000558:	6823      	ldr	r3, [r4, #0]
 800055a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800055e:	e005      	b.n	800056c <HAL_RCC_OscConfig+0xa0>
 8000560:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000564:	6023      	str	r3, [r4, #0]
 8000566:	6823      	ldr	r3, [r4, #0]
 8000568:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800056c:	6023      	str	r3, [r4, #0]

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800056e:	f7ff fe3f 	bl	80001f0 <HAL_GetTick>
 8000572:	4607      	mov	r7, r0
 8000574:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000578:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800057c:	6822      	ldr	r2, [r4, #0]
 800057e:	fa96 f3a6 	rbit	r3, r6
 8000582:	fab3 f383 	clz	r3, r3
 8000586:	f003 031f 	and.w	r3, r3, #31
 800058a:	fa22 f303 	lsr.w	r3, r2, r3
 800058e:	07db      	lsls	r3, r3, #31
 8000590:	d4a2      	bmi.n	80004d8 <HAL_RCC_OscConfig+0xc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000592:	f7ff fe2d 	bl	80001f0 <HAL_GetTick>
 8000596:	1bc0      	subs	r0, r0, r7
 8000598:	2864      	cmp	r0, #100	; 0x64
 800059a:	d9ed      	bls.n	8000578 <HAL_RCC_OscConfig+0xac>
          {
            return HAL_TIMEOUT;
 800059c:	2003      	movs	r0, #3
 800059e:	e1ef      	b.n	8000980 <HAL_RCC_OscConfig+0x4b4>
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80005a0:	f7ff fe26 	bl	80001f0 <HAL_GetTick>
 80005a4:	1bc0      	subs	r0, r0, r7
 80005a6:	2864      	cmp	r0, #100	; 0x64
 80005a8:	d8f8      	bhi.n	800059c <HAL_RCC_OscConfig+0xd0>
 80005aa:	fa96 f3a6 	rbit	r3, r6
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80005ae:	6822      	ldr	r2, [r4, #0]
 80005b0:	fa96 f3a6 	rbit	r3, r6
 80005b4:	fab3 f383 	clz	r3, r3
 80005b8:	f003 031f 	and.w	r3, r3, #31
 80005bc:	fa22 f303 	lsr.w	r3, r2, r3
 80005c0:	07d8      	lsls	r0, r3, #31
 80005c2:	d4ed      	bmi.n	80005a0 <HAL_RCC_OscConfig+0xd4>
 80005c4:	e788      	b.n	80004d8 <HAL_RCC_OscConfig+0xc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80005c6:	4c80      	ldr	r4, [pc, #512]	; (80007c8 <HAL_RCC_OscConfig+0x2fc>)
 80005c8:	6863      	ldr	r3, [r4, #4]
 80005ca:	f013 0f0c 	tst.w	r3, #12
 80005ce:	d007      	beq.n	80005e0 <HAL_RCC_OscConfig+0x114>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80005d0:	6863      	ldr	r3, [r4, #4]
 80005d2:	f003 030c 	and.w	r3, r3, #12
 80005d6:	2b08      	cmp	r3, #8
 80005d8:	d121      	bne.n	800061e <HAL_RCC_OscConfig+0x152>
 80005da:	6863      	ldr	r3, [r4, #4]
 80005dc:	03d9      	lsls	r1, r3, #15
 80005de:	d41e      	bmi.n	800061e <HAL_RCC_OscConfig+0x152>
 80005e0:	2302      	movs	r3, #2
 80005e2:	fa93 f2a3 	rbit	r2, r3
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80005e6:	6822      	ldr	r2, [r4, #0]
 80005e8:	fa93 f3a3 	rbit	r3, r3
 80005ec:	fab3 f383 	clz	r3, r3
 80005f0:	f003 031f 	and.w	r3, r3, #31
 80005f4:	fa22 f303 	lsr.w	r3, r2, r3
 80005f8:	07da      	lsls	r2, r3, #31
 80005fa:	d502      	bpl.n	8000602 <HAL_RCC_OscConfig+0x136>
 80005fc:	692b      	ldr	r3, [r5, #16]
 80005fe:	2b01      	cmp	r3, #1
 8000600:	d18e      	bne.n	8000520 <HAL_RCC_OscConfig+0x54>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000602:	6823      	ldr	r3, [r4, #0]
 8000604:	22f8      	movs	r2, #248	; 0xf8
 8000606:	fa92 f2a2 	rbit	r2, r2
 800060a:	fab2 f282 	clz	r2, r2
 800060e:	6969      	ldr	r1, [r5, #20]
 8000610:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000614:	fa01 f202 	lsl.w	r2, r1, r2
 8000618:	4313      	orrs	r3, r2
 800061a:	6023      	str	r3, [r4, #0]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800061c:	e053      	b.n	80006c6 <HAL_RCC_OscConfig+0x1fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800061e:	692a      	ldr	r2, [r5, #16]
 8000620:	2301      	movs	r3, #1
 8000622:	b37a      	cbz	r2, 8000684 <HAL_RCC_OscConfig+0x1b8>
 8000624:	fa93 f2a3 	rbit	r2, r3
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000628:	fab2 f282 	clz	r2, r2
 800062c:	0092      	lsls	r2, r2, #2
 800062e:	f102 4284 	add.w	r2, r2, #1107296256	; 0x42000000
 8000632:	f502 0284 	add.w	r2, r2, #4325376	; 0x420000
 8000636:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000638:	f7ff fdda 	bl	80001f0 <HAL_GetTick>
 800063c:	4607      	mov	r7, r0
 800063e:	2602      	movs	r6, #2
 8000640:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000644:	4860      	ldr	r0, [pc, #384]	; (80007c8 <HAL_RCC_OscConfig+0x2fc>)
 8000646:	6822      	ldr	r2, [r4, #0]
 8000648:	fa96 f3a6 	rbit	r3, r6
 800064c:	fab3 f383 	clz	r3, r3
 8000650:	f003 031f 	and.w	r3, r3, #31
 8000654:	fa22 f303 	lsr.w	r3, r2, r3
 8000658:	07db      	lsls	r3, r3, #31
 800065a:	d405      	bmi.n	8000668 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800065c:	f7ff fdc8 	bl	80001f0 <HAL_GetTick>
 8000660:	1bc0      	subs	r0, r0, r7
 8000662:	2802      	cmp	r0, #2
 8000664:	d9ec      	bls.n	8000640 <HAL_RCC_OscConfig+0x174>
 8000666:	e799      	b.n	800059c <HAL_RCC_OscConfig+0xd0>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000668:	6803      	ldr	r3, [r0, #0]
 800066a:	22f8      	movs	r2, #248	; 0xf8
 800066c:	fa92 f2a2 	rbit	r2, r2
 8000670:	fab2 f282 	clz	r2, r2
 8000674:	6969      	ldr	r1, [r5, #20]
 8000676:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800067a:	fa01 f202 	lsl.w	r2, r1, r2
 800067e:	4313      	orrs	r3, r2
 8000680:	6003      	str	r3, [r0, #0]
 8000682:	e020      	b.n	80006c6 <HAL_RCC_OscConfig+0x1fa>
 8000684:	fa93 f3a3 	rbit	r3, r3
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000688:	fab3 f383 	clz	r3, r3
 800068c:	009b      	lsls	r3, r3, #2
 800068e:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8000692:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8000696:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000698:	f7ff fdaa 	bl	80001f0 <HAL_GetTick>
 800069c:	4607      	mov	r7, r0
 800069e:	2602      	movs	r6, #2
 80006a0:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80006a4:	6822      	ldr	r2, [r4, #0]
 80006a6:	fa96 f3a6 	rbit	r3, r6
 80006aa:	fab3 f383 	clz	r3, r3
 80006ae:	f003 031f 	and.w	r3, r3, #31
 80006b2:	fa22 f303 	lsr.w	r3, r2, r3
 80006b6:	07d9      	lsls	r1, r3, #31
 80006b8:	d505      	bpl.n	80006c6 <HAL_RCC_OscConfig+0x1fa>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80006ba:	f7ff fd99 	bl	80001f0 <HAL_GetTick>
 80006be:	1bc0      	subs	r0, r0, r7
 80006c0:	2802      	cmp	r0, #2
 80006c2:	d9ed      	bls.n	80006a0 <HAL_RCC_OscConfig+0x1d4>
 80006c4:	e76a      	b.n	800059c <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80006c6:	682b      	ldr	r3, [r5, #0]
 80006c8:	071a      	lsls	r2, r3, #28
 80006ca:	d546      	bpl.n	800075a <HAL_RCC_OscConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80006cc:	69aa      	ldr	r2, [r5, #24]
 80006ce:	4c3e      	ldr	r4, [pc, #248]	; (80007c8 <HAL_RCC_OscConfig+0x2fc>)
 80006d0:	2301      	movs	r3, #1
 80006d2:	493e      	ldr	r1, [pc, #248]	; (80007cc <HAL_RCC_OscConfig+0x300>)
 80006d4:	b312      	cbz	r2, 800071c <HAL_RCC_OscConfig+0x250>
 80006d6:	fa93 f2a3 	rbit	r2, r3
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80006da:	fab2 f282 	clz	r2, r2
 80006de:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80006e2:	f7ff fd85 	bl	80001f0 <HAL_GetTick>
 80006e6:	4607      	mov	r7, r0
 80006e8:	2602      	movs	r6, #2
 80006ea:	fa96 f3a6 	rbit	r3, r6
 80006ee:	fa96 f3a6 	rbit	r3, r6
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80006f2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80006f4:	fa96 f3a6 	rbit	r3, r6
 80006f8:	fab3 f383 	clz	r3, r3
 80006fc:	f003 031f 	and.w	r3, r3, #31
 8000700:	fa22 f303 	lsr.w	r3, r2, r3
 8000704:	07db      	lsls	r3, r3, #31
 8000706:	d405      	bmi.n	8000714 <HAL_RCC_OscConfig+0x248>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000708:	f7ff fd72 	bl	80001f0 <HAL_GetTick>
 800070c:	1bc0      	subs	r0, r0, r7
 800070e:	2802      	cmp	r0, #2
 8000710:	d9eb      	bls.n	80006ea <HAL_RCC_OscConfig+0x21e>
 8000712:	e743      	b.n	800059c <HAL_RCC_OscConfig+0xd0>
          return HAL_TIMEOUT;
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      HAL_Delay(1);
 8000714:	2001      	movs	r0, #1
 8000716:	f7ff fd71 	bl	80001fc <HAL_Delay>
 800071a:	e01e      	b.n	800075a <HAL_RCC_OscConfig+0x28e>
 800071c:	fa93 f3a3 	rbit	r3, r3
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000720:	fab3 f383 	clz	r3, r3
 8000724:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000728:	f7ff fd62 	bl	80001f0 <HAL_GetTick>
 800072c:	4607      	mov	r7, r0
 800072e:	2602      	movs	r6, #2
 8000730:	fa96 f3a6 	rbit	r3, r6
 8000734:	fa96 f3a6 	rbit	r3, r6
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000738:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800073a:	fa96 f3a6 	rbit	r3, r6
 800073e:	fab3 f383 	clz	r3, r3
 8000742:	f003 031f 	and.w	r3, r3, #31
 8000746:	fa22 f303 	lsr.w	r3, r2, r3
 800074a:	07d8      	lsls	r0, r3, #31
 800074c:	d505      	bpl.n	800075a <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800074e:	f7ff fd4f 	bl	80001f0 <HAL_GetTick>
 8000752:	1bc0      	subs	r0, r0, r7
 8000754:	2802      	cmp	r0, #2
 8000756:	d9eb      	bls.n	8000730 <HAL_RCC_OscConfig+0x264>
 8000758:	e720      	b.n	800059c <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800075a:	682b      	ldr	r3, [r5, #0]
 800075c:	0759      	lsls	r1, r3, #29
 800075e:	d404      	bmi.n	800076a <HAL_RCC_OscConfig+0x29e>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000760:	69ea      	ldr	r2, [r5, #28]
 8000762:	2a00      	cmp	r2, #0
 8000764:	f040 8081 	bne.w	800086a <HAL_RCC_OscConfig+0x39e>
 8000768:	e0d8      	b.n	800091c <HAL_RCC_OscConfig+0x450>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800076a:	4c17      	ldr	r4, [pc, #92]	; (80007c8 <HAL_RCC_OscConfig+0x2fc>)
    
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800076c:	4e18      	ldr	r6, [pc, #96]	; (80007d0 <HAL_RCC_OscConfig+0x304>)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800076e:	69e3      	ldr	r3, [r4, #28]
 8000770:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000774:	61e3      	str	r3, [r4, #28]
 8000776:	69e3      	ldr	r3, [r4, #28]
 8000778:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800077c:	9301      	str	r3, [sp, #4]
 800077e:	9b01      	ldr	r3, [sp, #4]
    
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000780:	6833      	ldr	r3, [r6, #0]
 8000782:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000786:	6033      	str	r3, [r6, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000788:	f7ff fd32 	bl	80001f0 <HAL_GetTick>
 800078c:	4607      	mov	r7, r0

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800078e:	6833      	ldr	r3, [r6, #0]
 8000790:	05da      	lsls	r2, r3, #23
 8000792:	d405      	bmi.n	80007a0 <HAL_RCC_OscConfig+0x2d4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000794:	f7ff fd2c 	bl	80001f0 <HAL_GetTick>
 8000798:	1bc0      	subs	r0, r0, r7
 800079a:	2864      	cmp	r0, #100	; 0x64
 800079c:	d9f7      	bls.n	800078e <HAL_RCC_OscConfig+0x2c2>
 800079e:	e6fd      	b.n	800059c <HAL_RCC_OscConfig+0xd0>
          return HAL_TIMEOUT;
        }
      }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80007a0:	68eb      	ldr	r3, [r5, #12]
 80007a2:	2b01      	cmp	r3, #1
 80007a4:	d01c      	beq.n	80007e0 <HAL_RCC_OscConfig+0x314>
 80007a6:	b9ab      	cbnz	r3, 80007d4 <HAL_RCC_OscConfig+0x308>
 80007a8:	6a23      	ldr	r3, [r4, #32]
 80007aa:	2602      	movs	r6, #2
 80007ac:	f023 0301 	bic.w	r3, r3, #1
 80007b0:	6223      	str	r3, [r4, #32]
 80007b2:	6a23      	ldr	r3, [r4, #32]
 80007b4:	4637      	mov	r7, r6
 80007b6:	f023 0304 	bic.w	r3, r3, #4
 80007ba:	6223      	str	r3, [r4, #32]
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80007bc:	f7ff fd18 	bl	80001f0 <HAL_GetTick>
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80007c0:	f241 3988 	movw	r9, #5000	; 0x1388
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80007c4:	4680      	mov	r8, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80007c6:	e048      	b.n	800085a <HAL_RCC_OscConfig+0x38e>
 80007c8:	40021000 	.word	0x40021000
 80007cc:	42420480 	.word	0x42420480
 80007d0:	40007000 	.word	0x40007000
          return HAL_TIMEOUT;
        }
      }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80007d4:	2b05      	cmp	r3, #5
 80007d6:	6a23      	ldr	r3, [r4, #32]
 80007d8:	d106      	bne.n	80007e8 <HAL_RCC_OscConfig+0x31c>
 80007da:	f043 0304 	orr.w	r3, r3, #4
 80007de:	6223      	str	r3, [r4, #32]
 80007e0:	6a23      	ldr	r3, [r4, #32]
 80007e2:	f043 0301 	orr.w	r3, r3, #1
 80007e6:	e005      	b.n	80007f4 <HAL_RCC_OscConfig+0x328>
 80007e8:	f023 0301 	bic.w	r3, r3, #1
 80007ec:	6223      	str	r3, [r4, #32]
 80007ee:	6a23      	ldr	r3, [r4, #32]
 80007f0:	f023 0304 	bic.w	r3, r3, #4
 80007f4:	6223      	str	r3, [r4, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80007f6:	f7ff fcfb 	bl	80001f0 <HAL_GetTick>
 80007fa:	2602      	movs	r6, #2
 80007fc:	4681      	mov	r9, r0
 80007fe:	46b0      	mov	r8, r6
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000800:	f241 3788 	movw	r7, #5000	; 0x1388
 8000804:	fa96 f3a6 	rbit	r3, r6
 8000808:	fa96 f3a6 	rbit	r3, r6
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800080c:	b10b      	cbz	r3, 8000812 <HAL_RCC_OscConfig+0x346>
 800080e:	6a22      	ldr	r2, [r4, #32]
 8000810:	e000      	b.n	8000814 <HAL_RCC_OscConfig+0x348>
 8000812:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000814:	fa98 f3a8 	rbit	r3, r8
 8000818:	fab3 f383 	clz	r3, r3
 800081c:	f003 031f 	and.w	r3, r3, #31
 8000820:	fa22 f303 	lsr.w	r3, r2, r3
 8000824:	07db      	lsls	r3, r3, #31
 8000826:	d49b      	bmi.n	8000760 <HAL_RCC_OscConfig+0x294>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000828:	f7ff fce2 	bl	80001f0 <HAL_GetTick>
 800082c:	ebc9 0000 	rsb	r0, r9, r0
 8000830:	42b8      	cmp	r0, r7
 8000832:	d9e7      	bls.n	8000804 <HAL_RCC_OscConfig+0x338>
 8000834:	e6b2      	b.n	800059c <HAL_RCC_OscConfig+0xd0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000836:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000838:	fa97 f3a7 	rbit	r3, r7
 800083c:	fab3 f383 	clz	r3, r3
 8000840:	f003 031f 	and.w	r3, r3, #31
 8000844:	fa22 f303 	lsr.w	r3, r2, r3
 8000848:	07d8      	lsls	r0, r3, #31
 800084a:	d589      	bpl.n	8000760 <HAL_RCC_OscConfig+0x294>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800084c:	f7ff fcd0 	bl	80001f0 <HAL_GetTick>
 8000850:	ebc8 0000 	rsb	r0, r8, r0
 8000854:	4548      	cmp	r0, r9
 8000856:	f63f aea1 	bhi.w	800059c <HAL_RCC_OscConfig+0xd0>
 800085a:	fa96 f3a6 	rbit	r3, r6
 800085e:	fa96 f3a6 	rbit	r3, r6
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000862:	2b00      	cmp	r3, #0
 8000864:	d0e7      	beq.n	8000836 <HAL_RCC_OscConfig+0x36a>
 8000866:	6a22      	ldr	r2, [r4, #32]
 8000868:	e7e6      	b.n	8000838 <HAL_RCC_OscConfig+0x36c>
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800086a:	4c47      	ldr	r4, [pc, #284]	; (8000988 <HAL_RCC_OscConfig+0x4bc>)
 800086c:	6863      	ldr	r3, [r4, #4]
 800086e:	f003 030c 	and.w	r3, r3, #12
 8000872:	2b08      	cmp	r3, #8
 8000874:	f43f ae54 	beq.w	8000520 <HAL_RCC_OscConfig+0x54>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000878:	2a02      	cmp	r2, #2
 800087a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800087e:	d15c      	bne.n	800093a <HAL_RCC_OscConfig+0x46e>
 8000880:	fa93 f3a3 	rbit	r3, r3
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000884:	fab3 f383 	clz	r3, r3
 8000888:	009b      	lsls	r3, r3, #2
 800088a:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 800088e:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8000892:	2200      	movs	r2, #0
 8000894:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000896:	f7ff fcab 	bl	80001f0 <HAL_GetTick>
 800089a:	4680      	mov	r8, r0
 800089c:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 80008a0:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80008a4:	4f38      	ldr	r7, [pc, #224]	; (8000988 <HAL_RCC_OscConfig+0x4bc>)
 80008a6:	6822      	ldr	r2, [r4, #0]
 80008a8:	fa96 f3a6 	rbit	r3, r6
 80008ac:	fab3 f383 	clz	r3, r3
 80008b0:	f003 031f 	and.w	r3, r3, #31
 80008b4:	fa22 f303 	lsr.w	r3, r2, r3
 80008b8:	07d9      	lsls	r1, r3, #31
 80008ba:	d431      	bmi.n	8000920 <HAL_RCC_OscConfig+0x454>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80008bc:	6a2e      	ldr	r6, [r5, #32]
 80008be:	f5b6 3f80 	cmp.w	r6, #65536	; 0x10000
 80008c2:	d105      	bne.n	80008d0 <HAL_RCC_OscConfig+0x404>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80008c4:	6879      	ldr	r1, [r7, #4]
 80008c6:	f421 3000 	bic.w	r0, r1, #131072	; 0x20000
 80008ca:	68a9      	ldr	r1, [r5, #8]
 80008cc:	4301      	orrs	r1, r0
 80008ce:	6079      	str	r1, [r7, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80008d0:	6863      	ldr	r3, [r4, #4]
 80008d2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80008d4:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 80008d8:	4332      	orrs	r2, r6
 80008da:	4313      	orrs	r3, r2
 80008dc:	6063      	str	r3, [r4, #4]
 80008de:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80008e2:	fa93 f3a3 	rbit	r3, r3
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80008e6:	fab3 f383 	clz	r3, r3
 80008ea:	009b      	lsls	r3, r3, #2
 80008ec:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 80008f0:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 80008f4:	2201      	movs	r2, #1
 80008f6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80008f8:	f7ff fc7a 	bl	80001f0 <HAL_GetTick>
 80008fc:	4606      	mov	r6, r0
 80008fe:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8000902:	fa95 f3a5 	rbit	r3, r5
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000906:	6822      	ldr	r2, [r4, #0]
 8000908:	fa95 f3a5 	rbit	r3, r5
 800090c:	fab3 f383 	clz	r3, r3
 8000910:	f003 031f 	and.w	r3, r3, #31
 8000914:	fa22 f303 	lsr.w	r3, r2, r3
 8000918:	07da      	lsls	r2, r3, #31
 800091a:	d508      	bpl.n	800092e <HAL_RCC_OscConfig+0x462>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 800091c:	2000      	movs	r0, #0
 800091e:	e02f      	b.n	8000980 <HAL_RCC_OscConfig+0x4b4>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000920:	f7ff fc66 	bl	80001f0 <HAL_GetTick>
 8000924:	ebc8 0000 	rsb	r0, r8, r0
 8000928:	2802      	cmp	r0, #2
 800092a:	d9b9      	bls.n	80008a0 <HAL_RCC_OscConfig+0x3d4>
 800092c:	e636      	b.n	800059c <HAL_RCC_OscConfig+0xd0>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800092e:	f7ff fc5f 	bl	80001f0 <HAL_GetTick>
 8000932:	1b80      	subs	r0, r0, r6
 8000934:	2802      	cmp	r0, #2
 8000936:	d9e4      	bls.n	8000902 <HAL_RCC_OscConfig+0x436>
 8000938:	e630      	b.n	800059c <HAL_RCC_OscConfig+0xd0>
 800093a:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800093e:	fab3 f383 	clz	r3, r3
 8000942:	009b      	lsls	r3, r3, #2
 8000944:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8000948:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000950:	f7ff fc4e 	bl	80001f0 <HAL_GetTick>
 8000954:	4606      	mov	r6, r0
 8000956:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 800095a:	fa95 f3a5 	rbit	r3, r5
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800095e:	6822      	ldr	r2, [r4, #0]
 8000960:	fa95 f3a5 	rbit	r3, r5
 8000964:	fab3 f383 	clz	r3, r3
 8000968:	f003 031f 	and.w	r3, r3, #31
 800096c:	fa22 f303 	lsr.w	r3, r2, r3
 8000970:	07db      	lsls	r3, r3, #31
 8000972:	d5d3      	bpl.n	800091c <HAL_RCC_OscConfig+0x450>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000974:	f7ff fc3c 	bl	80001f0 <HAL_GetTick>
 8000978:	1b80      	subs	r0, r0, r6
 800097a:	2802      	cmp	r0, #2
 800097c:	d9ed      	bls.n	800095a <HAL_RCC_OscConfig+0x48e>
 800097e:	e60d      	b.n	800059c <HAL_RCC_OscConfig+0xd0>
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 8000980:	b003      	add	sp, #12
 8000982:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000986:	bf00      	nop
 8000988:	40021000 	.word	0x40021000

0800098c <HAL_RCC_GetSysClockFreq>:
{
#if   defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[12] = {0, 0, 4,  5,  6,  7,  8,  9, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
 800098c:	4b1f      	ldr	r3, [pc, #124]	; (8000a0c <HAL_RCC_GetSysClockFreq+0x80>)
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800098e:	b570      	push	{r4, r5, r6, lr}
#if   defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[12] = {0, 0, 4,  5,  6,  7,  8,  9, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000990:	f103 0510 	add.w	r5, r3, #16
 8000994:	462e      	mov	r6, r5
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000996:	b086      	sub	sp, #24
#if   defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[12] = {0, 0, 4,  5,  6,  7,  8,  9, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000998:	ac02      	add	r4, sp, #8
 800099a:	4622      	mov	r2, r4
 800099c:	6818      	ldr	r0, [r3, #0]
 800099e:	6859      	ldr	r1, [r3, #4]
 80009a0:	3308      	adds	r3, #8
 80009a2:	c203      	stmia	r2!, {r0, r1}
 80009a4:	42ab      	cmp	r3, r5
 80009a6:	4614      	mov	r4, r2
 80009a8:	d1f7      	bne.n	800099a <HAL_RCC_GetSysClockFreq+0xe>
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = { 1, 2};
 80009aa:	8833      	ldrh	r3, [r6, #0]
  uint32_t sysclockfreq = 0;
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0, pll2mul = 0;
#endif /*RCC_CFGR2_PREDIV1SRC*/
  
  tmpreg = RCC->CFGR;
 80009ac:	4c18      	ldr	r4, [pc, #96]	; (8000a10 <HAL_RCC_GetSysClockFreq+0x84>)
#else
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = { 1, 2};
 80009ae:	f8ad 3004 	strh.w	r3, [sp, #4]
  uint32_t sysclockfreq = 0;
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0, pll2mul = 0;
#endif /*RCC_CFGR2_PREDIV1SRC*/
  
  tmpreg = RCC->CFGR;
 80009b2:	6860      	ldr	r0, [r4, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80009b4:	f000 030c 	and.w	r3, r0, #12
 80009b8:	2b08      	cmp	r3, #8
 80009ba:	d124      	bne.n	8000a06 <HAL_RCC_GetSysClockFreq+0x7a>
 80009bc:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 80009c0:	fa93 f3a3 	rbit	r3, r3
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> POSITION_VAL(RCC_CFGR_PLLMULL)];
 80009c4:	fab3 f383 	clz	r3, r3
 80009c8:	f400 1270 	and.w	r2, r0, #3932160	; 0x3c0000
 80009cc:	fa22 f303 	lsr.w	r3, r2, r3
 80009d0:	aa06      	add	r2, sp, #24
 80009d2:	4413      	add	r3, r2
 80009d4:	f813 1c10 	ldrb.w	r1, [r3, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80009d8:	03c3      	lsls	r3, r0, #15
 80009da:	d511      	bpl.n	8000a00 <HAL_RCC_GetSysClockFreq+0x74>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> POSITION_VAL(RCC_CFGR2_PREDIV1)];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> POSITION_VAL(RCC_CFGR_PLLXTPRE)];
 80009dc:	6862      	ldr	r2, [r4, #4]
 80009de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80009e2:	fa93 f3a3 	rbit	r3, r3
 80009e6:	fab3 f083 	clz	r0, r3
 80009ea:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80009ee:	40c3      	lsrs	r3, r0
 80009f0:	aa06      	add	r2, sp, #24
 80009f2:	4413      	add	r3, r2
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
 80009f4:	f813 0c14 	ldrb.w	r0, [r3, #-20]
 80009f8:	4b06      	ldr	r3, [pc, #24]	; (8000a14 <HAL_RCC_GetSysClockFreq+0x88>)
 80009fa:	fbb3 f0f0 	udiv	r0, r3, r0
 80009fe:	e000      	b.n	8000a02 <HAL_RCC_GetSysClockFreq+0x76>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000a00:	4805      	ldr	r0, [pc, #20]	; (8000a18 <HAL_RCC_GetSysClockFreq+0x8c>)
 8000a02:	4348      	muls	r0, r1
 8000a04:	e000      	b.n	8000a08 <HAL_RCC_GetSysClockFreq+0x7c>
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000a06:	4803      	ldr	r0, [pc, #12]	; (8000a14 <HAL_RCC_GetSysClockFreq+0x88>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000a08:	b006      	add	sp, #24
 8000a0a:	bd70      	pop	{r4, r5, r6, pc}
 8000a0c:	08001618 	.word	0x08001618
 8000a10:	40021000 	.word	0x40021000
 8000a14:	007a1200 	.word	0x007a1200
 8000a18:	003d0900 	.word	0x003d0900

08000a1c <HAL_RCC_ClockConfig>:
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000a1c:	4a54      	ldr	r2, [pc, #336]	; (8000b70 <HAL_RCC_ClockConfig+0x154>)
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000a1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000a22:	6813      	ldr	r3, [r2, #0]
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000a24:	4606      	mov	r6, r0
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000a26:	f003 0307 	and.w	r3, r3, #7
 8000a2a:	428b      	cmp	r3, r1
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000a2c:	460d      	mov	r5, r1
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000a2e:	d30a      	bcc.n	8000a46 <HAL_RCC_ClockConfig+0x2a>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000a30:	6831      	ldr	r1, [r6, #0]
 8000a32:	078c      	lsls	r4, r1, #30
 8000a34:	d514      	bpl.n	8000a60 <HAL_RCC_ClockConfig+0x44>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000a36:	484f      	ldr	r0, [pc, #316]	; (8000b74 <HAL_RCC_ClockConfig+0x158>)
 8000a38:	6843      	ldr	r3, [r0, #4]
 8000a3a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000a3e:	68b3      	ldr	r3, [r6, #8]
 8000a40:	4313      	orrs	r3, r2
 8000a42:	6043      	str	r3, [r0, #4]
 8000a44:	e00c      	b.n	8000a60 <HAL_RCC_ClockConfig+0x44>
#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000a46:	6813      	ldr	r3, [r2, #0]
 8000a48:	f023 0307 	bic.w	r3, r3, #7
 8000a4c:	430b      	orrs	r3, r1
 8000a4e:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000a50:	6813      	ldr	r3, [r2, #0]
 8000a52:	f003 0307 	and.w	r3, r3, #7
 8000a56:	4299      	cmp	r1, r3
 8000a58:	d0ea      	beq.n	8000a30 <HAL_RCC_ClockConfig+0x14>
    {
      return HAL_ERROR;
 8000a5a:	2001      	movs	r0, #1
 8000a5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000a60:	07c8      	lsls	r0, r1, #31
 8000a62:	d406      	bmi.n	8000a72 <HAL_RCC_ClockConfig+0x56>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000a64:	4a42      	ldr	r2, [pc, #264]	; (8000b70 <HAL_RCC_ClockConfig+0x154>)
 8000a66:	6813      	ldr	r3, [r2, #0]
 8000a68:	f003 0307 	and.w	r3, r3, #7
 8000a6c:	429d      	cmp	r5, r3
 8000a6e:	d34a      	bcc.n	8000b06 <HAL_RCC_ClockConfig+0xea>
 8000a70:	e053      	b.n	8000b1a <HAL_RCC_ClockConfig+0xfe>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000a72:	6872      	ldr	r2, [r6, #4]
 8000a74:	4c3f      	ldr	r4, [pc, #252]	; (8000b74 <HAL_RCC_ClockConfig+0x158>)
 8000a76:	2a01      	cmp	r2, #1
 8000a78:	d102      	bne.n	8000a80 <HAL_RCC_ClockConfig+0x64>
 8000a7a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a7e:	e004      	b.n	8000a8a <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000a80:	2a02      	cmp	r2, #2
 8000a82:	bf0c      	ite	eq
 8000a84:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8000a88:	2302      	movne	r3, #2
 8000a8a:	fa93 f1a3 	rbit	r1, r3
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a8e:	6821      	ldr	r1, [r4, #0]
 8000a90:	fa93 f3a3 	rbit	r3, r3
 8000a94:	fab3 f383 	clz	r3, r3
 8000a98:	f003 031f 	and.w	r3, r3, #31
 8000a9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000aa0:	07d9      	lsls	r1, r3, #31
 8000aa2:	d5da      	bpl.n	8000a5a <HAL_RCC_ClockConfig+0x3e>
      {
        return HAL_ERROR;
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000aa4:	6863      	ldr	r3, [r4, #4]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000aa6:	f241 3888 	movw	r8, #5000	; 0x1388
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
      {
        return HAL_ERROR;
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000aaa:	f023 0303 	bic.w	r3, r3, #3
 8000aae:	431a      	orrs	r2, r3
 8000ab0:	6062      	str	r2, [r4, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000ab2:	f7ff fb9d 	bl	80001f0 <HAL_GetTick>
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ab6:	6873      	ldr	r3, [r6, #4]
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000ab8:	4607      	mov	r7, r0
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000aba:	2b01      	cmp	r3, #1
 8000abc:	d10c      	bne.n	8000ad8 <HAL_RCC_ClockConfig+0xbc>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000abe:	6863      	ldr	r3, [r4, #4]
 8000ac0:	f003 030c 	and.w	r3, r3, #12
 8000ac4:	2b04      	cmp	r3, #4
 8000ac6:	d0cd      	beq.n	8000a64 <HAL_RCC_ClockConfig+0x48>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ac8:	f7ff fb92 	bl	80001f0 <HAL_GetTick>
 8000acc:	1bc0      	subs	r0, r0, r7
 8000ace:	4540      	cmp	r0, r8
 8000ad0:	d9f5      	bls.n	8000abe <HAL_RCC_ClockConfig+0xa2>
        {
          return HAL_TIMEOUT;
 8000ad2:	2003      	movs	r0, #3
 8000ad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000ad8:	2b02      	cmp	r3, #2
 8000ada:	d10f      	bne.n	8000afc <HAL_RCC_ClockConfig+0xe0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000adc:	6863      	ldr	r3, [r4, #4]
 8000ade:	f003 030c 	and.w	r3, r3, #12
 8000ae2:	2b08      	cmp	r3, #8
 8000ae4:	d0be      	beq.n	8000a64 <HAL_RCC_ClockConfig+0x48>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ae6:	f7ff fb83 	bl	80001f0 <HAL_GetTick>
 8000aea:	1bc0      	subs	r0, r0, r7
 8000aec:	4540      	cmp	r0, r8
 8000aee:	d9f5      	bls.n	8000adc <HAL_RCC_ClockConfig+0xc0>
 8000af0:	e7ef      	b.n	8000ad2 <HAL_RCC_ClockConfig+0xb6>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000af2:	f7ff fb7d 	bl	80001f0 <HAL_GetTick>
 8000af6:	1bc0      	subs	r0, r0, r7
 8000af8:	4540      	cmp	r0, r8
 8000afa:	d8ea      	bhi.n	8000ad2 <HAL_RCC_ClockConfig+0xb6>
        }
      }
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000afc:	6863      	ldr	r3, [r4, #4]
 8000afe:	f013 0f0c 	tst.w	r3, #12
 8000b02:	d1f6      	bne.n	8000af2 <HAL_RCC_ClockConfig+0xd6>
 8000b04:	e7ae      	b.n	8000a64 <HAL_RCC_ClockConfig+0x48>
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000b06:	6813      	ldr	r3, [r2, #0]
 8000b08:	f023 0307 	bic.w	r3, r3, #7
 8000b0c:	432b      	orrs	r3, r5
 8000b0e:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000b10:	6813      	ldr	r3, [r2, #0]
 8000b12:	f003 0307 	and.w	r3, r3, #7
 8000b16:	429d      	cmp	r5, r3
 8000b18:	d19f      	bne.n	8000a5a <HAL_RCC_ClockConfig+0x3e>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000b1a:	6831      	ldr	r1, [r6, #0]
 8000b1c:	4c15      	ldr	r4, [pc, #84]	; (8000b74 <HAL_RCC_ClockConfig+0x158>)
 8000b1e:	f011 0f04 	tst.w	r1, #4
 8000b22:	d005      	beq.n	8000b30 <HAL_RCC_ClockConfig+0x114>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000b24:	6863      	ldr	r3, [r4, #4]
 8000b26:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000b2a:	68f3      	ldr	r3, [r6, #12]
 8000b2c:	4313      	orrs	r3, r2
 8000b2e:	6063      	str	r3, [r4, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000b30:	070b      	lsls	r3, r1, #28
 8000b32:	d506      	bpl.n	8000b42 <HAL_RCC_ClockConfig+0x126>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000b34:	6863      	ldr	r3, [r4, #4]
 8000b36:	6932      	ldr	r2, [r6, #16]
 8000b38:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000b3c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000b40:	6063      	str	r3, [r4, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000b42:	f7ff ff23 	bl	800098c <HAL_RCC_GetSysClockFreq>
 8000b46:	6863      	ldr	r3, [r4, #4]
 8000b48:	22f0      	movs	r2, #240	; 0xf0
 8000b4a:	fa92 f2a2 	rbit	r2, r2
 8000b4e:	fab2 f282 	clz	r2, r2
 8000b52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000b56:	40d3      	lsrs	r3, r2
 8000b58:	4a07      	ldr	r2, [pc, #28]	; (8000b78 <HAL_RCC_ClockConfig+0x15c>)
 8000b5a:	5cd3      	ldrb	r3, [r2, r3]
 8000b5c:	40d8      	lsrs	r0, r3
 8000b5e:	4b07      	ldr	r3, [pc, #28]	; (8000b7c <HAL_RCC_ClockConfig+0x160>)
 8000b60:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8000b62:	2000      	movs	r0, #0
 8000b64:	f7ff fb17 	bl	8000196 <HAL_InitTick>
  
  return HAL_OK;
 8000b68:	2000      	movs	r0, #0
}
 8000b6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000b6e:	bf00      	nop
 8000b70:	40022000 	.word	0x40022000
 8000b74:	40021000 	.word	0x40021000
 8000b78:	0800162a 	.word	0x0800162a
 8000b7c:	20000000 	.word	0x20000000

08000b80 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8000b80:	4b01      	ldr	r3, [pc, #4]	; (8000b88 <HAL_RCC_GetHCLKFreq+0x8>)
 8000b82:	6818      	ldr	r0, [r3, #0]
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	20000000 	.word	0x20000000

08000b8c <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000b8c:	6a03      	ldr	r3, [r0, #32]
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8000b8e:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000b90:	f023 0301 	bic.w	r3, r3, #1
 8000b94:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000b96:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000b98:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8000b9a:	6984      	ldr	r4, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8000b9c:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8000b9e:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8000ba2:	4325      	orrs	r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8000ba4:	f023 0402 	bic.w	r4, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8000ba8:	688b      	ldr	r3, [r1, #8]
 8000baa:	4323      	orrs	r3, r4

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8000bac:	4c0a      	ldr	r4, [pc, #40]	; (8000bd8 <TIM_OC1_SetConfig+0x4c>)
 8000bae:	42a0      	cmp	r0, r4
 8000bb0:	d10b      	bne.n	8000bca <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8000bb2:	68cc      	ldr	r4, [r1, #12]
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8000bb4:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8000bb8:	4323      	orrs	r3, r4
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8000bba:	694e      	ldr	r6, [r1, #20]
 8000bbc:	698c      	ldr	r4, [r1, #24]
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8000bbe:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8000bc2:	4334      	orrs	r4, r6
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8000bc4:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8000bc8:	4322      	orrs	r2, r4
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000bca:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8000bcc:	684a      	ldr	r2, [r1, #4]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8000bce:	6185      	str	r5, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8000bd0:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000bd2:	6203      	str	r3, [r0, #32]
 8000bd4:	bd70      	pop	{r4, r5, r6, pc}
 8000bd6:	bf00      	nop
 8000bd8:	40012c00 	.word	0x40012c00

08000bdc <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8000bdc:	6a03      	ldr	r3, [r0, #32]
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8000bde:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8000be0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000be4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000be6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000be8:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8000bea:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8000bec:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8000bee:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8000bf2:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8);
 8000bf4:	688d      	ldr	r5, [r1, #8]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8000bf6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8);
 8000bfa:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8000bfe:	4d0c      	ldr	r5, [pc, #48]	; (8000c30 <TIM_OC3_SetConfig+0x54>)
 8000c00:	42a8      	cmp	r0, r5
 8000c02:	d10e      	bne.n	8000c22 <TIM_OC3_SetConfig+0x46>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8);
 8000c04:	68cd      	ldr	r5, [r1, #12]
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8000c06:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8);
 8000c0a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4);
 8000c0e:	694d      	ldr	r5, [r1, #20]
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8000c10:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4);
 8000c14:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 8000c18:	698d      	ldr	r5, [r1, #24]
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8000c1a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4);
 8000c1e:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000c22:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8000c24:	684a      	ldr	r2, [r1, #4]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8000c26:	61c4      	str	r4, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8000c28:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000c2a:	6203      	str	r3, [r0, #32]
 8000c2c:	bd30      	pop	{r4, r5, pc}
 8000c2e:	bf00      	nop
 8000c30:	40012c00 	.word	0x40012c00

08000c34 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8000c34:	6a03      	ldr	r3, [r0, #32]
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8000c36:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8000c38:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000c3c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000c3e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000c40:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8000c42:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8000c44:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8000c46:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8000c4a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12);
 8000c4e:	688d      	ldr	r5, [r1, #8]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8000c50:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12);
 8000c54:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8000c58:	4d06      	ldr	r5, [pc, #24]	; (8000c74 <TIM_OC4_SetConfig+0x40>)
 8000c5a:	42a8      	cmp	r0, r5
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8000c5c:	bf02      	ittt	eq
 8000c5e:	694d      	ldreq	r5, [r1, #20]
  if(IS_TIM_BREAK_INSTANCE(TIMx))
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8000c60:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8000c64:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000c68:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8000c6a:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8000c6c:	684a      	ldr	r2, [r1, #4]
 8000c6e:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000c70:	6203      	str	r3, [r0, #32]
 8000c72:	bd30      	pop	{r4, r5, pc}
 8000c74:	40012c00 	.word	0x40012c00

08000c78 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000c78:	6803      	ldr	r3, [r0, #0]
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);

  /* Return function status */
  return HAL_OK;
}
 8000c7a:	2000      	movs	r0, #0
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000c7c:	68da      	ldr	r2, [r3, #12]
 8000c7e:	f042 0201 	orr.w	r2, r2, #1
 8000c82:	60da      	str	r2, [r3, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8000c84:	681a      	ldr	r2, [r3, #0]
 8000c86:	f042 0201 	orr.w	r2, r2, #1
 8000c8a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 8000c8c:	4770      	bx	lr

08000c8e <HAL_TIM_PWM_MspInit>:
 8000c8e:	4770      	bx	lr

08000c90 <HAL_TIM_ConfigClockSource>:
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
  uint32_t tmpsmcr = 0;

  /* Process Locked */
  __HAL_LOCK(htim);
 8000c90:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
  * @param  sClockSourceConfig : pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
 8000c94:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpsmcr = 0;

  /* Process Locked */
  __HAL_LOCK(htim);
 8000c96:	2b01      	cmp	r3, #1
 8000c98:	f04f 0302 	mov.w	r3, #2
 8000c9c:	f000 80b0 	beq.w	8000e00 <HAL_TIM_ConfigClockSource+0x170>

  htim->State = HAL_TIM_STATE_BUSY;
 8000ca0:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8000ca4:	6803      	ldr	r3, [r0, #0]
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
  uint32_t tmpsmcr = 0;

  /* Process Locked */
  __HAL_LOCK(htim);
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8000cac:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000cae:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8000cb2:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8000cb6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8000cb8:	680a      	ldr	r2, [r1, #0]
 8000cba:	2a40      	cmp	r2, #64	; 0x40
 8000cbc:	d077      	beq.n	8000dae <HAL_TIM_ConfigClockSource+0x11e>
 8000cbe:	d818      	bhi.n	8000cf2 <HAL_TIM_ConfigClockSource+0x62>
 8000cc0:	2a10      	cmp	r2, #16
 8000cc2:	f000 808b 	beq.w	8000ddc <HAL_TIM_ConfigClockSource+0x14c>
 8000cc6:	d808      	bhi.n	8000cda <HAL_TIM_ConfigClockSource+0x4a>
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8093 	bne.w	8000df4 <HAL_TIM_ConfigClockSource+0x164>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8000cce:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8000cd0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000cd4:	f042 0207 	orr.w	r2, r2, #7
 8000cd8:	e08b      	b.n	8000df2 <HAL_TIM_ConfigClockSource+0x162>
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;

  switch (sClockSourceConfig->ClockSource)
 8000cda:	2a20      	cmp	r2, #32
 8000cdc:	f000 8084 	beq.w	8000de8 <HAL_TIM_ConfigClockSource+0x158>
 8000ce0:	2a30      	cmp	r2, #48	; 0x30
 8000ce2:	f040 8087 	bne.w	8000df4 <HAL_TIM_ConfigClockSource+0x164>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8000ce6:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8000ce8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000cec:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 8000cf0:	e07f      	b.n	8000df2 <HAL_TIM_ConfigClockSource+0x162>
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;

  switch (sClockSourceConfig->ClockSource)
 8000cf2:	2a70      	cmp	r2, #112	; 0x70
 8000cf4:	d035      	beq.n	8000d62 <HAL_TIM_ConfigClockSource+0xd2>
 8000cf6:	d81b      	bhi.n	8000d30 <HAL_TIM_ConfigClockSource+0xa0>
 8000cf8:	2a50      	cmp	r2, #80	; 0x50
 8000cfa:	d041      	beq.n	8000d80 <HAL_TIM_ConfigClockSource+0xf0>
 8000cfc:	2a60      	cmp	r2, #96	; 0x60
 8000cfe:	d179      	bne.n	8000df4 <HAL_TIM_ConfigClockSource+0x164>
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000d00:	6a1c      	ldr	r4, [r3, #32]

       /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8000d02:	684d      	ldr	r5, [r1, #4]
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000d04:	f024 0410 	bic.w	r4, r4, #16

       /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8000d08:	68ce      	ldr	r6, [r1, #12]
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000d0a:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000d0c:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8000d0e:	6a1a      	ldr	r2, [r3, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8000d10:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8000d14:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4);
 8000d18:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
  tmpccmr1 |= (TIM_ICFilter << 12);
 8000d1c:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |= (TIM_ICPolarity << 4);

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8000d20:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8000d22:	621a      	str	r2, [r3, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8000d24:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8000d26:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000d2a:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 8000d2e:	e060      	b.n	8000df2 <HAL_TIM_ConfigClockSource+0x162>
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;

  switch (sClockSourceConfig->ClockSource)
 8000d30:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8000d34:	d011      	beq.n	8000d5a <HAL_TIM_ConfigClockSource+0xca>
 8000d36:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8000d3a:	d15b      	bne.n	8000df4 <HAL_TIM_ConfigClockSource+0x164>
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr = 0;

  tmpsmcr = TIMx->SMCR;
 8000d3c:	689c      	ldr	r4, [r3, #8]
 8000d3e:	688d      	ldr	r5, [r1, #8]
 8000d40:	684a      	ldr	r2, [r1, #4]
 8000d42:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8000d46:	68c9      	ldr	r1, [r1, #12]
 8000d48:	432a      	orrs	r2, r5
 8000d4a:	4322      	orrs	r2, r4
 8000d4c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8000d50:	609a      	str	r2, [r3, #8]
      TIM_ETR_SetConfig(htim->Instance,
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8000d52:	689a      	ldr	r2, [r3, #8]
 8000d54:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000d58:	e04b      	b.n	8000df2 <HAL_TIM_ConfigClockSource+0x162>
  {
  case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
      /* Disable slave mode to clock the prescaler directly with the internal clock */
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8000d5a:	689a      	ldr	r2, [r3, #8]
 8000d5c:	f022 0207 	bic.w	r2, r2, #7
 8000d60:	e047      	b.n	8000df2 <HAL_TIM_ConfigClockSource+0x162>
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr = 0;

  tmpsmcr = TIMx->SMCR;
 8000d62:	689c      	ldr	r4, [r3, #8]
 8000d64:	688d      	ldr	r5, [r1, #8]
 8000d66:	684a      	ldr	r2, [r1, #4]
 8000d68:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8000d6c:	68c9      	ldr	r1, [r1, #12]
 8000d6e:	432a      	orrs	r2, r5
 8000d70:	4322      	orrs	r2, r4
 8000d72:	ea42 2201 	orr.w	r2, r2, r1, lsl #8

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8000d76:	609a      	str	r2, [r3, #8]
      TIM_ETR_SetConfig(htim->Instance,
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Get the TIMx SMCR register value */
      tmpsmcr = htim->Instance->SMCR;
 8000d78:	689a      	ldr	r2, [r3, #8]
      /* Reset the SMS and TS Bits */
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8000d7a:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 8000d7e:	e038      	b.n	8000df2 <HAL_TIM_ConfigClockSource+0x162>
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8000d80:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000d82:	6a1c      	ldr	r4, [r3, #32]

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
      
      TIM_TI1_ConfigInputStage(htim->Instance,
 8000d84:	684d      	ldr	r5, [r1, #4]
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000d86:	f024 0401 	bic.w	r4, r4, #1

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
      
      TIM_TI1_ConfigInputStage(htim->Instance,
 8000d8a:	68ce      	ldr	r6, [r1, #12]
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000d8c:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000d8e:	6999      	ldr	r1, [r3, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000d90:	f022 020a 	bic.w	r2, r2, #10
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000d94:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;
 8000d98:	432a      	orrs	r2, r5
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4);
 8000d9a:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8000d9e:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8000da0:	621a      	str	r2, [r3, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8000da2:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8000da4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000da8:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 8000dac:	e021      	b.n	8000df2 <HAL_TIM_ConfigClockSource+0x162>
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8000dae:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000db0:	6a1c      	ldr	r4, [r3, #32]

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8000db2:	684d      	ldr	r5, [r1, #4]
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000db4:	f024 0401 	bic.w	r4, r4, #1

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8000db8:	68ce      	ldr	r6, [r1, #12]
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000dba:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000dbc:	6999      	ldr	r1, [r3, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000dbe:	f022 020a 	bic.w	r2, r2, #10
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000dc2:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;
 8000dc6:	432a      	orrs	r2, r5
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4);
 8000dc8:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8000dcc:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8000dce:	621a      	str	r2, [r3, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8000dd0:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8000dd2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000dd6:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 8000dda:	e00a      	b.n	8000df2 <HAL_TIM_ConfigClockSource+0x162>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8000ddc:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8000dde:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000de2:	f042 0217 	orr.w	r2, r2, #23
 8000de6:	e004      	b.n	8000df2 <HAL_TIM_ConfigClockSource+0x162>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8000de8:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8000dea:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000dee:	f042 0227 	orr.w	r2, r2, #39	; 0x27
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8000df2:	609a      	str	r2, [r3, #8]
    break;

  default:
    break;
  }
  htim->State = HAL_TIM_STATE_READY;
 8000df4:	2301      	movs	r3, #1
 8000df6:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
  uint32_t tmpsmcr = 0;

  /* Process Locked */
  __HAL_LOCK(htim);
 8000e00:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);

  return HAL_OK;
}
 8000e02:	bd70      	pop	{r4, r5, r6, pc}

08000e04 <HAL_TIM_OC_DelayElapsedCallback>:
 8000e04:	4770      	bx	lr

08000e06 <HAL_TIM_IC_CaptureCallback>:
 8000e06:	4770      	bx	lr

08000e08 <HAL_TIM_PWM_PulseFinishedCallback>:
 8000e08:	4770      	bx	lr

08000e0a <HAL_TIM_TriggerCallback>:
 8000e0a:	4770      	bx	lr

08000e0c <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000e0c:	6803      	ldr	r3, [r0, #0]
  * @brief  This function handles TIM interrupts requests.
  * @param  htim : TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8000e0e:	b510      	push	{r4, lr}
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000e10:	691a      	ldr	r2, [r3, #16]
  * @brief  This function handles TIM interrupts requests.
  * @param  htim : TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8000e12:	4604      	mov	r4, r0
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000e14:	0791      	lsls	r1, r2, #30
 8000e16:	d514      	bpl.n	8000e42 <HAL_TIM_IRQHandler+0x36>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8000e18:	68da      	ldr	r2, [r3, #12]
 8000e1a:	0792      	lsls	r2, r2, #30
 8000e1c:	d511      	bpl.n	8000e42 <HAL_TIM_IRQHandler+0x36>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8000e1e:	f06f 0202 	mvn.w	r2, #2
 8000e22:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8000e24:	699b      	ldr	r3, [r3, #24]
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000e26:	2201      	movs	r2, #1

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8000e28:	079b      	lsls	r3, r3, #30
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000e2a:	7602      	strb	r2, [r0, #24]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8000e2c:	d002      	beq.n	8000e34 <HAL_TIM_IRQHandler+0x28>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8000e2e:	f7ff ffea 	bl	8000e06 <HAL_TIM_IC_CaptureCallback>
 8000e32:	e004      	b.n	8000e3e <HAL_TIM_IRQHandler+0x32>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8000e34:	f7ff ffe6 	bl	8000e04 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000e38:	4620      	mov	r0, r4
 8000e3a:	f7ff ffe5 	bl	8000e08 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	7623      	strb	r3, [r4, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8000e42:	6823      	ldr	r3, [r4, #0]
 8000e44:	691a      	ldr	r2, [r3, #16]
 8000e46:	0750      	lsls	r0, r2, #29
 8000e48:	d516      	bpl.n	8000e78 <HAL_TIM_IRQHandler+0x6c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8000e4a:	68da      	ldr	r2, [r3, #12]
 8000e4c:	0751      	lsls	r1, r2, #29
 8000e4e:	d513      	bpl.n	8000e78 <HAL_TIM_IRQHandler+0x6c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8000e50:	f06f 0204 	mvn.w	r2, #4
 8000e54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8000e56:	699b      	ldr	r3, [r3, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000e58:	2202      	movs	r2, #2
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8000e5a:	f413 7f40 	tst.w	r3, #768	; 0x300
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000e5e:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8000e60:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8000e62:	d002      	beq.n	8000e6a <HAL_TIM_IRQHandler+0x5e>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8000e64:	f7ff ffcf 	bl	8000e06 <HAL_TIM_IC_CaptureCallback>
 8000e68:	e004      	b.n	8000e74 <HAL_TIM_IRQHandler+0x68>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000e6a:	f7ff ffcb 	bl	8000e04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000e6e:	4620      	mov	r0, r4
 8000e70:	f7ff ffca 	bl	8000e08 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000e74:	2300      	movs	r3, #0
 8000e76:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8000e78:	6823      	ldr	r3, [r4, #0]
 8000e7a:	691a      	ldr	r2, [r3, #16]
 8000e7c:	0712      	lsls	r2, r2, #28
 8000e7e:	d515      	bpl.n	8000eac <HAL_TIM_IRQHandler+0xa0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8000e80:	68da      	ldr	r2, [r3, #12]
 8000e82:	0710      	lsls	r0, r2, #28
 8000e84:	d512      	bpl.n	8000eac <HAL_TIM_IRQHandler+0xa0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8000e86:	f06f 0208 	mvn.w	r2, #8
 8000e8a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8000e8c:	69db      	ldr	r3, [r3, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000e8e:	2204      	movs	r2, #4
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8000e90:	0799      	lsls	r1, r3, #30
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000e92:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8000e94:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8000e96:	d002      	beq.n	8000e9e <HAL_TIM_IRQHandler+0x92>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8000e98:	f7ff ffb5 	bl	8000e06 <HAL_TIM_IC_CaptureCallback>
 8000e9c:	e004      	b.n	8000ea8 <HAL_TIM_IRQHandler+0x9c>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000e9e:	f7ff ffb1 	bl	8000e04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000ea2:	4620      	mov	r0, r4
 8000ea4:	f7ff ffb0 	bl	8000e08 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8000eac:	6823      	ldr	r3, [r4, #0]
 8000eae:	691a      	ldr	r2, [r3, #16]
 8000eb0:	06d2      	lsls	r2, r2, #27
 8000eb2:	d516      	bpl.n	8000ee2 <HAL_TIM_IRQHandler+0xd6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8000eb4:	68da      	ldr	r2, [r3, #12]
 8000eb6:	06d0      	lsls	r0, r2, #27
 8000eb8:	d513      	bpl.n	8000ee2 <HAL_TIM_IRQHandler+0xd6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8000eba:	f06f 0210 	mvn.w	r2, #16
 8000ebe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8000ec0:	69db      	ldr	r3, [r3, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000ec2:	2208      	movs	r2, #8
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8000ec4:	f413 7f40 	tst.w	r3, #768	; 0x300
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000ec8:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8000eca:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8000ecc:	d002      	beq.n	8000ed4 <HAL_TIM_IRQHandler+0xc8>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8000ece:	f7ff ff9a 	bl	8000e06 <HAL_TIM_IC_CaptureCallback>
 8000ed2:	e004      	b.n	8000ede <HAL_TIM_IRQHandler+0xd2>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000ed4:	f7ff ff96 	bl	8000e04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000ed8:	4620      	mov	r0, r4
 8000eda:	f7ff ff95 	bl	8000e08 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	7623      	strb	r3, [r4, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8000ee2:	6823      	ldr	r3, [r4, #0]
 8000ee4:	691a      	ldr	r2, [r3, #16]
 8000ee6:	07d1      	lsls	r1, r2, #31
 8000ee8:	d508      	bpl.n	8000efc <HAL_TIM_IRQHandler+0xf0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8000eea:	68da      	ldr	r2, [r3, #12]
 8000eec:	07d2      	lsls	r2, r2, #31
 8000eee:	d505      	bpl.n	8000efc <HAL_TIM_IRQHandler+0xf0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8000ef0:	f06f 0201 	mvn.w	r2, #1
 8000ef4:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8000ef6:	4620      	mov	r0, r4
 8000ef8:	f000 f988 	bl	800120c <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8000efc:	6823      	ldr	r3, [r4, #0]
 8000efe:	691a      	ldr	r2, [r3, #16]
 8000f00:	0610      	lsls	r0, r2, #24
 8000f02:	d508      	bpl.n	8000f16 <HAL_TIM_IRQHandler+0x10a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8000f04:	68da      	ldr	r2, [r3, #12]
 8000f06:	0611      	lsls	r1, r2, #24
 8000f08:	d505      	bpl.n	8000f16 <HAL_TIM_IRQHandler+0x10a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8000f0a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8000f0e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8000f10:	4620      	mov	r0, r4
 8000f12:	f000 f97a 	bl	800120a <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8000f16:	6823      	ldr	r3, [r4, #0]
 8000f18:	691a      	ldr	r2, [r3, #16]
 8000f1a:	0652      	lsls	r2, r2, #25
 8000f1c:	d508      	bpl.n	8000f30 <HAL_TIM_IRQHandler+0x124>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8000f1e:	68da      	ldr	r2, [r3, #12]
 8000f20:	0650      	lsls	r0, r2, #25
 8000f22:	d505      	bpl.n	8000f30 <HAL_TIM_IRQHandler+0x124>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8000f24:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8000f28:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8000f2a:	4620      	mov	r0, r4
 8000f2c:	f7ff ff6d 	bl	8000e0a <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8000f30:	6823      	ldr	r3, [r4, #0]
 8000f32:	691a      	ldr	r2, [r3, #16]
 8000f34:	0691      	lsls	r1, r2, #26
 8000f36:	d50a      	bpl.n	8000f4e <HAL_TIM_IRQHandler+0x142>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8000f38:	68da      	ldr	r2, [r3, #12]
 8000f3a:	0692      	lsls	r2, r2, #26
 8000f3c:	d507      	bpl.n	8000f4e <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000f3e:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8000f42:	4620      	mov	r0, r4
    }
  }
}
 8000f44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000f48:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8000f4a:	f000 b95d 	b.w	8001208 <HAL_TIMEx_CommutationCallback>
 8000f4e:	bd10      	pop	{r4, pc}

08000f50 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000f50:	4a18      	ldr	r2, [pc, #96]	; (8000fb4 <TIM_Base_SetConfig+0x64>)
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
 8000f52:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000f54:	4290      	cmp	r0, r2
 8000f56:	d00a      	beq.n	8000f6e <TIM_Base_SetConfig+0x1e>
 8000f58:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000f5c:	d007      	beq.n	8000f6e <TIM_Base_SetConfig+0x1e>
 8000f5e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8000f62:	4290      	cmp	r0, r2
 8000f64:	d003      	beq.n	8000f6e <TIM_Base_SetConfig+0x1e>
 8000f66:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f6a:	4290      	cmp	r0, r2
 8000f6c:	d115      	bne.n	8000f9a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8000f6e:	684a      	ldr	r2, [r1, #4]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000f70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8000f74:	4313      	orrs	r3, r2
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000f76:	4a0f      	ldr	r2, [pc, #60]	; (8000fb4 <TIM_Base_SetConfig+0x64>)
 8000f78:	4290      	cmp	r0, r2
 8000f7a:	d00a      	beq.n	8000f92 <TIM_Base_SetConfig+0x42>
 8000f7c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000f80:	d007      	beq.n	8000f92 <TIM_Base_SetConfig+0x42>
 8000f82:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8000f86:	4290      	cmp	r0, r2
 8000f88:	d003      	beq.n	8000f92 <TIM_Base_SetConfig+0x42>
 8000f8a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f8e:	4290      	cmp	r0, r2
 8000f90:	d103      	bne.n	8000f9a <TIM_Base_SetConfig+0x4a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000f92:	68ca      	ldr	r2, [r1, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8000f94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000f98:	4313      	orrs	r3, r2
  }

  TIMx->CR1 = tmpcr1;
 8000f9a:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000f9c:	688b      	ldr	r3, [r1, #8]
 8000f9e:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8000fa0:	680b      	ldr	r3, [r1, #0]
 8000fa2:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8000fa4:	4b03      	ldr	r3, [pc, #12]	; (8000fb4 <TIM_Base_SetConfig+0x64>)
 8000fa6:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8000fa8:	bf04      	itt	eq
 8000faa:	690b      	ldreq	r3, [r1, #16]
 8000fac:	6303      	streq	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	6143      	str	r3, [r0, #20]
 8000fb2:	4770      	bx	lr
 8000fb4:	40012c00 	.word	0x40012c00

08000fb8 <HAL_TIM_Base_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim : TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8000fb8:	b510      	push	{r4, lr}
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8000fba:	4604      	mov	r4, r0
 8000fbc:	b1a0      	cbz	r0, 8000fe8 <HAL_TIM_Base_Init+0x30>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));

  if(htim->State == HAL_TIM_STATE_RESET)
 8000fbe:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000fc2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000fc6:	b91b      	cbnz	r3, 8000fd0 <HAL_TIM_Base_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8000fc8:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8000fcc:	f000 fa70 	bl	80014b0 <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000fd6:	6820      	ldr	r0, [r4, #0]
 8000fd8:	1d21      	adds	r1, r4, #4
 8000fda:	f7ff ffb9 	bl	8000f50 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  return HAL_OK;
 8000fe4:	2000      	movs	r0, #0
 8000fe6:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 8000fe8:	2001      	movs	r0, #1

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;

  return HAL_OK;
}
 8000fea:	bd10      	pop	{r4, pc}

08000fec <HAL_TIM_PWM_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim : TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8000fec:	b510      	push	{r4, lr}
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8000fee:	4604      	mov	r4, r0
 8000ff0:	b1a0      	cbz	r0, 800101c <HAL_TIM_PWM_Init+0x30>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));

  if(htim->State == HAL_TIM_STATE_RESET)
 8000ff2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000ff6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000ffa:	b91b      	cbnz	r3, 8001004 <HAL_TIM_PWM_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8000ffc:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001000:	f7ff fe45 	bl	8000c8e <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001004:	2302      	movs	r3, #2
 8001006:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800100a:	6820      	ldr	r0, [r4, #0]
 800100c:	1d21      	adds	r1, r4, #4
 800100e:	f7ff ff9f 	bl	8000f50 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001012:	2301      	movs	r3, #1
 8001014:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  return HAL_OK;
 8001018:	2000      	movs	r0, #0
 800101a:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 800101c:	2001      	movs	r0, #1

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;

  return HAL_OK;
}
 800101e:	bd10      	pop	{r4, pc}

08001020 <TIM_OC2_SetConfig>:
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001020:	6a03      	ldr	r3, [r0, #32]
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config : The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001022:	b530      	push	{r4, r5, lr}
  uint32_t tmpccmrx = 0;
  uint32_t tmpccer = 0;
  uint32_t tmpcr2 = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001024:	f023 0310 	bic.w	r3, r3, #16
 8001028:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800102a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800102c:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800102e:	6984      	ldr	r4, [r0, #24]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8001030:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001032:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);
 8001036:	ea44 2405 	orr.w	r4, r4, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4);
 800103a:	688d      	ldr	r5, [r1, #8]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800103c:	f023 0320 	bic.w	r3, r3, #32
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4);
 8001040:	ea43 1305 	orr.w	r3, r3, r5, lsl #4

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001044:	4d0b      	ldr	r5, [pc, #44]	; (8001074 <TIM_OC2_SetConfig+0x54>)
 8001046:	42a8      	cmp	r0, r5
 8001048:	d10e      	bne.n	8001068 <TIM_OC2_SetConfig+0x48>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4);
 800104a:	68cd      	ldr	r5, [r1, #12]
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800104c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4);
 8001050:	ea43 1305 	orr.w	r3, r3, r5, lsl #4

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8001054:	694d      	ldr	r5, [r1, #20]
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001056:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 800105a:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 800105e:	698d      	ldr	r5, [r1, #24]
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001060:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 &= ~TIM_CR2_OIS2;
    tmpcr2 &= ~TIM_CR2_OIS2N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8001064:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001068:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800106a:	684a      	ldr	r2, [r1, #4]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800106c:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800106e:	6382      	str	r2, [r0, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001070:	6203      	str	r3, [r0, #32]
 8001072:	bd30      	pop	{r4, r5, pc}
 8001074:	40012c00 	.word	0x40012c00

08001078 <HAL_TIM_PWM_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 8001078:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800107a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 800107e:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8001080:	2b01      	cmp	r3, #1
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, TIM_OC_InitTypeDef* sConfig, uint32_t Channel)
{
 8001082:	460d      	mov	r5, r1
 8001084:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8001088:	d058      	beq.n	800113c <HAL_TIM_PWM_ConfigChannel+0xc4>
 800108a:	2301      	movs	r3, #1
 800108c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  htim->State = HAL_TIM_STATE_BUSY;
 8001090:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39

  switch (Channel)
 8001094:	2a0c      	cmp	r2, #12
 8001096:	d84b      	bhi.n	8001130 <HAL_TIM_PWM_ConfigChannel+0xb8>
 8001098:	e8df f002 	tbb	[pc, r2]
 800109c:	4a4a4a07 	.word	0x4a4a4a07
 80010a0:	4a4a4a17 	.word	0x4a4a4a17
 80010a4:	4a4a4a29 	.word	0x4a4a4a29
 80010a8:	39          	.byte	0x39
 80010a9:	00          	.byte	0x00
  {
    case TIM_CHANNEL_1:
    {
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80010aa:	6820      	ldr	r0, [r4, #0]
 80010ac:	f7ff fd6e 	bl	8000b8c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80010b0:	6823      	ldr	r3, [r4, #0]
 80010b2:	699a      	ldr	r2, [r3, #24]
 80010b4:	f042 0208 	orr.w	r2, r2, #8
 80010b8:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80010ba:	699a      	ldr	r2, [r3, #24]
 80010bc:	f022 0204 	bic.w	r2, r2, #4
 80010c0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80010c2:	6999      	ldr	r1, [r3, #24]
 80010c4:	692a      	ldr	r2, [r5, #16]
 80010c6:	430a      	orrs	r2, r1
 80010c8:	e00f      	b.n	80010ea <HAL_TIM_PWM_ConfigChannel+0x72>

    case TIM_CHANNEL_2:
    {
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80010ca:	6820      	ldr	r0, [r4, #0]
 80010cc:	f7ff ffa8 	bl	8001020 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80010d0:	6823      	ldr	r3, [r4, #0]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 80010d2:	6909      	ldr	r1, [r1, #16]
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80010d4:	699a      	ldr	r2, [r3, #24]
 80010d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80010da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80010dc:	699a      	ldr	r2, [r3, #24]
 80010de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80010e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 80010e4:	699a      	ldr	r2, [r3, #24]
 80010e6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80010ea:	619a      	str	r2, [r3, #24]
    }
    break;
 80010ec:	e020      	b.n	8001130 <HAL_TIM_PWM_ConfigChannel+0xb8>

    case TIM_CHANNEL_3:
    {
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80010ee:	6820      	ldr	r0, [r4, #0]
 80010f0:	f7ff fd74 	bl	8000bdc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80010f4:	6823      	ldr	r3, [r4, #0]
 80010f6:	69da      	ldr	r2, [r3, #28]
 80010f8:	f042 0208 	orr.w	r2, r2, #8
 80010fc:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80010fe:	69da      	ldr	r2, [r3, #28]
 8001100:	f022 0204 	bic.w	r2, r2, #4
 8001104:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001106:	69d9      	ldr	r1, [r3, #28]
 8001108:	692a      	ldr	r2, [r5, #16]
 800110a:	430a      	orrs	r2, r1
 800110c:	e00f      	b.n	800112e <HAL_TIM_PWM_ConfigChannel+0xb6>

    case TIM_CHANNEL_4:
    {
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800110e:	6820      	ldr	r0, [r4, #0]
 8001110:	f7ff fd90 	bl	8000c34 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001114:	6823      	ldr	r3, [r4, #0]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8001116:	6909      	ldr	r1, [r1, #16]
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001118:	69da      	ldr	r2, [r3, #28]
 800111a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800111e:	61da      	str	r2, [r3, #28]

     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001120:	69da      	ldr	r2, [r3, #28]
 8001122:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001126:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8001128:	69da      	ldr	r2, [r3, #28]
 800112a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800112e:	61da      	str	r2, [r3, #28]

    default:
    break;
  }

  htim->State = HAL_TIM_STATE_READY;
 8001130:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8001132:	2000      	movs	r0, #0

    default:
    break;
  }

  htim->State = HAL_TIM_STATE_READY;
 8001134:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8001138:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38

  return HAL_OK;
}
 800113c:	bd38      	pop	{r3, r4, r5, pc}

0800113e <TIM_CCxChannelCmd>:
  * @param  ChannelState : specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800113e:	b510      	push	{r4, lr}
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001140:	2301      	movs	r3, #1
 8001142:	6a04      	ldr	r4, [r0, #32]
 8001144:	408b      	lsls	r3, r1
 8001146:	ea24 0303 	bic.w	r3, r4, r3
 800114a:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 800114c:	6a03      	ldr	r3, [r0, #32]
 800114e:	408a      	lsls	r2, r1
 8001150:	ea42 0103 	orr.w	r1, r2, r3
 8001154:	6201      	str	r1, [r0, #32]
 8001156:	bd10      	pop	{r4, pc}

08001158 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001158:	b510      	push	{r4, lr}
 800115a:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800115c:	2201      	movs	r2, #1
 800115e:	6800      	ldr	r0, [r0, #0]
 8001160:	f7ff ffed 	bl	800113e <TIM_CCxChannelCmd>

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001164:	6823      	ldr	r3, [r4, #0]
 8001166:	4a06      	ldr	r2, [pc, #24]	; (8001180 <HAL_TIM_PWM_Start+0x28>)
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);

  /* Return function status */
  return HAL_OK;
}
 8001168:	2000      	movs	r0, #0
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);

  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800116a:	4293      	cmp	r3, r2
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800116c:	bf02      	ittt	eq
 800116e:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 8001170:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
 8001174:	645a      	streq	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	f042 0201 	orr.w	r2, r2, #1
 800117c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 800117e:	bd10      	pop	{r4, pc}
 8001180:	40012c00 	.word	0x40012c00

08001184 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001184:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8001188:	b510      	push	{r4, lr}
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Process Locked */
  __HAL_LOCK(htim);
 800118a:	2b01      	cmp	r3, #1
 800118c:	f04f 0302 	mov.w	r3, #2
 8001190:	d016      	beq.n	80011c0 <HAL_TIMEx_ConfigBreakDeadTime+0x3c>

  htim->State = HAL_TIM_STATE_BUSY;
 8001192:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  htim->Instance->BDTR = (uint32_t)sBreakDeadTimeConfig->OffStateRunMode  |
                                   sBreakDeadTimeConfig->OffStateIDLEMode |
                                   sBreakDeadTimeConfig->LockLevel        |
                                   sBreakDeadTimeConfig->DeadTime         |
                                   sBreakDeadTimeConfig->BreakState       |
                                   sBreakDeadTimeConfig->BreakPolarity    |
 8001196:	e891 000c 	ldmia.w	r1, {r2, r3}
 800119a:	431a      	orrs	r2, r3
 800119c:	688b      	ldr	r3, [r1, #8]

  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  htim->Instance->BDTR = (uint32_t)sBreakDeadTimeConfig->OffStateRunMode  |
 800119e:	6804      	ldr	r4, [r0, #0]
                                   sBreakDeadTimeConfig->OffStateIDLEMode |
                                   sBreakDeadTimeConfig->LockLevel        |
                                   sBreakDeadTimeConfig->DeadTime         |
                                   sBreakDeadTimeConfig->BreakState       |
                                   sBreakDeadTimeConfig->BreakPolarity    |
 80011a0:	431a      	orrs	r2, r3
 80011a2:	68cb      	ldr	r3, [r1, #12]
 80011a4:	431a      	orrs	r2, r3
 80011a6:	690b      	ldr	r3, [r1, #16]
 80011a8:	431a      	orrs	r2, r3
 80011aa:	694b      	ldr	r3, [r1, #20]
 80011ac:	431a      	orrs	r2, r3
 80011ae:	698b      	ldr	r3, [r1, #24]
 80011b0:	4313      	orrs	r3, r2

  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  htim->Instance->BDTR = (uint32_t)sBreakDeadTimeConfig->OffStateRunMode  |
 80011b2:	6463      	str	r3, [r4, #68]	; 0x44
                                   sBreakDeadTimeConfig->BreakState       |
                                   sBreakDeadTimeConfig->BreakPolarity    |
                                   sBreakDeadTimeConfig->AutomaticOutput;


  htim->State = HAL_TIM_STATE_READY;
 80011b4:	2301      	movs	r3, #1
 80011b6:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  __HAL_UNLOCK(htim);
 80011ba:	2300      	movs	r3, #0
 80011bc:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Process Locked */
  __HAL_LOCK(htim);
 80011c0:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);

  return HAL_OK;
}
 80011c2:	bd10      	pop	{r4, pc}

080011c4 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 80011c4:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
  *         contains the selected trigger output (TRGO) and the Master/Slave
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 80011c8:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	f04f 0302 	mov.w	r3, #2
 80011d0:	d018      	beq.n	8001204 <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 80011d2:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80011d6:	6803      	ldr	r3, [r0, #0]
 80011d8:	685a      	ldr	r2, [r3, #4]
 80011da:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80011de:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80011e0:	685c      	ldr	r4, [r3, #4]
 80011e2:	680a      	ldr	r2, [r1, #0]
 80011e4:	4322      	orrs	r2, r4
 80011e6:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80011e8:	689a      	ldr	r2, [r3, #8]
 80011ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80011ee:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80011f0:	689c      	ldr	r4, [r3, #8]
 80011f2:	684a      	ldr	r2, [r1, #4]
 80011f4:	4322      	orrs	r2, r4
 80011f6:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 80011f8:	2301      	movs	r3, #1
 80011fa:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  __HAL_UNLOCK(htim);
 80011fe:	2300      	movs	r3, #0
 8001200:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8001204:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);

  return HAL_OK;
}
 8001206:	bd10      	pop	{r4, pc}

08001208 <HAL_TIMEx_CommutationCallback>:
 8001208:	4770      	bx	lr

0800120a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800120a:	4770      	bx	lr

0800120c <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
	if(htim->Instance==TIM2) {
 800120c:	6803      	ldr	r3, [r0, #0]
 800120e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001212:	d104      	bne.n	800121e <HAL_TIM_PeriodElapsedCallback+0x12>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001214:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001218:	4801      	ldr	r0, [pc, #4]	; (8001220 <HAL_TIM_PeriodElapsedCallback+0x14>)
 800121a:	f7ff b953 	b.w	80004c4 <HAL_GPIO_TogglePin>
 800121e:	4770      	bx	lr
 8001220:	40011000 	.word	0x40011000

08001224 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8001224:	b510      	push	{r4, lr}
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001226:	f44f 3380 	mov.w	r3, #65536	; 0x10000
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 800122a:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800122c:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800122e:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001230:	2100      	movs	r1, #0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001232:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001234:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001236:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001238:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800123c:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800123e:	9108      	str	r1, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001240:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001242:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001244:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001246:	f7ff f941 	bl	80004cc <HAL_RCC_OscConfig>
 800124a:	b100      	cbz	r0, 800124e <SystemClock_Config+0x2a>
 800124c:	e7fe      	b.n	800124c <SystemClock_Config+0x28>
    Error_Handler();
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800124e:	230f      	movs	r3, #15
 8001250:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001252:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001254:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001258:	9005      	str	r0, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800125a:	4621      	mov	r1, r4
 800125c:	a801      	add	r0, sp, #4

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800125e:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001260:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001262:	f7ff fbdb 	bl	8000a1c <HAL_RCC_ClockConfig>
 8001266:	4604      	mov	r4, r0
 8001268:	b100      	cbz	r0, 800126c <SystemClock_Config+0x48>
 800126a:	e7fe      	b.n	800126a <SystemClock_Config+0x46>
    Error_Handler();
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800126c:	f7ff fc88 	bl	8000b80 <HAL_RCC_GetHCLKFreq>
 8001270:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001274:	fbb0 f0f3 	udiv	r0, r0, r3
 8001278:	f7ff f820 	bl	80002bc <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800127c:	2004      	movs	r0, #4
 800127e:	f7ff f833 	bl	80002e8 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001282:	4622      	mov	r2, r4
 8001284:	4621      	mov	r1, r4
 8001286:	f04f 30ff 	mov.w	r0, #4294967295
 800128a:	f7fe ffd7 	bl	800023c <HAL_NVIC_SetPriority>
}
 800128e:	b010      	add	sp, #64	; 0x40
 8001290:	bd10      	pop	{r4, pc}
	...

08001294 <main>:
	}
}
/* USER CODE END 0 */

int main(void)
{
 8001294:	b570      	push	{r4, r5, r6, lr}
 8001296:	b098      	sub	sp, #96	; 0x60
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001298:	f7fe ff90 	bl	80001bc <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 800129c:	f7ff ffc2 	bl	8001224 <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012a0:	4b5b      	ldr	r3, [pc, #364]	; (8001410 <main+0x17c>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80012a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012a6:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80012a8:	485a      	ldr	r0, [pc, #360]	; (8001414 <main+0x180>)
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012aa:	f042 0210 	orr.w	r2, r2, #16
 80012ae:	619a      	str	r2, [r3, #24]
 80012b0:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80012b2:	f44f 5500 	mov.w	r5, #8192	; 0x2000
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012b6:	f002 0210 	and.w	r2, r2, #16
 80012ba:	9201      	str	r2, [sp, #4]
 80012bc:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012be:	699a      	ldr	r2, [r3, #24]
{

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim2.Instance = TIM2;
 80012c0:	4c55      	ldr	r4, [pc, #340]	; (8001418 <main+0x184>)

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012c2:	f042 0220 	orr.w	r2, r2, #32
 80012c6:	619a      	str	r2, [r3, #24]
 80012c8:	699a      	ldr	r2, [r3, #24]
 80012ca:	f002 0220 	and.w	r2, r2, #32
 80012ce:	9202      	str	r2, [sp, #8]
 80012d0:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d2:	699a      	ldr	r2, [r3, #24]
 80012d4:	f042 0204 	orr.w	r2, r2, #4
 80012d8:	619a      	str	r2, [r3, #24]
 80012da:	699b      	ldr	r3, [r3, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80012dc:	2200      	movs	r2, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012de:	f003 0304 	and.w	r3, r3, #4
 80012e2:	9303      	str	r3, [sp, #12]
 80012e4:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80012e6:	f7ff f8e9 	bl	80004bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ea:	2301      	movs	r3, #1
 80012ec:	9312      	str	r3, [sp, #72]	; 0x48
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012ee:	4849      	ldr	r0, [pc, #292]	; (8001414 <main+0x180>)
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f0:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012f2:	a911      	add	r1, sp, #68	; 0x44
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f4:	9314      	str	r3, [sp, #80]	; 0x50

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80012f6:	9511      	str	r5, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012f8:	f7ff f808 	bl	800030c <HAL_GPIO_Init>

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 7119;
 80012fc:	f641 3ccf 	movw	ip, #7119	; 0x1bcf
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 9999;
 8001300:	f242 720f 	movw	r2, #9999	; 0x270f

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 7119;
 8001304:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001308:	e884 1008 	stmia.w	r4, {r3, ip}
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 9999;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800130c:	4620      	mov	r0, r4
  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 7119;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800130e:	2300      	movs	r3, #0
 8001310:	60a3      	str	r3, [r4, #8]
  htim2.Init.Period = 9999;
 8001312:	60e2      	str	r2, [r4, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001314:	6123      	str	r3, [r4, #16]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001316:	f7ff fe4f 	bl	8000fb8 <HAL_TIM_Base_Init>
 800131a:	b100      	cbz	r0, 800131e <main+0x8a>
 800131c:	e7fe      	b.n	800131c <main+0x88>
  {
    Error_Handler();
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800131e:	f44f 5680 	mov.w	r6, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001322:	a911      	add	r1, sp, #68	; 0x44
 8001324:	4620      	mov	r0, r4
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001326:	9611      	str	r6, [sp, #68]	; 0x44
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001328:	f7ff fcb2 	bl	8000c90 <HAL_TIM_ConfigClockSource>
 800132c:	b100      	cbz	r0, 8001330 <main+0x9c>
 800132e:	e7fe      	b.n	800132e <main+0x9a>
  {
    Error_Handler();
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001330:	900a      	str	r0, [sp, #40]	; 0x28
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001332:	900b      	str	r0, [sp, #44]	; 0x2c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001334:	a90a      	add	r1, sp, #40	; 0x28
 8001336:	4620      	mov	r0, r4
 8001338:	f7ff ff44 	bl	80011c4 <HAL_TIMEx_MasterConfigSynchronization>
 800133c:	b100      	cbz	r0, 8001340 <main+0xac>
 800133e:	e7fe      	b.n	800133e <main+0xaa>
  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;

  htim1.Instance = TIM1;
 8001340:	4c36      	ldr	r4, [pc, #216]	; (800141c <main+0x188>)
  htim1.Init.Prescaler = 71;
 8001342:	4a37      	ldr	r2, [pc, #220]	; (8001420 <main+0x18c>)
 8001344:	2347      	movs	r3, #71	; 0x47
 8001346:	e884 000c 	stmia.w	r4, {r2, r3}
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 999;
 800134a:	f240 33e7 	movw	r3, #999	; 0x3e7
  TIM_OC_InitTypeDef sConfigOC;
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;

  htim1.Instance = TIM1;
  htim1.Init.Prescaler = 71;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800134e:	60a0      	str	r0, [r4, #8]
  htim1.Init.Period = 999;
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001350:	6120      	str	r0, [r4, #16]
  htim1.Init.RepetitionCounter = 0;
 8001352:	6160      	str	r0, [r4, #20]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001354:	4620      	mov	r0, r4
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;

  htim1.Instance = TIM1;
  htim1.Init.Prescaler = 71;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 999;
 8001356:	60e3      	str	r3, [r4, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001358:	f7ff fe2e 	bl	8000fb8 <HAL_TIM_Base_Init>
 800135c:	b100      	cbz	r0, 8001360 <main+0xcc>
 800135e:	e7fe      	b.n	800135e <main+0xca>
  {
    Error_Handler();
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001360:	a918      	add	r1, sp, #96	; 0x60
 8001362:	f841 6d48 	str.w	r6, [r1, #-72]!
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001366:	4620      	mov	r0, r4
 8001368:	f7ff fc92 	bl	8000c90 <HAL_TIM_ConfigClockSource>
 800136c:	b100      	cbz	r0, 8001370 <main+0xdc>
 800136e:	e7fe      	b.n	800136e <main+0xda>
  {
    Error_Handler();
  }

  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001370:	4620      	mov	r0, r4
 8001372:	f7ff fe3b 	bl	8000fec <HAL_TIM_PWM_Init>
 8001376:	b100      	cbz	r0, 800137a <main+0xe6>
 8001378:	e7fe      	b.n	8001378 <main+0xe4>
  {
    Error_Handler();
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800137a:	9004      	str	r0, [sp, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800137c:	9005      	str	r0, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800137e:	a904      	add	r1, sp, #16
 8001380:	4620      	mov	r0, r4
 8001382:	f7ff ff1f 	bl	80011c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001386:	4602      	mov	r2, r0
 8001388:	b100      	cbz	r0, 800138c <main+0xf8>
 800138a:	e7fe      	b.n	800138a <main+0xf6>
  {
    Error_Handler();
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800138c:	2360      	movs	r3, #96	; 0x60
  sConfigOC.Pulse = 0;
 800138e:	900b      	str	r0, [sp, #44]	; 0x2c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001390:	900c      	str	r0, [sp, #48]	; 0x30
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001392:	900d      	str	r0, [sp, #52]	; 0x34
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001394:	900e      	str	r0, [sp, #56]	; 0x38
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001396:	900f      	str	r0, [sp, #60]	; 0x3c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001398:	9010      	str	r0, [sp, #64]	; 0x40
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800139a:	a90a      	add	r1, sp, #40	; 0x28
 800139c:	4620      	mov	r0, r4
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800139e:	930a      	str	r3, [sp, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013a0:	f7ff fe6a 	bl	8001078 <HAL_TIM_PWM_ConfigChannel>
 80013a4:	b100      	cbz	r0, 80013a8 <main+0x114>
 80013a6:	e7fe      	b.n	80013a6 <main+0x112>
  {
    Error_Handler();
  }

  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80013a8:	220c      	movs	r2, #12
 80013aa:	a90a      	add	r1, sp, #40	; 0x28
 80013ac:	4620      	mov	r0, r4
 80013ae:	f7ff fe63 	bl	8001078 <HAL_TIM_PWM_ConfigChannel>
 80013b2:	b100      	cbz	r0, 80013b6 <main+0x122>
 80013b4:	e7fe      	b.n	80013b4 <main+0x120>
  {
    Error_Handler();
  }

  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80013b6:	9011      	str	r0, [sp, #68]	; 0x44
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80013b8:	9012      	str	r0, [sp, #72]	; 0x48
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80013ba:	9013      	str	r0, [sp, #76]	; 0x4c
  sBreakDeadTimeConfig.DeadTime = 0;
 80013bc:	9014      	str	r0, [sp, #80]	; 0x50
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80013be:	9015      	str	r0, [sp, #84]	; 0x54
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80013c0:	9017      	str	r0, [sp, #92]	; 0x5c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80013c2:	a911      	add	r1, sp, #68	; 0x44
 80013c4:	4620      	mov	r0, r4
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
  sBreakDeadTimeConfig.DeadTime = 0;
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80013c6:	9516      	str	r5, [sp, #88]	; 0x58
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80013c8:	f7ff fedc 	bl	8001184 <HAL_TIMEx_ConfigBreakDeadTime>
 80013cc:	b100      	cbz	r0, 80013d0 <main+0x13c>
 80013ce:	e7fe      	b.n	80013ce <main+0x13a>
  {
    Error_Handler();
  }

  HAL_TIM_MspPostInit(&htim1);
 80013d0:	4812      	ldr	r0, [pc, #72]	; (800141c <main+0x188>)
 80013d2:	f000 f89b 	bl	800150c <HAL_TIM_MspPostInit>
  MX_GPIO_Init();
  MX_TIM2_Init();
  MX_TIM1_Init();

  /* USER CODE BEGIN 2 */
  while(HAL_TIM_Base_Start_IT(&htim2)!=HAL_OK);
 80013d6:	4810      	ldr	r0, [pc, #64]	; (8001418 <main+0x184>)
 80013d8:	f7ff fc4e 	bl	8000c78 <HAL_TIM_Base_Start_IT>
 80013dc:	2800      	cmp	r0, #0
 80013de:	d1fa      	bne.n	80013d6 <main+0x142>

  while(HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1 )!=HAL_OK);
 80013e0:	2100      	movs	r1, #0
 80013e2:	480e      	ldr	r0, [pc, #56]	; (800141c <main+0x188>)
 80013e4:	f7ff feb8 	bl	8001158 <HAL_TIM_PWM_Start>
 80013e8:	2800      	cmp	r0, #0
 80013ea:	d1f9      	bne.n	80013e0 <main+0x14c>
  while(HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_4 )!=HAL_OK);
 80013ec:	210c      	movs	r1, #12
 80013ee:	480b      	ldr	r0, [pc, #44]	; (800141c <main+0x188>)
 80013f0:	f7ff feb2 	bl	8001158 <HAL_TIM_PWM_Start>
 80013f4:	2800      	cmp	r0, #0
 80013f6:	d1f9      	bne.n	80013ec <main+0x158>
 80013f8:	4604      	mov	r4, r0
  {
  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */
	  if(x==1000) x = 0;
	  TIM1->CCR1 = x;
 80013fa:	4d09      	ldr	r5, [pc, #36]	; (8001420 <main+0x18c>)
 80013fc:	636c      	str	r4, [r5, #52]	; 0x34
	  x+=1;
	  HAL_Delay(3);
 80013fe:	2003      	movs	r0, #3
  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */
	  if(x==1000) x = 0;
	  TIM1->CCR1 = x;
	  x+=1;
 8001400:	3401      	adds	r4, #1
	  HAL_Delay(3);
 8001402:	f7fe fefb 	bl	80001fc <HAL_Delay>
  while (1)
  {
  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */
	  if(x==1000) x = 0;
 8001406:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 800140a:	bf08      	it	eq
 800140c:	2400      	moveq	r4, #0
 800140e:	e7f5      	b.n	80013fc <main+0x168>
 8001410:	40021000 	.word	0x40021000
 8001414:	40011000 	.word	0x40011000
 8001418:	20000060 	.word	0x20000060
 800141c:	20000024 	.word	0x20000024
 8001420:	40012c00 	.word	0x40012c00

08001424 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001424:	4b20      	ldr	r3, [pc, #128]	; (80014a8 <HAL_MspInit+0x84>)
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001426:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001428:	699a      	ldr	r2, [r3, #24]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800142a:	2003      	movs	r0, #3
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800142c:	f042 0201 	orr.w	r2, r2, #1
 8001430:	619a      	str	r2, [r3, #24]
 8001432:	699b      	ldr	r3, [r3, #24]
 8001434:	f003 0301 	and.w	r3, r3, #1
 8001438:	9301      	str	r3, [sp, #4]
 800143a:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800143c:	f7fe feec 	bl	8000218 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8001440:	2200      	movs	r2, #0
 8001442:	4611      	mov	r1, r2
 8001444:	f06f 000b 	mvn.w	r0, #11
 8001448:	f7fe fef8 	bl	800023c <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800144c:	2200      	movs	r2, #0
 800144e:	4611      	mov	r1, r2
 8001450:	f06f 000a 	mvn.w	r0, #10
 8001454:	f7fe fef2 	bl	800023c <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8001458:	2200      	movs	r2, #0
 800145a:	4611      	mov	r1, r2
 800145c:	f06f 0009 	mvn.w	r0, #9
 8001460:	f7fe feec 	bl	800023c <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8001464:	2200      	movs	r2, #0
 8001466:	4611      	mov	r1, r2
 8001468:	f06f 0004 	mvn.w	r0, #4
 800146c:	f7fe fee6 	bl	800023c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8001470:	2200      	movs	r2, #0
 8001472:	4611      	mov	r1, r2
 8001474:	f06f 0003 	mvn.w	r0, #3
 8001478:	f7fe fee0 	bl	800023c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 800147c:	2200      	movs	r2, #0
 800147e:	4611      	mov	r1, r2
 8001480:	f06f 0001 	mvn.w	r0, #1
 8001484:	f7fe feda 	bl	800023c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001488:	2200      	movs	r2, #0
 800148a:	4611      	mov	r1, r2
 800148c:	f04f 30ff 	mov.w	r0, #4294967295
 8001490:	f7fe fed4 	bl	800023c <HAL_NVIC_SetPriority>

    /**DISABLE: JTAG-DP Disabled and SW-DP Disabled 
    */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001494:	4a05      	ldr	r2, [pc, #20]	; (80014ac <HAL_MspInit+0x88>)
 8001496:	6853      	ldr	r3, [r2, #4]
 8001498:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800149c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80014a0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014a2:	b003      	add	sp, #12
 80014a4:	f85d fb04 	ldr.w	pc, [sp], #4
 80014a8:	40021000 	.word	0x40021000
 80014ac:	40010000 	.word	0x40010000

080014b0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014b0:	b507      	push	{r0, r1, r2, lr}

  if(htim_base->Instance==TIM1)
 80014b2:	6803      	ldr	r3, [r0, #0]
 80014b4:	4a13      	ldr	r2, [pc, #76]	; (8001504 <HAL_TIM_Base_MspInit+0x54>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d10a      	bne.n	80014d0 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80014ba:	4b13      	ldr	r3, [pc, #76]	; (8001508 <HAL_TIM_Base_MspInit+0x58>)
 80014bc:	699a      	ldr	r2, [r3, #24]
 80014be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80014c2:	619a      	str	r2, [r3, #24]
 80014c4:	699b      	ldr	r3, [r3, #24]
 80014c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80014ca:	9300      	str	r3, [sp, #0]
 80014cc:	9b00      	ldr	r3, [sp, #0]
 80014ce:	e015      	b.n	80014fc <HAL_TIM_Base_MspInit+0x4c>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 80014d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014d4:	d112      	bne.n	80014fc <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014d6:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80014da:	69da      	ldr	r2, [r3, #28]
    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80014dc:	201c      	movs	r0, #28
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014de:	f042 0201 	orr.w	r2, r2, #1
 80014e2:	61da      	str	r2, [r3, #28]
 80014e4:	69db      	ldr	r3, [r3, #28]
    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80014e6:	2200      	movs	r2, #0
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014e8:	f003 0301 	and.w	r3, r3, #1
 80014ec:	9301      	str	r3, [sp, #4]
    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80014ee:	4611      	mov	r1, r2
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014f0:	9b01      	ldr	r3, [sp, #4]
    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80014f2:	f7fe fea3 	bl	800023c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80014f6:	201c      	movs	r0, #28
 80014f8:	f7fe fed4 	bl	80002a4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80014fc:	b003      	add	sp, #12
 80014fe:	f85d fb04 	ldr.w	pc, [sp], #4
 8001502:	bf00      	nop
 8001504:	40012c00 	.word	0x40012c00
 8001508:	40021000 	.word	0x40021000

0800150c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800150c:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM1)
 800150e:	6802      	ldr	r2, [r0, #0]
 8001510:	4b08      	ldr	r3, [pc, #32]	; (8001534 <HAL_TIM_MspPostInit+0x28>)
 8001512:	429a      	cmp	r2, r3
 8001514:	d10a      	bne.n	800152c <HAL_TIM_MspPostInit+0x20>
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1
    PA11     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001516:	2302      	movs	r3, #2
 8001518:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800151c:	e88d 000c 	stmia.w	sp, {r2, r3}
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001520:	4669      	mov	r1, sp
    PA8     ------> TIM1_CH1
    PA11     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001522:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001524:	4804      	ldr	r0, [pc, #16]	; (8001538 <HAL_TIM_MspPostInit+0x2c>)
    PA8     ------> TIM1_CH1
    PA11     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001526:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001528:	f7fe fef0 	bl	800030c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800152c:	b005      	add	sp, #20
 800152e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001532:	bf00      	nop
 8001534:	40012c00 	.word	0x40012c00
 8001538:	40010800 	.word	0x40010800

0800153c <NMI_Handler>:
 800153c:	4770      	bx	lr

0800153e <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 800153e:	e7fe      	b.n	800153e <HardFault_Handler>

08001540 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8001540:	e7fe      	b.n	8001540 <MemManage_Handler>

08001542 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8001542:	e7fe      	b.n	8001542 <BusFault_Handler>

08001544 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8001544:	e7fe      	b.n	8001544 <UsageFault_Handler>

08001546 <SVC_Handler>:
 8001546:	4770      	bx	lr

08001548 <DebugMon_Handler>:
 8001548:	4770      	bx	lr

0800154a <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 800154a:	4770      	bx	lr

0800154c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800154c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800154e:	f7fe fe47 	bl	80001e0 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001552:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  HAL_SYSTICK_IRQHandler();
 8001556:	f7fe bed4 	b.w	8000302 <HAL_SYSTICK_IRQHandler>
	...

0800155c <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800155c:	4801      	ldr	r0, [pc, #4]	; (8001564 <TIM2_IRQHandler+0x8>)
 800155e:	f7ff bc55 	b.w	8000e0c <HAL_TIM_IRQHandler>
 8001562:	bf00      	nop
 8001564:	20000060 	.word	0x20000060

08001568 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001568:	4b0f      	ldr	r3, [pc, #60]	; (80015a8 <SystemInit+0x40>)
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	f042 0201 	orr.w	r2, r2, #1
 8001570:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8001572:	6859      	ldr	r1, [r3, #4]
 8001574:	4a0d      	ldr	r2, [pc, #52]	; (80015ac <SystemInit+0x44>)
 8001576:	400a      	ands	r2, r1
 8001578:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001580:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001584:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800158c:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 800158e:	685a      	ldr	r2, [r3, #4]
 8001590:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001594:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8001596:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800159a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800159c:	4b04      	ldr	r3, [pc, #16]	; (80015b0 <SystemInit+0x48>)
 800159e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015a2:	609a      	str	r2, [r3, #8]
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	40021000 	.word	0x40021000
 80015ac:	f8ff0000 	.word	0xf8ff0000
 80015b0:	e000ed00 	.word	0xe000ed00

080015b4 <__libc_init_array>:
 80015b4:	4b0e      	ldr	r3, [pc, #56]	; (80015f0 <__libc_init_array+0x3c>)
 80015b6:	b570      	push	{r4, r5, r6, lr}
 80015b8:	461e      	mov	r6, r3
 80015ba:	4c0e      	ldr	r4, [pc, #56]	; (80015f4 <__libc_init_array+0x40>)
 80015bc:	2500      	movs	r5, #0
 80015be:	1ae4      	subs	r4, r4, r3
 80015c0:	10a4      	asrs	r4, r4, #2
 80015c2:	42a5      	cmp	r5, r4
 80015c4:	d004      	beq.n	80015d0 <__libc_init_array+0x1c>
 80015c6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80015ca:	4798      	blx	r3
 80015cc:	3501      	adds	r5, #1
 80015ce:	e7f8      	b.n	80015c2 <__libc_init_array+0xe>
 80015d0:	f000 f816 	bl	8001600 <_init>
 80015d4:	4b08      	ldr	r3, [pc, #32]	; (80015f8 <__libc_init_array+0x44>)
 80015d6:	4c09      	ldr	r4, [pc, #36]	; (80015fc <__libc_init_array+0x48>)
 80015d8:	461e      	mov	r6, r3
 80015da:	1ae4      	subs	r4, r4, r3
 80015dc:	10a4      	asrs	r4, r4, #2
 80015de:	2500      	movs	r5, #0
 80015e0:	42a5      	cmp	r5, r4
 80015e2:	d004      	beq.n	80015ee <__libc_init_array+0x3a>
 80015e4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80015e8:	4798      	blx	r3
 80015ea:	3501      	adds	r5, #1
 80015ec:	e7f8      	b.n	80015e0 <__libc_init_array+0x2c>
 80015ee:	bd70      	pop	{r4, r5, r6, pc}
 80015f0:	0800163c 	.word	0x0800163c
 80015f4:	0800163c 	.word	0x0800163c
 80015f8:	0800163c 	.word	0x0800163c
 80015fc:	08001640 	.word	0x08001640

08001600 <_init>:
 8001600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001602:	bf00      	nop
 8001604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001606:	bc08      	pop	{r3}
 8001608:	469e      	mov	lr, r3
 800160a:	4770      	bx	lr

0800160c <_fini>:
 800160c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800160e:	bf00      	nop
 8001610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001612:	bc08      	pop	{r3}
 8001614:	469e      	mov	lr, r3
 8001616:	4770      	bx	lr
