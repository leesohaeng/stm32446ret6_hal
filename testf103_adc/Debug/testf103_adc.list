
C:\Users\sohae\Desktop\STM32F446RET6_HAL\testf103_adc\Debug\testf103_adc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d80  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08001e8c  08001e8c  00011e8c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001eb8  08001eb8  00011eb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001ebc  08001ebc  00011ebc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08001ec0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000140  20000004  08001ec4  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000144  08001ec4  00020144  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000c36c  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002058  00000000  00000000  0002c399  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006a8e  00000000  00000000  0002e3f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000008e8  00000000  00000000  00034e80  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000cc8  00000000  00000000  00035768  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000507d  00000000  00000000  00036430  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002e85  00000000  00000000  0003b4ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007e  00000000  00000000  0003e332  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000019ac  00000000  00000000  0003e3b0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	08001e74 	.word	0x08001e74

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	08001e74 	.word	0x08001e74

0800014c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800014c:	b510      	push	{r4, lr}
 800014e:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000150:	f000 ffb0 	bl	80010b4 <HAL_RCC_GetHCLKFreq>
 8000154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000158:	fbb0 f0f3 	udiv	r0, r0, r3
 800015c:	f000 f9fe 	bl	800055c <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8000160:	2200      	movs	r2, #0
 8000162:	4621      	mov	r1, r4
 8000164:	f04f 30ff 	mov.w	r0, #4294967295
 8000168:	f000 f9b8 	bl	80004dc <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 800016c:	2000      	movs	r0, #0
 800016e:	bd10      	pop	{r4, pc}

08000170 <HAL_Init>:
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000170:	4a07      	ldr	r2, [pc, #28]	; (8000190 <HAL_Init+0x20>)
  *        In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000172:	b508      	push	{r3, lr}
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000174:	6813      	ldr	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000176:	2003      	movs	r0, #3
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000178:	f043 0310 	orr.w	r3, r3, #16
 800017c:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800017e:	f000 f99b 	bl	80004b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000182:	2000      	movs	r0, #0
 8000184:	f7ff ffe2 	bl	800014c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000188:	f001 fcee 	bl	8001b68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 800018c:	2000      	movs	r0, #0
 800018e:	bd08      	pop	{r3, pc}
 8000190:	40022000 	.word	0x40022000

08000194 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000194:	4a02      	ldr	r2, [pc, #8]	; (80001a0 <HAL_IncTick+0xc>)
 8000196:	6813      	ldr	r3, [r2, #0]
 8000198:	3301      	adds	r3, #1
 800019a:	6013      	str	r3, [r2, #0]
 800019c:	4770      	bx	lr
 800019e:	bf00      	nop
 80001a0:	20000020 	.word	0x20000020

080001a4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001a4:	4b01      	ldr	r3, [pc, #4]	; (80001ac <HAL_GetTick+0x8>)
 80001a6:	6818      	ldr	r0, [r3, #0]
}
 80001a8:	4770      	bx	lr
 80001aa:	bf00      	nop
 80001ac:	20000020 	.word	0x20000020

080001b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80001b0:	b513      	push	{r0, r1, r4, lr}
 80001b2:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 80001b4:	f7ff fff6 	bl	80001a4 <HAL_GetTick>
 80001b8:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 80001ba:	f7ff fff3 	bl	80001a4 <HAL_GetTick>
 80001be:	9b01      	ldr	r3, [sp, #4]
 80001c0:	1b00      	subs	r0, r0, r4
 80001c2:	4298      	cmp	r0, r3
 80001c4:	d3f9      	bcc.n	80001ba <HAL_Delay+0xa>
  {
  }
}
 80001c6:	b002      	add	sp, #8
 80001c8:	bd10      	pop	{r4, pc}
	...

080001cc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80001cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0;
 80001ce:	2300      	movs	r3, #0
 80001d0:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80001d2:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80001d6:	2b01      	cmp	r3, #1
 80001d8:	f000 80ae 	beq.w	8000338 <HAL_ADC_ConfigChannel+0x16c>
 80001dc:	2301      	movs	r3, #1
 80001de:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80001e2:	684b      	ldr	r3, [r1, #4]
 80001e4:	6804      	ldr	r4, [r0, #0]
 80001e6:	2b06      	cmp	r3, #6
 80001e8:	680d      	ldr	r5, [r1, #0]
 80001ea:	d818      	bhi.n	800021e <HAL_ADC_ConfigChannel+0x52>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80001ec:	6b67      	ldr	r7, [r4, #52]	; 0x34
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80001ee:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 80001f2:	fa92 f6a2 	rbit	r6, r2
 80001f6:	fab6 f686 	clz	r6, r6
 80001fa:	3b01      	subs	r3, #1
 80001fc:	fa92 f2a2 	rbit	r2, r2
 8000200:	fab2 f282 	clz	r2, r2
 8000204:	435e      	muls	r6, r3
 8000206:	4353      	muls	r3, r2
 8000208:	f04f 0e1f 	mov.w	lr, #31
 800020c:	fa0e f606 	lsl.w	r6, lr, r6
 8000210:	ea27 0606 	bic.w	r6, r7, r6
 8000214:	fa05 f303 	lsl.w	r3, r5, r3
 8000218:	4333      	orrs	r3, r6
 800021a:	6363      	str	r3, [r4, #52]	; 0x34
 800021c:	e030      	b.n	8000280 <HAL_ADC_ConfigChannel+0xb4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800021e:	2b0c      	cmp	r3, #12
 8000220:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8000224:	d816      	bhi.n	8000254 <HAL_ADC_ConfigChannel+0x88>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000226:	6b27      	ldr	r7, [r4, #48]	; 0x30
 8000228:	fa92 f6a2 	rbit	r6, r2
 800022c:	fab6 f686 	clz	r6, r6
 8000230:	3b07      	subs	r3, #7
 8000232:	fa92 f2a2 	rbit	r2, r2
 8000236:	fab2 f282 	clz	r2, r2
 800023a:	435e      	muls	r6, r3
 800023c:	435a      	muls	r2, r3
 800023e:	f04f 0e1f 	mov.w	lr, #31
 8000242:	fa0e f606 	lsl.w	r6, lr, r6
 8000246:	ea27 0606 	bic.w	r6, r7, r6
 800024a:	fa05 f202 	lsl.w	r2, r5, r2
 800024e:	4332      	orrs	r2, r6
 8000250:	6322      	str	r2, [r4, #48]	; 0x30
 8000252:	e015      	b.n	8000280 <HAL_ADC_ConfigChannel+0xb4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000254:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8000256:	fa92 f6a2 	rbit	r6, r2
 800025a:	fab6 f686 	clz	r6, r6
 800025e:	3b0d      	subs	r3, #13
 8000260:	fa92 f2a2 	rbit	r2, r2
 8000264:	fab2 f282 	clz	r2, r2
 8000268:	435e      	muls	r6, r3
 800026a:	4353      	muls	r3, r2
 800026c:	f04f 0e1f 	mov.w	lr, #31
 8000270:	fa0e f606 	lsl.w	r6, lr, r6
 8000274:	ea27 0606 	bic.w	r6, r7, r6
 8000278:	fa05 f303 	lsl.w	r3, r5, r3
 800027c:	4333      	orrs	r3, r6
 800027e:	62e3      	str	r3, [r4, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000280:	2d09      	cmp	r5, #9
 8000282:	f04f 0338 	mov.w	r3, #56	; 0x38
 8000286:	688e      	ldr	r6, [r1, #8]
 8000288:	d918      	bls.n	80002bc <HAL_ADC_ConfigChannel+0xf0>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800028a:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 800028e:	fa93 f7a3 	rbit	r7, r3
 8000292:	fab7 f787 	clz	r7, r7
 8000296:	f1a5 010a 	sub.w	r1, r5, #10
 800029a:	fa93 f3a3 	rbit	r3, r3
 800029e:	fab3 f283 	clz	r2, r3
 80002a2:	fb01 f307 	mul.w	r3, r1, r7
 80002a6:	4351      	muls	r1, r2
 80002a8:	2707      	movs	r7, #7
 80002aa:	fa07 f303 	lsl.w	r3, r7, r3
 80002ae:	ea2e 0303 	bic.w	r3, lr, r3
 80002b2:	fa06 f201 	lsl.w	r2, r6, r1
 80002b6:	431a      	orrs	r2, r3
 80002b8:	60e2      	str	r2, [r4, #12]
 80002ba:	e013      	b.n	80002e4 <HAL_ADC_ConfigChannel+0x118>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80002bc:	6927      	ldr	r7, [r4, #16]
 80002be:	fa93 f1a3 	rbit	r1, r3
 80002c2:	fab1 f181 	clz	r1, r1
 80002c6:	fa93 f3a3 	rbit	r3, r3
 80002ca:	fab3 f383 	clz	r3, r3
 80002ce:	4369      	muls	r1, r5
 80002d0:	436b      	muls	r3, r5
 80002d2:	2207      	movs	r2, #7
 80002d4:	fa02 f101 	lsl.w	r1, r2, r1
 80002d8:	ea27 0101 	bic.w	r1, r7, r1
 80002dc:	fa06 f203 	lsl.w	r2, r6, r3
 80002e0:	430a      	orrs	r2, r1
 80002e2:	6122      	str	r2, [r4, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80002e4:	f1a5 0310 	sub.w	r3, r5, #16
 80002e8:	2b01      	cmp	r3, #1
 80002ea:	d901      	bls.n	80002f0 <HAL_ADC_ConfigChannel+0x124>
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80002ec:	2300      	movs	r3, #0
 80002ee:	e01e      	b.n	800032e <HAL_ADC_ConfigChannel+0x162>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80002f0:	4b13      	ldr	r3, [pc, #76]	; (8000340 <HAL_ADC_ConfigChannel+0x174>)
 80002f2:	429c      	cmp	r4, r3
 80002f4:	d116      	bne.n	8000324 <HAL_ADC_ConfigChannel+0x158>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80002f6:	68a3      	ldr	r3, [r4, #8]
 80002f8:	021b      	lsls	r3, r3, #8
 80002fa:	d4f7      	bmi.n	80002ec <HAL_ADC_ConfigChannel+0x120>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80002fc:	68a3      	ldr	r3, [r4, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80002fe:	2d10      	cmp	r5, #16
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000300:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000304:	60a3      	str	r3, [r4, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000306:	d1f1      	bne.n	80002ec <HAL_ADC_ConfigChannel+0x120>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8000308:	4b0e      	ldr	r3, [pc, #56]	; (8000344 <HAL_ADC_ConfigChannel+0x178>)
 800030a:	4a0f      	ldr	r2, [pc, #60]	; (8000348 <HAL_ADC_ConfigChannel+0x17c>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	fbb3 f2f2 	udiv	r2, r3, r2
 8000312:	230a      	movs	r3, #10
 8000314:	4353      	muls	r3, r2
          while(wait_loop_index != 0)
          {
            wait_loop_index--;
 8000316:	9301      	str	r3, [sp, #4]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
          while(wait_loop_index != 0)
 8000318:	9b01      	ldr	r3, [sp, #4]
 800031a:	2b00      	cmp	r3, #0
 800031c:	d0e6      	beq.n	80002ec <HAL_ADC_ConfigChannel+0x120>
          {
            wait_loop_index--;
 800031e:	9b01      	ldr	r3, [sp, #4]
 8000320:	3b01      	subs	r3, #1
 8000322:	e7f8      	b.n	8000316 <HAL_ADC_ConfigChannel+0x14a>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000324:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000326:	f043 0320 	orr.w	r3, r3, #32
 800032a:	6283      	str	r3, [r0, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800032c:	2301      	movs	r3, #1
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800032e:	2200      	movs	r2, #0
 8000330:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000334:	4618      	mov	r0, r3
 8000336:	e000      	b.n	800033a <HAL_ADC_ConfigChannel+0x16e>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000338:	2002      	movs	r0, #2
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
  /* Return function status */
  return tmp_hal_status;
}
 800033a:	b003      	add	sp, #12
 800033c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800033e:	bf00      	nop
 8000340:	40012400 	.word	0x40012400
 8000344:	20000000 	.word	0x20000000
 8000348:	000f4240 	.word	0x000f4240

0800034c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800034c:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800034e:	6803      	ldr	r3, [r0, #0]
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000350:	4604      	mov	r4, r0
  uint32_t tickstart = 0;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000352:	689a      	ldr	r2, [r3, #8]
 8000354:	07d2      	lsls	r2, r2, #31
 8000356:	d401      	bmi.n	800035c <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000358:	2000      	movs	r0, #0
 800035a:	bd38      	pop	{r3, r4, r5, pc}
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800035c:	689a      	ldr	r2, [r3, #8]
 800035e:	f022 0201 	bic.w	r2, r2, #1
 8000362:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000364:	f7ff ff1e 	bl	80001a4 <HAL_GetTick>
 8000368:	4605      	mov	r5, r0
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800036a:	6823      	ldr	r3, [r4, #0]
 800036c:	689b      	ldr	r3, [r3, #8]
 800036e:	07db      	lsls	r3, r3, #31
 8000370:	d5f2      	bpl.n	8000358 <ADC_ConversionStop_Disable+0xc>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000372:	f7ff ff17 	bl	80001a4 <HAL_GetTick>
 8000376:	1b40      	subs	r0, r0, r5
 8000378:	2802      	cmp	r0, #2
 800037a:	d9f6      	bls.n	800036a <ADC_ConversionStop_Disable+0x1e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800037c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800037e:	2001      	movs	r0, #1
    while(ADC_IS_ENABLE(hadc) != RESET)
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000380:	f043 0310 	orr.w	r3, r3, #16
 8000384:	62a3      	str	r3, [r4, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000386:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000388:	f043 0301 	orr.w	r3, r3, #1
 800038c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800038e:	bd38      	pop	{r3, r4, r5, pc}

08000390 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000390:	b538      	push	{r3, r4, r5, lr}
  uint32_t tmp_cr1 = 0;
  uint32_t tmp_cr2 = 0;
  uint32_t tmp_sqr1 = 0;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000392:	4604      	mov	r4, r0
 8000394:	2800      	cmp	r0, #0
 8000396:	f000 8088 	beq.w	80004aa <HAL_ADC_Init+0x11a>
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800039a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800039c:	b923      	cbnz	r3, 80003a8 <HAL_ADC_Init+0x18>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800039e:	62c3      	str	r3, [r0, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80003a0:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80003a4:	f001 fc26 	bl	8001bf4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80003a8:	4620      	mov	r0, r4
 80003aa:	f7ff ffcf 	bl	800034c <ADC_ConversionStop_Disable>
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80003ae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80003b0:	f013 0f10 	tst.w	r3, #16
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80003b4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80003b6:	d175      	bne.n	80004a4 <HAL_ADC_Init+0x114>
 80003b8:	2800      	cmp	r0, #0
 80003ba:	d173      	bne.n	80004a4 <HAL_ADC_Init+0x114>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80003bc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80003c0:	f023 0302 	bic.w	r3, r3, #2
 80003c4:	f043 0302 	orr.w	r3, r3, #2
 80003c8:	62a3      	str	r3, [r4, #40]	; 0x28
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                               |
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 80003ca:	68e0      	ldr	r0, [r4, #12]
 80003cc:	2302      	movs	r3, #2
 80003ce:	fa93 f3a3 	rbit	r3, r3
 80003d2:	fab3 f383 	clz	r3, r3
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                               |
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 80003d6:	6861      	ldr	r1, [r4, #4]
 80003d8:	69e2      	ldr	r2, [r4, #28]
 80003da:	fa00 f303 	lsl.w	r3, r0, r3
 80003de:	430a      	orrs	r2, r1
    
    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80003e0:	68a1      	ldr	r1, [r4, #8]
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                               |
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 80003e2:	4313      	orrs	r3, r2
    
    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80003e4:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80003e8:	d005      	beq.n	80003f6 <HAL_ADC_Init+0x66>
 80003ea:	2901      	cmp	r1, #1
 80003ec:	bf14      	ite	ne
 80003ee:	2200      	movne	r2, #0
 80003f0:	f44f 7280 	moveq.w	r2, #256	; 0x100
 80003f4:	e000      	b.n	80003f8 <HAL_ADC_Init+0x68>
 80003f6:	460a      	mov	r2, r1
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80003f8:	6965      	ldr	r5, [r4, #20]
 80003fa:	2d01      	cmp	r5, #1
 80003fc:	d115      	bne.n	800042a <HAL_ADC_Init+0x9a>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80003fe:	b960      	cbnz	r0, 800041a <HAL_ADC_Init+0x8a>
 8000400:	f44f 4060 	mov.w	r0, #57344	; 0xe000
 8000404:	fa90 f0a0 	rbit	r0, r0
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000408:	fab0 f580 	clz	r5, r0
 800040c:	69a0      	ldr	r0, [r4, #24]
 800040e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000412:	3801      	subs	r0, #1
 8000414:	40a8      	lsls	r0, r5
 8000416:	4302      	orrs	r2, r0
 8000418:	e007      	b.n	800042a <HAL_ADC_Init+0x9a>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800041a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800041c:	f040 0020 	orr.w	r0, r0, #32
 8000420:	62a0      	str	r0, [r4, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000422:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8000424:	f040 0001 	orr.w	r0, r0, #1
 8000428:	62e0      	str	r0, [r4, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800042a:	6820      	ldr	r0, [r4, #0]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800042c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000430:	6845      	ldr	r5, [r0, #4]
 8000432:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 8000436:	ea42 0205 	orr.w	r2, r2, r5
 800043a:	6042      	str	r2, [r0, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800043c:	6885      	ldr	r5, [r0, #8]
 800043e:	4a1c      	ldr	r2, [pc, #112]	; (80004b0 <HAL_ADC_Init+0x120>)
 8000440:	ea02 0205 	and.w	r2, r2, r5
 8000444:	ea42 0203 	orr.w	r2, r2, r3
 8000448:	6082      	str	r2, [r0, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800044a:	d001      	beq.n	8000450 <HAL_ADC_Init+0xc0>
 800044c:	2901      	cmp	r1, #1
 800044e:	d10a      	bne.n	8000466 <HAL_ADC_Init+0xd6>
 8000450:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
 8000454:	fa92 f2a2 	rbit	r2, r2
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000458:	fab2 f282 	clz	r2, r2
 800045c:	6921      	ldr	r1, [r4, #16]
 800045e:	3901      	subs	r1, #1
 8000460:	fa01 f202 	lsl.w	r2, r1, r2
 8000464:	e000      	b.n	8000468 <HAL_ADC_Init+0xd8>
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cr1 = 0;
  uint32_t tmp_cr2 = 0;
  uint32_t tmp_sqr1 = 0;
 8000466:	2200      	movs	r2, #0
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000468:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800046a:	f421 0170 	bic.w	r1, r1, #15728640	; 0xf00000
 800046e:	430a      	orrs	r2, r1
 8000470:	62c2      	str	r2, [r0, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000472:	6881      	ldr	r1, [r0, #8]
 8000474:	4a0f      	ldr	r2, [pc, #60]	; (80004b4 <HAL_ADC_Init+0x124>)
 8000476:	400a      	ands	r2, r1
 8000478:	4293      	cmp	r3, r2
 800047a:	d108      	bne.n	800048e <HAL_ADC_Init+0xfe>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800047c:	2000      	movs	r0, #0
 800047e:	62e0      	str	r0, [r4, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000480:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000482:	f023 0303 	bic.w	r3, r3, #3
 8000486:	f043 0301 	orr.w	r3, r3, #1
 800048a:	62a3      	str	r3, [r4, #40]	; 0x28
 800048c:	bd38      	pop	{r3, r4, r5, pc}
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800048e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000490:	f023 0312 	bic.w	r3, r3, #18
 8000494:	f043 0310 	orr.w	r3, r3, #16
 8000498:	62a3      	str	r3, [r4, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800049a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800049c:	f043 0301 	orr.w	r3, r3, #1
 80004a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80004a2:	e002      	b.n	80004aa <HAL_ADC_Init+0x11a>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80004a4:	f043 0310 	orr.w	r3, r3, #16
 80004a8:	62a3      	str	r3, [r4, #40]	; 0x28
  uint32_t tmp_sqr1 = 0;
  
  /* Check ADC handle */
  if(hadc == NULL)
  {
    return HAL_ERROR;
 80004aa:	2001      	movs	r0, #1
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 80004ac:	bd38      	pop	{r3, r4, r5, pc}
 80004ae:	bf00      	nop
 80004b0:	ffe1f7fd 	.word	0xffe1f7fd
 80004b4:	ff1f0efe 	.word	0xff1f0efe

080004b8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80004b8:	4a07      	ldr	r2, [pc, #28]	; (80004d8 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 80004ba:	0200      	lsls	r0, r0, #8
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80004bc:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 80004be:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 80004c2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80004c6:	041b      	lsls	r3, r3, #16
 80004c8:	0c1b      	lsrs	r3, r3, #16
 80004ca:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80004ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004d2:	4303      	orrs	r3, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 80004d4:	60d3      	str	r3, [r2, #12]
 80004d6:	4770      	bx	lr
 80004d8:	e000ed00 	.word	0xe000ed00

080004dc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80004dc:	4b17      	ldr	r3, [pc, #92]	; (800053c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	68db      	ldr	r3, [r3, #12]
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80004e2:	f3c3 2302 	ubfx	r3, r3, #8, #3
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80004e6:	f1c3 0407 	rsb	r4, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80004ea:	1d1d      	adds	r5, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80004ec:	2c04      	cmp	r4, #4
 80004ee:	bf28      	it	cs
 80004f0:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80004f2:	2d06      	cmp	r5, #6

  return (
 80004f4:	f04f 0501 	mov.w	r5, #1
 80004f8:	fa05 f404 	lsl.w	r4, r5, r4
 80004fc:	f104 34ff 	add.w	r4, r4, #4294967295
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000500:	bf8c      	ite	hi
 8000502:	3b03      	subhi	r3, #3
 8000504:	2300      	movls	r3, #0

  return (
 8000506:	400c      	ands	r4, r1
 8000508:	409c      	lsls	r4, r3
 800050a:	fa05 f303 	lsl.w	r3, r5, r3
 800050e:	3b01      	subs	r3, #1
 8000510:	401a      	ands	r2, r3
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8000512:	2800      	cmp	r0, #0
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8000514:	ea42 0204 	orr.w	r2, r2, r4
 8000518:	ea4f 1202 	mov.w	r2, r2, lsl #4
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800051c:	bfaf      	iteee	ge
 800051e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000522:	4b07      	ldrlt	r3, [pc, #28]	; (8000540 <HAL_NVIC_SetPriority+0x64>)
 8000524:	f000 000f 	andlt.w	r0, r0, #15
 8000528:	b2d2      	uxtblt	r2, r2
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800052a:	bfa5      	ittet	ge
 800052c:	b2d2      	uxtbge	r2, r2
 800052e:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000532:	541a      	strblt	r2, [r3, r0]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000534:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	bf00      	nop
 800053c:	e000ed00 	.word	0xe000ed00
 8000540:	e000ed14 	.word	0xe000ed14

08000544 <HAL_NVIC_EnableIRQ>:
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000544:	0942      	lsrs	r2, r0, #5
 8000546:	2301      	movs	r3, #1
 8000548:	f000 001f 	and.w	r0, r0, #31
 800054c:	fa03 f000 	lsl.w	r0, r3, r0
 8000550:	4b01      	ldr	r3, [pc, #4]	; (8000558 <HAL_NVIC_EnableIRQ+0x14>)
 8000552:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000556:	4770      	bx	lr
 8000558:	e000e100 	.word	0xe000e100

0800055c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800055c:	3801      	subs	r0, #1
 800055e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000562:	d20a      	bcs.n	800057a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000564:	4b06      	ldr	r3, [pc, #24]	; (8000580 <HAL_SYSTICK_Config+0x24>)
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000566:	4a07      	ldr	r2, [pc, #28]	; (8000584 <HAL_SYSTICK_Config+0x28>)
 8000568:	21f0      	movs	r1, #240	; 0xf0
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800056a:	6058      	str	r0, [r3, #4]
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800056c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000570:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000572:	2207      	movs	r2, #7
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000574:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000576:	601a      	str	r2, [r3, #0]
 8000578:	4770      	bx	lr
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
 800057a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop
 8000580:	e000e010 	.word	0xe000e010
 8000584:	e000ed00 	.word	0xe000ed00

08000588 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000588:	4b04      	ldr	r3, [pc, #16]	; (800059c <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800058a:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800058c:	681a      	ldr	r2, [r3, #0]
 800058e:	bf0c      	ite	eq
 8000590:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000594:	f022 0204 	bicne.w	r2, r2, #4
 8000598:	601a      	str	r2, [r3, #0]
 800059a:	4770      	bx	lr
 800059c:	e000e010 	.word	0xe000e010

080005a0 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80005a0:	4770      	bx	lr

080005a2 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80005a2:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80005a4:	f7ff fffc 	bl	80005a0 <HAL_SYSTICK_Callback>
 80005a8:	bd08      	pop	{r3, pc}

080005aa <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80005aa:	b510      	push	{r4, lr}
  uint32_t tmp = 0;
  
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80005ac:	b300      	cbz	r0, 80005f0 <HAL_DMA_Init+0x46>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  if(hdma->State == HAL_DMA_STATE_RESET)
 80005ae:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 80005b2:	b90b      	cbnz	r3, 80005b8 <HAL_DMA_Init+0xe>
  {  
    /* Allocate lock resource and initialize it */
    hdma->Lock = HAL_UNLOCKED;
 80005b4:	f880 3020 	strb.w	r3, [r0, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80005b8:	6882      	ldr	r2, [r0, #8]
 80005ba:	6841      	ldr	r1, [r0, #4]
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80005bc:	6804      	ldr	r4, [r0, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80005be:	4311      	orrs	r1, r2
 80005c0:	68c2      	ldr	r2, [r0, #12]
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80005c2:	6823      	ldr	r3, [r4, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80005c4:	4311      	orrs	r1, r2
 80005c6:	6902      	ldr	r2, [r0, #16]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80005c8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80005cc:	4311      	orrs	r1, r2
 80005ce:	6942      	ldr	r2, [r0, #20]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80005d0:	f023 0330 	bic.w	r3, r3, #48	; 0x30
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80005d4:	4311      	orrs	r1, r2
 80005d6:	6982      	ldr	r2, [r0, #24]
 80005d8:	4311      	orrs	r1, r2
 80005da:	69c2      	ldr	r2, [r0, #28]
 80005dc:	430a      	orrs	r2, r1
 80005de:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
          hdma->Init.Mode                | hdma->Init.Priority;

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80005e0:	6023      	str	r3, [r4, #0]
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80005e2:	2201      	movs	r2, #1

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80005e4:	2300      	movs	r3, #0
 80005e6:	6343      	str	r3, [r0, #52]	; 0x34

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80005e8:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  
  return HAL_OK;
 80005ec:	4618      	mov	r0, r3
 80005ee:	bd10      	pop	{r4, pc}
  uint32_t tmp = 0;
  
  /* Check the DMA handle allocation */
  if(hdma == NULL)
  {
    return HAL_ERROR;
 80005f0:	2001      	movs	r0, #1

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
  
  return HAL_OK;
}
 80005f2:	bd10      	pop	{r4, pc}

080005f4 <HAL_DMA_IRQHandler>:
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
  /* Transfer Error Interrupt management ***************************************/
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 80005f4:	4b91      	ldr	r3, [pc, #580]	; (800083c <HAL_DMA_IRQHandler+0x248>)
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80005f6:	b570      	push	{r4, r5, r6, lr}
  /* Transfer Error Interrupt management ***************************************/
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 80005f8:	6819      	ldr	r1, [r3, #0]
 80005fa:	4d91      	ldr	r5, [pc, #580]	; (8000840 <HAL_DMA_IRQHandler+0x24c>)
 80005fc:	6803      	ldr	r3, [r0, #0]
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80005fe:	4604      	mov	r4, r0
  /* Transfer Error Interrupt management ***************************************/
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
 8000600:	42ab      	cmp	r3, r5
 8000602:	d013      	beq.n	800062c <HAL_DMA_IRQHandler+0x38>
 8000604:	4a8f      	ldr	r2, [pc, #572]	; (8000844 <HAL_DMA_IRQHandler+0x250>)
 8000606:	4293      	cmp	r3, r2
 8000608:	d012      	beq.n	8000630 <HAL_DMA_IRQHandler+0x3c>
 800060a:	3214      	adds	r2, #20
 800060c:	4293      	cmp	r3, r2
 800060e:	d011      	beq.n	8000634 <HAL_DMA_IRQHandler+0x40>
 8000610:	3214      	adds	r2, #20
 8000612:	4293      	cmp	r3, r2
 8000614:	d011      	beq.n	800063a <HAL_DMA_IRQHandler+0x46>
 8000616:	3214      	adds	r2, #20
 8000618:	4293      	cmp	r3, r2
 800061a:	d011      	beq.n	8000640 <HAL_DMA_IRQHandler+0x4c>
 800061c:	3214      	adds	r2, #20
 800061e:	4293      	cmp	r3, r2
 8000620:	bf0c      	ite	eq
 8000622:	f44f 0200 	moveq.w	r2, #8388608	; 0x800000
 8000626:	f04f 6200 	movne.w	r2, #134217728	; 0x8000000
 800062a:	e00b      	b.n	8000644 <HAL_DMA_IRQHandler+0x50>
 800062c:	2208      	movs	r2, #8
 800062e:	e009      	b.n	8000644 <HAL_DMA_IRQHandler+0x50>
 8000630:	2280      	movs	r2, #128	; 0x80
 8000632:	e007      	b.n	8000644 <HAL_DMA_IRQHandler+0x50>
 8000634:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000638:	e004      	b.n	8000644 <HAL_DMA_IRQHandler+0x50>
 800063a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800063e:	e001      	b.n	8000644 <HAL_DMA_IRQHandler+0x50>
 8000640:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000644:	420a      	tst	r2, r1
 8000646:	d038      	beq.n	80006ba <HAL_DMA_IRQHandler+0xc6>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000648:	681a      	ldr	r2, [r3, #0]
 800064a:	0712      	lsls	r2, r2, #28
 800064c:	d535      	bpl.n	80006ba <HAL_DMA_IRQHandler+0xc6>
    {
      /* Disable the transfer error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
 800064e:	681a      	ldr	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8000650:	42ab      	cmp	r3, r5
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma)) != RESET)
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
    {
      /* Disable the transfer error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE);
 8000652:	f022 0208 	bic.w	r2, r2, #8
 8000656:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8000658:	d013      	beq.n	8000682 <HAL_DMA_IRQHandler+0x8e>
 800065a:	4a7a      	ldr	r2, [pc, #488]	; (8000844 <HAL_DMA_IRQHandler+0x250>)
 800065c:	4293      	cmp	r3, r2
 800065e:	d012      	beq.n	8000686 <HAL_DMA_IRQHandler+0x92>
 8000660:	3214      	adds	r2, #20
 8000662:	4293      	cmp	r3, r2
 8000664:	d011      	beq.n	800068a <HAL_DMA_IRQHandler+0x96>
 8000666:	3214      	adds	r2, #20
 8000668:	4293      	cmp	r3, r2
 800066a:	d011      	beq.n	8000690 <HAL_DMA_IRQHandler+0x9c>
 800066c:	3214      	adds	r2, #20
 800066e:	4293      	cmp	r3, r2
 8000670:	d011      	beq.n	8000696 <HAL_DMA_IRQHandler+0xa2>
 8000672:	3214      	adds	r2, #20
 8000674:	4293      	cmp	r3, r2
 8000676:	bf0c      	ite	eq
 8000678:	f44f 0300 	moveq.w	r3, #8388608	; 0x800000
 800067c:	f04f 6300 	movne.w	r3, #134217728	; 0x8000000
 8000680:	e00b      	b.n	800069a <HAL_DMA_IRQHandler+0xa6>
 8000682:	2308      	movs	r3, #8
 8000684:	e009      	b.n	800069a <HAL_DMA_IRQHandler+0xa6>
 8000686:	2380      	movs	r3, #128	; 0x80
 8000688:	e007      	b.n	800069a <HAL_DMA_IRQHandler+0xa6>
 800068a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800068e:	e004      	b.n	800069a <HAL_DMA_IRQHandler+0xa6>
 8000690:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000694:	e001      	b.n	800069a <HAL_DMA_IRQHandler+0xa6>
 8000696:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800069a:	4a68      	ldr	r2, [pc, #416]	; (800083c <HAL_DMA_IRQHandler+0x248>)
 800069c:	6053      	str	r3, [r2, #4]
      
      /* Update error code */
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_TE);
 800069e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80006a0:	f043 0301 	orr.w	r3, r3, #1
 80006a4:	6363      	str	r3, [r4, #52]	; 0x34
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 80006a6:	2304      	movs	r3, #4
 80006a8:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
      
      /* Process Unlocked */
      __HAL_UNLOCK(hdma); 
 80006ac:	2300      	movs	r3, #0
 80006ae:	f884 3020 	strb.w	r3, [r4, #32]
      
      if (hdma->XferErrorCallback != NULL)
 80006b2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80006b4:	b10b      	cbz	r3, 80006ba <HAL_DMA_IRQHandler+0xc6>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80006b6:	4620      	mov	r0, r4
 80006b8:	4798      	blx	r3
      }
    }
  }

  /* Half Transfer Complete Interrupt management ******************************/
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma)) != RESET)
 80006ba:	4b60      	ldr	r3, [pc, #384]	; (800083c <HAL_DMA_IRQHandler+0x248>)
 80006bc:	6819      	ldr	r1, [r3, #0]
 80006be:	6823      	ldr	r3, [r4, #0]
 80006c0:	42ab      	cmp	r3, r5
 80006c2:	d013      	beq.n	80006ec <HAL_DMA_IRQHandler+0xf8>
 80006c4:	4a5f      	ldr	r2, [pc, #380]	; (8000844 <HAL_DMA_IRQHandler+0x250>)
 80006c6:	4293      	cmp	r3, r2
 80006c8:	d012      	beq.n	80006f0 <HAL_DMA_IRQHandler+0xfc>
 80006ca:	3214      	adds	r2, #20
 80006cc:	4293      	cmp	r3, r2
 80006ce:	d011      	beq.n	80006f4 <HAL_DMA_IRQHandler+0x100>
 80006d0:	3214      	adds	r2, #20
 80006d2:	4293      	cmp	r3, r2
 80006d4:	d011      	beq.n	80006fa <HAL_DMA_IRQHandler+0x106>
 80006d6:	3214      	adds	r2, #20
 80006d8:	4293      	cmp	r3, r2
 80006da:	d011      	beq.n	8000700 <HAL_DMA_IRQHandler+0x10c>
 80006dc:	3214      	adds	r2, #20
 80006de:	4293      	cmp	r3, r2
 80006e0:	bf0c      	ite	eq
 80006e2:	f44f 0280 	moveq.w	r2, #4194304	; 0x400000
 80006e6:	f04f 6280 	movne.w	r2, #67108864	; 0x4000000
 80006ea:	e00b      	b.n	8000704 <HAL_DMA_IRQHandler+0x110>
 80006ec:	2204      	movs	r2, #4
 80006ee:	e009      	b.n	8000704 <HAL_DMA_IRQHandler+0x110>
 80006f0:	2240      	movs	r2, #64	; 0x40
 80006f2:	e007      	b.n	8000704 <HAL_DMA_IRQHandler+0x110>
 80006f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006f8:	e004      	b.n	8000704 <HAL_DMA_IRQHandler+0x110>
 80006fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006fe:	e001      	b.n	8000704 <HAL_DMA_IRQHandler+0x110>
 8000700:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000704:	420a      	tst	r2, r1
 8000706:	d034      	beq.n	8000772 <HAL_DMA_IRQHandler+0x17e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000708:	681a      	ldr	r2, [r3, #0]
 800070a:	0756      	lsls	r6, r2, #29
 800070c:	d531      	bpl.n	8000772 <HAL_DMA_IRQHandler+0x17e>
    { 
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 800070e:	681a      	ldr	r2, [r3, #0]
 8000710:	0690      	lsls	r0, r2, #26
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000712:	bf5e      	ittt	pl
 8000714:	681a      	ldrpl	r2, [r3, #0]
 8000716:	f022 0204 	bicpl.w	r2, r2, #4
 800071a:	601a      	strpl	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800071c:	42ab      	cmp	r3, r5
 800071e:	d013      	beq.n	8000748 <HAL_DMA_IRQHandler+0x154>
 8000720:	4a48      	ldr	r2, [pc, #288]	; (8000844 <HAL_DMA_IRQHandler+0x250>)
 8000722:	4293      	cmp	r3, r2
 8000724:	d012      	beq.n	800074c <HAL_DMA_IRQHandler+0x158>
 8000726:	3214      	adds	r2, #20
 8000728:	4293      	cmp	r3, r2
 800072a:	d011      	beq.n	8000750 <HAL_DMA_IRQHandler+0x15c>
 800072c:	3214      	adds	r2, #20
 800072e:	4293      	cmp	r3, r2
 8000730:	d011      	beq.n	8000756 <HAL_DMA_IRQHandler+0x162>
 8000732:	3214      	adds	r2, #20
 8000734:	4293      	cmp	r3, r2
 8000736:	d011      	beq.n	800075c <HAL_DMA_IRQHandler+0x168>
 8000738:	3214      	adds	r2, #20
 800073a:	4293      	cmp	r3, r2
 800073c:	bf0c      	ite	eq
 800073e:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 8000742:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 8000746:	e00b      	b.n	8000760 <HAL_DMA_IRQHandler+0x16c>
 8000748:	2304      	movs	r3, #4
 800074a:	e009      	b.n	8000760 <HAL_DMA_IRQHandler+0x16c>
 800074c:	2340      	movs	r3, #64	; 0x40
 800074e:	e007      	b.n	8000760 <HAL_DMA_IRQHandler+0x16c>
 8000750:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000754:	e004      	b.n	8000760 <HAL_DMA_IRQHandler+0x16c>
 8000756:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800075a:	e001      	b.n	8000760 <HAL_DMA_IRQHandler+0x16c>
 800075c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000760:	4a36      	ldr	r2, [pc, #216]	; (800083c <HAL_DMA_IRQHandler+0x248>)
 8000762:	6053      	str	r3, [r2, #4]

      /* Change DMA peripheral state */
      hdma->State = HAL_DMA_STATE_READY_HALF;
 8000764:	2311      	movs	r3, #17
 8000766:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21

      if(hdma->XferHalfCpltCallback != NULL)
 800076a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800076c:	b10b      	cbz	r3, 8000772 <HAL_DMA_IRQHandler+0x17e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800076e:	4620      	mov	r0, r4
 8000770:	4798      	blx	r3
      }
    }
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  if(__HAL_DMA_GET_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma)) != RESET)
 8000772:	4b32      	ldr	r3, [pc, #200]	; (800083c <HAL_DMA_IRQHandler+0x248>)
 8000774:	6819      	ldr	r1, [r3, #0]
 8000776:	6823      	ldr	r3, [r4, #0]
 8000778:	42ab      	cmp	r3, r5
 800077a:	d013      	beq.n	80007a4 <HAL_DMA_IRQHandler+0x1b0>
 800077c:	4a31      	ldr	r2, [pc, #196]	; (8000844 <HAL_DMA_IRQHandler+0x250>)
 800077e:	4293      	cmp	r3, r2
 8000780:	d012      	beq.n	80007a8 <HAL_DMA_IRQHandler+0x1b4>
 8000782:	3214      	adds	r2, #20
 8000784:	4293      	cmp	r3, r2
 8000786:	d011      	beq.n	80007ac <HAL_DMA_IRQHandler+0x1b8>
 8000788:	3214      	adds	r2, #20
 800078a:	4293      	cmp	r3, r2
 800078c:	d011      	beq.n	80007b2 <HAL_DMA_IRQHandler+0x1be>
 800078e:	3214      	adds	r2, #20
 8000790:	4293      	cmp	r3, r2
 8000792:	d011      	beq.n	80007b8 <HAL_DMA_IRQHandler+0x1c4>
 8000794:	3214      	adds	r2, #20
 8000796:	4293      	cmp	r3, r2
 8000798:	bf0c      	ite	eq
 800079a:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
 800079e:	f04f 7200 	movne.w	r2, #33554432	; 0x2000000
 80007a2:	e00b      	b.n	80007bc <HAL_DMA_IRQHandler+0x1c8>
 80007a4:	2202      	movs	r2, #2
 80007a6:	e009      	b.n	80007bc <HAL_DMA_IRQHandler+0x1c8>
 80007a8:	2220      	movs	r2, #32
 80007aa:	e007      	b.n	80007bc <HAL_DMA_IRQHandler+0x1c8>
 80007ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007b0:	e004      	b.n	80007bc <HAL_DMA_IRQHandler+0x1c8>
 80007b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80007b6:	e001      	b.n	80007bc <HAL_DMA_IRQHandler+0x1c8>
 80007b8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80007bc:	420a      	tst	r2, r1
 80007be:	d03b      	beq.n	8000838 <HAL_DMA_IRQHandler+0x244>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80007c0:	681a      	ldr	r2, [r3, #0]
 80007c2:	0791      	lsls	r1, r2, #30
 80007c4:	d538      	bpl.n	8000838 <HAL_DMA_IRQHandler+0x244>
    {
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 80007c6:	681a      	ldr	r2, [r3, #0]
 80007c8:	0692      	lsls	r2, r2, #26
      {
        /* Disable the transfer complete interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TC);
 80007ca:	bf5e      	ittt	pl
 80007cc:	681a      	ldrpl	r2, [r3, #0]
 80007ce:	f022 0202 	bicpl.w	r2, r2, #2
 80007d2:	601a      	strpl	r2, [r3, #0]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80007d4:	42ab      	cmp	r3, r5
 80007d6:	d013      	beq.n	8000800 <HAL_DMA_IRQHandler+0x20c>
 80007d8:	4a1a      	ldr	r2, [pc, #104]	; (8000844 <HAL_DMA_IRQHandler+0x250>)
 80007da:	4293      	cmp	r3, r2
 80007dc:	d012      	beq.n	8000804 <HAL_DMA_IRQHandler+0x210>
 80007de:	3214      	adds	r2, #20
 80007e0:	4293      	cmp	r3, r2
 80007e2:	d011      	beq.n	8000808 <HAL_DMA_IRQHandler+0x214>
 80007e4:	3214      	adds	r2, #20
 80007e6:	4293      	cmp	r3, r2
 80007e8:	d011      	beq.n	800080e <HAL_DMA_IRQHandler+0x21a>
 80007ea:	3214      	adds	r2, #20
 80007ec:	4293      	cmp	r3, r2
 80007ee:	d011      	beq.n	8000814 <HAL_DMA_IRQHandler+0x220>
 80007f0:	3214      	adds	r2, #20
 80007f2:	4293      	cmp	r3, r2
 80007f4:	bf0c      	ite	eq
 80007f6:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 80007fa:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 80007fe:	e00b      	b.n	8000818 <HAL_DMA_IRQHandler+0x224>
 8000800:	2302      	movs	r3, #2
 8000802:	e009      	b.n	8000818 <HAL_DMA_IRQHandler+0x224>
 8000804:	2320      	movs	r3, #32
 8000806:	e007      	b.n	8000818 <HAL_DMA_IRQHandler+0x224>
 8000808:	f44f 7300 	mov.w	r3, #512	; 0x200
 800080c:	e004      	b.n	8000818 <HAL_DMA_IRQHandler+0x224>
 800080e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000812:	e001      	b.n	8000818 <HAL_DMA_IRQHandler+0x224>
 8000814:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000818:	4a08      	ldr	r2, [pc, #32]	; (800083c <HAL_DMA_IRQHandler+0x248>)
 800081a:	6053      	str	r3, [r2, #4]
    
      /* Update error code */
      SET_BIT(hdma->ErrorCode, HAL_DMA_ERROR_NONE);
 800081c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800081e:	6363      	str	r3, [r4, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000820:	2301      	movs	r3, #1
 8000822:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    
      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8000826:	2300      	movs	r3, #0
 8000828:	f884 3020 	strb.w	r3, [r4, #32]
    
      if(hdma->XferCpltCallback != NULL)
 800082c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800082e:	b11b      	cbz	r3, 8000838 <HAL_DMA_IRQHandler+0x244>
      {       
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8000830:	4620      	mov	r0, r4
      }
    }
  }
}
 8000832:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      __HAL_UNLOCK(hdma);
    
      if(hdma->XferCpltCallback != NULL)
      {       
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8000836:	4718      	bx	r3
 8000838:	bd70      	pop	{r4, r5, r6, pc}
 800083a:	bf00      	nop
 800083c:	40020000 	.word	0x40020000
 8000840:	40020008 	.word	0x40020008
 8000844:	4002001c 	.word	0x4002001c

08000848 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000848:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00;
  uint32_t iocurrent = 0x00;
  uint32_t temp = 0x00;
  uint32_t config = 0x00;
 800084c:	2400      	movs	r4, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800084e:	4626      	mov	r6, r4
 8000850:	4b62      	ldr	r3, [pc, #392]	; (80009dc <HAL_GPIO_Init+0x194>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000852:	f8df e194 	ldr.w	lr, [pc, #404]	; 80009e8 <HAL_GPIO_Init+0x1a0>
 8000856:	f8df c194 	ldr.w	ip, [pc, #404]	; 80009ec <HAL_GPIO_Init+0x1a4>

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800085a:	2201      	movs	r2, #1
    
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if (iocurrent == ioposition)
 800085c:	680d      	ldr	r5, [r1, #0]

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800085e:	40b2      	lsls	r2, r6
    
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if (iocurrent == ioposition)
 8000860:	ea32 0505 	bics.w	r5, r2, r5
 8000864:	f040 80b3 	bne.w	80009ce <HAL_GPIO_Init+0x186>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000868:	684d      	ldr	r5, [r1, #4]
 800086a:	2d12      	cmp	r5, #18
 800086c:	d028      	beq.n	80008c0 <HAL_GPIO_Init+0x78>
 800086e:	d80e      	bhi.n	800088e <HAL_GPIO_Init+0x46>
 8000870:	2d02      	cmp	r5, #2
 8000872:	d022      	beq.n	80008ba <HAL_GPIO_Init+0x72>
 8000874:	d804      	bhi.n	8000880 <HAL_GPIO_Init+0x38>
 8000876:	b335      	cbz	r5, 80008c6 <HAL_GPIO_Init+0x7e>
 8000878:	2d01      	cmp	r5, #1
 800087a:	d12d      	bne.n	80008d8 <HAL_GPIO_Init+0x90>
      {
        /* If we are configuring the pin in OUTPUT push-pull mode */
        case GPIO_MODE_OUTPUT_PP:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800087c:	68cc      	ldr	r4, [r1, #12]
          break;
 800087e:	e02b      	b.n	80008d8 <HAL_GPIO_Init+0x90>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000880:	2d03      	cmp	r5, #3
 8000882:	d018      	beq.n	80008b6 <HAL_GPIO_Init+0x6e>
 8000884:	2d11      	cmp	r5, #17
 8000886:	d127      	bne.n	80008d8 <HAL_GPIO_Init+0x90>
          
        /* If we are configuring the pin in OUTPUT open-drain mode */
        case GPIO_MODE_OUTPUT_OD:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000888:	68cc      	ldr	r4, [r1, #12]
 800088a:	3404      	adds	r4, #4
          break;
 800088c:	e024      	b.n	80008d8 <HAL_GPIO_Init+0x90>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800088e:	4f54      	ldr	r7, [pc, #336]	; (80009e0 <HAL_GPIO_Init+0x198>)
 8000890:	42bd      	cmp	r5, r7
 8000892:	d018      	beq.n	80008c6 <HAL_GPIO_Init+0x7e>
 8000894:	d806      	bhi.n	80008a4 <HAL_GPIO_Init+0x5c>
 8000896:	f8df 8158 	ldr.w	r8, [pc, #344]	; 80009f0 <HAL_GPIO_Init+0x1a8>
 800089a:	4545      	cmp	r5, r8
 800089c:	d013      	beq.n	80008c6 <HAL_GPIO_Init+0x7e>
 800089e:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 80008a2:	e005      	b.n	80008b0 <HAL_GPIO_Init+0x68>
 80008a4:	4575      	cmp	r5, lr
 80008a6:	d00e      	beq.n	80008c6 <HAL_GPIO_Init+0x7e>
 80008a8:	4565      	cmp	r5, ip
 80008aa:	d00c      	beq.n	80008c6 <HAL_GPIO_Init+0x7e>
 80008ac:	f8df 8144 	ldr.w	r8, [pc, #324]	; 80009f4 <HAL_GPIO_Init+0x1ac>
 80008b0:	4545      	cmp	r5, r8
 80008b2:	d111      	bne.n	80008d8 <HAL_GPIO_Init+0x90>
 80008b4:	e007      	b.n	80008c6 <HAL_GPIO_Init+0x7e>
          }
          break; 
          
        /* If we are configuring the pin in INPUT analog mode */
        case GPIO_MODE_ANALOG:
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80008b6:	2400      	movs	r4, #0
 80008b8:	e00e      	b.n	80008d8 <HAL_GPIO_Init+0x90>
          
        /* If we are configuring the pin in ALTERNATE FUNCTION push-pull mode */
        case GPIO_MODE_AF_PP:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80008ba:	68cc      	ldr	r4, [r1, #12]
 80008bc:	3408      	adds	r4, #8
          break;
 80008be:	e00b      	b.n	80008d8 <HAL_GPIO_Init+0x90>
          
        /* If we are configuring the pin in ALTERNATE FUNCTION open-drain mode */
        case GPIO_MODE_AF_OD:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80008c0:	68cc      	ldr	r4, [r1, #12]
 80008c2:	340c      	adds	r4, #12
          break;
 80008c4:	e008      	b.n	80008d8 <HAL_GPIO_Init+0x90>
        case GPIO_MODE_EVT_RISING:
        case GPIO_MODE_EVT_FALLING:
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if(GPIO_Init->Pull == GPIO_NOPULL)
 80008c6:	688c      	ldr	r4, [r1, #8]
 80008c8:	b12c      	cbz	r4, 80008d6 <HAL_GPIO_Init+0x8e>
          {  
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
          }
          else if(GPIO_Init->Pull == GPIO_PULLUP)
 80008ca:	2c01      	cmp	r4, #1
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
            
            /* Set the corresponding ODR bit */
            GPIOx->BSRR = ioposition;
 80008cc:	bf0c      	ite	eq
 80008ce:	6102      	streq	r2, [r0, #16]
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
            
            /* Reset the corresponding ODR bit */
            GPIOx->BRR = ioposition;
 80008d0:	6142      	strne	r2, [r0, #20]
            /* Set the corresponding ODR bit */
            GPIOx->BSRR = ioposition;
          }
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80008d2:	2408      	movs	r4, #8
 80008d4:	e000      	b.n	80008d8 <HAL_GPIO_Init+0x90>
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if(GPIO_Init->Pull == GPIO_NOPULL)
          {  
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80008d6:	2404      	movs	r4, #4
          break;
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80008d8:	2aff      	cmp	r2, #255	; 0xff
 80008da:	bf97      	itett	ls
 80008dc:	4683      	movls	fp, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
 80008de:	f1a6 0508 	subhi.w	r5, r6, #8
          break;
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80008e2:	f8d0 9000 	ldrls.w	r9, [r0]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
 80008e6:	00b5      	lslls	r5, r6, #2
          break;
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80008e8:	bf84      	itt	hi
 80008ea:	f8d0 9004 	ldrhi.w	r9, [r0, #4]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
 80008ee:	00ad      	lslhi	r5, r5, #2
      
      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 80008f0:	f04f 080f 	mov.w	r8, #15
 80008f4:	fa08 fa05 	lsl.w	sl, r8, r5
 80008f8:	ea29 090a 	bic.w	r9, r9, sl
 80008fc:	fa04 f505 	lsl.w	r5, r4, r5
          break;
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000900:	bf88      	it	hi
 8000902:	f100 0b04 	addhi.w	fp, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
      
      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 8000906:	ea49 0505 	orr.w	r5, r9, r5
 800090a:	f8cb 5000 	str.w	r5, [fp]
      
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800090e:	f8d1 9004 	ldr.w	r9, [r1, #4]
 8000912:	f019 5f80 	tst.w	r9, #268435456	; 0x10000000
 8000916:	d05a      	beq.n	80009ce <HAL_GPIO_Init+0x186>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000918:	4d32      	ldr	r5, [pc, #200]	; (80009e4 <HAL_GPIO_Init+0x19c>)
 800091a:	4f32      	ldr	r7, [pc, #200]	; (80009e4 <HAL_GPIO_Init+0x19c>)
 800091c:	69ad      	ldr	r5, [r5, #24]
        temp = AFIO->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 800091e:	f006 0a03 	and.w	sl, r6, #3
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000922:	f045 0501 	orr.w	r5, r5, #1
 8000926:	61bd      	str	r5, [r7, #24]
 8000928:	69bd      	ldr	r5, [r7, #24]
        temp = AFIO->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 800092a:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800092e:	f005 0501 	and.w	r5, r5, #1
 8000932:	9501      	str	r5, [sp, #4]
 8000934:	9d01      	ldr	r5, [sp, #4]
 8000936:	f026 0503 	bic.w	r5, r6, #3
 800093a:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 800093e:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2];
 8000942:	f8d5 b008 	ldr.w	fp, [r5, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000946:	f5a7 3784 	sub.w	r7, r7, #67584	; 0x10800
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
        temp = AFIO->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 800094a:	fa08 f80a 	lsl.w	r8, r8, sl
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800094e:	42b8      	cmp	r0, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
        temp = AFIO->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000950:	ea2b 0808 	bic.w	r8, fp, r8
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000954:	d010      	beq.n	8000978 <HAL_GPIO_Init+0x130>
 8000956:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 800095a:	42b8      	cmp	r0, r7
 800095c:	d00f      	beq.n	800097e <HAL_GPIO_Init+0x136>
 800095e:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000962:	42b8      	cmp	r0, r7
 8000964:	d00e      	beq.n	8000984 <HAL_GPIO_Init+0x13c>
 8000966:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 800096a:	42b8      	cmp	r0, r7
 800096c:	bf0c      	ite	eq
 800096e:	f04f 0b03 	moveq.w	fp, #3
 8000972:	f04f 0b04 	movne.w	fp, #4
 8000976:	e007      	b.n	8000988 <HAL_GPIO_Init+0x140>
 8000978:	f04f 0b00 	mov.w	fp, #0
 800097c:	e004      	b.n	8000988 <HAL_GPIO_Init+0x140>
 800097e:	f04f 0b01 	mov.w	fp, #1
 8000982:	e001      	b.n	8000988 <HAL_GPIO_Init+0x140>
 8000984:	f04f 0b02 	mov.w	fp, #2
 8000988:	fa0b fa0a 	lsl.w	sl, fp, sl
 800098c:	ea4a 0a08 	orr.w	sl, sl, r8
        AFIO->EXTICR[position >> 2] = temp;
 8000990:	f8c5 a008 	str.w	sl, [r5, #8]
        

        /* Configure the interrupt mask */
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent); 
 8000994:	681d      	ldr	r5, [r3, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        AFIO->EXTICR[position >> 2] = temp;
        

        /* Configure the interrupt mask */
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000996:	f419 3f80 	tst.w	r9, #65536	; 0x10000
        {
          SET_BIT(EXTI->IMR, iocurrent); 
 800099a:	bf14      	ite	ne
 800099c:	4315      	orrne	r5, r2
        } 
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent); 
 800099e:	4395      	biceq	r5, r2
 80009a0:	601d      	str	r5, [r3, #0]
        } 
        
        /* Configure the event mask */
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent); 
 80009a2:	685d      	ldr	r5, [r3, #4]
        {
          CLEAR_BIT(EXTI->IMR, iocurrent); 
        } 
        
        /* Configure the event mask */
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80009a4:	f419 3f00 	tst.w	r9, #131072	; 0x20000
        {
          SET_BIT(EXTI->EMR, iocurrent); 
 80009a8:	bf14      	ite	ne
 80009aa:	4315      	orrne	r5, r2
        } 
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent); 
 80009ac:	4395      	biceq	r5, r2
 80009ae:	605d      	str	r5, [r3, #4]
        }
        
        /* Enable or disable the rising trigger */
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent); 
 80009b0:	689d      	ldr	r5, [r3, #8]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent); 
        }
        
        /* Enable or disable the rising trigger */
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80009b2:	f419 1f80 	tst.w	r9, #1048576	; 0x100000
        {
          SET_BIT(EXTI->RTSR, iocurrent); 
 80009b6:	bf14      	ite	ne
 80009b8:	4315      	orrne	r5, r2
        } 
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
 80009ba:	4395      	biceq	r5, r2
 80009bc:	609d      	str	r5, [r3, #8]
        }
        
        /* Enable or disable the falling trigger */
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent); 
 80009be:	68dd      	ldr	r5, [r3, #12]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
        }
        
        /* Enable or disable the falling trigger */
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80009c0:	f419 1f00 	tst.w	r9, #2097152	; 0x200000
        {
          SET_BIT(EXTI->FTSR, iocurrent); 
 80009c4:	bf14      	ite	ne
 80009c6:	432a      	orrne	r2, r5
        } 
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
 80009c8:	ea25 0202 	biceq.w	r2, r5, r2
 80009cc:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80009ce:	3601      	adds	r6, #1
 80009d0:	2e10      	cmp	r6, #16
 80009d2:	f47f af42 	bne.w	800085a <HAL_GPIO_Init+0x12>
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
        }
      }
    }
  }
}
 80009d6:	b003      	add	sp, #12
 80009d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80009dc:	40010400 	.word	0x40010400
 80009e0:	10210000 	.word	0x10210000
 80009e4:	40021000 	.word	0x40021000
 80009e8:	10310000 	.word	0x10310000
 80009ec:	10320000 	.word	0x10320000
 80009f0:	10110000 	.word	0x10110000
 80009f4:	10220000 	.word	0x10220000

080009f8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80009f8:	b902      	cbnz	r2, 80009fc <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80009fa:	0409      	lsls	r1, r1, #16
 80009fc:	6101      	str	r1, [r0, #16]
 80009fe:	4770      	bx	lr

08000a00 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a00:	6803      	ldr	r3, [r0, #0]
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a02:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a06:	07dc      	lsls	r4, r3, #31
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a08:	4605      	mov	r5, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000a0a:	d403      	bmi.n	8000a14 <HAL_RCC_OscConfig+0x14>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000a0c:	682b      	ldr	r3, [r5, #0]
 8000a0e:	0798      	lsls	r0, r3, #30
 8000a10:	d473      	bmi.n	8000afa <HAL_RCC_OscConfig+0xfa>
 8000a12:	e0f2      	b.n	8000bfa <HAL_RCC_OscConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000a14:	4cb9      	ldr	r4, [pc, #740]	; (8000cfc <HAL_RCC_OscConfig+0x2fc>)
 8000a16:	6863      	ldr	r3, [r4, #4]
 8000a18:	f003 030c 	and.w	r3, r3, #12
 8000a1c:	2b04      	cmp	r3, #4
 8000a1e:	d007      	beq.n	8000a30 <HAL_RCC_OscConfig+0x30>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000a20:	6863      	ldr	r3, [r4, #4]
 8000a22:	f003 030c 	and.w	r3, r3, #12
 8000a26:	2b08      	cmp	r3, #8
 8000a28:	d116      	bne.n	8000a58 <HAL_RCC_OscConfig+0x58>
 8000a2a:	6863      	ldr	r3, [r4, #4]
 8000a2c:	03d9      	lsls	r1, r3, #15
 8000a2e:	d513      	bpl.n	8000a58 <HAL_RCC_OscConfig+0x58>
 8000a30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a34:	fa93 f2a3 	rbit	r2, r3
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000a38:	6822      	ldr	r2, [r4, #0]
 8000a3a:	fa93 f3a3 	rbit	r3, r3
 8000a3e:	fab3 f383 	clz	r3, r3
 8000a42:	f003 031f 	and.w	r3, r3, #31
 8000a46:	fa22 f303 	lsr.w	r3, r2, r3
 8000a4a:	07da      	lsls	r2, r3, #31
 8000a4c:	d5de      	bpl.n	8000a0c <HAL_RCC_OscConfig+0xc>
 8000a4e:	686b      	ldr	r3, [r5, #4]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d1db      	bne.n	8000a0c <HAL_RCC_OscConfig+0xc>
      {
        return HAL_ERROR;
 8000a54:	2001      	movs	r0, #1
 8000a56:	e22d      	b.n	8000eb4 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a58:	686b      	ldr	r3, [r5, #4]
 8000a5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a5e:	d015      	beq.n	8000a8c <HAL_RCC_OscConfig+0x8c>
 8000a60:	b96b      	cbnz	r3, 8000a7e <HAL_RCC_OscConfig+0x7e>
 8000a62:	6823      	ldr	r3, [r4, #0]
 8000a64:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000a68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a6c:	6023      	str	r3, [r4, #0]
 8000a6e:	6823      	ldr	r3, [r4, #0]
 8000a70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a74:	6023      	str	r3, [r4, #0]
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a76:	f7ff fb95 	bl	80001a4 <HAL_GetTick>
 8000a7a:	4607      	mov	r7, r0
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a7c:	e02f      	b.n	8000ade <HAL_RCC_OscConfig+0xde>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a7e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000a82:	6823      	ldr	r3, [r4, #0]
 8000a84:	d106      	bne.n	8000a94 <HAL_RCC_OscConfig+0x94>
 8000a86:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a8a:	6023      	str	r3, [r4, #0]
 8000a8c:	6823      	ldr	r3, [r4, #0]
 8000a8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a92:	e005      	b.n	8000aa0 <HAL_RCC_OscConfig+0xa0>
 8000a94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a98:	6023      	str	r3, [r4, #0]
 8000a9a:	6823      	ldr	r3, [r4, #0]
 8000a9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000aa0:	6023      	str	r3, [r4, #0]

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000aa2:	f7ff fb7f 	bl	80001a4 <HAL_GetTick>
 8000aa6:	4607      	mov	r7, r0
 8000aa8:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000aac:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ab0:	6822      	ldr	r2, [r4, #0]
 8000ab2:	fa96 f3a6 	rbit	r3, r6
 8000ab6:	fab3 f383 	clz	r3, r3
 8000aba:	f003 031f 	and.w	r3, r3, #31
 8000abe:	fa22 f303 	lsr.w	r3, r2, r3
 8000ac2:	07db      	lsls	r3, r3, #31
 8000ac4:	d4a2      	bmi.n	8000a0c <HAL_RCC_OscConfig+0xc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ac6:	f7ff fb6d 	bl	80001a4 <HAL_GetTick>
 8000aca:	1bc0      	subs	r0, r0, r7
 8000acc:	2864      	cmp	r0, #100	; 0x64
 8000ace:	d9ed      	bls.n	8000aac <HAL_RCC_OscConfig+0xac>
          {
            return HAL_TIMEOUT;
 8000ad0:	2003      	movs	r0, #3
 8000ad2:	e1ef      	b.n	8000eb4 <HAL_RCC_OscConfig+0x4b4>
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ad4:	f7ff fb66 	bl	80001a4 <HAL_GetTick>
 8000ad8:	1bc0      	subs	r0, r0, r7
 8000ada:	2864      	cmp	r0, #100	; 0x64
 8000adc:	d8f8      	bhi.n	8000ad0 <HAL_RCC_OscConfig+0xd0>
 8000ade:	fa96 f3a6 	rbit	r3, r6
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ae2:	6822      	ldr	r2, [r4, #0]
 8000ae4:	fa96 f3a6 	rbit	r3, r6
 8000ae8:	fab3 f383 	clz	r3, r3
 8000aec:	f003 031f 	and.w	r3, r3, #31
 8000af0:	fa22 f303 	lsr.w	r3, r2, r3
 8000af4:	07d8      	lsls	r0, r3, #31
 8000af6:	d4ed      	bmi.n	8000ad4 <HAL_RCC_OscConfig+0xd4>
 8000af8:	e788      	b.n	8000a0c <HAL_RCC_OscConfig+0xc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000afa:	4c80      	ldr	r4, [pc, #512]	; (8000cfc <HAL_RCC_OscConfig+0x2fc>)
 8000afc:	6863      	ldr	r3, [r4, #4]
 8000afe:	f013 0f0c 	tst.w	r3, #12
 8000b02:	d007      	beq.n	8000b14 <HAL_RCC_OscConfig+0x114>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000b04:	6863      	ldr	r3, [r4, #4]
 8000b06:	f003 030c 	and.w	r3, r3, #12
 8000b0a:	2b08      	cmp	r3, #8
 8000b0c:	d121      	bne.n	8000b52 <HAL_RCC_OscConfig+0x152>
 8000b0e:	6863      	ldr	r3, [r4, #4]
 8000b10:	03d9      	lsls	r1, r3, #15
 8000b12:	d41e      	bmi.n	8000b52 <HAL_RCC_OscConfig+0x152>
 8000b14:	2302      	movs	r3, #2
 8000b16:	fa93 f2a3 	rbit	r2, r3
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b1a:	6822      	ldr	r2, [r4, #0]
 8000b1c:	fa93 f3a3 	rbit	r3, r3
 8000b20:	fab3 f383 	clz	r3, r3
 8000b24:	f003 031f 	and.w	r3, r3, #31
 8000b28:	fa22 f303 	lsr.w	r3, r2, r3
 8000b2c:	07da      	lsls	r2, r3, #31
 8000b2e:	d502      	bpl.n	8000b36 <HAL_RCC_OscConfig+0x136>
 8000b30:	692b      	ldr	r3, [r5, #16]
 8000b32:	2b01      	cmp	r3, #1
 8000b34:	d18e      	bne.n	8000a54 <HAL_RCC_OscConfig+0x54>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b36:	6823      	ldr	r3, [r4, #0]
 8000b38:	22f8      	movs	r2, #248	; 0xf8
 8000b3a:	fa92 f2a2 	rbit	r2, r2
 8000b3e:	fab2 f282 	clz	r2, r2
 8000b42:	6969      	ldr	r1, [r5, #20]
 8000b44:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000b48:	fa01 f202 	lsl.w	r2, r1, r2
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	6023      	str	r3, [r4, #0]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b50:	e053      	b.n	8000bfa <HAL_RCC_OscConfig+0x1fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000b52:	692a      	ldr	r2, [r5, #16]
 8000b54:	2301      	movs	r3, #1
 8000b56:	b37a      	cbz	r2, 8000bb8 <HAL_RCC_OscConfig+0x1b8>
 8000b58:	fa93 f2a3 	rbit	r2, r3
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000b5c:	fab2 f282 	clz	r2, r2
 8000b60:	0092      	lsls	r2, r2, #2
 8000b62:	f102 4284 	add.w	r2, r2, #1107296256	; 0x42000000
 8000b66:	f502 0284 	add.w	r2, r2, #4325376	; 0x420000
 8000b6a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b6c:	f7ff fb1a 	bl	80001a4 <HAL_GetTick>
 8000b70:	4607      	mov	r7, r0
 8000b72:	2602      	movs	r6, #2
 8000b74:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b78:	4860      	ldr	r0, [pc, #384]	; (8000cfc <HAL_RCC_OscConfig+0x2fc>)
 8000b7a:	6822      	ldr	r2, [r4, #0]
 8000b7c:	fa96 f3a6 	rbit	r3, r6
 8000b80:	fab3 f383 	clz	r3, r3
 8000b84:	f003 031f 	and.w	r3, r3, #31
 8000b88:	fa22 f303 	lsr.w	r3, r2, r3
 8000b8c:	07db      	lsls	r3, r3, #31
 8000b8e:	d405      	bmi.n	8000b9c <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000b90:	f7ff fb08 	bl	80001a4 <HAL_GetTick>
 8000b94:	1bc0      	subs	r0, r0, r7
 8000b96:	2802      	cmp	r0, #2
 8000b98:	d9ec      	bls.n	8000b74 <HAL_RCC_OscConfig+0x174>
 8000b9a:	e799      	b.n	8000ad0 <HAL_RCC_OscConfig+0xd0>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b9c:	6803      	ldr	r3, [r0, #0]
 8000b9e:	22f8      	movs	r2, #248	; 0xf8
 8000ba0:	fa92 f2a2 	rbit	r2, r2
 8000ba4:	fab2 f282 	clz	r2, r2
 8000ba8:	6969      	ldr	r1, [r5, #20]
 8000baa:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000bae:	fa01 f202 	lsl.w	r2, r1, r2
 8000bb2:	4313      	orrs	r3, r2
 8000bb4:	6003      	str	r3, [r0, #0]
 8000bb6:	e020      	b.n	8000bfa <HAL_RCC_OscConfig+0x1fa>
 8000bb8:	fa93 f3a3 	rbit	r3, r3
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000bbc:	fab3 f383 	clz	r3, r3
 8000bc0:	009b      	lsls	r3, r3, #2
 8000bc2:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8000bc6:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8000bca:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bcc:	f7ff faea 	bl	80001a4 <HAL_GetTick>
 8000bd0:	4607      	mov	r7, r0
 8000bd2:	2602      	movs	r6, #2
 8000bd4:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000bd8:	6822      	ldr	r2, [r4, #0]
 8000bda:	fa96 f3a6 	rbit	r3, r6
 8000bde:	fab3 f383 	clz	r3, r3
 8000be2:	f003 031f 	and.w	r3, r3, #31
 8000be6:	fa22 f303 	lsr.w	r3, r2, r3
 8000bea:	07d9      	lsls	r1, r3, #31
 8000bec:	d505      	bpl.n	8000bfa <HAL_RCC_OscConfig+0x1fa>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000bee:	f7ff fad9 	bl	80001a4 <HAL_GetTick>
 8000bf2:	1bc0      	subs	r0, r0, r7
 8000bf4:	2802      	cmp	r0, #2
 8000bf6:	d9ed      	bls.n	8000bd4 <HAL_RCC_OscConfig+0x1d4>
 8000bf8:	e76a      	b.n	8000ad0 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000bfa:	682b      	ldr	r3, [r5, #0]
 8000bfc:	071a      	lsls	r2, r3, #28
 8000bfe:	d546      	bpl.n	8000c8e <HAL_RCC_OscConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000c00:	69aa      	ldr	r2, [r5, #24]
 8000c02:	4c3e      	ldr	r4, [pc, #248]	; (8000cfc <HAL_RCC_OscConfig+0x2fc>)
 8000c04:	2301      	movs	r3, #1
 8000c06:	493e      	ldr	r1, [pc, #248]	; (8000d00 <HAL_RCC_OscConfig+0x300>)
 8000c08:	b312      	cbz	r2, 8000c50 <HAL_RCC_OscConfig+0x250>
 8000c0a:	fa93 f2a3 	rbit	r2, r3
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000c0e:	fab2 f282 	clz	r2, r2
 8000c12:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c16:	f7ff fac5 	bl	80001a4 <HAL_GetTick>
 8000c1a:	4607      	mov	r7, r0
 8000c1c:	2602      	movs	r6, #2
 8000c1e:	fa96 f3a6 	rbit	r3, r6
 8000c22:	fa96 f3a6 	rbit	r3, r6
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c26:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000c28:	fa96 f3a6 	rbit	r3, r6
 8000c2c:	fab3 f383 	clz	r3, r3
 8000c30:	f003 031f 	and.w	r3, r3, #31
 8000c34:	fa22 f303 	lsr.w	r3, r2, r3
 8000c38:	07db      	lsls	r3, r3, #31
 8000c3a:	d405      	bmi.n	8000c48 <HAL_RCC_OscConfig+0x248>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000c3c:	f7ff fab2 	bl	80001a4 <HAL_GetTick>
 8000c40:	1bc0      	subs	r0, r0, r7
 8000c42:	2802      	cmp	r0, #2
 8000c44:	d9eb      	bls.n	8000c1e <HAL_RCC_OscConfig+0x21e>
 8000c46:	e743      	b.n	8000ad0 <HAL_RCC_OscConfig+0xd0>
          return HAL_TIMEOUT;
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      HAL_Delay(1);
 8000c48:	2001      	movs	r0, #1
 8000c4a:	f7ff fab1 	bl	80001b0 <HAL_Delay>
 8000c4e:	e01e      	b.n	8000c8e <HAL_RCC_OscConfig+0x28e>
 8000c50:	fa93 f3a3 	rbit	r3, r3
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000c54:	fab3 f383 	clz	r3, r3
 8000c58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c5c:	f7ff faa2 	bl	80001a4 <HAL_GetTick>
 8000c60:	4607      	mov	r7, r0
 8000c62:	2602      	movs	r6, #2
 8000c64:	fa96 f3a6 	rbit	r3, r6
 8000c68:	fa96 f3a6 	rbit	r3, r6
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c6c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000c6e:	fa96 f3a6 	rbit	r3, r6
 8000c72:	fab3 f383 	clz	r3, r3
 8000c76:	f003 031f 	and.w	r3, r3, #31
 8000c7a:	fa22 f303 	lsr.w	r3, r2, r3
 8000c7e:	07d8      	lsls	r0, r3, #31
 8000c80:	d505      	bpl.n	8000c8e <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000c82:	f7ff fa8f 	bl	80001a4 <HAL_GetTick>
 8000c86:	1bc0      	subs	r0, r0, r7
 8000c88:	2802      	cmp	r0, #2
 8000c8a:	d9eb      	bls.n	8000c64 <HAL_RCC_OscConfig+0x264>
 8000c8c:	e720      	b.n	8000ad0 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000c8e:	682b      	ldr	r3, [r5, #0]
 8000c90:	0759      	lsls	r1, r3, #29
 8000c92:	d404      	bmi.n	8000c9e <HAL_RCC_OscConfig+0x29e>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000c94:	69ea      	ldr	r2, [r5, #28]
 8000c96:	2a00      	cmp	r2, #0
 8000c98:	f040 8081 	bne.w	8000d9e <HAL_RCC_OscConfig+0x39e>
 8000c9c:	e0d8      	b.n	8000e50 <HAL_RCC_OscConfig+0x450>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8000c9e:	4c17      	ldr	r4, [pc, #92]	; (8000cfc <HAL_RCC_OscConfig+0x2fc>)
    
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ca0:	4e18      	ldr	r6, [pc, #96]	; (8000d04 <HAL_RCC_OscConfig+0x304>)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ca2:	69e3      	ldr	r3, [r4, #28]
 8000ca4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ca8:	61e3      	str	r3, [r4, #28]
 8000caa:	69e3      	ldr	r3, [r4, #28]
 8000cac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cb0:	9301      	str	r3, [sp, #4]
 8000cb2:	9b01      	ldr	r3, [sp, #4]
    
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000cb4:	6833      	ldr	r3, [r6, #0]
 8000cb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cba:	6033      	str	r3, [r6, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000cbc:	f7ff fa72 	bl	80001a4 <HAL_GetTick>
 8000cc0:	4607      	mov	r7, r0

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8000cc2:	6833      	ldr	r3, [r6, #0]
 8000cc4:	05da      	lsls	r2, r3, #23
 8000cc6:	d405      	bmi.n	8000cd4 <HAL_RCC_OscConfig+0x2d4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000cc8:	f7ff fa6c 	bl	80001a4 <HAL_GetTick>
 8000ccc:	1bc0      	subs	r0, r0, r7
 8000cce:	2864      	cmp	r0, #100	; 0x64
 8000cd0:	d9f7      	bls.n	8000cc2 <HAL_RCC_OscConfig+0x2c2>
 8000cd2:	e6fd      	b.n	8000ad0 <HAL_RCC_OscConfig+0xd0>
          return HAL_TIMEOUT;
        }
      }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000cd4:	68eb      	ldr	r3, [r5, #12]
 8000cd6:	2b01      	cmp	r3, #1
 8000cd8:	d01c      	beq.n	8000d14 <HAL_RCC_OscConfig+0x314>
 8000cda:	b9ab      	cbnz	r3, 8000d08 <HAL_RCC_OscConfig+0x308>
 8000cdc:	6a23      	ldr	r3, [r4, #32]
 8000cde:	2602      	movs	r6, #2
 8000ce0:	f023 0301 	bic.w	r3, r3, #1
 8000ce4:	6223      	str	r3, [r4, #32]
 8000ce6:	6a23      	ldr	r3, [r4, #32]
 8000ce8:	4637      	mov	r7, r6
 8000cea:	f023 0304 	bic.w	r3, r3, #4
 8000cee:	6223      	str	r3, [r4, #32]
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000cf0:	f7ff fa58 	bl	80001a4 <HAL_GetTick>
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000cf4:	f241 3988 	movw	r9, #5000	; 0x1388
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000cf8:	4680      	mov	r8, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000cfa:	e048      	b.n	8000d8e <HAL_RCC_OscConfig+0x38e>
 8000cfc:	40021000 	.word	0x40021000
 8000d00:	42420480 	.word	0x42420480
 8000d04:	40007000 	.word	0x40007000
          return HAL_TIMEOUT;
        }
      }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d08:	2b05      	cmp	r3, #5
 8000d0a:	6a23      	ldr	r3, [r4, #32]
 8000d0c:	d106      	bne.n	8000d1c <HAL_RCC_OscConfig+0x31c>
 8000d0e:	f043 0304 	orr.w	r3, r3, #4
 8000d12:	6223      	str	r3, [r4, #32]
 8000d14:	6a23      	ldr	r3, [r4, #32]
 8000d16:	f043 0301 	orr.w	r3, r3, #1
 8000d1a:	e005      	b.n	8000d28 <HAL_RCC_OscConfig+0x328>
 8000d1c:	f023 0301 	bic.w	r3, r3, #1
 8000d20:	6223      	str	r3, [r4, #32]
 8000d22:	6a23      	ldr	r3, [r4, #32]
 8000d24:	f023 0304 	bic.w	r3, r3, #4
 8000d28:	6223      	str	r3, [r4, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d2a:	f7ff fa3b 	bl	80001a4 <HAL_GetTick>
 8000d2e:	2602      	movs	r6, #2
 8000d30:	4681      	mov	r9, r0
 8000d32:	46b0      	mov	r8, r6
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d34:	f241 3788 	movw	r7, #5000	; 0x1388
 8000d38:	fa96 f3a6 	rbit	r3, r6
 8000d3c:	fa96 f3a6 	rbit	r3, r6
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d40:	b10b      	cbz	r3, 8000d46 <HAL_RCC_OscConfig+0x346>
 8000d42:	6a22      	ldr	r2, [r4, #32]
 8000d44:	e000      	b.n	8000d48 <HAL_RCC_OscConfig+0x348>
 8000d46:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000d48:	fa98 f3a8 	rbit	r3, r8
 8000d4c:	fab3 f383 	clz	r3, r3
 8000d50:	f003 031f 	and.w	r3, r3, #31
 8000d54:	fa22 f303 	lsr.w	r3, r2, r3
 8000d58:	07db      	lsls	r3, r3, #31
 8000d5a:	d49b      	bmi.n	8000c94 <HAL_RCC_OscConfig+0x294>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d5c:	f7ff fa22 	bl	80001a4 <HAL_GetTick>
 8000d60:	ebc9 0000 	rsb	r0, r9, r0
 8000d64:	42b8      	cmp	r0, r7
 8000d66:	d9e7      	bls.n	8000d38 <HAL_RCC_OscConfig+0x338>
 8000d68:	e6b2      	b.n	8000ad0 <HAL_RCC_OscConfig+0xd0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000d6a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000d6c:	fa97 f3a7 	rbit	r3, r7
 8000d70:	fab3 f383 	clz	r3, r3
 8000d74:	f003 031f 	and.w	r3, r3, #31
 8000d78:	fa22 f303 	lsr.w	r3, r2, r3
 8000d7c:	07d8      	lsls	r0, r3, #31
 8000d7e:	d589      	bpl.n	8000c94 <HAL_RCC_OscConfig+0x294>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d80:	f7ff fa10 	bl	80001a4 <HAL_GetTick>
 8000d84:	ebc8 0000 	rsb	r0, r8, r0
 8000d88:	4548      	cmp	r0, r9
 8000d8a:	f63f aea1 	bhi.w	8000ad0 <HAL_RCC_OscConfig+0xd0>
 8000d8e:	fa96 f3a6 	rbit	r3, r6
 8000d92:	fa96 f3a6 	rbit	r3, r6
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d0e7      	beq.n	8000d6a <HAL_RCC_OscConfig+0x36a>
 8000d9a:	6a22      	ldr	r2, [r4, #32]
 8000d9c:	e7e6      	b.n	8000d6c <HAL_RCC_OscConfig+0x36c>
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000d9e:	4c47      	ldr	r4, [pc, #284]	; (8000ebc <HAL_RCC_OscConfig+0x4bc>)
 8000da0:	6863      	ldr	r3, [r4, #4]
 8000da2:	f003 030c 	and.w	r3, r3, #12
 8000da6:	2b08      	cmp	r3, #8
 8000da8:	f43f ae54 	beq.w	8000a54 <HAL_RCC_OscConfig+0x54>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000dac:	2a02      	cmp	r2, #2
 8000dae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000db2:	d15c      	bne.n	8000e6e <HAL_RCC_OscConfig+0x46e>
 8000db4:	fa93 f3a3 	rbit	r3, r3
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000db8:	fab3 f383 	clz	r3, r3
 8000dbc:	009b      	lsls	r3, r3, #2
 8000dbe:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8000dc2:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dca:	f7ff f9eb 	bl	80001a4 <HAL_GetTick>
 8000dce:	4680      	mov	r8, r0
 8000dd0:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 8000dd4:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000dd8:	4f38      	ldr	r7, [pc, #224]	; (8000ebc <HAL_RCC_OscConfig+0x4bc>)
 8000dda:	6822      	ldr	r2, [r4, #0]
 8000ddc:	fa96 f3a6 	rbit	r3, r6
 8000de0:	fab3 f383 	clz	r3, r3
 8000de4:	f003 031f 	and.w	r3, r3, #31
 8000de8:	fa22 f303 	lsr.w	r3, r2, r3
 8000dec:	07d9      	lsls	r1, r3, #31
 8000dee:	d431      	bmi.n	8000e54 <HAL_RCC_OscConfig+0x454>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000df0:	6a2e      	ldr	r6, [r5, #32]
 8000df2:	f5b6 3f80 	cmp.w	r6, #65536	; 0x10000
 8000df6:	d105      	bne.n	8000e04 <HAL_RCC_OscConfig+0x404>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000df8:	6879      	ldr	r1, [r7, #4]
 8000dfa:	f421 3000 	bic.w	r0, r1, #131072	; 0x20000
 8000dfe:	68a9      	ldr	r1, [r5, #8]
 8000e00:	4301      	orrs	r1, r0
 8000e02:	6079      	str	r1, [r7, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000e04:	6863      	ldr	r3, [r4, #4]
 8000e06:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8000e08:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8000e0c:	4332      	orrs	r2, r6
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	6063      	str	r3, [r4, #4]
 8000e12:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000e16:	fa93 f3a3 	rbit	r3, r3
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000e1a:	fab3 f383 	clz	r3, r3
 8000e1e:	009b      	lsls	r3, r3, #2
 8000e20:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8000e24:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8000e28:	2201      	movs	r2, #1
 8000e2a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e2c:	f7ff f9ba 	bl	80001a4 <HAL_GetTick>
 8000e30:	4606      	mov	r6, r0
 8000e32:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8000e36:	fa95 f3a5 	rbit	r3, r5
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000e3a:	6822      	ldr	r2, [r4, #0]
 8000e3c:	fa95 f3a5 	rbit	r3, r5
 8000e40:	fab3 f383 	clz	r3, r3
 8000e44:	f003 031f 	and.w	r3, r3, #31
 8000e48:	fa22 f303 	lsr.w	r3, r2, r3
 8000e4c:	07da      	lsls	r2, r3, #31
 8000e4e:	d508      	bpl.n	8000e62 <HAL_RCC_OscConfig+0x462>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000e50:	2000      	movs	r0, #0
 8000e52:	e02f      	b.n	8000eb4 <HAL_RCC_OscConfig+0x4b4>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e54:	f7ff f9a6 	bl	80001a4 <HAL_GetTick>
 8000e58:	ebc8 0000 	rsb	r0, r8, r0
 8000e5c:	2802      	cmp	r0, #2
 8000e5e:	d9b9      	bls.n	8000dd4 <HAL_RCC_OscConfig+0x3d4>
 8000e60:	e636      	b.n	8000ad0 <HAL_RCC_OscConfig+0xd0>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e62:	f7ff f99f 	bl	80001a4 <HAL_GetTick>
 8000e66:	1b80      	subs	r0, r0, r6
 8000e68:	2802      	cmp	r0, #2
 8000e6a:	d9e4      	bls.n	8000e36 <HAL_RCC_OscConfig+0x436>
 8000e6c:	e630      	b.n	8000ad0 <HAL_RCC_OscConfig+0xd0>
 8000e6e:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000e72:	fab3 f383 	clz	r3, r3
 8000e76:	009b      	lsls	r3, r3, #2
 8000e78:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8000e7c:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e84:	f7ff f98e 	bl	80001a4 <HAL_GetTick>
 8000e88:	4606      	mov	r6, r0
 8000e8a:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8000e8e:	fa95 f3a5 	rbit	r3, r5
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e92:	6822      	ldr	r2, [r4, #0]
 8000e94:	fa95 f3a5 	rbit	r3, r5
 8000e98:	fab3 f383 	clz	r3, r3
 8000e9c:	f003 031f 	and.w	r3, r3, #31
 8000ea0:	fa22 f303 	lsr.w	r3, r2, r3
 8000ea4:	07db      	lsls	r3, r3, #31
 8000ea6:	d5d3      	bpl.n	8000e50 <HAL_RCC_OscConfig+0x450>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ea8:	f7ff f97c 	bl	80001a4 <HAL_GetTick>
 8000eac:	1b80      	subs	r0, r0, r6
 8000eae:	2802      	cmp	r0, #2
 8000eb0:	d9ed      	bls.n	8000e8e <HAL_RCC_OscConfig+0x48e>
 8000eb2:	e60d      	b.n	8000ad0 <HAL_RCC_OscConfig+0xd0>
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 8000eb4:	b003      	add	sp, #12
 8000eb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000eba:	bf00      	nop
 8000ebc:	40021000 	.word	0x40021000

08000ec0 <HAL_RCC_GetSysClockFreq>:
{
#if   defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[12] = {0, 0, 4,  5,  6,  7,  8,  9, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000ec0:	4b1f      	ldr	r3, [pc, #124]	; (8000f40 <HAL_RCC_GetSysClockFreq+0x80>)
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000ec2:	b570      	push	{r4, r5, r6, lr}
#if   defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[12] = {0, 0, 4,  5,  6,  7,  8,  9, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000ec4:	f103 0510 	add.w	r5, r3, #16
 8000ec8:	462e      	mov	r6, r5
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000eca:	b086      	sub	sp, #24
#if   defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[12] = {0, 0, 4,  5,  6,  7,  8,  9, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000ecc:	ac02      	add	r4, sp, #8
 8000ece:	4622      	mov	r2, r4
 8000ed0:	6818      	ldr	r0, [r3, #0]
 8000ed2:	6859      	ldr	r1, [r3, #4]
 8000ed4:	3308      	adds	r3, #8
 8000ed6:	c203      	stmia	r2!, {r0, r1}
 8000ed8:	42ab      	cmp	r3, r5
 8000eda:	4614      	mov	r4, r2
 8000edc:	d1f7      	bne.n	8000ece <HAL_RCC_GetSysClockFreq+0xe>
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = { 1, 2};
 8000ede:	8833      	ldrh	r3, [r6, #0]
  uint32_t sysclockfreq = 0;
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0, pll2mul = 0;
#endif /*RCC_CFGR2_PREDIV1SRC*/
  
  tmpreg = RCC->CFGR;
 8000ee0:	4c18      	ldr	r4, [pc, #96]	; (8000f44 <HAL_RCC_GetSysClockFreq+0x84>)
#else
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = { 1, 2};
 8000ee2:	f8ad 3004 	strh.w	r3, [sp, #4]
  uint32_t sysclockfreq = 0;
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0, pll2mul = 0;
#endif /*RCC_CFGR2_PREDIV1SRC*/
  
  tmpreg = RCC->CFGR;
 8000ee6:	6860      	ldr	r0, [r4, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000ee8:	f000 030c 	and.w	r3, r0, #12
 8000eec:	2b08      	cmp	r3, #8
 8000eee:	d124      	bne.n	8000f3a <HAL_RCC_GetSysClockFreq+0x7a>
 8000ef0:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8000ef4:	fa93 f3a3 	rbit	r3, r3
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> POSITION_VAL(RCC_CFGR_PLLMULL)];
 8000ef8:	fab3 f383 	clz	r3, r3
 8000efc:	f400 1270 	and.w	r2, r0, #3932160	; 0x3c0000
 8000f00:	fa22 f303 	lsr.w	r3, r2, r3
 8000f04:	aa06      	add	r2, sp, #24
 8000f06:	4413      	add	r3, r2
 8000f08:	f813 1c10 	ldrb.w	r1, [r3, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000f0c:	03c3      	lsls	r3, r0, #15
 8000f0e:	d511      	bpl.n	8000f34 <HAL_RCC_GetSysClockFreq+0x74>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> POSITION_VAL(RCC_CFGR2_PREDIV1)];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> POSITION_VAL(RCC_CFGR_PLLXTPRE)];
 8000f10:	6862      	ldr	r2, [r4, #4]
 8000f12:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f16:	fa93 f3a3 	rbit	r3, r3
 8000f1a:	fab3 f083 	clz	r0, r3
 8000f1e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8000f22:	40c3      	lsrs	r3, r0
 8000f24:	aa06      	add	r2, sp, #24
 8000f26:	4413      	add	r3, r2
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
 8000f28:	f813 0c14 	ldrb.w	r0, [r3, #-20]
 8000f2c:	4b06      	ldr	r3, [pc, #24]	; (8000f48 <HAL_RCC_GetSysClockFreq+0x88>)
 8000f2e:	fbb3 f0f0 	udiv	r0, r3, r0
 8000f32:	e000      	b.n	8000f36 <HAL_RCC_GetSysClockFreq+0x76>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000f34:	4805      	ldr	r0, [pc, #20]	; (8000f4c <HAL_RCC_GetSysClockFreq+0x8c>)
 8000f36:	4348      	muls	r0, r1
 8000f38:	e000      	b.n	8000f3c <HAL_RCC_GetSysClockFreq+0x7c>
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000f3a:	4803      	ldr	r0, [pc, #12]	; (8000f48 <HAL_RCC_GetSysClockFreq+0x88>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000f3c:	b006      	add	sp, #24
 8000f3e:	bd70      	pop	{r4, r5, r6, pc}
 8000f40:	08001e8c 	.word	0x08001e8c
 8000f44:	40021000 	.word	0x40021000
 8000f48:	007a1200 	.word	0x007a1200
 8000f4c:	003d0900 	.word	0x003d0900

08000f50 <HAL_RCC_ClockConfig>:
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000f50:	4a54      	ldr	r2, [pc, #336]	; (80010a4 <HAL_RCC_ClockConfig+0x154>)
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000f52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000f56:	6813      	ldr	r3, [r2, #0]
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000f58:	4606      	mov	r6, r0
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000f5a:	f003 0307 	and.w	r3, r3, #7
 8000f5e:	428b      	cmp	r3, r1
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000f60:	460d      	mov	r5, r1
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000f62:	d30a      	bcc.n	8000f7a <HAL_RCC_ClockConfig+0x2a>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f64:	6831      	ldr	r1, [r6, #0]
 8000f66:	078c      	lsls	r4, r1, #30
 8000f68:	d514      	bpl.n	8000f94 <HAL_RCC_ClockConfig+0x44>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000f6a:	484f      	ldr	r0, [pc, #316]	; (80010a8 <HAL_RCC_ClockConfig+0x158>)
 8000f6c:	6843      	ldr	r3, [r0, #4]
 8000f6e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f72:	68b3      	ldr	r3, [r6, #8]
 8000f74:	4313      	orrs	r3, r2
 8000f76:	6043      	str	r3, [r0, #4]
 8000f78:	e00c      	b.n	8000f94 <HAL_RCC_ClockConfig+0x44>
#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f7a:	6813      	ldr	r3, [r2, #0]
 8000f7c:	f023 0307 	bic.w	r3, r3, #7
 8000f80:	430b      	orrs	r3, r1
 8000f82:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000f84:	6813      	ldr	r3, [r2, #0]
 8000f86:	f003 0307 	and.w	r3, r3, #7
 8000f8a:	4299      	cmp	r1, r3
 8000f8c:	d0ea      	beq.n	8000f64 <HAL_RCC_ClockConfig+0x14>
    {
      return HAL_ERROR;
 8000f8e:	2001      	movs	r0, #1
 8000f90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000f94:	07c8      	lsls	r0, r1, #31
 8000f96:	d406      	bmi.n	8000fa6 <HAL_RCC_ClockConfig+0x56>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000f98:	4a42      	ldr	r2, [pc, #264]	; (80010a4 <HAL_RCC_ClockConfig+0x154>)
 8000f9a:	6813      	ldr	r3, [r2, #0]
 8000f9c:	f003 0307 	and.w	r3, r3, #7
 8000fa0:	429d      	cmp	r5, r3
 8000fa2:	d34a      	bcc.n	800103a <HAL_RCC_ClockConfig+0xea>
 8000fa4:	e053      	b.n	800104e <HAL_RCC_ClockConfig+0xfe>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000fa6:	6872      	ldr	r2, [r6, #4]
 8000fa8:	4c3f      	ldr	r4, [pc, #252]	; (80010a8 <HAL_RCC_ClockConfig+0x158>)
 8000faa:	2a01      	cmp	r2, #1
 8000fac:	d102      	bne.n	8000fb4 <HAL_RCC_ClockConfig+0x64>
 8000fae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fb2:	e004      	b.n	8000fbe <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000fb4:	2a02      	cmp	r2, #2
 8000fb6:	bf0c      	ite	eq
 8000fb8:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8000fbc:	2302      	movne	r3, #2
 8000fbe:	fa93 f1a3 	rbit	r1, r3
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fc2:	6821      	ldr	r1, [r4, #0]
 8000fc4:	fa93 f3a3 	rbit	r3, r3
 8000fc8:	fab3 f383 	clz	r3, r3
 8000fcc:	f003 031f 	and.w	r3, r3, #31
 8000fd0:	fa21 f303 	lsr.w	r3, r1, r3
 8000fd4:	07d9      	lsls	r1, r3, #31
 8000fd6:	d5da      	bpl.n	8000f8e <HAL_RCC_ClockConfig+0x3e>
      {
        return HAL_ERROR;
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000fd8:	6863      	ldr	r3, [r4, #4]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000fda:	f241 3888 	movw	r8, #5000	; 0x1388
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
      {
        return HAL_ERROR;
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000fde:	f023 0303 	bic.w	r3, r3, #3
 8000fe2:	431a      	orrs	r2, r3
 8000fe4:	6062      	str	r2, [r4, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000fe6:	f7ff f8dd 	bl	80001a4 <HAL_GetTick>
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000fea:	6873      	ldr	r3, [r6, #4]
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000fec:	4607      	mov	r7, r0
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000fee:	2b01      	cmp	r3, #1
 8000ff0:	d10c      	bne.n	800100c <HAL_RCC_ClockConfig+0xbc>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ff2:	6863      	ldr	r3, [r4, #4]
 8000ff4:	f003 030c 	and.w	r3, r3, #12
 8000ff8:	2b04      	cmp	r3, #4
 8000ffa:	d0cd      	beq.n	8000f98 <HAL_RCC_ClockConfig+0x48>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ffc:	f7ff f8d2 	bl	80001a4 <HAL_GetTick>
 8001000:	1bc0      	subs	r0, r0, r7
 8001002:	4540      	cmp	r0, r8
 8001004:	d9f5      	bls.n	8000ff2 <HAL_RCC_ClockConfig+0xa2>
        {
          return HAL_TIMEOUT;
 8001006:	2003      	movs	r0, #3
 8001008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800100c:	2b02      	cmp	r3, #2
 800100e:	d10f      	bne.n	8001030 <HAL_RCC_ClockConfig+0xe0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001010:	6863      	ldr	r3, [r4, #4]
 8001012:	f003 030c 	and.w	r3, r3, #12
 8001016:	2b08      	cmp	r3, #8
 8001018:	d0be      	beq.n	8000f98 <HAL_RCC_ClockConfig+0x48>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800101a:	f7ff f8c3 	bl	80001a4 <HAL_GetTick>
 800101e:	1bc0      	subs	r0, r0, r7
 8001020:	4540      	cmp	r0, r8
 8001022:	d9f5      	bls.n	8001010 <HAL_RCC_ClockConfig+0xc0>
 8001024:	e7ef      	b.n	8001006 <HAL_RCC_ClockConfig+0xb6>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001026:	f7ff f8bd 	bl	80001a4 <HAL_GetTick>
 800102a:	1bc0      	subs	r0, r0, r7
 800102c:	4540      	cmp	r0, r8
 800102e:	d8ea      	bhi.n	8001006 <HAL_RCC_ClockConfig+0xb6>
        }
      }
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001030:	6863      	ldr	r3, [r4, #4]
 8001032:	f013 0f0c 	tst.w	r3, #12
 8001036:	d1f6      	bne.n	8001026 <HAL_RCC_ClockConfig+0xd6>
 8001038:	e7ae      	b.n	8000f98 <HAL_RCC_ClockConfig+0x48>
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800103a:	6813      	ldr	r3, [r2, #0]
 800103c:	f023 0307 	bic.w	r3, r3, #7
 8001040:	432b      	orrs	r3, r5
 8001042:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001044:	6813      	ldr	r3, [r2, #0]
 8001046:	f003 0307 	and.w	r3, r3, #7
 800104a:	429d      	cmp	r5, r3
 800104c:	d19f      	bne.n	8000f8e <HAL_RCC_ClockConfig+0x3e>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800104e:	6831      	ldr	r1, [r6, #0]
 8001050:	4c15      	ldr	r4, [pc, #84]	; (80010a8 <HAL_RCC_ClockConfig+0x158>)
 8001052:	f011 0f04 	tst.w	r1, #4
 8001056:	d005      	beq.n	8001064 <HAL_RCC_ClockConfig+0x114>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001058:	6863      	ldr	r3, [r4, #4]
 800105a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800105e:	68f3      	ldr	r3, [r6, #12]
 8001060:	4313      	orrs	r3, r2
 8001062:	6063      	str	r3, [r4, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001064:	070b      	lsls	r3, r1, #28
 8001066:	d506      	bpl.n	8001076 <HAL_RCC_ClockConfig+0x126>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001068:	6863      	ldr	r3, [r4, #4]
 800106a:	6932      	ldr	r2, [r6, #16]
 800106c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001070:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001074:	6063      	str	r3, [r4, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001076:	f7ff ff23 	bl	8000ec0 <HAL_RCC_GetSysClockFreq>
 800107a:	6863      	ldr	r3, [r4, #4]
 800107c:	22f0      	movs	r2, #240	; 0xf0
 800107e:	fa92 f2a2 	rbit	r2, r2
 8001082:	fab2 f282 	clz	r2, r2
 8001086:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800108a:	40d3      	lsrs	r3, r2
 800108c:	4a07      	ldr	r2, [pc, #28]	; (80010ac <HAL_RCC_ClockConfig+0x15c>)
 800108e:	5cd3      	ldrb	r3, [r2, r3]
 8001090:	40d8      	lsrs	r0, r3
 8001092:	4b07      	ldr	r3, [pc, #28]	; (80010b0 <HAL_RCC_ClockConfig+0x160>)
 8001094:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001096:	2000      	movs	r0, #0
 8001098:	f7ff f858 	bl	800014c <HAL_InitTick>
  
  return HAL_OK;
 800109c:	2000      	movs	r0, #0
}
 800109e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80010a2:	bf00      	nop
 80010a4:	40022000 	.word	0x40022000
 80010a8:	40021000 	.word	0x40021000
 80010ac:	08001e9e 	.word	0x08001e9e
 80010b0:	20000000 	.word	0x20000000

080010b4 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80010b4:	4b01      	ldr	r3, [pc, #4]	; (80010bc <HAL_RCC_GetHCLKFreq+0x8>)
 80010b6:	6818      	ldr	r0, [r3, #0]
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	20000000 	.word	0x20000000

080010c0 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80010c0:	4b08      	ldr	r3, [pc, #32]	; (80010e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80010c2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	fa92 f2a2 	rbit	r2, r2
 80010cc:	fab2 f282 	clz	r2, r2
 80010d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80010d4:	40d3      	lsrs	r3, r2
 80010d6:	4a04      	ldr	r2, [pc, #16]	; (80010e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80010d8:	5cd3      	ldrb	r3, [r2, r3]
 80010da:	4a04      	ldr	r2, [pc, #16]	; (80010ec <HAL_RCC_GetPCLK1Freq+0x2c>)
 80010dc:	6810      	ldr	r0, [r2, #0]
}    
 80010de:	40d8      	lsrs	r0, r3
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	40021000 	.word	0x40021000
 80010e8:	08001eae 	.word	0x08001eae
 80010ec:	20000000 	.word	0x20000000

080010f0 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80010f0:	4b08      	ldr	r3, [pc, #32]	; (8001114 <HAL_RCC_GetPCLK2Freq+0x24>)
 80010f2:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	fa92 f2a2 	rbit	r2, r2
 80010fc:	fab2 f282 	clz	r2, r2
 8001100:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001104:	40d3      	lsrs	r3, r2
 8001106:	4a04      	ldr	r2, [pc, #16]	; (8001118 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001108:	5cd3      	ldrb	r3, [r2, r3]
 800110a:	4a04      	ldr	r2, [pc, #16]	; (800111c <HAL_RCC_GetPCLK2Freq+0x2c>)
 800110c:	6810      	ldr	r0, [r2, #0]
} 
 800110e:	40d8      	lsrs	r0, r3
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	40021000 	.word	0x40021000
 8001118:	08001eae 	.word	0x08001eae
 800111c:	20000000 	.word	0x20000000

08001120 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001120:	6803      	ldr	r3, [r0, #0]
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001122:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001126:	07dc      	lsls	r4, r3, #31
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001128:	4605      	mov	r5, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800112a:	d564      	bpl.n	80011f6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800112c:	4c3e      	ldr	r4, [pc, #248]	; (8001228 <HAL_RCCEx_PeriphCLKConfig+0x108>)
    
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR, PWR_CR_DBP);
 800112e:	4e3f      	ldr	r6, [pc, #252]	; (800122c <HAL_RCCEx_PeriphCLKConfig+0x10c>)
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001130:	69e3      	ldr	r3, [r4, #28]
 8001132:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001136:	61e3      	str	r3, [r4, #28]
 8001138:	69e3      	ldr	r3, [r4, #28]
 800113a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800113e:	9301      	str	r3, [sp, #4]
 8001140:	9b01      	ldr	r3, [sp, #4]
    
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR, PWR_CR_DBP);
 8001142:	6833      	ldr	r3, [r6, #0]
 8001144:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001148:	6033      	str	r3, [r6, #0]
    
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800114a:	f7ff f82b 	bl	80001a4 <HAL_GetTick>
 800114e:	4607      	mov	r7, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001150:	6833      	ldr	r3, [r6, #0]
 8001152:	05d8      	lsls	r0, r3, #23
 8001154:	d406      	bmi.n	8001164 <HAL_RCCEx_PeriphCLKConfig+0x44>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001156:	f7ff f825 	bl	80001a4 <HAL_GetTick>
 800115a:	1bc0      	subs	r0, r0, r7
 800115c:	2864      	cmp	r0, #100	; 0x64
 800115e:	d9f7      	bls.n	8001150 <HAL_RCCEx_PeriphCLKConfig+0x30>
      {
        return HAL_TIMEOUT;
 8001160:	2003      	movs	r0, #3
 8001162:	e05d      	b.n	8001220 <HAL_RCCEx_PeriphCLKConfig+0x100>
      }      
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001164:	6a23      	ldr	r3, [r4, #32]
 8001166:	4830      	ldr	r0, [pc, #192]	; (8001228 <HAL_RCCEx_PeriphCLKConfig+0x108>)
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001168:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800116c:	d106      	bne.n	800117c <HAL_RCCEx_PeriphCLKConfig+0x5c>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800116e:	6a23      	ldr	r3, [r4, #32]
 8001170:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001174:	686b      	ldr	r3, [r5, #4]
 8001176:	4313      	orrs	r3, r2
 8001178:	6223      	str	r3, [r4, #32]
 800117a:	e03c      	b.n	80011f6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
      }      
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800117c:	686a      	ldr	r2, [r5, #4]
 800117e:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001182:	4293      	cmp	r3, r2
 8001184:	d0f3      	beq.n	800116e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001186:	6a01      	ldr	r1, [r0, #32]
 8001188:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800118c:	f421 7740 	bic.w	r7, r1, #768	; 0x300
 8001190:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001194:	fab2 f282 	clz	r2, r2
 8001198:	4e25      	ldr	r6, [pc, #148]	; (8001230 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 800119a:	f04f 0e01 	mov.w	lr, #1
 800119e:	f846 e022 	str.w	lr, [r6, r2, lsl #2]
 80011a2:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 80011a6:	fab3 f383 	clz	r3, r3
 80011aa:	2200      	movs	r2, #0
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80011ac:	07c9      	lsls	r1, r1, #31
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
      __HAL_RCC_BACKUPRESET_RELEASE();
 80011ae:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80011b2:	6207      	str	r7, [r0, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80011b4:	d5db      	bpl.n	800116e <HAL_RCCEx_PeriphCLKConfig+0x4e>
      {
        /* Get timeout */
        tickstart = HAL_GetTick();
 80011b6:	f7fe fff5 	bl	80001a4 <HAL_GetTick>
 80011ba:	2602      	movs	r6, #2
 80011bc:	4680      	mov	r8, r0
 80011be:	4637      	mov	r7, r6
      
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011c0:	f241 3988 	movw	r9, #5000	; 0x1388
 80011c4:	fa96 f3a6 	rbit	r3, r6
 80011c8:	fa96 f3a6 	rbit	r3, r6
      {
        /* Get timeout */
        tickstart = HAL_GetTick();
      
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011cc:	b10b      	cbz	r3, 80011d2 <HAL_RCCEx_PeriphCLKConfig+0xb2>
 80011ce:	6a22      	ldr	r2, [r4, #32]
 80011d0:	e000      	b.n	80011d4 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 80011d2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80011d4:	fa97 f3a7 	rbit	r3, r7
 80011d8:	fab3 f383 	clz	r3, r3
 80011dc:	f003 031f 	and.w	r3, r3, #31
 80011e0:	fa22 f303 	lsr.w	r3, r2, r3
 80011e4:	07da      	lsls	r2, r3, #31
 80011e6:	d4c2      	bmi.n	800116e <HAL_RCCEx_PeriphCLKConfig+0x4e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011e8:	f7fe ffdc 	bl	80001a4 <HAL_GetTick>
 80011ec:	ebc8 0000 	rsb	r0, r8, r0
 80011f0:	4548      	cmp	r0, r9
 80011f2:	d9e7      	bls.n	80011c4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80011f4:	e7b4      	b.n	8001160 <HAL_RCCEx_PeriphCLKConfig+0x40>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80011f6:	6828      	ldr	r0, [r5, #0]
 80011f8:	0783      	lsls	r3, r0, #30
 80011fa:	d506      	bpl.n	800120a <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80011fc:	490a      	ldr	r1, [pc, #40]	; (8001228 <HAL_RCCEx_PeriphCLKConfig+0x108>)
 80011fe:	684b      	ldr	r3, [r1, #4]
 8001200:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001204:	68ab      	ldr	r3, [r5, #8]
 8001206:	4313      	orrs	r3, r2
 8001208:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800120a:	f010 0010 	ands.w	r0, r0, #16
 800120e:	d007      	beq.n	8001220 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001210:	4905      	ldr	r1, [pc, #20]	; (8001228 <HAL_RCCEx_PeriphCLKConfig+0x108>)
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001212:	2000      	movs	r0, #0
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001214:	684b      	ldr	r3, [r1, #4]
 8001216:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800121a:	68eb      	ldr	r3, [r5, #12]
 800121c:	4313      	orrs	r3, r2
 800121e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
}
 8001220:	b003      	add	sp, #12
 8001222:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001226:	bf00      	nop
 8001228:	40021000 	.word	0x40021000
 800122c:	40007000 	.word	0x40007000
 8001230:	42420400 	.word	0x42420400

08001234 <HAL_TIM_ConfigClockSource>:
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
  uint32_t tmpsmcr = 0;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001234:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
  * @param  sClockSourceConfig : pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
 8001238:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpsmcr = 0;

  /* Process Locked */
  __HAL_LOCK(htim);
 800123a:	2b01      	cmp	r3, #1
 800123c:	f04f 0302 	mov.w	r3, #2
 8001240:	f000 80b0 	beq.w	80013a4 <HAL_TIM_ConfigClockSource+0x170>

  htim->State = HAL_TIM_STATE_BUSY;
 8001244:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001248:	6803      	ldr	r3, [r0, #0]
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
  uint32_t tmpsmcr = 0;

  /* Process Locked */
  __HAL_LOCK(htim);
 800124a:	2201      	movs	r2, #1
 800124c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001250:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001252:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8001256:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 800125a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800125c:	680a      	ldr	r2, [r1, #0]
 800125e:	2a40      	cmp	r2, #64	; 0x40
 8001260:	d077      	beq.n	8001352 <HAL_TIM_ConfigClockSource+0x11e>
 8001262:	d818      	bhi.n	8001296 <HAL_TIM_ConfigClockSource+0x62>
 8001264:	2a10      	cmp	r2, #16
 8001266:	f000 808b 	beq.w	8001380 <HAL_TIM_ConfigClockSource+0x14c>
 800126a:	d808      	bhi.n	800127e <HAL_TIM_ConfigClockSource+0x4a>
 800126c:	2a00      	cmp	r2, #0
 800126e:	f040 8093 	bne.w	8001398 <HAL_TIM_ConfigClockSource+0x164>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8001272:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8001274:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001278:	f042 0207 	orr.w	r2, r2, #7
 800127c:	e08b      	b.n	8001396 <HAL_TIM_ConfigClockSource+0x162>
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;

  switch (sClockSourceConfig->ClockSource)
 800127e:	2a20      	cmp	r2, #32
 8001280:	f000 8084 	beq.w	800138c <HAL_TIM_ConfigClockSource+0x158>
 8001284:	2a30      	cmp	r2, #48	; 0x30
 8001286:	f040 8087 	bne.w	8001398 <HAL_TIM_ConfigClockSource+0x164>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 800128a:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 800128c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001290:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 8001294:	e07f      	b.n	8001396 <HAL_TIM_ConfigClockSource+0x162>
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;

  switch (sClockSourceConfig->ClockSource)
 8001296:	2a70      	cmp	r2, #112	; 0x70
 8001298:	d035      	beq.n	8001306 <HAL_TIM_ConfigClockSource+0xd2>
 800129a:	d81b      	bhi.n	80012d4 <HAL_TIM_ConfigClockSource+0xa0>
 800129c:	2a50      	cmp	r2, #80	; 0x50
 800129e:	d041      	beq.n	8001324 <HAL_TIM_ConfigClockSource+0xf0>
 80012a0:	2a60      	cmp	r2, #96	; 0x60
 80012a2:	d179      	bne.n	8001398 <HAL_TIM_ConfigClockSource+0x164>
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80012a4:	6a1c      	ldr	r4, [r3, #32]

       /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80012a6:	684d      	ldr	r5, [r1, #4]
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80012a8:	f024 0410 	bic.w	r4, r4, #16

       /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80012ac:	68ce      	ldr	r6, [r1, #12]
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80012ae:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80012b0:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 80012b2:	6a1a      	ldr	r2, [r3, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80012b4:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80012b8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4);
 80012bc:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
  tmpccmr1 |= (TIM_ICFilter << 12);
 80012c0:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |= (TIM_ICPolarity << 4);

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80012c4:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 80012c6:	621a      	str	r2, [r3, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 80012c8:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 80012ca:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80012ce:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 80012d2:	e060      	b.n	8001396 <HAL_TIM_ConfigClockSource+0x162>
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;

  switch (sClockSourceConfig->ClockSource)
 80012d4:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80012d8:	d011      	beq.n	80012fe <HAL_TIM_ConfigClockSource+0xca>
 80012da:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80012de:	d15b      	bne.n	8001398 <HAL_TIM_ConfigClockSource+0x164>
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr = 0;

  tmpsmcr = TIMx->SMCR;
 80012e0:	689c      	ldr	r4, [r3, #8]
 80012e2:	688d      	ldr	r5, [r1, #8]
 80012e4:	684a      	ldr	r2, [r1, #4]
 80012e6:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80012ea:	68c9      	ldr	r1, [r1, #12]
 80012ec:	432a      	orrs	r2, r5
 80012ee:	4322      	orrs	r2, r4
 80012f0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80012f4:	609a      	str	r2, [r3, #8]
      TIM_ETR_SetConfig(htim->Instance,
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80012f6:	689a      	ldr	r2, [r3, #8]
 80012f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80012fc:	e04b      	b.n	8001396 <HAL_TIM_ConfigClockSource+0x162>
  {
  case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
      /* Disable slave mode to clock the prescaler directly with the internal clock */
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80012fe:	689a      	ldr	r2, [r3, #8]
 8001300:	f022 0207 	bic.w	r2, r2, #7
 8001304:	e047      	b.n	8001396 <HAL_TIM_ConfigClockSource+0x162>
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr = 0;

  tmpsmcr = TIMx->SMCR;
 8001306:	689c      	ldr	r4, [r3, #8]
 8001308:	688d      	ldr	r5, [r1, #8]
 800130a:	684a      	ldr	r2, [r1, #4]
 800130c:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001310:	68c9      	ldr	r1, [r1, #12]
 8001312:	432a      	orrs	r2, r5
 8001314:	4322      	orrs	r2, r4
 8001316:	ea42 2201 	orr.w	r2, r2, r1, lsl #8

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800131a:	609a      	str	r2, [r3, #8]
      TIM_ETR_SetConfig(htim->Instance,
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Get the TIMx SMCR register value */
      tmpsmcr = htim->Instance->SMCR;
 800131c:	689a      	ldr	r2, [r3, #8]
      /* Reset the SMS and TS Bits */
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800131e:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 8001322:	e038      	b.n	8001396 <HAL_TIM_ConfigClockSource+0x162>
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001324:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001326:	6a1c      	ldr	r4, [r3, #32]

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
      
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001328:	684d      	ldr	r5, [r1, #4]
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800132a:	f024 0401 	bic.w	r4, r4, #1

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
      
      TIM_TI1_ConfigInputStage(htim->Instance,
 800132e:	68ce      	ldr	r6, [r1, #12]
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001330:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001332:	6999      	ldr	r1, [r3, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001334:	f022 020a 	bic.w	r2, r2, #10
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001338:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;
 800133c:	432a      	orrs	r2, r5
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4);
 800133e:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001342:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8001344:	621a      	str	r2, [r3, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8001346:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8001348:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800134c:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 8001350:	e021      	b.n	8001396 <HAL_TIM_ConfigClockSource+0x162>
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001352:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001354:	6a1c      	ldr	r4, [r3, #32]

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001356:	684d      	ldr	r5, [r1, #4]
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001358:	f024 0401 	bic.w	r4, r4, #1

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800135c:	68ce      	ldr	r6, [r1, #12]
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800135e:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001360:	6999      	ldr	r1, [r3, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001362:	f022 020a 	bic.w	r2, r2, #10
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001366:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;
 800136a:	432a      	orrs	r2, r5
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4);
 800136c:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001370:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8001372:	621a      	str	r2, [r3, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8001374:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8001376:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800137a:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 800137e:	e00a      	b.n	8001396 <HAL_TIM_ConfigClockSource+0x162>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8001380:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8001382:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001386:	f042 0217 	orr.w	r2, r2, #23
 800138a:	e004      	b.n	8001396 <HAL_TIM_ConfigClockSource+0x162>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 800138c:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 800138e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001392:	f042 0227 	orr.w	r2, r2, #39	; 0x27
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8001396:	609a      	str	r2, [r3, #8]
    break;

  default:
    break;
  }
  htim->State = HAL_TIM_STATE_READY;
 8001398:	2301      	movs	r3, #1
 800139a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  __HAL_UNLOCK(htim);
 800139e:	2300      	movs	r3, #0
 80013a0:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
  uint32_t tmpsmcr = 0;

  /* Process Locked */
  __HAL_LOCK(htim);
 80013a4:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);

  return HAL_OK;
}
 80013a6:	bd70      	pop	{r4, r5, r6, pc}

080013a8 <HAL_TIM_PeriodElapsedCallback>:
 80013a8:	4770      	bx	lr

080013aa <HAL_TIM_OC_DelayElapsedCallback>:
 80013aa:	4770      	bx	lr

080013ac <HAL_TIM_IC_CaptureCallback>:
 80013ac:	4770      	bx	lr

080013ae <HAL_TIM_PWM_PulseFinishedCallback>:
 80013ae:	4770      	bx	lr

080013b0 <HAL_TIM_TriggerCallback>:
 80013b0:	4770      	bx	lr

080013b2 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80013b2:	6803      	ldr	r3, [r0, #0]
  * @brief  This function handles TIM interrupts requests.
  * @param  htim : TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80013b4:	b510      	push	{r4, lr}
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80013b6:	691a      	ldr	r2, [r3, #16]
  * @brief  This function handles TIM interrupts requests.
  * @param  htim : TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80013b8:	4604      	mov	r4, r0
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80013ba:	0791      	lsls	r1, r2, #30
 80013bc:	d514      	bpl.n	80013e8 <HAL_TIM_IRQHandler+0x36>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80013be:	68da      	ldr	r2, [r3, #12]
 80013c0:	0792      	lsls	r2, r2, #30
 80013c2:	d511      	bpl.n	80013e8 <HAL_TIM_IRQHandler+0x36>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80013c4:	f06f 0202 	mvn.w	r2, #2
 80013c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 80013ca:	699b      	ldr	r3, [r3, #24]
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80013cc:	2201      	movs	r2, #1

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 80013ce:	079b      	lsls	r3, r3, #30
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80013d0:	7602      	strb	r2, [r0, #24]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 80013d2:	d002      	beq.n	80013da <HAL_TIM_IRQHandler+0x28>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 80013d4:	f7ff ffea 	bl	80013ac <HAL_TIM_IC_CaptureCallback>
 80013d8:	e004      	b.n	80013e4 <HAL_TIM_IRQHandler+0x32>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80013da:	f7ff ffe6 	bl	80013aa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80013de:	4620      	mov	r0, r4
 80013e0:	f7ff ffe5 	bl	80013ae <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80013e4:	2300      	movs	r3, #0
 80013e6:	7623      	strb	r3, [r4, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80013e8:	6823      	ldr	r3, [r4, #0]
 80013ea:	691a      	ldr	r2, [r3, #16]
 80013ec:	0750      	lsls	r0, r2, #29
 80013ee:	d516      	bpl.n	800141e <HAL_TIM_IRQHandler+0x6c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80013f0:	68da      	ldr	r2, [r3, #12]
 80013f2:	0751      	lsls	r1, r2, #29
 80013f4:	d513      	bpl.n	800141e <HAL_TIM_IRQHandler+0x6c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80013f6:	f06f 0204 	mvn.w	r2, #4
 80013fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 80013fc:	699b      	ldr	r3, [r3, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80013fe:	2202      	movs	r2, #2
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8001400:	f413 7f40 	tst.w	r3, #768	; 0x300
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001404:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8001406:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8001408:	d002      	beq.n	8001410 <HAL_TIM_IRQHandler+0x5e>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 800140a:	f7ff ffcf 	bl	80013ac <HAL_TIM_IC_CaptureCallback>
 800140e:	e004      	b.n	800141a <HAL_TIM_IRQHandler+0x68>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001410:	f7ff ffcb 	bl	80013aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001414:	4620      	mov	r0, r4
 8001416:	f7ff ffca 	bl	80013ae <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800141a:	2300      	movs	r3, #0
 800141c:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800141e:	6823      	ldr	r3, [r4, #0]
 8001420:	691a      	ldr	r2, [r3, #16]
 8001422:	0712      	lsls	r2, r2, #28
 8001424:	d515      	bpl.n	8001452 <HAL_TIM_IRQHandler+0xa0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001426:	68da      	ldr	r2, [r3, #12]
 8001428:	0710      	lsls	r0, r2, #28
 800142a:	d512      	bpl.n	8001452 <HAL_TIM_IRQHandler+0xa0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800142c:	f06f 0208 	mvn.w	r2, #8
 8001430:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8001432:	69db      	ldr	r3, [r3, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001434:	2204      	movs	r2, #4
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8001436:	0799      	lsls	r1, r3, #30
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001438:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
      {
        HAL_TIM_IC_CaptureCallback(htim);
 800143a:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 800143c:	d002      	beq.n	8001444 <HAL_TIM_IRQHandler+0x92>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 800143e:	f7ff ffb5 	bl	80013ac <HAL_TIM_IC_CaptureCallback>
 8001442:	e004      	b.n	800144e <HAL_TIM_IRQHandler+0x9c>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001444:	f7ff ffb1 	bl	80013aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001448:	4620      	mov	r0, r4
 800144a:	f7ff ffb0 	bl	80013ae <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800144e:	2300      	movs	r3, #0
 8001450:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001452:	6823      	ldr	r3, [r4, #0]
 8001454:	691a      	ldr	r2, [r3, #16]
 8001456:	06d2      	lsls	r2, r2, #27
 8001458:	d516      	bpl.n	8001488 <HAL_TIM_IRQHandler+0xd6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 800145a:	68da      	ldr	r2, [r3, #12]
 800145c:	06d0      	lsls	r0, r2, #27
 800145e:	d513      	bpl.n	8001488 <HAL_TIM_IRQHandler+0xd6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001460:	f06f 0210 	mvn.w	r2, #16
 8001464:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8001466:	69db      	ldr	r3, [r3, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001468:	2208      	movs	r2, #8
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 800146a:	f413 7f40 	tst.w	r3, #768	; 0x300
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800146e:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8001470:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8001472:	d002      	beq.n	800147a <HAL_TIM_IRQHandler+0xc8>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8001474:	f7ff ff9a 	bl	80013ac <HAL_TIM_IC_CaptureCallback>
 8001478:	e004      	b.n	8001484 <HAL_TIM_IRQHandler+0xd2>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800147a:	f7ff ff96 	bl	80013aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800147e:	4620      	mov	r0, r4
 8001480:	f7ff ff95 	bl	80013ae <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001484:	2300      	movs	r3, #0
 8001486:	7623      	strb	r3, [r4, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001488:	6823      	ldr	r3, [r4, #0]
 800148a:	691a      	ldr	r2, [r3, #16]
 800148c:	07d1      	lsls	r1, r2, #31
 800148e:	d508      	bpl.n	80014a2 <HAL_TIM_IRQHandler+0xf0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001490:	68da      	ldr	r2, [r3, #12]
 8001492:	07d2      	lsls	r2, r2, #31
 8001494:	d505      	bpl.n	80014a2 <HAL_TIM_IRQHandler+0xf0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001496:	f06f 0201 	mvn.w	r2, #1
 800149a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800149c:	4620      	mov	r0, r4
 800149e:	f7ff ff83 	bl	80013a8 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80014a2:	6823      	ldr	r3, [r4, #0]
 80014a4:	691a      	ldr	r2, [r3, #16]
 80014a6:	0610      	lsls	r0, r2, #24
 80014a8:	d508      	bpl.n	80014bc <HAL_TIM_IRQHandler+0x10a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80014aa:	68da      	ldr	r2, [r3, #12]
 80014ac:	0611      	lsls	r1, r2, #24
 80014ae:	d505      	bpl.n	80014bc <HAL_TIM_IRQHandler+0x10a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80014b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80014b4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80014b6:	4620      	mov	r0, r4
 80014b8:	f000 f88f 	bl	80015da <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80014bc:	6823      	ldr	r3, [r4, #0]
 80014be:	691a      	ldr	r2, [r3, #16]
 80014c0:	0652      	lsls	r2, r2, #25
 80014c2:	d508      	bpl.n	80014d6 <HAL_TIM_IRQHandler+0x124>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80014c4:	68da      	ldr	r2, [r3, #12]
 80014c6:	0650      	lsls	r0, r2, #25
 80014c8:	d505      	bpl.n	80014d6 <HAL_TIM_IRQHandler+0x124>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80014ca:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80014ce:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80014d0:	4620      	mov	r0, r4
 80014d2:	f7ff ff6d 	bl	80013b0 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80014d6:	6823      	ldr	r3, [r4, #0]
 80014d8:	691a      	ldr	r2, [r3, #16]
 80014da:	0691      	lsls	r1, r2, #26
 80014dc:	d50a      	bpl.n	80014f4 <HAL_TIM_IRQHandler+0x142>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80014de:	68da      	ldr	r2, [r3, #12]
 80014e0:	0692      	lsls	r2, r2, #26
 80014e2:	d507      	bpl.n	80014f4 <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80014e4:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 80014e8:	4620      	mov	r0, r4
    }
  }
}
 80014ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80014ee:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 80014f0:	f000 b872 	b.w	80015d8 <HAL_TIMEx_CommutationCallback>
 80014f4:	bd10      	pop	{r4, pc}
	...

080014f8 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80014f8:	4a18      	ldr	r2, [pc, #96]	; (800155c <TIM_Base_SetConfig+0x64>)
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
 80014fa:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80014fc:	4290      	cmp	r0, r2
 80014fe:	d00a      	beq.n	8001516 <TIM_Base_SetConfig+0x1e>
 8001500:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001504:	d007      	beq.n	8001516 <TIM_Base_SetConfig+0x1e>
 8001506:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800150a:	4290      	cmp	r0, r2
 800150c:	d003      	beq.n	8001516 <TIM_Base_SetConfig+0x1e>
 800150e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001512:	4290      	cmp	r0, r2
 8001514:	d115      	bne.n	8001542 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8001516:	684a      	ldr	r2, [r1, #4]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001518:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800151c:	4313      	orrs	r3, r2
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800151e:	4a0f      	ldr	r2, [pc, #60]	; (800155c <TIM_Base_SetConfig+0x64>)
 8001520:	4290      	cmp	r0, r2
 8001522:	d00a      	beq.n	800153a <TIM_Base_SetConfig+0x42>
 8001524:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001528:	d007      	beq.n	800153a <TIM_Base_SetConfig+0x42>
 800152a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800152e:	4290      	cmp	r0, r2
 8001530:	d003      	beq.n	800153a <TIM_Base_SetConfig+0x42>
 8001532:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001536:	4290      	cmp	r0, r2
 8001538:	d103      	bne.n	8001542 <TIM_Base_SetConfig+0x4a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800153a:	68ca      	ldr	r2, [r1, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800153c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001540:	4313      	orrs	r3, r2
  }

  TIMx->CR1 = tmpcr1;
 8001542:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001544:	688b      	ldr	r3, [r1, #8]
 8001546:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001548:	680b      	ldr	r3, [r1, #0]
 800154a:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800154c:	4b03      	ldr	r3, [pc, #12]	; (800155c <TIM_Base_SetConfig+0x64>)
 800154e:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001550:	bf04      	itt	eq
 8001552:	690b      	ldreq	r3, [r1, #16]
 8001554:	6303      	streq	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8001556:	2301      	movs	r3, #1
 8001558:	6143      	str	r3, [r0, #20]
 800155a:	4770      	bx	lr
 800155c:	40012c00 	.word	0x40012c00

08001560 <HAL_TIM_Base_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim : TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001560:	b510      	push	{r4, lr}
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8001562:	4604      	mov	r4, r0
 8001564:	b1a0      	cbz	r0, 8001590 <HAL_TIM_Base_Init+0x30>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));

  if(htim->State == HAL_TIM_STATE_RESET)
 8001566:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800156a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800156e:	b91b      	cbnz	r3, 8001578 <HAL_TIM_Base_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001570:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001574:	f000 fb7c 	bl	8001c70 <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001578:	2302      	movs	r3, #2
 800157a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800157e:	6820      	ldr	r0, [r4, #0]
 8001580:	1d21      	adds	r1, r4, #4
 8001582:	f7ff ffb9 	bl	80014f8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001586:	2301      	movs	r3, #1
 8001588:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  return HAL_OK;
 800158c:	2000      	movs	r0, #0
 800158e:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 8001590:	2001      	movs	r0, #1

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;

  return HAL_OK;
}
 8001592:	bd10      	pop	{r4, pc}

08001594 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8001594:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
  *         contains the selected trigger output (TRGO) and the Master/Slave
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8001598:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 800159a:	2b01      	cmp	r3, #1
 800159c:	f04f 0302 	mov.w	r3, #2
 80015a0:	d018      	beq.n	80015d4 <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 80015a2:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80015a6:	6803      	ldr	r3, [r0, #0]
 80015a8:	685a      	ldr	r2, [r3, #4]
 80015aa:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80015ae:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80015b0:	685c      	ldr	r4, [r3, #4]
 80015b2:	680a      	ldr	r2, [r1, #0]
 80015b4:	4322      	orrs	r2, r4
 80015b6:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80015b8:	689a      	ldr	r2, [r3, #8]
 80015ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80015be:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80015c0:	689c      	ldr	r4, [r3, #8]
 80015c2:	684a      	ldr	r2, [r1, #4]
 80015c4:	4322      	orrs	r2, r4
 80015c6:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 80015c8:	2301      	movs	r3, #1
 80015ca:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  __HAL_UNLOCK(htim);
 80015ce:	2300      	movs	r3, #0
 80015d0:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 80015d4:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);

  return HAL_OK;
}
 80015d6:	bd10      	pop	{r4, pc}

080015d8 <HAL_TIMEx_CommutationCallback>:
 80015d8:	4770      	bx	lr

080015da <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80015da:	4770      	bx	lr

080015dc <UART_SetConfig>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80015dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80015e0:	6806      	ldr	r6, [r0, #0]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode ;
  MODIFY_REG(huart->Instance->CR1, 
 80015e2:	6881      	ldr	r1, [r0, #8]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80015e4:	6933      	ldr	r3, [r6, #16]
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80015e6:	4681      	mov	r9, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80015e8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80015ec:	68c3      	ldr	r3, [r0, #12]
 80015ee:	2419      	movs	r4, #25
 80015f0:	4313      	orrs	r3, r2
 80015f2:	6133      	str	r3, [r6, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode ;
  MODIFY_REG(huart->Instance->CR1, 
 80015f4:	6903      	ldr	r3, [r0, #16]
 80015f6:	68f2      	ldr	r2, [r6, #12]
 80015f8:	4319      	orrs	r1, r3
 80015fa:	6943      	ldr	r3, [r0, #20]
 80015fc:	4319      	orrs	r1, r3
 80015fe:	f422 53b0 	bic.w	r3, r2, #5632	; 0x1600
 8001602:	f023 030c 	bic.w	r3, r3, #12
 8001606:	430b      	orrs	r3, r1
 8001608:	60f3      	str	r3, [r6, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE), 
             tmpreg);
  
  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800160a:	6973      	ldr	r3, [r6, #20]
 800160c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001610:	6983      	ldr	r3, [r0, #24]
 8001612:	4313      	orrs	r3, r2
 8001614:	6173      	str	r3, [r6, #20]
  
  /*------- UART-associated USART registers setting : BRR Configuration ------*/
  if((huart->Instance == USART1))
 8001616:	4b3d      	ldr	r3, [pc, #244]	; (800170c <UART_SetConfig+0x130>)
 8001618:	429e      	cmp	r6, r3
 800161a:	d131      	bne.n	8001680 <UART_SetConfig+0xa4>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800161c:	f7ff fd68 	bl	80010f0 <HAL_RCC_GetPCLK2Freq>
 8001620:	4360      	muls	r0, r4
 8001622:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8001626:	f04f 0864 	mov.w	r8, #100	; 0x64
 800162a:	00bf      	lsls	r7, r7, #2
 800162c:	fbb0 f7f7 	udiv	r7, r0, r7
 8001630:	f7ff fd5e 	bl	80010f0 <HAL_RCC_GetPCLK2Freq>
 8001634:	4360      	muls	r0, r4
 8001636:	f8d9 5004 	ldr.w	r5, [r9, #4]
 800163a:	fbb7 f7f8 	udiv	r7, r7, r8
 800163e:	00ad      	lsls	r5, r5, #2
 8001640:	fbb0 f5f5 	udiv	r5, r0, r5
 8001644:	f7ff fd54 	bl	80010f0 <HAL_RCC_GetPCLK2Freq>
 8001648:	4360      	muls	r0, r4
 800164a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800164e:	013f      	lsls	r7, r7, #4
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	fbb0 f0f3 	udiv	r0, r0, r3
 8001656:	fbb0 f0f8 	udiv	r0, r0, r8
 800165a:	fb08 5510 	mls	r5, r8, r0, r5
 800165e:	f7ff fd47 	bl	80010f0 <HAL_RCC_GetPCLK2Freq>
 8001662:	012d      	lsls	r5, r5, #4
 8001664:	3532      	adds	r5, #50	; 0x32
 8001666:	fbb5 f5f8 	udiv	r5, r5, r8
 800166a:	4360      	muls	r0, r4
 800166c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8001670:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 8001674:	0089      	lsls	r1, r1, #2
 8001676:	fbb0 faf1 	udiv	sl, r0, r1
 800167a:	f7ff fd39 	bl	80010f0 <HAL_RCC_GetPCLK2Freq>
 800167e:	e030      	b.n	80016e2 <UART_SetConfig+0x106>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001680:	f7ff fd1e 	bl	80010c0 <HAL_RCC_GetPCLK1Freq>
 8001684:	4360      	muls	r0, r4
 8001686:	f8d9 7004 	ldr.w	r7, [r9, #4]
 800168a:	f04f 0864 	mov.w	r8, #100	; 0x64
 800168e:	00bf      	lsls	r7, r7, #2
 8001690:	fbb0 f7f7 	udiv	r7, r0, r7
 8001694:	f7ff fd14 	bl	80010c0 <HAL_RCC_GetPCLK1Freq>
 8001698:	4360      	muls	r0, r4
 800169a:	f8d9 5004 	ldr.w	r5, [r9, #4]
 800169e:	fbb7 f7f8 	udiv	r7, r7, r8
 80016a2:	00ad      	lsls	r5, r5, #2
 80016a4:	fbb0 f5f5 	udiv	r5, r0, r5
 80016a8:	f7ff fd0a 	bl	80010c0 <HAL_RCC_GetPCLK1Freq>
 80016ac:	4360      	muls	r0, r4
 80016ae:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80016b2:	013f      	lsls	r7, r7, #4
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	fbb0 f0f3 	udiv	r0, r0, r3
 80016ba:	fbb0 f0f8 	udiv	r0, r0, r8
 80016be:	fb08 5510 	mls	r5, r8, r0, r5
 80016c2:	f7ff fcfd 	bl	80010c0 <HAL_RCC_GetPCLK1Freq>
 80016c6:	012d      	lsls	r5, r5, #4
 80016c8:	3532      	adds	r5, #50	; 0x32
 80016ca:	fbb5 f5f8 	udiv	r5, r5, r8
 80016ce:	4360      	muls	r0, r4
 80016d0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80016d4:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 80016d8:	0089      	lsls	r1, r1, #2
 80016da:	fbb0 faf1 	udiv	sl, r0, r1
 80016de:	f7ff fcef 	bl	80010c0 <HAL_RCC_GetPCLK1Freq>
 80016e2:	4344      	muls	r4, r0
 80016e4:	f8d9 0004 	ldr.w	r0, [r9, #4]
 80016e8:	0080      	lsls	r0, r0, #2
 80016ea:	fbb4 f0f0 	udiv	r0, r4, r0
 80016ee:	fbb0 f0f8 	udiv	r0, r0, r8
 80016f2:	fb08 a210 	mls	r2, r8, r0, sl
 80016f6:	0112      	lsls	r2, r2, #4
 80016f8:	3232      	adds	r2, #50	; 0x32
 80016fa:	fbb2 f3f8 	udiv	r3, r2, r8
 80016fe:	f003 030f 	and.w	r3, r3, #15
 8001702:	442b      	add	r3, r5
 8001704:	441f      	add	r7, r3
 8001706:	60b7      	str	r7, [r6, #8]
 8001708:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800170c:	40013800 	.word	0x40013800

08001710 <HAL_UART_Init>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001710:	b510      	push	{r4, lr}
  /* Check the UART handle allocation */
  if(huart == NULL)
 8001712:	4604      	mov	r4, r0
 8001714:	b330      	cbz	r0, 8001764 <HAL_UART_Init+0x54>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->State == HAL_UART_STATE_RESET)
 8001716:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800171a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800171e:	b91b      	cbnz	r3, 8001728 <HAL_UART_Init+0x18>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001720:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8001724:	f000 fad8 	bl	8001cd8 <HAL_UART_MspInit>
  }

  huart->State = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001728:	6822      	ldr	r2, [r4, #0]
    
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
  }

  huart->State = HAL_UART_STATE_BUSY;
 800172a:	2302      	movs	r3, #2
 800172c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001730:	68d3      	ldr	r3, [r2, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001732:	4620      	mov	r0, r4
  }

  huart->State = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001734:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001738:	60d3      	str	r3, [r2, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800173a:	f7ff ff4f 	bl	80015dc <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800173e:	6823      	ldr	r3, [r4, #0]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001740:	2000      	movs	r0, #0
  UART_SetConfig(huart);
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001742:	691a      	ldr	r2, [r3, #16]
 8001744:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001748:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800174a:	695a      	ldr	r2, [r3, #20]
 800174c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001750:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001752:	68da      	ldr	r2, [r3, #12]
 8001754:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001758:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
  huart->State= HAL_UART_STATE_READY;
 800175a:	2301      	movs	r3, #1
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800175c:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->State= HAL_UART_STATE_READY;
 800175e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  return HAL_OK;
 8001762:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if(huart == NULL)
  {
    return HAL_ERROR;
 8001764:	2001      	movs	r0, #1
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
  huart->State= HAL_UART_STATE_READY;
  
  return HAL_OK;
}
 8001766:	bd10      	pop	{r4, pc}

08001768 <HAL_UART_TxCpltCallback>:
 8001768:	4770      	bx	lr

0800176a <HAL_UART_RxCpltCallback>:
 800176a:	4770      	bx	lr

0800176c <HAL_UART_ErrorCallback>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800176c:	4770      	bx	lr

0800176e <HAL_UART_IRQHandler>:
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
  uint32_t tmp_flag = 0, tmp_it_source = 0;

  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_PE);
 800176e:	6802      	ldr	r2, [r0, #0]
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001770:	b513      	push	{r0, r1, r4, lr}
  uint32_t tmp_flag = 0, tmp_it_source = 0;

  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_PE);
 8001772:	6811      	ldr	r1, [r2, #0]
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001774:	4604      	mov	r4, r0
  uint32_t tmp_flag = 0, tmp_it_source = 0;

  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_PE);
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE);  
  /* UART parity error interrupt occurred ------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8001776:	07c9      	lsls	r1, r1, #31
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
  uint32_t tmp_flag = 0, tmp_it_source = 0;

  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_PE);
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE);  
 8001778:	68d3      	ldr	r3, [r2, #12]
  /* UART parity error interrupt occurred ------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 800177a:	d505      	bpl.n	8001788 <HAL_UART_IRQHandler+0x1a>
 800177c:	05db      	lsls	r3, r3, #23
  { 
    huart->ErrorCode |= HAL_UART_ERROR_PE;
 800177e:	bf42      	ittt	mi
 8001780:	6bc3      	ldrmi	r3, [r0, #60]	; 0x3c
 8001782:	f043 0301 	orrmi.w	r3, r3, #1
 8001786:	63c3      	strmi	r3, [r0, #60]	; 0x3c
  }
  
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_FE);
 8001788:	6811      	ldr	r1, [r2, #0]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR);
 800178a:	6953      	ldr	r3, [r2, #20]
  /* UART frame error interrupt occurred -------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 800178c:	0788      	lsls	r0, r1, #30
  { 
    huart->ErrorCode |= HAL_UART_ERROR_PE;
  }
  
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_FE);
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR);
 800178e:	f003 0301 	and.w	r3, r3, #1
  /* UART frame error interrupt occurred -------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8001792:	d504      	bpl.n	800179e <HAL_UART_IRQHandler+0x30>
 8001794:	b11b      	cbz	r3, 800179e <HAL_UART_IRQHandler+0x30>
  { 
    huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001796:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001798:	f041 0104 	orr.w	r1, r1, #4
 800179c:	63e1      	str	r1, [r4, #60]	; 0x3c
  }
  
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_NE);
 800179e:	6811      	ldr	r1, [r2, #0]
  /* UART noise error interrupt occurred -------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 80017a0:	0749      	lsls	r1, r1, #29
 80017a2:	d504      	bpl.n	80017ae <HAL_UART_IRQHandler+0x40>
 80017a4:	b11b      	cbz	r3, 80017ae <HAL_UART_IRQHandler+0x40>
  { 
    huart->ErrorCode |= HAL_UART_ERROR_NE;
 80017a6:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80017a8:	f041 0102 	orr.w	r1, r1, #2
 80017ac:	63e1      	str	r1, [r4, #60]	; 0x3c
  }
  
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_ORE);
 80017ae:	6811      	ldr	r1, [r2, #0]
  /* UART Over-Run interrupt occurred ----------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 80017b0:	0708      	lsls	r0, r1, #28
 80017b2:	d504      	bpl.n	80017be <HAL_UART_IRQHandler+0x50>
 80017b4:	b11b      	cbz	r3, 80017be <HAL_UART_IRQHandler+0x50>
  { 
    huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80017b6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80017b8:	f043 0308 	orr.w	r3, r3, #8
 80017bc:	63e3      	str	r3, [r4, #60]	; 0x3c
  }
  
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE);
 80017be:	6811      	ldr	r1, [r2, #0]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_RXNE);
 80017c0:	68d3      	ldr	r3, [r2, #12]
  /* UART in mode Receiver ---------------------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 80017c2:	0689      	lsls	r1, r1, #26
 80017c4:	d542      	bpl.n	800184c <HAL_UART_IRQHandler+0xde>
 80017c6:	0698      	lsls	r0, r3, #26
 80017c8:	d540      	bpl.n	800184c <HAL_UART_IRQHandler+0xde>
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;
  uint32_t tmp_state = 0;
  
  tmp_state = huart->State; 
 80017ca:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
  if((tmp_state == HAL_UART_STATE_BUSY_RX) || (tmp_state == HAL_UART_STATE_BUSY_TX_RX))
 80017ce:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 80017d2:	2b22      	cmp	r3, #34	; 0x22
 80017d4:	d13a      	bne.n	800184c <HAL_UART_IRQHandler+0xde>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80017d6:	68a3      	ldr	r3, [r4, #8]
 80017d8:	6921      	ldr	r1, [r4, #16]
 80017da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80017de:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80017e0:	d10b      	bne.n	80017fa <HAL_UART_IRQHandler+0x8c>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
      if(huart->Init.Parity == UART_PARITY_NONE)
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80017e2:	6852      	ldr	r2, [r2, #4]
  if((tmp_state == HAL_UART_STATE_BUSY_RX) || (tmp_state == HAL_UART_STATE_BUSY_TX_RX))
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
      if(huart->Init.Parity == UART_PARITY_NONE)
 80017e4:	b921      	cbnz	r1, 80017f0 <HAL_UART_IRQHandler+0x82>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80017e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80017ea:	f823 2b02 	strh.w	r2, [r3], #2
 80017ee:	e002      	b.n	80017f6 <HAL_UART_IRQHandler+0x88>
        huart->pRxBuffPtr += 2;
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80017f0:	b2d2      	uxtb	r2, r2
 80017f2:	f823 2b01 	strh.w	r2, [r3], #1
        huart->pRxBuffPtr += 1;
 80017f6:	62a3      	str	r3, [r4, #40]	; 0x28
 80017f8:	e00a      	b.n	8001810 <HAL_UART_IRQHandler+0xa2>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 80017fa:	b919      	cbnz	r1, 8001804 <HAL_UART_IRQHandler+0x96>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80017fc:	1c59      	adds	r1, r3, #1
 80017fe:	62a1      	str	r1, [r4, #40]	; 0x28
 8001800:	6852      	ldr	r2, [r2, #4]
 8001802:	e004      	b.n	800180e <HAL_UART_IRQHandler+0xa0>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001804:	6852      	ldr	r2, [r2, #4]
 8001806:	1c59      	adds	r1, r3, #1
 8001808:	62a1      	str	r1, [r4, #40]	; 0x28
 800180a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800180e:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0)
 8001810:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8001812:	3b01      	subs	r3, #1
 8001814:	b29b      	uxth	r3, r3
 8001816:	85e3      	strh	r3, [r4, #46]	; 0x2e
 8001818:	b9c3      	cbnz	r3, 800184c <HAL_UART_IRQHandler+0xde>
    {
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800181a:	6823      	ldr	r3, [r4, #0]
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);

        huart->State = HAL_UART_STATE_READY;
      }
      HAL_UART_RxCpltCallback(huart);
 800181c:	4620      	mov	r0, r4
      }
    }

    if(--huart->RxXferCount == 0)
    {
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800181e:	68da      	ldr	r2, [r3, #12]
 8001820:	f022 0220 	bic.w	r2, r2, #32
 8001824:	60da      	str	r2, [r3, #12]

      /* Check if a transmit process is ongoing or not */
      if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 8001826:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 800182a:	2a32      	cmp	r2, #50	; 0x32
        huart->State = HAL_UART_STATE_BUSY_TX;
      }
      else
      {
        /* Disable the UART Parity Error Interrupt */
        __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800182c:	bf17      	itett	ne
 800182e:	68da      	ldrne	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);

      /* Check if a transmit process is ongoing or not */
      if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
      {
        huart->State = HAL_UART_STATE_BUSY_TX;
 8001830:	2312      	moveq	r3, #18
      }
      else
      {
        /* Disable the UART Parity Error Interrupt */
        __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001832:	f422 7280 	bicne.w	r2, r2, #256	; 0x100
 8001836:	60da      	strne	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001838:	bf1f      	itttt	ne
 800183a:	695a      	ldrne	r2, [r3, #20]
 800183c:	f022 0201 	bicne.w	r2, r2, #1
 8001840:	615a      	strne	r2, [r3, #20]

        huart->State = HAL_UART_STATE_READY;
 8001842:	2301      	movne	r3, #1
 8001844:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      }
      HAL_UART_RxCpltCallback(huart);
 8001848:	f7ff ff8f 	bl	800176a <HAL_UART_RxCpltCallback>
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
  { 
    UART_Receive_IT(huart);
  }
  
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_TXE);
 800184c:	6823      	ldr	r3, [r4, #0]
 800184e:	6819      	ldr	r1, [r3, #0]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_TXE);
 8001850:	68da      	ldr	r2, [r3, #12]
  /* UART in mode Transmitter ------------------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8001852:	0609      	lsls	r1, r1, #24
 8001854:	d528      	bpl.n	80018a8 <HAL_UART_IRQHandler+0x13a>
 8001856:	0610      	lsls	r0, r2, #24
 8001858:	d526      	bpl.n	80018a8 <HAL_UART_IRQHandler+0x13a>
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;
  uint32_t tmp_state = 0;
  
  tmp_state = huart->State;
 800185a:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
  if((tmp_state == HAL_UART_STATE_BUSY_TX) || (tmp_state == HAL_UART_STATE_BUSY_TX_RX))
 800185e:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8001862:	2a12      	cmp	r2, #18
 8001864:	d120      	bne.n	80018a8 <HAL_UART_IRQHandler+0x13a>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001866:	68a2      	ldr	r2, [r4, #8]
 8001868:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800186c:	6a22      	ldr	r2, [r4, #32]
 800186e:	d10a      	bne.n	8001886 <HAL_UART_IRQHandler+0x118>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001870:	8811      	ldrh	r1, [r2, #0]
 8001872:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8001876:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001878:	6921      	ldr	r1, [r4, #16]
 800187a:	b909      	cbnz	r1, 8001880 <HAL_UART_IRQHandler+0x112>
      {
        huart->pTxBuffPtr += 2;
 800187c:	3202      	adds	r2, #2
 800187e:	e000      	b.n	8001882 <HAL_UART_IRQHandler+0x114>
      }
      else
      {
        huart->pTxBuffPtr += 1;
 8001880:	3201      	adds	r2, #1
 8001882:	6222      	str	r2, [r4, #32]
 8001884:	e003      	b.n	800188e <HAL_UART_IRQHandler+0x120>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001886:	1c51      	adds	r1, r2, #1
 8001888:	6221      	str	r1, [r4, #32]
 800188a:	7812      	ldrb	r2, [r2, #0]
 800188c:	605a      	str	r2, [r3, #4]
    }

    if(--huart->TxXferCount == 0)
 800188e:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8001890:	3a01      	subs	r2, #1
 8001892:	b292      	uxth	r2, r2
 8001894:	84e2      	strh	r2, [r4, #38]	; 0x26
 8001896:	b93a      	cbnz	r2, 80018a8 <HAL_UART_IRQHandler+0x13a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001898:	68da      	ldr	r2, [r3, #12]
 800189a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800189e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80018a0:	68da      	ldr	r2, [r3, #12]
 80018a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80018a6:	60da      	str	r2, [r3, #12]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
  {
    UART_Transmit_IT(huart);
  }

  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_TC);
 80018a8:	6819      	ldr	r1, [r3, #0]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_TC);
 80018aa:	68da      	ldr	r2, [r3, #12]
  /* UART in mode Transmitter end --------------------------------------------*/
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 80018ac:	0649      	lsls	r1, r1, #25
 80018ae:	d510      	bpl.n	80018d2 <HAL_UART_IRQHandler+0x164>
 80018b0:	0652      	lsls	r2, r2, #25
 80018b2:	d50e      	bpl.n	80018d2 <HAL_UART_IRQHandler+0x164>
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */    
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80018b4:	68da      	ldr	r2, [r3, #12]
  else
  {
    huart->State = HAL_UART_STATE_READY;
  }
  
  HAL_UART_TxCpltCallback(huart);
 80018b6:	4620      	mov	r0, r4
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */    
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80018b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80018bc:	60da      	str	r2, [r3, #12]
  
  /* Check if a receive process is ongoing or not */
  if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 80018be:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 80018c2:	2b32      	cmp	r3, #50	; 0x32
  {
    huart->State = HAL_UART_STATE_BUSY_RX;
 80018c4:	bf0c      	ite	eq
 80018c6:	2322      	moveq	r3, #34	; 0x22
  }
  else
  {
    huart->State = HAL_UART_STATE_READY;
 80018c8:	2301      	movne	r3, #1
 80018ca:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  }
  
  HAL_UART_TxCpltCallback(huart);
 80018ce:	f7ff ff4b 	bl	8001768 <HAL_UART_TxCpltCallback>
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
  {
    UART_EndTransmit_IT(huart);
  }  

  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80018d2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80018d4:	b15b      	cbz	r3, 80018ee <HAL_UART_IRQHandler+0x180>
  {
    /* Clear all the error flag at once */
    __HAL_UART_CLEAR_PEFLAG(huart);
 80018d6:	6823      	ldr	r3, [r4, #0]
    
    /* Set the UART state ready to be able to start again the process */
    huart->State = HAL_UART_STATE_READY;
    
    HAL_UART_ErrorCallback(huart);
 80018d8:	4620      	mov	r0, r4
  }  

  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
  {
    /* Clear all the error flag at once */
    __HAL_UART_CLEAR_PEFLAG(huart);
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	9201      	str	r2, [sp, #4]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	9301      	str	r3, [sp, #4]
 80018e2:	9b01      	ldr	r3, [sp, #4]
    
    /* Set the UART state ready to be able to start again the process */
    huart->State = HAL_UART_STATE_READY;
 80018e4:	2301      	movs	r3, #1
 80018e6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    
    HAL_UART_ErrorCallback(huart);
 80018ea:	f7ff ff3f 	bl	800176c <HAL_UART_ErrorCallback>
  }  
}
 80018ee:	b002      	add	sp, #8
 80018f0:	bd10      	pop	{r4, pc}

080018f2 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 80018f2:	b510      	push	{r4, lr}
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 80018f8:	b094      	sub	sp, #80	; 0x50
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018fa:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018fc:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80018fe:	2100      	movs	r1, #0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001900:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001902:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001904:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001906:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800190a:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800190c:	910c      	str	r1, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800190e:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001910:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001912:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001914:	f7ff f874 	bl	8000a00 <HAL_RCC_OscConfig>
 8001918:	b100      	cbz	r0, 800191c <SystemClock_Config+0x2a>
 800191a:	e7fe      	b.n	800191a <SystemClock_Config+0x28>
    Error_Handler();
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800191c:	230f      	movs	r3, #15
 800191e:	9305      	str	r3, [sp, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001920:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001922:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001926:	9009      	str	r0, [sp, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001928:	4621      	mov	r1, r4
 800192a:	a805      	add	r0, sp, #20

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800192c:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800192e:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001930:	f7ff fb0e 	bl	8000f50 <HAL_RCC_ClockConfig>
 8001934:	b100      	cbz	r0, 8001938 <SystemClock_Config+0x46>
 8001936:	e7fe      	b.n	8001936 <SystemClock_Config+0x44>
  {
    Error_Handler();
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001938:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800193c:	a801      	add	r0, sp, #4
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800193e:	9401      	str	r4, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001940:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001942:	f7ff fbed 	bl	8001120 <HAL_RCCEx_PeriphCLKConfig>
 8001946:	4604      	mov	r4, r0
 8001948:	b100      	cbz	r0, 800194c <SystemClock_Config+0x5a>
 800194a:	e7fe      	b.n	800194a <SystemClock_Config+0x58>
    Error_Handler();
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800194c:	f7ff fbb2 	bl	80010b4 <HAL_RCC_GetHCLKFreq>
 8001950:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001954:	fbb0 f0f3 	udiv	r0, r0, r3
 8001958:	f7fe fe00 	bl	800055c <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800195c:	2004      	movs	r0, #4
 800195e:	f7fe fe13 	bl	8000588 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001962:	4622      	mov	r2, r4
 8001964:	4621      	mov	r1, r4
 8001966:	f04f 30ff 	mov.w	r0, #4294967295
 800196a:	f7fe fdb7 	bl	80004dc <HAL_NVIC_SetPriority>
}
 800196e:	b014      	add	sp, #80	; 0x50
 8001970:	bd10      	pop	{r4, pc}
	...

08001974 <main>:
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

int main(void)
{
 8001974:	b580      	push	{r7, lr}
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001976:	4c71      	ldr	r4, [pc, #452]	; (8001b3c <main+0x1c8>)
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

int main(void)
{
 8001978:	b08c      	sub	sp, #48	; 0x30
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800197a:	f7fe fbf9 	bl	8000170 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 800197e:	f7ff ffb8 	bl	80018f2 <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001982:	69a3      	ldr	r3, [r4, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_15, GPIO_PIN_RESET);
 8001984:	2200      	movs	r2, #0
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001986:	f043 0310 	orr.w	r3, r3, #16
 800198a:	61a3      	str	r3, [r4, #24]
 800198c:	69a3      	ldr	r3, [r4, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_15, GPIO_PIN_RESET);
 800198e:	f44f 4120 	mov.w	r1, #40960	; 0xa000
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001992:	f003 0310 	and.w	r3, r3, #16
 8001996:	9302      	str	r3, [sp, #8]
 8001998:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800199a:	69a3      	ldr	r3, [r4, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_15, GPIO_PIN_RESET);
 800199c:	4868      	ldr	r0, [pc, #416]	; (8001b40 <main+0x1cc>)

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800199e:	f043 0320 	orr.w	r3, r3, #32
 80019a2:	61a3      	str	r3, [r4, #24]
 80019a4:	69a3      	ldr	r3, [r4, #24]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019a6:	2501      	movs	r5, #1

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019a8:	f003 0320 	and.w	r3, r3, #32
 80019ac:	9303      	str	r3, [sp, #12]
 80019ae:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019b0:	69a3      	ldr	r3, [r4, #24]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b2:	2602      	movs	r6, #2
  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019b4:	f043 0304 	orr.w	r3, r3, #4
 80019b8:	61a3      	str	r3, [r4, #24]
 80019ba:	69a3      	ldr	r3, [r4, #24]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
  hadc1.Init.ContinuousConvMode = ENABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 4;
 80019bc:	2704      	movs	r7, #4
  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019be:	f003 0304 	and.w	r3, r3, #4
 80019c2:	9304      	str	r3, [sp, #16]
 80019c4:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019c6:	69a3      	ldr	r3, [r4, #24]
 80019c8:	f043 0308 	orr.w	r3, r3, #8
 80019cc:	61a3      	str	r3, [r4, #24]
 80019ce:	69a3      	ldr	r3, [r4, #24]
 80019d0:	f003 0308 	and.w	r3, r3, #8
 80019d4:	9305      	str	r3, [sp, #20]
 80019d6:	9b05      	ldr	r3, [sp, #20]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_15, GPIO_PIN_RESET);
 80019d8:	f7ff f80e 	bl	80009f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 80019dc:	2200      	movs	r2, #0
 80019de:	f241 11f8 	movw	r1, #4600	; 0x11f8
 80019e2:	4858      	ldr	r0, [pc, #352]	; (8001b44 <main+0x1d0>)
 80019e4:	f7ff f808 	bl	80009f8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80019e8:	f44f 4320 	mov.w	r3, #40960	; 0xa000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019ec:	a908      	add	r1, sp, #32
 80019ee:	4854      	ldr	r0, [pc, #336]	; (8001b40 <main+0x1cc>)
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80019f0:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019f2:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f4:	960b      	str	r6, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019f6:	f7fe ff27 	bl	8000848 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB3 PB4 PB5 
                           PB6 PB7 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 80019fa:	f241 13f8 	movw	r3, #4600	; 0x11f8
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019fe:	a908      	add	r1, sp, #32
 8001a00:	4850      	ldr	r0, [pc, #320]	; (8001b44 <main+0x1d0>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : PB12 PB3 PB4 PB5 
                           PB6 PB7 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 8001a02:	9308      	str	r3, [sp, #32]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a04:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a06:	960b      	str	r6, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a08:	f7fe ff1e 	bl	8000848 <HAL_GPIO_Init>
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a0c:	6963      	ldr	r3, [r4, #20]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001a0e:	2200      	movs	r2, #0
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a10:	432b      	orrs	r3, r5
 8001a12:	6163      	str	r3, [r4, #20]
 8001a14:	6963      	ldr	r3, [r4, #20]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001a16:	4611      	mov	r1, r2
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a18:	402b      	ands	r3, r5
 8001a1a:	9301      	str	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001a1c:	200b      	movs	r0, #11
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a1e:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001a20:	f7fe fd5c 	bl	80004dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001a24:	200b      	movs	r0, #11
 8001a26:	f7fe fd8d 	bl	8000544 <HAL_NVIC_EnableIRQ>

  ADC_ChannelConfTypeDef sConfig;

    /**Common config 
    */
  hadc1.Instance = ADC1;
 8001a2a:	4c47      	ldr	r4, [pc, #284]	; (8001b48 <main+0x1d4>)
 8001a2c:	4b47      	ldr	r3, [pc, #284]	; (8001b4c <main+0x1d8>)
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
  hadc1.Init.ContinuousConvMode = ENABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a2e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000

  ADC_ChannelConfTypeDef sConfig;

    /**Common config 
    */
  hadc1.Instance = ADC1;
 8001a32:	6023      	str	r3, [r4, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001a34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a38:	60a3      	str	r3, [r4, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 4;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a3a:	4620      	mov	r0, r4
    /**Common config 
    */
  hadc1.Instance = ADC1;
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
  hadc1.Init.ContinuousConvMode = ENABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a3c:	2300      	movs	r3, #0

    /**Common config 
    */
  hadc1.Instance = ADC1;
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001a3e:	60e5      	str	r5, [r4, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a40:	6163      	str	r3, [r4, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a42:	61e2      	str	r2, [r4, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a44:	6063      	str	r3, [r4, #4]
  hadc1.Init.NbrOfConversion = 4;
 8001a46:	6127      	str	r7, [r4, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a48:	f7fe fca2 	bl	8000390 <HAL_ADC_Init>
 8001a4c:	b100      	cbz	r0, 8001a50 <main+0xdc>
 8001a4e:	e7fe      	b.n	8001a4e <main+0xda>
    Error_Handler();
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_0;
 8001a50:	9008      	str	r0, [sp, #32]
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001a52:	2307      	movs	r3, #7
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a54:	a908      	add	r1, sp, #32
 8001a56:	4620      	mov	r0, r4
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_0;
  sConfig.Rank = 1;
 8001a58:	9509      	str	r5, [sp, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001a5a:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a5c:	f7fe fbb6 	bl	80001cc <HAL_ADC_ConfigChannel>
 8001a60:	b100      	cbz	r0, 8001a64 <main+0xf0>
 8001a62:	e7fe      	b.n	8001a62 <main+0xee>

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_1;
  sConfig.Rank = 2;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a64:	a908      	add	r1, sp, #32
 8001a66:	4620      	mov	r0, r4
    Error_Handler();
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_1;
 8001a68:	9508      	str	r5, [sp, #32]
  sConfig.Rank = 2;
 8001a6a:	9609      	str	r6, [sp, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a6c:	f7fe fbae 	bl	80001cc <HAL_ADC_ConfigChannel>
 8001a70:	b100      	cbz	r0, 8001a74 <main+0x100>
 8001a72:	e7fe      	b.n	8001a72 <main+0xfe>
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_2;
  sConfig.Rank = 3;
 8001a74:	2503      	movs	r5, #3
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a76:	a908      	add	r1, sp, #32
 8001a78:	4620      	mov	r0, r4
    Error_Handler();
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_2;
 8001a7a:	9608      	str	r6, [sp, #32]
  sConfig.Rank = 3;
 8001a7c:	9509      	str	r5, [sp, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a7e:	f7fe fba5 	bl	80001cc <HAL_ADC_ConfigChannel>
 8001a82:	b100      	cbz	r0, 8001a86 <main+0x112>
 8001a84:	e7fe      	b.n	8001a84 <main+0x110>

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_3;
  sConfig.Rank = 4;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a86:	a908      	add	r1, sp, #32
 8001a88:	4620      	mov	r0, r4
    Error_Handler();
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_3;
 8001a8a:	9508      	str	r5, [sp, #32]
  sConfig.Rank = 4;
 8001a8c:	9709      	str	r7, [sp, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a8e:	f7fe fb9d 	bl	80001cc <HAL_ADC_ConfigChannel>
 8001a92:	b100      	cbz	r0, 8001a96 <main+0x122>
 8001a94:	e7fe      	b.n	8001a94 <main+0x120>

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 7199;
 8001a96:	f641 461f 	movw	r6, #7199	; 0x1c1f
{

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim2.Instance = TIM2;
 8001a9a:	4c2d      	ldr	r4, [pc, #180]	; (8001b50 <main+0x1dc>)
  htim2.Init.Prescaler = 7199;
 8001a9c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001aa0:	e884 0048 	stmia.w	r4, {r3, r6}
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 999;
 8001aa4:	f240 33e7 	movw	r3, #999	; 0x3e7
  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 7199;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aa8:	60a0      	str	r0, [r4, #8]
  htim2.Init.Period = 999;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aaa:	6120      	str	r0, [r4, #16]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001aac:	4620      	mov	r0, r4
  TIM_MasterConfigTypeDef sMasterConfig;

  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 7199;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 999;
 8001aae:	60e3      	str	r3, [r4, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ab0:	f7ff fd56 	bl	8001560 <HAL_TIM_Base_Init>
 8001ab4:	b100      	cbz	r0, 8001ab8 <main+0x144>
 8001ab6:	e7fe      	b.n	8001ab6 <main+0x142>
  {
    Error_Handler();
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ab8:	f44f 5580 	mov.w	r5, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001abc:	a908      	add	r1, sp, #32
 8001abe:	4620      	mov	r0, r4
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ac0:	9508      	str	r5, [sp, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ac2:	f7ff fbb7 	bl	8001234 <HAL_TIM_ConfigClockSource>
 8001ac6:	b100      	cbz	r0, 8001aca <main+0x156>
 8001ac8:	e7fe      	b.n	8001ac8 <main+0x154>
  {
    Error_Handler();
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001aca:	9006      	str	r0, [sp, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001acc:	9007      	str	r0, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ace:	a906      	add	r1, sp, #24
 8001ad0:	4620      	mov	r0, r4
 8001ad2:	f7ff fd5f 	bl	8001594 <HAL_TIMEx_MasterConfigSynchronization>
 8001ad6:	b100      	cbz	r0, 8001ada <main+0x166>
 8001ad8:	e7fe      	b.n	8001ad8 <main+0x164>
{

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim3.Instance = TIM3;
 8001ada:	4c1e      	ldr	r4, [pc, #120]	; (8001b54 <main+0x1e0>)
 8001adc:	4b1e      	ldr	r3, [pc, #120]	; (8001b58 <main+0x1e4>)
  htim3.Init.Prescaler = 7199;
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ade:	60a0      	str	r0, [r4, #8]

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 7199;
 8001ae0:	e884 0048 	stmia.w	r4, {r3, r6}
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 4999;
 8001ae4:	f241 3387 	movw	r3, #4999	; 0x1387
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ae8:	6120      	str	r0, [r4, #16]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001aea:	4620      	mov	r0, r4
  TIM_MasterConfigTypeDef sMasterConfig;

  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 7199;
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 4999;
 8001aec:	60e3      	str	r3, [r4, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001aee:	f7ff fd37 	bl	8001560 <HAL_TIM_Base_Init>
 8001af2:	b100      	cbz	r0, 8001af6 <main+0x182>
 8001af4:	e7fe      	b.n	8001af4 <main+0x180>
  {
    Error_Handler();
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001af6:	a908      	add	r1, sp, #32
 8001af8:	4620      	mov	r0, r4
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
  {
    Error_Handler();
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001afa:	9508      	str	r5, [sp, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001afc:	f7ff fb9a 	bl	8001234 <HAL_TIM_ConfigClockSource>
 8001b00:	b100      	cbz	r0, 8001b04 <main+0x190>
 8001b02:	e7fe      	b.n	8001b02 <main+0x18e>
  {
    Error_Handler();
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b04:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b06:	a906      	add	r1, sp, #24
 8001b08:	4812      	ldr	r0, [pc, #72]	; (8001b54 <main+0x1e0>)
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b0a:	9306      	str	r3, [sp, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b0c:	9307      	str	r3, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b0e:	f7ff fd41 	bl	8001594 <HAL_TIMEx_MasterConfigSynchronization>
 8001b12:	b100      	cbz	r0, 8001b16 <main+0x1a2>
 8001b14:	e7fe      	b.n	8001b14 <main+0x1a0>

/* USART1 init function */
static void MX_USART1_UART_Init(void)
{

  huart1.Instance = USART1;
 8001b16:	4b11      	ldr	r3, [pc, #68]	; (8001b5c <main+0x1e8>)
  huart1.Init.BaudRate = 115200;
 8001b18:	4911      	ldr	r1, [pc, #68]	; (8001b60 <main+0x1ec>)
 8001b1a:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b1e:	e883 0006 	stmia.w	r3, {r1, r2}
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b22:	6098      	str	r0, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b24:	60d8      	str	r0, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b26:	6118      	str	r0, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b28:	220c      	movs	r2, #12
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b2a:	6198      	str	r0, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b2c:	61d8      	str	r0, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b2e:	4618      	mov	r0, r3
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b30:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b32:	f7ff fded 	bl	8001710 <HAL_UART_Init>
 8001b36:	b100      	cbz	r0, 8001b3a <main+0x1c6>
 8001b38:	e7fe      	b.n	8001b38 <main+0x1c4>
 8001b3a:	e7fe      	b.n	8001b3a <main+0x1c6>
 8001b3c:	40021000 	.word	0x40021000
 8001b40:	40011000 	.word	0x40011000
 8001b44:	40010c00 	.word	0x40010c00
 8001b48:	20000060 	.word	0x20000060
 8001b4c:	40012400 	.word	0x40012400
 8001b50:	20000108 	.word	0x20000108
 8001b54:	20000024 	.word	0x20000024
 8001b58:	40000400 	.word	0x40000400
 8001b5c:	20000090 	.word	0x20000090
 8001b60:	40013800 	.word	0x40013800

08001b64 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 8001b64:	e7fe      	b.n	8001b64 <Error_Handler>
	...

08001b68 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b68:	4b20      	ldr	r3, [pc, #128]	; (8001bec <HAL_MspInit+0x84>)
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b6a:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b6c:	699a      	ldr	r2, [r3, #24]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b6e:	2003      	movs	r0, #3
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b70:	f042 0201 	orr.w	r2, r2, #1
 8001b74:	619a      	str	r2, [r3, #24]
 8001b76:	699b      	ldr	r3, [r3, #24]
 8001b78:	f003 0301 	and.w	r3, r3, #1
 8001b7c:	9301      	str	r3, [sp, #4]
 8001b7e:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b80:	f7fe fc9a 	bl	80004b8 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8001b84:	2200      	movs	r2, #0
 8001b86:	4611      	mov	r1, r2
 8001b88:	f06f 000b 	mvn.w	r0, #11
 8001b8c:	f7fe fca6 	bl	80004dc <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001b90:	2200      	movs	r2, #0
 8001b92:	4611      	mov	r1, r2
 8001b94:	f06f 000a 	mvn.w	r0, #10
 8001b98:	f7fe fca0 	bl	80004dc <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	4611      	mov	r1, r2
 8001ba0:	f06f 0009 	mvn.w	r0, #9
 8001ba4:	f7fe fc9a 	bl	80004dc <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8001ba8:	2200      	movs	r2, #0
 8001baa:	4611      	mov	r1, r2
 8001bac:	f06f 0004 	mvn.w	r0, #4
 8001bb0:	f7fe fc94 	bl	80004dc <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	4611      	mov	r1, r2
 8001bb8:	f06f 0003 	mvn.w	r0, #3
 8001bbc:	f7fe fc8e 	bl	80004dc <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	4611      	mov	r1, r2
 8001bc4:	f06f 0001 	mvn.w	r0, #1
 8001bc8:	f7fe fc88 	bl	80004dc <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001bcc:	2200      	movs	r2, #0
 8001bce:	4611      	mov	r1, r2
 8001bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8001bd4:	f7fe fc82 	bl	80004dc <HAL_NVIC_SetPriority>

    /**DISABLE: JTAG-DP Disabled and SW-DP Disabled 
    */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001bd8:	4a05      	ldr	r2, [pc, #20]	; (8001bf0 <HAL_MspInit+0x88>)
 8001bda:	6853      	ldr	r3, [r2, #4]
 8001bdc:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001be0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001be4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001be6:	b003      	add	sp, #12
 8001be8:	f85d fb04 	ldr.w	pc, [sp], #4
 8001bec:	40021000 	.word	0x40021000
 8001bf0:	40010000 	.word	0x40010000

08001bf4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001bf4:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 8001bf6:	6802      	ldr	r2, [r0, #0]
 8001bf8:	4b19      	ldr	r3, [pc, #100]	; (8001c60 <HAL_ADC_MspInit+0x6c>)

  /* USER CODE END MspInit 1 */
}

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001bfa:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 8001bfc:	429a      	cmp	r2, r3

  /* USER CODE END MspInit 1 */
}

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001bfe:	4605      	mov	r5, r0

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 8001c00:	d12c      	bne.n	8001c5c <HAL_ADC_MspInit+0x68>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c02:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8001c06:	699a      	ldr	r2, [r3, #24]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c08:	4816      	ldr	r0, [pc, #88]	; (8001c64 <HAL_ADC_MspInit+0x70>)
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c0e:	619a      	str	r2, [r3, #24]
 8001c10:	699b      	ldr	r3, [r3, #24]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c12:	a902      	add	r1, sp, #8
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c18:	9301      	str	r3, [sp, #4]
 8001c1a:	9b01      	ldr	r3, [sp, #4]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001c1c:	230f      	movs	r3, #15
 8001c1e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c20:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* Peripheral DMA init*/
  
    hdma_adc1.Instance = DMA1_Channel1;
 8001c22:	4c11      	ldr	r4, [pc, #68]	; (8001c68 <HAL_ADC_MspInit+0x74>)
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c24:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c26:	f7fe fe0f 	bl	8000848 <HAL_GPIO_Init>

    /* Peripheral DMA init*/
  
    hdma_adc1.Instance = DMA1_Channel1;
 8001c2a:	4b10      	ldr	r3, [pc, #64]	; (8001c6c <HAL_ADC_MspInit+0x78>)
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001c2c:	2280      	movs	r2, #128	; 0x80
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* Peripheral DMA init*/
  
    hdma_adc1.Instance = DMA1_Channel1;
 8001c2e:	6023      	str	r3, [r4, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001c30:	60e2      	str	r2, [r4, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* Peripheral DMA init*/
  
    hdma_adc1.Instance = DMA1_Channel1;
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c32:	2300      	movs	r3, #0
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001c34:	f44f 7280 	mov.w	r2, #256	; 0x100
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* Peripheral DMA init*/
  
    hdma_adc1.Instance = DMA1_Channel1;
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c38:	6063      	str	r3, [r4, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c3a:	60a3      	str	r3, [r4, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001c3c:	6122      	str	r2, [r4, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001c3e:	61a3      	str	r3, [r4, #24]
    hdma_adc1.Instance = DMA1_Channel1;
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001c40:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_adc1.Init.Mode = DMA_NORMAL;
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8001c44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001c48:	4620      	mov	r0, r4
    hdma_adc1.Instance = DMA1_Channel1;
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001c4a:	6162      	str	r2, [r4, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8001c4c:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001c4e:	f7fe fcac 	bl	80005aa <HAL_DMA_Init>
 8001c52:	b108      	cbz	r0, 8001c58 <HAL_ADC_MspInit+0x64>
    {
      Error_Handler();
 8001c54:	f7ff ff86 	bl	8001b64 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001c58:	622c      	str	r4, [r5, #32]
 8001c5a:	6265      	str	r5, [r4, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001c5c:	b007      	add	sp, #28
 8001c5e:	bd30      	pop	{r4, r5, pc}
 8001c60:	40012400 	.word	0x40012400
 8001c64:	40010800 	.word	0x40010800
 8001c68:	200000d0 	.word	0x200000d0
 8001c6c:	40020008 	.word	0x40020008

08001c70 <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{

  if(htim_base->Instance==TIM2)
 8001c70:	6803      	ldr	r3, [r0, #0]
  /* USER CODE END ADC1_MspDeInit 1 */

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c72:	b507      	push	{r0, r1, r2, lr}

  if(htim_base->Instance==TIM2)
 8001c74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c78:	d111      	bne.n	8001c9e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c7a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001c7e:	69da      	ldr	r2, [r3, #28]
    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001c80:	201c      	movs	r0, #28
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c82:	f042 0201 	orr.w	r2, r2, #1
 8001c86:	61da      	str	r2, [r3, #28]
 8001c88:	69db      	ldr	r3, [r3, #28]
    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001c8a:	2200      	movs	r2, #0
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c8c:	f003 0301 	and.w	r3, r3, #1
 8001c90:	9300      	str	r3, [sp, #0]
    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001c92:	4611      	mov	r1, r2
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c94:	9b00      	ldr	r3, [sp, #0]
    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001c96:	f7fe fc21 	bl	80004dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c9a:	201c      	movs	r0, #28
 8001c9c:	e012      	b.n	8001cc4 <HAL_TIM_Base_MspInit+0x54>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 8001c9e:	4a0c      	ldr	r2, [pc, #48]	; (8001cd0 <HAL_TIM_Base_MspInit+0x60>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d111      	bne.n	8001cc8 <HAL_TIM_Base_MspInit+0x58>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ca4:	4b0b      	ldr	r3, [pc, #44]	; (8001cd4 <HAL_TIM_Base_MspInit+0x64>)
    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001ca6:	201d      	movs	r0, #29
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ca8:	69da      	ldr	r2, [r3, #28]
 8001caa:	f042 0202 	orr.w	r2, r2, #2
 8001cae:	61da      	str	r2, [r3, #28]
 8001cb0:	69db      	ldr	r3, [r3, #28]
    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001cb2:	2200      	movs	r2, #0
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001cb4:	f003 0302 	and.w	r3, r3, #2
 8001cb8:	9301      	str	r3, [sp, #4]
    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001cba:	4611      	mov	r1, r2
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001cbc:	9b01      	ldr	r3, [sp, #4]
    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001cbe:	f7fe fc0d 	bl	80004dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001cc2:	201d      	movs	r0, #29
 8001cc4:	f7fe fc3e 	bl	8000544 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001cc8:	b003      	add	sp, #12
 8001cca:	f85d fb04 	ldr.w	pc, [sp], #4
 8001cce:	bf00      	nop
 8001cd0:	40000400 	.word	0x40000400
 8001cd4:	40021000 	.word	0x40021000

08001cd8 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cd8:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 8001cda:	6802      	ldr	r2, [r0, #0]
 8001cdc:	4b16      	ldr	r3, [pc, #88]	; (8001d38 <HAL_UART_MspInit+0x60>)
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cde:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d127      	bne.n	8001d34 <HAL_UART_MspInit+0x5c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ce4:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8001ce8:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cea:	a902      	add	r1, sp, #8
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001cec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001cf0:	619a      	str	r2, [r3, #24]
 8001cf2:	699b      	ldr	r3, [r3, #24]
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cf4:	4811      	ldr	r0, [pc, #68]	; (8001d3c <HAL_UART_MspInit+0x64>)
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001cf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cfa:	9301      	str	r3, [sp, #4]
 8001cfc:	9b01      	ldr	r3, [sp, #4]
  
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001cfe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d02:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d04:	2302      	movs	r3, #2
 8001d06:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d08:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d0a:	2400      	movs	r4, #0
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d0c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d0e:	f7fe fd9b 	bl	8000848 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001d12:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d16:	a902      	add	r1, sp, #8
 8001d18:	4808      	ldr	r0, [pc, #32]	; (8001d3c <HAL_UART_MspInit+0x64>)
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001d1a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d1c:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1e:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d20:	f7fe fd92 	bl	8000848 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001d24:	2025      	movs	r0, #37	; 0x25
 8001d26:	4622      	mov	r2, r4
 8001d28:	4621      	mov	r1, r4
 8001d2a:	f7fe fbd7 	bl	80004dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001d2e:	2025      	movs	r0, #37	; 0x25
 8001d30:	f7fe fc08 	bl	8000544 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001d34:	b006      	add	sp, #24
 8001d36:	bd10      	pop	{r4, pc}
 8001d38:	40013800 	.word	0x40013800
 8001d3c:	40010800 	.word	0x40010800

08001d40 <NMI_Handler>:
 8001d40:	4770      	bx	lr

08001d42 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8001d42:	e7fe      	b.n	8001d42 <HardFault_Handler>

08001d44 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8001d44:	e7fe      	b.n	8001d44 <MemManage_Handler>

08001d46 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8001d46:	e7fe      	b.n	8001d46 <BusFault_Handler>

08001d48 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8001d48:	e7fe      	b.n	8001d48 <UsageFault_Handler>

08001d4a <SVC_Handler>:
 8001d4a:	4770      	bx	lr

08001d4c <DebugMon_Handler>:
 8001d4c:	4770      	bx	lr

08001d4e <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8001d4e:	4770      	bx	lr

08001d50 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001d50:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d52:	f7fe fa1f 	bl	8000194 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d56:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  HAL_SYSTICK_IRQHandler();
 8001d5a:	f7fe bc22 	b.w	80005a2 <HAL_SYSTICK_IRQHandler>
	...

08001d60 <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001d60:	4801      	ldr	r0, [pc, #4]	; (8001d68 <DMA1_Channel1_IRQHandler+0x8>)
 8001d62:	f7fe bc47 	b.w	80005f4 <HAL_DMA_IRQHandler>
 8001d66:	bf00      	nop
 8001d68:	200000d0 	.word	0x200000d0

08001d6c <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001d6c:	4801      	ldr	r0, [pc, #4]	; (8001d74 <TIM2_IRQHandler+0x8>)
 8001d6e:	f7ff bb20 	b.w	80013b2 <HAL_TIM_IRQHandler>
 8001d72:	bf00      	nop
 8001d74:	20000108 	.word	0x20000108

08001d78 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001d78:	4801      	ldr	r0, [pc, #4]	; (8001d80 <TIM3_IRQHandler+0x8>)
 8001d7a:	f7ff bb1a 	b.w	80013b2 <HAL_TIM_IRQHandler>
 8001d7e:	bf00      	nop
 8001d80:	20000024 	.word	0x20000024

08001d84 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001d84:	4801      	ldr	r0, [pc, #4]	; (8001d8c <USART1_IRQHandler+0x8>)
 8001d86:	f7ff bcf2 	b.w	800176e <HAL_UART_IRQHandler>
 8001d8a:	bf00      	nop
 8001d8c:	20000090 	.word	0x20000090

08001d90 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001d90:	4b0f      	ldr	r3, [pc, #60]	; (8001dd0 <SystemInit+0x40>)
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	f042 0201 	orr.w	r2, r2, #1
 8001d98:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8001d9a:	6859      	ldr	r1, [r3, #4]
 8001d9c:	4a0d      	ldr	r2, [pc, #52]	; (8001dd4 <SystemInit+0x44>)
 8001d9e:	400a      	ands	r2, r1
 8001da0:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001da8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001dac:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001db4:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8001db6:	685a      	ldr	r2, [r3, #4]
 8001db8:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001dbc:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8001dbe:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001dc2:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001dc4:	4b04      	ldr	r3, [pc, #16]	; (8001dd8 <SystemInit+0x48>)
 8001dc6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001dca:	609a      	str	r2, [r3, #8]
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	40021000 	.word	0x40021000
 8001dd4:	f8ff0000 	.word	0xf8ff0000
 8001dd8:	e000ed00 	.word	0xe000ed00

08001ddc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001ddc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001dde:	e003      	b.n	8001de8 <LoopCopyDataInit>

08001de0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001de0:	4b0b      	ldr	r3, [pc, #44]	; (8001e10 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001de2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001de4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001de6:	3104      	adds	r1, #4

08001de8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001de8:	480a      	ldr	r0, [pc, #40]	; (8001e14 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001dea:	4b0b      	ldr	r3, [pc, #44]	; (8001e18 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001dec:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001dee:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001df0:	d3f6      	bcc.n	8001de0 <CopyDataInit>
  ldr r2, =_sbss
 8001df2:	4a0a      	ldr	r2, [pc, #40]	; (8001e1c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001df4:	e002      	b.n	8001dfc <LoopFillZerobss>

08001df6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001df6:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001df8:	f842 3b04 	str.w	r3, [r2], #4

08001dfc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001dfc:	4b08      	ldr	r3, [pc, #32]	; (8001e20 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001dfe:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001e00:	d3f9      	bcc.n	8001df6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001e02:	f7ff ffc5 	bl	8001d90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e06:	f000 f80f 	bl	8001e28 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e0a:	f7ff fdb3 	bl	8001974 <main>
  bx lr
 8001e0e:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
  b LoopCopyDataInit

CopyDataInit:
  ldr r3, =_sidata
 8001e10:	08001ec0 	.word	0x08001ec0
  ldr r3, [r3, r1]
  str r3, [r0, r1]
  adds r1, r1, #4

LoopCopyDataInit:
  ldr r0, =_sdata
 8001e14:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001e18:	20000004 	.word	0x20000004
  adds r2, r0, r1
  cmp r2, r3
  bcc CopyDataInit
  ldr r2, =_sbss
 8001e1c:	20000004 	.word	0x20000004
FillZerobss:
  movs r3, #0
  str r3, [r2], #4

LoopFillZerobss:
  ldr r3, = _ebss
 8001e20:	20000144 	.word	0x20000144

08001e24 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e24:	e7fe      	b.n	8001e24 <ADC1_2_IRQHandler>
	...

08001e28 <__libc_init_array>:
 8001e28:	4b0e      	ldr	r3, [pc, #56]	; (8001e64 <__libc_init_array+0x3c>)
 8001e2a:	b570      	push	{r4, r5, r6, lr}
 8001e2c:	461e      	mov	r6, r3
 8001e2e:	4c0e      	ldr	r4, [pc, #56]	; (8001e68 <__libc_init_array+0x40>)
 8001e30:	2500      	movs	r5, #0
 8001e32:	1ae4      	subs	r4, r4, r3
 8001e34:	10a4      	asrs	r4, r4, #2
 8001e36:	42a5      	cmp	r5, r4
 8001e38:	d004      	beq.n	8001e44 <__libc_init_array+0x1c>
 8001e3a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001e3e:	4798      	blx	r3
 8001e40:	3501      	adds	r5, #1
 8001e42:	e7f8      	b.n	8001e36 <__libc_init_array+0xe>
 8001e44:	f000 f816 	bl	8001e74 <_init>
 8001e48:	4b08      	ldr	r3, [pc, #32]	; (8001e6c <__libc_init_array+0x44>)
 8001e4a:	4c09      	ldr	r4, [pc, #36]	; (8001e70 <__libc_init_array+0x48>)
 8001e4c:	461e      	mov	r6, r3
 8001e4e:	1ae4      	subs	r4, r4, r3
 8001e50:	10a4      	asrs	r4, r4, #2
 8001e52:	2500      	movs	r5, #0
 8001e54:	42a5      	cmp	r5, r4
 8001e56:	d004      	beq.n	8001e62 <__libc_init_array+0x3a>
 8001e58:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001e5c:	4798      	blx	r3
 8001e5e:	3501      	adds	r5, #1
 8001e60:	e7f8      	b.n	8001e54 <__libc_init_array+0x2c>
 8001e62:	bd70      	pop	{r4, r5, r6, pc}
 8001e64:	08001eb8 	.word	0x08001eb8
 8001e68:	08001eb8 	.word	0x08001eb8
 8001e6c:	08001eb8 	.word	0x08001eb8
 8001e70:	08001ebc 	.word	0x08001ebc

08001e74 <_init>:
 8001e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e76:	bf00      	nop
 8001e78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e7a:	bc08      	pop	{r3}
 8001e7c:	469e      	mov	lr, r3
 8001e7e:	4770      	bx	lr

08001e80 <_fini>:
 8001e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e82:	bf00      	nop
 8001e84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e86:	bc08      	pop	{r3}
 8001e88:	469e      	mov	lr, r3
 8001e8a:	4770      	bx	lr
