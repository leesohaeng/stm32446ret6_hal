
16MHZ_446RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000cb8  080001c4  080001c4  000081c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08000e7c  08000e7c  00008e7c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08000e8c  08000e8c  00008e8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000e90  08000e90  00008e90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08000e94  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  20000004  08000e98  00010004  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000024  08000e98  00010024  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00010004  2**0
                  CONTENTS, READONLY
  9 .debug_info   00005f46  00000000  00000000  00010034  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000013ad  00000000  00000000  00015f7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000003b0  00000000  00000000  00017328  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000908  00000000  00000000  000176d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00002631  00000000  00000000  00017fe0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000182a  00000000  00000000  0001a611  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      00000082  00000000  00000000  0001be3b  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00000778  00000000  00000000  0001bec0  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_loc    000022ab  00000000  00000000  0001c638  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000004 	.word	0x20000004
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000e64 	.word	0x08000e64

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	08000e64 	.word	0x08000e64
 8000200:	20000008 	.word	0x20000008

08000204 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8000204:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000206:	f000 fd97 	bl	8000d38 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800020a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  HAL_SYSTICK_IRQHandler();
 800020e:	f000 bd62 	b.w	8000cd6 <HAL_SYSTICK_IRQHandler>

08000212 <RCC_IRQHandler>:

/**
* @brief This function handles RCC global interrupt.
*/
void RCC_IRQHandler(void)
{
 8000212:	4770      	bx	lr

08000214 <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000214:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000216:	2007      	movs	r0, #7
 8000218:	f000 fcea 	bl	8000bf0 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800021c:	2100      	movs	r1, #0
 800021e:	460a      	mov	r2, r1
 8000220:	f06f 000b 	mvn.w	r0, #11
 8000224:	f000 fcf6 	bl	8000c14 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8000228:	2100      	movs	r1, #0
 800022a:	460a      	mov	r2, r1
 800022c:	f06f 000a 	mvn.w	r0, #10
 8000230:	f000 fcf0 	bl	8000c14 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8000234:	2100      	movs	r1, #0
 8000236:	460a      	mov	r2, r1
 8000238:	f06f 0009 	mvn.w	r0, #9
 800023c:	f000 fcea 	bl	8000c14 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8000240:	2100      	movs	r1, #0
 8000242:	460a      	mov	r2, r1
 8000244:	f06f 0003 	mvn.w	r0, #3
 8000248:	f000 fce4 	bl	8000c14 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800024c:	2100      	movs	r1, #0
 800024e:	460a      	mov	r2, r1
 8000250:	f04f 30ff 	mov.w	r0, #4294967295
 8000254:	f000 fcde 	bl	8000c14 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init*/
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8000258:	2100      	movs	r1, #0
 800025a:	2005      	movs	r0, #5
 800025c:	460a      	mov	r2, r1
 800025e:	f000 fcd9 	bl	8000c14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000262:	2005      	movs	r0, #5

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000264:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);

  /* Peripheral interrupt init*/
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000268:	f000 bd06 	b.w	8000c78 <HAL_NVIC_EnableIRQ>

0800026c <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 800026c:	b570      	push	{r4, r5, r6, lr}
 800026e:	b094      	sub	sp, #80	; 0x50

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
 8000270:	2500      	movs	r5, #0
 8000272:	4b25      	ldr	r3, [pc, #148]	; (8000308 <SystemClock_Config+0x9c>)
 8000274:	9500      	str	r5, [sp, #0]
 8000276:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000278:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800027c:	641a      	str	r2, [r3, #64]	; 0x40
 800027e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000280:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000284:	9300      	str	r3, [sp, #0]
 8000286:	9b00      	ldr	r3, [sp, #0]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000288:	4b20      	ldr	r3, [pc, #128]	; (800030c <SystemClock_Config+0xa0>)
 800028a:	9501      	str	r5, [sp, #4]
 800028c:	681a      	ldr	r2, [r3, #0]
 800028e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8000292:	601a      	str	r2, [r3, #0]
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800029a:	9301      	str	r3, [sp, #4]
 800029c:	9b01      	ldr	r3, [sp, #4]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800029e:	2301      	movs	r3, #1
 80002a0:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002a2:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002a4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002a8:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002aa:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80002ac:	2604      	movs	r6, #4
  RCC_OscInitStruct.PLL.PLLN = 180;
 80002ae:	23b4      	movs	r3, #180	; 0xb4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80002b0:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 180;
 80002b2:	9310      	str	r3, [sp, #64]	; 0x40

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002b4:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
 80002b6:	960f      	str	r6, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80002b8:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80002ba:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80002bc:	9413      	str	r4, [sp, #76]	; 0x4c
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80002be:	f000 f897 	bl	80003f0 <HAL_RCC_OscConfig>

  HAL_PWREx_EnableOverDrive();
 80002c2:	f000 fb65 	bl	8000990 <HAL_PWREx_EnableOverDrive>

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002c6:	230f      	movs	r3, #15
 80002c8:	9302      	str	r3, [sp, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80002ca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 80002ce:	2105      	movs	r1, #5

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80002d0:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 80002d2:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80002d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80002d8:	9306      	str	r3, [sp, #24]

  HAL_PWREx_EnableOverDrive();

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002da:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002dc:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 80002de:	f000 fa9b 	bl	8000818 <HAL_RCC_ClockConfig>

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80002e2:	f000 fb3b 	bl	800095c <HAL_RCC_GetHCLKFreq>
 80002e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002ea:	fbb0 f0f3 	udiv	r0, r0, r3
 80002ee:	f000 fccf 	bl	8000c90 <HAL_SYSTICK_Config>

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80002f2:	4630      	mov	r0, r6
 80002f4:	f000 fce2 	bl	8000cbc <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80002f8:	f04f 30ff 	mov.w	r0, #4294967295
 80002fc:	4629      	mov	r1, r5
 80002fe:	462a      	mov	r2, r5
 8000300:	f000 fc88 	bl	8000c14 <HAL_NVIC_SetPriority>
}
 8000304:	b014      	add	sp, #80	; 0x50
 8000306:	bd70      	pop	{r4, r5, r6, pc}
 8000308:	40023800 	.word	0x40023800
 800030c:	40007000 	.word	0x40007000

08000310 <main>:
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

int main(void)
{
 8000310:	b500      	push	{lr}
 8000312:	b08b      	sub	sp, #44	; 0x2c
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000314:	2400      	movs	r4, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000316:	f000 fcf5 	bl	8000d04 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 800031a:	f7ff ffa7 	bl	800026c <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800031e:	4b30      	ldr	r3, [pc, #192]	; (80003e0 <main+0xd0>)
 8000320:	9401      	str	r4, [sp, #4]
 8000322:	6b1a      	ldr	r2, [r3, #48]	; 0x30

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000324:	482f      	ldr	r0, [pc, #188]	; (80003e4 <main+0xd4>)
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000326:	f042 0204 	orr.w	r2, r2, #4
 800032a:	631a      	str	r2, [r3, #48]	; 0x30
 800032c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800032e:	f002 0204 	and.w	r2, r2, #4
 8000332:	9201      	str	r2, [sp, #4]
 8000334:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000336:	9402      	str	r4, [sp, #8]
 8000338:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800033a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800033e:	631a      	str	r2, [r3, #48]	; 0x30
 8000340:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000342:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000346:	9202      	str	r2, [sp, #8]
 8000348:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800034a:	9403      	str	r4, [sp, #12]
 800034c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800034e:	f042 0201 	orr.w	r2, r2, #1
 8000352:	631a      	str	r2, [r3, #48]	; 0x30
 8000354:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000356:	f002 0201 	and.w	r2, r2, #1
 800035a:	9203      	str	r2, [sp, #12]
 800035c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800035e:	9404      	str	r4, [sp, #16]
 8000360:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000362:	f042 0202 	orr.w	r2, r2, #2
 8000366:	631a      	str	r2, [r3, #48]	; 0x30
 8000368:	6b1b      	ldr	r3, [r3, #48]	; 0x30

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800036a:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800036c:	f003 0302 	and.w	r3, r3, #2
 8000370:	9304      	str	r3, [sp, #16]
 8000372:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000374:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000378:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800037a:	a905      	add	r1, sp, #20
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800037c:	4b1a      	ldr	r3, [pc, #104]	; (80003e8 <main+0xd8>)
 800037e:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000380:	f000 fb52 	bl	8000a28 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000384:	230c      	movs	r3, #12
 8000386:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000388:	2302      	movs	r3, #2
 800038a:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800038c:	2303      	movs	r3, #3
 800038e:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000390:	4816      	ldr	r0, [pc, #88]	; (80003ec <main+0xdc>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000392:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000394:	2307      	movs	r3, #7
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000396:	a905      	add	r1, sp, #20
  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000398:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800039a:	2520      	movs	r5, #32
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800039c:	f000 fb44 	bl	8000a28 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003a0:	2301      	movs	r3, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80003a2:	4812      	ldr	r0, [pc, #72]	; (80003ec <main+0xdc>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80003a4:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80003a6:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003a8:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003aa:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003ac:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80003ae:	f000 fb3b 	bl	8000a28 <HAL_GPIO_Init>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80003b2:	480e      	ldr	r0, [pc, #56]	; (80003ec <main+0xdc>)
 80003b4:	4629      	mov	r1, r5
 80003b6:	4622      	mov	r2, r4
 80003b8:	f000 fc16 	bl	8000be8 <HAL_GPIO_WritePin>
  while (1)
  {
  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80003bc:	2120      	movs	r1, #32
 80003be:	2201      	movs	r2, #1
 80003c0:	480a      	ldr	r0, [pc, #40]	; (80003ec <main+0xdc>)
 80003c2:	f000 fc11 	bl	8000be8 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 80003c6:	2064      	movs	r0, #100	; 0x64
 80003c8:	f000 fcc4 	bl	8000d54 <HAL_Delay>
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80003cc:	4807      	ldr	r0, [pc, #28]	; (80003ec <main+0xdc>)
 80003ce:	2120      	movs	r1, #32
 80003d0:	2200      	movs	r2, #0
 80003d2:	f000 fc09 	bl	8000be8 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 80003d6:	2064      	movs	r0, #100	; 0x64
 80003d8:	f000 fcbc 	bl	8000d54 <HAL_Delay>
 80003dc:	e7ee      	b.n	80003bc <main+0xac>
 80003de:	bf00      	nop
 80003e0:	40023800 	.word	0x40023800
 80003e4:	40020800 	.word	0x40020800
 80003e8:	10120000 	.word	0x10120000
 80003ec:	40020000 	.word	0x40020000

080003f0 <HAL_RCC_OscConfig>:
  uint32_t tickstart = 0U;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80003f0:	6803      	ldr	r3, [r0, #0]
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature 
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx devices 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80003f2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart = 0U;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80003f6:	07de      	lsls	r6, r3, #31
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature 
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx devices 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80003f8:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80003fa:	d403      	bmi.n	8000404 <HAL_RCC_OscConfig+0x14>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80003fc:	6823      	ldr	r3, [r4, #0]
 80003fe:	079d      	lsls	r5, r3, #30
 8000400:	d44f      	bmi.n	80004a2 <HAL_RCC_OscConfig+0xb2>
 8000402:	e09a      	b.n	800053a <HAL_RCC_OscConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8000404:	4b8b      	ldr	r3, [pc, #556]	; (8000634 <HAL_RCC_OscConfig+0x244>)
 8000406:	689a      	ldr	r2, [r3, #8]
 8000408:	f002 020c 	and.w	r2, r2, #12
 800040c:	2a04      	cmp	r2, #4
 800040e:	d010      	beq.n	8000432 <HAL_RCC_OscConfig+0x42>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8000410:	689a      	ldr	r2, [r3, #8]
 8000412:	f002 020c 	and.w	r2, r2, #12
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8000416:	2a08      	cmp	r2, #8
 8000418:	d102      	bne.n	8000420 <HAL_RCC_OscConfig+0x30>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800041a:	685b      	ldr	r3, [r3, #4]
 800041c:	0258      	lsls	r0, r3, #9
 800041e:	d408      	bmi.n	8000432 <HAL_RCC_OscConfig+0x42>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000420:	4b84      	ldr	r3, [pc, #528]	; (8000634 <HAL_RCC_OscConfig+0x244>)
 8000422:	689a      	ldr	r2, [r3, #8]
 8000424:	f002 020c 	and.w	r2, r2, #12
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8000428:	2a0c      	cmp	r2, #12
 800042a:	d10b      	bne.n	8000444 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800042c:	685b      	ldr	r3, [r3, #4]
 800042e:	0259      	lsls	r1, r3, #9
 8000430:	d508      	bpl.n	8000444 <HAL_RCC_OscConfig+0x54>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000432:	4b80      	ldr	r3, [pc, #512]	; (8000634 <HAL_RCC_OscConfig+0x244>)
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	039a      	lsls	r2, r3, #14
 8000438:	d5e0      	bpl.n	80003fc <HAL_RCC_OscConfig+0xc>
 800043a:	6863      	ldr	r3, [r4, #4]
 800043c:	2b00      	cmp	r3, #0
 800043e:	d1dd      	bne.n	80003fc <HAL_RCC_OscConfig+0xc>
      {
        return HAL_ERROR;
 8000440:	2001      	movs	r0, #1
 8000442:	e169      	b.n	8000718 <HAL_RCC_OscConfig+0x328>
      }
    }
    else
    {
      /* Reset HSEON and HSEBYP bits before configuring the HSE --------------*/
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 8000444:	4d7c      	ldr	r5, [pc, #496]	; (8000638 <HAL_RCC_OscConfig+0x248>)
 8000446:	2300      	movs	r3, #0
 8000448:	702b      	strb	r3, [r5, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800044a:	f000 fc7d 	bl	8000d48 <HAL_GetTick>
 800044e:	4606      	mov	r6, r0
      
      /* Wait till HSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000450:	4b78      	ldr	r3, [pc, #480]	; (8000634 <HAL_RCC_OscConfig+0x244>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	039b      	lsls	r3, r3, #14
 8000456:	d506      	bpl.n	8000466 <HAL_RCC_OscConfig+0x76>
      {
        if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000458:	f000 fc76 	bl	8000d48 <HAL_GetTick>
 800045c:	1b80      	subs	r0, r0, r6
 800045e:	2864      	cmp	r0, #100	; 0x64
 8000460:	d9f6      	bls.n	8000450 <HAL_RCC_OscConfig+0x60>
        {
          return HAL_TIMEOUT;
 8000462:	2003      	movs	r0, #3
 8000464:	e158      	b.n	8000718 <HAL_RCC_OscConfig+0x328>
        }       
      }
      
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000466:	7923      	ldrb	r3, [r4, #4]
 8000468:	702b      	strb	r3, [r5, #0]
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800046a:	6863      	ldr	r3, [r4, #4]
 800046c:	b163      	cbz	r3, 8000488 <HAL_RCC_OscConfig+0x98>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800046e:	f000 fc6b 	bl	8000d48 <HAL_GetTick>
 8000472:	4605      	mov	r5, r0
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000474:	4b6f      	ldr	r3, [pc, #444]	; (8000634 <HAL_RCC_OscConfig+0x244>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	039f      	lsls	r7, r3, #14
 800047a:	d4bf      	bmi.n	80003fc <HAL_RCC_OscConfig+0xc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800047c:	f000 fc64 	bl	8000d48 <HAL_GetTick>
 8000480:	1b40      	subs	r0, r0, r5
 8000482:	2864      	cmp	r0, #100	; 0x64
 8000484:	d9f6      	bls.n	8000474 <HAL_RCC_OscConfig+0x84>
 8000486:	e7ec      	b.n	8000462 <HAL_RCC_OscConfig+0x72>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000488:	f000 fc5e 	bl	8000d48 <HAL_GetTick>
 800048c:	4605      	mov	r5, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800048e:	4b69      	ldr	r3, [pc, #420]	; (8000634 <HAL_RCC_OscConfig+0x244>)
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	039e      	lsls	r6, r3, #14
 8000494:	d5b2      	bpl.n	80003fc <HAL_RCC_OscConfig+0xc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000496:	f000 fc57 	bl	8000d48 <HAL_GetTick>
 800049a:	1b40      	subs	r0, r0, r5
 800049c:	2864      	cmp	r0, #100	; 0x64
 800049e:	d9f6      	bls.n	800048e <HAL_RCC_OscConfig+0x9e>
 80004a0:	e7df      	b.n	8000462 <HAL_RCC_OscConfig+0x72>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80004a2:	4b64      	ldr	r3, [pc, #400]	; (8000634 <HAL_RCC_OscConfig+0x244>)
 80004a4:	689a      	ldr	r2, [r3, #8]
 80004a6:	f012 0f0c 	tst.w	r2, #12
 80004aa:	d010      	beq.n	80004ce <HAL_RCC_OscConfig+0xde>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80004ac:	689a      	ldr	r2, [r3, #8]
 80004ae:	f002 020c 	and.w	r2, r2, #12
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80004b2:	2a08      	cmp	r2, #8
 80004b4:	d102      	bne.n	80004bc <HAL_RCC_OscConfig+0xcc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80004b6:	685b      	ldr	r3, [r3, #4]
 80004b8:	0258      	lsls	r0, r3, #9
 80004ba:	d508      	bpl.n	80004ce <HAL_RCC_OscConfig+0xde>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80004bc:	4b5d      	ldr	r3, [pc, #372]	; (8000634 <HAL_RCC_OscConfig+0x244>)
 80004be:	689a      	ldr	r2, [r3, #8]
 80004c0:	f002 020c 	and.w	r2, r2, #12
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80004c4:	2a0c      	cmp	r2, #12
 80004c6:	d10a      	bne.n	80004de <HAL_RCC_OscConfig+0xee>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80004c8:	685b      	ldr	r3, [r3, #4]
 80004ca:	0259      	lsls	r1, r3, #9
 80004cc:	d407      	bmi.n	80004de <HAL_RCC_OscConfig+0xee>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80004ce:	4b59      	ldr	r3, [pc, #356]	; (8000634 <HAL_RCC_OscConfig+0x244>)
 80004d0:	681a      	ldr	r2, [r3, #0]
 80004d2:	0792      	lsls	r2, r2, #30
 80004d4:	d515      	bpl.n	8000502 <HAL_RCC_OscConfig+0x112>
 80004d6:	68e2      	ldr	r2, [r4, #12]
 80004d8:	2a01      	cmp	r2, #1
 80004da:	d1b1      	bne.n	8000440 <HAL_RCC_OscConfig+0x50>
 80004dc:	e011      	b.n	8000502 <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80004de:	68e2      	ldr	r2, [r4, #12]
 80004e0:	4b56      	ldr	r3, [pc, #344]	; (800063c <HAL_RCC_OscConfig+0x24c>)
 80004e2:	b1e2      	cbz	r2, 800051e <HAL_RCC_OscConfig+0x12e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80004e4:	2201      	movs	r2, #1
 80004e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80004e8:	f000 fc2e 	bl	8000d48 <HAL_GetTick>
 80004ec:	4605      	mov	r5, r0

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80004ee:	4b51      	ldr	r3, [pc, #324]	; (8000634 <HAL_RCC_OscConfig+0x244>)
 80004f0:	681a      	ldr	r2, [r3, #0]
 80004f2:	0797      	lsls	r7, r2, #30
 80004f4:	d405      	bmi.n	8000502 <HAL_RCC_OscConfig+0x112>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80004f6:	f000 fc27 	bl	8000d48 <HAL_GetTick>
 80004fa:	1b40      	subs	r0, r0, r5
 80004fc:	2802      	cmp	r0, #2
 80004fe:	d9f6      	bls.n	80004ee <HAL_RCC_OscConfig+0xfe>
 8000500:	e7af      	b.n	8000462 <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
          }       
        } 
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000502:	681a      	ldr	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000504:	21f8      	movs	r1, #248	; 0xf8
 8000506:	fa91 f1a1 	rbit	r1, r1
 800050a:	6923      	ldr	r3, [r4, #16]
 800050c:	fab1 f181 	clz	r1, r1
 8000510:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000514:	408b      	lsls	r3, r1
 8000516:	4313      	orrs	r3, r2
 8000518:	4a46      	ldr	r2, [pc, #280]	; (8000634 <HAL_RCC_OscConfig+0x244>)
 800051a:	6013      	str	r3, [r2, #0]
 800051c:	e00d      	b.n	800053a <HAL_RCC_OscConfig+0x14a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800051e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000520:	f000 fc12 	bl	8000d48 <HAL_GetTick>
 8000524:	4605      	mov	r5, r0
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000526:	4b43      	ldr	r3, [pc, #268]	; (8000634 <HAL_RCC_OscConfig+0x244>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	079e      	lsls	r6, r3, #30
 800052c:	d505      	bpl.n	800053a <HAL_RCC_OscConfig+0x14a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800052e:	f000 fc0b 	bl	8000d48 <HAL_GetTick>
 8000532:	1b40      	subs	r0, r0, r5
 8000534:	2802      	cmp	r0, #2
 8000536:	d9f6      	bls.n	8000526 <HAL_RCC_OscConfig+0x136>
 8000538:	e793      	b.n	8000462 <HAL_RCC_OscConfig+0x72>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800053a:	6823      	ldr	r3, [r4, #0]
 800053c:	071d      	lsls	r5, r3, #28
 800053e:	d403      	bmi.n	8000548 <HAL_RCC_OscConfig+0x158>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000540:	6823      	ldr	r3, [r4, #0]
 8000542:	0758      	lsls	r0, r3, #29
 8000544:	d54d      	bpl.n	80005e2 <HAL_RCC_OscConfig+0x1f2>
 8000546:	e01f      	b.n	8000588 <HAL_RCC_OscConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000548:	6962      	ldr	r2, [r4, #20]
 800054a:	4b3d      	ldr	r3, [pc, #244]	; (8000640 <HAL_RCC_OscConfig+0x250>)
 800054c:	b172      	cbz	r2, 800056c <HAL_RCC_OscConfig+0x17c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800054e:	2201      	movs	r2, #1
 8000550:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000552:	f000 fbf9 	bl	8000d48 <HAL_GetTick>
 8000556:	4605      	mov	r5, r0
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000558:	4b36      	ldr	r3, [pc, #216]	; (8000634 <HAL_RCC_OscConfig+0x244>)
 800055a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800055c:	0799      	lsls	r1, r3, #30
 800055e:	d4ef      	bmi.n	8000540 <HAL_RCC_OscConfig+0x150>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000560:	f000 fbf2 	bl	8000d48 <HAL_GetTick>
 8000564:	1b40      	subs	r0, r0, r5
 8000566:	2802      	cmp	r0, #2
 8000568:	d9f6      	bls.n	8000558 <HAL_RCC_OscConfig+0x168>
 800056a:	e77a      	b.n	8000462 <HAL_RCC_OscConfig+0x72>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800056c:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800056e:	f000 fbeb 	bl	8000d48 <HAL_GetTick>
 8000572:	4605      	mov	r5, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000574:	4b2f      	ldr	r3, [pc, #188]	; (8000634 <HAL_RCC_OscConfig+0x244>)
 8000576:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000578:	079a      	lsls	r2, r3, #30
 800057a:	d5e1      	bpl.n	8000540 <HAL_RCC_OscConfig+0x150>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800057c:	f000 fbe4 	bl	8000d48 <HAL_GetTick>
 8000580:	1b40      	subs	r0, r0, r5
 8000582:	2802      	cmp	r0, #2
 8000584:	d9f6      	bls.n	8000574 <HAL_RCC_OscConfig+0x184>
 8000586:	e76c      	b.n	8000462 <HAL_RCC_OscConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8000588:	2300      	movs	r3, #0
 800058a:	9301      	str	r3, [sp, #4]
 800058c:	4b29      	ldr	r3, [pc, #164]	; (8000634 <HAL_RCC_OscConfig+0x244>)
 800058e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000590:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000594:	641a      	str	r2, [r3, #64]	; 0x40
 8000596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000598:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800059c:	9301      	str	r3, [sp, #4]
 800059e:	9b01      	ldr	r3, [sp, #4]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80005a0:	4b28      	ldr	r3, [pc, #160]	; (8000644 <HAL_RCC_OscConfig+0x254>)
 80005a2:	681a      	ldr	r2, [r3, #0]
 80005a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80005a8:	601a      	str	r2, [r3, #0]
    
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80005aa:	f000 fbcd 	bl	8000d48 <HAL_GetTick>
 80005ae:	4605      	mov	r5, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80005b0:	4b24      	ldr	r3, [pc, #144]	; (8000644 <HAL_RCC_OscConfig+0x254>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	05db      	lsls	r3, r3, #23
 80005b6:	d517      	bpl.n	80005e8 <HAL_RCC_OscConfig+0x1f8>
        return HAL_TIMEOUT;
      }      
    }
    
    /* Reset LSEON and LSEBYP bits before configuring the LSE ----------------*/
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 80005b8:	4d23      	ldr	r5, [pc, #140]	; (8000648 <HAL_RCC_OscConfig+0x258>)
 80005ba:	2300      	movs	r3, #0
 80005bc:	702b      	strb	r3, [r5, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80005be:	f000 fbc3 	bl	8000d48 <HAL_GetTick>
 80005c2:	4606      	mov	r6, r0
    
    /* Wait till LSE is ready */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80005c4:	4b1b      	ldr	r3, [pc, #108]	; (8000634 <HAL_RCC_OscConfig+0x244>)
 80005c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80005c8:	079f      	lsls	r7, r3, #30
 80005ca:	d413      	bmi.n	80005f4 <HAL_RCC_OscConfig+0x204>
        return HAL_TIMEOUT;
      }    
    } 
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80005cc:	7a23      	ldrb	r3, [r4, #8]
 80005ce:	702b      	strb	r3, [r5, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80005d0:	68a3      	ldr	r3, [r4, #8]
 80005d2:	b1fb      	cbz	r3, 8000614 <HAL_RCC_OscConfig+0x224>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80005d4:	f000 fbb8 	bl	8000d48 <HAL_GetTick>
 80005d8:	4605      	mov	r5, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80005da:	4b16      	ldr	r3, [pc, #88]	; (8000634 <HAL_RCC_OscConfig+0x244>)
 80005dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80005de:	079e      	lsls	r6, r3, #30
 80005e0:	d510      	bpl.n	8000604 <HAL_RCC_OscConfig+0x214>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80005e2:	69a3      	ldr	r3, [r4, #24]
 80005e4:	bb93      	cbnz	r3, 800064c <HAL_RCC_OscConfig+0x25c>
 80005e6:	e07c      	b.n	80006e2 <HAL_RCC_OscConfig+0x2f2>
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80005e8:	f000 fbae 	bl	8000d48 <HAL_GetTick>
 80005ec:	1b40      	subs	r0, r0, r5
 80005ee:	2802      	cmp	r0, #2
 80005f0:	d9de      	bls.n	80005b0 <HAL_RCC_OscConfig+0x1c0>
 80005f2:	e736      	b.n	8000462 <HAL_RCC_OscConfig+0x72>
    tickstart = HAL_GetTick();
    
    /* Wait till LSE is ready */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
    {
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80005f4:	f000 fba8 	bl	8000d48 <HAL_GetTick>
 80005f8:	f241 3388 	movw	r3, #5000	; 0x1388
 80005fc:	1b80      	subs	r0, r0, r6
 80005fe:	4298      	cmp	r0, r3
 8000600:	d9e0      	bls.n	80005c4 <HAL_RCC_OscConfig+0x1d4>
 8000602:	e72e      	b.n	8000462 <HAL_RCC_OscConfig+0x72>
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000604:	f000 fba0 	bl	8000d48 <HAL_GetTick>
 8000608:	f241 3388 	movw	r3, #5000	; 0x1388
 800060c:	1b40      	subs	r0, r0, r5
 800060e:	4298      	cmp	r0, r3
 8000610:	d9e3      	bls.n	80005da <HAL_RCC_OscConfig+0x1ea>
 8000612:	e726      	b.n	8000462 <HAL_RCC_OscConfig+0x72>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000614:	f000 fb98 	bl	8000d48 <HAL_GetTick>
 8000618:	4605      	mov	r5, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800061a:	4b06      	ldr	r3, [pc, #24]	; (8000634 <HAL_RCC_OscConfig+0x244>)
 800061c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800061e:	0798      	lsls	r0, r3, #30
 8000620:	d5df      	bpl.n	80005e2 <HAL_RCC_OscConfig+0x1f2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000622:	f000 fb91 	bl	8000d48 <HAL_GetTick>
 8000626:	f241 3388 	movw	r3, #5000	; 0x1388
 800062a:	1b40      	subs	r0, r0, r5
 800062c:	4298      	cmp	r0, r3
 800062e:	d9f4      	bls.n	800061a <HAL_RCC_OscConfig+0x22a>
 8000630:	e717      	b.n	8000462 <HAL_RCC_OscConfig+0x72>
 8000632:	bf00      	nop
 8000634:	40023800 	.word	0x40023800
 8000638:	40023802 	.word	0x40023802
 800063c:	42470000 	.word	0x42470000
 8000640:	42470e80 	.word	0x42470e80
 8000644:	40007000 	.word	0x40007000
 8000648:	40023870 	.word	0x40023870
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800064c:	4a34      	ldr	r2, [pc, #208]	; (8000720 <HAL_RCC_OscConfig+0x330>)
 800064e:	6892      	ldr	r2, [r2, #8]
 8000650:	f002 020c 	and.w	r2, r2, #12
 8000654:	2a08      	cmp	r2, #8
 8000656:	f43f aef3 	beq.w	8000440 <HAL_RCC_OscConfig+0x50>
 800065a:	4d32      	ldr	r5, [pc, #200]	; (8000724 <HAL_RCC_OscConfig+0x334>)
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800065c:	2b02      	cmp	r3, #2
 800065e:	f04f 0300 	mov.w	r3, #0
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000662:	602b      	str	r3, [r5, #0]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000664:	d14b      	bne.n	80006fe <HAL_RCC_OscConfig+0x30e>
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000666:	f000 fb6f 	bl	8000d48 <HAL_GetTick>
 800066a:	4606      	mov	r6, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800066c:	4b2c      	ldr	r3, [pc, #176]	; (8000720 <HAL_RCC_OscConfig+0x330>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	0199      	lsls	r1, r3, #6
 8000672:	d438      	bmi.n	80006e6 <HAL_RCC_OscConfig+0x2f6>
 8000674:	f647 78c0 	movw	r8, #32704	; 0x7fc0
 8000678:	fa98 f8a8 	rbit	r8, r8
 800067c:	f44f 3c40 	mov.w	ip, #196608	; 0x30000
            return HAL_TIMEOUT;
          }
        }        

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000680:	fab8 f888 	clz	r8, r8
 8000684:	fa9c fcac 	rbit	ip, ip
 8000688:	f04f 6e70 	mov.w	lr, #251658240	; 0xf000000
 800068c:	fabc fc8c 	clz	ip, ip
 8000690:	fa9e feae 	rbit	lr, lr
 8000694:	f04f 47e0 	mov.w	r7, #1879048192	; 0x70000000
 8000698:	fabe fe8e 	clz	lr, lr
 800069c:	fa97 f7a7 	rbit	r7, r7
 80006a0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80006a2:	6a26      	ldr	r6, [r4, #32]
 80006a4:	69e0      	ldr	r0, [r4, #28]
 80006a6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80006a8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80006aa:	0852      	lsrs	r2, r2, #1
 80006ac:	4330      	orrs	r0, r6
 80006ae:	fa01 f108 	lsl.w	r1, r1, r8
 80006b2:	3a01      	subs	r2, #1
 80006b4:	fa02 f20c 	lsl.w	r2, r2, ip
 80006b8:	4301      	orrs	r1, r0
 80006ba:	4311      	orrs	r1, r2
 80006bc:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80006be:	fa03 f30e 	lsl.w	r3, r3, lr
 80006c2:	fab7 f787 	clz	r7, r7
 80006c6:	430b      	orrs	r3, r1
 80006c8:	40ba      	lsls	r2, r7
 80006ca:	4313      	orrs	r3, r2
 80006cc:	4a14      	ldr	r2, [pc, #80]	; (8000720 <HAL_RCC_OscConfig+0x330>)
 80006ce:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80006d0:	2301      	movs	r3, #1
 80006d2:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80006d4:	f000 fb38 	bl	8000d48 <HAL_GetTick>
 80006d8:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80006da:	4b11      	ldr	r3, [pc, #68]	; (8000720 <HAL_RCC_OscConfig+0x330>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	019a      	lsls	r2, r3, #6
 80006e0:	d507      	bpl.n	80006f2 <HAL_RCC_OscConfig+0x302>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 80006e2:	2000      	movs	r0, #0
 80006e4:	e018      	b.n	8000718 <HAL_RCC_OscConfig+0x328>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80006e6:	f000 fb2f 	bl	8000d48 <HAL_GetTick>
 80006ea:	1b80      	subs	r0, r0, r6
 80006ec:	2802      	cmp	r0, #2
 80006ee:	d9bd      	bls.n	800066c <HAL_RCC_OscConfig+0x27c>
 80006f0:	e6b7      	b.n	8000462 <HAL_RCC_OscConfig+0x72>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80006f2:	f000 fb29 	bl	8000d48 <HAL_GetTick>
 80006f6:	1b00      	subs	r0, r0, r4
 80006f8:	2802      	cmp	r0, #2
 80006fa:	d9ee      	bls.n	80006da <HAL_RCC_OscConfig+0x2ea>
 80006fc:	e6b1      	b.n	8000462 <HAL_RCC_OscConfig+0x72>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80006fe:	f000 fb23 	bl	8000d48 <HAL_GetTick>
 8000702:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000704:	4b06      	ldr	r3, [pc, #24]	; (8000720 <HAL_RCC_OscConfig+0x330>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	019b      	lsls	r3, r3, #6
 800070a:	d5ea      	bpl.n	80006e2 <HAL_RCC_OscConfig+0x2f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800070c:	f000 fb1c 	bl	8000d48 <HAL_GetTick>
 8000710:	1b00      	subs	r0, r0, r4
 8000712:	2802      	cmp	r0, #2
 8000714:	d9f6      	bls.n	8000704 <HAL_RCC_OscConfig+0x314>
 8000716:	e6a4      	b.n	8000462 <HAL_RCC_OscConfig+0x72>
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8000718:	b002      	add	sp, #8
 800071a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800071e:	bf00      	nop
 8000720:	40023800 	.word	0x40023800
 8000724:	42470060 	.word	0x42470060

08000728 <HAL_RCC_GetSysClockFreq>:
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000728:	4b38      	ldr	r3, [pc, #224]	; (800080c <HAL_RCC_GetSysClockFreq+0xe4>)
 800072a:	689a      	ldr	r2, [r3, #8]
 800072c:	f002 020c 	and.w	r2, r2, #12
 8000730:	2a08      	cmp	r2, #8
  *         
  *               
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000732:	b510      	push	{r4, lr}
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000734:	d007      	beq.n	8000746 <HAL_RCC_GetSysClockFreq+0x1e>
 8000736:	2a0c      	cmp	r2, #12
 8000738:	d036      	beq.n	80007a8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800073a:	4b35      	ldr	r3, [pc, #212]	; (8000810 <HAL_RCC_GetSysClockFreq+0xe8>)
 800073c:	4835      	ldr	r0, [pc, #212]	; (8000814 <HAL_RCC_GetSysClockFreq+0xec>)
 800073e:	2a04      	cmp	r2, #4
 8000740:	bf18      	it	ne
 8000742:	4618      	movne	r0, r3
 8000744:	bd10      	pop	{r4, pc}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000746:	6859      	ldr	r1, [r3, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000748:	685a      	ldr	r2, [r3, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 800074a:	685c      	ldr	r4, [r3, #4]
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800074c:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000750:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8000754:	f647 72c0 	movw	r2, #32704	; 0x7fc0
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000758:	d00c      	beq.n	8000774 <HAL_RCC_GetSysClockFreq+0x4c>
 800075a:	fa92 f2a2 	rbit	r2, r2
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 800075e:	fab2 f382 	clz	r3, r2
 8000762:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8000766:	4022      	ands	r2, r4
 8000768:	40da      	lsrs	r2, r3
 800076a:	4b2a      	ldr	r3, [pc, #168]	; (8000814 <HAL_RCC_GetSysClockFreq+0xec>)
 800076c:	fbb3 f3f1 	udiv	r3, r3, r1
 8000770:	4353      	muls	r3, r2
 8000772:	e00b      	b.n	800078c <HAL_RCC_GetSysClockFreq+0x64>
 8000774:	fa92 f2a2 	rbit	r2, r2
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8000778:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800077c:	4824      	ldr	r0, [pc, #144]	; (8000810 <HAL_RCC_GetSysClockFreq+0xe8>)
 800077e:	fab2 f282 	clz	r2, r2
 8000782:	4023      	ands	r3, r4
 8000784:	40d3      	lsrs	r3, r2
 8000786:	fbb0 f1f1 	udiv	r1, r0, r1
 800078a:	434b      	muls	r3, r1
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 800078c:	4a1f      	ldr	r2, [pc, #124]	; (800080c <HAL_RCC_GetSysClockFreq+0xe4>)
 800078e:	6850      	ldr	r0, [r2, #4]
 8000790:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000794:	fa92 f2a2 	rbit	r2, r2
 8000798:	fab2 f282 	clz	r2, r2
 800079c:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
 80007a0:	40d0      	lsrs	r0, r2
 80007a2:	3001      	adds	r0, #1
 80007a4:	0040      	lsls	r0, r0, #1
 80007a6:	e02d      	b.n	8000804 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80007a8:	6859      	ldr	r1, [r3, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80007aa:	685a      	ldr	r2, [r3, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 80007ac:	685c      	ldr	r4, [r3, #4]
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80007ae:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80007b2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80007b6:	f647 72c0 	movw	r2, #32704	; 0x7fc0
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80007ba:	d00c      	beq.n	80007d6 <HAL_RCC_GetSysClockFreq+0xae>
 80007bc:	fa92 f2a2 	rbit	r2, r2
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 80007c0:	fab2 f382 	clz	r3, r2
 80007c4:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 80007c8:	4022      	ands	r2, r4
 80007ca:	40da      	lsrs	r2, r3
 80007cc:	4b11      	ldr	r3, [pc, #68]	; (8000814 <HAL_RCC_GetSysClockFreq+0xec>)
 80007ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80007d2:	4353      	muls	r3, r2
 80007d4:	e00b      	b.n	80007ee <HAL_RCC_GetSysClockFreq+0xc6>
 80007d6:	fa92 f2a2 	rbit	r2, r2
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 80007da:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80007de:	480c      	ldr	r0, [pc, #48]	; (8000810 <HAL_RCC_GetSysClockFreq+0xe8>)
 80007e0:	fab2 f282 	clz	r2, r2
 80007e4:	4023      	ands	r3, r4
 80007e6:	40d3      	lsrs	r3, r2
 80007e8:	fbb0 f1f1 	udiv	r1, r0, r1
 80007ec:	434b      	muls	r3, r1
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> POSITION_VAL(RCC_PLLCFGR_PLLR));
 80007ee:	4a07      	ldr	r2, [pc, #28]	; (800080c <HAL_RCC_GetSysClockFreq+0xe4>)
 80007f0:	6850      	ldr	r0, [r2, #4]
 80007f2:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 80007f6:	fa92 f2a2 	rbit	r2, r2
 80007fa:	fab2 f282 	clz	r2, r2
 80007fe:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8000802:	40d0      	lsrs	r0, r2
      
      sysclockfreq = pllvco/pllr;
 8000804:	fbb3 f0f0 	udiv	r0, r3, r0
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000808:	bd10      	pop	{r4, pc}
 800080a:	bf00      	nop
 800080c:	40023800 	.word	0x40023800
 8000810:	00f42400 	.word	0x00f42400
 8000814:	007a1200 	.word	0x007a1200

08000818 <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000818:	4b4e      	ldr	r3, [pc, #312]	; (8000954 <HAL_RCC_ClockConfig+0x13c>)
 800081a:	681a      	ldr	r2, [r3, #0]
 800081c:	f002 020f 	and.w	r2, r2, #15
 8000820:	4291      	cmp	r1, r2
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000822:	b570      	push	{r4, r5, r6, lr}
 8000824:	4604      	mov	r4, r0
 8000826:	460d      	mov	r5, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000828:	d80a      	bhi.n	8000840 <HAL_RCC_ClockConfig+0x28>
      return HAL_ERROR;
    }
  }
 
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800082a:	6823      	ldr	r3, [r4, #0]
 800082c:	0798      	lsls	r0, r3, #30
 800082e:	d510      	bpl.n	8000852 <HAL_RCC_ClockConfig+0x3a>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000830:	4a49      	ldr	r2, [pc, #292]	; (8000958 <HAL_RCC_ClockConfig+0x140>)
 8000832:	68a1      	ldr	r1, [r4, #8]
 8000834:	6890      	ldr	r0, [r2, #8]
 8000836:	f020 00f0 	bic.w	r0, r0, #240	; 0xf0
 800083a:	4301      	orrs	r1, r0
 800083c:	6091      	str	r1, [r2, #8]
 800083e:	e008      	b.n	8000852 <HAL_RCC_ClockConfig+0x3a>
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000840:	b2ca      	uxtb	r2, r1
 8000842:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	f003 030f 	and.w	r3, r3, #15
 800084a:	428b      	cmp	r3, r1
 800084c:	d0ed      	beq.n	800082a <HAL_RCC_ClockConfig+0x12>
    {
      return HAL_ERROR;
 800084e:	2001      	movs	r0, #1
 8000850:	bd70      	pop	{r4, r5, r6, pc}
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }
  
  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000852:	07d9      	lsls	r1, r3, #31
 8000854:	d406      	bmi.n	8000864 <HAL_RCC_ClockConfig+0x4c>
      }
    }
  }    
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000856:	4b3f      	ldr	r3, [pc, #252]	; (8000954 <HAL_RCC_ClockConfig+0x13c>)
 8000858:	681a      	ldr	r2, [r3, #0]
 800085a:	f002 020f 	and.w	r2, r2, #15
 800085e:	4295      	cmp	r5, r2
 8000860:	d357      	bcc.n	8000912 <HAL_RCC_ClockConfig+0xfa>
 8000862:	e05d      	b.n	8000920 <HAL_RCC_ClockConfig+0x108>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000864:	6863      	ldr	r3, [r4, #4]
 8000866:	4a3c      	ldr	r2, [pc, #240]	; (8000958 <HAL_RCC_ClockConfig+0x140>)
 8000868:	2b01      	cmp	r3, #1
 800086a:	d103      	bne.n	8000874 <HAL_RCC_ClockConfig+0x5c>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800086c:	6812      	ldr	r2, [r2, #0]
 800086e:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8000872:	e008      	b.n	8000886 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8000874:	1e99      	subs	r1, r3, #2
 8000876:	2901      	cmp	r1, #1
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000878:	6812      	ldr	r2, [r2, #0]
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 800087a:	d802      	bhi.n	8000882 <HAL_RCC_ClockConfig+0x6a>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800087c:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8000880:	e001      	b.n	8000886 <HAL_RCC_ClockConfig+0x6e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000882:	f012 0f02 	tst.w	r2, #2
 8000886:	d0e2      	beq.n	800084e <HAL_RCC_ClockConfig+0x36>
      {
        return HAL_ERROR;
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000888:	4a33      	ldr	r2, [pc, #204]	; (8000958 <HAL_RCC_ClockConfig+0x140>)
 800088a:	6891      	ldr	r1, [r2, #8]
 800088c:	f021 0103 	bic.w	r1, r1, #3
 8000890:	430b      	orrs	r3, r1
 8000892:	6093      	str	r3, [r2, #8]
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8000894:	f000 fa58 	bl	8000d48 <HAL_GetTick>
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000898:	6863      	ldr	r3, [r4, #4]
 800089a:	2b01      	cmp	r3, #1
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800089c:	4606      	mov	r6, r0
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800089e:	d10e      	bne.n	80008be <HAL_RCC_ClockConfig+0xa6>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80008a0:	4b2d      	ldr	r3, [pc, #180]	; (8000958 <HAL_RCC_ClockConfig+0x140>)
 80008a2:	689b      	ldr	r3, [r3, #8]
 80008a4:	f003 030c 	and.w	r3, r3, #12
 80008a8:	2b04      	cmp	r3, #4
 80008aa:	d0d4      	beq.n	8000856 <HAL_RCC_ClockConfig+0x3e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80008ac:	f000 fa4c 	bl	8000d48 <HAL_GetTick>
 80008b0:	f241 3388 	movw	r3, #5000	; 0x1388
 80008b4:	1b80      	subs	r0, r0, r6
 80008b6:	4298      	cmp	r0, r3
 80008b8:	d9f2      	bls.n	80008a0 <HAL_RCC_ClockConfig+0x88>
        {
          return HAL_TIMEOUT;
 80008ba:	2003      	movs	r0, #3
 80008bc:	bd70      	pop	{r4, r5, r6, pc}
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80008be:	2b02      	cmp	r3, #2
 80008c0:	d10d      	bne.n	80008de <HAL_RCC_ClockConfig+0xc6>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80008c2:	4b25      	ldr	r3, [pc, #148]	; (8000958 <HAL_RCC_ClockConfig+0x140>)
 80008c4:	689b      	ldr	r3, [r3, #8]
 80008c6:	f003 030c 	and.w	r3, r3, #12
 80008ca:	2b08      	cmp	r3, #8
 80008cc:	d0c3      	beq.n	8000856 <HAL_RCC_ClockConfig+0x3e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80008ce:	f000 fa3b 	bl	8000d48 <HAL_GetTick>
 80008d2:	f241 3388 	movw	r3, #5000	; 0x1388
 80008d6:	1b80      	subs	r0, r0, r6
 80008d8:	4298      	cmp	r0, r3
 80008da:	d9f2      	bls.n	80008c2 <HAL_RCC_ClockConfig+0xaa>
 80008dc:	e7ed      	b.n	80008ba <HAL_RCC_ClockConfig+0xa2>
        {
          return HAL_TIMEOUT;
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 80008de:	2b03      	cmp	r3, #3
 80008e0:	d005      	beq.n	80008ee <HAL_RCC_ClockConfig+0xd6>
        }
      }
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80008e2:	4b1d      	ldr	r3, [pc, #116]	; (8000958 <HAL_RCC_ClockConfig+0x140>)
 80008e4:	689b      	ldr	r3, [r3, #8]
 80008e6:	f013 0f0c 	tst.w	r3, #12
 80008ea:	d10a      	bne.n	8000902 <HAL_RCC_ClockConfig+0xea>
 80008ec:	e7b3      	b.n	8000856 <HAL_RCC_ClockConfig+0x3e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 80008ee:	4b1a      	ldr	r3, [pc, #104]	; (8000958 <HAL_RCC_ClockConfig+0x140>)
 80008f0:	689b      	ldr	r3, [r3, #8]
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80008f2:	f000 fa29 	bl	8000d48 <HAL_GetTick>
 80008f6:	f241 3388 	movw	r3, #5000	; 0x1388
 80008fa:	1b80      	subs	r0, r0, r6
 80008fc:	4298      	cmp	r0, r3
 80008fe:	d9f6      	bls.n	80008ee <HAL_RCC_ClockConfig+0xd6>
 8000900:	e7db      	b.n	80008ba <HAL_RCC_ClockConfig+0xa2>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000902:	f000 fa21 	bl	8000d48 <HAL_GetTick>
 8000906:	f241 3388 	movw	r3, #5000	; 0x1388
 800090a:	1b80      	subs	r0, r0, r6
 800090c:	4298      	cmp	r0, r3
 800090e:	d9e8      	bls.n	80008e2 <HAL_RCC_ClockConfig+0xca>
 8000910:	e7d3      	b.n	80008ba <HAL_RCC_ClockConfig+0xa2>
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
  { 
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000912:	b2ea      	uxtb	r2, r5
 8000914:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	f003 030f 	and.w	r3, r3, #15
 800091c:	42ab      	cmp	r3, r5
 800091e:	d196      	bne.n	800084e <HAL_RCC_ClockConfig+0x36>
      return HAL_ERROR;
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000920:	6823      	ldr	r3, [r4, #0]
 8000922:	075a      	lsls	r2, r3, #29
 8000924:	d506      	bpl.n	8000934 <HAL_RCC_ClockConfig+0x11c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000926:	4a0c      	ldr	r2, [pc, #48]	; (8000958 <HAL_RCC_ClockConfig+0x140>)
 8000928:	68e1      	ldr	r1, [r4, #12]
 800092a:	6890      	ldr	r0, [r2, #8]
 800092c:	f420 50e0 	bic.w	r0, r0, #7168	; 0x1c00
 8000930:	4301      	orrs	r1, r0
 8000932:	6091      	str	r1, [r2, #8]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000934:	071b      	lsls	r3, r3, #28
 8000936:	d507      	bpl.n	8000948 <HAL_RCC_ClockConfig+0x130>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000938:	4b07      	ldr	r3, [pc, #28]	; (8000958 <HAL_RCC_ClockConfig+0x140>)
 800093a:	6921      	ldr	r1, [r4, #16]
 800093c:	689a      	ldr	r2, [r3, #8]
 800093e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000942:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8000946:	609a      	str	r2, [r3, #8]
  }

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8000948:	2000      	movs	r0, #0
 800094a:	f000 f9c8 	bl	8000cde <HAL_InitTick>
  
  return HAL_OK;
 800094e:	2000      	movs	r0, #0
}
 8000950:	bd70      	pop	{r4, r5, r6, pc}
 8000952:	bf00      	nop
 8000954:	40023c00 	.word	0x40023c00
 8000958:	40023800 	.word	0x40023800

0800095c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800095c:	b508      	push	{r3, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 800095e:	f7ff fee3 	bl	8000728 <HAL_RCC_GetSysClockFreq>
 8000962:	4b08      	ldr	r3, [pc, #32]	; (8000984 <HAL_RCC_GetHCLKFreq+0x28>)
 8000964:	22f0      	movs	r2, #240	; 0xf0
 8000966:	689b      	ldr	r3, [r3, #8]
 8000968:	fa92 f2a2 	rbit	r2, r2
 800096c:	fab2 f282 	clz	r2, r2
 8000970:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000974:	40d3      	lsrs	r3, r2
 8000976:	4a04      	ldr	r2, [pc, #16]	; (8000988 <HAL_RCC_GetHCLKFreq+0x2c>)
 8000978:	5cd3      	ldrb	r3, [r2, r3]
 800097a:	40d8      	lsrs	r0, r3
 800097c:	4b03      	ldr	r3, [pc, #12]	; (800098c <HAL_RCC_GetHCLKFreq+0x30>)
 800097e:	6018      	str	r0, [r3, #0]
  return SystemCoreClock;
}
 8000980:	bd08      	pop	{r3, pc}
 8000982:	bf00      	nop
 8000984:	40023800 	.word	0x40023800
 8000988:	08000e7c 	.word	0x08000e7c
 800098c:	20000000 	.word	0x20000000

08000990 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8000990:	b513      	push	{r0, r1, r4, lr}
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	9301      	str	r3, [sp, #4]
 8000996:	4b22      	ldr	r3, [pc, #136]	; (8000a20 <HAL_PWREx_EnableOverDrive+0x90>)
 8000998:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800099a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800099e:	641a      	str	r2, [r3, #64]	; 0x40
 80009a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009a6:	9301      	str	r3, [sp, #4]
 80009a8:	9b01      	ldr	r3, [sp, #4]
 80009aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009ae:	fa93 f3a3 	rbit	r3, r3
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80009b2:	fab3 f383 	clz	r3, r3
 80009b6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80009ba:	f503 3360 	add.w	r3, r3, #229376	; 0x38000
 80009be:	009b      	lsls	r3, r3, #2
 80009c0:	2201      	movs	r2, #1
 80009c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80009c4:	f000 f9c0 	bl	8000d48 <HAL_GetTick>
 80009c8:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80009ca:	4b16      	ldr	r3, [pc, #88]	; (8000a24 <HAL_PWREx_EnableOverDrive+0x94>)
 80009cc:	685b      	ldr	r3, [r3, #4]
 80009ce:	03da      	lsls	r2, r3, #15
 80009d0:	d407      	bmi.n	80009e2 <HAL_PWREx_EnableOverDrive+0x52>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80009d2:	f000 f9b9 	bl	8000d48 <HAL_GetTick>
 80009d6:	1b00      	subs	r0, r0, r4
 80009d8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80009dc:	d9f5      	bls.n	80009ca <HAL_PWREx_EnableOverDrive+0x3a>
    {
      return HAL_TIMEOUT;
 80009de:	2003      	movs	r0, #3
 80009e0:	e01b      	b.n	8000a1a <HAL_PWREx_EnableOverDrive+0x8a>
 80009e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80009e6:	fa93 f3a3 	rbit	r3, r3
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80009ea:	fab3 f383 	clz	r3, r3
 80009ee:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80009f2:	f503 3360 	add.w	r3, r3, #229376	; 0x38000
 80009f6:	009b      	lsls	r3, r3, #2
 80009f8:	2201      	movs	r2, #1
 80009fa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80009fc:	f000 f9a4 	bl	8000d48 <HAL_GetTick>
 8000a00:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000a02:	4b08      	ldr	r3, [pc, #32]	; (8000a24 <HAL_PWREx_EnableOverDrive+0x94>)
 8000a04:	685b      	ldr	r3, [r3, #4]
 8000a06:	039b      	lsls	r3, r3, #14
 8000a08:	d406      	bmi.n	8000a18 <HAL_PWREx_EnableOverDrive+0x88>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000a0a:	f000 f99d 	bl	8000d48 <HAL_GetTick>
 8000a0e:	1b00      	subs	r0, r0, r4
 8000a10:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000a14:	d9f5      	bls.n	8000a02 <HAL_PWREx_EnableOverDrive+0x72>
 8000a16:	e7e2      	b.n	80009de <HAL_PWREx_EnableOverDrive+0x4e>
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8000a18:	2000      	movs	r0, #0
}
 8000a1a:	b002      	add	sp, #8
 8000a1c:	bd10      	pop	{r4, pc}
 8000a1e:	bf00      	nop
 8000a20:	40023800 	.word	0x40023800
 8000a24:	40007000 	.word	0x40007000

08000a28 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a28:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a2c:	680f      	ldr	r7, [r1, #0]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000a2e:	2300      	movs	r3, #0
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
 8000a30:	2201      	movs	r2, #1
 8000a32:	409a      	lsls	r2, r3
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a34:	ea02 0407 	and.w	r4, r2, r7

    if(iocurrent == ioposition)
 8000a38:	4294      	cmp	r4, r2
 8000a3a:	f040 80c7 	bne.w	8000bcc <HAL_GPIO_Init+0x1a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a3e:	684a      	ldr	r2, [r1, #4]
 8000a40:	f022 0610 	bic.w	r6, r2, #16
 8000a44:	2e02      	cmp	r6, #2
 8000a46:	d116      	bne.n	8000a76 <HAL_GPIO_Init+0x4e>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000a48:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 8000a4c:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8000a50:	f003 0807 	and.w	r8, r3, #7
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000a54:	f8dc 5020 	ldr.w	r5, [ip, #32]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8000a58:	ea4f 0888 	mov.w	r8, r8, lsl #2
 8000a5c:	f04f 090f 	mov.w	r9, #15
 8000a60:	fa09 f908 	lsl.w	r9, r9, r8
 8000a64:	ea25 0909 	bic.w	r9, r5, r9
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000a68:	690d      	ldr	r5, [r1, #16]
 8000a6a:	fa05 f808 	lsl.w	r8, r5, r8
 8000a6e:	ea49 0508 	orr.w	r5, r9, r8
        GPIOx->AFR[position >> 3U] = temp;
 8000a72:	f8cc 5020 	str.w	r5, [ip, #32]
 8000a76:	005d      	lsls	r5, r3, #1
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000a78:	f04f 0c03 	mov.w	ip, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a7c:	f8d0 9000 	ldr.w	r9, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000a80:	fa0c fc05 	lsl.w	ip, ip, r5
 8000a84:	ea6f 0c0c 	mvn.w	ip, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a88:	f002 0803 	and.w	r8, r2, #3
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000a8c:	ea0c 0909 	and.w	r9, ip, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a90:	fa08 f805 	lsl.w	r8, r8, r5
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a94:	3e01      	subs	r6, #1
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a96:	ea49 0808 	orr.w	r8, r9, r8
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a9a:	2e01      	cmp	r6, #1

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
      GPIOx->MODER = temp;
 8000a9c:	f8c0 8000 	str.w	r8, [r0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000aa0:	d810      	bhi.n	8000ac4 <HAL_GPIO_Init+0x9c>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000aa2:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000aa4:	ea0c 0806 	and.w	r8, ip, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000aa8:	68ce      	ldr	r6, [r1, #12]
 8000aaa:	40ae      	lsls	r6, r5
 8000aac:	ea48 0606 	orr.w	r6, r8, r6
        GPIOx->OSPEEDR = temp;
 8000ab0:	6086      	str	r6, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ab2:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ab4:	ea26 0804 	bic.w	r8, r6, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000ab8:	f3c2 1600 	ubfx	r6, r2, #4, #1
 8000abc:	409e      	lsls	r6, r3
 8000abe:	ea48 0606 	orr.w	r6, r8, r6
        GPIOx->OTYPER = temp;
 8000ac2:	6046      	str	r6, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ac4:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ac6:	ea0c 0c06 	and.w	ip, ip, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000aca:	688e      	ldr	r6, [r1, #8]
 8000acc:	40ae      	lsls	r6, r5
 8000ace:	ea4c 0506 	orr.w	r5, ip, r6
      GPIOx->PUPDR = temp;
 8000ad2:	60c5      	str	r5, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ad4:	00d5      	lsls	r5, r2, #3
 8000ad6:	d579      	bpl.n	8000bcc <HAL_GPIO_Init+0x1a4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ad8:	4e40      	ldr	r6, [pc, #256]	; (8000bdc <HAL_GPIO_Init+0x1b4>)
 8000ada:	2500      	movs	r5, #0
 8000adc:	9501      	str	r5, [sp, #4]
 8000ade:	f8d6 c044 	ldr.w	ip, [r6, #68]	; 0x44
 8000ae2:	f44c 4c80 	orr.w	ip, ip, #16384	; 0x4000
 8000ae6:	f8c6 c044 	str.w	ip, [r6, #68]	; 0x44
 8000aea:	6c76      	ldr	r6, [r6, #68]	; 0x44
 8000aec:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8000af0:	9601      	str	r6, [sp, #4]
 8000af2:	9e01      	ldr	r6, [sp, #4]
 8000af4:	f023 0603 	bic.w	r6, r3, #3
 8000af8:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8000afc:	f506 369c 	add.w	r6, r6, #79872	; 0x13800

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000b00:	f003 0c03 	and.w	ip, r3, #3
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
 8000b04:	f8d6 9008 	ldr.w	r9, [r6, #8]
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000b08:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000b0c:	f04f 080f 	mov.w	r8, #15
 8000b10:	fa08 f80c 	lsl.w	r8, r8, ip
 8000b14:	ea29 0808 	bic.w	r8, r9, r8
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000b18:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 8000be4 <HAL_GPIO_Init+0x1bc>
 8000b1c:	4548      	cmp	r0, r9
 8000b1e:	d025      	beq.n	8000b6c <HAL_GPIO_Init+0x144>
 8000b20:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 8000b24:	f505 3501 	add.w	r5, r5, #132096	; 0x20400
 8000b28:	42a8      	cmp	r0, r5
 8000b2a:	d016      	beq.n	8000b5a <HAL_GPIO_Init+0x132>
 8000b2c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000b30:	42a8      	cmp	r0, r5
 8000b32:	d014      	beq.n	8000b5e <HAL_GPIO_Init+0x136>
 8000b34:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000b38:	42a8      	cmp	r0, r5
 8000b3a:	d012      	beq.n	8000b62 <HAL_GPIO_Init+0x13a>
 8000b3c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000b40:	42a8      	cmp	r0, r5
 8000b42:	d010      	beq.n	8000b66 <HAL_GPIO_Init+0x13e>
 8000b44:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000b48:	42a8      	cmp	r0, r5
 8000b4a:	d00e      	beq.n	8000b6a <HAL_GPIO_Init+0x142>
 8000b4c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000b50:	42a8      	cmp	r0, r5
 8000b52:	bf14      	ite	ne
 8000b54:	2508      	movne	r5, #8
 8000b56:	2506      	moveq	r5, #6
 8000b58:	e008      	b.n	8000b6c <HAL_GPIO_Init+0x144>
 8000b5a:	2501      	movs	r5, #1
 8000b5c:	e006      	b.n	8000b6c <HAL_GPIO_Init+0x144>
 8000b5e:	2502      	movs	r5, #2
 8000b60:	e004      	b.n	8000b6c <HAL_GPIO_Init+0x144>
 8000b62:	2503      	movs	r5, #3
 8000b64:	e002      	b.n	8000b6c <HAL_GPIO_Init+0x144>
 8000b66:	2504      	movs	r5, #4
 8000b68:	e000      	b.n	8000b6c <HAL_GPIO_Init+0x144>
 8000b6a:	2505      	movs	r5, #5
 8000b6c:	fa05 f50c 	lsl.w	r5, r5, ip
 8000b70:	ea45 0508 	orr.w	r5, r5, r8
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000b74:	60b5      	str	r5, [r6, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b76:	4e1a      	ldr	r6, [pc, #104]	; (8000be0 <HAL_GPIO_Init+0x1b8>)
 8000b78:	f8d6 c000 	ldr.w	ip, [r6]
        temp &= ~((uint32_t)iocurrent);
 8000b7c:	43e5      	mvns	r5, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b7e:	f412 3f80 	tst.w	r2, #65536	; 0x10000
        {
          temp |= iocurrent;
 8000b82:	bf14      	ite	ne
 8000b84:	ea44 0c0c 	orrne.w	ip, r4, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
 8000b88:	ea05 0c0c 	andeq.w	ip, r5, ip
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 8000b8c:	f8c6 c000 	str.w	ip, [r6]

        temp = EXTI->EMR;
 8000b90:	6876      	ldr	r6, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b92:	f412 3f00 	tst.w	r2, #131072	; 0x20000
        {
          temp |= iocurrent;
 8000b96:	bf14      	ite	ne
 8000b98:	ea44 0c06 	orrne.w	ip, r4, r6
          temp |= iocurrent;
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
 8000b9c:	ea05 0c06 	andeq.w	ip, r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 8000ba0:	4e0f      	ldr	r6, [pc, #60]	; (8000be0 <HAL_GPIO_Init+0x1b8>)
 8000ba2:	f8c6 c004 	str.w	ip, [r6, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ba6:	f8d6 c008 	ldr.w	ip, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000baa:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
        {
          temp |= iocurrent;
 8000bae:	bf14      	ite	ne
 8000bb0:	ea44 0c0c 	orrne.w	ip, r4, ip
        }
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
 8000bb4:	ea05 0c0c 	andeq.w	ip, r5, ip
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 8000bb8:	f8c6 c008 	str.w	ip, [r6, #8]

        temp = EXTI->FTSR;
 8000bbc:	68f6      	ldr	r6, [r6, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bbe:	0292      	lsls	r2, r2, #10
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 8000bc0:	4a07      	ldr	r2, [pc, #28]	; (8000be0 <HAL_GPIO_Init+0x1b8>)
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
 8000bc2:	bf54      	ite	pl
 8000bc4:	ea05 0406 	andpl.w	r4, r5, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          temp |= iocurrent;
 8000bc8:	4334      	orrmi	r4, r6
        }
        EXTI->FTSR = temp;
 8000bca:	60d4      	str	r4, [r2, #12]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000bcc:	3301      	adds	r3, #1
 8000bce:	2b10      	cmp	r3, #16
 8000bd0:	f47f af2e 	bne.w	8000a30 <HAL_GPIO_Init+0x8>
        }
        EXTI->FTSR = temp;
      }
    }
  }
}
 8000bd4:	b003      	add	sp, #12
 8000bd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000bda:	bf00      	nop
 8000bdc:	40023800 	.word	0x40023800
 8000be0:	40013c00 	.word	0x40013c00
 8000be4:	40020000 	.word	0x40020000

08000be8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000be8:	b902      	cbnz	r2, 8000bec <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000bea:	0409      	lsls	r1, r1, #16
 8000bec:	6181      	str	r1, [r0, #24]
 8000bee:	4770      	bx	lr

08000bf0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bf0:	4a07      	ldr	r2, [pc, #28]	; (8000c10 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000bf2:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bf4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000bf8:	041b      	lsls	r3, r3, #16
 8000bfa:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bfc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c04:	f000 0007 	and.w	r0, r0, #7

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8000c08:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8000c0c:	60d3      	str	r3, [r2, #12]
 8000c0e:	4770      	bx	lr
 8000c10:	e000ed00 	.word	0xe000ed00

08000c14 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c14:	4b16      	ldr	r3, [pc, #88]	; (8000c70 <HAL_NVIC_SetPriority+0x5c>)
 8000c16:	68db      	ldr	r3, [r3, #12]
 8000c18:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c1c:	b570      	push	{r4, r5, r6, lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c1e:	1d1d      	adds	r5, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c20:	f1c3 0407 	rsb	r4, r3, #7
 8000c24:	2c04      	cmp	r4, #4
 8000c26:	bf28      	it	cs
 8000c28:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c2a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c2c:	f04f 0501 	mov.w	r5, #1
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c30:	bf8c      	ite	hi
 8000c32:	3b03      	subhi	r3, #3
 8000c34:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c36:	fa05 f404 	lsl.w	r4, r5, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c3a:	fa05 f603 	lsl.w	r6, r5, r3

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c3e:	3c01      	subs	r4, #1
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c40:	3e01      	subs	r6, #1

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c42:	4021      	ands	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c44:	4032      	ands	r2, r6

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c46:	fa01 f303 	lsl.w	r3, r1, r3
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8000c4a:	4313      	orrs	r3, r2
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8000c4c:	2800      	cmp	r0, #0
 8000c4e:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8000c52:	da05      	bge.n	8000c60 <HAL_NVIC_SetPriority+0x4c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c54:	b2da      	uxtb	r2, r3
 8000c56:	f000 000f 	and.w	r0, r0, #15
 8000c5a:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <HAL_NVIC_SetPriority+0x60>)
 8000c5c:	541a      	strb	r2, [r3, r0]
 8000c5e:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c60:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000c64:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000c68:	b2db      	uxtb	r3, r3
 8000c6a:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
 8000c6e:	bd70      	pop	{r4, r5, r6, pc}
 8000c70:	e000ed00 	.word	0xe000ed00
 8000c74:	e000ed14 	.word	0xe000ed14

08000c78 <HAL_NVIC_EnableIRQ>:
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000c78:	0942      	lsrs	r2, r0, #5
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	f000 001f 	and.w	r0, r0, #31
 8000c80:	fa03 f000 	lsl.w	r0, r3, r0
 8000c84:	4b01      	ldr	r3, [pc, #4]	; (8000c8c <HAL_NVIC_EnableIRQ+0x14>)
 8000c86:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000c8a:	4770      	bx	lr
 8000c8c:	e000e100 	.word	0xe000e100

08000c90 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c90:	3801      	subs	r0, #1
 8000c92:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c96:	d20a      	bcs.n	8000cae <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c98:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <HAL_SYSTICK_Config+0x24>)
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c9a:	4a07      	ldr	r2, [pc, #28]	; (8000cb8 <HAL_SYSTICK_Config+0x28>)
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c9c:	6058      	str	r0, [r3, #4]
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c9e:	21f0      	movs	r1, #240	; 0xf0
 8000ca0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ca4:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ca6:	2207      	movs	r2, #7
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ca8:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	4770      	bx	lr
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cae:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	e000e010 	.word	0xe000e010
 8000cb8:	e000ed00 	.word	0xe000ed00

08000cbc <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000cbc:	4b04      	ldr	r3, [pc, #16]	; (8000cd0 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000cbe:	681a      	ldr	r2, [r3, #0]
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000cc0:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000cc2:	bf0c      	ite	eq
 8000cc4:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000cc8:	f022 0204 	bicne.w	r2, r2, #4
 8000ccc:	601a      	str	r2, [r3, #0]
 8000cce:	4770      	bx	lr
 8000cd0:	e000e010 	.word	0xe000e010

08000cd4 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000cd4:	4770      	bx	lr

08000cd6 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000cd6:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000cd8:	f7ff fffc 	bl	8000cd4 <HAL_SYSTICK_Callback>
 8000cdc:	bd08      	pop	{r3, pc}

08000cde <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cde:	b510      	push	{r4, lr}
 8000ce0:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8000ce2:	f7ff fe3b 	bl	800095c <HAL_RCC_GetHCLKFreq>
 8000ce6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cea:	fbb0 f0f3 	udiv	r0, r0, r3
 8000cee:	f7ff ffcf 	bl	8000c90 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000cf2:	f04f 30ff 	mov.w	r0, #4294967295
 8000cf6:	4621      	mov	r1, r4
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	f7ff ff8b 	bl	8000c14 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8000cfe:	2000      	movs	r0, #0
 8000d00:	bd10      	pop	{r4, pc}
	...

08000d04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d04:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d06:	4b0b      	ldr	r3, [pc, #44]	; (8000d34 <HAL_Init+0x30>)
 8000d08:	681a      	ldr	r2, [r3, #0]
 8000d0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000d0e:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d10:	681a      	ldr	r2, [r3, #0]
 8000d12:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000d16:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000d1e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d20:	2003      	movs	r0, #3
 8000d22:	f7ff ff65 	bl	8000bf0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d26:	2000      	movs	r0, #0
 8000d28:	f7ff ffd9 	bl	8000cde <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000d2c:	f7ff fa72 	bl	8000214 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 8000d30:	2000      	movs	r0, #0
 8000d32:	bd08      	pop	{r3, pc}
 8000d34:	40023c00 	.word	0x40023c00

08000d38 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000d38:	4b02      	ldr	r3, [pc, #8]	; (8000d44 <HAL_IncTick+0xc>)
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	3201      	adds	r2, #1
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	20000020 	.word	0x20000020

08000d48 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000d48:	4b01      	ldr	r3, [pc, #4]	; (8000d50 <HAL_GetTick+0x8>)
 8000d4a:	6818      	ldr	r0, [r3, #0]
}
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	20000020 	.word	0x20000020

08000d54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000d54:	b513      	push	{r0, r1, r4, lr}
 8000d56:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0U;
  tickstart = HAL_GetTick();
 8000d58:	f7ff fff6 	bl	8000d48 <HAL_GetTick>
 8000d5c:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8000d5e:	f7ff fff3 	bl	8000d48 <HAL_GetTick>
 8000d62:	9b01      	ldr	r3, [sp, #4]
 8000d64:	1b00      	subs	r0, r0, r4
 8000d66:	4298      	cmp	r0, r3
 8000d68:	d3f9      	bcc.n	8000d5e <HAL_Delay+0xa>
  {
  }
}
 8000d6a:	b002      	add	sp, #8
 8000d6c:	bd10      	pop	{r4, pc}
	...

08000d70 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d70:	4a0f      	ldr	r2, [pc, #60]	; (8000db0 <SystemInit+0x40>)
 8000d72:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8000d76:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d7a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000d7e:	4b0d      	ldr	r3, [pc, #52]	; (8000db4 <SystemInit+0x44>)
 8000d80:	6819      	ldr	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000d82:	2000      	movs	r0, #0
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000d84:	f041 0101 	orr.w	r1, r1, #1
 8000d88:	6019      	str	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000d8a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000d8c:	6819      	ldr	r1, [r3, #0]
 8000d8e:	f021 7184 	bic.w	r1, r1, #17301504	; 0x1080000
 8000d92:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8000d96:	6019      	str	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000d98:	4907      	ldr	r1, [pc, #28]	; (8000db8 <SystemInit+0x48>)
 8000d9a:	6059      	str	r1, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000d9c:	6819      	ldr	r1, [r3, #0]
 8000d9e:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8000da2:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000da4:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000da6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000daa:	6093      	str	r3, [r2, #8]
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	e000ed00 	.word	0xe000ed00
 8000db4:	40023800 	.word	0x40023800
 8000db8:	24003010 	.word	0x24003010

08000dbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000dbc:	f8df d03c 	ldr.w	sp, [pc, #60]	; 8000dfc <LoopFillZerobss+0x16>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000dc0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000dc2:	f000 b804 	b.w	8000dce <LoopCopyDataInit>

08000dc6 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000dc6:	4b0e      	ldr	r3, [pc, #56]	; (8000e00 <LoopFillZerobss+0x1a>)
  ldr  r3, [r3, r1]
 8000dc8:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000dca:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000dcc:	3104      	adds	r1, #4

08000dce <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000dce:	480d      	ldr	r0, [pc, #52]	; (8000e04 <LoopFillZerobss+0x1e>)
  ldr  r3, =_edata
 8000dd0:	4b0d      	ldr	r3, [pc, #52]	; (8000e08 <LoopFillZerobss+0x22>)
  adds  r2, r0, r1
 8000dd2:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000dd4:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000dd6:	f4ff aff6 	bcc.w	8000dc6 <CopyDataInit>
  ldr  r2, =_sbss
 8000dda:	4a0c      	ldr	r2, [pc, #48]	; (8000e0c <LoopFillZerobss+0x26>)
  b  LoopFillZerobss
 8000ddc:	f000 b803 	b.w	8000de6 <LoopFillZerobss>

08000de0 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000de0:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000de2:	f842 3b04 	str.w	r3, [r2], #4

08000de6 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000de6:	4b0a      	ldr	r3, [pc, #40]	; (8000e10 <LoopFillZerobss+0x2a>)
  cmp  r2, r3
 8000de8:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000dea:	f4ff aff9 	bcc.w	8000de0 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000dee:	f7ff ffbf 	bl	8000d70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000df2:	f000 f811 	bl	8000e18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000df6:	f7ff fa8b 	bl	8000310 <main>
  bx  lr    
 8000dfa:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000dfc:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8000e00:	08000e94 	.word	0x08000e94
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000e04:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000e08:	20000004 	.word	0x20000004
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8000e0c:	20000004 	.word	0x20000004
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000e10:	20000024 	.word	0x20000024

08000e14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e14:	f7ff bffe 	b.w	8000e14 <ADC_IRQHandler>

08000e18 <__libc_init_array>:
 8000e18:	b570      	push	{r4, r5, r6, lr}
 8000e1a:	4b0e      	ldr	r3, [pc, #56]	; (8000e54 <__libc_init_array+0x3c>)
 8000e1c:	4d0e      	ldr	r5, [pc, #56]	; (8000e58 <__libc_init_array+0x40>)
 8000e1e:	1aed      	subs	r5, r5, r3
 8000e20:	10ad      	asrs	r5, r5, #2
 8000e22:	2400      	movs	r4, #0
 8000e24:	461e      	mov	r6, r3
 8000e26:	42ac      	cmp	r4, r5
 8000e28:	d004      	beq.n	8000e34 <__libc_init_array+0x1c>
 8000e2a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8000e2e:	4790      	blx	r2
 8000e30:	3401      	adds	r4, #1
 8000e32:	e7f8      	b.n	8000e26 <__libc_init_array+0xe>
 8000e34:	f000 f816 	bl	8000e64 <_init>
 8000e38:	4d08      	ldr	r5, [pc, #32]	; (8000e5c <__libc_init_array+0x44>)
 8000e3a:	4b09      	ldr	r3, [pc, #36]	; (8000e60 <__libc_init_array+0x48>)
 8000e3c:	1aed      	subs	r5, r5, r3
 8000e3e:	10ad      	asrs	r5, r5, #2
 8000e40:	2400      	movs	r4, #0
 8000e42:	461e      	mov	r6, r3
 8000e44:	42ac      	cmp	r4, r5
 8000e46:	d004      	beq.n	8000e52 <__libc_init_array+0x3a>
 8000e48:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8000e4c:	4790      	blx	r2
 8000e4e:	3401      	adds	r4, #1
 8000e50:	e7f8      	b.n	8000e44 <__libc_init_array+0x2c>
 8000e52:	bd70      	pop	{r4, r5, r6, pc}
 8000e54:	08000e8c 	.word	0x08000e8c
 8000e58:	08000e8c 	.word	0x08000e8c
 8000e5c:	08000e90 	.word	0x08000e90
 8000e60:	08000e8c 	.word	0x08000e8c

08000e64 <_init>:
 8000e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e66:	bf00      	nop
 8000e68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e6a:	bc08      	pop	{r3}
 8000e6c:	469e      	mov	lr, r3
 8000e6e:	4770      	bx	lr

08000e70 <_fini>:
 8000e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e72:	bf00      	nop
 8000e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e76:	bc08      	pop	{r3}
 8000e78:	469e      	mov	lr, r3
 8000e7a:	4770      	bx	lr
