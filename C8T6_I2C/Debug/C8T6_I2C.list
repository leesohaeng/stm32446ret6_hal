
C:\Users\sohae\Desktop\STM32F446RET6_HAL\C8T6_I2C\Debug\C8T6_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000018c8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080019d4  080019d4  000119d4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001a00  08001a00  00011a00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001a04  08001a04  00011a04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08001a08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000001a0  20000004  08001a0c  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200001a4  08001a0c  000201a4  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_line   00005e6f  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0000ed51  00000000  00000000  00025e9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000021ef  00000000  00000000  00034bed  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000a20  00000000  00000000  00036de0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000ea0  00000000  00000000  00037800  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00009402  00000000  00000000  000386a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000365b  00000000  00000000  00041aa2  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007e  00000000  00000000  000450fd  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001eb0  00000000  00000000  0004517c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	080019bc 	.word	0x080019bc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	080019bc 	.word	0x080019bc

0800014c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800014c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800014e:	e003      	b.n	8000158 <LoopCopyDataInit>

08000150 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000150:	4b0b      	ldr	r3, [pc, #44]	; (8000180 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000152:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000154:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000156:	3104      	adds	r1, #4

08000158 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000158:	480a      	ldr	r0, [pc, #40]	; (8000184 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800015a:	4b0b      	ldr	r3, [pc, #44]	; (8000188 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800015c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800015e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000160:	d3f6      	bcc.n	8000150 <CopyDataInit>
  ldr r2, =_sbss
 8000162:	4a0a      	ldr	r2, [pc, #40]	; (800018c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000164:	e002      	b.n	800016c <LoopFillZerobss>

08000166 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000166:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000168:	f842 3b04 	str.w	r3, [r2], #4

0800016c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800016c:	4b08      	ldr	r3, [pc, #32]	; (8000190 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800016e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000170:	d3f9      	bcc.n	8000166 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000172:	f001 fbd7 	bl	8001924 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000176:	f001 fbfb 	bl	8001970 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800017a:	f001 f9f1 	bl	8001560 <main>
  bx lr
 800017e:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
  b LoopCopyDataInit

CopyDataInit:
  ldr r3, =_sidata
 8000180:	08001a08 	.word	0x08001a08
  ldr r3, [r3, r1]
  str r3, [r0, r1]
  adds r1, r1, #4

LoopCopyDataInit:
  ldr r0, =_sdata
 8000184:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000188:	20000004 	.word	0x20000004
  adds r2, r0, r1
  cmp r2, r3
  bcc CopyDataInit
  ldr r2, =_sbss
 800018c:	20000004 	.word	0x20000004
FillZerobss:
  movs r3, #0
  str r3, [r2], #4

LoopFillZerobss:
  ldr r3, = _ebss
 8000190:	200001a4 	.word	0x200001a4

08000194 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000194:	e7fe      	b.n	8000194 <ADC1_2_IRQHandler>

08000196 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000196:	b510      	push	{r4, lr}
 8000198:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800019a:	f000 febd 	bl	8000f18 <HAL_RCC_GetHCLKFreq>
 800019e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001a2:	fbb0 f0f3 	udiv	r0, r0, r3
 80001a6:	f000 f9f3 	bl	8000590 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 80001aa:	2200      	movs	r2, #0
 80001ac:	4621      	mov	r1, r4
 80001ae:	f04f 30ff 	mov.w	r0, #4294967295
 80001b2:	f000 f9b9 	bl	8000528 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 80001b6:	2000      	movs	r0, #0
 80001b8:	bd10      	pop	{r4, pc}
	...

080001bc <HAL_Init>:
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001bc:	4a07      	ldr	r2, [pc, #28]	; (80001dc <HAL_Init+0x20>)
  *        In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80001be:	b508      	push	{r3, lr}
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001c0:	6813      	ldr	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001c2:	2003      	movs	r0, #3
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001c4:	f043 0310 	orr.w	r3, r3, #16
 80001c8:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001ca:	f000 f99b 	bl	8000504 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80001ce:	2000      	movs	r0, #0
 80001d0:	f7ff ffe1 	bl	8000196 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80001d4:	f001 fa94 	bl	8001700 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80001d8:	2000      	movs	r0, #0
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	40022000 	.word	0x40022000

080001e0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80001e0:	4a02      	ldr	r2, [pc, #8]	; (80001ec <HAL_IncTick+0xc>)
 80001e2:	6813      	ldr	r3, [r2, #0]
 80001e4:	3301      	adds	r3, #1
 80001e6:	6013      	str	r3, [r2, #0]
 80001e8:	4770      	bx	lr
 80001ea:	bf00      	nop
 80001ec:	20000020 	.word	0x20000020

080001f0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001f0:	4b01      	ldr	r3, [pc, #4]	; (80001f8 <HAL_GetTick+0x8>)
 80001f2:	6818      	ldr	r0, [r3, #0]
}
 80001f4:	4770      	bx	lr
 80001f6:	bf00      	nop
 80001f8:	20000020 	.word	0x20000020

080001fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80001fc:	b513      	push	{r0, r1, r4, lr}
 80001fe:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 8000200:	f7ff fff6 	bl	80001f0 <HAL_GetTick>
 8000204:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8000206:	f7ff fff3 	bl	80001f0 <HAL_GetTick>
 800020a:	9b01      	ldr	r3, [sp, #4]
 800020c:	1b00      	subs	r0, r0, r4
 800020e:	4298      	cmp	r0, r3
 8000210:	d3f9      	bcc.n	8000206 <HAL_Delay+0xa>
  {
  }
}
 8000212:	b002      	add	sp, #8
 8000214:	bd10      	pop	{r4, pc}
	...

08000218 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000218:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0;
 800021a:	2300      	movs	r3, #0
 800021c:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800021e:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8000222:	2b01      	cmp	r3, #1
 8000224:	f000 80ae 	beq.w	8000384 <HAL_ADC_ConfigChannel+0x16c>
 8000228:	2301      	movs	r3, #1
 800022a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800022e:	684b      	ldr	r3, [r1, #4]
 8000230:	6804      	ldr	r4, [r0, #0]
 8000232:	2b06      	cmp	r3, #6
 8000234:	680d      	ldr	r5, [r1, #0]
 8000236:	d818      	bhi.n	800026a <HAL_ADC_ConfigChannel+0x52>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000238:	6b67      	ldr	r7, [r4, #52]	; 0x34
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800023a:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800023e:	fa92 f6a2 	rbit	r6, r2
 8000242:	fab6 f686 	clz	r6, r6
 8000246:	3b01      	subs	r3, #1
 8000248:	fa92 f2a2 	rbit	r2, r2
 800024c:	fab2 f282 	clz	r2, r2
 8000250:	435e      	muls	r6, r3
 8000252:	4353      	muls	r3, r2
 8000254:	f04f 0e1f 	mov.w	lr, #31
 8000258:	fa0e f606 	lsl.w	r6, lr, r6
 800025c:	ea27 0606 	bic.w	r6, r7, r6
 8000260:	fa05 f303 	lsl.w	r3, r5, r3
 8000264:	4333      	orrs	r3, r6
 8000266:	6363      	str	r3, [r4, #52]	; 0x34
 8000268:	e030      	b.n	80002cc <HAL_ADC_ConfigChannel+0xb4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800026a:	2b0c      	cmp	r3, #12
 800026c:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8000270:	d816      	bhi.n	80002a0 <HAL_ADC_ConfigChannel+0x88>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000272:	6b27      	ldr	r7, [r4, #48]	; 0x30
 8000274:	fa92 f6a2 	rbit	r6, r2
 8000278:	fab6 f686 	clz	r6, r6
 800027c:	3b07      	subs	r3, #7
 800027e:	fa92 f2a2 	rbit	r2, r2
 8000282:	fab2 f282 	clz	r2, r2
 8000286:	435e      	muls	r6, r3
 8000288:	435a      	muls	r2, r3
 800028a:	f04f 0e1f 	mov.w	lr, #31
 800028e:	fa0e f606 	lsl.w	r6, lr, r6
 8000292:	ea27 0606 	bic.w	r6, r7, r6
 8000296:	fa05 f202 	lsl.w	r2, r5, r2
 800029a:	4332      	orrs	r2, r6
 800029c:	6322      	str	r2, [r4, #48]	; 0x30
 800029e:	e015      	b.n	80002cc <HAL_ADC_ConfigChannel+0xb4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80002a0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80002a2:	fa92 f6a2 	rbit	r6, r2
 80002a6:	fab6 f686 	clz	r6, r6
 80002aa:	3b0d      	subs	r3, #13
 80002ac:	fa92 f2a2 	rbit	r2, r2
 80002b0:	fab2 f282 	clz	r2, r2
 80002b4:	435e      	muls	r6, r3
 80002b6:	4353      	muls	r3, r2
 80002b8:	f04f 0e1f 	mov.w	lr, #31
 80002bc:	fa0e f606 	lsl.w	r6, lr, r6
 80002c0:	ea27 0606 	bic.w	r6, r7, r6
 80002c4:	fa05 f303 	lsl.w	r3, r5, r3
 80002c8:	4333      	orrs	r3, r6
 80002ca:	62e3      	str	r3, [r4, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80002cc:	2d09      	cmp	r5, #9
 80002ce:	f04f 0338 	mov.w	r3, #56	; 0x38
 80002d2:	688e      	ldr	r6, [r1, #8]
 80002d4:	d918      	bls.n	8000308 <HAL_ADC_ConfigChannel+0xf0>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80002d6:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 80002da:	fa93 f7a3 	rbit	r7, r3
 80002de:	fab7 f787 	clz	r7, r7
 80002e2:	f1a5 010a 	sub.w	r1, r5, #10
 80002e6:	fa93 f3a3 	rbit	r3, r3
 80002ea:	fab3 f283 	clz	r2, r3
 80002ee:	fb01 f307 	mul.w	r3, r1, r7
 80002f2:	4351      	muls	r1, r2
 80002f4:	2707      	movs	r7, #7
 80002f6:	fa07 f303 	lsl.w	r3, r7, r3
 80002fa:	ea2e 0303 	bic.w	r3, lr, r3
 80002fe:	fa06 f201 	lsl.w	r2, r6, r1
 8000302:	431a      	orrs	r2, r3
 8000304:	60e2      	str	r2, [r4, #12]
 8000306:	e013      	b.n	8000330 <HAL_ADC_ConfigChannel+0x118>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000308:	6927      	ldr	r7, [r4, #16]
 800030a:	fa93 f1a3 	rbit	r1, r3
 800030e:	fab1 f181 	clz	r1, r1
 8000312:	fa93 f3a3 	rbit	r3, r3
 8000316:	fab3 f383 	clz	r3, r3
 800031a:	4369      	muls	r1, r5
 800031c:	436b      	muls	r3, r5
 800031e:	2207      	movs	r2, #7
 8000320:	fa02 f101 	lsl.w	r1, r2, r1
 8000324:	ea27 0101 	bic.w	r1, r7, r1
 8000328:	fa06 f203 	lsl.w	r2, r6, r3
 800032c:	430a      	orrs	r2, r1
 800032e:	6122      	str	r2, [r4, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000330:	f1a5 0310 	sub.w	r3, r5, #16
 8000334:	2b01      	cmp	r3, #1
 8000336:	d901      	bls.n	800033c <HAL_ADC_ConfigChannel+0x124>
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000338:	2300      	movs	r3, #0
 800033a:	e01e      	b.n	800037a <HAL_ADC_ConfigChannel+0x162>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800033c:	4b13      	ldr	r3, [pc, #76]	; (800038c <HAL_ADC_ConfigChannel+0x174>)
 800033e:	429c      	cmp	r4, r3
 8000340:	d116      	bne.n	8000370 <HAL_ADC_ConfigChannel+0x158>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000342:	68a3      	ldr	r3, [r4, #8]
 8000344:	021b      	lsls	r3, r3, #8
 8000346:	d4f7      	bmi.n	8000338 <HAL_ADC_ConfigChannel+0x120>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000348:	68a3      	ldr	r3, [r4, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800034a:	2d10      	cmp	r5, #16
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800034c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000350:	60a3      	str	r3, [r4, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000352:	d1f1      	bne.n	8000338 <HAL_ADC_ConfigChannel+0x120>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8000354:	4b0e      	ldr	r3, [pc, #56]	; (8000390 <HAL_ADC_ConfigChannel+0x178>)
 8000356:	4a0f      	ldr	r2, [pc, #60]	; (8000394 <HAL_ADC_ConfigChannel+0x17c>)
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	fbb3 f2f2 	udiv	r2, r3, r2
 800035e:	230a      	movs	r3, #10
 8000360:	4353      	muls	r3, r2
          while(wait_loop_index != 0)
          {
            wait_loop_index--;
 8000362:	9301      	str	r3, [sp, #4]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
          while(wait_loop_index != 0)
 8000364:	9b01      	ldr	r3, [sp, #4]
 8000366:	2b00      	cmp	r3, #0
 8000368:	d0e6      	beq.n	8000338 <HAL_ADC_ConfigChannel+0x120>
          {
            wait_loop_index--;
 800036a:	9b01      	ldr	r3, [sp, #4]
 800036c:	3b01      	subs	r3, #1
 800036e:	e7f8      	b.n	8000362 <HAL_ADC_ConfigChannel+0x14a>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000370:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000372:	f043 0320 	orr.w	r3, r3, #32
 8000376:	6283      	str	r3, [r0, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000378:	2301      	movs	r3, #1
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800037a:	2200      	movs	r2, #0
 800037c:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000380:	4618      	mov	r0, r3
 8000382:	e000      	b.n	8000386 <HAL_ADC_ConfigChannel+0x16e>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000384:	2002      	movs	r0, #2
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
  /* Return function status */
  return tmp_hal_status;
}
 8000386:	b003      	add	sp, #12
 8000388:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800038a:	bf00      	nop
 800038c:	40012400 	.word	0x40012400
 8000390:	20000000 	.word	0x20000000
 8000394:	000f4240 	.word	0x000f4240

08000398 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000398:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800039a:	6803      	ldr	r3, [r0, #0]
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800039c:	4604      	mov	r4, r0
  uint32_t tickstart = 0;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800039e:	689a      	ldr	r2, [r3, #8]
 80003a0:	07d2      	lsls	r2, r2, #31
 80003a2:	d401      	bmi.n	80003a8 <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80003a4:	2000      	movs	r0, #0
 80003a6:	bd38      	pop	{r3, r4, r5, pc}
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80003a8:	689a      	ldr	r2, [r3, #8]
 80003aa:	f022 0201 	bic.w	r2, r2, #1
 80003ae:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80003b0:	f7ff ff1e 	bl	80001f0 <HAL_GetTick>
 80003b4:	4605      	mov	r5, r0
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80003b6:	6823      	ldr	r3, [r4, #0]
 80003b8:	689b      	ldr	r3, [r3, #8]
 80003ba:	07db      	lsls	r3, r3, #31
 80003bc:	d5f2      	bpl.n	80003a4 <ADC_ConversionStop_Disable+0xc>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80003be:	f7ff ff17 	bl	80001f0 <HAL_GetTick>
 80003c2:	1b40      	subs	r0, r0, r5
 80003c4:	2802      	cmp	r0, #2
 80003c6:	d9f6      	bls.n	80003b6 <ADC_ConversionStop_Disable+0x1e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80003c8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80003ca:	2001      	movs	r0, #1
    while(ADC_IS_ENABLE(hadc) != RESET)
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80003cc:	f043 0310 	orr.w	r3, r3, #16
 80003d0:	62a3      	str	r3, [r4, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80003d2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80003d4:	f043 0301 	orr.w	r3, r3, #1
 80003d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80003da:	bd38      	pop	{r3, r4, r5, pc}

080003dc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80003dc:	b538      	push	{r3, r4, r5, lr}
  uint32_t tmp_cr1 = 0;
  uint32_t tmp_cr2 = 0;
  uint32_t tmp_sqr1 = 0;
  
  /* Check ADC handle */
  if(hadc == NULL)
 80003de:	4604      	mov	r4, r0
 80003e0:	2800      	cmp	r0, #0
 80003e2:	f000 8088 	beq.w	80004f6 <HAL_ADC_Init+0x11a>
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80003e6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80003e8:	b923      	cbnz	r3, 80003f4 <HAL_ADC_Init+0x18>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80003ea:	62c3      	str	r3, [r0, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80003ec:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80003f0:	f001 f9cc 	bl	800178c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80003f4:	4620      	mov	r0, r4
 80003f6:	f7ff ffcf 	bl	8000398 <ADC_ConversionStop_Disable>
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80003fa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80003fc:	f013 0f10 	tst.w	r3, #16
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000400:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000402:	d175      	bne.n	80004f0 <HAL_ADC_Init+0x114>
 8000404:	2800      	cmp	r0, #0
 8000406:	d173      	bne.n	80004f0 <HAL_ADC_Init+0x114>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000408:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800040c:	f023 0302 	bic.w	r3, r3, #2
 8000410:	f043 0302 	orr.w	r3, r3, #2
 8000414:	62a3      	str	r3, [r4, #40]	; 0x28
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                               |
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 8000416:	68e0      	ldr	r0, [r4, #12]
 8000418:	2302      	movs	r3, #2
 800041a:	fa93 f3a3 	rbit	r3, r3
 800041e:	fab3 f383 	clz	r3, r3
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                               |
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 8000422:	6861      	ldr	r1, [r4, #4]
 8000424:	69e2      	ldr	r2, [r4, #28]
 8000426:	fa00 f303 	lsl.w	r3, r0, r3
 800042a:	430a      	orrs	r2, r1
    
    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800042c:	68a1      	ldr	r1, [r4, #8]
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                               |
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 800042e:	4313      	orrs	r3, r2
    
    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000430:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8000434:	d005      	beq.n	8000442 <HAL_ADC_Init+0x66>
 8000436:	2901      	cmp	r1, #1
 8000438:	bf14      	ite	ne
 800043a:	2200      	movne	r2, #0
 800043c:	f44f 7280 	moveq.w	r2, #256	; 0x100
 8000440:	e000      	b.n	8000444 <HAL_ADC_Init+0x68>
 8000442:	460a      	mov	r2, r1
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000444:	6965      	ldr	r5, [r4, #20]
 8000446:	2d01      	cmp	r5, #1
 8000448:	d115      	bne.n	8000476 <HAL_ADC_Init+0x9a>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800044a:	b960      	cbnz	r0, 8000466 <HAL_ADC_Init+0x8a>
 800044c:	f44f 4060 	mov.w	r0, #57344	; 0xe000
 8000450:	fa90 f0a0 	rbit	r0, r0
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000454:	fab0 f580 	clz	r5, r0
 8000458:	69a0      	ldr	r0, [r4, #24]
 800045a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800045e:	3801      	subs	r0, #1
 8000460:	40a8      	lsls	r0, r5
 8000462:	4302      	orrs	r2, r0
 8000464:	e007      	b.n	8000476 <HAL_ADC_Init+0x9a>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000466:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8000468:	f040 0020 	orr.w	r0, r0, #32
 800046c:	62a0      	str	r0, [r4, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800046e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8000470:	f040 0001 	orr.w	r0, r0, #1
 8000474:	62e0      	str	r0, [r4, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000476:	6820      	ldr	r0, [r4, #0]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000478:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800047c:	6845      	ldr	r5, [r0, #4]
 800047e:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 8000482:	ea42 0205 	orr.w	r2, r2, r5
 8000486:	6042      	str	r2, [r0, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000488:	6885      	ldr	r5, [r0, #8]
 800048a:	4a1c      	ldr	r2, [pc, #112]	; (80004fc <HAL_ADC_Init+0x120>)
 800048c:	ea02 0205 	and.w	r2, r2, r5
 8000490:	ea42 0203 	orr.w	r2, r2, r3
 8000494:	6082      	str	r2, [r0, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000496:	d001      	beq.n	800049c <HAL_ADC_Init+0xc0>
 8000498:	2901      	cmp	r1, #1
 800049a:	d10a      	bne.n	80004b2 <HAL_ADC_Init+0xd6>
 800049c:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
 80004a0:	fa92 f2a2 	rbit	r2, r2
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80004a4:	fab2 f282 	clz	r2, r2
 80004a8:	6921      	ldr	r1, [r4, #16]
 80004aa:	3901      	subs	r1, #1
 80004ac:	fa01 f202 	lsl.w	r2, r1, r2
 80004b0:	e000      	b.n	80004b4 <HAL_ADC_Init+0xd8>
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cr1 = 0;
  uint32_t tmp_cr2 = 0;
  uint32_t tmp_sqr1 = 0;
 80004b2:	2200      	movs	r2, #0
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80004b4:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80004b6:	f421 0170 	bic.w	r1, r1, #15728640	; 0xf00000
 80004ba:	430a      	orrs	r2, r1
 80004bc:	62c2      	str	r2, [r0, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80004be:	6881      	ldr	r1, [r0, #8]
 80004c0:	4a0f      	ldr	r2, [pc, #60]	; (8000500 <HAL_ADC_Init+0x124>)
 80004c2:	400a      	ands	r2, r1
 80004c4:	4293      	cmp	r3, r2
 80004c6:	d108      	bne.n	80004da <HAL_ADC_Init+0xfe>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80004c8:	2000      	movs	r0, #0
 80004ca:	62e0      	str	r0, [r4, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80004cc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80004ce:	f023 0303 	bic.w	r3, r3, #3
 80004d2:	f043 0301 	orr.w	r3, r3, #1
 80004d6:	62a3      	str	r3, [r4, #40]	; 0x28
 80004d8:	bd38      	pop	{r3, r4, r5, pc}
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80004da:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80004dc:	f023 0312 	bic.w	r3, r3, #18
 80004e0:	f043 0310 	orr.w	r3, r3, #16
 80004e4:	62a3      	str	r3, [r4, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80004e6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80004e8:	f043 0301 	orr.w	r3, r3, #1
 80004ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 80004ee:	e002      	b.n	80004f6 <HAL_ADC_Init+0x11a>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80004f0:	f043 0310 	orr.w	r3, r3, #16
 80004f4:	62a3      	str	r3, [r4, #40]	; 0x28
  uint32_t tmp_sqr1 = 0;
  
  /* Check ADC handle */
  if(hadc == NULL)
  {
    return HAL_ERROR;
 80004f6:	2001      	movs	r0, #1
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 80004f8:	bd38      	pop	{r3, r4, r5, pc}
 80004fa:	bf00      	nop
 80004fc:	ffe1f7fd 	.word	0xffe1f7fd
 8000500:	ff1f0efe 	.word	0xff1f0efe

08000504 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000504:	4a07      	ldr	r2, [pc, #28]	; (8000524 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8000506:	0200      	lsls	r0, r0, #8
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000508:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 800050a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 800050e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000512:	041b      	lsls	r3, r3, #16
 8000514:	0c1b      	lsrs	r3, r3, #16
 8000516:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800051a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800051e:	4303      	orrs	r3, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8000520:	60d3      	str	r3, [r2, #12]
 8000522:	4770      	bx	lr
 8000524:	e000ed00 	.word	0xe000ed00

08000528 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000528:	4b17      	ldr	r3, [pc, #92]	; (8000588 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	68db      	ldr	r3, [r3, #12]
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800052e:	f3c3 2302 	ubfx	r3, r3, #8, #3
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000532:	f1c3 0407 	rsb	r4, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000536:	1d1d      	adds	r5, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000538:	2c04      	cmp	r4, #4
 800053a:	bf28      	it	cs
 800053c:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800053e:	2d06      	cmp	r5, #6

  return (
 8000540:	f04f 0501 	mov.w	r5, #1
 8000544:	fa05 f404 	lsl.w	r4, r5, r4
 8000548:	f104 34ff 	add.w	r4, r4, #4294967295
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800054c:	bf8c      	ite	hi
 800054e:	3b03      	subhi	r3, #3
 8000550:	2300      	movls	r3, #0

  return (
 8000552:	400c      	ands	r4, r1
 8000554:	409c      	lsls	r4, r3
 8000556:	fa05 f303 	lsl.w	r3, r5, r3
 800055a:	3b01      	subs	r3, #1
 800055c:	401a      	ands	r2, r3
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 800055e:	2800      	cmp	r0, #0
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8000560:	ea42 0204 	orr.w	r2, r2, r4
 8000564:	ea4f 1202 	mov.w	r2, r2, lsl #4
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000568:	bfaf      	iteee	ge
 800056a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800056e:	4b07      	ldrlt	r3, [pc, #28]	; (800058c <HAL_NVIC_SetPriority+0x64>)
 8000570:	f000 000f 	andlt.w	r0, r0, #15
 8000574:	b2d2      	uxtblt	r2, r2
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000576:	bfa5      	ittet	ge
 8000578:	b2d2      	uxtbge	r2, r2
 800057a:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800057e:	541a      	strblt	r2, [r3, r0]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000580:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	bf00      	nop
 8000588:	e000ed00 	.word	0xe000ed00
 800058c:	e000ed14 	.word	0xe000ed14

08000590 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000590:	3801      	subs	r0, #1
 8000592:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000596:	d20a      	bcs.n	80005ae <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000598:	4b06      	ldr	r3, [pc, #24]	; (80005b4 <HAL_SYSTICK_Config+0x24>)
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800059a:	4a07      	ldr	r2, [pc, #28]	; (80005b8 <HAL_SYSTICK_Config+0x28>)
 800059c:	21f0      	movs	r1, #240	; 0xf0
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800059e:	6058      	str	r0, [r3, #4]
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005a0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80005a4:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80005a6:	2207      	movs	r2, #7
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80005a8:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80005aa:	601a      	str	r2, [r3, #0]
 80005ac:	4770      	bx	lr
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
 80005ae:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop
 80005b4:	e000e010 	.word	0xe000e010
 80005b8:	e000ed00 	.word	0xe000ed00

080005bc <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80005bc:	4b04      	ldr	r3, [pc, #16]	; (80005d0 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80005be:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80005c0:	681a      	ldr	r2, [r3, #0]
 80005c2:	bf0c      	ite	eq
 80005c4:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80005c8:	f022 0204 	bicne.w	r2, r2, #4
 80005cc:	601a      	str	r2, [r3, #0]
 80005ce:	4770      	bx	lr
 80005d0:	e000e010 	.word	0xe000e010

080005d4 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80005d4:	4770      	bx	lr

080005d6 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80005d6:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80005d8:	f7ff fffc 	bl	80005d4 <HAL_SYSTICK_Callback>
 80005dc:	bd08      	pop	{r3, pc}
	...

080005e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80005e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00;
  uint32_t iocurrent = 0x00;
  uint32_t temp = 0x00;
  uint32_t config = 0x00;
 80005e4:	2400      	movs	r4, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80005e6:	4626      	mov	r6, r4
 80005e8:	4b62      	ldr	r3, [pc, #392]	; (8000774 <HAL_GPIO_Init+0x194>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80005ea:	f8df e194 	ldr.w	lr, [pc, #404]	; 8000780 <HAL_GPIO_Init+0x1a0>
 80005ee:	f8df c194 	ldr.w	ip, [pc, #404]	; 8000784 <HAL_GPIO_Init+0x1a4>

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80005f2:	2201      	movs	r2, #1
    
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if (iocurrent == ioposition)
 80005f4:	680d      	ldr	r5, [r1, #0]

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80005f6:	40b2      	lsls	r2, r6
    
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if (iocurrent == ioposition)
 80005f8:	ea32 0505 	bics.w	r5, r2, r5
 80005fc:	f040 80b3 	bne.w	8000766 <HAL_GPIO_Init+0x186>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000600:	684d      	ldr	r5, [r1, #4]
 8000602:	2d12      	cmp	r5, #18
 8000604:	d028      	beq.n	8000658 <HAL_GPIO_Init+0x78>
 8000606:	d80e      	bhi.n	8000626 <HAL_GPIO_Init+0x46>
 8000608:	2d02      	cmp	r5, #2
 800060a:	d022      	beq.n	8000652 <HAL_GPIO_Init+0x72>
 800060c:	d804      	bhi.n	8000618 <HAL_GPIO_Init+0x38>
 800060e:	b335      	cbz	r5, 800065e <HAL_GPIO_Init+0x7e>
 8000610:	2d01      	cmp	r5, #1
 8000612:	d12d      	bne.n	8000670 <HAL_GPIO_Init+0x90>
      {
        /* If we are configuring the pin in OUTPUT push-pull mode */
        case GPIO_MODE_OUTPUT_PP:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000614:	68cc      	ldr	r4, [r1, #12]
          break;
 8000616:	e02b      	b.n	8000670 <HAL_GPIO_Init+0x90>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000618:	2d03      	cmp	r5, #3
 800061a:	d018      	beq.n	800064e <HAL_GPIO_Init+0x6e>
 800061c:	2d11      	cmp	r5, #17
 800061e:	d127      	bne.n	8000670 <HAL_GPIO_Init+0x90>
          
        /* If we are configuring the pin in OUTPUT open-drain mode */
        case GPIO_MODE_OUTPUT_OD:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000620:	68cc      	ldr	r4, [r1, #12]
 8000622:	3404      	adds	r4, #4
          break;
 8000624:	e024      	b.n	8000670 <HAL_GPIO_Init+0x90>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000626:	4f54      	ldr	r7, [pc, #336]	; (8000778 <HAL_GPIO_Init+0x198>)
 8000628:	42bd      	cmp	r5, r7
 800062a:	d018      	beq.n	800065e <HAL_GPIO_Init+0x7e>
 800062c:	d806      	bhi.n	800063c <HAL_GPIO_Init+0x5c>
 800062e:	f8df 8158 	ldr.w	r8, [pc, #344]	; 8000788 <HAL_GPIO_Init+0x1a8>
 8000632:	4545      	cmp	r5, r8
 8000634:	d013      	beq.n	800065e <HAL_GPIO_Init+0x7e>
 8000636:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 800063a:	e005      	b.n	8000648 <HAL_GPIO_Init+0x68>
 800063c:	4575      	cmp	r5, lr
 800063e:	d00e      	beq.n	800065e <HAL_GPIO_Init+0x7e>
 8000640:	4565      	cmp	r5, ip
 8000642:	d00c      	beq.n	800065e <HAL_GPIO_Init+0x7e>
 8000644:	f8df 8144 	ldr.w	r8, [pc, #324]	; 800078c <HAL_GPIO_Init+0x1ac>
 8000648:	4545      	cmp	r5, r8
 800064a:	d111      	bne.n	8000670 <HAL_GPIO_Init+0x90>
 800064c:	e007      	b.n	800065e <HAL_GPIO_Init+0x7e>
          }
          break; 
          
        /* If we are configuring the pin in INPUT analog mode */
        case GPIO_MODE_ANALOG:
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800064e:	2400      	movs	r4, #0
 8000650:	e00e      	b.n	8000670 <HAL_GPIO_Init+0x90>
          
        /* If we are configuring the pin in ALTERNATE FUNCTION push-pull mode */
        case GPIO_MODE_AF_PP:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000652:	68cc      	ldr	r4, [r1, #12]
 8000654:	3408      	adds	r4, #8
          break;
 8000656:	e00b      	b.n	8000670 <HAL_GPIO_Init+0x90>
          
        /* If we are configuring the pin in ALTERNATE FUNCTION open-drain mode */
        case GPIO_MODE_AF_OD:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000658:	68cc      	ldr	r4, [r1, #12]
 800065a:	340c      	adds	r4, #12
          break;
 800065c:	e008      	b.n	8000670 <HAL_GPIO_Init+0x90>
        case GPIO_MODE_EVT_RISING:
        case GPIO_MODE_EVT_FALLING:
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if(GPIO_Init->Pull == GPIO_NOPULL)
 800065e:	688c      	ldr	r4, [r1, #8]
 8000660:	b12c      	cbz	r4, 800066e <HAL_GPIO_Init+0x8e>
          {  
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
          }
          else if(GPIO_Init->Pull == GPIO_PULLUP)
 8000662:	2c01      	cmp	r4, #1
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
            
            /* Set the corresponding ODR bit */
            GPIOx->BSRR = ioposition;
 8000664:	bf0c      	ite	eq
 8000666:	6102      	streq	r2, [r0, #16]
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
            
            /* Reset the corresponding ODR bit */
            GPIOx->BRR = ioposition;
 8000668:	6142      	strne	r2, [r0, #20]
            /* Set the corresponding ODR bit */
            GPIOx->BSRR = ioposition;
          }
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800066a:	2408      	movs	r4, #8
 800066c:	e000      	b.n	8000670 <HAL_GPIO_Init+0x90>
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if(GPIO_Init->Pull == GPIO_NOPULL)
          {  
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800066e:	2404      	movs	r4, #4
          break;
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000670:	2aff      	cmp	r2, #255	; 0xff
 8000672:	bf97      	itett	ls
 8000674:	4683      	movls	fp, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
 8000676:	f1a6 0508 	subhi.w	r5, r6, #8
          break;
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800067a:	f8d0 9000 	ldrls.w	r9, [r0]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
 800067e:	00b5      	lslls	r5, r6, #2
          break;
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000680:	bf84      	itt	hi
 8000682:	f8d0 9004 	ldrhi.w	r9, [r0, #4]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
 8000686:	00ad      	lslhi	r5, r5, #2
      
      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 8000688:	f04f 080f 	mov.w	r8, #15
 800068c:	fa08 fa05 	lsl.w	sl, r8, r5
 8000690:	ea29 090a 	bic.w	r9, r9, sl
 8000694:	fa04 f505 	lsl.w	r5, r4, r5
          break;
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000698:	bf88      	it	hi
 800069a:	f100 0b04 	addhi.w	fp, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
      
      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 800069e:	ea49 0505 	orr.w	r5, r9, r5
 80006a2:	f8cb 5000 	str.w	r5, [fp]
      
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80006a6:	f8d1 9004 	ldr.w	r9, [r1, #4]
 80006aa:	f019 5f80 	tst.w	r9, #268435456	; 0x10000000
 80006ae:	d05a      	beq.n	8000766 <HAL_GPIO_Init+0x186>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80006b0:	4d32      	ldr	r5, [pc, #200]	; (800077c <HAL_GPIO_Init+0x19c>)
 80006b2:	4f32      	ldr	r7, [pc, #200]	; (800077c <HAL_GPIO_Init+0x19c>)
 80006b4:	69ad      	ldr	r5, [r5, #24]
        temp = AFIO->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 80006b6:	f006 0a03 	and.w	sl, r6, #3
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80006ba:	f045 0501 	orr.w	r5, r5, #1
 80006be:	61bd      	str	r5, [r7, #24]
 80006c0:	69bd      	ldr	r5, [r7, #24]
        temp = AFIO->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 80006c2:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80006c6:	f005 0501 	and.w	r5, r5, #1
 80006ca:	9501      	str	r5, [sp, #4]
 80006cc:	9d01      	ldr	r5, [sp, #4]
 80006ce:	f026 0503 	bic.w	r5, r6, #3
 80006d2:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 80006d6:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2];
 80006da:	f8d5 b008 	ldr.w	fp, [r5, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80006de:	f5a7 3784 	sub.w	r7, r7, #67584	; 0x10800
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
        temp = AFIO->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 80006e2:	fa08 f80a 	lsl.w	r8, r8, sl
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80006e6:	42b8      	cmp	r0, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
        temp = AFIO->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 80006e8:	ea2b 0808 	bic.w	r8, fp, r8
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80006ec:	d010      	beq.n	8000710 <HAL_GPIO_Init+0x130>
 80006ee:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80006f2:	42b8      	cmp	r0, r7
 80006f4:	d00f      	beq.n	8000716 <HAL_GPIO_Init+0x136>
 80006f6:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80006fa:	42b8      	cmp	r0, r7
 80006fc:	d00e      	beq.n	800071c <HAL_GPIO_Init+0x13c>
 80006fe:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8000702:	42b8      	cmp	r0, r7
 8000704:	bf0c      	ite	eq
 8000706:	f04f 0b03 	moveq.w	fp, #3
 800070a:	f04f 0b04 	movne.w	fp, #4
 800070e:	e007      	b.n	8000720 <HAL_GPIO_Init+0x140>
 8000710:	f04f 0b00 	mov.w	fp, #0
 8000714:	e004      	b.n	8000720 <HAL_GPIO_Init+0x140>
 8000716:	f04f 0b01 	mov.w	fp, #1
 800071a:	e001      	b.n	8000720 <HAL_GPIO_Init+0x140>
 800071c:	f04f 0b02 	mov.w	fp, #2
 8000720:	fa0b fa0a 	lsl.w	sl, fp, sl
 8000724:	ea4a 0a08 	orr.w	sl, sl, r8
        AFIO->EXTICR[position >> 2] = temp;
 8000728:	f8c5 a008 	str.w	sl, [r5, #8]
        

        /* Configure the interrupt mask */
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent); 
 800072c:	681d      	ldr	r5, [r3, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        AFIO->EXTICR[position >> 2] = temp;
        

        /* Configure the interrupt mask */
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800072e:	f419 3f80 	tst.w	r9, #65536	; 0x10000
        {
          SET_BIT(EXTI->IMR, iocurrent); 
 8000732:	bf14      	ite	ne
 8000734:	4315      	orrne	r5, r2
        } 
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent); 
 8000736:	4395      	biceq	r5, r2
 8000738:	601d      	str	r5, [r3, #0]
        } 
        
        /* Configure the event mask */
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent); 
 800073a:	685d      	ldr	r5, [r3, #4]
        {
          CLEAR_BIT(EXTI->IMR, iocurrent); 
        } 
        
        /* Configure the event mask */
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800073c:	f419 3f00 	tst.w	r9, #131072	; 0x20000
        {
          SET_BIT(EXTI->EMR, iocurrent); 
 8000740:	bf14      	ite	ne
 8000742:	4315      	orrne	r5, r2
        } 
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent); 
 8000744:	4395      	biceq	r5, r2
 8000746:	605d      	str	r5, [r3, #4]
        }
        
        /* Enable or disable the rising trigger */
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent); 
 8000748:	689d      	ldr	r5, [r3, #8]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent); 
        }
        
        /* Enable or disable the rising trigger */
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800074a:	f419 1f80 	tst.w	r9, #1048576	; 0x100000
        {
          SET_BIT(EXTI->RTSR, iocurrent); 
 800074e:	bf14      	ite	ne
 8000750:	4315      	orrne	r5, r2
        } 
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
 8000752:	4395      	biceq	r5, r2
 8000754:	609d      	str	r5, [r3, #8]
        }
        
        /* Enable or disable the falling trigger */
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent); 
 8000756:	68dd      	ldr	r5, [r3, #12]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
        }
        
        /* Enable or disable the falling trigger */
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000758:	f419 1f00 	tst.w	r9, #2097152	; 0x200000
        {
          SET_BIT(EXTI->FTSR, iocurrent); 
 800075c:	bf14      	ite	ne
 800075e:	432a      	orrne	r2, r5
        } 
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
 8000760:	ea25 0202 	biceq.w	r2, r5, r2
 8000764:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8000766:	3601      	adds	r6, #1
 8000768:	2e10      	cmp	r6, #16
 800076a:	f47f af42 	bne.w	80005f2 <HAL_GPIO_Init+0x12>
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
        }
      }
    }
  }
}
 800076e:	b003      	add	sp, #12
 8000770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000774:	40010400 	.word	0x40010400
 8000778:	10210000 	.word	0x10210000
 800077c:	40021000 	.word	0x40021000
 8000780:	10310000 	.word	0x10310000
 8000784:	10320000 	.word	0x10320000
 8000788:	10110000 	.word	0x10110000
 800078c:	10220000 	.word	0x10220000

08000790 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000790:	b570      	push	{r4, r5, r6, lr}
  uint32_t freqrange = 0;
  uint32_t pclk1 = 0;

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8000792:	4604      	mov	r4, r0
 8000794:	2800      	cmp	r0, #0
 8000796:	d05f      	beq.n	8000858 <HAL_I2C_Init+0xc8>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 8000798:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800079c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80007a0:	b91b      	cbnz	r3, 80007aa <HAL_I2C_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80007a2:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80007a6:	f001 f811 	bl	80017cc <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80007aa:	6822      	ldr	r2, [r4, #0]
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80007ac:	2324      	movs	r3, #36	; 0x24
 80007ae:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80007b2:	6813      	ldr	r3, [r2, #0]
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80007b4:	4d29      	ldr	r5, [pc, #164]	; (800085c <HAL_I2C_Init+0xcc>)
  }

  hi2c->State = HAL_I2C_STATE_BUSY;

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80007b6:	f023 0301 	bic.w	r3, r3, #1
 80007ba:	6013      	str	r3, [r2, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80007bc:	f000 fbb2 	bl	8000f24 <HAL_RCC_GetPCLK1Freq>

  /* Calculate frequency range */
  freqrange = I2C_FREQ_RANGE(pclk1);
 80007c0:	4927      	ldr	r1, [pc, #156]	; (8000860 <HAL_I2C_Init+0xd0>)
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80007c2:	6863      	ldr	r3, [r4, #4]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();

  /* Calculate frequency range */
  freqrange = I2C_FREQ_RANGE(pclk1);
 80007c4:	fbb0 f1f1 	udiv	r1, r0, r1
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80007c8:	42ab      	cmp	r3, r5
  /* Calculate frequency range */
  freqrange = I2C_FREQ_RANGE(pclk1);

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 80007ca:	6822      	ldr	r2, [r4, #0]
 80007cc:	462e      	mov	r6, r5

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80007ce:	bf88      	it	hi
 80007d0:	f44f 7596 	movhi.w	r5, #300	; 0x12c
  /* Calculate frequency range */
  freqrange = I2C_FREQ_RANGE(pclk1);

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 80007d4:	6051      	str	r1, [r2, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80007d6:	bf82      	ittt	hi
 80007d8:	4369      	mulhi	r1, r5
 80007da:	f44f 757a 	movhi.w	r5, #1000	; 0x3e8
 80007de:	fbb1 f1f5 	udivhi	r1, r1, r5
static uint32_t I2C_Configure_Speed(I2C_HandleTypeDef *hi2c, uint32_t I2CClkSrcFreq)
{
  uint32_t tmp1 = 0;
  
  /* Clock Standard Mode */
  if(hi2c->Init.ClockSpeed <= I2C_STANDARD_MODE_MAX_CLK)
 80007e2:	42b3      	cmp	r3, r6
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80007e4:	f101 0101 	add.w	r1, r1, #1
 80007e8:	6211      	str	r1, [r2, #32]
static uint32_t I2C_Configure_Speed(I2C_HandleTypeDef *hi2c, uint32_t I2CClkSrcFreq)
{
  uint32_t tmp1 = 0;
  
  /* Clock Standard Mode */
  if(hi2c->Init.ClockSpeed <= I2C_STANDARD_MODE_MAX_CLK)
 80007ea:	d808      	bhi.n	80007fe <HAL_I2C_Init+0x6e>
  {
    /* Calculate Value to be set in CCR register */
    tmp1 = (I2CClkSrcFreq/(hi2c->Init.ClockSpeed << 1));
 80007ec:	005b      	lsls	r3, r3, #1
 80007ee:	fbb0 f0f3 	udiv	r0, r0, r3
    
    /* The minimum allowed value set in CCR register is 0x04 for Standard Mode */
    if( (tmp1 & I2C_CCR_CCR) < 4 )
 80007f2:	f3c0 030b 	ubfx	r3, r0, #0, #12
 80007f6:	2b04      	cmp	r3, #4
 80007f8:	bf38      	it	cc
 80007fa:	2004      	movcc	r0, #4
 80007fc:	e013      	b.n	8000826 <HAL_I2C_Init+0x96>
  {
    /* Clock Fast Mode */
    tmp1 = I2C_CCR_FS;
    
    /* Duty Cylce tLow/tHigh = 2 */
    if(hi2c->Init.DutyCycle == I2C_DUTYCYCLE_2)
 80007fe:	68a1      	ldr	r1, [r4, #8]
 8000800:	b931      	cbnz	r1, 8000810 <HAL_I2C_Init+0x80>
    {
      tmp1 |= (I2CClkSrcFreq/(hi2c->Init.ClockSpeed * 3)) | I2C_DUTYCYCLE_2; 
 8000802:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000806:	fbb0 f0f3 	udiv	r0, r0, r3
 800080a:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 800080e:	e005      	b.n	800081c <HAL_I2C_Init+0x8c>
    }
    else /* Duty Cylce tLow/tHigh = 16/9 */
    {
      tmp1 |= (I2CClkSrcFreq/(hi2c->Init.ClockSpeed * 25)) | I2C_DUTYCYCLE_16_9;
 8000810:	2119      	movs	r1, #25
 8000812:	434b      	muls	r3, r1
 8000814:	fbb0 f0f3 	udiv	r0, r0, r3
 8000818:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
    }

    /* The minimum allowed value set in CCR register is 0x01 for Fast Mode */
    if( (tmp1 & I2C_CCR_CCR) < 1 )
 800081c:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8000820:	2b00      	cmp	r3, #0
 8000822:	bf08      	it	eq
 8000824:	2001      	moveq	r0, #1
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_Configure_Speed(hi2c, pclk1);

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000826:	69e1      	ldr	r1, [r4, #28]
 8000828:	6a23      	ldr	r3, [r4, #32]
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_Configure_Speed(hi2c, pclk1);
 800082a:	61d0      	str	r0, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800082c:	430b      	orrs	r3, r1
 800082e:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8000830:	6921      	ldr	r1, [r4, #16]
 8000832:	68e3      	ldr	r3, [r4, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000834:	2000      	movs	r0, #0
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8000836:	430b      	orrs	r3, r1
 8000838:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 800083a:	6961      	ldr	r1, [r4, #20]
 800083c:	69a3      	ldr	r3, [r4, #24]
 800083e:	430b      	orrs	r3, r1
 8000840:	60d3      	str	r3, [r2, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000842:	6813      	ldr	r3, [r2, #0]
 8000844:	f043 0301 	orr.w	r3, r3, #1
 8000848:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
  hi2c->State = HAL_I2C_STATE_READY;
 800084a:	2320      	movs	r3, #32
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800084c:	63a0      	str	r0, [r4, #56]	; 0x38
  hi2c->State = HAL_I2C_STATE_READY;
 800084e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000852:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36

  return HAL_OK;
 8000856:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t pclk1 = 0;

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
  {
    return HAL_ERROR;
 8000858:	2001      	movs	r0, #1
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
  hi2c->State = HAL_I2C_STATE_READY;
  hi2c->Mode = HAL_I2C_MODE_NONE;

  return HAL_OK;
}
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	000186a0 	.word	0x000186a0
 8000860:	000f4240 	.word	0x000f4240

08000864 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000864:	6803      	ldr	r3, [r0, #0]
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000866:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800086a:	07dc      	lsls	r4, r3, #31
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800086c:	4605      	mov	r5, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800086e:	d403      	bmi.n	8000878 <HAL_RCC_OscConfig+0x14>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000870:	682b      	ldr	r3, [r5, #0]
 8000872:	0798      	lsls	r0, r3, #30
 8000874:	d473      	bmi.n	800095e <HAL_RCC_OscConfig+0xfa>
 8000876:	e0f2      	b.n	8000a5e <HAL_RCC_OscConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000878:	4cb9      	ldr	r4, [pc, #740]	; (8000b60 <HAL_RCC_OscConfig+0x2fc>)
 800087a:	6863      	ldr	r3, [r4, #4]
 800087c:	f003 030c 	and.w	r3, r3, #12
 8000880:	2b04      	cmp	r3, #4
 8000882:	d007      	beq.n	8000894 <HAL_RCC_OscConfig+0x30>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000884:	6863      	ldr	r3, [r4, #4]
 8000886:	f003 030c 	and.w	r3, r3, #12
 800088a:	2b08      	cmp	r3, #8
 800088c:	d116      	bne.n	80008bc <HAL_RCC_OscConfig+0x58>
 800088e:	6863      	ldr	r3, [r4, #4]
 8000890:	03d9      	lsls	r1, r3, #15
 8000892:	d513      	bpl.n	80008bc <HAL_RCC_OscConfig+0x58>
 8000894:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000898:	fa93 f2a3 	rbit	r2, r3
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800089c:	6822      	ldr	r2, [r4, #0]
 800089e:	fa93 f3a3 	rbit	r3, r3
 80008a2:	fab3 f383 	clz	r3, r3
 80008a6:	f003 031f 	and.w	r3, r3, #31
 80008aa:	fa22 f303 	lsr.w	r3, r2, r3
 80008ae:	07da      	lsls	r2, r3, #31
 80008b0:	d5de      	bpl.n	8000870 <HAL_RCC_OscConfig+0xc>
 80008b2:	686b      	ldr	r3, [r5, #4]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d1db      	bne.n	8000870 <HAL_RCC_OscConfig+0xc>
      {
        return HAL_ERROR;
 80008b8:	2001      	movs	r0, #1
 80008ba:	e22d      	b.n	8000d18 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008bc:	686b      	ldr	r3, [r5, #4]
 80008be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80008c2:	d015      	beq.n	80008f0 <HAL_RCC_OscConfig+0x8c>
 80008c4:	b96b      	cbnz	r3, 80008e2 <HAL_RCC_OscConfig+0x7e>
 80008c6:	6823      	ldr	r3, [r4, #0]
 80008c8:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 80008cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80008d0:	6023      	str	r3, [r4, #0]
 80008d2:	6823      	ldr	r3, [r4, #0]
 80008d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80008d8:	6023      	str	r3, [r4, #0]
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80008da:	f7ff fc89 	bl	80001f0 <HAL_GetTick>
 80008de:	4607      	mov	r7, r0
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80008e0:	e02f      	b.n	8000942 <HAL_RCC_OscConfig+0xde>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008e2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80008e6:	6823      	ldr	r3, [r4, #0]
 80008e8:	d106      	bne.n	80008f8 <HAL_RCC_OscConfig+0x94>
 80008ea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008ee:	6023      	str	r3, [r4, #0]
 80008f0:	6823      	ldr	r3, [r4, #0]
 80008f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008f6:	e005      	b.n	8000904 <HAL_RCC_OscConfig+0xa0>
 80008f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80008fc:	6023      	str	r3, [r4, #0]
 80008fe:	6823      	ldr	r3, [r4, #0]
 8000900:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000904:	6023      	str	r3, [r4, #0]

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000906:	f7ff fc73 	bl	80001f0 <HAL_GetTick>
 800090a:	4607      	mov	r7, r0
 800090c:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000910:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000914:	6822      	ldr	r2, [r4, #0]
 8000916:	fa96 f3a6 	rbit	r3, r6
 800091a:	fab3 f383 	clz	r3, r3
 800091e:	f003 031f 	and.w	r3, r3, #31
 8000922:	fa22 f303 	lsr.w	r3, r2, r3
 8000926:	07db      	lsls	r3, r3, #31
 8000928:	d4a2      	bmi.n	8000870 <HAL_RCC_OscConfig+0xc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800092a:	f7ff fc61 	bl	80001f0 <HAL_GetTick>
 800092e:	1bc0      	subs	r0, r0, r7
 8000930:	2864      	cmp	r0, #100	; 0x64
 8000932:	d9ed      	bls.n	8000910 <HAL_RCC_OscConfig+0xac>
          {
            return HAL_TIMEOUT;
 8000934:	2003      	movs	r0, #3
 8000936:	e1ef      	b.n	8000d18 <HAL_RCC_OscConfig+0x4b4>
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000938:	f7ff fc5a 	bl	80001f0 <HAL_GetTick>
 800093c:	1bc0      	subs	r0, r0, r7
 800093e:	2864      	cmp	r0, #100	; 0x64
 8000940:	d8f8      	bhi.n	8000934 <HAL_RCC_OscConfig+0xd0>
 8000942:	fa96 f3a6 	rbit	r3, r6
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000946:	6822      	ldr	r2, [r4, #0]
 8000948:	fa96 f3a6 	rbit	r3, r6
 800094c:	fab3 f383 	clz	r3, r3
 8000950:	f003 031f 	and.w	r3, r3, #31
 8000954:	fa22 f303 	lsr.w	r3, r2, r3
 8000958:	07d8      	lsls	r0, r3, #31
 800095a:	d4ed      	bmi.n	8000938 <HAL_RCC_OscConfig+0xd4>
 800095c:	e788      	b.n	8000870 <HAL_RCC_OscConfig+0xc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800095e:	4c80      	ldr	r4, [pc, #512]	; (8000b60 <HAL_RCC_OscConfig+0x2fc>)
 8000960:	6863      	ldr	r3, [r4, #4]
 8000962:	f013 0f0c 	tst.w	r3, #12
 8000966:	d007      	beq.n	8000978 <HAL_RCC_OscConfig+0x114>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000968:	6863      	ldr	r3, [r4, #4]
 800096a:	f003 030c 	and.w	r3, r3, #12
 800096e:	2b08      	cmp	r3, #8
 8000970:	d121      	bne.n	80009b6 <HAL_RCC_OscConfig+0x152>
 8000972:	6863      	ldr	r3, [r4, #4]
 8000974:	03d9      	lsls	r1, r3, #15
 8000976:	d41e      	bmi.n	80009b6 <HAL_RCC_OscConfig+0x152>
 8000978:	2302      	movs	r3, #2
 800097a:	fa93 f2a3 	rbit	r2, r3
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800097e:	6822      	ldr	r2, [r4, #0]
 8000980:	fa93 f3a3 	rbit	r3, r3
 8000984:	fab3 f383 	clz	r3, r3
 8000988:	f003 031f 	and.w	r3, r3, #31
 800098c:	fa22 f303 	lsr.w	r3, r2, r3
 8000990:	07da      	lsls	r2, r3, #31
 8000992:	d502      	bpl.n	800099a <HAL_RCC_OscConfig+0x136>
 8000994:	692b      	ldr	r3, [r5, #16]
 8000996:	2b01      	cmp	r3, #1
 8000998:	d18e      	bne.n	80008b8 <HAL_RCC_OscConfig+0x54>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800099a:	6823      	ldr	r3, [r4, #0]
 800099c:	22f8      	movs	r2, #248	; 0xf8
 800099e:	fa92 f2a2 	rbit	r2, r2
 80009a2:	fab2 f282 	clz	r2, r2
 80009a6:	6969      	ldr	r1, [r5, #20]
 80009a8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80009ac:	fa01 f202 	lsl.w	r2, r1, r2
 80009b0:	4313      	orrs	r3, r2
 80009b2:	6023      	str	r3, [r4, #0]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80009b4:	e053      	b.n	8000a5e <HAL_RCC_OscConfig+0x1fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80009b6:	692a      	ldr	r2, [r5, #16]
 80009b8:	2301      	movs	r3, #1
 80009ba:	b37a      	cbz	r2, 8000a1c <HAL_RCC_OscConfig+0x1b8>
 80009bc:	fa93 f2a3 	rbit	r2, r3
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80009c0:	fab2 f282 	clz	r2, r2
 80009c4:	0092      	lsls	r2, r2, #2
 80009c6:	f102 4284 	add.w	r2, r2, #1107296256	; 0x42000000
 80009ca:	f502 0284 	add.w	r2, r2, #4325376	; 0x420000
 80009ce:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80009d0:	f7ff fc0e 	bl	80001f0 <HAL_GetTick>
 80009d4:	4607      	mov	r7, r0
 80009d6:	2602      	movs	r6, #2
 80009d8:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009dc:	4860      	ldr	r0, [pc, #384]	; (8000b60 <HAL_RCC_OscConfig+0x2fc>)
 80009de:	6822      	ldr	r2, [r4, #0]
 80009e0:	fa96 f3a6 	rbit	r3, r6
 80009e4:	fab3 f383 	clz	r3, r3
 80009e8:	f003 031f 	and.w	r3, r3, #31
 80009ec:	fa22 f303 	lsr.w	r3, r2, r3
 80009f0:	07db      	lsls	r3, r3, #31
 80009f2:	d405      	bmi.n	8000a00 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80009f4:	f7ff fbfc 	bl	80001f0 <HAL_GetTick>
 80009f8:	1bc0      	subs	r0, r0, r7
 80009fa:	2802      	cmp	r0, #2
 80009fc:	d9ec      	bls.n	80009d8 <HAL_RCC_OscConfig+0x174>
 80009fe:	e799      	b.n	8000934 <HAL_RCC_OscConfig+0xd0>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a00:	6803      	ldr	r3, [r0, #0]
 8000a02:	22f8      	movs	r2, #248	; 0xf8
 8000a04:	fa92 f2a2 	rbit	r2, r2
 8000a08:	fab2 f282 	clz	r2, r2
 8000a0c:	6969      	ldr	r1, [r5, #20]
 8000a0e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000a12:	fa01 f202 	lsl.w	r2, r1, r2
 8000a16:	4313      	orrs	r3, r2
 8000a18:	6003      	str	r3, [r0, #0]
 8000a1a:	e020      	b.n	8000a5e <HAL_RCC_OscConfig+0x1fa>
 8000a1c:	fa93 f3a3 	rbit	r3, r3
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000a20:	fab3 f383 	clz	r3, r3
 8000a24:	009b      	lsls	r3, r3, #2
 8000a26:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8000a2a:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8000a2e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a30:	f7ff fbde 	bl	80001f0 <HAL_GetTick>
 8000a34:	4607      	mov	r7, r0
 8000a36:	2602      	movs	r6, #2
 8000a38:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a3c:	6822      	ldr	r2, [r4, #0]
 8000a3e:	fa96 f3a6 	rbit	r3, r6
 8000a42:	fab3 f383 	clz	r3, r3
 8000a46:	f003 031f 	and.w	r3, r3, #31
 8000a4a:	fa22 f303 	lsr.w	r3, r2, r3
 8000a4e:	07d9      	lsls	r1, r3, #31
 8000a50:	d505      	bpl.n	8000a5e <HAL_RCC_OscConfig+0x1fa>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a52:	f7ff fbcd 	bl	80001f0 <HAL_GetTick>
 8000a56:	1bc0      	subs	r0, r0, r7
 8000a58:	2802      	cmp	r0, #2
 8000a5a:	d9ed      	bls.n	8000a38 <HAL_RCC_OscConfig+0x1d4>
 8000a5c:	e76a      	b.n	8000934 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000a5e:	682b      	ldr	r3, [r5, #0]
 8000a60:	071a      	lsls	r2, r3, #28
 8000a62:	d546      	bpl.n	8000af2 <HAL_RCC_OscConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000a64:	69aa      	ldr	r2, [r5, #24]
 8000a66:	4c3e      	ldr	r4, [pc, #248]	; (8000b60 <HAL_RCC_OscConfig+0x2fc>)
 8000a68:	2301      	movs	r3, #1
 8000a6a:	493e      	ldr	r1, [pc, #248]	; (8000b64 <HAL_RCC_OscConfig+0x300>)
 8000a6c:	b312      	cbz	r2, 8000ab4 <HAL_RCC_OscConfig+0x250>
 8000a6e:	fa93 f2a3 	rbit	r2, r3
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000a72:	fab2 f282 	clz	r2, r2
 8000a76:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000a7a:	f7ff fbb9 	bl	80001f0 <HAL_GetTick>
 8000a7e:	4607      	mov	r7, r0
 8000a80:	2602      	movs	r6, #2
 8000a82:	fa96 f3a6 	rbit	r3, r6
 8000a86:	fa96 f3a6 	rbit	r3, r6
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a8a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000a8c:	fa96 f3a6 	rbit	r3, r6
 8000a90:	fab3 f383 	clz	r3, r3
 8000a94:	f003 031f 	and.w	r3, r3, #31
 8000a98:	fa22 f303 	lsr.w	r3, r2, r3
 8000a9c:	07db      	lsls	r3, r3, #31
 8000a9e:	d405      	bmi.n	8000aac <HAL_RCC_OscConfig+0x248>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000aa0:	f7ff fba6 	bl	80001f0 <HAL_GetTick>
 8000aa4:	1bc0      	subs	r0, r0, r7
 8000aa6:	2802      	cmp	r0, #2
 8000aa8:	d9eb      	bls.n	8000a82 <HAL_RCC_OscConfig+0x21e>
 8000aaa:	e743      	b.n	8000934 <HAL_RCC_OscConfig+0xd0>
          return HAL_TIMEOUT;
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      HAL_Delay(1);
 8000aac:	2001      	movs	r0, #1
 8000aae:	f7ff fba5 	bl	80001fc <HAL_Delay>
 8000ab2:	e01e      	b.n	8000af2 <HAL_RCC_OscConfig+0x28e>
 8000ab4:	fa93 f3a3 	rbit	r3, r3
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000ab8:	fab3 f383 	clz	r3, r3
 8000abc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ac0:	f7ff fb96 	bl	80001f0 <HAL_GetTick>
 8000ac4:	4607      	mov	r7, r0
 8000ac6:	2602      	movs	r6, #2
 8000ac8:	fa96 f3a6 	rbit	r3, r6
 8000acc:	fa96 f3a6 	rbit	r3, r6
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ad0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000ad2:	fa96 f3a6 	rbit	r3, r6
 8000ad6:	fab3 f383 	clz	r3, r3
 8000ada:	f003 031f 	and.w	r3, r3, #31
 8000ade:	fa22 f303 	lsr.w	r3, r2, r3
 8000ae2:	07d8      	lsls	r0, r3, #31
 8000ae4:	d505      	bpl.n	8000af2 <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ae6:	f7ff fb83 	bl	80001f0 <HAL_GetTick>
 8000aea:	1bc0      	subs	r0, r0, r7
 8000aec:	2802      	cmp	r0, #2
 8000aee:	d9eb      	bls.n	8000ac8 <HAL_RCC_OscConfig+0x264>
 8000af0:	e720      	b.n	8000934 <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000af2:	682b      	ldr	r3, [r5, #0]
 8000af4:	0759      	lsls	r1, r3, #29
 8000af6:	d404      	bmi.n	8000b02 <HAL_RCC_OscConfig+0x29e>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000af8:	69ea      	ldr	r2, [r5, #28]
 8000afa:	2a00      	cmp	r2, #0
 8000afc:	f040 8081 	bne.w	8000c02 <HAL_RCC_OscConfig+0x39e>
 8000b00:	e0d8      	b.n	8000cb4 <HAL_RCC_OscConfig+0x450>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8000b02:	4c17      	ldr	r4, [pc, #92]	; (8000b60 <HAL_RCC_OscConfig+0x2fc>)
    
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000b04:	4e18      	ldr	r6, [pc, #96]	; (8000b68 <HAL_RCC_OscConfig+0x304>)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8000b06:	69e3      	ldr	r3, [r4, #28]
 8000b08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b0c:	61e3      	str	r3, [r4, #28]
 8000b0e:	69e3      	ldr	r3, [r4, #28]
 8000b10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b14:	9301      	str	r3, [sp, #4]
 8000b16:	9b01      	ldr	r3, [sp, #4]
    
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000b18:	6833      	ldr	r3, [r6, #0]
 8000b1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b1e:	6033      	str	r3, [r6, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000b20:	f7ff fb66 	bl	80001f0 <HAL_GetTick>
 8000b24:	4607      	mov	r7, r0

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8000b26:	6833      	ldr	r3, [r6, #0]
 8000b28:	05da      	lsls	r2, r3, #23
 8000b2a:	d405      	bmi.n	8000b38 <HAL_RCC_OscConfig+0x2d4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000b2c:	f7ff fb60 	bl	80001f0 <HAL_GetTick>
 8000b30:	1bc0      	subs	r0, r0, r7
 8000b32:	2864      	cmp	r0, #100	; 0x64
 8000b34:	d9f7      	bls.n	8000b26 <HAL_RCC_OscConfig+0x2c2>
 8000b36:	e6fd      	b.n	8000934 <HAL_RCC_OscConfig+0xd0>
          return HAL_TIMEOUT;
        }
      }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b38:	68eb      	ldr	r3, [r5, #12]
 8000b3a:	2b01      	cmp	r3, #1
 8000b3c:	d01c      	beq.n	8000b78 <HAL_RCC_OscConfig+0x314>
 8000b3e:	b9ab      	cbnz	r3, 8000b6c <HAL_RCC_OscConfig+0x308>
 8000b40:	6a23      	ldr	r3, [r4, #32]
 8000b42:	2602      	movs	r6, #2
 8000b44:	f023 0301 	bic.w	r3, r3, #1
 8000b48:	6223      	str	r3, [r4, #32]
 8000b4a:	6a23      	ldr	r3, [r4, #32]
 8000b4c:	4637      	mov	r7, r6
 8000b4e:	f023 0304 	bic.w	r3, r3, #4
 8000b52:	6223      	str	r3, [r4, #32]
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b54:	f7ff fb4c 	bl	80001f0 <HAL_GetTick>
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b58:	f241 3988 	movw	r9, #5000	; 0x1388
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b5c:	4680      	mov	r8, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000b5e:	e048      	b.n	8000bf2 <HAL_RCC_OscConfig+0x38e>
 8000b60:	40021000 	.word	0x40021000
 8000b64:	42420480 	.word	0x42420480
 8000b68:	40007000 	.word	0x40007000
          return HAL_TIMEOUT;
        }
      }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b6c:	2b05      	cmp	r3, #5
 8000b6e:	6a23      	ldr	r3, [r4, #32]
 8000b70:	d106      	bne.n	8000b80 <HAL_RCC_OscConfig+0x31c>
 8000b72:	f043 0304 	orr.w	r3, r3, #4
 8000b76:	6223      	str	r3, [r4, #32]
 8000b78:	6a23      	ldr	r3, [r4, #32]
 8000b7a:	f043 0301 	orr.w	r3, r3, #1
 8000b7e:	e005      	b.n	8000b8c <HAL_RCC_OscConfig+0x328>
 8000b80:	f023 0301 	bic.w	r3, r3, #1
 8000b84:	6223      	str	r3, [r4, #32]
 8000b86:	6a23      	ldr	r3, [r4, #32]
 8000b88:	f023 0304 	bic.w	r3, r3, #4
 8000b8c:	6223      	str	r3, [r4, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b8e:	f7ff fb2f 	bl	80001f0 <HAL_GetTick>
 8000b92:	2602      	movs	r6, #2
 8000b94:	4681      	mov	r9, r0
 8000b96:	46b0      	mov	r8, r6
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b98:	f241 3788 	movw	r7, #5000	; 0x1388
 8000b9c:	fa96 f3a6 	rbit	r3, r6
 8000ba0:	fa96 f3a6 	rbit	r3, r6
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ba4:	b10b      	cbz	r3, 8000baa <HAL_RCC_OscConfig+0x346>
 8000ba6:	6a22      	ldr	r2, [r4, #32]
 8000ba8:	e000      	b.n	8000bac <HAL_RCC_OscConfig+0x348>
 8000baa:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000bac:	fa98 f3a8 	rbit	r3, r8
 8000bb0:	fab3 f383 	clz	r3, r3
 8000bb4:	f003 031f 	and.w	r3, r3, #31
 8000bb8:	fa22 f303 	lsr.w	r3, r2, r3
 8000bbc:	07db      	lsls	r3, r3, #31
 8000bbe:	d49b      	bmi.n	8000af8 <HAL_RCC_OscConfig+0x294>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000bc0:	f7ff fb16 	bl	80001f0 <HAL_GetTick>
 8000bc4:	ebc9 0000 	rsb	r0, r9, r0
 8000bc8:	42b8      	cmp	r0, r7
 8000bca:	d9e7      	bls.n	8000b9c <HAL_RCC_OscConfig+0x338>
 8000bcc:	e6b2      	b.n	8000934 <HAL_RCC_OscConfig+0xd0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000bce:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000bd0:	fa97 f3a7 	rbit	r3, r7
 8000bd4:	fab3 f383 	clz	r3, r3
 8000bd8:	f003 031f 	and.w	r3, r3, #31
 8000bdc:	fa22 f303 	lsr.w	r3, r2, r3
 8000be0:	07d8      	lsls	r0, r3, #31
 8000be2:	d589      	bpl.n	8000af8 <HAL_RCC_OscConfig+0x294>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000be4:	f7ff fb04 	bl	80001f0 <HAL_GetTick>
 8000be8:	ebc8 0000 	rsb	r0, r8, r0
 8000bec:	4548      	cmp	r0, r9
 8000bee:	f63f aea1 	bhi.w	8000934 <HAL_RCC_OscConfig+0xd0>
 8000bf2:	fa96 f3a6 	rbit	r3, r6
 8000bf6:	fa96 f3a6 	rbit	r3, r6
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d0e7      	beq.n	8000bce <HAL_RCC_OscConfig+0x36a>
 8000bfe:	6a22      	ldr	r2, [r4, #32]
 8000c00:	e7e6      	b.n	8000bd0 <HAL_RCC_OscConfig+0x36c>
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000c02:	4c47      	ldr	r4, [pc, #284]	; (8000d20 <HAL_RCC_OscConfig+0x4bc>)
 8000c04:	6863      	ldr	r3, [r4, #4]
 8000c06:	f003 030c 	and.w	r3, r3, #12
 8000c0a:	2b08      	cmp	r3, #8
 8000c0c:	f43f ae54 	beq.w	80008b8 <HAL_RCC_OscConfig+0x54>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000c10:	2a02      	cmp	r2, #2
 8000c12:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000c16:	d15c      	bne.n	8000cd2 <HAL_RCC_OscConfig+0x46e>
 8000c18:	fa93 f3a3 	rbit	r3, r3
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000c1c:	fab3 f383 	clz	r3, r3
 8000c20:	009b      	lsls	r3, r3, #2
 8000c22:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8000c26:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c2e:	f7ff fadf 	bl	80001f0 <HAL_GetTick>
 8000c32:	4680      	mov	r8, r0
 8000c34:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 8000c38:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c3c:	4f38      	ldr	r7, [pc, #224]	; (8000d20 <HAL_RCC_OscConfig+0x4bc>)
 8000c3e:	6822      	ldr	r2, [r4, #0]
 8000c40:	fa96 f3a6 	rbit	r3, r6
 8000c44:	fab3 f383 	clz	r3, r3
 8000c48:	f003 031f 	and.w	r3, r3, #31
 8000c4c:	fa22 f303 	lsr.w	r3, r2, r3
 8000c50:	07d9      	lsls	r1, r3, #31
 8000c52:	d431      	bmi.n	8000cb8 <HAL_RCC_OscConfig+0x454>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000c54:	6a2e      	ldr	r6, [r5, #32]
 8000c56:	f5b6 3f80 	cmp.w	r6, #65536	; 0x10000
 8000c5a:	d105      	bne.n	8000c68 <HAL_RCC_OscConfig+0x404>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000c5c:	6879      	ldr	r1, [r7, #4]
 8000c5e:	f421 3000 	bic.w	r0, r1, #131072	; 0x20000
 8000c62:	68a9      	ldr	r1, [r5, #8]
 8000c64:	4301      	orrs	r1, r0
 8000c66:	6079      	str	r1, [r7, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000c68:	6863      	ldr	r3, [r4, #4]
 8000c6a:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8000c6c:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8000c70:	4332      	orrs	r2, r6
 8000c72:	4313      	orrs	r3, r2
 8000c74:	6063      	str	r3, [r4, #4]
 8000c76:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000c7a:	fa93 f3a3 	rbit	r3, r3
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000c7e:	fab3 f383 	clz	r3, r3
 8000c82:	009b      	lsls	r3, r3, #2
 8000c84:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8000c88:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c90:	f7ff faae 	bl	80001f0 <HAL_GetTick>
 8000c94:	4606      	mov	r6, r0
 8000c96:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8000c9a:	fa95 f3a5 	rbit	r3, r5
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000c9e:	6822      	ldr	r2, [r4, #0]
 8000ca0:	fa95 f3a5 	rbit	r3, r5
 8000ca4:	fab3 f383 	clz	r3, r3
 8000ca8:	f003 031f 	and.w	r3, r3, #31
 8000cac:	fa22 f303 	lsr.w	r3, r2, r3
 8000cb0:	07da      	lsls	r2, r3, #31
 8000cb2:	d508      	bpl.n	8000cc6 <HAL_RCC_OscConfig+0x462>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000cb4:	2000      	movs	r0, #0
 8000cb6:	e02f      	b.n	8000d18 <HAL_RCC_OscConfig+0x4b4>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000cb8:	f7ff fa9a 	bl	80001f0 <HAL_GetTick>
 8000cbc:	ebc8 0000 	rsb	r0, r8, r0
 8000cc0:	2802      	cmp	r0, #2
 8000cc2:	d9b9      	bls.n	8000c38 <HAL_RCC_OscConfig+0x3d4>
 8000cc4:	e636      	b.n	8000934 <HAL_RCC_OscConfig+0xd0>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000cc6:	f7ff fa93 	bl	80001f0 <HAL_GetTick>
 8000cca:	1b80      	subs	r0, r0, r6
 8000ccc:	2802      	cmp	r0, #2
 8000cce:	d9e4      	bls.n	8000c9a <HAL_RCC_OscConfig+0x436>
 8000cd0:	e630      	b.n	8000934 <HAL_RCC_OscConfig+0xd0>
 8000cd2:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000cd6:	fab3 f383 	clz	r3, r3
 8000cda:	009b      	lsls	r3, r3, #2
 8000cdc:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8000ce0:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ce8:	f7ff fa82 	bl	80001f0 <HAL_GetTick>
 8000cec:	4606      	mov	r6, r0
 8000cee:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8000cf2:	fa95 f3a5 	rbit	r3, r5
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000cf6:	6822      	ldr	r2, [r4, #0]
 8000cf8:	fa95 f3a5 	rbit	r3, r5
 8000cfc:	fab3 f383 	clz	r3, r3
 8000d00:	f003 031f 	and.w	r3, r3, #31
 8000d04:	fa22 f303 	lsr.w	r3, r2, r3
 8000d08:	07db      	lsls	r3, r3, #31
 8000d0a:	d5d3      	bpl.n	8000cb4 <HAL_RCC_OscConfig+0x450>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d0c:	f7ff fa70 	bl	80001f0 <HAL_GetTick>
 8000d10:	1b80      	subs	r0, r0, r6
 8000d12:	2802      	cmp	r0, #2
 8000d14:	d9ed      	bls.n	8000cf2 <HAL_RCC_OscConfig+0x48e>
 8000d16:	e60d      	b.n	8000934 <HAL_RCC_OscConfig+0xd0>
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 8000d18:	b003      	add	sp, #12
 8000d1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000d1e:	bf00      	nop
 8000d20:	40021000 	.word	0x40021000

08000d24 <HAL_RCC_GetSysClockFreq>:
{
#if   defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[12] = {0, 0, 4,  5,  6,  7,  8,  9, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000d24:	4b1f      	ldr	r3, [pc, #124]	; (8000da4 <HAL_RCC_GetSysClockFreq+0x80>)
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000d26:	b570      	push	{r4, r5, r6, lr}
#if   defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[12] = {0, 0, 4,  5,  6,  7,  8,  9, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000d28:	f103 0510 	add.w	r5, r3, #16
 8000d2c:	462e      	mov	r6, r5
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000d2e:	b086      	sub	sp, #24
#if   defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[12] = {0, 0, 4,  5,  6,  7,  8,  9, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000d30:	ac02      	add	r4, sp, #8
 8000d32:	4622      	mov	r2, r4
 8000d34:	6818      	ldr	r0, [r3, #0]
 8000d36:	6859      	ldr	r1, [r3, #4]
 8000d38:	3308      	adds	r3, #8
 8000d3a:	c203      	stmia	r2!, {r0, r1}
 8000d3c:	42ab      	cmp	r3, r5
 8000d3e:	4614      	mov	r4, r2
 8000d40:	d1f7      	bne.n	8000d32 <HAL_RCC_GetSysClockFreq+0xe>
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = { 1, 2};
 8000d42:	8833      	ldrh	r3, [r6, #0]
  uint32_t sysclockfreq = 0;
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0, pll2mul = 0;
#endif /*RCC_CFGR2_PREDIV1SRC*/
  
  tmpreg = RCC->CFGR;
 8000d44:	4c18      	ldr	r4, [pc, #96]	; (8000da8 <HAL_RCC_GetSysClockFreq+0x84>)
#else
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = { 1, 2};
 8000d46:	f8ad 3004 	strh.w	r3, [sp, #4]
  uint32_t sysclockfreq = 0;
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0, pll2mul = 0;
#endif /*RCC_CFGR2_PREDIV1SRC*/
  
  tmpreg = RCC->CFGR;
 8000d4a:	6860      	ldr	r0, [r4, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000d4c:	f000 030c 	and.w	r3, r0, #12
 8000d50:	2b08      	cmp	r3, #8
 8000d52:	d124      	bne.n	8000d9e <HAL_RCC_GetSysClockFreq+0x7a>
 8000d54:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8000d58:	fa93 f3a3 	rbit	r3, r3
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> POSITION_VAL(RCC_CFGR_PLLMULL)];
 8000d5c:	fab3 f383 	clz	r3, r3
 8000d60:	f400 1270 	and.w	r2, r0, #3932160	; 0x3c0000
 8000d64:	fa22 f303 	lsr.w	r3, r2, r3
 8000d68:	aa06      	add	r2, sp, #24
 8000d6a:	4413      	add	r3, r2
 8000d6c:	f813 1c10 	ldrb.w	r1, [r3, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000d70:	03c3      	lsls	r3, r0, #15
 8000d72:	d511      	bpl.n	8000d98 <HAL_RCC_GetSysClockFreq+0x74>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> POSITION_VAL(RCC_CFGR2_PREDIV1)];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> POSITION_VAL(RCC_CFGR_PLLXTPRE)];
 8000d74:	6862      	ldr	r2, [r4, #4]
 8000d76:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d7a:	fa93 f3a3 	rbit	r3, r3
 8000d7e:	fab3 f083 	clz	r0, r3
 8000d82:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8000d86:	40c3      	lsrs	r3, r0
 8000d88:	aa06      	add	r2, sp, #24
 8000d8a:	4413      	add	r3, r2
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
 8000d8c:	f813 0c14 	ldrb.w	r0, [r3, #-20]
 8000d90:	4b06      	ldr	r3, [pc, #24]	; (8000dac <HAL_RCC_GetSysClockFreq+0x88>)
 8000d92:	fbb3 f0f0 	udiv	r0, r3, r0
 8000d96:	e000      	b.n	8000d9a <HAL_RCC_GetSysClockFreq+0x76>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000d98:	4805      	ldr	r0, [pc, #20]	; (8000db0 <HAL_RCC_GetSysClockFreq+0x8c>)
 8000d9a:	4348      	muls	r0, r1
 8000d9c:	e000      	b.n	8000da0 <HAL_RCC_GetSysClockFreq+0x7c>
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000d9e:	4803      	ldr	r0, [pc, #12]	; (8000dac <HAL_RCC_GetSysClockFreq+0x88>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000da0:	b006      	add	sp, #24
 8000da2:	bd70      	pop	{r4, r5, r6, pc}
 8000da4:	080019d4 	.word	0x080019d4
 8000da8:	40021000 	.word	0x40021000
 8000dac:	007a1200 	.word	0x007a1200
 8000db0:	003d0900 	.word	0x003d0900

08000db4 <HAL_RCC_ClockConfig>:
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000db4:	4a54      	ldr	r2, [pc, #336]	; (8000f08 <HAL_RCC_ClockConfig+0x154>)
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000db6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000dba:	6813      	ldr	r3, [r2, #0]
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000dbc:	4606      	mov	r6, r0
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000dbe:	f003 0307 	and.w	r3, r3, #7
 8000dc2:	428b      	cmp	r3, r1
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000dc4:	460d      	mov	r5, r1
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000dc6:	d30a      	bcc.n	8000dde <HAL_RCC_ClockConfig+0x2a>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000dc8:	6831      	ldr	r1, [r6, #0]
 8000dca:	078c      	lsls	r4, r1, #30
 8000dcc:	d514      	bpl.n	8000df8 <HAL_RCC_ClockConfig+0x44>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000dce:	484f      	ldr	r0, [pc, #316]	; (8000f0c <HAL_RCC_ClockConfig+0x158>)
 8000dd0:	6843      	ldr	r3, [r0, #4]
 8000dd2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000dd6:	68b3      	ldr	r3, [r6, #8]
 8000dd8:	4313      	orrs	r3, r2
 8000dda:	6043      	str	r3, [r0, #4]
 8000ddc:	e00c      	b.n	8000df8 <HAL_RCC_ClockConfig+0x44>
#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000dde:	6813      	ldr	r3, [r2, #0]
 8000de0:	f023 0307 	bic.w	r3, r3, #7
 8000de4:	430b      	orrs	r3, r1
 8000de6:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000de8:	6813      	ldr	r3, [r2, #0]
 8000dea:	f003 0307 	and.w	r3, r3, #7
 8000dee:	4299      	cmp	r1, r3
 8000df0:	d0ea      	beq.n	8000dc8 <HAL_RCC_ClockConfig+0x14>
    {
      return HAL_ERROR;
 8000df2:	2001      	movs	r0, #1
 8000df4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000df8:	07c8      	lsls	r0, r1, #31
 8000dfa:	d406      	bmi.n	8000e0a <HAL_RCC_ClockConfig+0x56>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000dfc:	4a42      	ldr	r2, [pc, #264]	; (8000f08 <HAL_RCC_ClockConfig+0x154>)
 8000dfe:	6813      	ldr	r3, [r2, #0]
 8000e00:	f003 0307 	and.w	r3, r3, #7
 8000e04:	429d      	cmp	r5, r3
 8000e06:	d34a      	bcc.n	8000e9e <HAL_RCC_ClockConfig+0xea>
 8000e08:	e053      	b.n	8000eb2 <HAL_RCC_ClockConfig+0xfe>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e0a:	6872      	ldr	r2, [r6, #4]
 8000e0c:	4c3f      	ldr	r4, [pc, #252]	; (8000f0c <HAL_RCC_ClockConfig+0x158>)
 8000e0e:	2a01      	cmp	r2, #1
 8000e10:	d102      	bne.n	8000e18 <HAL_RCC_ClockConfig+0x64>
 8000e12:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e16:	e004      	b.n	8000e22 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000e18:	2a02      	cmp	r2, #2
 8000e1a:	bf0c      	ite	eq
 8000e1c:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8000e20:	2302      	movne	r3, #2
 8000e22:	fa93 f1a3 	rbit	r1, r3
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e26:	6821      	ldr	r1, [r4, #0]
 8000e28:	fa93 f3a3 	rbit	r3, r3
 8000e2c:	fab3 f383 	clz	r3, r3
 8000e30:	f003 031f 	and.w	r3, r3, #31
 8000e34:	fa21 f303 	lsr.w	r3, r1, r3
 8000e38:	07d9      	lsls	r1, r3, #31
 8000e3a:	d5da      	bpl.n	8000df2 <HAL_RCC_ClockConfig+0x3e>
      {
        return HAL_ERROR;
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000e3c:	6863      	ldr	r3, [r4, #4]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e3e:	f241 3888 	movw	r8, #5000	; 0x1388
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
      {
        return HAL_ERROR;
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000e42:	f023 0303 	bic.w	r3, r3, #3
 8000e46:	431a      	orrs	r2, r3
 8000e48:	6062      	str	r2, [r4, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000e4a:	f7ff f9d1 	bl	80001f0 <HAL_GetTick>
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e4e:	6873      	ldr	r3, [r6, #4]
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000e50:	4607      	mov	r7, r0
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e52:	2b01      	cmp	r3, #1
 8000e54:	d10c      	bne.n	8000e70 <HAL_RCC_ClockConfig+0xbc>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e56:	6863      	ldr	r3, [r4, #4]
 8000e58:	f003 030c 	and.w	r3, r3, #12
 8000e5c:	2b04      	cmp	r3, #4
 8000e5e:	d0cd      	beq.n	8000dfc <HAL_RCC_ClockConfig+0x48>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e60:	f7ff f9c6 	bl	80001f0 <HAL_GetTick>
 8000e64:	1bc0      	subs	r0, r0, r7
 8000e66:	4540      	cmp	r0, r8
 8000e68:	d9f5      	bls.n	8000e56 <HAL_RCC_ClockConfig+0xa2>
        {
          return HAL_TIMEOUT;
 8000e6a:	2003      	movs	r0, #3
 8000e6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000e70:	2b02      	cmp	r3, #2
 8000e72:	d10f      	bne.n	8000e94 <HAL_RCC_ClockConfig+0xe0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000e74:	6863      	ldr	r3, [r4, #4]
 8000e76:	f003 030c 	and.w	r3, r3, #12
 8000e7a:	2b08      	cmp	r3, #8
 8000e7c:	d0be      	beq.n	8000dfc <HAL_RCC_ClockConfig+0x48>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e7e:	f7ff f9b7 	bl	80001f0 <HAL_GetTick>
 8000e82:	1bc0      	subs	r0, r0, r7
 8000e84:	4540      	cmp	r0, r8
 8000e86:	d9f5      	bls.n	8000e74 <HAL_RCC_ClockConfig+0xc0>
 8000e88:	e7ef      	b.n	8000e6a <HAL_RCC_ClockConfig+0xb6>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e8a:	f7ff f9b1 	bl	80001f0 <HAL_GetTick>
 8000e8e:	1bc0      	subs	r0, r0, r7
 8000e90:	4540      	cmp	r0, r8
 8000e92:	d8ea      	bhi.n	8000e6a <HAL_RCC_ClockConfig+0xb6>
        }
      }
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e94:	6863      	ldr	r3, [r4, #4]
 8000e96:	f013 0f0c 	tst.w	r3, #12
 8000e9a:	d1f6      	bne.n	8000e8a <HAL_RCC_ClockConfig+0xd6>
 8000e9c:	e7ae      	b.n	8000dfc <HAL_RCC_ClockConfig+0x48>
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e9e:	6813      	ldr	r3, [r2, #0]
 8000ea0:	f023 0307 	bic.w	r3, r3, #7
 8000ea4:	432b      	orrs	r3, r5
 8000ea6:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000ea8:	6813      	ldr	r3, [r2, #0]
 8000eaa:	f003 0307 	and.w	r3, r3, #7
 8000eae:	429d      	cmp	r5, r3
 8000eb0:	d19f      	bne.n	8000df2 <HAL_RCC_ClockConfig+0x3e>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000eb2:	6831      	ldr	r1, [r6, #0]
 8000eb4:	4c15      	ldr	r4, [pc, #84]	; (8000f0c <HAL_RCC_ClockConfig+0x158>)
 8000eb6:	f011 0f04 	tst.w	r1, #4
 8000eba:	d005      	beq.n	8000ec8 <HAL_RCC_ClockConfig+0x114>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000ebc:	6863      	ldr	r3, [r4, #4]
 8000ebe:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000ec2:	68f3      	ldr	r3, [r6, #12]
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	6063      	str	r3, [r4, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000ec8:	070b      	lsls	r3, r1, #28
 8000eca:	d506      	bpl.n	8000eda <HAL_RCC_ClockConfig+0x126>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000ecc:	6863      	ldr	r3, [r4, #4]
 8000ece:	6932      	ldr	r2, [r6, #16]
 8000ed0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000ed4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000ed8:	6063      	str	r3, [r4, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000eda:	f7ff ff23 	bl	8000d24 <HAL_RCC_GetSysClockFreq>
 8000ede:	6863      	ldr	r3, [r4, #4]
 8000ee0:	22f0      	movs	r2, #240	; 0xf0
 8000ee2:	fa92 f2a2 	rbit	r2, r2
 8000ee6:	fab2 f282 	clz	r2, r2
 8000eea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000eee:	40d3      	lsrs	r3, r2
 8000ef0:	4a07      	ldr	r2, [pc, #28]	; (8000f10 <HAL_RCC_ClockConfig+0x15c>)
 8000ef2:	5cd3      	ldrb	r3, [r2, r3]
 8000ef4:	40d8      	lsrs	r0, r3
 8000ef6:	4b07      	ldr	r3, [pc, #28]	; (8000f14 <HAL_RCC_ClockConfig+0x160>)
 8000ef8:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8000efa:	2000      	movs	r0, #0
 8000efc:	f7ff f94b 	bl	8000196 <HAL_InitTick>
  
  return HAL_OK;
 8000f00:	2000      	movs	r0, #0
}
 8000f02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000f06:	bf00      	nop
 8000f08:	40022000 	.word	0x40022000
 8000f0c:	40021000 	.word	0x40021000
 8000f10:	080019e6 	.word	0x080019e6
 8000f14:	20000000 	.word	0x20000000

08000f18 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8000f18:	4b01      	ldr	r3, [pc, #4]	; (8000f20 <HAL_RCC_GetHCLKFreq+0x8>)
 8000f1a:	6818      	ldr	r0, [r3, #0]
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	20000000 	.word	0x20000000

08000f24 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8000f24:	4b08      	ldr	r3, [pc, #32]	; (8000f48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000f26:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	fa92 f2a2 	rbit	r2, r2
 8000f30:	fab2 f282 	clz	r2, r2
 8000f34:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000f38:	40d3      	lsrs	r3, r2
 8000f3a:	4a04      	ldr	r2, [pc, #16]	; (8000f4c <HAL_RCC_GetPCLK1Freq+0x28>)
 8000f3c:	5cd3      	ldrb	r3, [r2, r3]
 8000f3e:	4a04      	ldr	r2, [pc, #16]	; (8000f50 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8000f40:	6810      	ldr	r0, [r2, #0]
}    
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	40021000 	.word	0x40021000
 8000f4c:	080019f6 	.word	0x080019f6
 8000f50:	20000000 	.word	0x20000000

08000f54 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8000f54:	4b08      	ldr	r3, [pc, #32]	; (8000f78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000f56:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	fa92 f2a2 	rbit	r2, r2
 8000f60:	fab2 f282 	clz	r2, r2
 8000f64:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8000f68:	40d3      	lsrs	r3, r2
 8000f6a:	4a04      	ldr	r2, [pc, #16]	; (8000f7c <HAL_RCC_GetPCLK2Freq+0x28>)
 8000f6c:	5cd3      	ldrb	r3, [r2, r3]
 8000f6e:	4a04      	ldr	r2, [pc, #16]	; (8000f80 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8000f70:	6810      	ldr	r0, [r2, #0]
} 
 8000f72:	40d8      	lsrs	r0, r3
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	40021000 	.word	0x40021000
 8000f7c:	080019f6 	.word	0x080019f6
 8000f80:	20000000 	.word	0x20000000

08000f84 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8000f84:	6803      	ldr	r3, [r0, #0]
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8000f86:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8000f8a:	07dc      	lsls	r4, r3, #31
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8000f8c:	4605      	mov	r5, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8000f8e:	d564      	bpl.n	800105a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8000f90:	4c3e      	ldr	r4, [pc, #248]	; (800108c <HAL_RCCEx_PeriphCLKConfig+0x108>)
    
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f92:	4e3f      	ldr	r6, [pc, #252]	; (8001090 <HAL_RCCEx_PeriphCLKConfig+0x10c>)
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8000f94:	69e3      	ldr	r3, [r4, #28]
 8000f96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f9a:	61e3      	str	r3, [r4, #28]
 8000f9c:	69e3      	ldr	r3, [r4, #28]
 8000f9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fa2:	9301      	str	r3, [sp, #4]
 8000fa4:	9b01      	ldr	r3, [sp, #4]
    
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR, PWR_CR_DBP);
 8000fa6:	6833      	ldr	r3, [r6, #0]
 8000fa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fac:	6033      	str	r3, [r6, #0]
    
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8000fae:	f7ff f91f 	bl	80001f0 <HAL_GetTick>
 8000fb2:	4607      	mov	r7, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8000fb4:	6833      	ldr	r3, [r6, #0]
 8000fb6:	05d8      	lsls	r0, r3, #23
 8000fb8:	d406      	bmi.n	8000fc8 <HAL_RCCEx_PeriphCLKConfig+0x44>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fba:	f7ff f919 	bl	80001f0 <HAL_GetTick>
 8000fbe:	1bc0      	subs	r0, r0, r7
 8000fc0:	2864      	cmp	r0, #100	; 0x64
 8000fc2:	d9f7      	bls.n	8000fb4 <HAL_RCCEx_PeriphCLKConfig+0x30>
      {
        return HAL_TIMEOUT;
 8000fc4:	2003      	movs	r0, #3
 8000fc6:	e05d      	b.n	8001084 <HAL_RCCEx_PeriphCLKConfig+0x100>
      }      
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8000fc8:	6a23      	ldr	r3, [r4, #32]
 8000fca:	4830      	ldr	r0, [pc, #192]	; (800108c <HAL_RCCEx_PeriphCLKConfig+0x108>)
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000fcc:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8000fd0:	d106      	bne.n	8000fe0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8000fd2:	6a23      	ldr	r3, [r4, #32]
 8000fd4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8000fd8:	686b      	ldr	r3, [r5, #4]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	6223      	str	r3, [r4, #32]
 8000fde:	e03c      	b.n	800105a <HAL_RCCEx_PeriphCLKConfig+0xd6>
      }      
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000fe0:	686a      	ldr	r2, [r5, #4]
 8000fe2:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d0f3      	beq.n	8000fd2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000fea:	6a01      	ldr	r1, [r0, #32]
 8000fec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ff0:	f421 7740 	bic.w	r7, r1, #768	; 0x300
 8000ff4:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8000ff8:	fab2 f282 	clz	r2, r2
 8000ffc:	4e25      	ldr	r6, [pc, #148]	; (8001094 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8000ffe:	f04f 0e01 	mov.w	lr, #1
 8001002:	f846 e022 	str.w	lr, [r6, r2, lsl #2]
 8001006:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 800100a:	fab3 f383 	clz	r3, r3
 800100e:	2200      	movs	r2, #0
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001010:	07c9      	lsls	r1, r1, #31
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001012:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001016:	6207      	str	r7, [r0, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001018:	d5db      	bpl.n	8000fd2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
      {
        /* Get timeout */
        tickstart = HAL_GetTick();
 800101a:	f7ff f8e9 	bl	80001f0 <HAL_GetTick>
 800101e:	2602      	movs	r6, #2
 8001020:	4680      	mov	r8, r0
 8001022:	4637      	mov	r7, r6
      
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001024:	f241 3988 	movw	r9, #5000	; 0x1388
 8001028:	fa96 f3a6 	rbit	r3, r6
 800102c:	fa96 f3a6 	rbit	r3, r6
      {
        /* Get timeout */
        tickstart = HAL_GetTick();
      
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001030:	b10b      	cbz	r3, 8001036 <HAL_RCCEx_PeriphCLKConfig+0xb2>
 8001032:	6a22      	ldr	r2, [r4, #32]
 8001034:	e000      	b.n	8001038 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8001036:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001038:	fa97 f3a7 	rbit	r3, r7
 800103c:	fab3 f383 	clz	r3, r3
 8001040:	f003 031f 	and.w	r3, r3, #31
 8001044:	fa22 f303 	lsr.w	r3, r2, r3
 8001048:	07da      	lsls	r2, r3, #31
 800104a:	d4c2      	bmi.n	8000fd2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800104c:	f7ff f8d0 	bl	80001f0 <HAL_GetTick>
 8001050:	ebc8 0000 	rsb	r0, r8, r0
 8001054:	4548      	cmp	r0, r9
 8001056:	d9e7      	bls.n	8001028 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8001058:	e7b4      	b.n	8000fc4 <HAL_RCCEx_PeriphCLKConfig+0x40>
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800105a:	6828      	ldr	r0, [r5, #0]
 800105c:	0783      	lsls	r3, r0, #30
 800105e:	d506      	bpl.n	800106e <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001060:	490a      	ldr	r1, [pc, #40]	; (800108c <HAL_RCCEx_PeriphCLKConfig+0x108>)
 8001062:	684b      	ldr	r3, [r1, #4]
 8001064:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001068:	68ab      	ldr	r3, [r5, #8]
 800106a:	4313      	orrs	r3, r2
 800106c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800106e:	f010 0010 	ands.w	r0, r0, #16
 8001072:	d007      	beq.n	8001084 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001074:	4905      	ldr	r1, [pc, #20]	; (800108c <HAL_RCCEx_PeriphCLKConfig+0x108>)
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001076:	2000      	movs	r0, #0
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001078:	684b      	ldr	r3, [r1, #4]
 800107a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800107e:	68eb      	ldr	r3, [r5, #12]
 8001080:	4313      	orrs	r3, r2
 8001082:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
}
 8001084:	b003      	add	sp, #12
 8001086:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800108a:	bf00      	nop
 800108c:	40021000 	.word	0x40021000
 8001090:	40007000 	.word	0x40007000
 8001094:	42420400 	.word	0x42420400

08001098 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *                the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001098:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 800109a:	4604      	mov	r4, r0
 800109c:	2800      	cmp	r0, #0
 800109e:	d034      	beq.n	800110a <HAL_SPI_Init+0x72>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  assert_param(IS_SPI_CRC_CALCULATION(hspi->Init.CRCCalculation));
  assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));

  if(hspi->State == HAL_SPI_STATE_RESET)
 80010a0:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 80010a4:	b90b      	cbnz	r3, 80010aa <HAL_SPI_Init+0x12>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80010a6:	f000 fbb3 	bl	8001810 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80010aa:	68a1      	ldr	r1, [r4, #8]
 80010ac:	6860      	ldr	r0, [r4, #4]
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
  }
  
  hspi->State = HAL_SPI_STATE_BUSY;
 80010ae:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80010b0:	4308      	orrs	r0, r1
 80010b2:	68e1      	ldr	r1, [r4, #12]
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
  }
  
  hspi->State = HAL_SPI_STATE_BUSY;
 80010b4:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80010b8:	4308      	orrs	r0, r1
 80010ba:	6921      	ldr	r1, [r4, #16]
  }
  
  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disble the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80010bc:	6823      	ldr	r3, [r4, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80010be:	4308      	orrs	r0, r1
 80010c0:	6961      	ldr	r1, [r4, #20]
  }
  
  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disble the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80010c2:	681a      	ldr	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80010c4:	4308      	orrs	r0, r1
 80010c6:	69e1      	ldr	r1, [r4, #28]
  }
  
  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disble the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80010c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80010cc:	4308      	orrs	r0, r1
 80010ce:	6a21      	ldr	r1, [r4, #32]
  }
  
  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disble the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80010d0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80010d2:	4308      	orrs	r0, r1
 80010d4:	69a2      	ldr	r2, [r4, #24]
 80010d6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80010d8:	4308      	orrs	r0, r1
 80010da:	f402 7100 	and.w	r1, r2, #512	; 0x200
 80010de:	4301      	orrs	r1, r0
 80010e0:	6019      	str	r1, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80010e2:	0c12      	lsrs	r2, r2, #16
 80010e4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80010e6:	f002 0204 	and.w	r2, r2, #4
 80010ea:	430a      	orrs	r2, r1
 80010ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 80010ee:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
     Revision ID information is only available in Debug mode, so Workaround could not be implemented
     to distinguish Rev Z devices (issue present) from more recent version (issue fixed).
     So, in case of Revison Z F101 or F103 devices, below variable should be assigned to 1 */
  uCRCErrorWorkaroundCheck = 0;
#else
  uCRCErrorWorkaroundCheck = 0;
 80010f0:	2000      	movs	r0, #0
  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode));

  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 80010f2:	611a      	str	r2, [r3, #16]

#if defined (STM32F101x6) || defined (STM32F101xB) || defined (STM32F101xE) || defined (STM32F101xG) || defined (STM32F102x6) || defined (STM32F102xB) || defined (STM32F103x6) || defined (STM32F103xB) || defined (STM32F103xE) || defined (STM32F103xG) || defined (STM32F105xC) || defined (STM32F107xC)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80010f4:	69da      	ldr	r2, [r3, #28]
 80010f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80010fa:	61da      	str	r2, [r3, #28]
     Revision ID information is only available in Debug mode, so Workaround could not be implemented
     to distinguish Rev Z devices (issue present) from more recent version (issue fixed).
     So, in case of Revison Z F101 or F103 devices, below variable should be assigned to 1 */
  uCRCErrorWorkaroundCheck = 0;
#else
  uCRCErrorWorkaroundCheck = 0;
 80010fc:	4b04      	ldr	r3, [pc, #16]	; (8001110 <HAL_SPI_Init+0x78>)
#endif

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80010fe:	6560      	str	r0, [r4, #84]	; 0x54
     Revision ID information is only available in Debug mode, so Workaround could not be implemented
     to distinguish Rev Z devices (issue present) from more recent version (issue fixed).
     So, in case of Revison Z F101 or F103 devices, below variable should be assigned to 1 */
  uCRCErrorWorkaroundCheck = 0;
#else
  uCRCErrorWorkaroundCheck = 0;
 8001100:	7018      	strb	r0, [r3, #0]
#endif

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
  hspi->State = HAL_SPI_STATE_READY;
 8001102:	2301      	movs	r3, #1
 8001104:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  
  return HAL_OK;
 8001108:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if(hspi == NULL)
  {
    return HAL_ERROR;
 800110a:	2001      	movs	r0, #1

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
  hspi->State = HAL_SPI_STATE_READY;
  
  return HAL_OK;
}
 800110c:	bd10      	pop	{r4, pc}
 800110e:	bf00      	nop
 8001110:	20000024 	.word	0x20000024

08001114 <HAL_TIM_ConfigClockSource>:
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
  uint32_t tmpsmcr = 0;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001114:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
  * @param  sClockSourceConfig : pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
 8001118:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpsmcr = 0;

  /* Process Locked */
  __HAL_LOCK(htim);
 800111a:	2b01      	cmp	r3, #1
 800111c:	f04f 0302 	mov.w	r3, #2
 8001120:	f000 80b0 	beq.w	8001284 <HAL_TIM_ConfigClockSource+0x170>

  htim->State = HAL_TIM_STATE_BUSY;
 8001124:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001128:	6803      	ldr	r3, [r0, #0]
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
  uint32_t tmpsmcr = 0;

  /* Process Locked */
  __HAL_LOCK(htim);
 800112a:	2201      	movs	r2, #1
 800112c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001130:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001132:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8001136:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 800113a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800113c:	680a      	ldr	r2, [r1, #0]
 800113e:	2a40      	cmp	r2, #64	; 0x40
 8001140:	d077      	beq.n	8001232 <HAL_TIM_ConfigClockSource+0x11e>
 8001142:	d818      	bhi.n	8001176 <HAL_TIM_ConfigClockSource+0x62>
 8001144:	2a10      	cmp	r2, #16
 8001146:	f000 808b 	beq.w	8001260 <HAL_TIM_ConfigClockSource+0x14c>
 800114a:	d808      	bhi.n	800115e <HAL_TIM_ConfigClockSource+0x4a>
 800114c:	2a00      	cmp	r2, #0
 800114e:	f040 8093 	bne.w	8001278 <HAL_TIM_ConfigClockSource+0x164>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8001152:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8001154:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001158:	f042 0207 	orr.w	r2, r2, #7
 800115c:	e08b      	b.n	8001276 <HAL_TIM_ConfigClockSource+0x162>
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;

  switch (sClockSourceConfig->ClockSource)
 800115e:	2a20      	cmp	r2, #32
 8001160:	f000 8084 	beq.w	800126c <HAL_TIM_ConfigClockSource+0x158>
 8001164:	2a30      	cmp	r2, #48	; 0x30
 8001166:	f040 8087 	bne.w	8001278 <HAL_TIM_ConfigClockSource+0x164>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 800116a:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 800116c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001170:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 8001174:	e07f      	b.n	8001276 <HAL_TIM_ConfigClockSource+0x162>
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;

  switch (sClockSourceConfig->ClockSource)
 8001176:	2a70      	cmp	r2, #112	; 0x70
 8001178:	d035      	beq.n	80011e6 <HAL_TIM_ConfigClockSource+0xd2>
 800117a:	d81b      	bhi.n	80011b4 <HAL_TIM_ConfigClockSource+0xa0>
 800117c:	2a50      	cmp	r2, #80	; 0x50
 800117e:	d041      	beq.n	8001204 <HAL_TIM_ConfigClockSource+0xf0>
 8001180:	2a60      	cmp	r2, #96	; 0x60
 8001182:	d179      	bne.n	8001278 <HAL_TIM_ConfigClockSource+0x164>
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001184:	6a1c      	ldr	r4, [r3, #32]

       /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001186:	684d      	ldr	r5, [r1, #4]
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001188:	f024 0410 	bic.w	r4, r4, #16

       /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800118c:	68ce      	ldr	r6, [r1, #12]
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800118e:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001190:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8001192:	6a1a      	ldr	r2, [r3, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001194:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001198:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4);
 800119c:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
  tmpccmr1 |= (TIM_ICFilter << 12);
 80011a0:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |= (TIM_ICPolarity << 4);

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80011a4:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 80011a6:	621a      	str	r2, [r3, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 80011a8:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 80011aa:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80011ae:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 80011b2:	e060      	b.n	8001276 <HAL_TIM_ConfigClockSource+0x162>
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;

  switch (sClockSourceConfig->ClockSource)
 80011b4:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80011b8:	d011      	beq.n	80011de <HAL_TIM_ConfigClockSource+0xca>
 80011ba:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80011be:	d15b      	bne.n	8001278 <HAL_TIM_ConfigClockSource+0x164>
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr = 0;

  tmpsmcr = TIMx->SMCR;
 80011c0:	689c      	ldr	r4, [r3, #8]
 80011c2:	688d      	ldr	r5, [r1, #8]
 80011c4:	684a      	ldr	r2, [r1, #4]
 80011c6:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80011ca:	68c9      	ldr	r1, [r1, #12]
 80011cc:	432a      	orrs	r2, r5
 80011ce:	4322      	orrs	r2, r4
 80011d0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80011d4:	609a      	str	r2, [r3, #8]
      TIM_ETR_SetConfig(htim->Instance,
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80011d6:	689a      	ldr	r2, [r3, #8]
 80011d8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80011dc:	e04b      	b.n	8001276 <HAL_TIM_ConfigClockSource+0x162>
  {
  case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
      /* Disable slave mode to clock the prescaler directly with the internal clock */
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80011de:	689a      	ldr	r2, [r3, #8]
 80011e0:	f022 0207 	bic.w	r2, r2, #7
 80011e4:	e047      	b.n	8001276 <HAL_TIM_ConfigClockSource+0x162>
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr = 0;

  tmpsmcr = TIMx->SMCR;
 80011e6:	689c      	ldr	r4, [r3, #8]
 80011e8:	688d      	ldr	r5, [r1, #8]
 80011ea:	684a      	ldr	r2, [r1, #4]
 80011ec:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80011f0:	68c9      	ldr	r1, [r1, #12]
 80011f2:	432a      	orrs	r2, r5
 80011f4:	4322      	orrs	r2, r4
 80011f6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80011fa:	609a      	str	r2, [r3, #8]
      TIM_ETR_SetConfig(htim->Instance,
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Get the TIMx SMCR register value */
      tmpsmcr = htim->Instance->SMCR;
 80011fc:	689a      	ldr	r2, [r3, #8]
      /* Reset the SMS and TS Bits */
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80011fe:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 8001202:	e038      	b.n	8001276 <HAL_TIM_ConfigClockSource+0x162>
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001204:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001206:	6a1c      	ldr	r4, [r3, #32]

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
      
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001208:	684d      	ldr	r5, [r1, #4]
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800120a:	f024 0401 	bic.w	r4, r4, #1

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
      
      TIM_TI1_ConfigInputStage(htim->Instance,
 800120e:	68ce      	ldr	r6, [r1, #12]
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001210:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001212:	6999      	ldr	r1, [r3, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001214:	f022 020a 	bic.w	r2, r2, #10
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001218:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;
 800121c:	432a      	orrs	r2, r5
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4);
 800121e:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001222:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8001224:	621a      	str	r2, [r3, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8001226:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8001228:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800122c:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 8001230:	e021      	b.n	8001276 <HAL_TIM_ConfigClockSource+0x162>
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001232:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001234:	6a1c      	ldr	r4, [r3, #32]

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001236:	684d      	ldr	r5, [r1, #4]
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001238:	f024 0401 	bic.w	r4, r4, #1

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800123c:	68ce      	ldr	r6, [r1, #12]
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800123e:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001240:	6999      	ldr	r1, [r3, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001242:	f022 020a 	bic.w	r2, r2, #10
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001246:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;
 800124a:	432a      	orrs	r2, r5
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4);
 800124c:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001250:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8001252:	621a      	str	r2, [r3, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8001254:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8001256:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800125a:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 800125e:	e00a      	b.n	8001276 <HAL_TIM_ConfigClockSource+0x162>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8001260:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8001262:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001266:	f042 0217 	orr.w	r2, r2, #23
 800126a:	e004      	b.n	8001276 <HAL_TIM_ConfigClockSource+0x162>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 800126c:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 800126e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001272:	f042 0227 	orr.w	r2, r2, #39	; 0x27
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8001276:	609a      	str	r2, [r3, #8]
    break;

  default:
    break;
  }
  htim->State = HAL_TIM_STATE_READY;
 8001278:	2301      	movs	r3, #1
 800127a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  __HAL_UNLOCK(htim);
 800127e:	2300      	movs	r3, #0
 8001280:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
  uint32_t tmpsmcr = 0;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001284:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);

  return HAL_OK;
}
 8001286:	bd70      	pop	{r4, r5, r6, pc}

08001288 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001288:	4a18      	ldr	r2, [pc, #96]	; (80012ec <TIM_Base_SetConfig+0x64>)
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
 800128a:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800128c:	4290      	cmp	r0, r2
 800128e:	d00a      	beq.n	80012a6 <TIM_Base_SetConfig+0x1e>
 8001290:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001294:	d007      	beq.n	80012a6 <TIM_Base_SetConfig+0x1e>
 8001296:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800129a:	4290      	cmp	r0, r2
 800129c:	d003      	beq.n	80012a6 <TIM_Base_SetConfig+0x1e>
 800129e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80012a2:	4290      	cmp	r0, r2
 80012a4:	d115      	bne.n	80012d2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80012a6:	684a      	ldr	r2, [r1, #4]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80012a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80012ac:	4313      	orrs	r3, r2
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80012ae:	4a0f      	ldr	r2, [pc, #60]	; (80012ec <TIM_Base_SetConfig+0x64>)
 80012b0:	4290      	cmp	r0, r2
 80012b2:	d00a      	beq.n	80012ca <TIM_Base_SetConfig+0x42>
 80012b4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80012b8:	d007      	beq.n	80012ca <TIM_Base_SetConfig+0x42>
 80012ba:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80012be:	4290      	cmp	r0, r2
 80012c0:	d003      	beq.n	80012ca <TIM_Base_SetConfig+0x42>
 80012c2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80012c6:	4290      	cmp	r0, r2
 80012c8:	d103      	bne.n	80012d2 <TIM_Base_SetConfig+0x4a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80012ca:	68ca      	ldr	r2, [r1, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80012cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80012d0:	4313      	orrs	r3, r2
  }

  TIMx->CR1 = tmpcr1;
 80012d2:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80012d4:	688b      	ldr	r3, [r1, #8]
 80012d6:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80012d8:	680b      	ldr	r3, [r1, #0]
 80012da:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80012dc:	4b03      	ldr	r3, [pc, #12]	; (80012ec <TIM_Base_SetConfig+0x64>)
 80012de:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80012e0:	bf04      	itt	eq
 80012e2:	690b      	ldreq	r3, [r1, #16]
 80012e4:	6303      	streq	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 80012e6:	2301      	movs	r3, #1
 80012e8:	6143      	str	r3, [r0, #20]
 80012ea:	4770      	bx	lr
 80012ec:	40012c00 	.word	0x40012c00

080012f0 <HAL_TIM_Base_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim : TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80012f0:	b510      	push	{r4, lr}
  /* Check the TIM handle allocation */
  if(htim == NULL)
 80012f2:	4604      	mov	r4, r0
 80012f4:	b1a0      	cbz	r0, 8001320 <HAL_TIM_Base_Init+0x30>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));

  if(htim->State == HAL_TIM_STATE_RESET)
 80012f6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80012fa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80012fe:	b91b      	cbnz	r3, 8001308 <HAL_TIM_Base_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001300:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001304:	f000 faae 	bl	8001864 <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001308:	2302      	movs	r3, #2
 800130a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800130e:	6820      	ldr	r0, [r4, #0]
 8001310:	1d21      	adds	r1, r4, #4
 8001312:	f7ff ffb9 	bl	8001288 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001316:	2301      	movs	r3, #1
 8001318:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  return HAL_OK;
 800131c:	2000      	movs	r0, #0
 800131e:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 8001320:	2001      	movs	r0, #1

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;

  return HAL_OK;
}
 8001322:	bd10      	pop	{r4, pc}

08001324 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8001324:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
  *         contains the selected trigger output (TRGO) and the Master/Slave
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8001328:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 800132a:	2b01      	cmp	r3, #1
 800132c:	f04f 0302 	mov.w	r3, #2
 8001330:	d018      	beq.n	8001364 <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 8001332:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001336:	6803      	ldr	r3, [r0, #0]
 8001338:	685a      	ldr	r2, [r3, #4]
 800133a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800133e:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8001340:	685c      	ldr	r4, [r3, #4]
 8001342:	680a      	ldr	r2, [r1, #0]
 8001344:	4322      	orrs	r2, r4
 8001346:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8001348:	689a      	ldr	r2, [r3, #8]
 800134a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800134e:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001350:	689c      	ldr	r4, [r3, #8]
 8001352:	684a      	ldr	r2, [r1, #4]
 8001354:	4322      	orrs	r2, r4
 8001356:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8001358:	2301      	movs	r3, #1
 800135a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  __HAL_UNLOCK(htim);
 800135e:	2300      	movs	r3, #0
 8001360:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8001364:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);

  return HAL_OK;
}
 8001366:	bd10      	pop	{r4, pc}

08001368 <UART_SetConfig>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001368:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800136c:	6806      	ldr	r6, [r0, #0]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode ;
  MODIFY_REG(huart->Instance->CR1, 
 800136e:	6881      	ldr	r1, [r0, #8]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001370:	6933      	ldr	r3, [r6, #16]
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001372:	4681      	mov	r9, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001374:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001378:	68c3      	ldr	r3, [r0, #12]
 800137a:	2419      	movs	r4, #25
 800137c:	4313      	orrs	r3, r2
 800137e:	6133      	str	r3, [r6, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode ;
  MODIFY_REG(huart->Instance->CR1, 
 8001380:	6903      	ldr	r3, [r0, #16]
 8001382:	68f2      	ldr	r2, [r6, #12]
 8001384:	4319      	orrs	r1, r3
 8001386:	6943      	ldr	r3, [r0, #20]
 8001388:	4319      	orrs	r1, r3
 800138a:	f422 53b0 	bic.w	r3, r2, #5632	; 0x1600
 800138e:	f023 030c 	bic.w	r3, r3, #12
 8001392:	430b      	orrs	r3, r1
 8001394:	60f3      	str	r3, [r6, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE), 
             tmpreg);
  
  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001396:	6973      	ldr	r3, [r6, #20]
 8001398:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800139c:	6983      	ldr	r3, [r0, #24]
 800139e:	4313      	orrs	r3, r2
 80013a0:	6173      	str	r3, [r6, #20]
  
  /*------- UART-associated USART registers setting : BRR Configuration ------*/
  if((huart->Instance == USART1))
 80013a2:	4b3d      	ldr	r3, [pc, #244]	; (8001498 <UART_SetConfig+0x130>)
 80013a4:	429e      	cmp	r6, r3
 80013a6:	d131      	bne.n	800140c <UART_SetConfig+0xa4>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80013a8:	f7ff fdd4 	bl	8000f54 <HAL_RCC_GetPCLK2Freq>
 80013ac:	4360      	muls	r0, r4
 80013ae:	f8d9 7004 	ldr.w	r7, [r9, #4]
 80013b2:	f04f 0864 	mov.w	r8, #100	; 0x64
 80013b6:	00bf      	lsls	r7, r7, #2
 80013b8:	fbb0 f7f7 	udiv	r7, r0, r7
 80013bc:	f7ff fdca 	bl	8000f54 <HAL_RCC_GetPCLK2Freq>
 80013c0:	4360      	muls	r0, r4
 80013c2:	f8d9 5004 	ldr.w	r5, [r9, #4]
 80013c6:	fbb7 f7f8 	udiv	r7, r7, r8
 80013ca:	00ad      	lsls	r5, r5, #2
 80013cc:	fbb0 f5f5 	udiv	r5, r0, r5
 80013d0:	f7ff fdc0 	bl	8000f54 <HAL_RCC_GetPCLK2Freq>
 80013d4:	4360      	muls	r0, r4
 80013d6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80013da:	013f      	lsls	r7, r7, #4
 80013dc:	009b      	lsls	r3, r3, #2
 80013de:	fbb0 f0f3 	udiv	r0, r0, r3
 80013e2:	fbb0 f0f8 	udiv	r0, r0, r8
 80013e6:	fb08 5510 	mls	r5, r8, r0, r5
 80013ea:	f7ff fdb3 	bl	8000f54 <HAL_RCC_GetPCLK2Freq>
 80013ee:	012d      	lsls	r5, r5, #4
 80013f0:	3532      	adds	r5, #50	; 0x32
 80013f2:	fbb5 f5f8 	udiv	r5, r5, r8
 80013f6:	4360      	muls	r0, r4
 80013f8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80013fc:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 8001400:	0089      	lsls	r1, r1, #2
 8001402:	fbb0 faf1 	udiv	sl, r0, r1
 8001406:	f7ff fda5 	bl	8000f54 <HAL_RCC_GetPCLK2Freq>
 800140a:	e030      	b.n	800146e <UART_SetConfig+0x106>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800140c:	f7ff fd8a 	bl	8000f24 <HAL_RCC_GetPCLK1Freq>
 8001410:	4360      	muls	r0, r4
 8001412:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8001416:	f04f 0864 	mov.w	r8, #100	; 0x64
 800141a:	00bf      	lsls	r7, r7, #2
 800141c:	fbb0 f7f7 	udiv	r7, r0, r7
 8001420:	f7ff fd80 	bl	8000f24 <HAL_RCC_GetPCLK1Freq>
 8001424:	4360      	muls	r0, r4
 8001426:	f8d9 5004 	ldr.w	r5, [r9, #4]
 800142a:	fbb7 f7f8 	udiv	r7, r7, r8
 800142e:	00ad      	lsls	r5, r5, #2
 8001430:	fbb0 f5f5 	udiv	r5, r0, r5
 8001434:	f7ff fd76 	bl	8000f24 <HAL_RCC_GetPCLK1Freq>
 8001438:	4360      	muls	r0, r4
 800143a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800143e:	013f      	lsls	r7, r7, #4
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	fbb0 f0f3 	udiv	r0, r0, r3
 8001446:	fbb0 f0f8 	udiv	r0, r0, r8
 800144a:	fb08 5510 	mls	r5, r8, r0, r5
 800144e:	f7ff fd69 	bl	8000f24 <HAL_RCC_GetPCLK1Freq>
 8001452:	012d      	lsls	r5, r5, #4
 8001454:	3532      	adds	r5, #50	; 0x32
 8001456:	fbb5 f5f8 	udiv	r5, r5, r8
 800145a:	4360      	muls	r0, r4
 800145c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8001460:	f005 05f0 	and.w	r5, r5, #240	; 0xf0
 8001464:	0089      	lsls	r1, r1, #2
 8001466:	fbb0 faf1 	udiv	sl, r0, r1
 800146a:	f7ff fd5b 	bl	8000f24 <HAL_RCC_GetPCLK1Freq>
 800146e:	4344      	muls	r4, r0
 8001470:	f8d9 0004 	ldr.w	r0, [r9, #4]
 8001474:	0080      	lsls	r0, r0, #2
 8001476:	fbb4 f0f0 	udiv	r0, r4, r0
 800147a:	fbb0 f0f8 	udiv	r0, r0, r8
 800147e:	fb08 a210 	mls	r2, r8, r0, sl
 8001482:	0112      	lsls	r2, r2, #4
 8001484:	3232      	adds	r2, #50	; 0x32
 8001486:	fbb2 f3f8 	udiv	r3, r2, r8
 800148a:	f003 030f 	and.w	r3, r3, #15
 800148e:	442b      	add	r3, r5
 8001490:	441f      	add	r7, r3
 8001492:	60b7      	str	r7, [r6, #8]
 8001494:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001498:	40013800 	.word	0x40013800

0800149c <HAL_UART_Init>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800149c:	b510      	push	{r4, lr}
  /* Check the UART handle allocation */
  if(huart == NULL)
 800149e:	4604      	mov	r4, r0
 80014a0:	b330      	cbz	r0, 80014f0 <HAL_UART_Init+0x54>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->State == HAL_UART_STATE_RESET)
 80014a2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80014a6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80014aa:	b91b      	cbnz	r3, 80014b4 <HAL_UART_Init+0x18>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80014ac:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 80014b0:	f000 f9fc 	bl	80018ac <HAL_UART_MspInit>
  }

  huart->State = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80014b4:	6822      	ldr	r2, [r4, #0]
    
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
  }

  huart->State = HAL_UART_STATE_BUSY;
 80014b6:	2302      	movs	r3, #2
 80014b8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80014bc:	68d3      	ldr	r3, [r2, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80014be:	4620      	mov	r0, r4
  }

  huart->State = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80014c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80014c4:	60d3      	str	r3, [r2, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80014c6:	f7ff ff4f 	bl	8001368 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80014ca:	6823      	ldr	r3, [r4, #0]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80014cc:	2000      	movs	r0, #0
  UART_SetConfig(huart);
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80014ce:	691a      	ldr	r2, [r3, #16]
 80014d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80014d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80014d6:	695a      	ldr	r2, [r3, #20]
 80014d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80014dc:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80014de:	68da      	ldr	r2, [r3, #12]
 80014e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80014e4:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
  huart->State= HAL_UART_STATE_READY;
 80014e6:	2301      	movs	r3, #1
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80014e8:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->State= HAL_UART_STATE_READY;
 80014ea:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  return HAL_OK;
 80014ee:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if(huart == NULL)
  {
    return HAL_ERROR;
 80014f0:	2001      	movs	r0, #1
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
  huart->State= HAL_UART_STATE_READY;
  
  return HAL_OK;
}
 80014f2:	bd10      	pop	{r4, pc}

080014f4 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 80014f4:	b510      	push	{r4, lr}
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014f6:	2301      	movs	r3, #1
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 80014f8:	b094      	sub	sp, #80	; 0x50
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014fa:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80014fc:	2310      	movs	r3, #16
 80014fe:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001500:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001502:	2300      	movs	r3, #0
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001504:	a80a      	add	r0, sp, #40	; 0x28
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001506:	940a      	str	r4, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001508:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800150a:	f7ff f9ab 	bl	8000864 <HAL_RCC_OscConfig>
 800150e:	4601      	mov	r1, r0
 8001510:	b100      	cbz	r0, 8001514 <SystemClock_Config+0x20>
 8001512:	e7fe      	b.n	8001512 <SystemClock_Config+0x1e>
    Error_Handler();
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001514:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001516:	9006      	str	r0, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001518:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800151a:	9008      	str	r0, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800151c:	9009      	str	r0, [sp, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800151e:	a805      	add	r0, sp, #20
    Error_Handler();
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001520:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001522:	f7ff fc47 	bl	8000db4 <HAL_RCC_ClockConfig>
 8001526:	b100      	cbz	r0, 800152a <SystemClock_Config+0x36>
 8001528:	e7fe      	b.n	8001528 <SystemClock_Config+0x34>
  {
    Error_Handler();
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800152a:	9003      	str	r0, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800152c:	a801      	add	r0, sp, #4
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800152e:	9401      	str	r4, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001530:	f7ff fd28 	bl	8000f84 <HAL_RCCEx_PeriphCLKConfig>
 8001534:	4604      	mov	r4, r0
 8001536:	b100      	cbz	r0, 800153a <SystemClock_Config+0x46>
 8001538:	e7fe      	b.n	8001538 <SystemClock_Config+0x44>
    Error_Handler();
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800153a:	f7ff fced 	bl	8000f18 <HAL_RCC_GetHCLKFreq>
 800153e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001542:	fbb0 f0f3 	udiv	r0, r0, r3
 8001546:	f7ff f823 	bl	8000590 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800154a:	2004      	movs	r0, #4
 800154c:	f7ff f836 	bl	80005bc <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001550:	4622      	mov	r2, r4
 8001552:	4621      	mov	r1, r4
 8001554:	f04f 30ff 	mov.w	r0, #4294967295
 8001558:	f7fe ffe6 	bl	8000528 <HAL_NVIC_SetPriority>
}
 800155c:	b014      	add	sp, #80	; 0x50
 800155e:	bd10      	pop	{r4, pc}

08001560 <main>:
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

int main(void)
{
 8001560:	b500      	push	{lr}
 8001562:	b08b      	sub	sp, #44	; 0x2c
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001564:	f7fe fe2a 	bl	80001bc <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8001568:	f7ff ffc4 	bl	80014f4 <SystemClock_Config>
*/
static void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800156c:	4b57      	ldr	r3, [pc, #348]	; (80016cc <main+0x16c>)

  ADC_ChannelConfTypeDef sConfig;

    /**Common config 
    */
  hadc1.Instance = ADC1;
 800156e:	4c58      	ldr	r4, [pc, #352]	; (80016d0 <main+0x170>)
*/
static void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001570:	699a      	ldr	r2, [r3, #24]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 1;
 8001572:	2501      	movs	r5, #1
*/
static void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001574:	f042 0220 	orr.w	r2, r2, #32
 8001578:	619a      	str	r2, [r3, #24]
 800157a:	699a      	ldr	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 1;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800157c:	4620      	mov	r0, r4
*/
static void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800157e:	f002 0220 	and.w	r2, r2, #32
 8001582:	9201      	str	r2, [sp, #4]
 8001584:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001586:	699a      	ldr	r2, [r3, #24]
 8001588:	f042 0204 	orr.w	r2, r2, #4
 800158c:	619a      	str	r2, [r3, #24]
 800158e:	699a      	ldr	r2, [r3, #24]
 8001590:	f002 0204 	and.w	r2, r2, #4
 8001594:	9202      	str	r2, [sp, #8]
 8001596:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001598:	699a      	ldr	r2, [r3, #24]
 800159a:	f042 0208 	orr.w	r2, r2, #8
 800159e:	619a      	str	r2, [r3, #24]
 80015a0:	699b      	ldr	r3, [r3, #24]
    */
  hadc1.Instance = ADC1;
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015a2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015a6:	f003 0308 	and.w	r3, r3, #8
 80015aa:	9303      	str	r3, [sp, #12]
 80015ac:	9b03      	ldr	r3, [sp, #12]

  ADC_ChannelConfTypeDef sConfig;

    /**Common config 
    */
  hadc1.Instance = ADC1;
 80015ae:	4b49      	ldr	r3, [pc, #292]	; (80016d4 <main+0x174>)
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015b0:	61e2      	str	r2, [r4, #28]

  ADC_ChannelConfTypeDef sConfig;

    /**Common config 
    */
  hadc1.Instance = ADC1;
 80015b2:	6023      	str	r3, [r4, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80015b4:	2300      	movs	r3, #0
 80015b6:	60a3      	str	r3, [r4, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80015b8:	60e3      	str	r3, [r4, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80015ba:	6163      	str	r3, [r4, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015bc:	6063      	str	r3, [r4, #4]
  hadc1.Init.NbrOfConversion = 1;
 80015be:	6125      	str	r5, [r4, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80015c0:	f7fe ff0c 	bl	80003dc <HAL_ADC_Init>
 80015c4:	b100      	cbz	r0, 80015c8 <main+0x68>
 80015c6:	e7fe      	b.n	80015c6 <main+0x66>
    Error_Handler();
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_0;
 80015c8:	9006      	str	r0, [sp, #24]
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80015ca:	9008      	str	r0, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015cc:	a906      	add	r1, sp, #24
 80015ce:	4620      	mov	r0, r4
  }

    /**Configure Regular Channel 
    */
  sConfig.Channel = ADC_CHANNEL_0;
  sConfig.Rank = 1;
 80015d0:	9507      	str	r5, [sp, #28]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015d2:	f7fe fe21 	bl	8000218 <HAL_ADC_ConfigChannel>
 80015d6:	b100      	cbz	r0, 80015da <main+0x7a>
 80015d8:	e7fe      	b.n	80015d8 <main+0x78>

/* I2C1 init function */
static void MX_I2C1_Init(void)
{

  hi2c1.Instance = I2C1;
 80015da:	4b3f      	ldr	r3, [pc, #252]	; (80016d8 <main+0x178>)
  hi2c1.Init.ClockSpeed = 100000;
 80015dc:	4a3f      	ldr	r2, [pc, #252]	; (80016dc <main+0x17c>)
 80015de:	f8df e11c 	ldr.w	lr, [pc, #284]	; 80016fc <main+0x19c>
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015e2:	6098      	str	r0, [r3, #8]
/* I2C1 init function */
static void MX_I2C1_Init(void)
{

  hi2c1.Instance = I2C1;
  hi2c1.Init.ClockSpeed = 100000;
 80015e4:	e883 4004 	stmia.w	r3, {r2, lr}
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
 80015e8:	60d8      	str	r0, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015ee:	6158      	str	r0, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80015f0:	6198      	str	r0, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015f2:	61d8      	str	r0, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015f4:	6218      	str	r0, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015f6:	4618      	mov	r0, r3

  hi2c1.Instance = I2C1;
  hi2c1.Init.ClockSpeed = 100000;
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015f8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015fa:	f7ff f8c9 	bl	8000790 <HAL_I2C_Init>
 80015fe:	b100      	cbz	r0, 8001602 <main+0xa2>
 8001600:	e7fe      	b.n	8001600 <main+0xa0>

/* SPI1 init function */
static void MX_SPI1_Init(void)
{

  hspi1.Instance = SPI1;
 8001602:	4b37      	ldr	r3, [pc, #220]	; (80016e0 <main+0x180>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001604:	4a37      	ldr	r2, [pc, #220]	; (80016e4 <main+0x184>)
 8001606:	f44f 7582 	mov.w	r5, #260	; 0x104
 800160a:	e883 0024 	stmia.w	r3, {r2, r5}
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800160e:	f44f 7200 	mov.w	r2, #512	; 0x200
static void MX_SPI1_Init(void)
{

  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001612:	6098      	str	r0, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001614:	60d8      	str	r0, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001616:	6118      	str	r0, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001618:	6158      	str	r0, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800161a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800161c:	61d8      	str	r0, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800161e:	6218      	str	r0, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001620:	6258      	str	r0, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001622:	6298      	str	r0, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001624:	220a      	movs	r2, #10
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001626:	4618      	mov	r0, r3
  hspi1.Init.NSS = SPI_NSS_SOFT;
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 10;
 8001628:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800162a:	f7ff fd35 	bl	8001098 <HAL_SPI_Init>
 800162e:	b100      	cbz	r0, 8001632 <main+0xd2>
 8001630:	e7fe      	b.n	8001630 <main+0xd0>
{

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim1.Instance = TIM1;
 8001632:	4c2d      	ldr	r4, [pc, #180]	; (80016e8 <main+0x188>)
 8001634:	4b2d      	ldr	r3, [pc, #180]	; (80016ec <main+0x18c>)
  htim1.Init.Prescaler = 0;
 8001636:	6060      	str	r0, [r4, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001638:	60a0      	str	r0, [r4, #8]
  htim1.Init.Period = 0;
 800163a:	60e0      	str	r0, [r4, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800163c:	6120      	str	r0, [r4, #16]
  htim1.Init.RepetitionCounter = 0;
 800163e:	6160      	str	r0, [r4, #20]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001640:	4620      	mov	r0, r4
{

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim1.Instance = TIM1;
 8001642:	6023      	str	r3, [r4, #0]
  htim1.Init.Prescaler = 0;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 0;
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001644:	f7ff fe54 	bl	80012f0 <HAL_TIM_Base_Init>
 8001648:	b100      	cbz	r0, 800164c <main+0xec>
 800164a:	e7fe      	b.n	800164a <main+0xea>
  {
    Error_Handler();
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800164c:	f44f 5580 	mov.w	r5, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001650:	a906      	add	r1, sp, #24
 8001652:	4620      	mov	r0, r4
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
  {
    Error_Handler();
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001654:	9506      	str	r5, [sp, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001656:	f7ff fd5d 	bl	8001114 <HAL_TIM_ConfigClockSource>
 800165a:	b100      	cbz	r0, 800165e <main+0xfe>
 800165c:	e7fe      	b.n	800165c <main+0xfc>
  {
    Error_Handler();
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800165e:	9004      	str	r0, [sp, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001660:	9005      	str	r0, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001662:	a904      	add	r1, sp, #16
 8001664:	4620      	mov	r0, r4
 8001666:	f7ff fe5d 	bl	8001324 <HAL_TIMEx_MasterConfigSynchronization>
 800166a:	b100      	cbz	r0, 800166e <main+0x10e>
 800166c:	e7fe      	b.n	800166c <main+0x10c>
{

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim2.Instance = TIM2;
 800166e:	4c20      	ldr	r4, [pc, #128]	; (80016f0 <main+0x190>)
 8001670:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  htim2.Init.Prescaler = 0;
 8001674:	6060      	str	r0, [r4, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001676:	60a0      	str	r0, [r4, #8]
  htim2.Init.Period = 0;
 8001678:	60e0      	str	r0, [r4, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800167a:	6120      	str	r0, [r4, #16]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800167c:	4620      	mov	r0, r4
{

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim2.Instance = TIM2;
 800167e:	6023      	str	r3, [r4, #0]
  htim2.Init.Prescaler = 0;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 0;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001680:	f7ff fe36 	bl	80012f0 <HAL_TIM_Base_Init>
 8001684:	b100      	cbz	r0, 8001688 <main+0x128>
 8001686:	e7fe      	b.n	8001686 <main+0x126>
  {
    Error_Handler();
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001688:	a906      	add	r1, sp, #24
 800168a:	4620      	mov	r0, r4
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800168c:	9506      	str	r5, [sp, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800168e:	f7ff fd41 	bl	8001114 <HAL_TIM_ConfigClockSource>
 8001692:	b100      	cbz	r0, 8001696 <main+0x136>
 8001694:	e7fe      	b.n	8001694 <main+0x134>
  {
    Error_Handler();
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001696:	9004      	str	r0, [sp, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001698:	9005      	str	r0, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800169a:	a904      	add	r1, sp, #16
 800169c:	4620      	mov	r0, r4
 800169e:	f7ff fe41 	bl	8001324 <HAL_TIMEx_MasterConfigSynchronization>
 80016a2:	b100      	cbz	r0, 80016a6 <main+0x146>
 80016a4:	e7fe      	b.n	80016a4 <main+0x144>

/* USART1 init function */
static void MX_USART1_UART_Init(void)
{

  huart1.Instance = USART1;
 80016a6:	4813      	ldr	r0, [pc, #76]	; (80016f4 <main+0x194>)
  huart1.Init.BaudRate = 115200;
 80016a8:	4b13      	ldr	r3, [pc, #76]	; (80016f8 <main+0x198>)
 80016aa:	f44f 34e1 	mov.w	r4, #115200	; 0x1c200
 80016ae:	e880 0018 	stmia.w	r0, {r3, r4}
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 80016b2:	220c      	movs	r2, #12
static void MX_USART1_UART_Init(void)
{

  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016b4:	2300      	movs	r3, #0
 80016b6:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80016b8:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80016ba:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80016bc:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016be:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016c0:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016c2:	f7ff feeb 	bl	800149c <HAL_UART_Init>
 80016c6:	b100      	cbz	r0, 80016ca <main+0x16a>
 80016c8:	e7fe      	b.n	80016c8 <main+0x168>
 80016ca:	e7fe      	b.n	80016ca <main+0x16a>
 80016cc:	40021000 	.word	0x40021000
 80016d0:	20000064 	.word	0x20000064
 80016d4:	40012400 	.word	0x40012400
 80016d8:	20000028 	.word	0x20000028
 80016dc:	40005400 	.word	0x40005400
 80016e0:	20000110 	.word	0x20000110
 80016e4:	40013000 	.word	0x40013000
 80016e8:	200000d4 	.word	0x200000d4
 80016ec:	40012c00 	.word	0x40012c00
 80016f0:	20000168 	.word	0x20000168
 80016f4:	20000094 	.word	0x20000094
 80016f8:	40013800 	.word	0x40013800
 80016fc:	000186a0 	.word	0x000186a0

08001700 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001700:	4b20      	ldr	r3, [pc, #128]	; (8001784 <HAL_MspInit+0x84>)
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001702:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001704:	699a      	ldr	r2, [r3, #24]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001706:	2003      	movs	r0, #3
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001708:	f042 0201 	orr.w	r2, r2, #1
 800170c:	619a      	str	r2, [r3, #24]
 800170e:	699b      	ldr	r3, [r3, #24]
 8001710:	f003 0301 	and.w	r3, r3, #1
 8001714:	9301      	str	r3, [sp, #4]
 8001716:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001718:	f7fe fef4 	bl	8000504 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800171c:	2200      	movs	r2, #0
 800171e:	4611      	mov	r1, r2
 8001720:	f06f 000b 	mvn.w	r0, #11
 8001724:	f7fe ff00 	bl	8000528 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001728:	2200      	movs	r2, #0
 800172a:	4611      	mov	r1, r2
 800172c:	f06f 000a 	mvn.w	r0, #10
 8001730:	f7fe fefa 	bl	8000528 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8001734:	2200      	movs	r2, #0
 8001736:	4611      	mov	r1, r2
 8001738:	f06f 0009 	mvn.w	r0, #9
 800173c:	f7fe fef4 	bl	8000528 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8001740:	2200      	movs	r2, #0
 8001742:	4611      	mov	r1, r2
 8001744:	f06f 0004 	mvn.w	r0, #4
 8001748:	f7fe feee 	bl	8000528 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800174c:	2200      	movs	r2, #0
 800174e:	4611      	mov	r1, r2
 8001750:	f06f 0003 	mvn.w	r0, #3
 8001754:	f7fe fee8 	bl	8000528 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001758:	2200      	movs	r2, #0
 800175a:	4611      	mov	r1, r2
 800175c:	f06f 0001 	mvn.w	r0, #1
 8001760:	f7fe fee2 	bl	8000528 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001764:	2200      	movs	r2, #0
 8001766:	4611      	mov	r1, r2
 8001768:	f04f 30ff 	mov.w	r0, #4294967295
 800176c:	f7fe fedc 	bl	8000528 <HAL_NVIC_SetPriority>

    /**DISABLE: JTAG-DP Disabled and SW-DP Disabled 
    */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001770:	4a05      	ldr	r2, [pc, #20]	; (8001788 <HAL_MspInit+0x88>)
 8001772:	6853      	ldr	r3, [r2, #4]
 8001774:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001778:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800177c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800177e:	b003      	add	sp, #12
 8001780:	f85d fb04 	ldr.w	pc, [sp], #4
 8001784:	40021000 	.word	0x40021000
 8001788:	40010000 	.word	0x40010000

0800178c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800178c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 800178e:	6802      	ldr	r2, [r0, #0]
 8001790:	4b0c      	ldr	r3, [pc, #48]	; (80017c4 <HAL_ADC_MspInit+0x38>)
 8001792:	429a      	cmp	r2, r3
 8001794:	d112      	bne.n	80017bc <HAL_ADC_MspInit+0x30>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001796:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 800179a:	699a      	ldr	r2, [r3, #24]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800179c:	a902      	add	r1, sp, #8
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800179e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017a2:	619a      	str	r2, [r3, #24]
 80017a4:	699b      	ldr	r3, [r3, #24]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017a6:	4808      	ldr	r0, [pc, #32]	; (80017c8 <HAL_ADC_MspInit+0x3c>)
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80017a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017ac:	9301      	str	r3, [sp, #4]
 80017ae:	9b01      	ldr	r3, [sp, #4]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80017b0:	230f      	movs	r3, #15
 80017b2:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017b4:	2303      	movs	r3, #3
 80017b6:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b8:	f7fe ff12 	bl	80005e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80017bc:	b007      	add	sp, #28
 80017be:	f85d fb04 	ldr.w	pc, [sp], #4
 80017c2:	bf00      	nop
 80017c4:	40012400 	.word	0x40012400
 80017c8:	40010800 	.word	0x40010800

080017cc <HAL_I2C_MspInit>:
  /* USER CODE END ADC1_MspDeInit 1 */

}

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80017cc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 80017ce:	6802      	ldr	r2, [r0, #0]
 80017d0:	4b0c      	ldr	r3, [pc, #48]	; (8001804 <HAL_I2C_MspInit+0x38>)
 80017d2:	429a      	cmp	r2, r3
 80017d4:	d113      	bne.n	80017fe <HAL_I2C_MspInit+0x32>
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80017d6:	23c0      	movs	r3, #192	; 0xc0
 80017d8:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017da:	2312      	movs	r3, #18
 80017dc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017de:	a902      	add	r1, sp, #8
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017e0:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017e2:	4809      	ldr	r0, [pc, #36]	; (8001808 <HAL_I2C_MspInit+0x3c>)
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017e4:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017e6:	f7fe fefb 	bl	80005e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017ea:	4b08      	ldr	r3, [pc, #32]	; (800180c <HAL_I2C_MspInit+0x40>)
 80017ec:	69da      	ldr	r2, [r3, #28]
 80017ee:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80017f2:	61da      	str	r2, [r3, #28]
 80017f4:	69db      	ldr	r3, [r3, #28]
 80017f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017fa:	9301      	str	r3, [sp, #4]
 80017fc:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80017fe:	b007      	add	sp, #28
 8001800:	f85d fb04 	ldr.w	pc, [sp], #4
 8001804:	40005400 	.word	0x40005400
 8001808:	40010c00 	.word	0x40010c00
 800180c:	40021000 	.word	0x40021000

08001810 <HAL_SPI_MspInit>:
  /* USER CODE END I2C1_MspDeInit 1 */

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001810:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
 8001812:	6802      	ldr	r2, [r0, #0]
 8001814:	4b11      	ldr	r3, [pc, #68]	; (800185c <HAL_SPI_MspInit+0x4c>)
 8001816:	429a      	cmp	r2, r3
 8001818:	d11d      	bne.n	8001856 <HAL_SPI_MspInit+0x46>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800181a:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 800181e:	699a      	ldr	r2, [r3, #24]
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001820:	a902      	add	r1, sp, #8
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001822:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001826:	619a      	str	r2, [r3, #24]
 8001828:	699b      	ldr	r3, [r3, #24]
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800182a:	480d      	ldr	r0, [pc, #52]	; (8001860 <HAL_SPI_MspInit+0x50>)
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800182c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001830:	9301      	str	r3, [sp, #4]
 8001832:	9b01      	ldr	r3, [sp, #4]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001834:	23a0      	movs	r3, #160	; 0xa0
 8001836:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001838:	2302      	movs	r3, #2
 800183a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800183c:	2303      	movs	r3, #3
 800183e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001840:	f7fe fece 	bl	80005e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001844:	2340      	movs	r3, #64	; 0x40
 8001846:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001848:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800184a:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800184c:	4804      	ldr	r0, [pc, #16]	; (8001860 <HAL_SPI_MspInit+0x50>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800184e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001850:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001852:	f7fe fec5 	bl	80005e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001856:	b007      	add	sp, #28
 8001858:	f85d fb04 	ldr.w	pc, [sp], #4
 800185c:	40013000 	.word	0x40013000
 8001860:	40010800 	.word	0x40010800

08001864 <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{

  if(htim_base->Instance==TIM1)
 8001864:	6803      	ldr	r3, [r0, #0]
 8001866:	4a0f      	ldr	r2, [pc, #60]	; (80018a4 <HAL_TIM_Base_MspInit+0x40>)
  /* USER CODE END SPI1_MspDeInit 1 */

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001868:	b082      	sub	sp, #8

  if(htim_base->Instance==TIM1)
 800186a:	4293      	cmp	r3, r2
 800186c:	d10a      	bne.n	8001884 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800186e:	4b0e      	ldr	r3, [pc, #56]	; (80018a8 <HAL_TIM_Base_MspInit+0x44>)
 8001870:	699a      	ldr	r2, [r3, #24]
 8001872:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001876:	619a      	str	r2, [r3, #24]
 8001878:	699b      	ldr	r3, [r3, #24]
 800187a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800187e:	9300      	str	r3, [sp, #0]
 8001880:	9b00      	ldr	r3, [sp, #0]
 8001882:	e00d      	b.n	80018a0 <HAL_TIM_Base_MspInit+0x3c>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 8001884:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001888:	d10a      	bne.n	80018a0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800188a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800188e:	69da      	ldr	r2, [r3, #28]
 8001890:	f042 0201 	orr.w	r2, r2, #1
 8001894:	61da      	str	r2, [r3, #28]
 8001896:	69db      	ldr	r3, [r3, #28]
 8001898:	f003 0301 	and.w	r3, r3, #1
 800189c:	9301      	str	r3, [sp, #4]
 800189e:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80018a0:	b002      	add	sp, #8
 80018a2:	4770      	bx	lr
 80018a4:	40012c00 	.word	0x40012c00
 80018a8:	40021000 	.word	0x40021000

080018ac <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018ac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 80018ae:	6802      	ldr	r2, [r0, #0]
 80018b0:	4b12      	ldr	r3, [pc, #72]	; (80018fc <HAL_UART_MspInit+0x50>)
 80018b2:	429a      	cmp	r2, r3
 80018b4:	d11f      	bne.n	80018f6 <HAL_UART_MspInit+0x4a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80018b6:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 80018ba:	699a      	ldr	r2, [r3, #24]
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018bc:	a902      	add	r1, sp, #8
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80018be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80018c2:	619a      	str	r2, [r3, #24]
 80018c4:	699b      	ldr	r3, [r3, #24]
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c6:	480e      	ldr	r0, [pc, #56]	; (8001900 <HAL_UART_MspInit+0x54>)
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80018c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018cc:	9301      	str	r3, [sp, #4]
 80018ce:	9b01      	ldr	r3, [sp, #4]
  
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80018d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018d4:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d6:	2302      	movs	r3, #2
 80018d8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018da:	2303      	movs	r3, #3
 80018dc:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018de:	f7fe fe7f 	bl	80005e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80018e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018e6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018e8:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018ea:	2300      	movs	r3, #0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ec:	4804      	ldr	r0, [pc, #16]	; (8001900 <HAL_UART_MspInit+0x54>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018ee:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f0:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f2:	f7fe fe75 	bl	80005e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80018f6:	b007      	add	sp, #28
 80018f8:	f85d fb04 	ldr.w	pc, [sp], #4
 80018fc:	40013800 	.word	0x40013800
 8001900:	40010800 	.word	0x40010800

08001904 <NMI_Handler>:
 8001904:	4770      	bx	lr

08001906 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8001906:	e7fe      	b.n	8001906 <HardFault_Handler>

08001908 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8001908:	e7fe      	b.n	8001908 <MemManage_Handler>

0800190a <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 800190a:	e7fe      	b.n	800190a <BusFault_Handler>

0800190c <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 800190c:	e7fe      	b.n	800190c <UsageFault_Handler>

0800190e <SVC_Handler>:
 800190e:	4770      	bx	lr

08001910 <DebugMon_Handler>:
 8001910:	4770      	bx	lr

08001912 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8001912:	4770      	bx	lr

08001914 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001914:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001916:	f7fe fc63 	bl	80001e0 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800191a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  HAL_SYSTICK_IRQHandler();
 800191e:	f7fe be5a 	b.w	80005d6 <HAL_SYSTICK_IRQHandler>
	...

08001924 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001924:	4b0f      	ldr	r3, [pc, #60]	; (8001964 <SystemInit+0x40>)
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	f042 0201 	orr.w	r2, r2, #1
 800192c:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 800192e:	6859      	ldr	r1, [r3, #4]
 8001930:	4a0d      	ldr	r2, [pc, #52]	; (8001968 <SystemInit+0x44>)
 8001932:	400a      	ands	r2, r1
 8001934:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800193c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001940:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001948:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 800194a:	685a      	ldr	r2, [r3, #4]
 800194c:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001950:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8001952:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001956:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001958:	4b04      	ldr	r3, [pc, #16]	; (800196c <SystemInit+0x48>)
 800195a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800195e:	609a      	str	r2, [r3, #8]
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	40021000 	.word	0x40021000
 8001968:	f8ff0000 	.word	0xf8ff0000
 800196c:	e000ed00 	.word	0xe000ed00

08001970 <__libc_init_array>:
 8001970:	4b0e      	ldr	r3, [pc, #56]	; (80019ac <__libc_init_array+0x3c>)
 8001972:	b570      	push	{r4, r5, r6, lr}
 8001974:	461e      	mov	r6, r3
 8001976:	4c0e      	ldr	r4, [pc, #56]	; (80019b0 <__libc_init_array+0x40>)
 8001978:	2500      	movs	r5, #0
 800197a:	1ae4      	subs	r4, r4, r3
 800197c:	10a4      	asrs	r4, r4, #2
 800197e:	42a5      	cmp	r5, r4
 8001980:	d004      	beq.n	800198c <__libc_init_array+0x1c>
 8001982:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001986:	4798      	blx	r3
 8001988:	3501      	adds	r5, #1
 800198a:	e7f8      	b.n	800197e <__libc_init_array+0xe>
 800198c:	f000 f816 	bl	80019bc <_init>
 8001990:	4b08      	ldr	r3, [pc, #32]	; (80019b4 <__libc_init_array+0x44>)
 8001992:	4c09      	ldr	r4, [pc, #36]	; (80019b8 <__libc_init_array+0x48>)
 8001994:	461e      	mov	r6, r3
 8001996:	1ae4      	subs	r4, r4, r3
 8001998:	10a4      	asrs	r4, r4, #2
 800199a:	2500      	movs	r5, #0
 800199c:	42a5      	cmp	r5, r4
 800199e:	d004      	beq.n	80019aa <__libc_init_array+0x3a>
 80019a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80019a4:	4798      	blx	r3
 80019a6:	3501      	adds	r5, #1
 80019a8:	e7f8      	b.n	800199c <__libc_init_array+0x2c>
 80019aa:	bd70      	pop	{r4, r5, r6, pc}
 80019ac:	08001a00 	.word	0x08001a00
 80019b0:	08001a00 	.word	0x08001a00
 80019b4:	08001a00 	.word	0x08001a00
 80019b8:	08001a04 	.word	0x08001a04

080019bc <_init>:
 80019bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019be:	bf00      	nop
 80019c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019c2:	bc08      	pop	{r3}
 80019c4:	469e      	mov	lr, r3
 80019c6:	4770      	bx	lr

080019c8 <_fini>:
 80019c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019ca:	bf00      	nop
 80019cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019ce:	bc08      	pop	{r3}
 80019d0:	469e      	mov	lr, r3
 80019d2:	4770      	bx	lr
