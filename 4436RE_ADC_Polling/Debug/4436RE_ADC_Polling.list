
4436RE_ADC_Polling.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027b8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08002988  08002988  00012988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08002a58  08002a58  00012a58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08002a60  08002a60  00012a60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08002a64  08002a64  00012a64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000000  08002a68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000b8  20000070  08002ad8  00020070  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000128  08002ad8  00020128  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000f002  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002184  00000000  00000000  0002f0a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003631  00000000  00000000  00031226  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000670  00000000  00000000  00034858  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000007f8  00000000  00000000  00034ec8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00004019  00000000  00000000  000356c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00002be9  00000000  00000000  000396d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0003c2c2  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001878  00000000  00000000  0003c340  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stab         00000084  00000000  00000000  0003dbb8  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stabstr      00000117  00000000  00000000  0003dc3c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08002970 	.word	0x08002970

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08002970 	.word	0x08002970

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b97a 	b.w	80005bc <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	468c      	mov	ip, r1
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	9e08      	ldr	r6, [sp, #32]
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d151      	bne.n	8000394 <__udivmoddi4+0xb4>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d96d      	bls.n	80003d2 <__udivmoddi4+0xf2>
 80002f6:	fab2 fe82 	clz	lr, r2
 80002fa:	f1be 0f00 	cmp.w	lr, #0
 80002fe:	d00b      	beq.n	8000318 <__udivmoddi4+0x38>
 8000300:	f1ce 0c20 	rsb	ip, lr, #32
 8000304:	fa01 f50e 	lsl.w	r5, r1, lr
 8000308:	fa20 fc0c 	lsr.w	ip, r0, ip
 800030c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000310:	ea4c 0c05 	orr.w	ip, ip, r5
 8000314:	fa00 f40e 	lsl.w	r4, r0, lr
 8000318:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800031c:	0c25      	lsrs	r5, r4, #16
 800031e:	fbbc f8fa 	udiv	r8, ip, sl
 8000322:	fa1f f987 	uxth.w	r9, r7
 8000326:	fb0a cc18 	mls	ip, sl, r8, ip
 800032a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800032e:	fb08 f309 	mul.w	r3, r8, r9
 8000332:	42ab      	cmp	r3, r5
 8000334:	d90a      	bls.n	800034c <__udivmoddi4+0x6c>
 8000336:	19ed      	adds	r5, r5, r7
 8000338:	f108 32ff 	add.w	r2, r8, #4294967295
 800033c:	f080 8123 	bcs.w	8000586 <__udivmoddi4+0x2a6>
 8000340:	42ab      	cmp	r3, r5
 8000342:	f240 8120 	bls.w	8000586 <__udivmoddi4+0x2a6>
 8000346:	f1a8 0802 	sub.w	r8, r8, #2
 800034a:	443d      	add	r5, r7
 800034c:	1aed      	subs	r5, r5, r3
 800034e:	b2a4      	uxth	r4, r4
 8000350:	fbb5 f0fa 	udiv	r0, r5, sl
 8000354:	fb0a 5510 	mls	r5, sl, r0, r5
 8000358:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800035c:	fb00 f909 	mul.w	r9, r0, r9
 8000360:	45a1      	cmp	r9, r4
 8000362:	d909      	bls.n	8000378 <__udivmoddi4+0x98>
 8000364:	19e4      	adds	r4, r4, r7
 8000366:	f100 33ff 	add.w	r3, r0, #4294967295
 800036a:	f080 810a 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800036e:	45a1      	cmp	r9, r4
 8000370:	f240 8107 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000374:	3802      	subs	r0, #2
 8000376:	443c      	add	r4, r7
 8000378:	eba4 0409 	sub.w	r4, r4, r9
 800037c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000380:	2100      	movs	r1, #0
 8000382:	2e00      	cmp	r6, #0
 8000384:	d061      	beq.n	800044a <__udivmoddi4+0x16a>
 8000386:	fa24 f40e 	lsr.w	r4, r4, lr
 800038a:	2300      	movs	r3, #0
 800038c:	6034      	str	r4, [r6, #0]
 800038e:	6073      	str	r3, [r6, #4]
 8000390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000394:	428b      	cmp	r3, r1
 8000396:	d907      	bls.n	80003a8 <__udivmoddi4+0xc8>
 8000398:	2e00      	cmp	r6, #0
 800039a:	d054      	beq.n	8000446 <__udivmoddi4+0x166>
 800039c:	2100      	movs	r1, #0
 800039e:	e886 0021 	stmia.w	r6, {r0, r5}
 80003a2:	4608      	mov	r0, r1
 80003a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a8:	fab3 f183 	clz	r1, r3
 80003ac:	2900      	cmp	r1, #0
 80003ae:	f040 808e 	bne.w	80004ce <__udivmoddi4+0x1ee>
 80003b2:	42ab      	cmp	r3, r5
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xdc>
 80003b6:	4282      	cmp	r2, r0
 80003b8:	f200 80fa 	bhi.w	80005b0 <__udivmoddi4+0x2d0>
 80003bc:	1a84      	subs	r4, r0, r2
 80003be:	eb65 0503 	sbc.w	r5, r5, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	46ac      	mov	ip, r5
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d03f      	beq.n	800044a <__udivmoddi4+0x16a>
 80003ca:	e886 1010 	stmia.w	r6, {r4, ip}
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	b912      	cbnz	r2, 80003da <__udivmoddi4+0xfa>
 80003d4:	2701      	movs	r7, #1
 80003d6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003da:	fab7 fe87 	clz	lr, r7
 80003de:	f1be 0f00 	cmp.w	lr, #0
 80003e2:	d134      	bne.n	800044e <__udivmoddi4+0x16e>
 80003e4:	1beb      	subs	r3, r5, r7
 80003e6:	0c3a      	lsrs	r2, r7, #16
 80003e8:	fa1f fc87 	uxth.w	ip, r7
 80003ec:	2101      	movs	r1, #1
 80003ee:	fbb3 f8f2 	udiv	r8, r3, r2
 80003f2:	0c25      	lsrs	r5, r4, #16
 80003f4:	fb02 3318 	mls	r3, r2, r8, r3
 80003f8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003fc:	fb0c f308 	mul.w	r3, ip, r8
 8000400:	42ab      	cmp	r3, r5
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x134>
 8000404:	19ed      	adds	r5, r5, r7
 8000406:	f108 30ff 	add.w	r0, r8, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x132>
 800040c:	42ab      	cmp	r3, r5
 800040e:	f200 80d1 	bhi.w	80005b4 <__udivmoddi4+0x2d4>
 8000412:	4680      	mov	r8, r0
 8000414:	1aed      	subs	r5, r5, r3
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb5 f0f2 	udiv	r0, r5, r2
 800041c:	fb02 5510 	mls	r5, r2, r0, r5
 8000420:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000424:	fb0c fc00 	mul.w	ip, ip, r0
 8000428:	45a4      	cmp	ip, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x15c>
 800042c:	19e4      	adds	r4, r4, r7
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x15a>
 8000434:	45a4      	cmp	ip, r4
 8000436:	f200 80b8 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 040c 	sub.w	r4, r4, ip
 8000440:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000444:	e79d      	b.n	8000382 <__udivmoddi4+0xa2>
 8000446:	4631      	mov	r1, r6
 8000448:	4630      	mov	r0, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1ce 0420 	rsb	r4, lr, #32
 8000452:	fa05 f30e 	lsl.w	r3, r5, lr
 8000456:	fa07 f70e 	lsl.w	r7, r7, lr
 800045a:	fa20 f804 	lsr.w	r8, r0, r4
 800045e:	0c3a      	lsrs	r2, r7, #16
 8000460:	fa25 f404 	lsr.w	r4, r5, r4
 8000464:	ea48 0803 	orr.w	r8, r8, r3
 8000468:	fbb4 f1f2 	udiv	r1, r4, r2
 800046c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000470:	fb02 4411 	mls	r4, r2, r1, r4
 8000474:	fa1f fc87 	uxth.w	ip, r7
 8000478:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800047c:	fb01 f30c 	mul.w	r3, r1, ip
 8000480:	42ab      	cmp	r3, r5
 8000482:	fa00 f40e 	lsl.w	r4, r0, lr
 8000486:	d909      	bls.n	800049c <__udivmoddi4+0x1bc>
 8000488:	19ed      	adds	r5, r5, r7
 800048a:	f101 30ff 	add.w	r0, r1, #4294967295
 800048e:	f080 808a 	bcs.w	80005a6 <__udivmoddi4+0x2c6>
 8000492:	42ab      	cmp	r3, r5
 8000494:	f240 8087 	bls.w	80005a6 <__udivmoddi4+0x2c6>
 8000498:	3902      	subs	r1, #2
 800049a:	443d      	add	r5, r7
 800049c:	1aeb      	subs	r3, r5, r3
 800049e:	fa1f f588 	uxth.w	r5, r8
 80004a2:	fbb3 f0f2 	udiv	r0, r3, r2
 80004a6:	fb02 3310 	mls	r3, r2, r0, r3
 80004aa:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004ae:	fb00 f30c 	mul.w	r3, r0, ip
 80004b2:	42ab      	cmp	r3, r5
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x1e6>
 80004b6:	19ed      	adds	r5, r5, r7
 80004b8:	f100 38ff 	add.w	r8, r0, #4294967295
 80004bc:	d26f      	bcs.n	800059e <__udivmoddi4+0x2be>
 80004be:	42ab      	cmp	r3, r5
 80004c0:	d96d      	bls.n	800059e <__udivmoddi4+0x2be>
 80004c2:	3802      	subs	r0, #2
 80004c4:	443d      	add	r5, r7
 80004c6:	1aeb      	subs	r3, r5, r3
 80004c8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004cc:	e78f      	b.n	80003ee <__udivmoddi4+0x10e>
 80004ce:	f1c1 0720 	rsb	r7, r1, #32
 80004d2:	fa22 f807 	lsr.w	r8, r2, r7
 80004d6:	408b      	lsls	r3, r1
 80004d8:	fa05 f401 	lsl.w	r4, r5, r1
 80004dc:	ea48 0303 	orr.w	r3, r8, r3
 80004e0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004e4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004e8:	40fd      	lsrs	r5, r7
 80004ea:	ea4e 0e04 	orr.w	lr, lr, r4
 80004ee:	fbb5 f9fc 	udiv	r9, r5, ip
 80004f2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004f6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004fa:	fa1f f883 	uxth.w	r8, r3
 80004fe:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000502:	fb09 f408 	mul.w	r4, r9, r8
 8000506:	42ac      	cmp	r4, r5
 8000508:	fa02 f201 	lsl.w	r2, r2, r1
 800050c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000510:	d908      	bls.n	8000524 <__udivmoddi4+0x244>
 8000512:	18ed      	adds	r5, r5, r3
 8000514:	f109 30ff 	add.w	r0, r9, #4294967295
 8000518:	d243      	bcs.n	80005a2 <__udivmoddi4+0x2c2>
 800051a:	42ac      	cmp	r4, r5
 800051c:	d941      	bls.n	80005a2 <__udivmoddi4+0x2c2>
 800051e:	f1a9 0902 	sub.w	r9, r9, #2
 8000522:	441d      	add	r5, r3
 8000524:	1b2d      	subs	r5, r5, r4
 8000526:	fa1f fe8e 	uxth.w	lr, lr
 800052a:	fbb5 f0fc 	udiv	r0, r5, ip
 800052e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000532:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000536:	fb00 f808 	mul.w	r8, r0, r8
 800053a:	45a0      	cmp	r8, r4
 800053c:	d907      	bls.n	800054e <__udivmoddi4+0x26e>
 800053e:	18e4      	adds	r4, r4, r3
 8000540:	f100 35ff 	add.w	r5, r0, #4294967295
 8000544:	d229      	bcs.n	800059a <__udivmoddi4+0x2ba>
 8000546:	45a0      	cmp	r8, r4
 8000548:	d927      	bls.n	800059a <__udivmoddi4+0x2ba>
 800054a:	3802      	subs	r0, #2
 800054c:	441c      	add	r4, r3
 800054e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000552:	eba4 0408 	sub.w	r4, r4, r8
 8000556:	fba0 8902 	umull	r8, r9, r0, r2
 800055a:	454c      	cmp	r4, r9
 800055c:	46c6      	mov	lr, r8
 800055e:	464d      	mov	r5, r9
 8000560:	d315      	bcc.n	800058e <__udivmoddi4+0x2ae>
 8000562:	d012      	beq.n	800058a <__udivmoddi4+0x2aa>
 8000564:	b156      	cbz	r6, 800057c <__udivmoddi4+0x29c>
 8000566:	ebba 030e 	subs.w	r3, sl, lr
 800056a:	eb64 0405 	sbc.w	r4, r4, r5
 800056e:	fa04 f707 	lsl.w	r7, r4, r7
 8000572:	40cb      	lsrs	r3, r1
 8000574:	431f      	orrs	r7, r3
 8000576:	40cc      	lsrs	r4, r1
 8000578:	6037      	str	r7, [r6, #0]
 800057a:	6074      	str	r4, [r6, #4]
 800057c:	2100      	movs	r1, #0
 800057e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000582:	4618      	mov	r0, r3
 8000584:	e6f8      	b.n	8000378 <__udivmoddi4+0x98>
 8000586:	4690      	mov	r8, r2
 8000588:	e6e0      	b.n	800034c <__udivmoddi4+0x6c>
 800058a:	45c2      	cmp	sl, r8
 800058c:	d2ea      	bcs.n	8000564 <__udivmoddi4+0x284>
 800058e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000592:	eb69 0503 	sbc.w	r5, r9, r3
 8000596:	3801      	subs	r0, #1
 8000598:	e7e4      	b.n	8000564 <__udivmoddi4+0x284>
 800059a:	4628      	mov	r0, r5
 800059c:	e7d7      	b.n	800054e <__udivmoddi4+0x26e>
 800059e:	4640      	mov	r0, r8
 80005a0:	e791      	b.n	80004c6 <__udivmoddi4+0x1e6>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e7be      	b.n	8000524 <__udivmoddi4+0x244>
 80005a6:	4601      	mov	r1, r0
 80005a8:	e778      	b.n	800049c <__udivmoddi4+0x1bc>
 80005aa:	3802      	subs	r0, #2
 80005ac:	443c      	add	r4, r7
 80005ae:	e745      	b.n	800043c <__udivmoddi4+0x15c>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e708      	b.n	80003c6 <__udivmoddi4+0xe6>
 80005b4:	f1a8 0802 	sub.w	r8, r8, #2
 80005b8:	443d      	add	r5, r7
 80005ba:	e72b      	b.n	8000414 <__udivmoddi4+0x134>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005c0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005c2:	4a0e      	ldr	r2, [pc, #56]	; (80005fc <HAL_InitTick+0x3c>)
 80005c4:	4b0e      	ldr	r3, [pc, #56]	; (8000600 <HAL_InitTick+0x40>)
{
 80005c6:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005c8:	7818      	ldrb	r0, [r3, #0]
 80005ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ce:	fbb3 f3f0 	udiv	r3, r3, r0
 80005d2:	6810      	ldr	r0, [r2, #0]
 80005d4:	fbb0 f0f3 	udiv	r0, r0, r3
 80005d8:	f000 fa96 	bl	8000b08 <HAL_SYSTICK_Config>
 80005dc:	4604      	mov	r4, r0
 80005de:	b958      	cbnz	r0, 80005f8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005e0:	2d0f      	cmp	r5, #15
 80005e2:	d809      	bhi.n	80005f8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005e4:	4602      	mov	r2, r0
 80005e6:	4629      	mov	r1, r5
 80005e8:	f04f 30ff 	mov.w	r0, #4294967295
 80005ec:	f000 fa58 	bl	8000aa0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005f0:	4b04      	ldr	r3, [pc, #16]	; (8000604 <HAL_InitTick+0x44>)
 80005f2:	4620      	mov	r0, r4
 80005f4:	601d      	str	r5, [r3, #0]
 80005f6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80005f8:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80005fa:	bd38      	pop	{r3, r4, r5, pc}
 80005fc:	20000008 	.word	0x20000008
 8000600:	20000000 	.word	0x20000000
 8000604:	20000004 	.word	0x20000004

08000608 <HAL_Init>:
{
 8000608:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800060a:	4b0b      	ldr	r3, [pc, #44]	; (8000638 <HAL_Init+0x30>)
 800060c:	681a      	ldr	r2, [r3, #0]
 800060e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000612:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000614:	681a      	ldr	r2, [r3, #0]
 8000616:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800061a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800061c:	681a      	ldr	r2, [r3, #0]
 800061e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000622:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000624:	2003      	movs	r0, #3
 8000626:	f000 fa29 	bl	8000a7c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800062a:	2000      	movs	r0, #0
 800062c:	f7ff ffc8 	bl	80005c0 <HAL_InitTick>
  HAL_MspInit();
 8000630:	f001 f952 	bl	80018d8 <HAL_MspInit>
}
 8000634:	2000      	movs	r0, #0
 8000636:	bd08      	pop	{r3, pc}
 8000638:	40023c00 	.word	0x40023c00

0800063c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800063c:	4a03      	ldr	r2, [pc, #12]	; (800064c <HAL_IncTick+0x10>)
 800063e:	4b04      	ldr	r3, [pc, #16]	; (8000650 <HAL_IncTick+0x14>)
 8000640:	6811      	ldr	r1, [r2, #0]
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	440b      	add	r3, r1
 8000646:	6013      	str	r3, [r2, #0]
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	20000098 	.word	0x20000098
 8000650:	20000000 	.word	0x20000000

08000654 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000654:	4b01      	ldr	r3, [pc, #4]	; (800065c <HAL_GetTick+0x8>)
 8000656:	6818      	ldr	r0, [r3, #0]
}
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	20000098 	.word	0x20000098

08000660 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000660:	b510      	push	{r4, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000662:	4604      	mov	r4, r0
 8000664:	2800      	cmp	r0, #0
 8000666:	f000 8099 	beq.w	800079c <HAL_ADC_Init+0x13c>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800066a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800066c:	b923      	cbnz	r3, 8000678 <HAL_ADC_Init+0x18>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800066e:	6443      	str	r3, [r0, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000670:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000674:	f001 f978 	bl	8001968 <HAL_ADC_MspInit>
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000678:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800067a:	06db      	lsls	r3, r3, #27
 800067c:	f100 808c 	bmi.w	8000798 <HAL_ADC_Init+0x138>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000680:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000682:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000686:	f023 0302 	bic.w	r3, r3, #2
 800068a:	f043 0302 	orr.w	r3, r3, #2
 800068e:	6423      	str	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000690:	4b43      	ldr	r3, [pc, #268]	; (80007a0 <HAL_ADC_Init+0x140>)
 8000692:	685a      	ldr	r2, [r3, #4]
 8000694:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000698:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800069a:	685a      	ldr	r2, [r3, #4]
 800069c:	6861      	ldr	r1, [r4, #4]
 800069e:	430a      	orrs	r2, r1
 80006a0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80006a2:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80006a4:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80006a6:	685a      	ldr	r2, [r3, #4]
 80006a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80006ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80006ae:	685a      	ldr	r2, [r3, #4]
 80006b0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80006b4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80006b6:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80006b8:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80006ba:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80006be:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80006c0:	685a      	ldr	r2, [r3, #4]
 80006c2:	430a      	orrs	r2, r1
 80006c4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80006c6:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80006c8:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80006ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80006ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80006d0:	689a      	ldr	r2, [r3, #8]
 80006d2:	430a      	orrs	r2, r1
 80006d4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80006d6:	4933      	ldr	r1, [pc, #204]	; (80007a4 <HAL_ADC_Init+0x144>)
 80006d8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80006da:	428a      	cmp	r2, r1
 80006dc:	d050      	beq.n	8000780 <HAL_ADC_Init+0x120>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80006de:	6899      	ldr	r1, [r3, #8]
 80006e0:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 80006e4:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80006e6:	6899      	ldr	r1, [r3, #8]
 80006e8:	430a      	orrs	r2, r1
 80006ea:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80006ec:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80006ee:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80006f0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80006f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80006f6:	689a      	ldr	r2, [r3, #8]
 80006f8:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80006fa:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80006fc:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 80006fe:	69a1      	ldr	r1, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000700:	f022 0202 	bic.w	r2, r2, #2
 8000704:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 8000706:	689a      	ldr	r2, [r3, #8]
 8000708:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 800070c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800070e:	6a22      	ldr	r2, [r4, #32]
 8000710:	2a00      	cmp	r2, #0
 8000712:	d03d      	beq.n	8000790 <HAL_ADC_Init+0x130>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000714:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000716:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000718:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800071c:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800071e:	685a      	ldr	r2, [r3, #4]
 8000720:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000724:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000726:	685a      	ldr	r2, [r3, #4]
 8000728:	3901      	subs	r1, #1
 800072a:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800072e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000730:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000732:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000734:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000738:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800073a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800073c:	3901      	subs	r1, #1
 800073e:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8000742:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000744:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8000746:	6b21      	ldr	r1, [r4, #48]	; 0x30
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000748:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800074c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 800074e:	689a      	ldr	r2, [r3, #8]
 8000750:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 8000754:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000756:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000758:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800075a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800075e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000760:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8000762:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000764:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8000768:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 800076a:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 800076c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800076e:	f023 0303 	bic.w	r3, r3, #3
 8000772:	f043 0301 	orr.w	r3, r3, #1
 8000776:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8000778:	2300      	movs	r3, #0
 800077a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  return tmp_hal_status;
 800077e:	bd10      	pop	{r4, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000780:	689a      	ldr	r2, [r3, #8]
 8000782:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000786:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000788:	689a      	ldr	r2, [r3, #8]
 800078a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800078e:	e7b4      	b.n	80006fa <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000790:	685a      	ldr	r2, [r3, #4]
 8000792:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000796:	e7ca      	b.n	800072e <HAL_ADC_Init+0xce>
    tmp_hal_status = HAL_ERROR;
 8000798:	2001      	movs	r0, #1
 800079a:	e7ed      	b.n	8000778 <HAL_ADC_Init+0x118>
    return HAL_ERROR;
 800079c:	2001      	movs	r0, #1
}
 800079e:	bd10      	pop	{r4, pc}
 80007a0:	40012300 	.word	0x40012300
 80007a4:	0f000001 	.word	0x0f000001

080007a8 <HAL_ADC_Start>:
{
 80007a8:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 80007aa:	2300      	movs	r3, #0
 80007ac:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80007ae:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80007b2:	2b01      	cmp	r3, #1
 80007b4:	d04e      	beq.n	8000854 <HAL_ADC_Start+0xac>
 80007b6:	2301      	movs	r3, #1
 80007b8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80007bc:	6803      	ldr	r3, [r0, #0]
 80007be:	689a      	ldr	r2, [r3, #8]
 80007c0:	07d1      	lsls	r1, r2, #31
 80007c2:	d505      	bpl.n	80007d0 <HAL_ADC_Start+0x28>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80007c4:	689a      	ldr	r2, [r3, #8]
 80007c6:	07d2      	lsls	r2, r2, #31
 80007c8:	d414      	bmi.n	80007f4 <HAL_ADC_Start+0x4c>
  return HAL_OK;
 80007ca:	2000      	movs	r0, #0
}
 80007cc:	b002      	add	sp, #8
 80007ce:	4770      	bx	lr
    __HAL_ADC_ENABLE(hadc);
 80007d0:	689a      	ldr	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80007d2:	4921      	ldr	r1, [pc, #132]	; (8000858 <HAL_ADC_Start+0xb0>)
    __HAL_ADC_ENABLE(hadc);
 80007d4:	f042 0201 	orr.w	r2, r2, #1
 80007d8:	609a      	str	r2, [r3, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80007da:	4a20      	ldr	r2, [pc, #128]	; (800085c <HAL_ADC_Start+0xb4>)
 80007dc:	6812      	ldr	r2, [r2, #0]
 80007de:	fbb2 f2f1 	udiv	r2, r2, r1
 80007e2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
      counter--;
 80007e6:	9201      	str	r2, [sp, #4]
    while(counter != 0U)
 80007e8:	9a01      	ldr	r2, [sp, #4]
 80007ea:	2a00      	cmp	r2, #0
 80007ec:	d0ea      	beq.n	80007c4 <HAL_ADC_Start+0x1c>
      counter--;
 80007ee:	9a01      	ldr	r2, [sp, #4]
 80007f0:	3a01      	subs	r2, #1
 80007f2:	e7f8      	b.n	80007e6 <HAL_ADC_Start+0x3e>
    ADC_STATE_CLR_SET(hadc->State,
 80007f4:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80007f6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80007fa:	f022 0201 	bic.w	r2, r2, #1
 80007fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000802:	6402      	str	r2, [r0, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000804:	685a      	ldr	r2, [r3, #4]
 8000806:	0551      	lsls	r1, r2, #21
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000808:	bf41      	itttt	mi
 800080a:	6c02      	ldrmi	r2, [r0, #64]	; 0x40
 800080c:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 8000810:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 8000814:	6402      	strmi	r2, [r0, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000816:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000818:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800081c:	bf1c      	itt	ne
 800081e:	6c42      	ldrne	r2, [r0, #68]	; 0x44
 8000820:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8000824:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_UNLOCK(hadc);
 8000826:	2200      	movs	r2, #0
 8000828:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800082c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000830:	601a      	str	r2, [r3, #0]
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000832:	4a0b      	ldr	r2, [pc, #44]	; (8000860 <HAL_ADC_Start+0xb8>)
 8000834:	6852      	ldr	r2, [r2, #4]
 8000836:	06d2      	lsls	r2, r2, #27
 8000838:	d108      	bne.n	800084c <HAL_ADC_Start+0xa4>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800083a:	6898      	ldr	r0, [r3, #8]
 800083c:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8000840:	d1c3      	bne.n	80007ca <HAL_ADC_Start+0x22>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000842:	689a      	ldr	r2, [r3, #8]
 8000844:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000848:	609a      	str	r2, [r3, #8]
 800084a:	e7bf      	b.n	80007cc <HAL_ADC_Start+0x24>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800084c:	4a05      	ldr	r2, [pc, #20]	; (8000864 <HAL_ADC_Start+0xbc>)
 800084e:	4293      	cmp	r3, r2
 8000850:	d1bb      	bne.n	80007ca <HAL_ADC_Start+0x22>
 8000852:	e7f2      	b.n	800083a <HAL_ADC_Start+0x92>
  __HAL_LOCK(hadc);
 8000854:	2002      	movs	r0, #2
 8000856:	e7b9      	b.n	80007cc <HAL_ADC_Start+0x24>
 8000858:	000f4240 	.word	0x000f4240
 800085c:	20000008 	.word	0x20000008
 8000860:	40012300 	.word	0x40012300
 8000864:	40012000 	.word	0x40012000

08000868 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 8000868:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800086c:	2b01      	cmp	r3, #1
 800086e:	d017      	beq.n	80008a0 <HAL_ADC_Stop+0x38>
 8000870:	2301      	movs	r3, #1
 8000872:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_ADC_DISABLE(hadc);
 8000876:	6803      	ldr	r3, [r0, #0]
 8000878:	689a      	ldr	r2, [r3, #8]
 800087a:	f022 0201 	bic.w	r2, r2, #1
 800087e:	609a      	str	r2, [r3, #8]
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8000880:	689b      	ldr	r3, [r3, #8]
 8000882:	07db      	lsls	r3, r3, #31
 8000884:	d407      	bmi.n	8000896 <HAL_ADC_Stop+0x2e>
    ADC_STATE_CLR_SET(hadc->State,
 8000886:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000888:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800088c:	f023 0301 	bic.w	r3, r3, #1
 8000890:	f043 0301 	orr.w	r3, r3, #1
 8000894:	6403      	str	r3, [r0, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8000896:	2300      	movs	r3, #0
 8000898:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 800089c:	4618      	mov	r0, r3
 800089e:	4770      	bx	lr
  __HAL_LOCK(hadc);
 80008a0:	2002      	movs	r0, #2
}
 80008a2:	4770      	bx	lr

080008a4 <HAL_ADC_PollForConversion>:
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80008a4:	6803      	ldr	r3, [r0, #0]
 80008a6:	689a      	ldr	r2, [r3, #8]
{
 80008a8:	b570      	push	{r4, r5, r6, lr}
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80008aa:	0556      	lsls	r6, r2, #21
{
 80008ac:	4604      	mov	r4, r0
 80008ae:	460d      	mov	r5, r1
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80008b0:	d50b      	bpl.n	80008ca <HAL_ADC_PollForConversion+0x26>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80008b2:	689b      	ldr	r3, [r3, #8]
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80008b4:	05d8      	lsls	r0, r3, #23
 80008b6:	d508      	bpl.n	80008ca <HAL_ADC_PollForConversion+0x26>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80008b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80008ba:	f043 0320 	orr.w	r3, r3, #32
 80008be:	6423      	str	r3, [r4, #64]	; 0x40
    __HAL_UNLOCK(hadc);
 80008c0:	2300      	movs	r3, #0
 80008c2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_ERROR;
 80008c6:	2001      	movs	r0, #1
 80008c8:	bd70      	pop	{r4, r5, r6, pc}
  tickstart = HAL_GetTick();
 80008ca:	f7ff fec3 	bl	8000654 <HAL_GetTick>
 80008ce:	4606      	mov	r6, r0
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80008d0:	6823      	ldr	r3, [r4, #0]
 80008d2:	681a      	ldr	r2, [r3, #0]
 80008d4:	0792      	lsls	r2, r2, #30
 80008d6:	d50c      	bpl.n	80008f2 <HAL_ADC_PollForConversion+0x4e>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80008d8:	f06f 0212 	mvn.w	r2, #18
 80008dc:	601a      	str	r2, [r3, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80008de:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80008e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80008e4:	6422      	str	r2, [r4, #64]	; 0x40
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80008e6:	689a      	ldr	r2, [r3, #8]
 80008e8:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80008ec:	d013      	beq.n	8000916 <HAL_ADC_PollForConversion+0x72>
  return HAL_OK;
 80008ee:	2000      	movs	r0, #0
 80008f0:	bd70      	pop	{r4, r5, r6, pc}
    if(Timeout != HAL_MAX_DELAY)
 80008f2:	1c69      	adds	r1, r5, #1
 80008f4:	d0ed      	beq.n	80008d2 <HAL_ADC_PollForConversion+0x2e>
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80008f6:	b945      	cbnz	r5, 800090a <HAL_ADC_PollForConversion+0x66>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80008f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80008fa:	f043 0304 	orr.w	r3, r3, #4
 80008fe:	6423      	str	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hadc);
 8000900:	2300      	movs	r3, #0
 8000902:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_TIMEOUT;
 8000906:	2003      	movs	r0, #3
 8000908:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800090a:	f7ff fea3 	bl	8000654 <HAL_GetTick>
 800090e:	1b80      	subs	r0, r0, r6
 8000910:	4285      	cmp	r5, r0
 8000912:	d2dd      	bcs.n	80008d0 <HAL_ADC_PollForConversion+0x2c>
 8000914:	e7f0      	b.n	80008f8 <HAL_ADC_PollForConversion+0x54>
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000916:	69a2      	ldr	r2, [r4, #24]
 8000918:	2a00      	cmp	r2, #0
 800091a:	d1e8      	bne.n	80008ee <HAL_ADC_PollForConversion+0x4a>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800091c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800091e:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 8000922:	d002      	beq.n	800092a <HAL_ADC_PollForConversion+0x86>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000924:	689b      	ldr	r3, [r3, #8]
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000926:	055b      	lsls	r3, r3, #21
 8000928:	d4e1      	bmi.n	80008ee <HAL_ADC_PollForConversion+0x4a>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800092a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800092c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000930:	6423      	str	r3, [r4, #64]	; 0x40
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000932:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8000934:	f410 5080 	ands.w	r0, r0, #4096	; 0x1000
 8000938:	d1d9      	bne.n	80008ee <HAL_ADC_PollForConversion+0x4a>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800093a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800093c:	f043 0301 	orr.w	r3, r3, #1
 8000940:	6423      	str	r3, [r4, #64]	; 0x40
}
 8000942:	bd70      	pop	{r4, r5, r6, pc}

08000944 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 8000944:	6803      	ldr	r3, [r0, #0]
 8000946:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 8000948:	4770      	bx	lr
	...

0800094c <HAL_ADC_ConfigChannel>:
{
 800094c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 800094e:	2300      	movs	r3, #0
 8000950:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8000952:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8000956:	2b01      	cmp	r3, #1
 8000958:	d06a      	beq.n	8000a30 <HAL_ADC_ConfigChannel+0xe4>
  if (sConfig->Channel > ADC_CHANNEL_9)
 800095a:	680d      	ldr	r5, [r1, #0]
 800095c:	6804      	ldr	r4, [r0, #0]
 800095e:	688a      	ldr	r2, [r1, #8]
  __HAL_LOCK(hadc);
 8000960:	2301      	movs	r3, #1
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000962:	2d09      	cmp	r5, #9
  __HAL_LOCK(hadc);
 8000964:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 8000968:	b2ae      	uxth	r6, r5
  if (sConfig->Channel > ADC_CHANNEL_9)
 800096a:	d92a      	bls.n	80009c2 <HAL_ADC_ConfigChannel+0x76>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800096c:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8000970:	68e7      	ldr	r7, [r4, #12]
 8000972:	3b1e      	subs	r3, #30
 8000974:	f04f 0e07 	mov.w	lr, #7
 8000978:	fa0e fe03 	lsl.w	lr, lr, r3
 800097c:	ea27 070e 	bic.w	r7, r7, lr
 8000980:	60e7      	str	r7, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000982:	68e7      	ldr	r7, [r4, #12]
 8000984:	fa02 f303 	lsl.w	r3, r2, r3
 8000988:	433b      	orrs	r3, r7
 800098a:	60e3      	str	r3, [r4, #12]
  if (sConfig->Rank < 7U)
 800098c:	684a      	ldr	r2, [r1, #4]
 800098e:	2a06      	cmp	r2, #6
 8000990:	ea4f 0382 	mov.w	r3, r2, lsl #2
 8000994:	d825      	bhi.n	80009e2 <HAL_ADC_ConfigChannel+0x96>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000996:	4413      	add	r3, r2
 8000998:	6b67      	ldr	r7, [r4, #52]	; 0x34
 800099a:	1f59      	subs	r1, r3, #5
 800099c:	231f      	movs	r3, #31
 800099e:	408b      	lsls	r3, r1
 80009a0:	ea27 0303 	bic.w	r3, r7, r3
 80009a4:	6363      	str	r3, [r4, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80009a6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80009a8:	fa06 f101 	lsl.w	r1, r6, r1
 80009ac:	4311      	orrs	r1, r2
 80009ae:	6361      	str	r1, [r4, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80009b0:	4b2d      	ldr	r3, [pc, #180]	; (8000a68 <HAL_ADC_ConfigChannel+0x11c>)
 80009b2:	429c      	cmp	r4, r3
 80009b4:	d034      	beq.n	8000a20 <HAL_ADC_ConfigChannel+0xd4>
  __HAL_UNLOCK(hadc);
 80009b6:	2300      	movs	r3, #0
 80009b8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80009bc:	4618      	mov	r0, r3
}
 80009be:	b003      	add	sp, #12
 80009c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80009c2:	6927      	ldr	r7, [r4, #16]
 80009c4:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 80009c8:	f04f 0e07 	mov.w	lr, #7
 80009cc:	fa0e fe03 	lsl.w	lr, lr, r3
 80009d0:	ea27 070e 	bic.w	r7, r7, lr
 80009d4:	6127      	str	r7, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80009d6:	6927      	ldr	r7, [r4, #16]
 80009d8:	fa02 f303 	lsl.w	r3, r2, r3
 80009dc:	433b      	orrs	r3, r7
 80009de:	6123      	str	r3, [r4, #16]
 80009e0:	e7d4      	b.n	800098c <HAL_ADC_ConfigChannel+0x40>
  else if (sConfig->Rank < 13U)
 80009e2:	2a0c      	cmp	r2, #12
 80009e4:	d80e      	bhi.n	8000a04 <HAL_ADC_ConfigChannel+0xb8>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80009e6:	4413      	add	r3, r2
 80009e8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80009ea:	f1a3 0223 	sub.w	r2, r3, #35	; 0x23
 80009ee:	231f      	movs	r3, #31
 80009f0:	4093      	lsls	r3, r2
 80009f2:	ea21 0303 	bic.w	r3, r1, r3
 80009f6:	6323      	str	r3, [r4, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80009f8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80009fa:	fa06 f202 	lsl.w	r2, r6, r2
 80009fe:	431a      	orrs	r2, r3
 8000a00:	6322      	str	r2, [r4, #48]	; 0x30
 8000a02:	e7d5      	b.n	80009b0 <HAL_ADC_ConfigChannel+0x64>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000a04:	4413      	add	r3, r2
 8000a06:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000a08:	3b41      	subs	r3, #65	; 0x41
 8000a0a:	221f      	movs	r2, #31
 8000a0c:	409a      	lsls	r2, r3
 8000a0e:	ea21 0202 	bic.w	r2, r1, r2
 8000a12:	62e2      	str	r2, [r4, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000a14:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000a16:	fa06 f103 	lsl.w	r1, r6, r3
 8000a1a:	4311      	orrs	r1, r2
 8000a1c:	62e1      	str	r1, [r4, #44]	; 0x2c
 8000a1e:	e7c7      	b.n	80009b0 <HAL_ADC_ConfigChannel+0x64>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000a20:	2d12      	cmp	r5, #18
 8000a22:	d107      	bne.n	8000a34 <HAL_ADC_ConfigChannel+0xe8>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8000a24:	4a11      	ldr	r2, [pc, #68]	; (8000a6c <HAL_ADC_ConfigChannel+0x120>)
 8000a26:	6853      	ldr	r3, [r2, #4]
 8000a28:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a2c:	6053      	str	r3, [r2, #4]
 8000a2e:	e7c2      	b.n	80009b6 <HAL_ADC_ConfigChannel+0x6a>
  __HAL_LOCK(hadc);
 8000a30:	2002      	movs	r0, #2
 8000a32:	e7c4      	b.n	80009be <HAL_ADC_ConfigChannel+0x72>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000a34:	4b0e      	ldr	r3, [pc, #56]	; (8000a70 <HAL_ADC_ConfigChannel+0x124>)
 8000a36:	429d      	cmp	r5, r3
 8000a38:	d001      	beq.n	8000a3e <HAL_ADC_ConfigChannel+0xf2>
 8000a3a:	2d11      	cmp	r5, #17
 8000a3c:	d1bb      	bne.n	80009b6 <HAL_ADC_ConfigChannel+0x6a>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000a3e:	490b      	ldr	r1, [pc, #44]	; (8000a6c <HAL_ADC_ConfigChannel+0x120>)
 8000a40:	684a      	ldr	r2, [r1, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000a42:	429d      	cmp	r5, r3
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000a44:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000a48:	604a      	str	r2, [r1, #4]
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000a4a:	d1b4      	bne.n	80009b6 <HAL_ADC_ConfigChannel+0x6a>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000a4c:	4b09      	ldr	r3, [pc, #36]	; (8000a74 <HAL_ADC_ConfigChannel+0x128>)
 8000a4e:	4a0a      	ldr	r2, [pc, #40]	; (8000a78 <HAL_ADC_ConfigChannel+0x12c>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	fbb3 f2f2 	udiv	r2, r3, r2
 8000a56:	230a      	movs	r3, #10
 8000a58:	4353      	muls	r3, r2
        counter--;
 8000a5a:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8000a5c:	9b01      	ldr	r3, [sp, #4]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d0a9      	beq.n	80009b6 <HAL_ADC_ConfigChannel+0x6a>
        counter--;
 8000a62:	9b01      	ldr	r3, [sp, #4]
 8000a64:	3b01      	subs	r3, #1
 8000a66:	e7f8      	b.n	8000a5a <HAL_ADC_ConfigChannel+0x10e>
 8000a68:	40012000 	.word	0x40012000
 8000a6c:	40012300 	.word	0x40012300
 8000a70:	10000012 	.word	0x10000012
 8000a74:	20000008 	.word	0x20000008
 8000a78:	000f4240 	.word	0x000f4240

08000a7c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a7c:	4a07      	ldr	r2, [pc, #28]	; (8000a9c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000a7e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a80:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000a84:	041b      	lsls	r3, r3, #16
 8000a86:	0c1b      	lsrs	r3, r3, #16
 8000a88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000a8c:	0200      	lsls	r0, r0, #8
 8000a8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a92:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000a96:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000a98:	60d3      	str	r3, [r2, #12]
 8000a9a:	4770      	bx	lr
 8000a9c:	e000ed00 	.word	0xe000ed00

08000aa0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000aa0:	4b17      	ldr	r3, [pc, #92]	; (8000b00 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000aa2:	b530      	push	{r4, r5, lr}
 8000aa4:	68dc      	ldr	r4, [r3, #12]
 8000aa6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000aaa:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aae:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ab0:	2b04      	cmp	r3, #4
 8000ab2:	bf28      	it	cs
 8000ab4:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ab6:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ab8:	f04f 0501 	mov.w	r5, #1
 8000abc:	fa05 f303 	lsl.w	r3, r5, r3
 8000ac0:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ac4:	bf8c      	ite	hi
 8000ac6:	3c03      	subhi	r4, #3
 8000ac8:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aca:	4019      	ands	r1, r3
 8000acc:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ace:	fa05 f404 	lsl.w	r4, r5, r4
 8000ad2:	3c01      	subs	r4, #1
 8000ad4:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000ad6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ad8:	ea42 0201 	orr.w	r2, r2, r1
 8000adc:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ae0:	bfaf      	iteee	ge
 8000ae2:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ae6:	f000 000f 	andlt.w	r0, r0, #15
 8000aea:	4b06      	ldrlt	r3, [pc, #24]	; (8000b04 <HAL_NVIC_SetPriority+0x64>)
 8000aec:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aee:	bfa5      	ittet	ge
 8000af0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000af4:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000af6:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000af8:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000afc:	bd30      	pop	{r4, r5, pc}
 8000afe:	bf00      	nop
 8000b00:	e000ed00 	.word	0xe000ed00
 8000b04:	e000ed14 	.word	0xe000ed14

08000b08 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b08:	3801      	subs	r0, #1
 8000b0a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b0e:	d20a      	bcs.n	8000b26 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b10:	4b06      	ldr	r3, [pc, #24]	; (8000b2c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b12:	4a07      	ldr	r2, [pc, #28]	; (8000b30 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b14:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b16:	21f0      	movs	r1, #240	; 0xf0
 8000b18:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b1c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b1e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b20:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b22:	601a      	str	r2, [r3, #0]
 8000b24:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000b26:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	e000e010 	.word	0xe000e010
 8000b30:	e000ed00 	.word	0xe000ed00

08000b34 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000b34:	4b04      	ldr	r3, [pc, #16]	; (8000b48 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000b36:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000b38:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000b3a:	bf0c      	ite	eq
 8000b3c:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000b40:	f022 0204 	bicne.w	r2, r2, #4
 8000b44:	601a      	str	r2, [r3, #0]
 8000b46:	4770      	bx	lr
 8000b48:	e000e010 	.word	0xe000e010

08000b4c <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000b4c:	4770      	bx	lr

08000b4e <HAL_SYSTICK_IRQHandler>:
{
 8000b4e:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000b50:	f7ff fffc 	bl	8000b4c <HAL_SYSTICK_Callback>
 8000b54:	bd08      	pop	{r3, pc}
	...

08000b58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b5c:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b5e:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b60:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8000d04 <HAL_GPIO_Init+0x1ac>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b64:	4a65      	ldr	r2, [pc, #404]	; (8000cfc <HAL_GPIO_Init+0x1a4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000b66:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 8000d08 <HAL_GPIO_Init+0x1b0>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b6a:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b6c:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8000b6e:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b72:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8000b74:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b78:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8000b7c:	45b6      	cmp	lr, r6
 8000b7e:	f040 80aa 	bne.w	8000cd6 <HAL_GPIO_Init+0x17e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b82:	684c      	ldr	r4, [r1, #4]
 8000b84:	f024 0710 	bic.w	r7, r4, #16
 8000b88:	2f02      	cmp	r7, #2
 8000b8a:	d116      	bne.n	8000bba <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8000b8c:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000b90:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000b94:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000b98:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000b9c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000ba0:	f04f 0c0f 	mov.w	ip, #15
 8000ba4:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000ba8:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000bac:	690d      	ldr	r5, [r1, #16]
 8000bae:	fa05 f50b 	lsl.w	r5, r5, fp
 8000bb2:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 8000bb6:	f8ca 5020 	str.w	r5, [sl, #32]
 8000bba:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000bbe:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000bc0:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000bc4:	fa05 f50a 	lsl.w	r5, r5, sl
 8000bc8:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000bca:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000bce:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000bd2:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000bd6:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000bd8:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000bdc:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000bde:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000be2:	d811      	bhi.n	8000c08 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8000be4:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000be6:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000bea:	68cf      	ldr	r7, [r1, #12]
 8000bec:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000bf0:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8000bf4:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000bf6:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bf8:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000bfc:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000c00:	409f      	lsls	r7, r3
 8000c02:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000c06:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000c08:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c0a:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c0c:	688f      	ldr	r7, [r1, #8]
 8000c0e:	fa07 f70a 	lsl.w	r7, r7, sl
 8000c12:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000c14:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c16:	00e5      	lsls	r5, r4, #3
 8000c18:	d55d      	bpl.n	8000cd6 <HAL_GPIO_Init+0x17e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c1a:	f04f 0b00 	mov.w	fp, #0
 8000c1e:	f8cd b00c 	str.w	fp, [sp, #12]
 8000c22:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000c26:	4d36      	ldr	r5, [pc, #216]	; (8000d00 <HAL_GPIO_Init+0x1a8>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c28:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000c2c:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000c30:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000c34:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000c38:	9703      	str	r7, [sp, #12]
 8000c3a:	9f03      	ldr	r7, [sp, #12]
 8000c3c:	f023 0703 	bic.w	r7, r3, #3
 8000c40:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000c44:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000c48:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000c4c:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000c50:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000c54:	f04f 0e0f 	mov.w	lr, #15
 8000c58:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000c5c:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000c5e:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000c62:	d03f      	beq.n	8000ce4 <HAL_GPIO_Init+0x18c>
 8000c64:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000c68:	42a8      	cmp	r0, r5
 8000c6a:	d03d      	beq.n	8000ce8 <HAL_GPIO_Init+0x190>
 8000c6c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000c70:	42a8      	cmp	r0, r5
 8000c72:	d03b      	beq.n	8000cec <HAL_GPIO_Init+0x194>
 8000c74:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000c78:	42a8      	cmp	r0, r5
 8000c7a:	d039      	beq.n	8000cf0 <HAL_GPIO_Init+0x198>
 8000c7c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000c80:	42a8      	cmp	r0, r5
 8000c82:	d037      	beq.n	8000cf4 <HAL_GPIO_Init+0x19c>
 8000c84:	4548      	cmp	r0, r9
 8000c86:	d037      	beq.n	8000cf8 <HAL_GPIO_Init+0x1a0>
 8000c88:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000c8c:	42a8      	cmp	r0, r5
 8000c8e:	bf14      	ite	ne
 8000c90:	2507      	movne	r5, #7
 8000c92:	2506      	moveq	r5, #6
 8000c94:	fa05 f50c 	lsl.w	r5, r5, ip
 8000c98:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000c9c:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8000c9e:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000ca0:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ca2:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000ca6:	bf0c      	ite	eq
 8000ca8:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000caa:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8000cac:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8000cae:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000cb0:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000cb4:	bf0c      	ite	eq
 8000cb6:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000cb8:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8000cba:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000cbc:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000cbe:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000cc2:	bf0c      	ite	eq
 8000cc4:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000cc6:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8000cc8:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8000cca:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ccc:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000cce:	bf54      	ite	pl
 8000cd0:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8000cd2:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8000cd4:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	2b10      	cmp	r3, #16
 8000cda:	f47f af48 	bne.w	8000b6e <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000cde:	b005      	add	sp, #20
 8000ce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ce4:	465d      	mov	r5, fp
 8000ce6:	e7d5      	b.n	8000c94 <HAL_GPIO_Init+0x13c>
 8000ce8:	2501      	movs	r5, #1
 8000cea:	e7d3      	b.n	8000c94 <HAL_GPIO_Init+0x13c>
 8000cec:	2502      	movs	r5, #2
 8000cee:	e7d1      	b.n	8000c94 <HAL_GPIO_Init+0x13c>
 8000cf0:	2503      	movs	r5, #3
 8000cf2:	e7cf      	b.n	8000c94 <HAL_GPIO_Init+0x13c>
 8000cf4:	2504      	movs	r5, #4
 8000cf6:	e7cd      	b.n	8000c94 <HAL_GPIO_Init+0x13c>
 8000cf8:	2505      	movs	r5, #5
 8000cfa:	e7cb      	b.n	8000c94 <HAL_GPIO_Init+0x13c>
 8000cfc:	40013c00 	.word	0x40013c00
 8000d00:	40020000 	.word	0x40020000
 8000d04:	40023800 	.word	0x40023800
 8000d08:	40021400 	.word	0x40021400

08000d0c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d0c:	b10a      	cbz	r2, 8000d12 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000d0e:	6181      	str	r1, [r0, #24]
 8000d10:	4770      	bx	lr
 8000d12:	0409      	lsls	r1, r1, #16
 8000d14:	e7fb      	b.n	8000d0e <HAL_GPIO_WritePin+0x2>
	...

08000d18 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8000d18:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	9301      	str	r3, [sp, #4]
 8000d1e:	4b18      	ldr	r3, [pc, #96]	; (8000d80 <HAL_PWREx_EnableOverDrive+0x68>)
  __HAL_PWR_OVERDRIVE_ENABLE();

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000d20:	4c18      	ldr	r4, [pc, #96]	; (8000d84 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d22:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d24:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000d28:	641a      	str	r2, [r3, #64]	; 0x40
 8000d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d30:	9301      	str	r3, [sp, #4]
 8000d32:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000d34:	4b14      	ldr	r3, [pc, #80]	; (8000d88 <HAL_PWREx_EnableOverDrive+0x70>)
 8000d36:	2201      	movs	r2, #1
 8000d38:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8000d3a:	f7ff fc8b 	bl	8000654 <HAL_GetTick>
 8000d3e:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000d40:	6863      	ldr	r3, [r4, #4]
 8000d42:	03da      	lsls	r2, r3, #15
 8000d44:	d50b      	bpl.n	8000d5e <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000d46:	4b11      	ldr	r3, [pc, #68]	; (8000d8c <HAL_PWREx_EnableOverDrive+0x74>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000d48:	4c0e      	ldr	r4, [pc, #56]	; (8000d84 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8000d4e:	f7ff fc81 	bl	8000654 <HAL_GetTick>
 8000d52:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000d54:	6863      	ldr	r3, [r4, #4]
 8000d56:	039b      	lsls	r3, r3, #14
 8000d58:	d50a      	bpl.n	8000d70 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8000d5a:	2000      	movs	r0, #0
 8000d5c:	e006      	b.n	8000d6c <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000d5e:	f7ff fc79 	bl	8000654 <HAL_GetTick>
 8000d62:	1b40      	subs	r0, r0, r5
 8000d64:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000d68:	d9ea      	bls.n	8000d40 <HAL_PWREx_EnableOverDrive+0x28>
      return HAL_TIMEOUT;
 8000d6a:	2003      	movs	r0, #3
}
 8000d6c:	b003      	add	sp, #12
 8000d6e:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000d70:	f7ff fc70 	bl	8000654 <HAL_GetTick>
 8000d74:	1b40      	subs	r0, r0, r5
 8000d76:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000d7a:	d9eb      	bls.n	8000d54 <HAL_PWREx_EnableOverDrive+0x3c>
 8000d7c:	e7f5      	b.n	8000d6a <HAL_PWREx_EnableOverDrive+0x52>
 8000d7e:	bf00      	nop
 8000d80:	40023800 	.word	0x40023800
 8000d84:	40007000 	.word	0x40007000
 8000d88:	420e0040 	.word	0x420e0040
 8000d8c:	420e0044 	.word	0x420e0044

08000d90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000d90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d94:	460d      	mov	r5, r1
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000d96:	4604      	mov	r4, r0
 8000d98:	b910      	cbnz	r0, 8000da0 <HAL_RCC_ClockConfig+0x10>
  {
    return HAL_ERROR;
 8000d9a:	2001      	movs	r0, #1
 8000d9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000da0:	4b44      	ldr	r3, [pc, #272]	; (8000eb4 <HAL_RCC_ClockConfig+0x124>)
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	f002 020f 	and.w	r2, r2, #15
 8000da8:	428a      	cmp	r2, r1
 8000daa:	d328      	bcc.n	8000dfe <HAL_RCC_ClockConfig+0x6e>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000dac:	6821      	ldr	r1, [r4, #0]
 8000dae:	078f      	lsls	r7, r1, #30
 8000db0:	d42d      	bmi.n	8000e0e <HAL_RCC_ClockConfig+0x7e>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000db2:	07c8      	lsls	r0, r1, #31
 8000db4:	d440      	bmi.n	8000e38 <HAL_RCC_ClockConfig+0xa8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000db6:	4b3f      	ldr	r3, [pc, #252]	; (8000eb4 <HAL_RCC_ClockConfig+0x124>)
 8000db8:	681a      	ldr	r2, [r3, #0]
 8000dba:	f002 020f 	and.w	r2, r2, #15
 8000dbe:	4295      	cmp	r5, r2
 8000dc0:	d366      	bcc.n	8000e90 <HAL_RCC_ClockConfig+0x100>
      return HAL_ERROR;
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000dc2:	6822      	ldr	r2, [r4, #0]
 8000dc4:	0751      	lsls	r1, r2, #29
 8000dc6:	d46c      	bmi.n	8000ea2 <HAL_RCC_ClockConfig+0x112>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000dc8:	0713      	lsls	r3, r2, #28
 8000dca:	d507      	bpl.n	8000ddc <HAL_RCC_ClockConfig+0x4c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000dcc:	4a3a      	ldr	r2, [pc, #232]	; (8000eb8 <HAL_RCC_ClockConfig+0x128>)
 8000dce:	6921      	ldr	r1, [r4, #16]
 8000dd0:	6893      	ldr	r3, [r2, #8]
 8000dd2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000dd6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000dda:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000ddc:	f000 f898 	bl	8000f10 <HAL_RCC_GetSysClockFreq>
 8000de0:	4b35      	ldr	r3, [pc, #212]	; (8000eb8 <HAL_RCC_ClockConfig+0x128>)
 8000de2:	4a36      	ldr	r2, [pc, #216]	; (8000ebc <HAL_RCC_ClockConfig+0x12c>)
 8000de4:	689b      	ldr	r3, [r3, #8]
 8000de6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000dea:	5cd3      	ldrb	r3, [r2, r3]
 8000dec:	40d8      	lsrs	r0, r3
 8000dee:	4b34      	ldr	r3, [pc, #208]	; (8000ec0 <HAL_RCC_ClockConfig+0x130>)
 8000df0:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8000df2:	2000      	movs	r0, #0
 8000df4:	f7ff fbe4 	bl	80005c0 <HAL_InitTick>

  return HAL_OK;
 8000df8:	2000      	movs	r0, #0
 8000dfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000dfe:	b2ca      	uxtb	r2, r1
 8000e00:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f003 030f 	and.w	r3, r3, #15
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	d1c6      	bne.n	8000d9a <HAL_RCC_ClockConfig+0xa>
 8000e0c:	e7ce      	b.n	8000dac <HAL_RCC_ClockConfig+0x1c>
 8000e0e:	4b2a      	ldr	r3, [pc, #168]	; (8000eb8 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000e10:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000e14:	bf1e      	ittt	ne
 8000e16:	689a      	ldrne	r2, [r3, #8]
 8000e18:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8000e1c:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000e1e:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000e20:	bf42      	ittt	mi
 8000e22:	689a      	ldrmi	r2, [r3, #8]
 8000e24:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8000e28:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000e2a:	689a      	ldr	r2, [r3, #8]
 8000e2c:	68a0      	ldr	r0, [r4, #8]
 8000e2e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000e32:	4302      	orrs	r2, r0
 8000e34:	609a      	str	r2, [r3, #8]
 8000e36:	e7bc      	b.n	8000db2 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e38:	6862      	ldr	r2, [r4, #4]
 8000e3a:	4b1f      	ldr	r3, [pc, #124]	; (8000eb8 <HAL_RCC_ClockConfig+0x128>)
 8000e3c:	2a01      	cmp	r2, #1
 8000e3e:	d11d      	bne.n	8000e7c <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e46:	d0a8      	beq.n	8000d9a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000e48:	4e1b      	ldr	r6, [pc, #108]	; (8000eb8 <HAL_RCC_ClockConfig+0x128>)
 8000e4a:	68b3      	ldr	r3, [r6, #8]
 8000e4c:	f023 0303 	bic.w	r3, r3, #3
 8000e50:	4313      	orrs	r3, r2
 8000e52:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000e54:	f7ff fbfe 	bl	8000654 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e58:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000e5c:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000e5e:	68b3      	ldr	r3, [r6, #8]
 8000e60:	6862      	ldr	r2, [r4, #4]
 8000e62:	f003 030c 	and.w	r3, r3, #12
 8000e66:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000e6a:	d0a4      	beq.n	8000db6 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e6c:	f7ff fbf2 	bl	8000654 <HAL_GetTick>
 8000e70:	1bc0      	subs	r0, r0, r7
 8000e72:	4540      	cmp	r0, r8
 8000e74:	d9f3      	bls.n	8000e5e <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8000e76:	2003      	movs	r0, #3
}
 8000e78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000e7c:	1e91      	subs	r1, r2, #2
 8000e7e:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e80:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000e82:	d802      	bhi.n	8000e8a <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e84:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000e88:	e7dd      	b.n	8000e46 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e8a:	f013 0f02 	tst.w	r3, #2
 8000e8e:	e7da      	b.n	8000e46 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e90:	b2ea      	uxtb	r2, r5
 8000e92:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f003 030f 	and.w	r3, r3, #15
 8000e9a:	429d      	cmp	r5, r3
 8000e9c:	f47f af7d 	bne.w	8000d9a <HAL_RCC_ClockConfig+0xa>
 8000ea0:	e78f      	b.n	8000dc2 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000ea2:	4905      	ldr	r1, [pc, #20]	; (8000eb8 <HAL_RCC_ClockConfig+0x128>)
 8000ea4:	68e0      	ldr	r0, [r4, #12]
 8000ea6:	688b      	ldr	r3, [r1, #8]
 8000ea8:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000eac:	4303      	orrs	r3, r0
 8000eae:	608b      	str	r3, [r1, #8]
 8000eb0:	e78a      	b.n	8000dc8 <HAL_RCC_ClockConfig+0x38>
 8000eb2:	bf00      	nop
 8000eb4:	40023c00 	.word	0x40023c00
 8000eb8:	40023800 	.word	0x40023800
 8000ebc:	080029a7 	.word	0x080029a7
 8000ec0:	20000008 	.word	0x20000008

08000ec4 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8000ec4:	4b01      	ldr	r3, [pc, #4]	; (8000ecc <HAL_RCC_GetHCLKFreq+0x8>)
 8000ec6:	6818      	ldr	r0, [r3, #0]
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	20000008 	.word	0x20000008

08000ed0 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000ed0:	4b04      	ldr	r3, [pc, #16]	; (8000ee4 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000ed2:	4a05      	ldr	r2, [pc, #20]	; (8000ee8 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000ed4:	689b      	ldr	r3, [r3, #8]
 8000ed6:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8000eda:	5cd3      	ldrb	r3, [r2, r3]
 8000edc:	4a03      	ldr	r2, [pc, #12]	; (8000eec <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000ede:	6810      	ldr	r0, [r2, #0]
}
 8000ee0:	40d8      	lsrs	r0, r3
 8000ee2:	4770      	bx	lr
 8000ee4:	40023800 	.word	0x40023800
 8000ee8:	080029b7 	.word	0x080029b7
 8000eec:	20000008 	.word	0x20000008

08000ef0 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000ef0:	4b04      	ldr	r3, [pc, #16]	; (8000f04 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000ef2:	4a05      	ldr	r2, [pc, #20]	; (8000f08 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000ef4:	689b      	ldr	r3, [r3, #8]
 8000ef6:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8000efa:	5cd3      	ldrb	r3, [r2, r3]
 8000efc:	4a03      	ldr	r2, [pc, #12]	; (8000f0c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000efe:	6810      	ldr	r0, [r2, #0]
}
 8000f00:	40d8      	lsrs	r0, r3
 8000f02:	4770      	bx	lr
 8000f04:	40023800 	.word	0x40023800
 8000f08:	080029b7 	.word	0x080029b7
 8000f0c:	20000008 	.word	0x20000008

08000f10 <HAL_RCC_GetSysClockFreq>:
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000f10:	4920      	ldr	r1, [pc, #128]	; (8000f94 <HAL_RCC_GetSysClockFreq+0x84>)
{
 8000f12:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000f14:	688b      	ldr	r3, [r1, #8]
 8000f16:	f003 030c 	and.w	r3, r3, #12
 8000f1a:	2b08      	cmp	r3, #8
 8000f1c:	d007      	beq.n	8000f2e <HAL_RCC_GetSysClockFreq+0x1e>
 8000f1e:	2b0c      	cmp	r3, #12
 8000f20:	d020      	beq.n	8000f64 <HAL_RCC_GetSysClockFreq+0x54>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000f22:	4a1d      	ldr	r2, [pc, #116]	; (8000f98 <HAL_RCC_GetSysClockFreq+0x88>)
 8000f24:	481d      	ldr	r0, [pc, #116]	; (8000f9c <HAL_RCC_GetSysClockFreq+0x8c>)
 8000f26:	2b04      	cmp	r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	4610      	movne	r0, r2
 8000f2c:	bd08      	pop	{r3, pc}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000f2e:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000f30:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000f32:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000f34:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000f38:	bf14      	ite	ne
 8000f3a:	4818      	ldrne	r0, [pc, #96]	; (8000f9c <HAL_RCC_GetSysClockFreq+0x8c>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000f3c:	4816      	ldreq	r0, [pc, #88]	; (8000f98 <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000f3e:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000f42:	bf18      	it	ne
 8000f44:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000f46:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000f4a:	fba1 0100 	umull	r0, r1, r1, r0
 8000f4e:	f7ff f9af 	bl	80002b0 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000f52:	4b10      	ldr	r3, [pc, #64]	; (8000f94 <HAL_RCC_GetSysClockFreq+0x84>)
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	005b      	lsls	r3, r3, #1
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);

      sysclockfreq = pllvco/pllr;
 8000f5e:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000f62:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000f64:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000f66:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000f68:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000f6a:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000f6e:	bf14      	ite	ne
 8000f70:	480a      	ldrne	r0, [pc, #40]	; (8000f9c <HAL_RCC_GetSysClockFreq+0x8c>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000f72:	4809      	ldreq	r0, [pc, #36]	; (8000f98 <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000f74:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000f78:	bf18      	it	ne
 8000f7a:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000f7c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000f80:	fba1 0100 	umull	r0, r1, r1, r0
 8000f84:	f7ff f994 	bl	80002b0 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8000f88:	4b02      	ldr	r3, [pc, #8]	; (8000f94 <HAL_RCC_GetSysClockFreq+0x84>)
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f3c3 7302 	ubfx	r3, r3, #28, #3
 8000f90:	e7e5      	b.n	8000f5e <HAL_RCC_GetSysClockFreq+0x4e>
 8000f92:	bf00      	nop
 8000f94:	40023800 	.word	0x40023800
 8000f98:	00f42400 	.word	0x00f42400
 8000f9c:	007a1200 	.word	0x007a1200

08000fa0 <HAL_RCC_OscConfig>:
  uint32_t tickstart = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fa0:	6803      	ldr	r3, [r0, #0]
{
 8000fa2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fa6:	07df      	lsls	r7, r3, #31
{
 8000fa8:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000faa:	d410      	bmi.n	8000fce <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fac:	6823      	ldr	r3, [r4, #0]
 8000fae:	079e      	lsls	r6, r3, #30
 8000fb0:	d467      	bmi.n	8001082 <HAL_RCC_OscConfig+0xe2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fb2:	6823      	ldr	r3, [r4, #0]
 8000fb4:	071a      	lsls	r2, r3, #28
 8000fb6:	f100 80b2 	bmi.w	800111e <HAL_RCC_OscConfig+0x17e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000fba:	6823      	ldr	r3, [r4, #0]
 8000fbc:	075b      	lsls	r3, r3, #29
 8000fbe:	f100 80d0 	bmi.w	8001162 <HAL_RCC_OscConfig+0x1c2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000fc2:	69a2      	ldr	r2, [r4, #24]
 8000fc4:	2a00      	cmp	r2, #0
 8000fc6:	f040 8139 	bne.w	800123c <HAL_RCC_OscConfig+0x29c>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8000fca:	2000      	movs	r0, #0
 8000fcc:	e01e      	b.n	800100c <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8000fce:	4b97      	ldr	r3, [pc, #604]	; (800122c <HAL_RCC_OscConfig+0x28c>)
 8000fd0:	689a      	ldr	r2, [r3, #8]
 8000fd2:	f002 020c 	and.w	r2, r2, #12
 8000fd6:	2a04      	cmp	r2, #4
 8000fd8:	d010      	beq.n	8000ffc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8000fda:	689a      	ldr	r2, [r3, #8]
 8000fdc:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8000fe0:	2a08      	cmp	r2, #8
 8000fe2:	d102      	bne.n	8000fea <HAL_RCC_OscConfig+0x4a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	025d      	lsls	r5, r3, #9
 8000fe8:	d408      	bmi.n	8000ffc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000fea:	4b90      	ldr	r3, [pc, #576]	; (800122c <HAL_RCC_OscConfig+0x28c>)
 8000fec:	689a      	ldr	r2, [r3, #8]
 8000fee:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8000ff2:	2a0c      	cmp	r2, #12
 8000ff4:	d10d      	bne.n	8001012 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000ff6:	685a      	ldr	r2, [r3, #4]
 8000ff8:	0250      	lsls	r0, r2, #9
 8000ffa:	d50a      	bpl.n	8001012 <HAL_RCC_OscConfig+0x72>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ffc:	4b8b      	ldr	r3, [pc, #556]	; (800122c <HAL_RCC_OscConfig+0x28c>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	0399      	lsls	r1, r3, #14
 8001002:	d5d3      	bpl.n	8000fac <HAL_RCC_OscConfig+0xc>
 8001004:	6863      	ldr	r3, [r4, #4]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d1d0      	bne.n	8000fac <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 800100a:	2001      	movs	r0, #1
}
 800100c:	b002      	add	sp, #8
 800100e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001012:	6862      	ldr	r2, [r4, #4]
 8001014:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8001018:	d111      	bne.n	800103e <HAL_RCC_OscConfig+0x9e>
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001020:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001022:	f7ff fb17 	bl	8000654 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001026:	4d81      	ldr	r5, [pc, #516]	; (800122c <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8001028:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800102a:	682b      	ldr	r3, [r5, #0]
 800102c:	039a      	lsls	r2, r3, #14
 800102e:	d4bd      	bmi.n	8000fac <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001030:	f7ff fb10 	bl	8000654 <HAL_GetTick>
 8001034:	1b80      	subs	r0, r0, r6
 8001036:	2864      	cmp	r0, #100	; 0x64
 8001038:	d9f7      	bls.n	800102a <HAL_RCC_OscConfig+0x8a>
            return HAL_TIMEOUT;
 800103a:	2003      	movs	r0, #3
 800103c:	e7e6      	b.n	800100c <HAL_RCC_OscConfig+0x6c>
 800103e:	4d7b      	ldr	r5, [pc, #492]	; (800122c <HAL_RCC_OscConfig+0x28c>)
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001040:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8001044:	682b      	ldr	r3, [r5, #0]
 8001046:	d107      	bne.n	8001058 <HAL_RCC_OscConfig+0xb8>
 8001048:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800104c:	602b      	str	r3, [r5, #0]
 800104e:	682b      	ldr	r3, [r5, #0]
 8001050:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001054:	602b      	str	r3, [r5, #0]
 8001056:	e7e4      	b.n	8001022 <HAL_RCC_OscConfig+0x82>
 8001058:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800105c:	602b      	str	r3, [r5, #0]
 800105e:	682b      	ldr	r3, [r5, #0]
 8001060:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001064:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001066:	2a00      	cmp	r2, #0
 8001068:	d1db      	bne.n	8001022 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 800106a:	f7ff faf3 	bl	8000654 <HAL_GetTick>
 800106e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001070:	682b      	ldr	r3, [r5, #0]
 8001072:	039b      	lsls	r3, r3, #14
 8001074:	d59a      	bpl.n	8000fac <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001076:	f7ff faed 	bl	8000654 <HAL_GetTick>
 800107a:	1b80      	subs	r0, r0, r6
 800107c:	2864      	cmp	r0, #100	; 0x64
 800107e:	d9f7      	bls.n	8001070 <HAL_RCC_OscConfig+0xd0>
 8001080:	e7db      	b.n	800103a <HAL_RCC_OscConfig+0x9a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001082:	4b6a      	ldr	r3, [pc, #424]	; (800122c <HAL_RCC_OscConfig+0x28c>)
 8001084:	689a      	ldr	r2, [r3, #8]
 8001086:	f012 0f0c 	tst.w	r2, #12
 800108a:	d010      	beq.n	80010ae <HAL_RCC_OscConfig+0x10e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800108c:	689a      	ldr	r2, [r3, #8]
 800108e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001092:	2a08      	cmp	r2, #8
 8001094:	d102      	bne.n	800109c <HAL_RCC_OscConfig+0xfc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	025f      	lsls	r7, r3, #9
 800109a:	d508      	bpl.n	80010ae <HAL_RCC_OscConfig+0x10e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800109c:	4a63      	ldr	r2, [pc, #396]	; (800122c <HAL_RCC_OscConfig+0x28c>)
 800109e:	6893      	ldr	r3, [r2, #8]
 80010a0:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80010a4:	2b0c      	cmp	r3, #12
 80010a6:	d111      	bne.n	80010cc <HAL_RCC_OscConfig+0x12c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80010a8:	6853      	ldr	r3, [r2, #4]
 80010aa:	025e      	lsls	r6, r3, #9
 80010ac:	d40e      	bmi.n	80010cc <HAL_RCC_OscConfig+0x12c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010ae:	4b5f      	ldr	r3, [pc, #380]	; (800122c <HAL_RCC_OscConfig+0x28c>)
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	0795      	lsls	r5, r2, #30
 80010b4:	d502      	bpl.n	80010bc <HAL_RCC_OscConfig+0x11c>
 80010b6:	68e2      	ldr	r2, [r4, #12]
 80010b8:	2a01      	cmp	r2, #1
 80010ba:	d1a6      	bne.n	800100a <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	6921      	ldr	r1, [r4, #16]
 80010c0:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80010c4:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80010c8:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010ca:	e772      	b.n	8000fb2 <HAL_RCC_OscConfig+0x12>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80010cc:	68e2      	ldr	r2, [r4, #12]
 80010ce:	4b58      	ldr	r3, [pc, #352]	; (8001230 <HAL_RCC_OscConfig+0x290>)
 80010d0:	b1b2      	cbz	r2, 8001100 <HAL_RCC_OscConfig+0x160>
        __HAL_RCC_HSI_ENABLE();
 80010d2:	2201      	movs	r2, #1
 80010d4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80010d6:	f7ff fabd 	bl	8000654 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010da:	4d54      	ldr	r5, [pc, #336]	; (800122c <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 80010dc:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010de:	682b      	ldr	r3, [r5, #0]
 80010e0:	0798      	lsls	r0, r3, #30
 80010e2:	d507      	bpl.n	80010f4 <HAL_RCC_OscConfig+0x154>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010e4:	682b      	ldr	r3, [r5, #0]
 80010e6:	6922      	ldr	r2, [r4, #16]
 80010e8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80010ec:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80010f0:	602b      	str	r3, [r5, #0]
 80010f2:	e75e      	b.n	8000fb2 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010f4:	f7ff faae 	bl	8000654 <HAL_GetTick>
 80010f8:	1b80      	subs	r0, r0, r6
 80010fa:	2802      	cmp	r0, #2
 80010fc:	d9ef      	bls.n	80010de <HAL_RCC_OscConfig+0x13e>
 80010fe:	e79c      	b.n	800103a <HAL_RCC_OscConfig+0x9a>
        __HAL_RCC_HSI_DISABLE();
 8001100:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001102:	f7ff faa7 	bl	8000654 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001106:	4d49      	ldr	r5, [pc, #292]	; (800122c <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8001108:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800110a:	682b      	ldr	r3, [r5, #0]
 800110c:	0799      	lsls	r1, r3, #30
 800110e:	f57f af50 	bpl.w	8000fb2 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001112:	f7ff fa9f 	bl	8000654 <HAL_GetTick>
 8001116:	1b80      	subs	r0, r0, r6
 8001118:	2802      	cmp	r0, #2
 800111a:	d9f6      	bls.n	800110a <HAL_RCC_OscConfig+0x16a>
 800111c:	e78d      	b.n	800103a <HAL_RCC_OscConfig+0x9a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800111e:	6962      	ldr	r2, [r4, #20]
 8001120:	4b44      	ldr	r3, [pc, #272]	; (8001234 <HAL_RCC_OscConfig+0x294>)
 8001122:	b17a      	cbz	r2, 8001144 <HAL_RCC_OscConfig+0x1a4>
      __HAL_RCC_LSI_ENABLE();
 8001124:	2201      	movs	r2, #1
 8001126:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001128:	f7ff fa94 	bl	8000654 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800112c:	4d3f      	ldr	r5, [pc, #252]	; (800122c <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 800112e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001130:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001132:	079f      	lsls	r7, r3, #30
 8001134:	f53f af41 	bmi.w	8000fba <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001138:	f7ff fa8c 	bl	8000654 <HAL_GetTick>
 800113c:	1b80      	subs	r0, r0, r6
 800113e:	2802      	cmp	r0, #2
 8001140:	d9f6      	bls.n	8001130 <HAL_RCC_OscConfig+0x190>
 8001142:	e77a      	b.n	800103a <HAL_RCC_OscConfig+0x9a>
      __HAL_RCC_LSI_DISABLE();
 8001144:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001146:	f7ff fa85 	bl	8000654 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800114a:	4d38      	ldr	r5, [pc, #224]	; (800122c <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 800114c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800114e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001150:	0798      	lsls	r0, r3, #30
 8001152:	f57f af32 	bpl.w	8000fba <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001156:	f7ff fa7d 	bl	8000654 <HAL_GetTick>
 800115a:	1b80      	subs	r0, r0, r6
 800115c:	2802      	cmp	r0, #2
 800115e:	d9f6      	bls.n	800114e <HAL_RCC_OscConfig+0x1ae>
 8001160:	e76b      	b.n	800103a <HAL_RCC_OscConfig+0x9a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001162:	4b32      	ldr	r3, [pc, #200]	; (800122c <HAL_RCC_OscConfig+0x28c>)
 8001164:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001166:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 800116a:	d128      	bne.n	80011be <HAL_RCC_OscConfig+0x21e>
      __HAL_RCC_PWR_CLK_ENABLE();
 800116c:	9201      	str	r2, [sp, #4]
 800116e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001170:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001174:	641a      	str	r2, [r3, #64]	; 0x40
 8001176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001178:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800117c:	9301      	str	r3, [sp, #4]
 800117e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001180:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001182:	4d2d      	ldr	r5, [pc, #180]	; (8001238 <HAL_RCC_OscConfig+0x298>)
 8001184:	682b      	ldr	r3, [r5, #0]
 8001186:	05d9      	lsls	r1, r3, #23
 8001188:	d51b      	bpl.n	80011c2 <HAL_RCC_OscConfig+0x222>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800118a:	68a3      	ldr	r3, [r4, #8]
 800118c:	4d27      	ldr	r5, [pc, #156]	; (800122c <HAL_RCC_OscConfig+0x28c>)
 800118e:	2b01      	cmp	r3, #1
 8001190:	d127      	bne.n	80011e2 <HAL_RCC_OscConfig+0x242>
 8001192:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001194:	f043 0301 	orr.w	r3, r3, #1
 8001198:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800119a:	f7ff fa5b 	bl	8000654 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800119e:	4d23      	ldr	r5, [pc, #140]	; (800122c <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 80011a0:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80011a2:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011a6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80011a8:	079b      	lsls	r3, r3, #30
 80011aa:	d539      	bpl.n	8001220 <HAL_RCC_OscConfig+0x280>
    if(pwrclkchanged == SET)
 80011ac:	2e00      	cmp	r6, #0
 80011ae:	f43f af08 	beq.w	8000fc2 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 80011b2:	4a1e      	ldr	r2, [pc, #120]	; (800122c <HAL_RCC_OscConfig+0x28c>)
 80011b4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80011b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80011ba:	6413      	str	r3, [r2, #64]	; 0x40
 80011bc:	e701      	b.n	8000fc2 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 80011be:	2600      	movs	r6, #0
 80011c0:	e7df      	b.n	8001182 <HAL_RCC_OscConfig+0x1e2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011c2:	682b      	ldr	r3, [r5, #0]
 80011c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011c8:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80011ca:	f7ff fa43 	bl	8000654 <HAL_GetTick>
 80011ce:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011d0:	682b      	ldr	r3, [r5, #0]
 80011d2:	05da      	lsls	r2, r3, #23
 80011d4:	d4d9      	bmi.n	800118a <HAL_RCC_OscConfig+0x1ea>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011d6:	f7ff fa3d 	bl	8000654 <HAL_GetTick>
 80011da:	1bc0      	subs	r0, r0, r7
 80011dc:	2802      	cmp	r0, #2
 80011de:	d9f7      	bls.n	80011d0 <HAL_RCC_OscConfig+0x230>
 80011e0:	e72b      	b.n	800103a <HAL_RCC_OscConfig+0x9a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011e2:	2b05      	cmp	r3, #5
 80011e4:	d104      	bne.n	80011f0 <HAL_RCC_OscConfig+0x250>
 80011e6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80011e8:	f043 0304 	orr.w	r3, r3, #4
 80011ec:	672b      	str	r3, [r5, #112]	; 0x70
 80011ee:	e7d0      	b.n	8001192 <HAL_RCC_OscConfig+0x1f2>
 80011f0:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80011f2:	f022 0201 	bic.w	r2, r2, #1
 80011f6:	672a      	str	r2, [r5, #112]	; 0x70
 80011f8:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80011fa:	f022 0204 	bic.w	r2, r2, #4
 80011fe:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001200:	2b00      	cmp	r3, #0
 8001202:	d1ca      	bne.n	800119a <HAL_RCC_OscConfig+0x1fa>
      tickstart = HAL_GetTick();
 8001204:	f7ff fa26 	bl	8000654 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001208:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800120c:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800120e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001210:	0798      	lsls	r0, r3, #30
 8001212:	d5cb      	bpl.n	80011ac <HAL_RCC_OscConfig+0x20c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001214:	f7ff fa1e 	bl	8000654 <HAL_GetTick>
 8001218:	1bc0      	subs	r0, r0, r7
 800121a:	4540      	cmp	r0, r8
 800121c:	d9f7      	bls.n	800120e <HAL_RCC_OscConfig+0x26e>
 800121e:	e70c      	b.n	800103a <HAL_RCC_OscConfig+0x9a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001220:	f7ff fa18 	bl	8000654 <HAL_GetTick>
 8001224:	1bc0      	subs	r0, r0, r7
 8001226:	4540      	cmp	r0, r8
 8001228:	d9bd      	bls.n	80011a6 <HAL_RCC_OscConfig+0x206>
 800122a:	e706      	b.n	800103a <HAL_RCC_OscConfig+0x9a>
 800122c:	40023800 	.word	0x40023800
 8001230:	42470000 	.word	0x42470000
 8001234:	42470e80 	.word	0x42470e80
 8001238:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800123c:	4d23      	ldr	r5, [pc, #140]	; (80012cc <HAL_RCC_OscConfig+0x32c>)
 800123e:	68ab      	ldr	r3, [r5, #8]
 8001240:	f003 030c 	and.w	r3, r3, #12
 8001244:	2b08      	cmp	r3, #8
 8001246:	f43f aee0 	beq.w	800100a <HAL_RCC_OscConfig+0x6a>
 800124a:	4e21      	ldr	r6, [pc, #132]	; (80012d0 <HAL_RCC_OscConfig+0x330>)
 800124c:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800124e:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001250:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001252:	d12d      	bne.n	80012b0 <HAL_RCC_OscConfig+0x310>
        tickstart = HAL_GetTick();
 8001254:	f7ff f9fe 	bl	8000654 <HAL_GetTick>
 8001258:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800125a:	682b      	ldr	r3, [r5, #0]
 800125c:	0199      	lsls	r1, r3, #6
 800125e:	d421      	bmi.n	80012a4 <HAL_RCC_OscConfig+0x304>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001260:	6a22      	ldr	r2, [r4, #32]
 8001262:	69e3      	ldr	r3, [r4, #28]
 8001264:	4313      	orrs	r3, r2
 8001266:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001268:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800126c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800126e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001272:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001274:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001278:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800127a:	4c14      	ldr	r4, [pc, #80]	; (80012cc <HAL_RCC_OscConfig+0x32c>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800127c:	0852      	lsrs	r2, r2, #1
 800127e:	3a01      	subs	r2, #1
 8001280:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001284:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001286:	2301      	movs	r3, #1
 8001288:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800128a:	f7ff f9e3 	bl	8000654 <HAL_GetTick>
 800128e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001290:	6823      	ldr	r3, [r4, #0]
 8001292:	019a      	lsls	r2, r3, #6
 8001294:	f53f ae99 	bmi.w	8000fca <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001298:	f7ff f9dc 	bl	8000654 <HAL_GetTick>
 800129c:	1b40      	subs	r0, r0, r5
 800129e:	2802      	cmp	r0, #2
 80012a0:	d9f6      	bls.n	8001290 <HAL_RCC_OscConfig+0x2f0>
 80012a2:	e6ca      	b.n	800103a <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012a4:	f7ff f9d6 	bl	8000654 <HAL_GetTick>
 80012a8:	1bc0      	subs	r0, r0, r7
 80012aa:	2802      	cmp	r0, #2
 80012ac:	d9d5      	bls.n	800125a <HAL_RCC_OscConfig+0x2ba>
 80012ae:	e6c4      	b.n	800103a <HAL_RCC_OscConfig+0x9a>
        tickstart = HAL_GetTick();
 80012b0:	f7ff f9d0 	bl	8000654 <HAL_GetTick>
 80012b4:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012b6:	682b      	ldr	r3, [r5, #0]
 80012b8:	019b      	lsls	r3, r3, #6
 80012ba:	f57f ae86 	bpl.w	8000fca <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012be:	f7ff f9c9 	bl	8000654 <HAL_GetTick>
 80012c2:	1b00      	subs	r0, r0, r4
 80012c4:	2802      	cmp	r0, #2
 80012c6:	d9f6      	bls.n	80012b6 <HAL_RCC_OscConfig+0x316>
 80012c8:	e6b7      	b.n	800103a <HAL_RCC_OscConfig+0x9a>
 80012ca:	bf00      	nop
 80012cc:	40023800 	.word	0x40023800
 80012d0:	42470060 	.word	0x42470060

080012d4 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80012d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 80012d8:	6806      	ldr	r6, [r0, #0]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 80012da:	68c2      	ldr	r2, [r0, #12]
  tmpreg = huart->Instance->CR2;
 80012dc:	6933      	ldr	r3, [r6, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80012de:	69c1      	ldr	r1, [r0, #28]
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80012e0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 80012e4:	4313      	orrs	r3, r2
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 80012e6:	6133      	str	r3, [r6, #16]
{
 80012e8:	4604      	mov	r4, r0
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80012ea:	6883      	ldr	r3, [r0, #8]
 80012ec:	6900      	ldr	r0, [r0, #16]
  tmpreg = huart->Instance->CR1;
 80012ee:	68f2      	ldr	r2, [r6, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80012f0:	4303      	orrs	r3, r0
 80012f2:	6960      	ldr	r0, [r4, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 80012f4:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80012f8:	4303      	orrs	r3, r0
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 80012fa:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80012fe:	430b      	orrs	r3, r1
 8001300:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8001302:	60f3      	str	r3, [r6, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8001304:	6973      	ldr	r3, [r6, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8001306:	69a2      	ldr	r2, [r4, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8001308:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 800130c:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800130e:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8001312:	6173      	str	r3, [r6, #20]
 8001314:	4b7a      	ldr	r3, [pc, #488]	; (8001500 <UART_SetConfig+0x22c>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001316:	d17c      	bne.n	8001412 <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001318:	429e      	cmp	r6, r3
 800131a:	d003      	beq.n	8001324 <UART_SetConfig+0x50>
 800131c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001320:	429e      	cmp	r6, r3
 8001322:	d144      	bne.n	80013ae <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001324:	f7ff fde4 	bl	8000ef0 <HAL_RCC_GetPCLK2Freq>
 8001328:	2519      	movs	r5, #25
 800132a:	fb05 f300 	mul.w	r3, r5, r0
 800132e:	6860      	ldr	r0, [r4, #4]
 8001330:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001334:	0040      	lsls	r0, r0, #1
 8001336:	fbb3 f3f0 	udiv	r3, r3, r0
 800133a:	fbb3 f3f9 	udiv	r3, r3, r9
 800133e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001342:	f7ff fdd5 	bl	8000ef0 <HAL_RCC_GetPCLK2Freq>
 8001346:	6863      	ldr	r3, [r4, #4]
 8001348:	4368      	muls	r0, r5
 800134a:	005b      	lsls	r3, r3, #1
 800134c:	fbb0 f7f3 	udiv	r7, r0, r3
 8001350:	f7ff fdce 	bl	8000ef0 <HAL_RCC_GetPCLK2Freq>
 8001354:	6863      	ldr	r3, [r4, #4]
 8001356:	4368      	muls	r0, r5
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	fbb0 f3f3 	udiv	r3, r0, r3
 800135e:	fbb3 f3f9 	udiv	r3, r3, r9
 8001362:	fb09 7313 	mls	r3, r9, r3, r7
 8001366:	00db      	lsls	r3, r3, #3
 8001368:	3332      	adds	r3, #50	; 0x32
 800136a:	fbb3 f3f9 	udiv	r3, r3, r9
 800136e:	005b      	lsls	r3, r3, #1
 8001370:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8001374:	f7ff fdbc 	bl	8000ef0 <HAL_RCC_GetPCLK2Freq>
 8001378:	6862      	ldr	r2, [r4, #4]
 800137a:	4368      	muls	r0, r5
 800137c:	0052      	lsls	r2, r2, #1
 800137e:	fbb0 faf2 	udiv	sl, r0, r2
 8001382:	f7ff fdb5 	bl	8000ef0 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001386:	6863      	ldr	r3, [r4, #4]
 8001388:	4368      	muls	r0, r5
 800138a:	005b      	lsls	r3, r3, #1
 800138c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001390:	fbb3 f3f9 	udiv	r3, r3, r9
 8001394:	fb09 a313 	mls	r3, r9, r3, sl
 8001398:	00db      	lsls	r3, r3, #3
 800139a:	3332      	adds	r3, #50	; 0x32
 800139c:	fbb3 f3f9 	udiv	r3, r3, r9
 80013a0:	f003 0307 	and.w	r3, r3, #7
 80013a4:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80013a6:	443b      	add	r3, r7
 80013a8:	60b3      	str	r3, [r6, #8]
 80013aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80013ae:	f7ff fd8f 	bl	8000ed0 <HAL_RCC_GetPCLK1Freq>
 80013b2:	2519      	movs	r5, #25
 80013b4:	fb05 f300 	mul.w	r3, r5, r0
 80013b8:	6860      	ldr	r0, [r4, #4]
 80013ba:	f04f 0964 	mov.w	r9, #100	; 0x64
 80013be:	0040      	lsls	r0, r0, #1
 80013c0:	fbb3 f3f0 	udiv	r3, r3, r0
 80013c4:	fbb3 f3f9 	udiv	r3, r3, r9
 80013c8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80013cc:	f7ff fd80 	bl	8000ed0 <HAL_RCC_GetPCLK1Freq>
 80013d0:	6863      	ldr	r3, [r4, #4]
 80013d2:	4368      	muls	r0, r5
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	fbb0 f7f3 	udiv	r7, r0, r3
 80013da:	f7ff fd79 	bl	8000ed0 <HAL_RCC_GetPCLK1Freq>
 80013de:	6863      	ldr	r3, [r4, #4]
 80013e0:	4368      	muls	r0, r5
 80013e2:	005b      	lsls	r3, r3, #1
 80013e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80013e8:	fbb3 f3f9 	udiv	r3, r3, r9
 80013ec:	fb09 7313 	mls	r3, r9, r3, r7
 80013f0:	00db      	lsls	r3, r3, #3
 80013f2:	3332      	adds	r3, #50	; 0x32
 80013f4:	fbb3 f3f9 	udiv	r3, r3, r9
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 80013fe:	f7ff fd67 	bl	8000ed0 <HAL_RCC_GetPCLK1Freq>
 8001402:	6862      	ldr	r2, [r4, #4]
 8001404:	4368      	muls	r0, r5
 8001406:	0052      	lsls	r2, r2, #1
 8001408:	fbb0 faf2 	udiv	sl, r0, r2
 800140c:	f7ff fd60 	bl	8000ed0 <HAL_RCC_GetPCLK1Freq>
 8001410:	e7b9      	b.n	8001386 <UART_SetConfig+0xb2>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001412:	429e      	cmp	r6, r3
 8001414:	d002      	beq.n	800141c <UART_SetConfig+0x148>
 8001416:	4b3b      	ldr	r3, [pc, #236]	; (8001504 <UART_SetConfig+0x230>)
 8001418:	429e      	cmp	r6, r3
 800141a:	d140      	bne.n	800149e <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800141c:	f7ff fd68 	bl	8000ef0 <HAL_RCC_GetPCLK2Freq>
 8001420:	6867      	ldr	r7, [r4, #4]
 8001422:	2519      	movs	r5, #25
 8001424:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001428:	fb05 f300 	mul.w	r3, r5, r0
 800142c:	00bf      	lsls	r7, r7, #2
 800142e:	fbb3 f3f7 	udiv	r3, r3, r7
 8001432:	fbb3 f3f9 	udiv	r3, r3, r9
 8001436:	011f      	lsls	r7, r3, #4
 8001438:	f7ff fd5a 	bl	8000ef0 <HAL_RCC_GetPCLK2Freq>
 800143c:	6863      	ldr	r3, [r4, #4]
 800143e:	4368      	muls	r0, r5
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	fbb0 f8f3 	udiv	r8, r0, r3
 8001446:	f7ff fd53 	bl	8000ef0 <HAL_RCC_GetPCLK2Freq>
 800144a:	6863      	ldr	r3, [r4, #4]
 800144c:	4368      	muls	r0, r5
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	fbb0 f3f3 	udiv	r3, r0, r3
 8001454:	fbb3 f3f9 	udiv	r3, r3, r9
 8001458:	fb09 8313 	mls	r3, r9, r3, r8
 800145c:	011b      	lsls	r3, r3, #4
 800145e:	3332      	adds	r3, #50	; 0x32
 8001460:	fbb3 f3f9 	udiv	r3, r3, r9
 8001464:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8001468:	f7ff fd42 	bl	8000ef0 <HAL_RCC_GetPCLK2Freq>
 800146c:	6862      	ldr	r2, [r4, #4]
 800146e:	4368      	muls	r0, r5
 8001470:	0092      	lsls	r2, r2, #2
 8001472:	fbb0 faf2 	udiv	sl, r0, r2
 8001476:	f7ff fd3b 	bl	8000ef0 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800147a:	6863      	ldr	r3, [r4, #4]
 800147c:	4368      	muls	r0, r5
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	fbb0 f3f3 	udiv	r3, r0, r3
 8001484:	fbb3 f3f9 	udiv	r3, r3, r9
 8001488:	fb09 a313 	mls	r3, r9, r3, sl
 800148c:	011b      	lsls	r3, r3, #4
 800148e:	3332      	adds	r3, #50	; 0x32
 8001490:	fbb3 f3f9 	udiv	r3, r3, r9
 8001494:	f003 030f 	and.w	r3, r3, #15
 8001498:	ea43 0308 	orr.w	r3, r3, r8
 800149c:	e783      	b.n	80013a6 <UART_SetConfig+0xd2>
 800149e:	f7ff fd17 	bl	8000ed0 <HAL_RCC_GetPCLK1Freq>
 80014a2:	6867      	ldr	r7, [r4, #4]
 80014a4:	2519      	movs	r5, #25
 80014a6:	f04f 0964 	mov.w	r9, #100	; 0x64
 80014aa:	fb05 f300 	mul.w	r3, r5, r0
 80014ae:	00bf      	lsls	r7, r7, #2
 80014b0:	fbb3 f3f7 	udiv	r3, r3, r7
 80014b4:	fbb3 f3f9 	udiv	r3, r3, r9
 80014b8:	011f      	lsls	r7, r3, #4
 80014ba:	f7ff fd09 	bl	8000ed0 <HAL_RCC_GetPCLK1Freq>
 80014be:	6863      	ldr	r3, [r4, #4]
 80014c0:	4368      	muls	r0, r5
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	fbb0 f8f3 	udiv	r8, r0, r3
 80014c8:	f7ff fd02 	bl	8000ed0 <HAL_RCC_GetPCLK1Freq>
 80014cc:	6863      	ldr	r3, [r4, #4]
 80014ce:	4368      	muls	r0, r5
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80014d6:	fbb3 f3f9 	udiv	r3, r3, r9
 80014da:	fb09 8313 	mls	r3, r9, r3, r8
 80014de:	011b      	lsls	r3, r3, #4
 80014e0:	3332      	adds	r3, #50	; 0x32
 80014e2:	fbb3 f3f9 	udiv	r3, r3, r9
 80014e6:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 80014ea:	f7ff fcf1 	bl	8000ed0 <HAL_RCC_GetPCLK1Freq>
 80014ee:	6862      	ldr	r2, [r4, #4]
 80014f0:	4368      	muls	r0, r5
 80014f2:	0092      	lsls	r2, r2, #2
 80014f4:	fbb0 faf2 	udiv	sl, r0, r2
 80014f8:	f7ff fcea 	bl	8000ed0 <HAL_RCC_GetPCLK1Freq>
 80014fc:	e7bd      	b.n	800147a <UART_SetConfig+0x1a6>
 80014fe:	bf00      	nop
 8001500:	40011000 	.word	0x40011000
 8001504:	40011400 	.word	0x40011400

08001508 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8001508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800150a:	4604      	mov	r4, r0
 800150c:	460e      	mov	r6, r1
 800150e:	4617      	mov	r7, r2
 8001510:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8001512:	6821      	ldr	r1, [r4, #0]
 8001514:	680b      	ldr	r3, [r1, #0]
 8001516:	ea36 0303 	bics.w	r3, r6, r3
 800151a:	d101      	bne.n	8001520 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 800151c:	2000      	movs	r0, #0
}
 800151e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001520:	1c6b      	adds	r3, r5, #1
 8001522:	d0f7      	beq.n	8001514 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001524:	b995      	cbnz	r5, 800154c <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001526:	6823      	ldr	r3, [r4, #0]
 8001528:	68da      	ldr	r2, [r3, #12]
 800152a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800152e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001530:	695a      	ldr	r2, [r3, #20]
 8001532:	f022 0201 	bic.w	r2, r2, #1
 8001536:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8001538:	2320      	movs	r3, #32
 800153a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800153e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8001542:	2300      	movs	r3, #0
 8001544:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8001548:	2003      	movs	r0, #3
 800154a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800154c:	f7ff f882 	bl	8000654 <HAL_GetTick>
 8001550:	1bc0      	subs	r0, r0, r7
 8001552:	4285      	cmp	r5, r0
 8001554:	d2dd      	bcs.n	8001512 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8001556:	e7e6      	b.n	8001526 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08001558 <HAL_UART_Init>:
{
 8001558:	b510      	push	{r4, lr}
  if(huart == NULL)
 800155a:	4604      	mov	r4, r0
 800155c:	b340      	cbz	r0, 80015b0 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 800155e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001562:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001566:	b91b      	cbnz	r3, 8001570 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001568:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 800156c:	f000 fa1e 	bl	80019ac <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001570:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001572:	2324      	movs	r3, #36	; 0x24
 8001574:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001578:	68d3      	ldr	r3, [r2, #12]
 800157a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800157e:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8001580:	4620      	mov	r0, r4
 8001582:	f7ff fea7 	bl	80012d4 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001586:	6823      	ldr	r3, [r4, #0]
 8001588:	691a      	ldr	r2, [r3, #16]
 800158a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800158e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001590:	695a      	ldr	r2, [r3, #20]
 8001592:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001596:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001598:	68da      	ldr	r2, [r3, #12]
 800159a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800159e:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80015a0:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 80015a2:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80015a4:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80015a6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80015aa:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 80015ae:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80015b0:	2001      	movs	r0, #1
}
 80015b2:	bd10      	pop	{r4, pc}

080015b4 <HAL_UART_Transmit>:
{
 80015b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80015b8:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY) 
 80015ba:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80015be:	2b20      	cmp	r3, #32
{
 80015c0:	4604      	mov	r4, r0
 80015c2:	460d      	mov	r5, r1
 80015c4:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY) 
 80015c6:	d14f      	bne.n	8001668 <HAL_UART_Transmit+0xb4>
    if((pData == NULL ) || (Size == 0)) 
 80015c8:	2900      	cmp	r1, #0
 80015ca:	d04a      	beq.n	8001662 <HAL_UART_Transmit+0xae>
 80015cc:	2a00      	cmp	r2, #0
 80015ce:	d048      	beq.n	8001662 <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 80015d0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d047      	beq.n	8001668 <HAL_UART_Transmit+0xb4>
 80015d8:	2301      	movs	r3, #1
 80015da:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80015de:	2300      	movs	r3, #0
 80015e0:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80015e2:	2321      	movs	r3, #33	; 0x21
 80015e4:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 80015e8:	f7ff f834 	bl	8000654 <HAL_GetTick>
    huart->TxXferSize = Size;
 80015ec:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 80015f0:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 80015f2:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 80015f6:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80015f8:	b29b      	uxth	r3, r3
 80015fa:	b96b      	cbnz	r3, 8001618 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80015fc:	463b      	mov	r3, r7
 80015fe:	4632      	mov	r2, r6
 8001600:	2140      	movs	r1, #64	; 0x40
 8001602:	4620      	mov	r0, r4
 8001604:	f7ff ff80 	bl	8001508 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001608:	b9b0      	cbnz	r0, 8001638 <HAL_UART_Transmit+0x84>
      huart->gState = HAL_UART_STATE_READY;
 800160a:	2320      	movs	r3, #32
 800160c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8001610:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 8001614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8001618:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800161a:	3b01      	subs	r3, #1
 800161c:	b29b      	uxth	r3, r3
 800161e:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001620:	68a3      	ldr	r3, [r4, #8]
 8001622:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001626:	4632      	mov	r2, r6
 8001628:	463b      	mov	r3, r7
 800162a:	f04f 0180 	mov.w	r1, #128	; 0x80
 800162e:	4620      	mov	r0, r4
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001630:	d10e      	bne.n	8001650 <HAL_UART_Transmit+0x9c>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001632:	f7ff ff69 	bl	8001508 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001636:	b110      	cbz	r0, 800163e <HAL_UART_Transmit+0x8a>
          return HAL_TIMEOUT;
 8001638:	2003      	movs	r0, #3
 800163a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800163e:	882b      	ldrh	r3, [r5, #0]
 8001640:	6822      	ldr	r2, [r4, #0]
 8001642:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001646:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001648:	6923      	ldr	r3, [r4, #16]
 800164a:	b943      	cbnz	r3, 800165e <HAL_UART_Transmit+0xaa>
          pData +=2U;
 800164c:	3502      	adds	r5, #2
 800164e:	e7d2      	b.n	80015f6 <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001650:	f7ff ff5a 	bl	8001508 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001654:	2800      	cmp	r0, #0
 8001656:	d1ef      	bne.n	8001638 <HAL_UART_Transmit+0x84>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001658:	6823      	ldr	r3, [r4, #0]
 800165a:	782a      	ldrb	r2, [r5, #0]
 800165c:	605a      	str	r2, [r3, #4]
 800165e:	3501      	adds	r5, #1
 8001660:	e7c9      	b.n	80015f6 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8001662:	2001      	movs	r0, #1
 8001664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8001668:	2002      	movs	r0, #2
}
 800166a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08001670 <_write>:
/* USER CODE END PFP */

/* USER CODE BEGIN 0 */
#ifdef __GNUC__
int _write(int file,uint8_t*ptr,int len)
{
 8001670:	b510      	push	{r4, lr}
	HAL_UART_Transmit(&huart2,ptr,len,1000);
 8001672:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
{
 8001676:	4614      	mov	r4, r2
	HAL_UART_Transmit(&huart2,ptr,len,1000);
 8001678:	4802      	ldr	r0, [pc, #8]	; (8001684 <_write+0x14>)
 800167a:	b292      	uxth	r2, r2
 800167c:	f7ff ff9a 	bl	80015b4 <HAL_UART_Transmit>
return len;
}
 8001680:	4620      	mov	r0, r4
 8001682:	bd10      	pop	{r4, pc}
 8001684:	200000e4 	.word	0x200000e4

08001688 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001688:	b530      	push	{r4, r5, lr}
 800168a:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 800168c:	4b2a      	ldr	r3, [pc, #168]	; (8001738 <SystemClock_Config+0xb0>)
 800168e:	2100      	movs	r1, #0
 8001690:	9100      	str	r1, [sp, #0]
 8001692:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001694:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001698:	641a      	str	r2, [r3, #64]	; 0x40
 800169a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016a0:	9300      	str	r3, [sp, #0]
 80016a2:	9b00      	ldr	r3, [sp, #0]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016a4:	4b25      	ldr	r3, [pc, #148]	; (800173c <SystemClock_Config+0xb4>)
 80016a6:	9101      	str	r1, [sp, #4]
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80016ae:	601a      	str	r2, [r3, #0]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80016b6:	9301      	str	r3, [sp, #4]
 80016b8:	9b01      	ldr	r3, [sp, #4]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016ba:	2301      	movs	r3, #1
 80016bc:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016c2:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016c4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016c8:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016ca:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80016cc:	2504      	movs	r5, #4
  RCC_OscInitStruct.PLL.PLLN = 180;
 80016ce:	23b4      	movs	r3, #180	; 0xb4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016d0:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016d2:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = 4;
 80016d4:	950f      	str	r5, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80016d6:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016d8:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80016da:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80016dc:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016de:	f7ff fc5f 	bl	8000fa0 <HAL_RCC_OscConfig>
 80016e2:	b100      	cbz	r0, 80016e6 <SystemClock_Config+0x5e>
 80016e4:	e7fe      	b.n	80016e4 <SystemClock_Config+0x5c>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Activate the Over-Drive mode 
    */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80016e6:	f7ff fb17 	bl	8000d18 <HAL_PWREx_EnableOverDrive>
 80016ea:	b100      	cbz	r0, 80016ee <SystemClock_Config+0x66>
 80016ec:	e7fe      	b.n	80016ec <SystemClock_Config+0x64>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016ee:	230f      	movs	r3, #15
 80016f0:	9302      	str	r3, [sp, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80016f2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016f6:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80016f8:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80016fa:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80016fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001700:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001702:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001704:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001706:	f7ff fb43 	bl	8000d90 <HAL_RCC_ClockConfig>
 800170a:	4604      	mov	r4, r0
 800170c:	b100      	cbz	r0, 8001710 <SystemClock_Config+0x88>
 800170e:	e7fe      	b.n	800170e <SystemClock_Config+0x86>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001710:	f7ff fbd8 	bl	8000ec4 <HAL_RCC_GetHCLKFreq>
 8001714:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001718:	fbb0 f0f3 	udiv	r0, r0, r3
 800171c:	f7ff f9f4 	bl	8000b08 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001720:	4628      	mov	r0, r5
 8001722:	f7ff fa07 	bl	8000b34 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001726:	4622      	mov	r2, r4
 8001728:	4621      	mov	r1, r4
 800172a:	f04f 30ff 	mov.w	r0, #4294967295
 800172e:	f7ff f9b7 	bl	8000aa0 <HAL_NVIC_SetPriority>
}
 8001732:	b015      	add	sp, #84	; 0x54
 8001734:	bd30      	pop	{r4, r5, pc}
 8001736:	bf00      	nop
 8001738:	40023800 	.word	0x40023800
 800173c:	40007000 	.word	0x40007000

08001740 <main>:
{
 8001740:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001744:	b08c      	sub	sp, #48	; 0x30
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001746:	2400      	movs	r4, #0
  HAL_Init();
 8001748:	f7fe ff5e 	bl	8000608 <HAL_Init>
  SystemClock_Config();
 800174c:	f7ff ff9c 	bl	8001688 <SystemClock_Config>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001750:	4b57      	ldr	r3, [pc, #348]	; (80018b0 <main+0x170>)
 8001752:	9403      	str	r4, [sp, #12]
 8001754:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001756:	4857      	ldr	r0, [pc, #348]	; (80018b4 <main+0x174>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001758:	f042 0204 	orr.w	r2, r2, #4
 800175c:	631a      	str	r2, [r3, #48]	; 0x30
 800175e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001760:	f002 0204 	and.w	r2, r2, #4
 8001764:	9203      	str	r2, [sp, #12]
 8001766:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001768:	9404      	str	r4, [sp, #16]
 800176a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800176c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001770:	631a      	str	r2, [r3, #48]	; 0x30
 8001772:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001774:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001778:	9204      	str	r2, [sp, #16]
 800177a:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800177c:	9405      	str	r4, [sp, #20]
 800177e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001780:	f042 0201 	orr.w	r2, r2, #1
 8001784:	631a      	str	r2, [r3, #48]	; 0x30
 8001786:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001788:	f002 0201 	and.w	r2, r2, #1
 800178c:	9205      	str	r2, [sp, #20]
 800178e:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001790:	9406      	str	r4, [sp, #24]
 8001792:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001794:	f042 0202 	orr.w	r2, r2, #2
 8001798:	631a      	str	r2, [r3, #48]	; 0x30
 800179a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179c:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80017a0:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017a2:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80017a4:	2120      	movs	r1, #32
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017a6:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80017a8:	f7ff fab0 	bl	8000d0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80017ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017b0:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80017b2:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80017b4:	4b40      	ldr	r3, [pc, #256]	; (80018b8 <main+0x178>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80017b6:	4841      	ldr	r0, [pc, #260]	; (80018bc <main+0x17c>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80017b8:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ba:	9409      	str	r4, [sp, #36]	; 0x24

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017bc:	2501      	movs	r5, #1
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80017be:	f7ff f9cb 	bl	8000b58 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD2_Pin;
 80017c2:	2320      	movs	r3, #32
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80017c4:	a907      	add	r1, sp, #28
 80017c6:	483b      	ldr	r0, [pc, #236]	; (80018b4 <main+0x174>)
  GPIO_InitStruct.Pin = LD2_Pin;
 80017c8:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ca:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017cc:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ce:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80017d0:	f7ff f9c2 	bl	8000b58 <HAL_GPIO_Init>
  huart2.Instance = USART2;
 80017d4:	483a      	ldr	r0, [pc, #232]	; (80018c0 <main+0x180>)
  huart2.Init.BaudRate = 115200;
 80017d6:	493b      	ldr	r1, [pc, #236]	; (80018c4 <main+0x184>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017d8:	6084      	str	r4, [r0, #8]
  huart2.Init.BaudRate = 115200;
 80017da:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80017de:	e880 000a 	stmia.w	r0, {r1, r3}
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017e2:	230c      	movs	r3, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017e4:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017e6:	6104      	str	r4, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017e8:	6143      	str	r3, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017ea:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017ec:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017ee:	f7ff feb3 	bl	8001558 <HAL_UART_Init>
 80017f2:	b100      	cbz	r0, 80017f6 <main+0xb6>
 80017f4:	e7fe      	b.n	80017f4 <main+0xb4>
  hadc1.Instance = ADC1;
 80017f6:	4c34      	ldr	r4, [pc, #208]	; (80018c8 <main+0x188>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80017f8:	4a34      	ldr	r2, [pc, #208]	; (80018cc <main+0x18c>)
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80017fa:	60a0      	str	r0, [r4, #8]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80017fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001800:	e884 000c 	stmia.w	r4, {r2, r3}
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001804:	6220      	str	r0, [r4, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001806:	62e0      	str	r0, [r4, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001808:	4b31      	ldr	r3, [pc, #196]	; (80018d0 <main+0x190>)
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800180a:	60e0      	str	r0, [r4, #12]
  hadc1.Init.NbrOfConversion = 3;
 800180c:	2603      	movs	r6, #3
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800180e:	6320      	str	r0, [r4, #48]	; 0x30
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001810:	4620      	mov	r0, r4
  hadc1.Init.ScanConvMode = ENABLE;
 8001812:	6125      	str	r5, [r4, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001814:	61a5      	str	r5, [r4, #24]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001816:	62a3      	str	r3, [r4, #40]	; 0x28
  hadc1.Init.NbrOfConversion = 3;
 8001818:	61e6      	str	r6, [r4, #28]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800181a:	6165      	str	r5, [r4, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800181c:	f7fe ff20 	bl	8000660 <HAL_ADC_Init>
 8001820:	b100      	cbz	r0, 8001824 <main+0xe4>
 8001822:	e7fe      	b.n	8001822 <main+0xe2>
  sConfig.Channel = ADC_CHANNEL_0;
 8001824:	9007      	str	r0, [sp, #28]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001826:	2307      	movs	r3, #7
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001828:	a907      	add	r1, sp, #28
 800182a:	4620      	mov	r0, r4
  sConfig.Rank = 1;
 800182c:	9508      	str	r5, [sp, #32]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800182e:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001830:	f7ff f88c 	bl	800094c <HAL_ADC_ConfigChannel>
 8001834:	b100      	cbz	r0, 8001838 <main+0xf8>
 8001836:	e7fe      	b.n	8001836 <main+0xf6>
  sConfig.Rank = 2;
 8001838:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800183a:	a907      	add	r1, sp, #28
 800183c:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_1;
 800183e:	9507      	str	r5, [sp, #28]
  sConfig.Rank = 2;
 8001840:	9308      	str	r3, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001842:	f7ff f883 	bl	800094c <HAL_ADC_ConfigChannel>
 8001846:	b100      	cbz	r0, 800184a <main+0x10a>
 8001848:	e7fe      	b.n	8001848 <main+0x108>
  sConfig.Channel = ADC_CHANNEL_4;
 800184a:	2304      	movs	r3, #4
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800184c:	a907      	add	r1, sp, #28
 800184e:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_4;
 8001850:	9307      	str	r3, [sp, #28]
  sConfig.Rank = 3;
 8001852:	9608      	str	r6, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001854:	f7ff f87a 	bl	800094c <HAL_ADC_ConfigChannel>
 8001858:	b100      	cbz	r0, 800185c <main+0x11c>
 800185a:	e7fe      	b.n	800185a <main+0x11a>
	  printf("data : %7lu,%7lu,%7lu : %7lu\r\n",value1,value2,value3,count++);
 800185c:	4f1d      	ldr	r7, [pc, #116]	; (80018d4 <main+0x194>)
  uint32_t value1,value2,value3,count=0;
 800185e:	4605      	mov	r5, r0
	  HAL_ADC_Start(&hadc1);
 8001860:	4620      	mov	r0, r4
 8001862:	f7fe ffa1 	bl	80007a8 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1,100);
 8001866:	2164      	movs	r1, #100	; 0x64
 8001868:	4620      	mov	r0, r4
 800186a:	f7ff f81b 	bl	80008a4 <HAL_ADC_PollForConversion>
	  value1 = HAL_ADC_GetValue(&hadc1);
 800186e:	4620      	mov	r0, r4
 8001870:	f7ff f868 	bl	8000944 <HAL_ADC_GetValue>
	  HAL_ADC_PollForConversion(&hadc1,100);
 8001874:	2164      	movs	r1, #100	; 0x64
	  value1 = HAL_ADC_GetValue(&hadc1);
 8001876:	4680      	mov	r8, r0
	  HAL_ADC_PollForConversion(&hadc1,100);
 8001878:	4620      	mov	r0, r4
 800187a:	f7ff f813 	bl	80008a4 <HAL_ADC_PollForConversion>
	  value2 = HAL_ADC_GetValue(&hadc1);
 800187e:	4620      	mov	r0, r4
 8001880:	f7ff f860 	bl	8000944 <HAL_ADC_GetValue>
	  HAL_ADC_PollForConversion(&hadc1,100);
 8001884:	2164      	movs	r1, #100	; 0x64
	  value2 = HAL_ADC_GetValue(&hadc1);
 8001886:	4681      	mov	r9, r0
	  HAL_ADC_PollForConversion(&hadc1,100);
 8001888:	4620      	mov	r0, r4
 800188a:	f7ff f80b 	bl	80008a4 <HAL_ADC_PollForConversion>
	  value3 = HAL_ADC_GetValue(&hadc1);
 800188e:	4620      	mov	r0, r4
 8001890:	f7ff f858 	bl	8000944 <HAL_ADC_GetValue>
 8001894:	4682      	mov	sl, r0
	  HAL_ADC_Stop(&hadc1);
 8001896:	4620      	mov	r0, r4
 8001898:	f7fe ffe6 	bl	8000868 <HAL_ADC_Stop>
	  printf("data : %7lu,%7lu,%7lu : %7lu\r\n",value1,value2,value3,count++);
 800189c:	1c6e      	adds	r6, r5, #1
 800189e:	9500      	str	r5, [sp, #0]
 80018a0:	4653      	mov	r3, sl
 80018a2:	464a      	mov	r2, r9
 80018a4:	4641      	mov	r1, r8
 80018a6:	4638      	mov	r0, r7
 80018a8:	f000 f92c 	bl	8001b04 <iprintf>
 80018ac:	4635      	mov	r5, r6
 80018ae:	e7d7      	b.n	8001860 <main+0x120>
 80018b0:	40023800 	.word	0x40023800
 80018b4:	40020000 	.word	0x40020000
 80018b8:	10210000 	.word	0x10210000
 80018bc:	40020800 	.word	0x40020800
 80018c0:	200000e4 	.word	0x200000e4
 80018c4:	40004400 	.word	0x40004400
 80018c8:	2000009c 	.word	0x2000009c
 80018cc:	40012000 	.word	0x40012000
 80018d0:	0f000001 	.word	0x0f000001
 80018d4:	08002988 	.word	0x08002988

080018d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018d8:	b513      	push	{r0, r1, r4, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018da:	4b22      	ldr	r3, [pc, #136]	; (8001964 <HAL_MspInit+0x8c>)
 80018dc:	2400      	movs	r4, #0
 80018de:	9400      	str	r4, [sp, #0]
 80018e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80018e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80018e6:	645a      	str	r2, [r3, #68]	; 0x44
 80018e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80018ea:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80018ee:	9200      	str	r2, [sp, #0]
 80018f0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018f2:	9401      	str	r4, [sp, #4]
 80018f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018f6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80018fa:	641a      	str	r2, [r3, #64]	; 0x40
 80018fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001902:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001904:	2007      	movs	r0, #7
  __HAL_RCC_PWR_CLK_ENABLE();
 8001906:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001908:	f7ff f8b8 	bl	8000a7c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800190c:	4622      	mov	r2, r4
 800190e:	4621      	mov	r1, r4
 8001910:	f06f 000b 	mvn.w	r0, #11
 8001914:	f7ff f8c4 	bl	8000aa0 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001918:	4622      	mov	r2, r4
 800191a:	4621      	mov	r1, r4
 800191c:	f06f 000a 	mvn.w	r0, #10
 8001920:	f7ff f8be 	bl	8000aa0 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8001924:	4622      	mov	r2, r4
 8001926:	4621      	mov	r1, r4
 8001928:	f06f 0009 	mvn.w	r0, #9
 800192c:	f7ff f8b8 	bl	8000aa0 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8001930:	4622      	mov	r2, r4
 8001932:	4621      	mov	r1, r4
 8001934:	f06f 0004 	mvn.w	r0, #4
 8001938:	f7ff f8b2 	bl	8000aa0 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800193c:	4622      	mov	r2, r4
 800193e:	4621      	mov	r1, r4
 8001940:	f06f 0003 	mvn.w	r0, #3
 8001944:	f7ff f8ac 	bl	8000aa0 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001948:	4622      	mov	r2, r4
 800194a:	4621      	mov	r1, r4
 800194c:	f06f 0001 	mvn.w	r0, #1
 8001950:	f7ff f8a6 	bl	8000aa0 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001954:	4622      	mov	r2, r4
 8001956:	4621      	mov	r1, r4
 8001958:	f04f 30ff 	mov.w	r0, #4294967295
 800195c:	f7ff f8a0 	bl	8000aa0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001960:	b002      	add	sp, #8
 8001962:	bd10      	pop	{r4, pc}
 8001964:	40023800 	.word	0x40023800

08001968 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001968:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 800196a:	6802      	ldr	r2, [r0, #0]
 800196c:	4b0d      	ldr	r3, [pc, #52]	; (80019a4 <HAL_ADC_MspInit+0x3c>)
 800196e:	429a      	cmp	r2, r3
 8001970:	d115      	bne.n	800199e <HAL_ADC_MspInit+0x36>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001972:	2100      	movs	r1, #0
 8001974:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8001978:	9100      	str	r1, [sp, #0]
 800197a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    PA4     ------> ADC1_IN4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800197c:	480a      	ldr	r0, [pc, #40]	; (80019a8 <HAL_ADC_MspInit+0x40>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 800197e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001982:	645a      	str	r2, [r3, #68]	; 0x44
 8001984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001986:	9103      	str	r1, [sp, #12]
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001988:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800198c:	9300      	str	r3, [sp, #0]
 800198e:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 8001990:	2313      	movs	r3, #19
 8001992:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001994:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001996:	2303      	movs	r3, #3
 8001998:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800199a:	f7ff f8dd 	bl	8000b58 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800199e:	b007      	add	sp, #28
 80019a0:	f85d fb04 	ldr.w	pc, [sp], #4
 80019a4:	40012000 	.word	0x40012000
 80019a8:	40020000 	.word	0x40020000

080019ac <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019ac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 80019ae:	6802      	ldr	r2, [r0, #0]
 80019b0:	4b0f      	ldr	r3, [pc, #60]	; (80019f0 <HAL_UART_MspInit+0x44>)
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d119      	bne.n	80019ea <HAL_UART_MspInit+0x3e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80019b6:	2300      	movs	r3, #0
 80019b8:	9300      	str	r3, [sp, #0]
 80019ba:	4b0e      	ldr	r3, [pc, #56]	; (80019f4 <HAL_UART_MspInit+0x48>)
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019bc:	480e      	ldr	r0, [pc, #56]	; (80019f8 <HAL_UART_MspInit+0x4c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80019be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019c0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80019c4:	641a      	str	r2, [r3, #64]	; 0x40
 80019c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019cc:	9300      	str	r3, [sp, #0]
 80019ce:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80019d0:	230c      	movs	r3, #12
 80019d2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d4:	2302      	movs	r3, #2
 80019d6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019d8:	2301      	movs	r3, #1
 80019da:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019dc:	2303      	movs	r3, #3
 80019de:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019e0:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019e2:	2307      	movs	r3, #7
 80019e4:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019e6:	f7ff f8b7 	bl	8000b58 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80019ea:	b007      	add	sp, #28
 80019ec:	f85d fb04 	ldr.w	pc, [sp], #4
 80019f0:	40004400 	.word	0x40004400
 80019f4:	40023800 	.word	0x40023800
 80019f8:	40020000 	.word	0x40020000

080019fc <NMI_Handler>:
 80019fc:	4770      	bx	lr

080019fe <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80019fe:	e7fe      	b.n	80019fe <HardFault_Handler>

08001a00 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8001a00:	e7fe      	b.n	8001a00 <MemManage_Handler>

08001a02 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8001a02:	e7fe      	b.n	8001a02 <BusFault_Handler>

08001a04 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8001a04:	e7fe      	b.n	8001a04 <UsageFault_Handler>

08001a06 <SVC_Handler>:
 8001a06:	4770      	bx	lr

08001a08 <DebugMon_Handler>:
 8001a08:	4770      	bx	lr

08001a0a <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8001a0a:	4770      	bx	lr

08001a0c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001a0c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a0e:	f7fe fe15 	bl	800063c <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a12:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8001a16:	f7ff b89a 	b.w	8000b4e <HAL_SYSTICK_IRQHandler>
	...

08001a1c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a1c:	490f      	ldr	r1, [pc, #60]	; (8001a5c <SystemInit+0x40>)
 8001a1e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001a22:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001a2a:	4b0d      	ldr	r3, [pc, #52]	; (8001a60 <SystemInit+0x44>)
 8001a2c:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001a2e:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8001a30:	f042 0201 	orr.w	r2, r2, #1
 8001a34:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8001a36:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001a3e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001a42:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001a44:	4a07      	ldr	r2, [pc, #28]	; (8001a64 <SystemInit+0x48>)
 8001a46:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001a4e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001a50:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a52:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001a56:	608b      	str	r3, [r1, #8]
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	e000ed00 	.word	0xe000ed00
 8001a60:	40023800 	.word	0x40023800
 8001a64:	24003010 	.word	0x24003010

08001a68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001aa0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001a6c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001a6e:	e003      	b.n	8001a78 <LoopCopyDataInit>

08001a70 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001a70:	4b0c      	ldr	r3, [pc, #48]	; (8001aa4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001a72:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001a74:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001a76:	3104      	adds	r1, #4

08001a78 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001a78:	480b      	ldr	r0, [pc, #44]	; (8001aa8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001a7a:	4b0c      	ldr	r3, [pc, #48]	; (8001aac <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001a7c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001a7e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001a80:	d3f6      	bcc.n	8001a70 <CopyDataInit>
  ldr  r2, =_sbss
 8001a82:	4a0b      	ldr	r2, [pc, #44]	; (8001ab0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001a84:	e002      	b.n	8001a8c <LoopFillZerobss>

08001a86 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001a86:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001a88:	f842 3b04 	str.w	r3, [r2], #4

08001a8c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001a8c:	4b09      	ldr	r3, [pc, #36]	; (8001ab4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001a8e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001a90:	d3f9      	bcc.n	8001a86 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001a92:	f7ff ffc3 	bl	8001a1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a96:	f000 f811 	bl	8001abc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a9a:	f7ff fe51 	bl	8001740 <main>
  bx  lr    
 8001a9e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001aa0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001aa4:	08002a68 	.word	0x08002a68
  ldr  r0, =_sdata
 8001aa8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001aac:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8001ab0:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8001ab4:	20000128 	.word	0x20000128

08001ab8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ab8:	e7fe      	b.n	8001ab8 <ADC_IRQHandler>
	...

08001abc <__libc_init_array>:
 8001abc:	b570      	push	{r4, r5, r6, lr}
 8001abe:	4e0d      	ldr	r6, [pc, #52]	; (8001af4 <__libc_init_array+0x38>)
 8001ac0:	4c0d      	ldr	r4, [pc, #52]	; (8001af8 <__libc_init_array+0x3c>)
 8001ac2:	1ba4      	subs	r4, r4, r6
 8001ac4:	10a4      	asrs	r4, r4, #2
 8001ac6:	2500      	movs	r5, #0
 8001ac8:	42a5      	cmp	r5, r4
 8001aca:	d109      	bne.n	8001ae0 <__libc_init_array+0x24>
 8001acc:	4e0b      	ldr	r6, [pc, #44]	; (8001afc <__libc_init_array+0x40>)
 8001ace:	4c0c      	ldr	r4, [pc, #48]	; (8001b00 <__libc_init_array+0x44>)
 8001ad0:	f000 ff4e 	bl	8002970 <_init>
 8001ad4:	1ba4      	subs	r4, r4, r6
 8001ad6:	10a4      	asrs	r4, r4, #2
 8001ad8:	2500      	movs	r5, #0
 8001ada:	42a5      	cmp	r5, r4
 8001adc:	d105      	bne.n	8001aea <__libc_init_array+0x2e>
 8001ade:	bd70      	pop	{r4, r5, r6, pc}
 8001ae0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001ae4:	4798      	blx	r3
 8001ae6:	3501      	adds	r5, #1
 8001ae8:	e7ee      	b.n	8001ac8 <__libc_init_array+0xc>
 8001aea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001aee:	4798      	blx	r3
 8001af0:	3501      	adds	r5, #1
 8001af2:	e7f2      	b.n	8001ada <__libc_init_array+0x1e>
 8001af4:	08002a60 	.word	0x08002a60
 8001af8:	08002a60 	.word	0x08002a60
 8001afc:	08002a60 	.word	0x08002a60
 8001b00:	08002a64 	.word	0x08002a64

08001b04 <iprintf>:
 8001b04:	b40f      	push	{r0, r1, r2, r3}
 8001b06:	4b0a      	ldr	r3, [pc, #40]	; (8001b30 <iprintf+0x2c>)
 8001b08:	b513      	push	{r0, r1, r4, lr}
 8001b0a:	681c      	ldr	r4, [r3, #0]
 8001b0c:	b124      	cbz	r4, 8001b18 <iprintf+0x14>
 8001b0e:	69a3      	ldr	r3, [r4, #24]
 8001b10:	b913      	cbnz	r3, 8001b18 <iprintf+0x14>
 8001b12:	4620      	mov	r0, r4
 8001b14:	f000 f84e 	bl	8001bb4 <__sinit>
 8001b18:	ab05      	add	r3, sp, #20
 8001b1a:	9a04      	ldr	r2, [sp, #16]
 8001b1c:	68a1      	ldr	r1, [r4, #8]
 8001b1e:	9301      	str	r3, [sp, #4]
 8001b20:	4620      	mov	r0, r4
 8001b22:	f000 f961 	bl	8001de8 <_vfiprintf_r>
 8001b26:	b002      	add	sp, #8
 8001b28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001b2c:	b004      	add	sp, #16
 8001b2e:	4770      	bx	lr
 8001b30:	2000000c 	.word	0x2000000c

08001b34 <_cleanup_r>:
 8001b34:	4901      	ldr	r1, [pc, #4]	; (8001b3c <_cleanup_r+0x8>)
 8001b36:	f000 b8a9 	b.w	8001c8c <_fwalk_reent>
 8001b3a:	bf00      	nop
 8001b3c:	080026bd 	.word	0x080026bd

08001b40 <std.isra.0>:
 8001b40:	2300      	movs	r3, #0
 8001b42:	b510      	push	{r4, lr}
 8001b44:	4604      	mov	r4, r0
 8001b46:	6003      	str	r3, [r0, #0]
 8001b48:	6043      	str	r3, [r0, #4]
 8001b4a:	6083      	str	r3, [r0, #8]
 8001b4c:	8181      	strh	r1, [r0, #12]
 8001b4e:	6643      	str	r3, [r0, #100]	; 0x64
 8001b50:	81c2      	strh	r2, [r0, #14]
 8001b52:	6103      	str	r3, [r0, #16]
 8001b54:	6143      	str	r3, [r0, #20]
 8001b56:	6183      	str	r3, [r0, #24]
 8001b58:	4619      	mov	r1, r3
 8001b5a:	2208      	movs	r2, #8
 8001b5c:	305c      	adds	r0, #92	; 0x5c
 8001b5e:	f000 f8b3 	bl	8001cc8 <memset>
 8001b62:	4b05      	ldr	r3, [pc, #20]	; (8001b78 <std.isra.0+0x38>)
 8001b64:	6263      	str	r3, [r4, #36]	; 0x24
 8001b66:	4b05      	ldr	r3, [pc, #20]	; (8001b7c <std.isra.0+0x3c>)
 8001b68:	62a3      	str	r3, [r4, #40]	; 0x28
 8001b6a:	4b05      	ldr	r3, [pc, #20]	; (8001b80 <std.isra.0+0x40>)
 8001b6c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001b6e:	4b05      	ldr	r3, [pc, #20]	; (8001b84 <std.isra.0+0x44>)
 8001b70:	6224      	str	r4, [r4, #32]
 8001b72:	6323      	str	r3, [r4, #48]	; 0x30
 8001b74:	bd10      	pop	{r4, pc}
 8001b76:	bf00      	nop
 8001b78:	08002361 	.word	0x08002361
 8001b7c:	08002383 	.word	0x08002383
 8001b80:	080023bb 	.word	0x080023bb
 8001b84:	080023df 	.word	0x080023df

08001b88 <__sfmoreglue>:
 8001b88:	b570      	push	{r4, r5, r6, lr}
 8001b8a:	1e4a      	subs	r2, r1, #1
 8001b8c:	2568      	movs	r5, #104	; 0x68
 8001b8e:	4355      	muls	r5, r2
 8001b90:	460e      	mov	r6, r1
 8001b92:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001b96:	f000 f89f 	bl	8001cd8 <_malloc_r>
 8001b9a:	4604      	mov	r4, r0
 8001b9c:	b140      	cbz	r0, 8001bb0 <__sfmoreglue+0x28>
 8001b9e:	2100      	movs	r1, #0
 8001ba0:	e880 0042 	stmia.w	r0, {r1, r6}
 8001ba4:	300c      	adds	r0, #12
 8001ba6:	60a0      	str	r0, [r4, #8]
 8001ba8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001bac:	f000 f88c 	bl	8001cc8 <memset>
 8001bb0:	4620      	mov	r0, r4
 8001bb2:	bd70      	pop	{r4, r5, r6, pc}

08001bb4 <__sinit>:
 8001bb4:	6983      	ldr	r3, [r0, #24]
 8001bb6:	b510      	push	{r4, lr}
 8001bb8:	4604      	mov	r4, r0
 8001bba:	bb33      	cbnz	r3, 8001c0a <__sinit+0x56>
 8001bbc:	6483      	str	r3, [r0, #72]	; 0x48
 8001bbe:	64c3      	str	r3, [r0, #76]	; 0x4c
 8001bc0:	6503      	str	r3, [r0, #80]	; 0x50
 8001bc2:	4b12      	ldr	r3, [pc, #72]	; (8001c0c <__sinit+0x58>)
 8001bc4:	4a12      	ldr	r2, [pc, #72]	; (8001c10 <__sinit+0x5c>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	6282      	str	r2, [r0, #40]	; 0x28
 8001bca:	4298      	cmp	r0, r3
 8001bcc:	bf04      	itt	eq
 8001bce:	2301      	moveq	r3, #1
 8001bd0:	6183      	streq	r3, [r0, #24]
 8001bd2:	f000 f81f 	bl	8001c14 <__sfp>
 8001bd6:	6060      	str	r0, [r4, #4]
 8001bd8:	4620      	mov	r0, r4
 8001bda:	f000 f81b 	bl	8001c14 <__sfp>
 8001bde:	60a0      	str	r0, [r4, #8]
 8001be0:	4620      	mov	r0, r4
 8001be2:	f000 f817 	bl	8001c14 <__sfp>
 8001be6:	2200      	movs	r2, #0
 8001be8:	60e0      	str	r0, [r4, #12]
 8001bea:	2104      	movs	r1, #4
 8001bec:	6860      	ldr	r0, [r4, #4]
 8001bee:	f7ff ffa7 	bl	8001b40 <std.isra.0>
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	2109      	movs	r1, #9
 8001bf6:	68a0      	ldr	r0, [r4, #8]
 8001bf8:	f7ff ffa2 	bl	8001b40 <std.isra.0>
 8001bfc:	2202      	movs	r2, #2
 8001bfe:	2112      	movs	r1, #18
 8001c00:	68e0      	ldr	r0, [r4, #12]
 8001c02:	f7ff ff9d 	bl	8001b40 <std.isra.0>
 8001c06:	2301      	movs	r3, #1
 8001c08:	61a3      	str	r3, [r4, #24]
 8001c0a:	bd10      	pop	{r4, pc}
 8001c0c:	08002a20 	.word	0x08002a20
 8001c10:	08001b35 	.word	0x08001b35

08001c14 <__sfp>:
 8001c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c16:	4b1c      	ldr	r3, [pc, #112]	; (8001c88 <__sfp+0x74>)
 8001c18:	681e      	ldr	r6, [r3, #0]
 8001c1a:	69b3      	ldr	r3, [r6, #24]
 8001c1c:	4607      	mov	r7, r0
 8001c1e:	b913      	cbnz	r3, 8001c26 <__sfp+0x12>
 8001c20:	4630      	mov	r0, r6
 8001c22:	f7ff ffc7 	bl	8001bb4 <__sinit>
 8001c26:	3648      	adds	r6, #72	; 0x48
 8001c28:	68b4      	ldr	r4, [r6, #8]
 8001c2a:	6873      	ldr	r3, [r6, #4]
 8001c2c:	3b01      	subs	r3, #1
 8001c2e:	d503      	bpl.n	8001c38 <__sfp+0x24>
 8001c30:	6833      	ldr	r3, [r6, #0]
 8001c32:	b133      	cbz	r3, 8001c42 <__sfp+0x2e>
 8001c34:	6836      	ldr	r6, [r6, #0]
 8001c36:	e7f7      	b.n	8001c28 <__sfp+0x14>
 8001c38:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001c3c:	b16d      	cbz	r5, 8001c5a <__sfp+0x46>
 8001c3e:	3468      	adds	r4, #104	; 0x68
 8001c40:	e7f4      	b.n	8001c2c <__sfp+0x18>
 8001c42:	2104      	movs	r1, #4
 8001c44:	4638      	mov	r0, r7
 8001c46:	f7ff ff9f 	bl	8001b88 <__sfmoreglue>
 8001c4a:	6030      	str	r0, [r6, #0]
 8001c4c:	2800      	cmp	r0, #0
 8001c4e:	d1f1      	bne.n	8001c34 <__sfp+0x20>
 8001c50:	230c      	movs	r3, #12
 8001c52:	603b      	str	r3, [r7, #0]
 8001c54:	4604      	mov	r4, r0
 8001c56:	4620      	mov	r0, r4
 8001c58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c5e:	81e3      	strh	r3, [r4, #14]
 8001c60:	2301      	movs	r3, #1
 8001c62:	81a3      	strh	r3, [r4, #12]
 8001c64:	6665      	str	r5, [r4, #100]	; 0x64
 8001c66:	6025      	str	r5, [r4, #0]
 8001c68:	60a5      	str	r5, [r4, #8]
 8001c6a:	6065      	str	r5, [r4, #4]
 8001c6c:	6125      	str	r5, [r4, #16]
 8001c6e:	6165      	str	r5, [r4, #20]
 8001c70:	61a5      	str	r5, [r4, #24]
 8001c72:	2208      	movs	r2, #8
 8001c74:	4629      	mov	r1, r5
 8001c76:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001c7a:	f000 f825 	bl	8001cc8 <memset>
 8001c7e:	6365      	str	r5, [r4, #52]	; 0x34
 8001c80:	63a5      	str	r5, [r4, #56]	; 0x38
 8001c82:	64a5      	str	r5, [r4, #72]	; 0x48
 8001c84:	64e5      	str	r5, [r4, #76]	; 0x4c
 8001c86:	e7e6      	b.n	8001c56 <__sfp+0x42>
 8001c88:	08002a20 	.word	0x08002a20

08001c8c <_fwalk_reent>:
 8001c8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001c90:	4680      	mov	r8, r0
 8001c92:	4689      	mov	r9, r1
 8001c94:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001c98:	2600      	movs	r6, #0
 8001c9a:	b914      	cbnz	r4, 8001ca2 <_fwalk_reent+0x16>
 8001c9c:	4630      	mov	r0, r6
 8001c9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001ca2:	68a5      	ldr	r5, [r4, #8]
 8001ca4:	6867      	ldr	r7, [r4, #4]
 8001ca6:	3f01      	subs	r7, #1
 8001ca8:	d501      	bpl.n	8001cae <_fwalk_reent+0x22>
 8001caa:	6824      	ldr	r4, [r4, #0]
 8001cac:	e7f5      	b.n	8001c9a <_fwalk_reent+0xe>
 8001cae:	89ab      	ldrh	r3, [r5, #12]
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d907      	bls.n	8001cc4 <_fwalk_reent+0x38>
 8001cb4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001cb8:	3301      	adds	r3, #1
 8001cba:	d003      	beq.n	8001cc4 <_fwalk_reent+0x38>
 8001cbc:	4629      	mov	r1, r5
 8001cbe:	4640      	mov	r0, r8
 8001cc0:	47c8      	blx	r9
 8001cc2:	4306      	orrs	r6, r0
 8001cc4:	3568      	adds	r5, #104	; 0x68
 8001cc6:	e7ee      	b.n	8001ca6 <_fwalk_reent+0x1a>

08001cc8 <memset>:
 8001cc8:	4402      	add	r2, r0
 8001cca:	4603      	mov	r3, r0
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d100      	bne.n	8001cd2 <memset+0xa>
 8001cd0:	4770      	bx	lr
 8001cd2:	f803 1b01 	strb.w	r1, [r3], #1
 8001cd6:	e7f9      	b.n	8001ccc <memset+0x4>

08001cd8 <_malloc_r>:
 8001cd8:	b570      	push	{r4, r5, r6, lr}
 8001cda:	1ccd      	adds	r5, r1, #3
 8001cdc:	f025 0503 	bic.w	r5, r5, #3
 8001ce0:	3508      	adds	r5, #8
 8001ce2:	2d0c      	cmp	r5, #12
 8001ce4:	bf38      	it	cc
 8001ce6:	250c      	movcc	r5, #12
 8001ce8:	2d00      	cmp	r5, #0
 8001cea:	4606      	mov	r6, r0
 8001cec:	db01      	blt.n	8001cf2 <_malloc_r+0x1a>
 8001cee:	42a9      	cmp	r1, r5
 8001cf0:	d903      	bls.n	8001cfa <_malloc_r+0x22>
 8001cf2:	230c      	movs	r3, #12
 8001cf4:	6033      	str	r3, [r6, #0]
 8001cf6:	2000      	movs	r0, #0
 8001cf8:	bd70      	pop	{r4, r5, r6, pc}
 8001cfa:	f000 fd7f 	bl	80027fc <__malloc_lock>
 8001cfe:	4a23      	ldr	r2, [pc, #140]	; (8001d8c <_malloc_r+0xb4>)
 8001d00:	6814      	ldr	r4, [r2, #0]
 8001d02:	4621      	mov	r1, r4
 8001d04:	b991      	cbnz	r1, 8001d2c <_malloc_r+0x54>
 8001d06:	4c22      	ldr	r4, [pc, #136]	; (8001d90 <_malloc_r+0xb8>)
 8001d08:	6823      	ldr	r3, [r4, #0]
 8001d0a:	b91b      	cbnz	r3, 8001d14 <_malloc_r+0x3c>
 8001d0c:	4630      	mov	r0, r6
 8001d0e:	f000 fb17 	bl	8002340 <_sbrk_r>
 8001d12:	6020      	str	r0, [r4, #0]
 8001d14:	4629      	mov	r1, r5
 8001d16:	4630      	mov	r0, r6
 8001d18:	f000 fb12 	bl	8002340 <_sbrk_r>
 8001d1c:	1c43      	adds	r3, r0, #1
 8001d1e:	d126      	bne.n	8001d6e <_malloc_r+0x96>
 8001d20:	230c      	movs	r3, #12
 8001d22:	6033      	str	r3, [r6, #0]
 8001d24:	4630      	mov	r0, r6
 8001d26:	f000 fd6a 	bl	80027fe <__malloc_unlock>
 8001d2a:	e7e4      	b.n	8001cf6 <_malloc_r+0x1e>
 8001d2c:	680b      	ldr	r3, [r1, #0]
 8001d2e:	1b5b      	subs	r3, r3, r5
 8001d30:	d41a      	bmi.n	8001d68 <_malloc_r+0x90>
 8001d32:	2b0b      	cmp	r3, #11
 8001d34:	d90f      	bls.n	8001d56 <_malloc_r+0x7e>
 8001d36:	600b      	str	r3, [r1, #0]
 8001d38:	50cd      	str	r5, [r1, r3]
 8001d3a:	18cc      	adds	r4, r1, r3
 8001d3c:	4630      	mov	r0, r6
 8001d3e:	f000 fd5e 	bl	80027fe <__malloc_unlock>
 8001d42:	f104 000b 	add.w	r0, r4, #11
 8001d46:	1d23      	adds	r3, r4, #4
 8001d48:	f020 0007 	bic.w	r0, r0, #7
 8001d4c:	1ac3      	subs	r3, r0, r3
 8001d4e:	d01b      	beq.n	8001d88 <_malloc_r+0xb0>
 8001d50:	425a      	negs	r2, r3
 8001d52:	50e2      	str	r2, [r4, r3]
 8001d54:	bd70      	pop	{r4, r5, r6, pc}
 8001d56:	428c      	cmp	r4, r1
 8001d58:	bf0d      	iteet	eq
 8001d5a:	6863      	ldreq	r3, [r4, #4]
 8001d5c:	684b      	ldrne	r3, [r1, #4]
 8001d5e:	6063      	strne	r3, [r4, #4]
 8001d60:	6013      	streq	r3, [r2, #0]
 8001d62:	bf18      	it	ne
 8001d64:	460c      	movne	r4, r1
 8001d66:	e7e9      	b.n	8001d3c <_malloc_r+0x64>
 8001d68:	460c      	mov	r4, r1
 8001d6a:	6849      	ldr	r1, [r1, #4]
 8001d6c:	e7ca      	b.n	8001d04 <_malloc_r+0x2c>
 8001d6e:	1cc4      	adds	r4, r0, #3
 8001d70:	f024 0403 	bic.w	r4, r4, #3
 8001d74:	42a0      	cmp	r0, r4
 8001d76:	d005      	beq.n	8001d84 <_malloc_r+0xac>
 8001d78:	1a21      	subs	r1, r4, r0
 8001d7a:	4630      	mov	r0, r6
 8001d7c:	f000 fae0 	bl	8002340 <_sbrk_r>
 8001d80:	3001      	adds	r0, #1
 8001d82:	d0cd      	beq.n	8001d20 <_malloc_r+0x48>
 8001d84:	6025      	str	r5, [r4, #0]
 8001d86:	e7d9      	b.n	8001d3c <_malloc_r+0x64>
 8001d88:	bd70      	pop	{r4, r5, r6, pc}
 8001d8a:	bf00      	nop
 8001d8c:	2000008c 	.word	0x2000008c
 8001d90:	20000090 	.word	0x20000090

08001d94 <__sfputc_r>:
 8001d94:	6893      	ldr	r3, [r2, #8]
 8001d96:	3b01      	subs	r3, #1
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	b410      	push	{r4}
 8001d9c:	6093      	str	r3, [r2, #8]
 8001d9e:	da09      	bge.n	8001db4 <__sfputc_r+0x20>
 8001da0:	6994      	ldr	r4, [r2, #24]
 8001da2:	42a3      	cmp	r3, r4
 8001da4:	db02      	blt.n	8001dac <__sfputc_r+0x18>
 8001da6:	b2cb      	uxtb	r3, r1
 8001da8:	2b0a      	cmp	r3, #10
 8001daa:	d103      	bne.n	8001db4 <__sfputc_r+0x20>
 8001dac:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001db0:	f000 bb1a 	b.w	80023e8 <__swbuf_r>
 8001db4:	6813      	ldr	r3, [r2, #0]
 8001db6:	1c58      	adds	r0, r3, #1
 8001db8:	6010      	str	r0, [r2, #0]
 8001dba:	7019      	strb	r1, [r3, #0]
 8001dbc:	b2c8      	uxtb	r0, r1
 8001dbe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <__sfputs_r>:
 8001dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dc6:	4606      	mov	r6, r0
 8001dc8:	460f      	mov	r7, r1
 8001dca:	4614      	mov	r4, r2
 8001dcc:	18d5      	adds	r5, r2, r3
 8001dce:	42ac      	cmp	r4, r5
 8001dd0:	d101      	bne.n	8001dd6 <__sfputs_r+0x12>
 8001dd2:	2000      	movs	r0, #0
 8001dd4:	e007      	b.n	8001de6 <__sfputs_r+0x22>
 8001dd6:	463a      	mov	r2, r7
 8001dd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001ddc:	4630      	mov	r0, r6
 8001dde:	f7ff ffd9 	bl	8001d94 <__sfputc_r>
 8001de2:	1c43      	adds	r3, r0, #1
 8001de4:	d1f3      	bne.n	8001dce <__sfputs_r+0xa>
 8001de6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001de8 <_vfiprintf_r>:
 8001de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001dec:	b09d      	sub	sp, #116	; 0x74
 8001dee:	460c      	mov	r4, r1
 8001df0:	4617      	mov	r7, r2
 8001df2:	9303      	str	r3, [sp, #12]
 8001df4:	4606      	mov	r6, r0
 8001df6:	b118      	cbz	r0, 8001e00 <_vfiprintf_r+0x18>
 8001df8:	6983      	ldr	r3, [r0, #24]
 8001dfa:	b90b      	cbnz	r3, 8001e00 <_vfiprintf_r+0x18>
 8001dfc:	f7ff feda 	bl	8001bb4 <__sinit>
 8001e00:	4b7c      	ldr	r3, [pc, #496]	; (8001ff4 <_vfiprintf_r+0x20c>)
 8001e02:	429c      	cmp	r4, r3
 8001e04:	d157      	bne.n	8001eb6 <_vfiprintf_r+0xce>
 8001e06:	6874      	ldr	r4, [r6, #4]
 8001e08:	89a3      	ldrh	r3, [r4, #12]
 8001e0a:	0718      	lsls	r0, r3, #28
 8001e0c:	d55d      	bpl.n	8001eca <_vfiprintf_r+0xe2>
 8001e0e:	6923      	ldr	r3, [r4, #16]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d05a      	beq.n	8001eca <_vfiprintf_r+0xe2>
 8001e14:	2300      	movs	r3, #0
 8001e16:	9309      	str	r3, [sp, #36]	; 0x24
 8001e18:	2320      	movs	r3, #32
 8001e1a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001e1e:	2330      	movs	r3, #48	; 0x30
 8001e20:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001e24:	f04f 0b01 	mov.w	fp, #1
 8001e28:	46b8      	mov	r8, r7
 8001e2a:	4645      	mov	r5, r8
 8001e2c:	f815 3b01 	ldrb.w	r3, [r5], #1
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d155      	bne.n	8001ee0 <_vfiprintf_r+0xf8>
 8001e34:	ebb8 0a07 	subs.w	sl, r8, r7
 8001e38:	d00b      	beq.n	8001e52 <_vfiprintf_r+0x6a>
 8001e3a:	4653      	mov	r3, sl
 8001e3c:	463a      	mov	r2, r7
 8001e3e:	4621      	mov	r1, r4
 8001e40:	4630      	mov	r0, r6
 8001e42:	f7ff ffbf 	bl	8001dc4 <__sfputs_r>
 8001e46:	3001      	adds	r0, #1
 8001e48:	f000 80c4 	beq.w	8001fd4 <_vfiprintf_r+0x1ec>
 8001e4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001e4e:	4453      	add	r3, sl
 8001e50:	9309      	str	r3, [sp, #36]	; 0x24
 8001e52:	f898 3000 	ldrb.w	r3, [r8]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	f000 80bc 	beq.w	8001fd4 <_vfiprintf_r+0x1ec>
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	f04f 32ff 	mov.w	r2, #4294967295
 8001e62:	9304      	str	r3, [sp, #16]
 8001e64:	9307      	str	r3, [sp, #28]
 8001e66:	9205      	str	r2, [sp, #20]
 8001e68:	9306      	str	r3, [sp, #24]
 8001e6a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001e6e:	931a      	str	r3, [sp, #104]	; 0x68
 8001e70:	2205      	movs	r2, #5
 8001e72:	7829      	ldrb	r1, [r5, #0]
 8001e74:	4860      	ldr	r0, [pc, #384]	; (8001ff8 <_vfiprintf_r+0x210>)
 8001e76:	f7fe f9cb 	bl	8000210 <memchr>
 8001e7a:	f105 0801 	add.w	r8, r5, #1
 8001e7e:	9b04      	ldr	r3, [sp, #16]
 8001e80:	2800      	cmp	r0, #0
 8001e82:	d131      	bne.n	8001ee8 <_vfiprintf_r+0x100>
 8001e84:	06d9      	lsls	r1, r3, #27
 8001e86:	bf44      	itt	mi
 8001e88:	2220      	movmi	r2, #32
 8001e8a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001e8e:	071a      	lsls	r2, r3, #28
 8001e90:	bf44      	itt	mi
 8001e92:	222b      	movmi	r2, #43	; 0x2b
 8001e94:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001e98:	782a      	ldrb	r2, [r5, #0]
 8001e9a:	2a2a      	cmp	r2, #42	; 0x2a
 8001e9c:	d02c      	beq.n	8001ef8 <_vfiprintf_r+0x110>
 8001e9e:	9a07      	ldr	r2, [sp, #28]
 8001ea0:	2100      	movs	r1, #0
 8001ea2:	200a      	movs	r0, #10
 8001ea4:	46a8      	mov	r8, r5
 8001ea6:	3501      	adds	r5, #1
 8001ea8:	f898 3000 	ldrb.w	r3, [r8]
 8001eac:	3b30      	subs	r3, #48	; 0x30
 8001eae:	2b09      	cmp	r3, #9
 8001eb0:	d96d      	bls.n	8001f8e <_vfiprintf_r+0x1a6>
 8001eb2:	b371      	cbz	r1, 8001f12 <_vfiprintf_r+0x12a>
 8001eb4:	e026      	b.n	8001f04 <_vfiprintf_r+0x11c>
 8001eb6:	4b51      	ldr	r3, [pc, #324]	; (8001ffc <_vfiprintf_r+0x214>)
 8001eb8:	429c      	cmp	r4, r3
 8001eba:	d101      	bne.n	8001ec0 <_vfiprintf_r+0xd8>
 8001ebc:	68b4      	ldr	r4, [r6, #8]
 8001ebe:	e7a3      	b.n	8001e08 <_vfiprintf_r+0x20>
 8001ec0:	4b4f      	ldr	r3, [pc, #316]	; (8002000 <_vfiprintf_r+0x218>)
 8001ec2:	429c      	cmp	r4, r3
 8001ec4:	bf08      	it	eq
 8001ec6:	68f4      	ldreq	r4, [r6, #12]
 8001ec8:	e79e      	b.n	8001e08 <_vfiprintf_r+0x20>
 8001eca:	4621      	mov	r1, r4
 8001ecc:	4630      	mov	r0, r6
 8001ece:	f000 faef 	bl	80024b0 <__swsetup_r>
 8001ed2:	2800      	cmp	r0, #0
 8001ed4:	d09e      	beq.n	8001e14 <_vfiprintf_r+0x2c>
 8001ed6:	f04f 30ff 	mov.w	r0, #4294967295
 8001eda:	b01d      	add	sp, #116	; 0x74
 8001edc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001ee0:	2b25      	cmp	r3, #37	; 0x25
 8001ee2:	d0a7      	beq.n	8001e34 <_vfiprintf_r+0x4c>
 8001ee4:	46a8      	mov	r8, r5
 8001ee6:	e7a0      	b.n	8001e2a <_vfiprintf_r+0x42>
 8001ee8:	4a43      	ldr	r2, [pc, #268]	; (8001ff8 <_vfiprintf_r+0x210>)
 8001eea:	1a80      	subs	r0, r0, r2
 8001eec:	fa0b f000 	lsl.w	r0, fp, r0
 8001ef0:	4318      	orrs	r0, r3
 8001ef2:	9004      	str	r0, [sp, #16]
 8001ef4:	4645      	mov	r5, r8
 8001ef6:	e7bb      	b.n	8001e70 <_vfiprintf_r+0x88>
 8001ef8:	9a03      	ldr	r2, [sp, #12]
 8001efa:	1d11      	adds	r1, r2, #4
 8001efc:	6812      	ldr	r2, [r2, #0]
 8001efe:	9103      	str	r1, [sp, #12]
 8001f00:	2a00      	cmp	r2, #0
 8001f02:	db01      	blt.n	8001f08 <_vfiprintf_r+0x120>
 8001f04:	9207      	str	r2, [sp, #28]
 8001f06:	e004      	b.n	8001f12 <_vfiprintf_r+0x12a>
 8001f08:	4252      	negs	r2, r2
 8001f0a:	f043 0302 	orr.w	r3, r3, #2
 8001f0e:	9207      	str	r2, [sp, #28]
 8001f10:	9304      	str	r3, [sp, #16]
 8001f12:	f898 3000 	ldrb.w	r3, [r8]
 8001f16:	2b2e      	cmp	r3, #46	; 0x2e
 8001f18:	d110      	bne.n	8001f3c <_vfiprintf_r+0x154>
 8001f1a:	f898 3001 	ldrb.w	r3, [r8, #1]
 8001f1e:	2b2a      	cmp	r3, #42	; 0x2a
 8001f20:	f108 0101 	add.w	r1, r8, #1
 8001f24:	d137      	bne.n	8001f96 <_vfiprintf_r+0x1ae>
 8001f26:	9b03      	ldr	r3, [sp, #12]
 8001f28:	1d1a      	adds	r2, r3, #4
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	9203      	str	r2, [sp, #12]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	bfb8      	it	lt
 8001f32:	f04f 33ff 	movlt.w	r3, #4294967295
 8001f36:	f108 0802 	add.w	r8, r8, #2
 8001f3a:	9305      	str	r3, [sp, #20]
 8001f3c:	4d31      	ldr	r5, [pc, #196]	; (8002004 <_vfiprintf_r+0x21c>)
 8001f3e:	f898 1000 	ldrb.w	r1, [r8]
 8001f42:	2203      	movs	r2, #3
 8001f44:	4628      	mov	r0, r5
 8001f46:	f7fe f963 	bl	8000210 <memchr>
 8001f4a:	b140      	cbz	r0, 8001f5e <_vfiprintf_r+0x176>
 8001f4c:	2340      	movs	r3, #64	; 0x40
 8001f4e:	1b40      	subs	r0, r0, r5
 8001f50:	fa03 f000 	lsl.w	r0, r3, r0
 8001f54:	9b04      	ldr	r3, [sp, #16]
 8001f56:	4303      	orrs	r3, r0
 8001f58:	9304      	str	r3, [sp, #16]
 8001f5a:	f108 0801 	add.w	r8, r8, #1
 8001f5e:	f898 1000 	ldrb.w	r1, [r8]
 8001f62:	4829      	ldr	r0, [pc, #164]	; (8002008 <_vfiprintf_r+0x220>)
 8001f64:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001f68:	2206      	movs	r2, #6
 8001f6a:	f108 0701 	add.w	r7, r8, #1
 8001f6e:	f7fe f94f 	bl	8000210 <memchr>
 8001f72:	2800      	cmp	r0, #0
 8001f74:	d034      	beq.n	8001fe0 <_vfiprintf_r+0x1f8>
 8001f76:	4b25      	ldr	r3, [pc, #148]	; (800200c <_vfiprintf_r+0x224>)
 8001f78:	bb03      	cbnz	r3, 8001fbc <_vfiprintf_r+0x1d4>
 8001f7a:	9b03      	ldr	r3, [sp, #12]
 8001f7c:	3307      	adds	r3, #7
 8001f7e:	f023 0307 	bic.w	r3, r3, #7
 8001f82:	3308      	adds	r3, #8
 8001f84:	9303      	str	r3, [sp, #12]
 8001f86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001f88:	444b      	add	r3, r9
 8001f8a:	9309      	str	r3, [sp, #36]	; 0x24
 8001f8c:	e74c      	b.n	8001e28 <_vfiprintf_r+0x40>
 8001f8e:	fb00 3202 	mla	r2, r0, r2, r3
 8001f92:	2101      	movs	r1, #1
 8001f94:	e786      	b.n	8001ea4 <_vfiprintf_r+0xbc>
 8001f96:	2300      	movs	r3, #0
 8001f98:	9305      	str	r3, [sp, #20]
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	250a      	movs	r5, #10
 8001f9e:	4688      	mov	r8, r1
 8001fa0:	3101      	adds	r1, #1
 8001fa2:	f898 2000 	ldrb.w	r2, [r8]
 8001fa6:	3a30      	subs	r2, #48	; 0x30
 8001fa8:	2a09      	cmp	r2, #9
 8001faa:	d903      	bls.n	8001fb4 <_vfiprintf_r+0x1cc>
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d0c5      	beq.n	8001f3c <_vfiprintf_r+0x154>
 8001fb0:	9005      	str	r0, [sp, #20]
 8001fb2:	e7c3      	b.n	8001f3c <_vfiprintf_r+0x154>
 8001fb4:	fb05 2000 	mla	r0, r5, r0, r2
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e7f0      	b.n	8001f9e <_vfiprintf_r+0x1b6>
 8001fbc:	ab03      	add	r3, sp, #12
 8001fbe:	9300      	str	r3, [sp, #0]
 8001fc0:	4622      	mov	r2, r4
 8001fc2:	4b13      	ldr	r3, [pc, #76]	; (8002010 <_vfiprintf_r+0x228>)
 8001fc4:	a904      	add	r1, sp, #16
 8001fc6:	4630      	mov	r0, r6
 8001fc8:	f3af 8000 	nop.w
 8001fcc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001fd0:	4681      	mov	r9, r0
 8001fd2:	d1d8      	bne.n	8001f86 <_vfiprintf_r+0x19e>
 8001fd4:	89a3      	ldrh	r3, [r4, #12]
 8001fd6:	065b      	lsls	r3, r3, #25
 8001fd8:	f53f af7d 	bmi.w	8001ed6 <_vfiprintf_r+0xee>
 8001fdc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001fde:	e77c      	b.n	8001eda <_vfiprintf_r+0xf2>
 8001fe0:	ab03      	add	r3, sp, #12
 8001fe2:	9300      	str	r3, [sp, #0]
 8001fe4:	4622      	mov	r2, r4
 8001fe6:	4b0a      	ldr	r3, [pc, #40]	; (8002010 <_vfiprintf_r+0x228>)
 8001fe8:	a904      	add	r1, sp, #16
 8001fea:	4630      	mov	r0, r6
 8001fec:	f000 f888 	bl	8002100 <_printf_i>
 8001ff0:	e7ec      	b.n	8001fcc <_vfiprintf_r+0x1e4>
 8001ff2:	bf00      	nop
 8001ff4:	080029e0 	.word	0x080029e0
 8001ff8:	08002a24 	.word	0x08002a24
 8001ffc:	08002a00 	.word	0x08002a00
 8002000:	080029c0 	.word	0x080029c0
 8002004:	08002a2a 	.word	0x08002a2a
 8002008:	08002a2e 	.word	0x08002a2e
 800200c:	00000000 	.word	0x00000000
 8002010:	08001dc5 	.word	0x08001dc5

08002014 <_printf_common>:
 8002014:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002018:	4691      	mov	r9, r2
 800201a:	461f      	mov	r7, r3
 800201c:	688a      	ldr	r2, [r1, #8]
 800201e:	690b      	ldr	r3, [r1, #16]
 8002020:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002024:	4293      	cmp	r3, r2
 8002026:	bfb8      	it	lt
 8002028:	4613      	movlt	r3, r2
 800202a:	f8c9 3000 	str.w	r3, [r9]
 800202e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002032:	4606      	mov	r6, r0
 8002034:	460c      	mov	r4, r1
 8002036:	b112      	cbz	r2, 800203e <_printf_common+0x2a>
 8002038:	3301      	adds	r3, #1
 800203a:	f8c9 3000 	str.w	r3, [r9]
 800203e:	6823      	ldr	r3, [r4, #0]
 8002040:	0699      	lsls	r1, r3, #26
 8002042:	bf42      	ittt	mi
 8002044:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002048:	3302      	addmi	r3, #2
 800204a:	f8c9 3000 	strmi.w	r3, [r9]
 800204e:	6825      	ldr	r5, [r4, #0]
 8002050:	f015 0506 	ands.w	r5, r5, #6
 8002054:	d107      	bne.n	8002066 <_printf_common+0x52>
 8002056:	f104 0a19 	add.w	sl, r4, #25
 800205a:	68e3      	ldr	r3, [r4, #12]
 800205c:	f8d9 2000 	ldr.w	r2, [r9]
 8002060:	1a9b      	subs	r3, r3, r2
 8002062:	429d      	cmp	r5, r3
 8002064:	db29      	blt.n	80020ba <_printf_common+0xa6>
 8002066:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800206a:	6822      	ldr	r2, [r4, #0]
 800206c:	3300      	adds	r3, #0
 800206e:	bf18      	it	ne
 8002070:	2301      	movne	r3, #1
 8002072:	0692      	lsls	r2, r2, #26
 8002074:	d42e      	bmi.n	80020d4 <_printf_common+0xc0>
 8002076:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800207a:	4639      	mov	r1, r7
 800207c:	4630      	mov	r0, r6
 800207e:	47c0      	blx	r8
 8002080:	3001      	adds	r0, #1
 8002082:	d021      	beq.n	80020c8 <_printf_common+0xb4>
 8002084:	6823      	ldr	r3, [r4, #0]
 8002086:	68e5      	ldr	r5, [r4, #12]
 8002088:	f8d9 2000 	ldr.w	r2, [r9]
 800208c:	f003 0306 	and.w	r3, r3, #6
 8002090:	2b04      	cmp	r3, #4
 8002092:	bf08      	it	eq
 8002094:	1aad      	subeq	r5, r5, r2
 8002096:	68a3      	ldr	r3, [r4, #8]
 8002098:	6922      	ldr	r2, [r4, #16]
 800209a:	bf0c      	ite	eq
 800209c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80020a0:	2500      	movne	r5, #0
 80020a2:	4293      	cmp	r3, r2
 80020a4:	bfc4      	itt	gt
 80020a6:	1a9b      	subgt	r3, r3, r2
 80020a8:	18ed      	addgt	r5, r5, r3
 80020aa:	f04f 0900 	mov.w	r9, #0
 80020ae:	341a      	adds	r4, #26
 80020b0:	454d      	cmp	r5, r9
 80020b2:	d11b      	bne.n	80020ec <_printf_common+0xd8>
 80020b4:	2000      	movs	r0, #0
 80020b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80020ba:	2301      	movs	r3, #1
 80020bc:	4652      	mov	r2, sl
 80020be:	4639      	mov	r1, r7
 80020c0:	4630      	mov	r0, r6
 80020c2:	47c0      	blx	r8
 80020c4:	3001      	adds	r0, #1
 80020c6:	d103      	bne.n	80020d0 <_printf_common+0xbc>
 80020c8:	f04f 30ff 	mov.w	r0, #4294967295
 80020cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80020d0:	3501      	adds	r5, #1
 80020d2:	e7c2      	b.n	800205a <_printf_common+0x46>
 80020d4:	18e1      	adds	r1, r4, r3
 80020d6:	1c5a      	adds	r2, r3, #1
 80020d8:	2030      	movs	r0, #48	; 0x30
 80020da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80020de:	4422      	add	r2, r4
 80020e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80020e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80020e8:	3302      	adds	r3, #2
 80020ea:	e7c4      	b.n	8002076 <_printf_common+0x62>
 80020ec:	2301      	movs	r3, #1
 80020ee:	4622      	mov	r2, r4
 80020f0:	4639      	mov	r1, r7
 80020f2:	4630      	mov	r0, r6
 80020f4:	47c0      	blx	r8
 80020f6:	3001      	adds	r0, #1
 80020f8:	d0e6      	beq.n	80020c8 <_printf_common+0xb4>
 80020fa:	f109 0901 	add.w	r9, r9, #1
 80020fe:	e7d7      	b.n	80020b0 <_printf_common+0x9c>

08002100 <_printf_i>:
 8002100:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002104:	4617      	mov	r7, r2
 8002106:	7e0a      	ldrb	r2, [r1, #24]
 8002108:	b085      	sub	sp, #20
 800210a:	2a6e      	cmp	r2, #110	; 0x6e
 800210c:	4698      	mov	r8, r3
 800210e:	4606      	mov	r6, r0
 8002110:	460c      	mov	r4, r1
 8002112:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002114:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8002118:	f000 80bc 	beq.w	8002294 <_printf_i+0x194>
 800211c:	d81a      	bhi.n	8002154 <_printf_i+0x54>
 800211e:	2a63      	cmp	r2, #99	; 0x63
 8002120:	d02e      	beq.n	8002180 <_printf_i+0x80>
 8002122:	d80a      	bhi.n	800213a <_printf_i+0x3a>
 8002124:	2a00      	cmp	r2, #0
 8002126:	f000 80c8 	beq.w	80022ba <_printf_i+0x1ba>
 800212a:	2a58      	cmp	r2, #88	; 0x58
 800212c:	f000 808a 	beq.w	8002244 <_printf_i+0x144>
 8002130:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002134:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8002138:	e02a      	b.n	8002190 <_printf_i+0x90>
 800213a:	2a64      	cmp	r2, #100	; 0x64
 800213c:	d001      	beq.n	8002142 <_printf_i+0x42>
 800213e:	2a69      	cmp	r2, #105	; 0x69
 8002140:	d1f6      	bne.n	8002130 <_printf_i+0x30>
 8002142:	6821      	ldr	r1, [r4, #0]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	f011 0f80 	tst.w	r1, #128	; 0x80
 800214a:	d023      	beq.n	8002194 <_printf_i+0x94>
 800214c:	1d11      	adds	r1, r2, #4
 800214e:	6019      	str	r1, [r3, #0]
 8002150:	6813      	ldr	r3, [r2, #0]
 8002152:	e027      	b.n	80021a4 <_printf_i+0xa4>
 8002154:	2a73      	cmp	r2, #115	; 0x73
 8002156:	f000 80b4 	beq.w	80022c2 <_printf_i+0x1c2>
 800215a:	d808      	bhi.n	800216e <_printf_i+0x6e>
 800215c:	2a6f      	cmp	r2, #111	; 0x6f
 800215e:	d02a      	beq.n	80021b6 <_printf_i+0xb6>
 8002160:	2a70      	cmp	r2, #112	; 0x70
 8002162:	d1e5      	bne.n	8002130 <_printf_i+0x30>
 8002164:	680a      	ldr	r2, [r1, #0]
 8002166:	f042 0220 	orr.w	r2, r2, #32
 800216a:	600a      	str	r2, [r1, #0]
 800216c:	e003      	b.n	8002176 <_printf_i+0x76>
 800216e:	2a75      	cmp	r2, #117	; 0x75
 8002170:	d021      	beq.n	80021b6 <_printf_i+0xb6>
 8002172:	2a78      	cmp	r2, #120	; 0x78
 8002174:	d1dc      	bne.n	8002130 <_printf_i+0x30>
 8002176:	2278      	movs	r2, #120	; 0x78
 8002178:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800217c:	496e      	ldr	r1, [pc, #440]	; (8002338 <_printf_i+0x238>)
 800217e:	e064      	b.n	800224a <_printf_i+0x14a>
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8002186:	1d11      	adds	r1, r2, #4
 8002188:	6019      	str	r1, [r3, #0]
 800218a:	6813      	ldr	r3, [r2, #0]
 800218c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002190:	2301      	movs	r3, #1
 8002192:	e0a3      	b.n	80022dc <_printf_i+0x1dc>
 8002194:	f011 0f40 	tst.w	r1, #64	; 0x40
 8002198:	f102 0104 	add.w	r1, r2, #4
 800219c:	6019      	str	r1, [r3, #0]
 800219e:	d0d7      	beq.n	8002150 <_printf_i+0x50>
 80021a0:	f9b2 3000 	ldrsh.w	r3, [r2]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	da03      	bge.n	80021b0 <_printf_i+0xb0>
 80021a8:	222d      	movs	r2, #45	; 0x2d
 80021aa:	425b      	negs	r3, r3
 80021ac:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80021b0:	4962      	ldr	r1, [pc, #392]	; (800233c <_printf_i+0x23c>)
 80021b2:	220a      	movs	r2, #10
 80021b4:	e017      	b.n	80021e6 <_printf_i+0xe6>
 80021b6:	6820      	ldr	r0, [r4, #0]
 80021b8:	6819      	ldr	r1, [r3, #0]
 80021ba:	f010 0f80 	tst.w	r0, #128	; 0x80
 80021be:	d003      	beq.n	80021c8 <_printf_i+0xc8>
 80021c0:	1d08      	adds	r0, r1, #4
 80021c2:	6018      	str	r0, [r3, #0]
 80021c4:	680b      	ldr	r3, [r1, #0]
 80021c6:	e006      	b.n	80021d6 <_printf_i+0xd6>
 80021c8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80021cc:	f101 0004 	add.w	r0, r1, #4
 80021d0:	6018      	str	r0, [r3, #0]
 80021d2:	d0f7      	beq.n	80021c4 <_printf_i+0xc4>
 80021d4:	880b      	ldrh	r3, [r1, #0]
 80021d6:	4959      	ldr	r1, [pc, #356]	; (800233c <_printf_i+0x23c>)
 80021d8:	2a6f      	cmp	r2, #111	; 0x6f
 80021da:	bf14      	ite	ne
 80021dc:	220a      	movne	r2, #10
 80021de:	2208      	moveq	r2, #8
 80021e0:	2000      	movs	r0, #0
 80021e2:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80021e6:	6865      	ldr	r5, [r4, #4]
 80021e8:	60a5      	str	r5, [r4, #8]
 80021ea:	2d00      	cmp	r5, #0
 80021ec:	f2c0 809c 	blt.w	8002328 <_printf_i+0x228>
 80021f0:	6820      	ldr	r0, [r4, #0]
 80021f2:	f020 0004 	bic.w	r0, r0, #4
 80021f6:	6020      	str	r0, [r4, #0]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d13f      	bne.n	800227c <_printf_i+0x17c>
 80021fc:	2d00      	cmp	r5, #0
 80021fe:	f040 8095 	bne.w	800232c <_printf_i+0x22c>
 8002202:	4675      	mov	r5, lr
 8002204:	2a08      	cmp	r2, #8
 8002206:	d10b      	bne.n	8002220 <_printf_i+0x120>
 8002208:	6823      	ldr	r3, [r4, #0]
 800220a:	07da      	lsls	r2, r3, #31
 800220c:	d508      	bpl.n	8002220 <_printf_i+0x120>
 800220e:	6923      	ldr	r3, [r4, #16]
 8002210:	6862      	ldr	r2, [r4, #4]
 8002212:	429a      	cmp	r2, r3
 8002214:	bfde      	ittt	le
 8002216:	2330      	movle	r3, #48	; 0x30
 8002218:	f805 3c01 	strble.w	r3, [r5, #-1]
 800221c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002220:	ebae 0305 	sub.w	r3, lr, r5
 8002224:	6123      	str	r3, [r4, #16]
 8002226:	f8cd 8000 	str.w	r8, [sp]
 800222a:	463b      	mov	r3, r7
 800222c:	aa03      	add	r2, sp, #12
 800222e:	4621      	mov	r1, r4
 8002230:	4630      	mov	r0, r6
 8002232:	f7ff feef 	bl	8002014 <_printf_common>
 8002236:	3001      	adds	r0, #1
 8002238:	d155      	bne.n	80022e6 <_printf_i+0x1e6>
 800223a:	f04f 30ff 	mov.w	r0, #4294967295
 800223e:	b005      	add	sp, #20
 8002240:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002244:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8002248:	493c      	ldr	r1, [pc, #240]	; (800233c <_printf_i+0x23c>)
 800224a:	6822      	ldr	r2, [r4, #0]
 800224c:	6818      	ldr	r0, [r3, #0]
 800224e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002252:	f100 0504 	add.w	r5, r0, #4
 8002256:	601d      	str	r5, [r3, #0]
 8002258:	d001      	beq.n	800225e <_printf_i+0x15e>
 800225a:	6803      	ldr	r3, [r0, #0]
 800225c:	e002      	b.n	8002264 <_printf_i+0x164>
 800225e:	0655      	lsls	r5, r2, #25
 8002260:	d5fb      	bpl.n	800225a <_printf_i+0x15a>
 8002262:	8803      	ldrh	r3, [r0, #0]
 8002264:	07d0      	lsls	r0, r2, #31
 8002266:	bf44      	itt	mi
 8002268:	f042 0220 	orrmi.w	r2, r2, #32
 800226c:	6022      	strmi	r2, [r4, #0]
 800226e:	b91b      	cbnz	r3, 8002278 <_printf_i+0x178>
 8002270:	6822      	ldr	r2, [r4, #0]
 8002272:	f022 0220 	bic.w	r2, r2, #32
 8002276:	6022      	str	r2, [r4, #0]
 8002278:	2210      	movs	r2, #16
 800227a:	e7b1      	b.n	80021e0 <_printf_i+0xe0>
 800227c:	4675      	mov	r5, lr
 800227e:	fbb3 f0f2 	udiv	r0, r3, r2
 8002282:	fb02 3310 	mls	r3, r2, r0, r3
 8002286:	5ccb      	ldrb	r3, [r1, r3]
 8002288:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800228c:	4603      	mov	r3, r0
 800228e:	2800      	cmp	r0, #0
 8002290:	d1f5      	bne.n	800227e <_printf_i+0x17e>
 8002292:	e7b7      	b.n	8002204 <_printf_i+0x104>
 8002294:	6808      	ldr	r0, [r1, #0]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	6949      	ldr	r1, [r1, #20]
 800229a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800229e:	d004      	beq.n	80022aa <_printf_i+0x1aa>
 80022a0:	1d10      	adds	r0, r2, #4
 80022a2:	6018      	str	r0, [r3, #0]
 80022a4:	6813      	ldr	r3, [r2, #0]
 80022a6:	6019      	str	r1, [r3, #0]
 80022a8:	e007      	b.n	80022ba <_printf_i+0x1ba>
 80022aa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80022ae:	f102 0004 	add.w	r0, r2, #4
 80022b2:	6018      	str	r0, [r3, #0]
 80022b4:	6813      	ldr	r3, [r2, #0]
 80022b6:	d0f6      	beq.n	80022a6 <_printf_i+0x1a6>
 80022b8:	8019      	strh	r1, [r3, #0]
 80022ba:	2300      	movs	r3, #0
 80022bc:	6123      	str	r3, [r4, #16]
 80022be:	4675      	mov	r5, lr
 80022c0:	e7b1      	b.n	8002226 <_printf_i+0x126>
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	1d11      	adds	r1, r2, #4
 80022c6:	6019      	str	r1, [r3, #0]
 80022c8:	6815      	ldr	r5, [r2, #0]
 80022ca:	6862      	ldr	r2, [r4, #4]
 80022cc:	2100      	movs	r1, #0
 80022ce:	4628      	mov	r0, r5
 80022d0:	f7fd ff9e 	bl	8000210 <memchr>
 80022d4:	b108      	cbz	r0, 80022da <_printf_i+0x1da>
 80022d6:	1b40      	subs	r0, r0, r5
 80022d8:	6060      	str	r0, [r4, #4]
 80022da:	6863      	ldr	r3, [r4, #4]
 80022dc:	6123      	str	r3, [r4, #16]
 80022de:	2300      	movs	r3, #0
 80022e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80022e4:	e79f      	b.n	8002226 <_printf_i+0x126>
 80022e6:	6923      	ldr	r3, [r4, #16]
 80022e8:	462a      	mov	r2, r5
 80022ea:	4639      	mov	r1, r7
 80022ec:	4630      	mov	r0, r6
 80022ee:	47c0      	blx	r8
 80022f0:	3001      	adds	r0, #1
 80022f2:	d0a2      	beq.n	800223a <_printf_i+0x13a>
 80022f4:	6823      	ldr	r3, [r4, #0]
 80022f6:	079b      	lsls	r3, r3, #30
 80022f8:	d507      	bpl.n	800230a <_printf_i+0x20a>
 80022fa:	2500      	movs	r5, #0
 80022fc:	f104 0919 	add.w	r9, r4, #25
 8002300:	68e3      	ldr	r3, [r4, #12]
 8002302:	9a03      	ldr	r2, [sp, #12]
 8002304:	1a9b      	subs	r3, r3, r2
 8002306:	429d      	cmp	r5, r3
 8002308:	db05      	blt.n	8002316 <_printf_i+0x216>
 800230a:	68e0      	ldr	r0, [r4, #12]
 800230c:	9b03      	ldr	r3, [sp, #12]
 800230e:	4298      	cmp	r0, r3
 8002310:	bfb8      	it	lt
 8002312:	4618      	movlt	r0, r3
 8002314:	e793      	b.n	800223e <_printf_i+0x13e>
 8002316:	2301      	movs	r3, #1
 8002318:	464a      	mov	r2, r9
 800231a:	4639      	mov	r1, r7
 800231c:	4630      	mov	r0, r6
 800231e:	47c0      	blx	r8
 8002320:	3001      	adds	r0, #1
 8002322:	d08a      	beq.n	800223a <_printf_i+0x13a>
 8002324:	3501      	adds	r5, #1
 8002326:	e7eb      	b.n	8002300 <_printf_i+0x200>
 8002328:	2b00      	cmp	r3, #0
 800232a:	d1a7      	bne.n	800227c <_printf_i+0x17c>
 800232c:	780b      	ldrb	r3, [r1, #0]
 800232e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002332:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002336:	e765      	b.n	8002204 <_printf_i+0x104>
 8002338:	08002a46 	.word	0x08002a46
 800233c:	08002a35 	.word	0x08002a35

08002340 <_sbrk_r>:
 8002340:	b538      	push	{r3, r4, r5, lr}
 8002342:	4c06      	ldr	r4, [pc, #24]	; (800235c <_sbrk_r+0x1c>)
 8002344:	2300      	movs	r3, #0
 8002346:	4605      	mov	r5, r0
 8002348:	4608      	mov	r0, r1
 800234a:	6023      	str	r3, [r4, #0]
 800234c:	f000 fb02 	bl	8002954 <_sbrk>
 8002350:	1c43      	adds	r3, r0, #1
 8002352:	d102      	bne.n	800235a <_sbrk_r+0x1a>
 8002354:	6823      	ldr	r3, [r4, #0]
 8002356:	b103      	cbz	r3, 800235a <_sbrk_r+0x1a>
 8002358:	602b      	str	r3, [r5, #0]
 800235a:	bd38      	pop	{r3, r4, r5, pc}
 800235c:	20000124 	.word	0x20000124

08002360 <__sread>:
 8002360:	b510      	push	{r4, lr}
 8002362:	460c      	mov	r4, r1
 8002364:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002368:	f000 fa98 	bl	800289c <_read_r>
 800236c:	2800      	cmp	r0, #0
 800236e:	bfab      	itete	ge
 8002370:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002372:	89a3      	ldrhlt	r3, [r4, #12]
 8002374:	181b      	addge	r3, r3, r0
 8002376:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800237a:	bfac      	ite	ge
 800237c:	6563      	strge	r3, [r4, #84]	; 0x54
 800237e:	81a3      	strhlt	r3, [r4, #12]
 8002380:	bd10      	pop	{r4, pc}

08002382 <__swrite>:
 8002382:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002386:	461f      	mov	r7, r3
 8002388:	898b      	ldrh	r3, [r1, #12]
 800238a:	05db      	lsls	r3, r3, #23
 800238c:	4605      	mov	r5, r0
 800238e:	460c      	mov	r4, r1
 8002390:	4616      	mov	r6, r2
 8002392:	d505      	bpl.n	80023a0 <__swrite+0x1e>
 8002394:	2302      	movs	r3, #2
 8002396:	2200      	movs	r2, #0
 8002398:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800239c:	f000 f9b8 	bl	8002710 <_lseek_r>
 80023a0:	89a3      	ldrh	r3, [r4, #12]
 80023a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80023a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80023aa:	81a3      	strh	r3, [r4, #12]
 80023ac:	4632      	mov	r2, r6
 80023ae:	463b      	mov	r3, r7
 80023b0:	4628      	mov	r0, r5
 80023b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80023b6:	f000 b869 	b.w	800248c <_write_r>

080023ba <__sseek>:
 80023ba:	b510      	push	{r4, lr}
 80023bc:	460c      	mov	r4, r1
 80023be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80023c2:	f000 f9a5 	bl	8002710 <_lseek_r>
 80023c6:	1c43      	adds	r3, r0, #1
 80023c8:	89a3      	ldrh	r3, [r4, #12]
 80023ca:	bf15      	itete	ne
 80023cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80023ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80023d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80023d6:	81a3      	strheq	r3, [r4, #12]
 80023d8:	bf18      	it	ne
 80023da:	81a3      	strhne	r3, [r4, #12]
 80023dc:	bd10      	pop	{r4, pc}

080023de <__sclose>:
 80023de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80023e2:	f000 b8d3 	b.w	800258c <_close_r>
	...

080023e8 <__swbuf_r>:
 80023e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023ea:	460e      	mov	r6, r1
 80023ec:	4614      	mov	r4, r2
 80023ee:	4605      	mov	r5, r0
 80023f0:	b118      	cbz	r0, 80023fa <__swbuf_r+0x12>
 80023f2:	6983      	ldr	r3, [r0, #24]
 80023f4:	b90b      	cbnz	r3, 80023fa <__swbuf_r+0x12>
 80023f6:	f7ff fbdd 	bl	8001bb4 <__sinit>
 80023fa:	4b21      	ldr	r3, [pc, #132]	; (8002480 <__swbuf_r+0x98>)
 80023fc:	429c      	cmp	r4, r3
 80023fe:	d12a      	bne.n	8002456 <__swbuf_r+0x6e>
 8002400:	686c      	ldr	r4, [r5, #4]
 8002402:	69a3      	ldr	r3, [r4, #24]
 8002404:	60a3      	str	r3, [r4, #8]
 8002406:	89a3      	ldrh	r3, [r4, #12]
 8002408:	071a      	lsls	r2, r3, #28
 800240a:	d52e      	bpl.n	800246a <__swbuf_r+0x82>
 800240c:	6923      	ldr	r3, [r4, #16]
 800240e:	b363      	cbz	r3, 800246a <__swbuf_r+0x82>
 8002410:	6923      	ldr	r3, [r4, #16]
 8002412:	6820      	ldr	r0, [r4, #0]
 8002414:	1ac0      	subs	r0, r0, r3
 8002416:	6963      	ldr	r3, [r4, #20]
 8002418:	b2f6      	uxtb	r6, r6
 800241a:	4298      	cmp	r0, r3
 800241c:	4637      	mov	r7, r6
 800241e:	db04      	blt.n	800242a <__swbuf_r+0x42>
 8002420:	4621      	mov	r1, r4
 8002422:	4628      	mov	r0, r5
 8002424:	f000 f94a 	bl	80026bc <_fflush_r>
 8002428:	bb28      	cbnz	r0, 8002476 <__swbuf_r+0x8e>
 800242a:	68a3      	ldr	r3, [r4, #8]
 800242c:	3b01      	subs	r3, #1
 800242e:	60a3      	str	r3, [r4, #8]
 8002430:	6823      	ldr	r3, [r4, #0]
 8002432:	1c5a      	adds	r2, r3, #1
 8002434:	6022      	str	r2, [r4, #0]
 8002436:	701e      	strb	r6, [r3, #0]
 8002438:	6963      	ldr	r3, [r4, #20]
 800243a:	3001      	adds	r0, #1
 800243c:	4298      	cmp	r0, r3
 800243e:	d004      	beq.n	800244a <__swbuf_r+0x62>
 8002440:	89a3      	ldrh	r3, [r4, #12]
 8002442:	07db      	lsls	r3, r3, #31
 8002444:	d519      	bpl.n	800247a <__swbuf_r+0x92>
 8002446:	2e0a      	cmp	r6, #10
 8002448:	d117      	bne.n	800247a <__swbuf_r+0x92>
 800244a:	4621      	mov	r1, r4
 800244c:	4628      	mov	r0, r5
 800244e:	f000 f935 	bl	80026bc <_fflush_r>
 8002452:	b190      	cbz	r0, 800247a <__swbuf_r+0x92>
 8002454:	e00f      	b.n	8002476 <__swbuf_r+0x8e>
 8002456:	4b0b      	ldr	r3, [pc, #44]	; (8002484 <__swbuf_r+0x9c>)
 8002458:	429c      	cmp	r4, r3
 800245a:	d101      	bne.n	8002460 <__swbuf_r+0x78>
 800245c:	68ac      	ldr	r4, [r5, #8]
 800245e:	e7d0      	b.n	8002402 <__swbuf_r+0x1a>
 8002460:	4b09      	ldr	r3, [pc, #36]	; (8002488 <__swbuf_r+0xa0>)
 8002462:	429c      	cmp	r4, r3
 8002464:	bf08      	it	eq
 8002466:	68ec      	ldreq	r4, [r5, #12]
 8002468:	e7cb      	b.n	8002402 <__swbuf_r+0x1a>
 800246a:	4621      	mov	r1, r4
 800246c:	4628      	mov	r0, r5
 800246e:	f000 f81f 	bl	80024b0 <__swsetup_r>
 8002472:	2800      	cmp	r0, #0
 8002474:	d0cc      	beq.n	8002410 <__swbuf_r+0x28>
 8002476:	f04f 37ff 	mov.w	r7, #4294967295
 800247a:	4638      	mov	r0, r7
 800247c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800247e:	bf00      	nop
 8002480:	080029e0 	.word	0x080029e0
 8002484:	08002a00 	.word	0x08002a00
 8002488:	080029c0 	.word	0x080029c0

0800248c <_write_r>:
 800248c:	b538      	push	{r3, r4, r5, lr}
 800248e:	4c07      	ldr	r4, [pc, #28]	; (80024ac <_write_r+0x20>)
 8002490:	4605      	mov	r5, r0
 8002492:	4608      	mov	r0, r1
 8002494:	4611      	mov	r1, r2
 8002496:	2200      	movs	r2, #0
 8002498:	6022      	str	r2, [r4, #0]
 800249a:	461a      	mov	r2, r3
 800249c:	f7ff f8e8 	bl	8001670 <_write>
 80024a0:	1c43      	adds	r3, r0, #1
 80024a2:	d102      	bne.n	80024aa <_write_r+0x1e>
 80024a4:	6823      	ldr	r3, [r4, #0]
 80024a6:	b103      	cbz	r3, 80024aa <_write_r+0x1e>
 80024a8:	602b      	str	r3, [r5, #0]
 80024aa:	bd38      	pop	{r3, r4, r5, pc}
 80024ac:	20000124 	.word	0x20000124

080024b0 <__swsetup_r>:
 80024b0:	4b32      	ldr	r3, [pc, #200]	; (800257c <__swsetup_r+0xcc>)
 80024b2:	b570      	push	{r4, r5, r6, lr}
 80024b4:	681d      	ldr	r5, [r3, #0]
 80024b6:	4606      	mov	r6, r0
 80024b8:	460c      	mov	r4, r1
 80024ba:	b125      	cbz	r5, 80024c6 <__swsetup_r+0x16>
 80024bc:	69ab      	ldr	r3, [r5, #24]
 80024be:	b913      	cbnz	r3, 80024c6 <__swsetup_r+0x16>
 80024c0:	4628      	mov	r0, r5
 80024c2:	f7ff fb77 	bl	8001bb4 <__sinit>
 80024c6:	4b2e      	ldr	r3, [pc, #184]	; (8002580 <__swsetup_r+0xd0>)
 80024c8:	429c      	cmp	r4, r3
 80024ca:	d10f      	bne.n	80024ec <__swsetup_r+0x3c>
 80024cc:	686c      	ldr	r4, [r5, #4]
 80024ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80024d2:	b29a      	uxth	r2, r3
 80024d4:	0715      	lsls	r5, r2, #28
 80024d6:	d42c      	bmi.n	8002532 <__swsetup_r+0x82>
 80024d8:	06d0      	lsls	r0, r2, #27
 80024da:	d411      	bmi.n	8002500 <__swsetup_r+0x50>
 80024dc:	2209      	movs	r2, #9
 80024de:	6032      	str	r2, [r6, #0]
 80024e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024e4:	81a3      	strh	r3, [r4, #12]
 80024e6:	f04f 30ff 	mov.w	r0, #4294967295
 80024ea:	bd70      	pop	{r4, r5, r6, pc}
 80024ec:	4b25      	ldr	r3, [pc, #148]	; (8002584 <__swsetup_r+0xd4>)
 80024ee:	429c      	cmp	r4, r3
 80024f0:	d101      	bne.n	80024f6 <__swsetup_r+0x46>
 80024f2:	68ac      	ldr	r4, [r5, #8]
 80024f4:	e7eb      	b.n	80024ce <__swsetup_r+0x1e>
 80024f6:	4b24      	ldr	r3, [pc, #144]	; (8002588 <__swsetup_r+0xd8>)
 80024f8:	429c      	cmp	r4, r3
 80024fa:	bf08      	it	eq
 80024fc:	68ec      	ldreq	r4, [r5, #12]
 80024fe:	e7e6      	b.n	80024ce <__swsetup_r+0x1e>
 8002500:	0751      	lsls	r1, r2, #29
 8002502:	d512      	bpl.n	800252a <__swsetup_r+0x7a>
 8002504:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002506:	b141      	cbz	r1, 800251a <__swsetup_r+0x6a>
 8002508:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800250c:	4299      	cmp	r1, r3
 800250e:	d002      	beq.n	8002516 <__swsetup_r+0x66>
 8002510:	4630      	mov	r0, r6
 8002512:	f000 f975 	bl	8002800 <_free_r>
 8002516:	2300      	movs	r3, #0
 8002518:	6363      	str	r3, [r4, #52]	; 0x34
 800251a:	89a3      	ldrh	r3, [r4, #12]
 800251c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002520:	81a3      	strh	r3, [r4, #12]
 8002522:	2300      	movs	r3, #0
 8002524:	6063      	str	r3, [r4, #4]
 8002526:	6923      	ldr	r3, [r4, #16]
 8002528:	6023      	str	r3, [r4, #0]
 800252a:	89a3      	ldrh	r3, [r4, #12]
 800252c:	f043 0308 	orr.w	r3, r3, #8
 8002530:	81a3      	strh	r3, [r4, #12]
 8002532:	6923      	ldr	r3, [r4, #16]
 8002534:	b94b      	cbnz	r3, 800254a <__swsetup_r+0x9a>
 8002536:	89a3      	ldrh	r3, [r4, #12]
 8002538:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800253c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002540:	d003      	beq.n	800254a <__swsetup_r+0x9a>
 8002542:	4621      	mov	r1, r4
 8002544:	4630      	mov	r0, r6
 8002546:	f000 f919 	bl	800277c <__smakebuf_r>
 800254a:	89a2      	ldrh	r2, [r4, #12]
 800254c:	f012 0301 	ands.w	r3, r2, #1
 8002550:	d00c      	beq.n	800256c <__swsetup_r+0xbc>
 8002552:	2300      	movs	r3, #0
 8002554:	60a3      	str	r3, [r4, #8]
 8002556:	6963      	ldr	r3, [r4, #20]
 8002558:	425b      	negs	r3, r3
 800255a:	61a3      	str	r3, [r4, #24]
 800255c:	6923      	ldr	r3, [r4, #16]
 800255e:	b953      	cbnz	r3, 8002576 <__swsetup_r+0xc6>
 8002560:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002564:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8002568:	d1ba      	bne.n	80024e0 <__swsetup_r+0x30>
 800256a:	bd70      	pop	{r4, r5, r6, pc}
 800256c:	0792      	lsls	r2, r2, #30
 800256e:	bf58      	it	pl
 8002570:	6963      	ldrpl	r3, [r4, #20]
 8002572:	60a3      	str	r3, [r4, #8]
 8002574:	e7f2      	b.n	800255c <__swsetup_r+0xac>
 8002576:	2000      	movs	r0, #0
 8002578:	e7f7      	b.n	800256a <__swsetup_r+0xba>
 800257a:	bf00      	nop
 800257c:	2000000c 	.word	0x2000000c
 8002580:	080029e0 	.word	0x080029e0
 8002584:	08002a00 	.word	0x08002a00
 8002588:	080029c0 	.word	0x080029c0

0800258c <_close_r>:
 800258c:	b538      	push	{r3, r4, r5, lr}
 800258e:	4c06      	ldr	r4, [pc, #24]	; (80025a8 <_close_r+0x1c>)
 8002590:	2300      	movs	r3, #0
 8002592:	4605      	mov	r5, r0
 8002594:	4608      	mov	r0, r1
 8002596:	6023      	str	r3, [r4, #0]
 8002598:	f000 f9b4 	bl	8002904 <_close>
 800259c:	1c43      	adds	r3, r0, #1
 800259e:	d102      	bne.n	80025a6 <_close_r+0x1a>
 80025a0:	6823      	ldr	r3, [r4, #0]
 80025a2:	b103      	cbz	r3, 80025a6 <_close_r+0x1a>
 80025a4:	602b      	str	r3, [r5, #0]
 80025a6:	bd38      	pop	{r3, r4, r5, pc}
 80025a8:	20000124 	.word	0x20000124

080025ac <__sflush_r>:
 80025ac:	898a      	ldrh	r2, [r1, #12]
 80025ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80025b2:	4605      	mov	r5, r0
 80025b4:	0710      	lsls	r0, r2, #28
 80025b6:	460c      	mov	r4, r1
 80025b8:	d45a      	bmi.n	8002670 <__sflush_r+0xc4>
 80025ba:	684b      	ldr	r3, [r1, #4]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	dc05      	bgt.n	80025cc <__sflush_r+0x20>
 80025c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	dc02      	bgt.n	80025cc <__sflush_r+0x20>
 80025c6:	2000      	movs	r0, #0
 80025c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80025cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80025ce:	2e00      	cmp	r6, #0
 80025d0:	d0f9      	beq.n	80025c6 <__sflush_r+0x1a>
 80025d2:	2300      	movs	r3, #0
 80025d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80025d8:	682f      	ldr	r7, [r5, #0]
 80025da:	602b      	str	r3, [r5, #0]
 80025dc:	d033      	beq.n	8002646 <__sflush_r+0x9a>
 80025de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80025e0:	89a3      	ldrh	r3, [r4, #12]
 80025e2:	075a      	lsls	r2, r3, #29
 80025e4:	d505      	bpl.n	80025f2 <__sflush_r+0x46>
 80025e6:	6863      	ldr	r3, [r4, #4]
 80025e8:	1ac0      	subs	r0, r0, r3
 80025ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80025ec:	b10b      	cbz	r3, 80025f2 <__sflush_r+0x46>
 80025ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80025f0:	1ac0      	subs	r0, r0, r3
 80025f2:	2300      	movs	r3, #0
 80025f4:	4602      	mov	r2, r0
 80025f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80025f8:	6a21      	ldr	r1, [r4, #32]
 80025fa:	4628      	mov	r0, r5
 80025fc:	47b0      	blx	r6
 80025fe:	1c43      	adds	r3, r0, #1
 8002600:	89a3      	ldrh	r3, [r4, #12]
 8002602:	d106      	bne.n	8002612 <__sflush_r+0x66>
 8002604:	6829      	ldr	r1, [r5, #0]
 8002606:	291d      	cmp	r1, #29
 8002608:	d84b      	bhi.n	80026a2 <__sflush_r+0xf6>
 800260a:	4a2b      	ldr	r2, [pc, #172]	; (80026b8 <__sflush_r+0x10c>)
 800260c:	40ca      	lsrs	r2, r1
 800260e:	07d6      	lsls	r6, r2, #31
 8002610:	d547      	bpl.n	80026a2 <__sflush_r+0xf6>
 8002612:	2200      	movs	r2, #0
 8002614:	6062      	str	r2, [r4, #4]
 8002616:	04d9      	lsls	r1, r3, #19
 8002618:	6922      	ldr	r2, [r4, #16]
 800261a:	6022      	str	r2, [r4, #0]
 800261c:	d504      	bpl.n	8002628 <__sflush_r+0x7c>
 800261e:	1c42      	adds	r2, r0, #1
 8002620:	d101      	bne.n	8002626 <__sflush_r+0x7a>
 8002622:	682b      	ldr	r3, [r5, #0]
 8002624:	b903      	cbnz	r3, 8002628 <__sflush_r+0x7c>
 8002626:	6560      	str	r0, [r4, #84]	; 0x54
 8002628:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800262a:	602f      	str	r7, [r5, #0]
 800262c:	2900      	cmp	r1, #0
 800262e:	d0ca      	beq.n	80025c6 <__sflush_r+0x1a>
 8002630:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002634:	4299      	cmp	r1, r3
 8002636:	d002      	beq.n	800263e <__sflush_r+0x92>
 8002638:	4628      	mov	r0, r5
 800263a:	f000 f8e1 	bl	8002800 <_free_r>
 800263e:	2000      	movs	r0, #0
 8002640:	6360      	str	r0, [r4, #52]	; 0x34
 8002642:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002646:	6a21      	ldr	r1, [r4, #32]
 8002648:	2301      	movs	r3, #1
 800264a:	4628      	mov	r0, r5
 800264c:	47b0      	blx	r6
 800264e:	1c41      	adds	r1, r0, #1
 8002650:	d1c6      	bne.n	80025e0 <__sflush_r+0x34>
 8002652:	682b      	ldr	r3, [r5, #0]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d0c3      	beq.n	80025e0 <__sflush_r+0x34>
 8002658:	2b1d      	cmp	r3, #29
 800265a:	d001      	beq.n	8002660 <__sflush_r+0xb4>
 800265c:	2b16      	cmp	r3, #22
 800265e:	d101      	bne.n	8002664 <__sflush_r+0xb8>
 8002660:	602f      	str	r7, [r5, #0]
 8002662:	e7b0      	b.n	80025c6 <__sflush_r+0x1a>
 8002664:	89a3      	ldrh	r3, [r4, #12]
 8002666:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800266a:	81a3      	strh	r3, [r4, #12]
 800266c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002670:	690f      	ldr	r7, [r1, #16]
 8002672:	2f00      	cmp	r7, #0
 8002674:	d0a7      	beq.n	80025c6 <__sflush_r+0x1a>
 8002676:	0793      	lsls	r3, r2, #30
 8002678:	680e      	ldr	r6, [r1, #0]
 800267a:	bf08      	it	eq
 800267c:	694b      	ldreq	r3, [r1, #20]
 800267e:	600f      	str	r7, [r1, #0]
 8002680:	bf18      	it	ne
 8002682:	2300      	movne	r3, #0
 8002684:	eba6 0807 	sub.w	r8, r6, r7
 8002688:	608b      	str	r3, [r1, #8]
 800268a:	f1b8 0f00 	cmp.w	r8, #0
 800268e:	dd9a      	ble.n	80025c6 <__sflush_r+0x1a>
 8002690:	4643      	mov	r3, r8
 8002692:	463a      	mov	r2, r7
 8002694:	6a21      	ldr	r1, [r4, #32]
 8002696:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002698:	4628      	mov	r0, r5
 800269a:	47b0      	blx	r6
 800269c:	2800      	cmp	r0, #0
 800269e:	dc07      	bgt.n	80026b0 <__sflush_r+0x104>
 80026a0:	89a3      	ldrh	r3, [r4, #12]
 80026a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026a6:	81a3      	strh	r3, [r4, #12]
 80026a8:	f04f 30ff 	mov.w	r0, #4294967295
 80026ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80026b0:	4407      	add	r7, r0
 80026b2:	eba8 0800 	sub.w	r8, r8, r0
 80026b6:	e7e8      	b.n	800268a <__sflush_r+0xde>
 80026b8:	20400001 	.word	0x20400001

080026bc <_fflush_r>:
 80026bc:	b538      	push	{r3, r4, r5, lr}
 80026be:	690b      	ldr	r3, [r1, #16]
 80026c0:	4605      	mov	r5, r0
 80026c2:	460c      	mov	r4, r1
 80026c4:	b1db      	cbz	r3, 80026fe <_fflush_r+0x42>
 80026c6:	b118      	cbz	r0, 80026d0 <_fflush_r+0x14>
 80026c8:	6983      	ldr	r3, [r0, #24]
 80026ca:	b90b      	cbnz	r3, 80026d0 <_fflush_r+0x14>
 80026cc:	f7ff fa72 	bl	8001bb4 <__sinit>
 80026d0:	4b0c      	ldr	r3, [pc, #48]	; (8002704 <_fflush_r+0x48>)
 80026d2:	429c      	cmp	r4, r3
 80026d4:	d109      	bne.n	80026ea <_fflush_r+0x2e>
 80026d6:	686c      	ldr	r4, [r5, #4]
 80026d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80026dc:	b17b      	cbz	r3, 80026fe <_fflush_r+0x42>
 80026de:	4621      	mov	r1, r4
 80026e0:	4628      	mov	r0, r5
 80026e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80026e6:	f7ff bf61 	b.w	80025ac <__sflush_r>
 80026ea:	4b07      	ldr	r3, [pc, #28]	; (8002708 <_fflush_r+0x4c>)
 80026ec:	429c      	cmp	r4, r3
 80026ee:	d101      	bne.n	80026f4 <_fflush_r+0x38>
 80026f0:	68ac      	ldr	r4, [r5, #8]
 80026f2:	e7f1      	b.n	80026d8 <_fflush_r+0x1c>
 80026f4:	4b05      	ldr	r3, [pc, #20]	; (800270c <_fflush_r+0x50>)
 80026f6:	429c      	cmp	r4, r3
 80026f8:	bf08      	it	eq
 80026fa:	68ec      	ldreq	r4, [r5, #12]
 80026fc:	e7ec      	b.n	80026d8 <_fflush_r+0x1c>
 80026fe:	2000      	movs	r0, #0
 8002700:	bd38      	pop	{r3, r4, r5, pc}
 8002702:	bf00      	nop
 8002704:	080029e0 	.word	0x080029e0
 8002708:	08002a00 	.word	0x08002a00
 800270c:	080029c0 	.word	0x080029c0

08002710 <_lseek_r>:
 8002710:	b538      	push	{r3, r4, r5, lr}
 8002712:	4c07      	ldr	r4, [pc, #28]	; (8002730 <_lseek_r+0x20>)
 8002714:	4605      	mov	r5, r0
 8002716:	4608      	mov	r0, r1
 8002718:	4611      	mov	r1, r2
 800271a:	2200      	movs	r2, #0
 800271c:	6022      	str	r2, [r4, #0]
 800271e:	461a      	mov	r2, r3
 8002720:	f000 f908 	bl	8002934 <_lseek>
 8002724:	1c43      	adds	r3, r0, #1
 8002726:	d102      	bne.n	800272e <_lseek_r+0x1e>
 8002728:	6823      	ldr	r3, [r4, #0]
 800272a:	b103      	cbz	r3, 800272e <_lseek_r+0x1e>
 800272c:	602b      	str	r3, [r5, #0]
 800272e:	bd38      	pop	{r3, r4, r5, pc}
 8002730:	20000124 	.word	0x20000124

08002734 <__swhatbuf_r>:
 8002734:	b570      	push	{r4, r5, r6, lr}
 8002736:	460e      	mov	r6, r1
 8002738:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800273c:	2900      	cmp	r1, #0
 800273e:	b090      	sub	sp, #64	; 0x40
 8002740:	4614      	mov	r4, r2
 8002742:	461d      	mov	r5, r3
 8002744:	da07      	bge.n	8002756 <__swhatbuf_r+0x22>
 8002746:	2300      	movs	r3, #0
 8002748:	602b      	str	r3, [r5, #0]
 800274a:	89b3      	ldrh	r3, [r6, #12]
 800274c:	061a      	lsls	r2, r3, #24
 800274e:	d410      	bmi.n	8002772 <__swhatbuf_r+0x3e>
 8002750:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002754:	e00e      	b.n	8002774 <__swhatbuf_r+0x40>
 8002756:	aa01      	add	r2, sp, #4
 8002758:	f000 f8b2 	bl	80028c0 <_fstat_r>
 800275c:	2800      	cmp	r0, #0
 800275e:	dbf2      	blt.n	8002746 <__swhatbuf_r+0x12>
 8002760:	9a02      	ldr	r2, [sp, #8]
 8002762:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002766:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800276a:	425a      	negs	r2, r3
 800276c:	415a      	adcs	r2, r3
 800276e:	602a      	str	r2, [r5, #0]
 8002770:	e7ee      	b.n	8002750 <__swhatbuf_r+0x1c>
 8002772:	2340      	movs	r3, #64	; 0x40
 8002774:	2000      	movs	r0, #0
 8002776:	6023      	str	r3, [r4, #0]
 8002778:	b010      	add	sp, #64	; 0x40
 800277a:	bd70      	pop	{r4, r5, r6, pc}

0800277c <__smakebuf_r>:
 800277c:	898b      	ldrh	r3, [r1, #12]
 800277e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002780:	079d      	lsls	r5, r3, #30
 8002782:	4606      	mov	r6, r0
 8002784:	460c      	mov	r4, r1
 8002786:	d507      	bpl.n	8002798 <__smakebuf_r+0x1c>
 8002788:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800278c:	6023      	str	r3, [r4, #0]
 800278e:	6123      	str	r3, [r4, #16]
 8002790:	2301      	movs	r3, #1
 8002792:	6163      	str	r3, [r4, #20]
 8002794:	b002      	add	sp, #8
 8002796:	bd70      	pop	{r4, r5, r6, pc}
 8002798:	ab01      	add	r3, sp, #4
 800279a:	466a      	mov	r2, sp
 800279c:	f7ff ffca 	bl	8002734 <__swhatbuf_r>
 80027a0:	9900      	ldr	r1, [sp, #0]
 80027a2:	4605      	mov	r5, r0
 80027a4:	4630      	mov	r0, r6
 80027a6:	f7ff fa97 	bl	8001cd8 <_malloc_r>
 80027aa:	b948      	cbnz	r0, 80027c0 <__smakebuf_r+0x44>
 80027ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80027b0:	059a      	lsls	r2, r3, #22
 80027b2:	d4ef      	bmi.n	8002794 <__smakebuf_r+0x18>
 80027b4:	f023 0303 	bic.w	r3, r3, #3
 80027b8:	f043 0302 	orr.w	r3, r3, #2
 80027bc:	81a3      	strh	r3, [r4, #12]
 80027be:	e7e3      	b.n	8002788 <__smakebuf_r+0xc>
 80027c0:	4b0d      	ldr	r3, [pc, #52]	; (80027f8 <__smakebuf_r+0x7c>)
 80027c2:	62b3      	str	r3, [r6, #40]	; 0x28
 80027c4:	89a3      	ldrh	r3, [r4, #12]
 80027c6:	6020      	str	r0, [r4, #0]
 80027c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027cc:	81a3      	strh	r3, [r4, #12]
 80027ce:	9b00      	ldr	r3, [sp, #0]
 80027d0:	6163      	str	r3, [r4, #20]
 80027d2:	9b01      	ldr	r3, [sp, #4]
 80027d4:	6120      	str	r0, [r4, #16]
 80027d6:	b15b      	cbz	r3, 80027f0 <__smakebuf_r+0x74>
 80027d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80027dc:	4630      	mov	r0, r6
 80027de:	f000 f881 	bl	80028e4 <_isatty_r>
 80027e2:	b128      	cbz	r0, 80027f0 <__smakebuf_r+0x74>
 80027e4:	89a3      	ldrh	r3, [r4, #12]
 80027e6:	f023 0303 	bic.w	r3, r3, #3
 80027ea:	f043 0301 	orr.w	r3, r3, #1
 80027ee:	81a3      	strh	r3, [r4, #12]
 80027f0:	89a3      	ldrh	r3, [r4, #12]
 80027f2:	431d      	orrs	r5, r3
 80027f4:	81a5      	strh	r5, [r4, #12]
 80027f6:	e7cd      	b.n	8002794 <__smakebuf_r+0x18>
 80027f8:	08001b35 	.word	0x08001b35

080027fc <__malloc_lock>:
 80027fc:	4770      	bx	lr

080027fe <__malloc_unlock>:
 80027fe:	4770      	bx	lr

08002800 <_free_r>:
 8002800:	b538      	push	{r3, r4, r5, lr}
 8002802:	4605      	mov	r5, r0
 8002804:	2900      	cmp	r1, #0
 8002806:	d045      	beq.n	8002894 <_free_r+0x94>
 8002808:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800280c:	1f0c      	subs	r4, r1, #4
 800280e:	2b00      	cmp	r3, #0
 8002810:	bfb8      	it	lt
 8002812:	18e4      	addlt	r4, r4, r3
 8002814:	f7ff fff2 	bl	80027fc <__malloc_lock>
 8002818:	4a1f      	ldr	r2, [pc, #124]	; (8002898 <_free_r+0x98>)
 800281a:	6813      	ldr	r3, [r2, #0]
 800281c:	4610      	mov	r0, r2
 800281e:	b933      	cbnz	r3, 800282e <_free_r+0x2e>
 8002820:	6063      	str	r3, [r4, #4]
 8002822:	6014      	str	r4, [r2, #0]
 8002824:	4628      	mov	r0, r5
 8002826:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800282a:	f7ff bfe8 	b.w	80027fe <__malloc_unlock>
 800282e:	42a3      	cmp	r3, r4
 8002830:	d90c      	bls.n	800284c <_free_r+0x4c>
 8002832:	6821      	ldr	r1, [r4, #0]
 8002834:	1862      	adds	r2, r4, r1
 8002836:	4293      	cmp	r3, r2
 8002838:	bf04      	itt	eq
 800283a:	681a      	ldreq	r2, [r3, #0]
 800283c:	685b      	ldreq	r3, [r3, #4]
 800283e:	6063      	str	r3, [r4, #4]
 8002840:	bf04      	itt	eq
 8002842:	1852      	addeq	r2, r2, r1
 8002844:	6022      	streq	r2, [r4, #0]
 8002846:	6004      	str	r4, [r0, #0]
 8002848:	e7ec      	b.n	8002824 <_free_r+0x24>
 800284a:	4613      	mov	r3, r2
 800284c:	685a      	ldr	r2, [r3, #4]
 800284e:	b10a      	cbz	r2, 8002854 <_free_r+0x54>
 8002850:	42a2      	cmp	r2, r4
 8002852:	d9fa      	bls.n	800284a <_free_r+0x4a>
 8002854:	6819      	ldr	r1, [r3, #0]
 8002856:	1858      	adds	r0, r3, r1
 8002858:	42a0      	cmp	r0, r4
 800285a:	d10b      	bne.n	8002874 <_free_r+0x74>
 800285c:	6820      	ldr	r0, [r4, #0]
 800285e:	4401      	add	r1, r0
 8002860:	1858      	adds	r0, r3, r1
 8002862:	4282      	cmp	r2, r0
 8002864:	6019      	str	r1, [r3, #0]
 8002866:	d1dd      	bne.n	8002824 <_free_r+0x24>
 8002868:	6810      	ldr	r0, [r2, #0]
 800286a:	6852      	ldr	r2, [r2, #4]
 800286c:	605a      	str	r2, [r3, #4]
 800286e:	4401      	add	r1, r0
 8002870:	6019      	str	r1, [r3, #0]
 8002872:	e7d7      	b.n	8002824 <_free_r+0x24>
 8002874:	d902      	bls.n	800287c <_free_r+0x7c>
 8002876:	230c      	movs	r3, #12
 8002878:	602b      	str	r3, [r5, #0]
 800287a:	e7d3      	b.n	8002824 <_free_r+0x24>
 800287c:	6820      	ldr	r0, [r4, #0]
 800287e:	1821      	adds	r1, r4, r0
 8002880:	428a      	cmp	r2, r1
 8002882:	bf04      	itt	eq
 8002884:	6811      	ldreq	r1, [r2, #0]
 8002886:	6852      	ldreq	r2, [r2, #4]
 8002888:	6062      	str	r2, [r4, #4]
 800288a:	bf04      	itt	eq
 800288c:	1809      	addeq	r1, r1, r0
 800288e:	6021      	streq	r1, [r4, #0]
 8002890:	605c      	str	r4, [r3, #4]
 8002892:	e7c7      	b.n	8002824 <_free_r+0x24>
 8002894:	bd38      	pop	{r3, r4, r5, pc}
 8002896:	bf00      	nop
 8002898:	2000008c 	.word	0x2000008c

0800289c <_read_r>:
 800289c:	b538      	push	{r3, r4, r5, lr}
 800289e:	4c07      	ldr	r4, [pc, #28]	; (80028bc <_read_r+0x20>)
 80028a0:	4605      	mov	r5, r0
 80028a2:	4608      	mov	r0, r1
 80028a4:	4611      	mov	r1, r2
 80028a6:	2200      	movs	r2, #0
 80028a8:	6022      	str	r2, [r4, #0]
 80028aa:	461a      	mov	r2, r3
 80028ac:	f000 f84a 	bl	8002944 <_read>
 80028b0:	1c43      	adds	r3, r0, #1
 80028b2:	d102      	bne.n	80028ba <_read_r+0x1e>
 80028b4:	6823      	ldr	r3, [r4, #0]
 80028b6:	b103      	cbz	r3, 80028ba <_read_r+0x1e>
 80028b8:	602b      	str	r3, [r5, #0]
 80028ba:	bd38      	pop	{r3, r4, r5, pc}
 80028bc:	20000124 	.word	0x20000124

080028c0 <_fstat_r>:
 80028c0:	b538      	push	{r3, r4, r5, lr}
 80028c2:	4c07      	ldr	r4, [pc, #28]	; (80028e0 <_fstat_r+0x20>)
 80028c4:	2300      	movs	r3, #0
 80028c6:	4605      	mov	r5, r0
 80028c8:	4608      	mov	r0, r1
 80028ca:	4611      	mov	r1, r2
 80028cc:	6023      	str	r3, [r4, #0]
 80028ce:	f000 f821 	bl	8002914 <_fstat>
 80028d2:	1c43      	adds	r3, r0, #1
 80028d4:	d102      	bne.n	80028dc <_fstat_r+0x1c>
 80028d6:	6823      	ldr	r3, [r4, #0]
 80028d8:	b103      	cbz	r3, 80028dc <_fstat_r+0x1c>
 80028da:	602b      	str	r3, [r5, #0]
 80028dc:	bd38      	pop	{r3, r4, r5, pc}
 80028de:	bf00      	nop
 80028e0:	20000124 	.word	0x20000124

080028e4 <_isatty_r>:
 80028e4:	b538      	push	{r3, r4, r5, lr}
 80028e6:	4c06      	ldr	r4, [pc, #24]	; (8002900 <_isatty_r+0x1c>)
 80028e8:	2300      	movs	r3, #0
 80028ea:	4605      	mov	r5, r0
 80028ec:	4608      	mov	r0, r1
 80028ee:	6023      	str	r3, [r4, #0]
 80028f0:	f000 f818 	bl	8002924 <_isatty>
 80028f4:	1c43      	adds	r3, r0, #1
 80028f6:	d102      	bne.n	80028fe <_isatty_r+0x1a>
 80028f8:	6823      	ldr	r3, [r4, #0]
 80028fa:	b103      	cbz	r3, 80028fe <_isatty_r+0x1a>
 80028fc:	602b      	str	r3, [r5, #0]
 80028fe:	bd38      	pop	{r3, r4, r5, pc}
 8002900:	20000124 	.word	0x20000124

08002904 <_close>:
 8002904:	4b02      	ldr	r3, [pc, #8]	; (8002910 <_close+0xc>)
 8002906:	2258      	movs	r2, #88	; 0x58
 8002908:	601a      	str	r2, [r3, #0]
 800290a:	f04f 30ff 	mov.w	r0, #4294967295
 800290e:	4770      	bx	lr
 8002910:	20000124 	.word	0x20000124

08002914 <_fstat>:
 8002914:	4b02      	ldr	r3, [pc, #8]	; (8002920 <_fstat+0xc>)
 8002916:	2258      	movs	r2, #88	; 0x58
 8002918:	601a      	str	r2, [r3, #0]
 800291a:	f04f 30ff 	mov.w	r0, #4294967295
 800291e:	4770      	bx	lr
 8002920:	20000124 	.word	0x20000124

08002924 <_isatty>:
 8002924:	4b02      	ldr	r3, [pc, #8]	; (8002930 <_isatty+0xc>)
 8002926:	2258      	movs	r2, #88	; 0x58
 8002928:	601a      	str	r2, [r3, #0]
 800292a:	2000      	movs	r0, #0
 800292c:	4770      	bx	lr
 800292e:	bf00      	nop
 8002930:	20000124 	.word	0x20000124

08002934 <_lseek>:
 8002934:	4b02      	ldr	r3, [pc, #8]	; (8002940 <_lseek+0xc>)
 8002936:	2258      	movs	r2, #88	; 0x58
 8002938:	601a      	str	r2, [r3, #0]
 800293a:	f04f 30ff 	mov.w	r0, #4294967295
 800293e:	4770      	bx	lr
 8002940:	20000124 	.word	0x20000124

08002944 <_read>:
 8002944:	4b02      	ldr	r3, [pc, #8]	; (8002950 <_read+0xc>)
 8002946:	2258      	movs	r2, #88	; 0x58
 8002948:	601a      	str	r2, [r3, #0]
 800294a:	f04f 30ff 	mov.w	r0, #4294967295
 800294e:	4770      	bx	lr
 8002950:	20000124 	.word	0x20000124

08002954 <_sbrk>:
 8002954:	4b04      	ldr	r3, [pc, #16]	; (8002968 <_sbrk+0x14>)
 8002956:	6819      	ldr	r1, [r3, #0]
 8002958:	4602      	mov	r2, r0
 800295a:	b909      	cbnz	r1, 8002960 <_sbrk+0xc>
 800295c:	4903      	ldr	r1, [pc, #12]	; (800296c <_sbrk+0x18>)
 800295e:	6019      	str	r1, [r3, #0]
 8002960:	6818      	ldr	r0, [r3, #0]
 8002962:	4402      	add	r2, r0
 8002964:	601a      	str	r2, [r3, #0]
 8002966:	4770      	bx	lr
 8002968:	20000094 	.word	0x20000094
 800296c:	20000128 	.word	0x20000128

08002970 <_init>:
 8002970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002972:	bf00      	nop
 8002974:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002976:	bc08      	pop	{r3}
 8002978:	469e      	mov	lr, r3
 800297a:	4770      	bx	lr

0800297c <_fini>:
 800297c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800297e:	bf00      	nop
 8002980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002982:	bc08      	pop	{r3}
 8002984:	469e      	mov	lr, r3
 8002986:	4770      	bx	lr
