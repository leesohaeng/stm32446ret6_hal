
STM_446RET6_SPL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000098c  080001c4  080001c4  000081c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000040c  08000b50  08000b50  00008b50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08000f5c  08000f5c  00008f5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000f60  08000f60  00008f60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  20000000  08000f64  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000030  20000010  08000f74  00010010  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  20000040  08000f74  00010040  2**0
                  ALLOC
  8 .ARM.attributes 00000032  00000000  00000000  00010010  2**0
                  CONTENTS, READONLY
  9 .debug_info   00004cb0  00000000  00000000  00010042  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000b1c  00000000  00000000  00014cf2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000006d0  00000000  00000000  00015810  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000648  00000000  00000000  00015ee0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00001fce  00000000  00000000  00016528  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000022ca  00000000  00000000  000184f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      000000f2  00000000  00000000  0001a7c0  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00001550  00000000  00000000  0001a8b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_loc    0000011c  00000000  00000000  0001be04  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000010 	.word	0x20000010
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000b38 	.word	0x08000b38

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	08000b38 	.word	0x08000b38
 8000200:	20000014 	.word	0x20000014

08000204 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000208:	4b15      	ldr	r3, [pc, #84]	; (8000260 <SystemInit+0x5c>)
 800020a:	4a15      	ldr	r2, [pc, #84]	; (8000260 <SystemInit+0x5c>)
 800020c:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8000210:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8000214:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000218:	4b12      	ldr	r3, [pc, #72]	; (8000264 <SystemInit+0x60>)
 800021a:	4a12      	ldr	r2, [pc, #72]	; (8000264 <SystemInit+0x60>)
 800021c:	6812      	ldr	r2, [r2, #0]
 800021e:	f042 0201 	orr.w	r2, r2, #1
 8000222:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000224:	4b0f      	ldr	r3, [pc, #60]	; (8000264 <SystemInit+0x60>)
 8000226:	2200      	movs	r2, #0
 8000228:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800022a:	4a0e      	ldr	r2, [pc, #56]	; (8000264 <SystemInit+0x60>)
 800022c:	4b0d      	ldr	r3, [pc, #52]	; (8000264 <SystemInit+0x60>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000234:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000238:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800023a:	4b0a      	ldr	r3, [pc, #40]	; (8000264 <SystemInit+0x60>)
 800023c:	4a0a      	ldr	r2, [pc, #40]	; (8000268 <SystemInit+0x64>)
 800023e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000240:	4b08      	ldr	r3, [pc, #32]	; (8000264 <SystemInit+0x60>)
 8000242:	4a08      	ldr	r2, [pc, #32]	; (8000264 <SystemInit+0x60>)
 8000244:	6812      	ldr	r2, [r2, #0]
 8000246:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800024a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800024c:	4b05      	ldr	r3, [pc, #20]	; (8000264 <SystemInit+0x60>)
 800024e:	2200      	movs	r2, #0
 8000250:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000252:	f000 f80b 	bl	800026c <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000256:	4b02      	ldr	r3, [pc, #8]	; (8000260 <SystemInit+0x5c>)
 8000258:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800025c:	609a      	str	r2, [r3, #8]
#endif
}
 800025e:	bd80      	pop	{r7, pc}
 8000260:	e000ed00 	.word	0xe000ed00
 8000264:	40023800 	.word	0x40023800
 8000268:	24003010 	.word	0x24003010

0800026c <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 800026c:	b480      	push	{r7}
 800026e:	b083      	sub	sp, #12
 8000270:	af00      	add	r7, sp, #0
#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F446xx)|| defined(STM32F469_479xx)
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000272:	2300      	movs	r3, #0
 8000274:	607b      	str	r3, [r7, #4]
 8000276:	2300      	movs	r3, #0
 8000278:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800027a:	4b42      	ldr	r3, [pc, #264]	; (8000384 <SetSysClock+0x118>)
 800027c:	4a41      	ldr	r2, [pc, #260]	; (8000384 <SetSysClock+0x118>)
 800027e:	6812      	ldr	r2, [r2, #0]
 8000280:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000284:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000286:	4b3f      	ldr	r3, [pc, #252]	; (8000384 <SetSysClock+0x118>)
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800028e:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	3301      	adds	r3, #1
 8000294:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000296:	683b      	ldr	r3, [r7, #0]
 8000298:	2b00      	cmp	r3, #0
 800029a:	d103      	bne.n	80002a4 <SetSysClock+0x38>
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80002a2:	d1f0      	bne.n	8000286 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80002a4:	4b37      	ldr	r3, [pc, #220]	; (8000384 <SetSysClock+0x118>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d002      	beq.n	80002b6 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80002b0:	2301      	movs	r3, #1
 80002b2:	603b      	str	r3, [r7, #0]
 80002b4:	e001      	b.n	80002ba <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80002b6:	2300      	movs	r3, #0
 80002b8:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 80002ba:	683b      	ldr	r3, [r7, #0]
 80002bc:	2b01      	cmp	r3, #1
 80002be:	d15c      	bne.n	800037a <SetSysClock+0x10e>
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80002c0:	4b30      	ldr	r3, [pc, #192]	; (8000384 <SetSysClock+0x118>)
 80002c2:	4a30      	ldr	r2, [pc, #192]	; (8000384 <SetSysClock+0x118>)
 80002c4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80002c6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80002ca:	641a      	str	r2, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 80002cc:	4b2e      	ldr	r3, [pc, #184]	; (8000388 <SetSysClock+0x11c>)
 80002ce:	4a2e      	ldr	r2, [pc, #184]	; (8000388 <SetSysClock+0x11c>)
 80002d0:	6812      	ldr	r2, [r2, #0]
 80002d2:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80002d6:	601a      	str	r2, [r3, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80002d8:	4b2a      	ldr	r3, [pc, #168]	; (8000384 <SetSysClock+0x118>)
 80002da:	4a2a      	ldr	r2, [pc, #168]	; (8000384 <SetSysClock+0x118>)
 80002dc:	6892      	ldr	r2, [r2, #8]
 80002de:	609a      	str	r2, [r3, #8]

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F446xx) || defined(STM32F469_479xx)    
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80002e0:	4b28      	ldr	r3, [pc, #160]	; (8000384 <SetSysClock+0x118>)
 80002e2:	4a28      	ldr	r2, [pc, #160]	; (8000384 <SetSysClock+0x118>)
 80002e4:	6892      	ldr	r2, [r2, #8]
 80002e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80002ea:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80002ec:	4b25      	ldr	r3, [pc, #148]	; (8000384 <SetSysClock+0x118>)
 80002ee:	4a25      	ldr	r2, [pc, #148]	; (8000384 <SetSysClock+0x118>)
 80002f0:	6892      	ldr	r2, [r2, #8]
 80002f2:	f442 52a0 	orr.w	r2, r2, #5120	; 0x1400
 80002f6:	609a      	str	r2, [r3, #8]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);
#endif /* STM32F40_41xxx || STM32F401xx || STM32F427_437x || STM32F429_439xx || STM32F469_479xx */

#if defined(STM32F446xx)
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80002f8:	4b22      	ldr	r3, [pc, #136]	; (8000384 <SetSysClock+0x118>)
 80002fa:	4a24      	ldr	r2, [pc, #144]	; (800038c <SetSysClock+0x120>)
 80002fc:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24) | (PLL_R << 28);
#endif /* STM32F446xx */    
    
    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80002fe:	4b21      	ldr	r3, [pc, #132]	; (8000384 <SetSysClock+0x118>)
 8000300:	4a20      	ldr	r2, [pc, #128]	; (8000384 <SetSysClock+0x118>)
 8000302:	6812      	ldr	r2, [r2, #0]
 8000304:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000308:	601a      	str	r2, [r3, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800030a:	bf00      	nop
 800030c:	4b1d      	ldr	r3, [pc, #116]	; (8000384 <SetSysClock+0x118>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000314:	2b00      	cmp	r3, #0
 8000316:	d0f9      	beq.n	800030c <SetSysClock+0xa0>
    {
    }
   
#if defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F446xx) || defined(STM32F469_479xx)
    /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
    PWR->CR |= PWR_CR_ODEN;
 8000318:	4b1b      	ldr	r3, [pc, #108]	; (8000388 <SetSysClock+0x11c>)
 800031a:	4a1b      	ldr	r2, [pc, #108]	; (8000388 <SetSysClock+0x11c>)
 800031c:	6812      	ldr	r2, [r2, #0]
 800031e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000322:	601a      	str	r2, [r3, #0]
    while((PWR->CSR & PWR_CSR_ODRDY) == 0)
 8000324:	bf00      	nop
 8000326:	4b18      	ldr	r3, [pc, #96]	; (8000388 <SetSysClock+0x11c>)
 8000328:	685b      	ldr	r3, [r3, #4]
 800032a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800032e:	2b00      	cmp	r3, #0
 8000330:	d0f9      	beq.n	8000326 <SetSysClock+0xba>
    {
    }
    PWR->CR |= PWR_CR_ODSWEN;
 8000332:	4b15      	ldr	r3, [pc, #84]	; (8000388 <SetSysClock+0x11c>)
 8000334:	4a14      	ldr	r2, [pc, #80]	; (8000388 <SetSysClock+0x11c>)
 8000336:	6812      	ldr	r2, [r2, #0]
 8000338:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800033c:	601a      	str	r2, [r3, #0]
    while((PWR->CSR & PWR_CSR_ODSWRDY) == 0)
 800033e:	bf00      	nop
 8000340:	4b11      	ldr	r3, [pc, #68]	; (8000388 <SetSysClock+0x11c>)
 8000342:	685b      	ldr	r3, [r3, #4]
 8000344:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000348:	2b00      	cmp	r3, #0
 800034a:	d0f9      	beq.n	8000340 <SetSysClock+0xd4>
    {
    }      
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 800034c:	4b10      	ldr	r3, [pc, #64]	; (8000390 <SetSysClock+0x124>)
 800034e:	f240 7205 	movw	r2, #1797	; 0x705
 8000352:	601a      	str	r2, [r3, #0]
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
#endif /* STM32F401xx */

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000354:	4b0b      	ldr	r3, [pc, #44]	; (8000384 <SetSysClock+0x118>)
 8000356:	4a0b      	ldr	r2, [pc, #44]	; (8000384 <SetSysClock+0x118>)
 8000358:	6892      	ldr	r2, [r2, #8]
 800035a:	f022 0203 	bic.w	r2, r2, #3
 800035e:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000360:	4b08      	ldr	r3, [pc, #32]	; (8000384 <SetSysClock+0x118>)
 8000362:	4a08      	ldr	r2, [pc, #32]	; (8000384 <SetSysClock+0x118>)
 8000364:	6892      	ldr	r2, [r2, #8]
 8000366:	f042 0202 	orr.w	r2, r2, #2
 800036a:	609a      	str	r2, [r3, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 800036c:	bf00      	nop
 800036e:	4b05      	ldr	r3, [pc, #20]	; (8000384 <SetSysClock+0x118>)
 8000370:	689b      	ldr	r3, [r3, #8]
 8000372:	f003 030c 	and.w	r3, r3, #12
 8000376:	2b08      	cmp	r3, #8
 8000378:	d1f9      	bne.n	800036e <SetSysClock+0x102>
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
  {
  }
#endif /* USE_HSE_BYPASS */  
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F469_479xx */  
}
 800037a:	370c      	adds	r7, #12
 800037c:	46bd      	mov	sp, r7
 800037e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000382:	4770      	bx	lr
 8000384:	40023800 	.word	0x40023800
 8000388:	40007000 	.word	0x40007000
 800038c:	77405a08 	.word	0x77405a08
 8000390:	40023c00 	.word	0x40023c00

08000394 <NMI_Handler>:
	loopCounter = d;
	while(loopCounter);
}

void NMI_Handler(void)
{
 8000394:	b480      	push	{r7}
 8000396:	af00      	add	r7, sp, #0
}
 8000398:	46bd      	mov	sp, r7
 800039a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039e:	4770      	bx	lr

080003a0 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80003a0:	b480      	push	{r7}
 80003a2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 80003a4:	e7fe      	b.n	80003a4 <HardFault_Handler+0x4>
 80003a6:	bf00      	nop

080003a8 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80003a8:	b480      	push	{r7}
 80003aa:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 80003ac:	e7fe      	b.n	80003ac <MemManage_Handler+0x4>
 80003ae:	bf00      	nop

080003b0 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80003b0:	b480      	push	{r7}
 80003b2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 80003b4:	e7fe      	b.n	80003b4 <BusFault_Handler+0x4>
 80003b6:	bf00      	nop

080003b8 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80003b8:	b480      	push	{r7}
 80003ba:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 80003bc:	e7fe      	b.n	80003bc <UsageFault_Handler+0x4>
 80003be:	bf00      	nop

080003c0 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80003c0:	b480      	push	{r7}
 80003c2:	af00      	add	r7, sp, #0
}
 80003c4:	46bd      	mov	sp, r7
 80003c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ca:	4770      	bx	lr

080003cc <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80003cc:	b480      	push	{r7}
 80003ce:	af00      	add	r7, sp, #0
}
 80003d0:	46bd      	mov	sp, r7
 80003d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d6:	4770      	bx	lr

080003d8 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80003d8:	b480      	push	{r7}
 80003da:	af00      	add	r7, sp, #0
}
 80003dc:	46bd      	mov	sp, r7
 80003de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e2:	4770      	bx	lr

080003e4 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80003e4:	b480      	push	{r7}
 80003e6:	af00      	add	r7, sp, #0
  // TimingDelay_Decrement();
  if(loopCounter) 	loopCounter--;
 80003e8:	4b06      	ldr	r3, [pc, #24]	; (8000404 <SysTick_Handler+0x20>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d004      	beq.n	80003fa <SysTick_Handler+0x16>
 80003f0:	4b04      	ldr	r3, [pc, #16]	; (8000404 <SysTick_Handler+0x20>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	1e5a      	subs	r2, r3, #1
 80003f6:	4b03      	ldr	r3, [pc, #12]	; (8000404 <SysTick_Handler+0x20>)
 80003f8:	601a      	str	r2, [r3, #0]
}
 80003fa:	46bd      	mov	sp, r7
 80003fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000400:	4770      	bx	lr
 8000402:	bf00      	nop
 8000404:	2000002c 	.word	0x2000002c

08000408 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000408:	f8df d03c 	ldr.w	sp, [pc, #60]	; 8000448 <LoopFillZerobss+0x16>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800040c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800040e:	f000 b804 	b.w	800041a <LoopCopyDataInit>

08000412 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000412:	4b0e      	ldr	r3, [pc, #56]	; (800044c <LoopFillZerobss+0x1a>)
  ldr  r3, [r3, r1]
 8000414:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000416:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000418:	3104      	adds	r1, #4

0800041a <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800041a:	480d      	ldr	r0, [pc, #52]	; (8000450 <LoopFillZerobss+0x1e>)
  ldr  r3, =_edata
 800041c:	4b0d      	ldr	r3, [pc, #52]	; (8000454 <LoopFillZerobss+0x22>)
  adds  r2, r0, r1
 800041e:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000420:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000422:	f4ff aff6 	bcc.w	8000412 <CopyDataInit>
  ldr  r2, =_sbss
 8000426:	4a0c      	ldr	r2, [pc, #48]	; (8000458 <LoopFillZerobss+0x26>)
  b  LoopFillZerobss
 8000428:	f000 b803 	b.w	8000432 <LoopFillZerobss>

0800042c <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800042c:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800042e:	f842 3b04 	str.w	r3, [r2], #4

08000432 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000432:	4b0a      	ldr	r3, [pc, #40]	; (800045c <LoopFillZerobss+0x2a>)
  cmp  r2, r3
 8000434:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000436:	f4ff aff9 	bcc.w	800042c <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800043a:	f7ff fee3 	bl	8000204 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800043e:	f000 fb55 	bl	8000aec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000442:	f000 f8af 	bl	80005a4 <main>
  bx  lr    
 8000446:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000448:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 800044c:	08000f64 	.word	0x08000f64
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000450:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000454:	20000010 	.word	0x20000010
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8000458:	20000010 	.word	0x20000010
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800045c:	20000040 	.word	0x20000040

08000460 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000460:	f7ff bffe 	b.w	8000460 <ADC_IRQHandler>

08000464 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000464:	b480      	push	{r7}
 8000466:	b083      	sub	sp, #12
 8000468:	af00      	add	r7, sp, #0
 800046a:	4603      	mov	r3, r0
 800046c:	6039      	str	r1, [r7, #0]
 800046e:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8000470:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000474:	2b00      	cmp	r3, #0
 8000476:	da0b      	bge.n	8000490 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000478:	490d      	ldr	r1, [pc, #52]	; (80004b0 <NVIC_SetPriority+0x4c>)
 800047a:	79fb      	ldrb	r3, [r7, #7]
 800047c:	f003 030f 	and.w	r3, r3, #15
 8000480:	3b04      	subs	r3, #4
 8000482:	683a      	ldr	r2, [r7, #0]
 8000484:	b2d2      	uxtb	r2, r2
 8000486:	0112      	lsls	r2, r2, #4
 8000488:	b2d2      	uxtb	r2, r2
 800048a:	440b      	add	r3, r1
 800048c:	761a      	strb	r2, [r3, #24]
 800048e:	e009      	b.n	80004a4 <NVIC_SetPriority+0x40>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8000490:	4908      	ldr	r1, [pc, #32]	; (80004b4 <NVIC_SetPriority+0x50>)
 8000492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000496:	683a      	ldr	r2, [r7, #0]
 8000498:	b2d2      	uxtb	r2, r2
 800049a:	0112      	lsls	r2, r2, #4
 800049c:	b2d2      	uxtb	r2, r2
 800049e:	440b      	add	r3, r1
 80004a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80004a4:	370c      	adds	r7, #12
 80004a6:	46bd      	mov	sp, r7
 80004a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ac:	4770      	bx	lr
 80004ae:	bf00      	nop
 80004b0:	e000ed00 	.word	0xe000ed00
 80004b4:	e000e100 	.word	0xe000e100

080004b8 <SysTick_Config>:
    function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	3b01      	subs	r3, #1
 80004c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80004c8:	d301      	bcc.n	80004ce <SysTick_Config+0x16>
 80004ca:	2301      	movs	r3, #1
 80004cc:	e00f      	b.n	80004ee <SysTick_Config+0x36>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 80004ce:	4b0a      	ldr	r3, [pc, #40]	; (80004f8 <SysTick_Config+0x40>)
 80004d0:	687a      	ldr	r2, [r7, #4]
 80004d2:	3a01      	subs	r2, #1
 80004d4:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
 80004d6:	f04f 30ff 	mov.w	r0, #4294967295
 80004da:	210f      	movs	r1, #15
 80004dc:	f7ff ffc2 	bl	8000464 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 80004e0:	4b05      	ldr	r3, [pc, #20]	; (80004f8 <SysTick_Config+0x40>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80004e6:	4b04      	ldr	r3, [pc, #16]	; (80004f8 <SysTick_Config+0x40>)
 80004e8:	2207      	movs	r2, #7
 80004ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 80004ec:	2300      	movs	r3, #0
}
 80004ee:	4618      	mov	r0, r3
 80004f0:	3708      	adds	r7, #8
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	e000e010 	.word	0xe000e010

080004fc <mDelay>:
              nCount--;
       }
}

void 		mDelay()
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
	__IO uint8_t t;
//	double       d;

	for(t=1;t<=100;t++) arm_sin_f32(t);
 8000502:	2301      	movs	r3, #1
 8000504:	71fb      	strb	r3, [r7, #7]
 8000506:	e00e      	b.n	8000526 <mDelay+0x2a>
 8000508:	79fb      	ldrb	r3, [r7, #7]
 800050a:	b2db      	uxtb	r3, r3
 800050c:	ee07 3a10 	vmov	s14, r3
 8000510:	eef8 7a47 	vcvt.f32.u32	s15, s14
 8000514:	eeb0 0a67 	vmov.f32	s0, s15
 8000518:	f000 fa7a 	bl	8000a10 <arm_sin_f32>
 800051c:	79fb      	ldrb	r3, [r7, #7]
 800051e:	b2db      	uxtb	r3, r3
 8000520:	3301      	adds	r3, #1
 8000522:	b2db      	uxtb	r3, r3
 8000524:	71fb      	strb	r3, [r7, #7]
 8000526:	79fb      	ldrb	r3, [r7, #7]
 8000528:	b2db      	uxtb	r3, r3
 800052a:	2b64      	cmp	r3, #100	; 0x64
 800052c:	d9ec      	bls.n	8000508 <mDelay+0xc>
}
 800052e:	3708      	adds	r7, #8
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}

08000534 <GPIOA_Init>:

void GPIOA_Init(void)                    // PA0  Input for User Button
{ 					                    // ResetClockControl RCC
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 800053a:	2001      	movs	r0, #1
 800053c:	2101      	movs	r1, #1
 800053e:	f000 f9a9 	bl	8000894 <RCC_AHB1PeriphClockCmd>

    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5;
 8000542:	2320      	movs	r3, #32
 8000544:	603b      	str	r3, [r7, #0]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8000546:	2303      	movs	r3, #3
 8000548:	717b      	strb	r3, [r7, #5]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 800054a:	2301      	movs	r3, #1
 800054c:	713b      	strb	r3, [r7, #4]
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800054e:	2300      	movs	r3, #0
 8000550:	71bb      	strb	r3, [r7, #6]
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000552:	2300      	movs	r3, #0
 8000554:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000556:	463b      	mov	r3, r7
 8000558:	4803      	ldr	r0, [pc, #12]	; (8000568 <GPIOA_Init+0x34>)
 800055a:	4619      	mov	r1, r3
 800055c:	f000 f9b8 	bl	80008d0 <GPIO_Init>
}
 8000560:	3708      	adds	r7, #8
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	40020000 	.word	0x40020000

0800056c <GPIOC_Init>:

void GPIOC_Init(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;

    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8000572:	2004      	movs	r0, #4
 8000574:	2101      	movs	r1, #1
 8000576:	f000 f98d 	bl	8000894 <RCC_AHB1PeriphClockCmd>

    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;
 800057a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800057e:	603b      	str	r3, [r7, #0]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8000580:	2303      	movs	r3, #3
 8000582:	717b      	strb	r3, [r7, #5]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8000584:	2301      	movs	r3, #1
 8000586:	713b      	strb	r3, [r7, #4]
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000588:	2300      	movs	r3, #0
 800058a:	71bb      	strb	r3, [r7, #6]
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 800058c:	2300      	movs	r3, #0
 800058e:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000590:	463b      	mov	r3, r7
 8000592:	4803      	ldr	r0, [pc, #12]	; (80005a0 <GPIOC_Init+0x34>)
 8000594:	4619      	mov	r1, r3
 8000596:	f000 f99b 	bl	80008d0 <GPIO_Init>
}
 800059a:	3708      	adds	r7, #8
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	40020800 	.word	0x40020800

080005a4 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0

  SystemInit();
 80005a8:	f7ff fe2c 	bl	8000204 <SystemInit>
  RCC_GetClocksFreq(&RCC_Clocks);
 80005ac:	480f      	ldr	r0, [pc, #60]	; (80005ec <main+0x48>)
 80005ae:	f000 f873 	bl	8000698 <RCC_GetClocksFreq>
  while(SysTick_Config(RCC_Clocks.HCLK_Frequency / 1000000));
 80005b2:	bf00      	nop
 80005b4:	4b0d      	ldr	r3, [pc, #52]	; (80005ec <main+0x48>)
 80005b6:	685a      	ldr	r2, [r3, #4]
 80005b8:	4b0d      	ldr	r3, [pc, #52]	; (80005f0 <main+0x4c>)
 80005ba:	fba3 1302 	umull	r1, r3, r3, r2
 80005be:	0c9b      	lsrs	r3, r3, #18
 80005c0:	4618      	mov	r0, r3
 80005c2:	f7ff ff79 	bl	80004b8 <SysTick_Config>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d1f3      	bne.n	80005b4 <main+0x10>
  /* Add your application code here */
  GPIOA_Init();
 80005cc:	f7ff ffb2 	bl	8000534 <GPIOA_Init>
  GPIOC_Init();
 80005d0:	f7ff ffcc 	bl	800056c <GPIOC_Init>
	  GPIO_ToggleBits( GPIOA, GPIO_Pin_5 );
	  GPIO_ToggleBits( GPIOC, GPIO_Pin_8 );
	  Delay(1000);
	  if(a>100) a = 0; */

	  GPIOA->BSRRL = GPIO_Pin_5;
 80005d4:	4b07      	ldr	r3, [pc, #28]	; (80005f4 <main+0x50>)
 80005d6:	2220      	movs	r2, #32
 80005d8:	831a      	strh	r2, [r3, #24]
	  mDelay();
 80005da:	f7ff ff8f 	bl	80004fc <mDelay>
	  GPIOA->BSRRH = GPIO_Pin_5;
 80005de:	4b05      	ldr	r3, [pc, #20]	; (80005f4 <main+0x50>)
 80005e0:	2220      	movs	r2, #32
 80005e2:	835a      	strh	r2, [r3, #26]
	  mDelay();
 80005e4:	f7ff ff8a 	bl	80004fc <mDelay>
  }
 80005e8:	e7f4      	b.n	80005d4 <main+0x30>
 80005ea:	bf00      	nop
 80005ec:	20000030 	.word	0x20000030
 80005f0:	431bde83 	.word	0x431bde83
 80005f4:	40020000 	.word	0x40020000

080005f8 <TIM2_IRQHandler>:
	NVIC_Init(&nvicStructure);

}

void	TIM2_IRQHandler()
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
	if(TIM_GetITStatus(TIM2, TIM_IT_Update)!=RESET)
 80005fc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000600:	2101      	movs	r1, #1
 8000602:	f000 f80f 	bl	8000624 <TIM_GetITStatus>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d008      	beq.n	800061e <TIM2_IRQHandler+0x26>
	{
		TIM_ClearITPendingBit(TIM2, TIM_IT_Update);
 800060c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000610:	2101      	movs	r1, #1
 8000612:	f000 f831 	bl	8000678 <TIM_ClearITPendingBit>
		GPIO_ToggleBits(GPIOA, GPIO_Pin_5);
 8000616:	4802      	ldr	r0, [pc, #8]	; (8000620 <TIM2_IRQHandler+0x28>)
 8000618:	2120      	movs	r1, #32
 800061a:	f000 f9e7 	bl	80009ec <GPIO_ToggleBits>
	}
}
 800061e:	bd80      	pop	{r7, pc}
 8000620:	40020000 	.word	0x40020000

08000624 <TIM_GetITStatus>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *     
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	460b      	mov	r3, r1
 800062e:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 8000630:	2300      	movs	r3, #0
 8000632:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 8000634:	2300      	movs	r3, #0
 8000636:	81bb      	strh	r3, [r7, #12]
 8000638:	2300      	movs	r3, #0
 800063a:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	8a1b      	ldrh	r3, [r3, #16]
 8000640:	b29a      	uxth	r2, r3
 8000642:	887b      	ldrh	r3, [r7, #2]
 8000644:	4013      	ands	r3, r2
 8000646:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	899b      	ldrh	r3, [r3, #12]
 800064c:	b29a      	uxth	r2, r3
 800064e:	887b      	ldrh	r3, [r7, #2]
 8000650:	4013      	ands	r3, r2
 8000652:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8000654:	89bb      	ldrh	r3, [r7, #12]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d005      	beq.n	8000666 <TIM_GetITStatus+0x42>
 800065a:	897b      	ldrh	r3, [r7, #10]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d002      	beq.n	8000666 <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 8000660:	2301      	movs	r3, #1
 8000662:	73fb      	strb	r3, [r7, #15]
 8000664:	e001      	b.n	800066a <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 8000666:	2300      	movs	r3, #0
 8000668:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800066a:	7bfb      	ldrb	r3, [r7, #15]
}
 800066c:	4618      	mov	r0, r3
 800066e:	3714      	adds	r7, #20
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr

08000678 <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8000678:	b480      	push	{r7}
 800067a:	b083      	sub	sp, #12
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
 8000680:	460b      	mov	r3, r1
 8000682:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8000684:	887b      	ldrh	r3, [r7, #2]
 8000686:	43db      	mvns	r3, r3
 8000688:	b29a      	uxth	r2, r3
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	821a      	strh	r2, [r3, #16]
}
 800068e:	370c      	adds	r7, #12
 8000690:	46bd      	mov	sp, r7
 8000692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000696:	4770      	bx	lr

08000698 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000698:	b480      	push	{r7}
 800069a:	b08b      	sub	sp, #44	; 0x2c
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80006a0:	2300      	movs	r3, #0
 80006a2:	623b      	str	r3, [r7, #32]
 80006a4:	2300      	movs	r3, #0
 80006a6:	61fb      	str	r3, [r7, #28]
 80006a8:	2300      	movs	r3, #0
 80006aa:	627b      	str	r3, [r7, #36]	; 0x24
 80006ac:	2302      	movs	r3, #2
 80006ae:	61bb      	str	r3, [r7, #24]
 80006b0:	2300      	movs	r3, #0
 80006b2:	617b      	str	r3, [r7, #20]
 80006b4:	2302      	movs	r3, #2
 80006b6:	613b      	str	r3, [r7, #16]
#if defined(STM32F446xx)  
  uint32_t pllr = 2;
 80006b8:	2302      	movs	r3, #2
 80006ba:	60fb      	str	r3, [r7, #12]
#endif /* STM32F446xx */
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80006bc:	4b71      	ldr	r3, [pc, #452]	; (8000884 <RCC_GetClocksFreq+0x1ec>)
 80006be:	689b      	ldr	r3, [r3, #8]
 80006c0:	f003 030c 	and.w	r3, r3, #12
 80006c4:	623b      	str	r3, [r7, #32]
  
  switch (tmp)
 80006c6:	6a3b      	ldr	r3, [r7, #32]
 80006c8:	2b0c      	cmp	r3, #12
 80006ca:	f200 8095 	bhi.w	80007f8 <RCC_GetClocksFreq+0x160>
 80006ce:	a201      	add	r2, pc, #4	; (adr r2, 80006d4 <RCC_GetClocksFreq+0x3c>)
 80006d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006d4:	08000709 	.word	0x08000709
 80006d8:	080007f9 	.word	0x080007f9
 80006dc:	080007f9 	.word	0x080007f9
 80006e0:	080007f9 	.word	0x080007f9
 80006e4:	08000711 	.word	0x08000711
 80006e8:	080007f9 	.word	0x080007f9
 80006ec:	080007f9 	.word	0x080007f9
 80006f0:	080007f9 	.word	0x080007f9
 80006f4:	08000719 	.word	0x08000719
 80006f8:	080007f9 	.word	0x080007f9
 80006fc:	080007f9 	.word	0x080007f9
 8000700:	080007f9 	.word	0x080007f9
 8000704:	08000789 	.word	0x08000789
  {
  case 0x00:  /* HSI used as system clock source */
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	4a5f      	ldr	r2, [pc, #380]	; (8000888 <RCC_GetClocksFreq+0x1f0>)
 800070c:	601a      	str	r2, [r3, #0]
    break;
 800070e:	e077      	b.n	8000800 <RCC_GetClocksFreq+0x168>
  case 0x04:  /* HSE used as system clock  source */
    RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	4a5e      	ldr	r2, [pc, #376]	; (800088c <RCC_GetClocksFreq+0x1f4>)
 8000714:	601a      	str	r2, [r3, #0]
    break;
 8000716:	e073      	b.n	8000800 <RCC_GetClocksFreq+0x168>
  case 0x08:  /* PLL P used as system clock  source */
    
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLP
    */    
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000718:	4b5a      	ldr	r3, [pc, #360]	; (8000884 <RCC_GetClocksFreq+0x1ec>)
 800071a:	685b      	ldr	r3, [r3, #4]
 800071c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000720:	0d9b      	lsrs	r3, r3, #22
 8000722:	617b      	str	r3, [r7, #20]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000724:	4b57      	ldr	r3, [pc, #348]	; (8000884 <RCC_GetClocksFreq+0x1ec>)
 8000726:	685b      	ldr	r3, [r3, #4]
 8000728:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800072c:	613b      	str	r3, [r7, #16]
    
    if (pllsource != 0)
 800072e:	697b      	ldr	r3, [r7, #20]
 8000730:	2b00      	cmp	r3, #0
 8000732:	d00d      	beq.n	8000750 <RCC_GetClocksFreq+0xb8>
    {
      /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000734:	4a55      	ldr	r2, [pc, #340]	; (800088c <RCC_GetClocksFreq+0x1f4>)
 8000736:	693b      	ldr	r3, [r7, #16]
 8000738:	fbb2 f2f3 	udiv	r2, r2, r3
 800073c:	4b51      	ldr	r3, [pc, #324]	; (8000884 <RCC_GetClocksFreq+0x1ec>)
 800073e:	6859      	ldr	r1, [r3, #4]
 8000740:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000744:	400b      	ands	r3, r1
 8000746:	099b      	lsrs	r3, r3, #6
 8000748:	fb03 f302 	mul.w	r3, r3, r2
 800074c:	627b      	str	r3, [r7, #36]	; 0x24
 800074e:	e00c      	b.n	800076a <RCC_GetClocksFreq+0xd2>
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000750:	4a4d      	ldr	r2, [pc, #308]	; (8000888 <RCC_GetClocksFreq+0x1f0>)
 8000752:	693b      	ldr	r3, [r7, #16]
 8000754:	fbb2 f2f3 	udiv	r2, r2, r3
 8000758:	4b4a      	ldr	r3, [pc, #296]	; (8000884 <RCC_GetClocksFreq+0x1ec>)
 800075a:	6859      	ldr	r1, [r3, #4]
 800075c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000760:	400b      	ands	r3, r1
 8000762:	099b      	lsrs	r3, r3, #6
 8000764:	fb03 f302 	mul.w	r3, r3, r2
 8000768:	627b      	str	r3, [r7, #36]	; 0x24
    }
    
    pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800076a:	4b46      	ldr	r3, [pc, #280]	; (8000884 <RCC_GetClocksFreq+0x1ec>)
 800076c:	685b      	ldr	r3, [r3, #4]
 800076e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000772:	0c1b      	lsrs	r3, r3, #16
 8000774:	3301      	adds	r3, #1
 8000776:	005b      	lsls	r3, r3, #1
 8000778:	61bb      	str	r3, [r7, #24]
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 800077a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800077c:	69bb      	ldr	r3, [r7, #24]
 800077e:	fbb2 f2f3 	udiv	r2, r2, r3
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	601a      	str	r2, [r3, #0]
    break;
 8000786:	e03b      	b.n	8000800 <RCC_GetClocksFreq+0x168>
#if defined(STM32F446xx)
  case 0x0C:  /* PLL R used as system clock  source */
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */    
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000788:	4b3e      	ldr	r3, [pc, #248]	; (8000884 <RCC_GetClocksFreq+0x1ec>)
 800078a:	685b      	ldr	r3, [r3, #4]
 800078c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000790:	0d9b      	lsrs	r3, r3, #22
 8000792:	617b      	str	r3, [r7, #20]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000794:	4b3b      	ldr	r3, [pc, #236]	; (8000884 <RCC_GetClocksFreq+0x1ec>)
 8000796:	685b      	ldr	r3, [r3, #4]
 8000798:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800079c:	613b      	str	r3, [r7, #16]
    
    if (pllsource != 0)
 800079e:	697b      	ldr	r3, [r7, #20]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d00d      	beq.n	80007c0 <RCC_GetClocksFreq+0x128>
    {
      /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80007a4:	4a39      	ldr	r2, [pc, #228]	; (800088c <RCC_GetClocksFreq+0x1f4>)
 80007a6:	693b      	ldr	r3, [r7, #16]
 80007a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80007ac:	4b35      	ldr	r3, [pc, #212]	; (8000884 <RCC_GetClocksFreq+0x1ec>)
 80007ae:	6859      	ldr	r1, [r3, #4]
 80007b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80007b4:	400b      	ands	r3, r1
 80007b6:	099b      	lsrs	r3, r3, #6
 80007b8:	fb03 f302 	mul.w	r3, r3, r2
 80007bc:	627b      	str	r3, [r7, #36]	; 0x24
 80007be:	e00c      	b.n	80007da <RCC_GetClocksFreq+0x142>
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80007c0:	4a31      	ldr	r2, [pc, #196]	; (8000888 <RCC_GetClocksFreq+0x1f0>)
 80007c2:	693b      	ldr	r3, [r7, #16]
 80007c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80007c8:	4b2e      	ldr	r3, [pc, #184]	; (8000884 <RCC_GetClocksFreq+0x1ec>)
 80007ca:	6859      	ldr	r1, [r3, #4]
 80007cc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80007d0:	400b      	ands	r3, r1
 80007d2:	099b      	lsrs	r3, r3, #6
 80007d4:	fb03 f302 	mul.w	r3, r3, r2
 80007d8:	627b      	str	r3, [r7, #36]	; 0x24
    }
    
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >>28) + 1 ) *2;
 80007da:	4b2a      	ldr	r3, [pc, #168]	; (8000884 <RCC_GetClocksFreq+0x1ec>)
 80007dc:	685b      	ldr	r3, [r3, #4]
 80007de:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80007e2:	0f1b      	lsrs	r3, r3, #28
 80007e4:	3301      	adds	r3, #1
 80007e6:	005b      	lsls	r3, r3, #1
 80007e8:	60fb      	str	r3, [r7, #12]
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllr;    
 80007ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	fbb2 f2f3 	udiv	r2, r2, r3
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	601a      	str	r2, [r3, #0]
    break;
 80007f6:	e003      	b.n	8000800 <RCC_GetClocksFreq+0x168>
#endif /* STM32F446xx */
    
  default:
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	4a23      	ldr	r2, [pc, #140]	; (8000888 <RCC_GetClocksFreq+0x1f0>)
 80007fc:	601a      	str	r2, [r3, #0]
    break;
 80007fe:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/
  
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000800:	4b20      	ldr	r3, [pc, #128]	; (8000884 <RCC_GetClocksFreq+0x1ec>)
 8000802:	689b      	ldr	r3, [r3, #8]
 8000804:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000808:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 800080a:	6a3b      	ldr	r3, [r7, #32]
 800080c:	091b      	lsrs	r3, r3, #4
 800080e:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 8000810:	4a1f      	ldr	r2, [pc, #124]	; (8000890 <RCC_GetClocksFreq+0x1f8>)
 8000812:	6a3b      	ldr	r3, [r7, #32]
 8000814:	4413      	add	r3, r2
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	b2db      	uxtb	r3, r3
 800081a:	61fb      	str	r3, [r7, #28]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681a      	ldr	r2, [r3, #0]
 8000820:	69fb      	ldr	r3, [r7, #28]
 8000822:	40da      	lsrs	r2, r3
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8000828:	4b16      	ldr	r3, [pc, #88]	; (8000884 <RCC_GetClocksFreq+0x1ec>)
 800082a:	689b      	ldr	r3, [r3, #8]
 800082c:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000830:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 10;
 8000832:	6a3b      	ldr	r3, [r7, #32]
 8000834:	0a9b      	lsrs	r3, r3, #10
 8000836:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 8000838:	4a15      	ldr	r2, [pc, #84]	; (8000890 <RCC_GetClocksFreq+0x1f8>)
 800083a:	6a3b      	ldr	r3, [r7, #32]
 800083c:	4413      	add	r3, r2
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	b2db      	uxtb	r3, r3
 8000842:	61fb      	str	r3, [r7, #28]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	685a      	ldr	r2, [r3, #4]
 8000848:	69fb      	ldr	r3, [r7, #28]
 800084a:	40da      	lsrs	r2, r3
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000850:	4b0c      	ldr	r3, [pc, #48]	; (8000884 <RCC_GetClocksFreq+0x1ec>)
 8000852:	689b      	ldr	r3, [r3, #8]
 8000854:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000858:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 13;
 800085a:	6a3b      	ldr	r3, [r7, #32]
 800085c:	0b5b      	lsrs	r3, r3, #13
 800085e:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 8000860:	4a0b      	ldr	r2, [pc, #44]	; (8000890 <RCC_GetClocksFreq+0x1f8>)
 8000862:	6a3b      	ldr	r3, [r7, #32]
 8000864:	4413      	add	r3, r2
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	b2db      	uxtb	r3, r3
 800086a:	61fb      	str	r3, [r7, #28]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	685a      	ldr	r2, [r3, #4]
 8000870:	69fb      	ldr	r3, [r7, #28]
 8000872:	40da      	lsrs	r2, r3
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	60da      	str	r2, [r3, #12]
}
 8000878:	372c      	adds	r7, #44	; 0x2c
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop
 8000884:	40023800 	.word	0x40023800
 8000888:	00f42400 	.word	0x00f42400
 800088c:	007a1200 	.word	0x007a1200
 8000890:	20000000 	.word	0x20000000

08000894 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000894:	b480      	push	{r7}
 8000896:	b083      	sub	sp, #12
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
 800089c:	460b      	mov	r3, r1
 800089e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80008a0:	78fb      	ldrb	r3, [r7, #3]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d006      	beq.n	80008b4 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80008a6:	4b09      	ldr	r3, [pc, #36]	; (80008cc <RCC_AHB1PeriphClockCmd+0x38>)
 80008a8:	4a08      	ldr	r2, [pc, #32]	; (80008cc <RCC_AHB1PeriphClockCmd+0x38>)
 80008aa:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80008ac:	687a      	ldr	r2, [r7, #4]
 80008ae:	430a      	orrs	r2, r1
 80008b0:	631a      	str	r2, [r3, #48]	; 0x30
 80008b2:	e006      	b.n	80008c2 <RCC_AHB1PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 80008b4:	4b05      	ldr	r3, [pc, #20]	; (80008cc <RCC_AHB1PeriphClockCmd+0x38>)
 80008b6:	4a05      	ldr	r2, [pc, #20]	; (80008cc <RCC_AHB1PeriphClockCmd+0x38>)
 80008b8:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80008ba:	687a      	ldr	r2, [r7, #4]
 80008bc:	43d2      	mvns	r2, r2
 80008be:	400a      	ands	r2, r1
 80008c0:	631a      	str	r2, [r3, #48]	; 0x30
  }
}
 80008c2:	370c      	adds	r7, #12
 80008c4:	46bd      	mov	sp, r7
 80008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ca:	4770      	bx	lr
 80008cc:	40023800 	.word	0x40023800

080008d0 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b087      	sub	sp, #28
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
 80008d8:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80008da:	2300      	movs	r3, #0
 80008dc:	617b      	str	r3, [r7, #20]
 80008de:	2300      	movs	r3, #0
 80008e0:	613b      	str	r3, [r7, #16]
 80008e2:	2300      	movs	r3, #0
 80008e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80008e6:	2300      	movs	r3, #0
 80008e8:	617b      	str	r3, [r7, #20]
 80008ea:	e076      	b.n	80009da <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80008ec:	697b      	ldr	r3, [r7, #20]
 80008ee:	2201      	movs	r2, #1
 80008f0:	fa02 f303 	lsl.w	r3, r2, r3
 80008f4:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	681a      	ldr	r2, [r3, #0]
 80008fa:	693b      	ldr	r3, [r7, #16]
 80008fc:	4013      	ands	r3, r2
 80008fe:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000900:	68fa      	ldr	r2, [r7, #12]
 8000902:	693b      	ldr	r3, [r7, #16]
 8000904:	429a      	cmp	r2, r3
 8000906:	d165      	bne.n	80009d4 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681a      	ldr	r2, [r3, #0]
 800090c:	697b      	ldr	r3, [r7, #20]
 800090e:	005b      	lsls	r3, r3, #1
 8000910:	2103      	movs	r1, #3
 8000912:	fa01 f303 	lsl.w	r3, r1, r3
 8000916:	43db      	mvns	r3, r3
 8000918:	401a      	ands	r2, r3
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	681a      	ldr	r2, [r3, #0]
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	791b      	ldrb	r3, [r3, #4]
 8000926:	4619      	mov	r1, r3
 8000928:	697b      	ldr	r3, [r7, #20]
 800092a:	005b      	lsls	r3, r3, #1
 800092c:	fa01 f303 	lsl.w	r3, r1, r3
 8000930:	431a      	orrs	r2, r3
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	791b      	ldrb	r3, [r3, #4]
 800093a:	2b01      	cmp	r3, #1
 800093c:	d003      	beq.n	8000946 <GPIO_Init+0x76>
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	791b      	ldrb	r3, [r3, #4]
 8000942:	2b02      	cmp	r3, #2
 8000944:	d12e      	bne.n	80009a4 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	689a      	ldr	r2, [r3, #8]
 800094a:	697b      	ldr	r3, [r7, #20]
 800094c:	005b      	lsls	r3, r3, #1
 800094e:	2103      	movs	r1, #3
 8000950:	fa01 f303 	lsl.w	r3, r1, r3
 8000954:	43db      	mvns	r3, r3
 8000956:	401a      	ands	r2, r3
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	689a      	ldr	r2, [r3, #8]
 8000960:	683b      	ldr	r3, [r7, #0]
 8000962:	795b      	ldrb	r3, [r3, #5]
 8000964:	4619      	mov	r1, r3
 8000966:	697b      	ldr	r3, [r7, #20]
 8000968:	005b      	lsls	r3, r3, #1
 800096a:	fa01 f303 	lsl.w	r3, r1, r3
 800096e:	431a      	orrs	r2, r3
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	685a      	ldr	r2, [r3, #4]
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	b29b      	uxth	r3, r3
 800097c:	2101      	movs	r1, #1
 800097e:	fa01 f303 	lsl.w	r3, r1, r3
 8000982:	43db      	mvns	r3, r3
 8000984:	401a      	ands	r2, r3
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	685a      	ldr	r2, [r3, #4]
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	799b      	ldrb	r3, [r3, #6]
 8000992:	4619      	mov	r1, r3
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	b29b      	uxth	r3, r3
 8000998:	fa01 f303 	lsl.w	r3, r1, r3
 800099c:	b29b      	uxth	r3, r3
 800099e:	431a      	orrs	r2, r3
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	68da      	ldr	r2, [r3, #12]
 80009a8:	697b      	ldr	r3, [r7, #20]
 80009aa:	b29b      	uxth	r3, r3
 80009ac:	005b      	lsls	r3, r3, #1
 80009ae:	2103      	movs	r1, #3
 80009b0:	fa01 f303 	lsl.w	r3, r1, r3
 80009b4:	43db      	mvns	r3, r3
 80009b6:	401a      	ands	r2, r3
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	68da      	ldr	r2, [r3, #12]
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	79db      	ldrb	r3, [r3, #7]
 80009c4:	4619      	mov	r1, r3
 80009c6:	697b      	ldr	r3, [r7, #20]
 80009c8:	005b      	lsls	r3, r3, #1
 80009ca:	fa01 f303 	lsl.w	r3, r1, r3
 80009ce:	431a      	orrs	r2, r3
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	3301      	adds	r3, #1
 80009d8:	617b      	str	r3, [r7, #20]
 80009da:	697b      	ldr	r3, [r7, #20]
 80009dc:	2b0f      	cmp	r3, #15
 80009de:	d985      	bls.n	80008ec <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 80009e0:	371c      	adds	r7, #28
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop

080009ec <GPIO_ToggleBits>:
  *                      x can be (A, B, C, D and H) to select the GPIO peripheral for STM32F401xx devices. 
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b083      	sub	sp, #12
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
 80009f4:	460b      	mov	r3, r1
 80009f6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	695a      	ldr	r2, [r3, #20]
 80009fc:	887b      	ldrh	r3, [r7, #2]
 80009fe:	405a      	eors	r2, r3
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	615a      	str	r2, [r3, #20]
}
 8000a04:	370c      	adds	r7, #12
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop

08000a10 <arm_sin_f32>:
 8000a10:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8000ad8 <arm_sin_f32+0xc8>
 8000a14:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8000a18:	ee20 7a07 	vmul.f32	s14, s0, s14
 8000a1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a20:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8000a24:	d504      	bpl.n	8000a30 <arm_sin_f32+0x20>
 8000a26:	ee17 0a90 	vmov	r0, s15
 8000a2a:	1e43      	subs	r3, r0, #1
 8000a2c:	ee07 3a90 	vmov	s15, r3
 8000a30:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000a34:	ed9f 5a29 	vldr	s10, [pc, #164]	; 8000adc <arm_sin_f32+0xcc>
 8000a38:	ee37 7a66 	vsub.f32	s14, s14, s13
 8000a3c:	eef6 1a00 	vmov.f32	s3, #96	; 0x60
 8000a40:	ee67 2a05 	vmul.f32	s5, s14, s10
 8000a44:	ed9f 3a26 	vldr	s6, [pc, #152]	; 8000ae0 <arm_sin_f32+0xd0>
 8000a48:	eefc 7ae2 	vcvt.u32.f32	s15, s5
 8000a4c:	ed9f 6a25 	vldr	s12, [pc, #148]	; 8000ae4 <arm_sin_f32+0xd4>
 8000a50:	eeb8 2ae7 	vcvt.f32.s32	s4, s15
 8000a54:	ee17 3a90 	vmov	r3, s15
 8000a58:	ee72 0ac2 	vsub.f32	s1, s5, s4
 8000a5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a60:	bfa8      	it	ge
 8000a62:	f44f 7380 	movge.w	r3, #256	; 0x100
 8000a66:	ee60 3aa0 	vmul.f32	s7, s1, s1
 8000a6a:	ee20 4aa1 	vmul.f32	s8, s1, s3
 8000a6e:	ee23 1aa1 	vmul.f32	s2, s7, s3
 8000a72:	ee60 6a83 	vmul.f32	s13, s1, s6
 8000a76:	eeb0 0a41 	vmov.f32	s0, s2
 8000a7a:	ee00 0ac6 	vmls.f32	s0, s1, s12
 8000a7e:	ee24 2a23 	vmul.f32	s4, s8, s7
 8000a82:	4a19      	ldr	r2, [pc, #100]	; (8000ae8 <arm_sin_f32+0xd8>)
 8000a84:	ee66 5aa3 	vmul.f32	s11, s13, s7
 8000a88:	ea23 7ce3 	bic.w	ip, r3, r3, asr #31
 8000a8c:	eef7 4a00 	vmov.f32	s9, #112	; 0x70
 8000a90:	eb02 018c 	add.w	r1, r2, ip, lsl #2
 8000a94:	ee71 7a20 	vadd.f32	s15, s2, s1
 8000a98:	ee32 7a63 	vsub.f32	s14, s4, s7
 8000a9c:	ee34 5ac4 	vsub.f32	s10, s9, s8
 8000aa0:	ee70 1a65 	vsub.f32	s3, s0, s11
 8000aa4:	edd1 2a00 	vldr	s5, [r1]
 8000aa8:	ee35 1ae6 	vsub.f32	s2, s11, s13
 8000aac:	ed91 3a03 	vldr	s6, [r1, #12]
 8000ab0:	ee77 0a05 	vadd.f32	s1, s14, s10
 8000ab4:	edd1 3a01 	vldr	s7, [r1, #4]
 8000ab8:	ee37 6ac2 	vsub.f32	s12, s15, s4
 8000abc:	ed91 4a02 	vldr	s8, [r1, #8]
 8000ac0:	ee21 0aa2 	vmul.f32	s0, s3, s5
 8000ac4:	ee61 6a03 	vmul.f32	s13, s2, s6
 8000ac8:	ee00 0aa3 	vmla.f32	s0, s1, s7
 8000acc:	ee46 6a04 	vmla.f32	s13, s12, s8
 8000ad0:	ee30 0a26 	vadd.f32	s0, s0, s13
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	3e22f983 	.word	0x3e22f983
 8000adc:	43800000 	.word	0x43800000
 8000ae0:	3e2aaaab 	.word	0x3e2aaaab
 8000ae4:	3eaaaaab 	.word	0x3eaaaaab
 8000ae8:	08000b50 	.word	0x08000b50

08000aec <__libc_init_array>:
 8000aec:	b570      	push	{r4, r5, r6, lr}
 8000aee:	4b0e      	ldr	r3, [pc, #56]	; (8000b28 <__libc_init_array+0x3c>)
 8000af0:	4d0e      	ldr	r5, [pc, #56]	; (8000b2c <__libc_init_array+0x40>)
 8000af2:	1aed      	subs	r5, r5, r3
 8000af4:	10ad      	asrs	r5, r5, #2
 8000af6:	2400      	movs	r4, #0
 8000af8:	461e      	mov	r6, r3
 8000afa:	42ac      	cmp	r4, r5
 8000afc:	d004      	beq.n	8000b08 <__libc_init_array+0x1c>
 8000afe:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8000b02:	4790      	blx	r2
 8000b04:	3401      	adds	r4, #1
 8000b06:	e7f8      	b.n	8000afa <__libc_init_array+0xe>
 8000b08:	f000 f816 	bl	8000b38 <_init>
 8000b0c:	4d08      	ldr	r5, [pc, #32]	; (8000b30 <__libc_init_array+0x44>)
 8000b0e:	4b09      	ldr	r3, [pc, #36]	; (8000b34 <__libc_init_array+0x48>)
 8000b10:	1aed      	subs	r5, r5, r3
 8000b12:	10ad      	asrs	r5, r5, #2
 8000b14:	2400      	movs	r4, #0
 8000b16:	461e      	mov	r6, r3
 8000b18:	42ac      	cmp	r4, r5
 8000b1a:	d004      	beq.n	8000b26 <__libc_init_array+0x3a>
 8000b1c:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8000b20:	4790      	blx	r2
 8000b22:	3401      	adds	r4, #1
 8000b24:	e7f8      	b.n	8000b18 <__libc_init_array+0x2c>
 8000b26:	bd70      	pop	{r4, r5, r6, pc}
 8000b28:	08000f5c 	.word	0x08000f5c
 8000b2c:	08000f5c 	.word	0x08000f5c
 8000b30:	08000f60 	.word	0x08000f60
 8000b34:	08000f5c 	.word	0x08000f5c

08000b38 <_init>:
 8000b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b3a:	bf00      	nop
 8000b3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b3e:	bc08      	pop	{r3}
 8000b40:	469e      	mov	lr, r3
 8000b42:	4770      	bx	lr

08000b44 <_fini>:
 8000b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b46:	bf00      	nop
 8000b48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b4a:	bc08      	pop	{r3}
 8000b4c:	469e      	mov	lr, r3
 8000b4e:	4770      	bx	lr
