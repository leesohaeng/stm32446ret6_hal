
STM32F746ZG_BASE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000077ec  080001c8  080001c8  000081c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a8  080079b8  080079b8  0000f9b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007d60  08007d60  0000fd60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007d68  08007d68  0000fd68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007d6c  08007d6c  0000fd6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000544  20000000  08007d70  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000228  20000544  080082b4  00010544  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2000076c  080082b4  0001076c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00010544  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000e6f4  00000000  00000000  00010574  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001d75  00000000  00000000  0001ec68  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000a10  00000000  00000000  000209e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000010d0  00000000  00000000  000213f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00004db1  00000000  00000000  000224c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003a47  00000000  00000000  00027271  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      00000082  00000000  00000000  0002acb8  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000023f4  00000000  00000000  0002ad3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc    00006f07  00000000  00000000  0002d130  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000544 	.word	0x20000544
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800799c 	.word	0x0800799c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4903      	ldr	r1, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800799c 	.word	0x0800799c
 8000204:	20000548 	.word	0x20000548

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000346:	f1a4 0401 	sub.w	r4, r4, #1
 800034a:	d1e9      	bne.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f092 0f00 	teq	r2, #0
 80004f2:	bf14      	ite	ne
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	4770      	bxeq	lr
 80004fa:	b530      	push	{r4, r5, lr}
 80004fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000504:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000508:	e720      	b.n	800034c <__adddf3+0x138>
 800050a:	bf00      	nop

0800050c <__aeabi_ul2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	e00a      	b.n	8000532 <__aeabi_l2d+0x16>

0800051c <__aeabi_l2d>:
 800051c:	ea50 0201 	orrs.w	r2, r0, r1
 8000520:	bf08      	it	eq
 8000522:	4770      	bxeq	lr
 8000524:	b530      	push	{r4, r5, lr}
 8000526:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800052a:	d502      	bpl.n	8000532 <__aeabi_l2d+0x16>
 800052c:	4240      	negs	r0, r0
 800052e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000532:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000536:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800053a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800053e:	f43f aedc 	beq.w	80002fa <__adddf3+0xe6>
 8000542:	f04f 0203 	mov.w	r2, #3
 8000546:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054a:	bf18      	it	ne
 800054c:	3203      	addne	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000562:	fa20 f002 	lsr.w	r0, r0, r2
 8000566:	fa01 fe03 	lsl.w	lr, r1, r3
 800056a:	ea40 000e 	orr.w	r0, r0, lr
 800056e:	fa21 f102 	lsr.w	r1, r1, r2
 8000572:	4414      	add	r4, r2
 8000574:	e6c1      	b.n	80002fa <__adddf3+0xe6>
 8000576:	bf00      	nop

08000578 <__aeabi_dmul>:
 8000578:	b570      	push	{r4, r5, r6, lr}
 800057a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800057e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000582:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000586:	bf1d      	ittte	ne
 8000588:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800058c:	ea94 0f0c 	teqne	r4, ip
 8000590:	ea95 0f0c 	teqne	r5, ip
 8000594:	f000 f8de 	bleq	8000754 <__aeabi_dmul+0x1dc>
 8000598:	442c      	add	r4, r5
 800059a:	ea81 0603 	eor.w	r6, r1, r3
 800059e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005aa:	bf18      	it	ne
 80005ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005b8:	d038      	beq.n	800062c <__aeabi_dmul+0xb4>
 80005ba:	fba0 ce02 	umull	ip, lr, r0, r2
 80005be:	f04f 0500 	mov.w	r5, #0
 80005c2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ca:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ce:	f04f 0600 	mov.w	r6, #0
 80005d2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005d6:	f09c 0f00 	teq	ip, #0
 80005da:	bf18      	it	ne
 80005dc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ec:	d204      	bcs.n	80005f8 <__aeabi_dmul+0x80>
 80005ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005f2:	416d      	adcs	r5, r5
 80005f4:	eb46 0606 	adc.w	r6, r6, r6
 80005f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000600:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000604:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000608:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800060c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000610:	bf88      	it	hi
 8000612:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000616:	d81e      	bhi.n	8000656 <__aeabi_dmul+0xde>
 8000618:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800061c:	bf08      	it	eq
 800061e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000622:	f150 0000 	adcs.w	r0, r0, #0
 8000626:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000630:	ea46 0101 	orr.w	r1, r6, r1
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	ea81 0103 	eor.w	r1, r1, r3
 800063c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000640:	bfc2      	ittt	gt
 8000642:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000646:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800064a:	bd70      	popgt	{r4, r5, r6, pc}
 800064c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000650:	f04f 0e00 	mov.w	lr, #0
 8000654:	3c01      	subs	r4, #1
 8000656:	f300 80ab 	bgt.w	80007b0 <__aeabi_dmul+0x238>
 800065a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800065e:	bfde      	ittt	le
 8000660:	2000      	movle	r0, #0
 8000662:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000666:	bd70      	pople	{r4, r5, r6, pc}
 8000668:	f1c4 0400 	rsb	r4, r4, #0
 800066c:	3c20      	subs	r4, #32
 800066e:	da35      	bge.n	80006dc <__aeabi_dmul+0x164>
 8000670:	340c      	adds	r4, #12
 8000672:	dc1b      	bgt.n	80006ac <__aeabi_dmul+0x134>
 8000674:	f104 0414 	add.w	r4, r4, #20
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f305 	lsl.w	r3, r0, r5
 8000680:	fa20 f004 	lsr.w	r0, r0, r4
 8000684:	fa01 f205 	lsl.w	r2, r1, r5
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000690:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000694:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000698:	fa21 f604 	lsr.w	r6, r1, r4
 800069c:	eb42 0106 	adc.w	r1, r2, r6
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 040c 	rsb	r4, r4, #12
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f304 	lsl.w	r3, r0, r4
 80006b8:	fa20 f005 	lsr.w	r0, r0, r5
 80006bc:	fa01 f204 	lsl.w	r2, r1, r4
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006cc:	f141 0100 	adc.w	r1, r1, #0
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 0520 	rsb	r5, r4, #32
 80006e0:	fa00 f205 	lsl.w	r2, r0, r5
 80006e4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006e8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ec:	fa01 f205 	lsl.w	r2, r1, r5
 80006f0:	ea43 0302 	orr.w	r3, r3, r2
 80006f4:	fa21 f004 	lsr.w	r0, r1, r4
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	fa21 f204 	lsr.w	r2, r1, r4
 8000700:	ea20 0002 	bic.w	r0, r0, r2
 8000704:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f094 0f00 	teq	r4, #0
 8000718:	d10f      	bne.n	800073a <__aeabi_dmul+0x1c2>
 800071a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800071e:	0040      	lsls	r0, r0, #1
 8000720:	eb41 0101 	adc.w	r1, r1, r1
 8000724:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3c01      	subeq	r4, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1a6>
 800072e:	ea41 0106 	orr.w	r1, r1, r6
 8000732:	f095 0f00 	teq	r5, #0
 8000736:	bf18      	it	ne
 8000738:	4770      	bxne	lr
 800073a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800073e:	0052      	lsls	r2, r2, #1
 8000740:	eb43 0303 	adc.w	r3, r3, r3
 8000744:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3d01      	subeq	r5, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1c6>
 800074e:	ea43 0306 	orr.w	r3, r3, r6
 8000752:	4770      	bx	lr
 8000754:	ea94 0f0c 	teq	r4, ip
 8000758:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800075c:	bf18      	it	ne
 800075e:	ea95 0f0c 	teqne	r5, ip
 8000762:	d00c      	beq.n	800077e <__aeabi_dmul+0x206>
 8000764:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000768:	bf18      	it	ne
 800076a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076e:	d1d1      	bne.n	8000714 <__aeabi_dmul+0x19c>
 8000770:	ea81 0103 	eor.w	r1, r1, r3
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	f04f 0000 	mov.w	r0, #0
 800077c:	bd70      	pop	{r4, r5, r6, pc}
 800077e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000782:	bf06      	itte	eq
 8000784:	4610      	moveq	r0, r2
 8000786:	4619      	moveq	r1, r3
 8000788:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078c:	d019      	beq.n	80007c2 <__aeabi_dmul+0x24a>
 800078e:	ea94 0f0c 	teq	r4, ip
 8000792:	d102      	bne.n	800079a <__aeabi_dmul+0x222>
 8000794:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000798:	d113      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 800079a:	ea95 0f0c 	teq	r5, ip
 800079e:	d105      	bne.n	80007ac <__aeabi_dmul+0x234>
 80007a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a4:	bf1c      	itt	ne
 80007a6:	4610      	movne	r0, r2
 80007a8:	4619      	movne	r1, r3
 80007aa:	d10a      	bne.n	80007c2 <__aeabi_dmul+0x24a>
 80007ac:	ea81 0103 	eor.w	r1, r1, r3
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007bc:	f04f 0000 	mov.w	r0, #0
 80007c0:	bd70      	pop	{r4, r5, r6, pc}
 80007c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ca:	bd70      	pop	{r4, r5, r6, pc}

080007cc <__aeabi_ddiv>:
 80007cc:	b570      	push	{r4, r5, r6, lr}
 80007ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007da:	bf1d      	ittte	ne
 80007dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e0:	ea94 0f0c 	teqne	r4, ip
 80007e4:	ea95 0f0c 	teqne	r5, ip
 80007e8:	f000 f8a7 	bleq	800093a <__aeabi_ddiv+0x16e>
 80007ec:	eba4 0405 	sub.w	r4, r4, r5
 80007f0:	ea81 0e03 	eor.w	lr, r1, r3
 80007f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007fc:	f000 8088 	beq.w	8000910 <__aeabi_ddiv+0x144>
 8000800:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000804:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000808:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800080c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000810:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000814:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000818:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800081c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000820:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000824:	429d      	cmp	r5, r3
 8000826:	bf08      	it	eq
 8000828:	4296      	cmpeq	r6, r2
 800082a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800082e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000832:	d202      	bcs.n	800083a <__aeabi_ddiv+0x6e>
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	1ab6      	subs	r6, r6, r2
 800083c:	eb65 0503 	sbc.w	r5, r5, r3
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800084a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008a8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ac:	d018      	beq.n	80008e0 <__aeabi_ddiv+0x114>
 80008ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ca:	d1c0      	bne.n	800084e <__aeabi_ddiv+0x82>
 80008cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d0:	d10b      	bne.n	80008ea <__aeabi_ddiv+0x11e>
 80008d2:	ea41 0100 	orr.w	r1, r1, r0
 80008d6:	f04f 0000 	mov.w	r0, #0
 80008da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008de:	e7b6      	b.n	800084e <__aeabi_ddiv+0x82>
 80008e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e4:	bf04      	itt	eq
 80008e6:	4301      	orreq	r1, r0
 80008e8:	2000      	moveq	r0, #0
 80008ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ee:	bf88      	it	hi
 80008f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008f4:	f63f aeaf 	bhi.w	8000656 <__aeabi_dmul+0xde>
 80008f8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008fc:	bf04      	itt	eq
 80008fe:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000902:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000906:	f150 0000 	adcs.w	r0, r0, #0
 800090a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800090e:	bd70      	pop	{r4, r5, r6, pc}
 8000910:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000914:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000918:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800091c:	bfc2      	ittt	gt
 800091e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000922:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000926:	bd70      	popgt	{r4, r5, r6, pc}
 8000928:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800092c:	f04f 0e00 	mov.w	lr, #0
 8000930:	3c01      	subs	r4, #1
 8000932:	e690      	b.n	8000656 <__aeabi_dmul+0xde>
 8000934:	ea45 0e06 	orr.w	lr, r5, r6
 8000938:	e68d      	b.n	8000656 <__aeabi_dmul+0xde>
 800093a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800093e:	ea94 0f0c 	teq	r4, ip
 8000942:	bf08      	it	eq
 8000944:	ea95 0f0c 	teqeq	r5, ip
 8000948:	f43f af3b 	beq.w	80007c2 <__aeabi_dmul+0x24a>
 800094c:	ea94 0f0c 	teq	r4, ip
 8000950:	d10a      	bne.n	8000968 <__aeabi_ddiv+0x19c>
 8000952:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000956:	f47f af34 	bne.w	80007c2 <__aeabi_dmul+0x24a>
 800095a:	ea95 0f0c 	teq	r5, ip
 800095e:	f47f af25 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	e72c      	b.n	80007c2 <__aeabi_dmul+0x24a>
 8000968:	ea95 0f0c 	teq	r5, ip
 800096c:	d106      	bne.n	800097c <__aeabi_ddiv+0x1b0>
 800096e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000972:	f43f aefd 	beq.w	8000770 <__aeabi_dmul+0x1f8>
 8000976:	4610      	mov	r0, r2
 8000978:	4619      	mov	r1, r3
 800097a:	e722      	b.n	80007c2 <__aeabi_dmul+0x24a>
 800097c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000980:	bf18      	it	ne
 8000982:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000986:	f47f aec5 	bne.w	8000714 <__aeabi_dmul+0x19c>
 800098a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800098e:	f47f af0d 	bne.w	80007ac <__aeabi_dmul+0x234>
 8000992:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000996:	f47f aeeb 	bne.w	8000770 <__aeabi_dmul+0x1f8>
 800099a:	e712      	b.n	80007c2 <__aeabi_dmul+0x24a>

0800099c <__gedf2>:
 800099c:	f04f 3cff 	mov.w	ip, #4294967295
 80009a0:	e006      	b.n	80009b0 <__cmpdf2+0x4>
 80009a2:	bf00      	nop

080009a4 <__ledf2>:
 80009a4:	f04f 0c01 	mov.w	ip, #1
 80009a8:	e002      	b.n	80009b0 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__cmpdf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c0:	bf18      	it	ne
 80009c2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009c6:	d01b      	beq.n	8000a00 <__cmpdf2+0x54>
 80009c8:	b001      	add	sp, #4
 80009ca:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ce:	bf0c      	ite	eq
 80009d0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009d4:	ea91 0f03 	teqne	r1, r3
 80009d8:	bf02      	ittt	eq
 80009da:	ea90 0f02 	teqeq	r0, r2
 80009de:	2000      	moveq	r0, #0
 80009e0:	4770      	bxeq	lr
 80009e2:	f110 0f00 	cmn.w	r0, #0
 80009e6:	ea91 0f03 	teq	r1, r3
 80009ea:	bf58      	it	pl
 80009ec:	4299      	cmppl	r1, r3
 80009ee:	bf08      	it	eq
 80009f0:	4290      	cmpeq	r0, r2
 80009f2:	bf2c      	ite	cs
 80009f4:	17d8      	asrcs	r0, r3, #31
 80009f6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009fa:	f040 0001 	orr.w	r0, r0, #1
 80009fe:	4770      	bx	lr
 8000a00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d102      	bne.n	8000a10 <__cmpdf2+0x64>
 8000a0a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0e:	d107      	bne.n	8000a20 <__cmpdf2+0x74>
 8000a10:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a18:	d1d6      	bne.n	80009c8 <__cmpdf2+0x1c>
 8000a1a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1e:	d0d3      	beq.n	80009c8 <__cmpdf2+0x1c>
 8000a20:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdrcmple>:
 8000a28:	4684      	mov	ip, r0
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4662      	mov	r2, ip
 8000a2e:	468c      	mov	ip, r1
 8000a30:	4619      	mov	r1, r3
 8000a32:	4663      	mov	r3, ip
 8000a34:	e000      	b.n	8000a38 <__aeabi_cdcmpeq>
 8000a36:	bf00      	nop

08000a38 <__aeabi_cdcmpeq>:
 8000a38:	b501      	push	{r0, lr}
 8000a3a:	f7ff ffb7 	bl	80009ac <__cmpdf2>
 8000a3e:	2800      	cmp	r0, #0
 8000a40:	bf48      	it	mi
 8000a42:	f110 0f00 	cmnmi.w	r0, #0
 8000a46:	bd01      	pop	{r0, pc}

08000a48 <__aeabi_dcmpeq>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff fff4 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a50:	bf0c      	ite	eq
 8000a52:	2001      	moveq	r0, #1
 8000a54:	2000      	movne	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmplt>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffea 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a64:	bf34      	ite	cc
 8000a66:	2001      	movcc	r0, #1
 8000a68:	2000      	movcs	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmple>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffe0 	bl	8000a38 <__aeabi_cdcmpeq>
 8000a78:	bf94      	ite	ls
 8000a7a:	2001      	movls	r0, #1
 8000a7c:	2000      	movhi	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpge>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffce 	bl	8000a28 <__aeabi_cdrcmple>
 8000a8c:	bf94      	ite	ls
 8000a8e:	2001      	movls	r0, #1
 8000a90:	2000      	movhi	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmpgt>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffc4 	bl	8000a28 <__aeabi_cdrcmple>
 8000aa0:	bf34      	ite	cc
 8000aa2:	2001      	movcc	r0, #1
 8000aa4:	2000      	movcs	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_d2iz>:
 8000aac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab4:	d215      	bcs.n	8000ae2 <__aeabi_d2iz+0x36>
 8000ab6:	d511      	bpl.n	8000adc <__aeabi_d2iz+0x30>
 8000ab8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000abc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac0:	d912      	bls.n	8000ae8 <__aeabi_d2iz+0x3c>
 8000ac2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ace:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad6:	bf18      	it	ne
 8000ad8:	4240      	negne	r0, r0
 8000ada:	4770      	bx	lr
 8000adc:	f04f 0000 	mov.w	r0, #0
 8000ae0:	4770      	bx	lr
 8000ae2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae6:	d105      	bne.n	8000af4 <__aeabi_d2iz+0x48>
 8000ae8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aec:	bf08      	it	eq
 8000aee:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <__aeabi_uldivmod>:
 8000afc:	b94b      	cbnz	r3, 8000b12 <__aeabi_uldivmod+0x16>
 8000afe:	b942      	cbnz	r2, 8000b12 <__aeabi_uldivmod+0x16>
 8000b00:	2900      	cmp	r1, #0
 8000b02:	bf08      	it	eq
 8000b04:	2800      	cmpeq	r0, #0
 8000b06:	d002      	beq.n	8000b0e <__aeabi_uldivmod+0x12>
 8000b08:	f04f 31ff 	mov.w	r1, #4294967295
 8000b0c:	4608      	mov	r0, r1
 8000b0e:	f000 b83b 	b.w	8000b88 <__aeabi_idiv0>
 8000b12:	b082      	sub	sp, #8
 8000b14:	46ec      	mov	ip, sp
 8000b16:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000b1a:	f000 f81d 	bl	8000b58 <__gnu_uldivmod_helper>
 8000b1e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b22:	b002      	add	sp, #8
 8000b24:	bc0c      	pop	{r2, r3}
 8000b26:	4770      	bx	lr

08000b28 <__gnu_ldivmod_helper>:
 8000b28:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8000b2c:	9e06      	ldr	r6, [sp, #24]
 8000b2e:	4614      	mov	r4, r2
 8000b30:	461d      	mov	r5, r3
 8000b32:	4680      	mov	r8, r0
 8000b34:	4689      	mov	r9, r1
 8000b36:	f000 f829 	bl	8000b8c <__divdi3>
 8000b3a:	fb04 f301 	mul.w	r3, r4, r1
 8000b3e:	fb00 3305 	mla	r3, r0, r5, r3
 8000b42:	fba4 4500 	umull	r4, r5, r4, r0
 8000b46:	441d      	add	r5, r3
 8000b48:	ebb8 0404 	subs.w	r4, r8, r4
 8000b4c:	eb69 0505 	sbc.w	r5, r9, r5
 8000b50:	e9c6 4500 	strd	r4, r5, [r6]
 8000b54:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}

08000b58 <__gnu_uldivmod_helper>:
 8000b58:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8000b5c:	9e06      	ldr	r6, [sp, #24]
 8000b5e:	4614      	mov	r4, r2
 8000b60:	4680      	mov	r8, r0
 8000b62:	4689      	mov	r9, r1
 8000b64:	461d      	mov	r5, r3
 8000b66:	f000 f95d 	bl	8000e24 <__udivdi3>
 8000b6a:	fb00 f505 	mul.w	r5, r0, r5
 8000b6e:	fb04 5301 	mla	r3, r4, r1, r5
 8000b72:	fba0 4504 	umull	r4, r5, r0, r4
 8000b76:	441d      	add	r5, r3
 8000b78:	ebb8 0404 	subs.w	r4, r8, r4
 8000b7c:	eb69 0505 	sbc.w	r5, r9, r5
 8000b80:	e9c6 4500 	strd	r4, r5, [r6]
 8000b84:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}

08000b88 <__aeabi_idiv0>:
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop

08000b8c <__divdi3>:
 8000b8c:	2900      	cmp	r1, #0
 8000b8e:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000b92:	f2c0 809f 	blt.w	8000cd4 <__divdi3+0x148>
 8000b96:	2400      	movs	r4, #0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	f2c0 8096 	blt.w	8000cca <__divdi3+0x13e>
 8000b9e:	4615      	mov	r5, r2
 8000ba0:	4606      	mov	r6, r0
 8000ba2:	460f      	mov	r7, r1
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d13e      	bne.n	8000c26 <__divdi3+0x9a>
 8000ba8:	428a      	cmp	r2, r1
 8000baa:	d957      	bls.n	8000c5c <__divdi3+0xd0>
 8000bac:	fab2 f382 	clz	r3, r2
 8000bb0:	b14b      	cbz	r3, 8000bc6 <__divdi3+0x3a>
 8000bb2:	f1c3 0220 	rsb	r2, r3, #32
 8000bb6:	fa01 f703 	lsl.w	r7, r1, r3
 8000bba:	fa20 f202 	lsr.w	r2, r0, r2
 8000bbe:	409d      	lsls	r5, r3
 8000bc0:	4317      	orrs	r7, r2
 8000bc2:	fa00 f603 	lsl.w	r6, r0, r3
 8000bc6:	0c29      	lsrs	r1, r5, #16
 8000bc8:	fbb7 f2f1 	udiv	r2, r7, r1
 8000bcc:	0c33      	lsrs	r3, r6, #16
 8000bce:	fb01 7c12 	mls	ip, r1, r2, r7
 8000bd2:	b2a8      	uxth	r0, r5
 8000bd4:	ea43 470c 	orr.w	r7, r3, ip, lsl #16
 8000bd8:	fb00 f302 	mul.w	r3, r0, r2
 8000bdc:	42bb      	cmp	r3, r7
 8000bde:	d909      	bls.n	8000bf4 <__divdi3+0x68>
 8000be0:	197f      	adds	r7, r7, r5
 8000be2:	f102 3cff 	add.w	ip, r2, #4294967295
 8000be6:	f080 8101 	bcs.w	8000dec <__divdi3+0x260>
 8000bea:	42bb      	cmp	r3, r7
 8000bec:	f240 80fe 	bls.w	8000dec <__divdi3+0x260>
 8000bf0:	3a02      	subs	r2, #2
 8000bf2:	442f      	add	r7, r5
 8000bf4:	1aff      	subs	r7, r7, r3
 8000bf6:	fbb7 f3f1 	udiv	r3, r7, r1
 8000bfa:	b2b6      	uxth	r6, r6
 8000bfc:	fb01 7113 	mls	r1, r1, r3, r7
 8000c00:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
 8000c04:	fb00 f003 	mul.w	r0, r0, r3
 8000c08:	4288      	cmp	r0, r1
 8000c0a:	d908      	bls.n	8000c1e <__divdi3+0x92>
 8000c0c:	1949      	adds	r1, r1, r5
 8000c0e:	f103 37ff 	add.w	r7, r3, #4294967295
 8000c12:	f080 80ed 	bcs.w	8000df0 <__divdi3+0x264>
 8000c16:	4288      	cmp	r0, r1
 8000c18:	f240 80ea 	bls.w	8000df0 <__divdi3+0x264>
 8000c1c:	3b02      	subs	r3, #2
 8000c1e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8000c22:	2300      	movs	r3, #0
 8000c24:	e003      	b.n	8000c2e <__divdi3+0xa2>
 8000c26:	428b      	cmp	r3, r1
 8000c28:	d90a      	bls.n	8000c40 <__divdi3+0xb4>
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	461a      	mov	r2, r3
 8000c2e:	4610      	mov	r0, r2
 8000c30:	4619      	mov	r1, r3
 8000c32:	b114      	cbz	r4, 8000c3a <__divdi3+0xae>
 8000c34:	4240      	negs	r0, r0
 8000c36:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3a:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000c3e:	4770      	bx	lr
 8000c40:	fab3 f883 	clz	r8, r3
 8000c44:	f1b8 0f00 	cmp.w	r8, #0
 8000c48:	f040 8084 	bne.w	8000d54 <__divdi3+0x1c8>
 8000c4c:	428b      	cmp	r3, r1
 8000c4e:	d302      	bcc.n	8000c56 <__divdi3+0xca>
 8000c50:	4282      	cmp	r2, r0
 8000c52:	f200 80de 	bhi.w	8000e12 <__divdi3+0x286>
 8000c56:	2300      	movs	r3, #0
 8000c58:	2201      	movs	r2, #1
 8000c5a:	e7e8      	b.n	8000c2e <__divdi3+0xa2>
 8000c5c:	b912      	cbnz	r2, 8000c64 <__divdi3+0xd8>
 8000c5e:	2301      	movs	r3, #1
 8000c60:	fbb3 f5f2 	udiv	r5, r3, r2
 8000c64:	fab5 f285 	clz	r2, r5
 8000c68:	2a00      	cmp	r2, #0
 8000c6a:	d139      	bne.n	8000ce0 <__divdi3+0x154>
 8000c6c:	1b7f      	subs	r7, r7, r5
 8000c6e:	0c28      	lsrs	r0, r5, #16
 8000c70:	fa1f fc85 	uxth.w	ip, r5
 8000c74:	2301      	movs	r3, #1
 8000c76:	fbb7 f1f0 	udiv	r1, r7, r0
 8000c7a:	0c32      	lsrs	r2, r6, #16
 8000c7c:	fb00 7711 	mls	r7, r0, r1, r7
 8000c80:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
 8000c84:	fb0c f201 	mul.w	r2, ip, r1
 8000c88:	42ba      	cmp	r2, r7
 8000c8a:	d907      	bls.n	8000c9c <__divdi3+0x110>
 8000c8c:	197f      	adds	r7, r7, r5
 8000c8e:	f101 38ff 	add.w	r8, r1, #4294967295
 8000c92:	d202      	bcs.n	8000c9a <__divdi3+0x10e>
 8000c94:	42ba      	cmp	r2, r7
 8000c96:	f200 80c1 	bhi.w	8000e1c <__divdi3+0x290>
 8000c9a:	4641      	mov	r1, r8
 8000c9c:	1abf      	subs	r7, r7, r2
 8000c9e:	fbb7 f2f0 	udiv	r2, r7, r0
 8000ca2:	b2b6      	uxth	r6, r6
 8000ca4:	fb00 7012 	mls	r0, r0, r2, r7
 8000ca8:	ea46 4000 	orr.w	r0, r6, r0, lsl #16
 8000cac:	fb0c fc02 	mul.w	ip, ip, r2
 8000cb0:	4584      	cmp	ip, r0
 8000cb2:	d907      	bls.n	8000cc4 <__divdi3+0x138>
 8000cb4:	1940      	adds	r0, r0, r5
 8000cb6:	f102 37ff 	add.w	r7, r2, #4294967295
 8000cba:	d202      	bcs.n	8000cc2 <__divdi3+0x136>
 8000cbc:	4584      	cmp	ip, r0
 8000cbe:	f200 80ab 	bhi.w	8000e18 <__divdi3+0x28c>
 8000cc2:	463a      	mov	r2, r7
 8000cc4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000cc8:	e7b1      	b.n	8000c2e <__divdi3+0xa2>
 8000cca:	43e4      	mvns	r4, r4
 8000ccc:	4252      	negs	r2, r2
 8000cce:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cd2:	e764      	b.n	8000b9e <__divdi3+0x12>
 8000cd4:	4240      	negs	r0, r0
 8000cd6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cda:	f04f 34ff 	mov.w	r4, #4294967295
 8000cde:	e75b      	b.n	8000b98 <__divdi3+0xc>
 8000ce0:	4095      	lsls	r5, r2
 8000ce2:	f1c2 0320 	rsb	r3, r2, #32
 8000ce6:	fa27 f103 	lsr.w	r1, r7, r3
 8000cea:	0c28      	lsrs	r0, r5, #16
 8000cec:	fa26 f303 	lsr.w	r3, r6, r3
 8000cf0:	4097      	lsls	r7, r2
 8000cf2:	fbb1 f8f0 	udiv	r8, r1, r0
 8000cf6:	431f      	orrs	r7, r3
 8000cf8:	0c3b      	lsrs	r3, r7, #16
 8000cfa:	fb00 1118 	mls	r1, r0, r8, r1
 8000cfe:	fa1f fc85 	uxth.w	ip, r5
 8000d02:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d06:	fb0c f308 	mul.w	r3, ip, r8
 8000d0a:	428b      	cmp	r3, r1
 8000d0c:	fa06 f602 	lsl.w	r6, r6, r2
 8000d10:	d908      	bls.n	8000d24 <__divdi3+0x198>
 8000d12:	1949      	adds	r1, r1, r5
 8000d14:	f108 32ff 	add.w	r2, r8, #4294967295
 8000d18:	d279      	bcs.n	8000e0e <__divdi3+0x282>
 8000d1a:	428b      	cmp	r3, r1
 8000d1c:	d977      	bls.n	8000e0e <__divdi3+0x282>
 8000d1e:	f1a8 0802 	sub.w	r8, r8, #2
 8000d22:	4429      	add	r1, r5
 8000d24:	1ac9      	subs	r1, r1, r3
 8000d26:	fbb1 f3f0 	udiv	r3, r1, r0
 8000d2a:	b2bf      	uxth	r7, r7
 8000d2c:	fb00 1113 	mls	r1, r0, r3, r1
 8000d30:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d34:	fb0c f203 	mul.w	r2, ip, r3
 8000d38:	42ba      	cmp	r2, r7
 8000d3a:	d907      	bls.n	8000d4c <__divdi3+0x1c0>
 8000d3c:	197f      	adds	r7, r7, r5
 8000d3e:	f103 31ff 	add.w	r1, r3, #4294967295
 8000d42:	d260      	bcs.n	8000e06 <__divdi3+0x27a>
 8000d44:	42ba      	cmp	r2, r7
 8000d46:	d95e      	bls.n	8000e06 <__divdi3+0x27a>
 8000d48:	3b02      	subs	r3, #2
 8000d4a:	442f      	add	r7, r5
 8000d4c:	1abf      	subs	r7, r7, r2
 8000d4e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d52:	e790      	b.n	8000c76 <__divdi3+0xea>
 8000d54:	f1c8 0220 	rsb	r2, r8, #32
 8000d58:	fa03 fc08 	lsl.w	ip, r3, r8
 8000d5c:	fa25 f302 	lsr.w	r3, r5, r2
 8000d60:	ea43 0c0c 	orr.w	ip, r3, ip
 8000d64:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d68:	fa21 f302 	lsr.w	r3, r1, r2
 8000d6c:	fa01 f708 	lsl.w	r7, r1, r8
 8000d70:	fa20 f202 	lsr.w	r2, r0, r2
 8000d74:	fbb3 f1f9 	udiv	r1, r3, r9
 8000d78:	4317      	orrs	r7, r2
 8000d7a:	fb09 3311 	mls	r3, r9, r1, r3
 8000d7e:	0c3a      	lsrs	r2, r7, #16
 8000d80:	fa1f fb8c 	uxth.w	fp, ip
 8000d84:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8000d88:	fb0b fa01 	mul.w	sl, fp, r1
 8000d8c:	459a      	cmp	sl, r3
 8000d8e:	fa05 f008 	lsl.w	r0, r5, r8
 8000d92:	d908      	bls.n	8000da6 <__divdi3+0x21a>
 8000d94:	eb13 030c 	adds.w	r3, r3, ip
 8000d98:	f101 32ff 	add.w	r2, r1, #4294967295
 8000d9c:	d235      	bcs.n	8000e0a <__divdi3+0x27e>
 8000d9e:	459a      	cmp	sl, r3
 8000da0:	d933      	bls.n	8000e0a <__divdi3+0x27e>
 8000da2:	3902      	subs	r1, #2
 8000da4:	4463      	add	r3, ip
 8000da6:	ebca 0303 	rsb	r3, sl, r3
 8000daa:	fbb3 f2f9 	udiv	r2, r3, r9
 8000dae:	fb09 3312 	mls	r3, r9, r2, r3
 8000db2:	b2bf      	uxth	r7, r7
 8000db4:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
 8000db8:	fb0b f902 	mul.w	r9, fp, r2
 8000dbc:	45b9      	cmp	r9, r7
 8000dbe:	d908      	bls.n	8000dd2 <__divdi3+0x246>
 8000dc0:	eb17 070c 	adds.w	r7, r7, ip
 8000dc4:	f102 33ff 	add.w	r3, r2, #4294967295
 8000dc8:	d21b      	bcs.n	8000e02 <__divdi3+0x276>
 8000dca:	45b9      	cmp	r9, r7
 8000dcc:	d919      	bls.n	8000e02 <__divdi3+0x276>
 8000dce:	3a02      	subs	r2, #2
 8000dd0:	4467      	add	r7, ip
 8000dd2:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
 8000dd6:	fba5 0100 	umull	r0, r1, r5, r0
 8000dda:	ebc9 0707 	rsb	r7, r9, r7
 8000dde:	428f      	cmp	r7, r1
 8000de0:	f04f 0300 	mov.w	r3, #0
 8000de4:	d30a      	bcc.n	8000dfc <__divdi3+0x270>
 8000de6:	d005      	beq.n	8000df4 <__divdi3+0x268>
 8000de8:	462a      	mov	r2, r5
 8000dea:	e720      	b.n	8000c2e <__divdi3+0xa2>
 8000dec:	4662      	mov	r2, ip
 8000dee:	e701      	b.n	8000bf4 <__divdi3+0x68>
 8000df0:	463b      	mov	r3, r7
 8000df2:	e714      	b.n	8000c1e <__divdi3+0x92>
 8000df4:	fa06 f608 	lsl.w	r6, r6, r8
 8000df8:	4286      	cmp	r6, r0
 8000dfa:	d2f5      	bcs.n	8000de8 <__divdi3+0x25c>
 8000dfc:	1e6a      	subs	r2, r5, #1
 8000dfe:	2300      	movs	r3, #0
 8000e00:	e715      	b.n	8000c2e <__divdi3+0xa2>
 8000e02:	461a      	mov	r2, r3
 8000e04:	e7e5      	b.n	8000dd2 <__divdi3+0x246>
 8000e06:	460b      	mov	r3, r1
 8000e08:	e7a0      	b.n	8000d4c <__divdi3+0x1c0>
 8000e0a:	4611      	mov	r1, r2
 8000e0c:	e7cb      	b.n	8000da6 <__divdi3+0x21a>
 8000e0e:	4690      	mov	r8, r2
 8000e10:	e788      	b.n	8000d24 <__divdi3+0x198>
 8000e12:	4643      	mov	r3, r8
 8000e14:	4642      	mov	r2, r8
 8000e16:	e70a      	b.n	8000c2e <__divdi3+0xa2>
 8000e18:	3a02      	subs	r2, #2
 8000e1a:	e753      	b.n	8000cc4 <__divdi3+0x138>
 8000e1c:	3902      	subs	r1, #2
 8000e1e:	442f      	add	r7, r5
 8000e20:	e73c      	b.n	8000c9c <__divdi3+0x110>
 8000e22:	bf00      	nop

08000e24 <__udivdi3>:
 8000e24:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000e28:	4614      	mov	r4, r2
 8000e2a:	4605      	mov	r5, r0
 8000e2c:	460e      	mov	r6, r1
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d143      	bne.n	8000eba <__udivdi3+0x96>
 8000e32:	428a      	cmp	r2, r1
 8000e34:	d953      	bls.n	8000ede <__udivdi3+0xba>
 8000e36:	fab2 f782 	clz	r7, r2
 8000e3a:	b157      	cbz	r7, 8000e52 <__udivdi3+0x2e>
 8000e3c:	f1c7 0620 	rsb	r6, r7, #32
 8000e40:	fa20 f606 	lsr.w	r6, r0, r6
 8000e44:	fa01 f307 	lsl.w	r3, r1, r7
 8000e48:	fa02 f407 	lsl.w	r4, r2, r7
 8000e4c:	431e      	orrs	r6, r3
 8000e4e:	fa00 f507 	lsl.w	r5, r0, r7
 8000e52:	0c21      	lsrs	r1, r4, #16
 8000e54:	fbb6 f2f1 	udiv	r2, r6, r1
 8000e58:	0c2b      	lsrs	r3, r5, #16
 8000e5a:	fb01 6712 	mls	r7, r1, r2, r6
 8000e5e:	b2a0      	uxth	r0, r4
 8000e60:	ea43 4607 	orr.w	r6, r3, r7, lsl #16
 8000e64:	fb00 f302 	mul.w	r3, r0, r2
 8000e68:	42b3      	cmp	r3, r6
 8000e6a:	d909      	bls.n	8000e80 <__udivdi3+0x5c>
 8000e6c:	1936      	adds	r6, r6, r4
 8000e6e:	f102 37ff 	add.w	r7, r2, #4294967295
 8000e72:	f080 80f6 	bcs.w	8001062 <__udivdi3+0x23e>
 8000e76:	42b3      	cmp	r3, r6
 8000e78:	f240 80f3 	bls.w	8001062 <__udivdi3+0x23e>
 8000e7c:	3a02      	subs	r2, #2
 8000e7e:	4426      	add	r6, r4
 8000e80:	1af6      	subs	r6, r6, r3
 8000e82:	fbb6 f3f1 	udiv	r3, r6, r1
 8000e86:	b2ad      	uxth	r5, r5
 8000e88:	fb01 6113 	mls	r1, r1, r3, r6
 8000e8c:	ea45 4101 	orr.w	r1, r5, r1, lsl #16
 8000e90:	fb00 f003 	mul.w	r0, r0, r3
 8000e94:	4288      	cmp	r0, r1
 8000e96:	d908      	bls.n	8000eaa <__udivdi3+0x86>
 8000e98:	1909      	adds	r1, r1, r4
 8000e9a:	f103 36ff 	add.w	r6, r3, #4294967295
 8000e9e:	f080 80e2 	bcs.w	8001066 <__udivdi3+0x242>
 8000ea2:	4288      	cmp	r0, r1
 8000ea4:	f240 80df 	bls.w	8001066 <__udivdi3+0x242>
 8000ea8:	3b02      	subs	r3, #2
 8000eaa:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8000eae:	2300      	movs	r3, #0
 8000eb0:	4610      	mov	r0, r2
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000eb8:	4770      	bx	lr
 8000eba:	428b      	cmp	r3, r1
 8000ebc:	d84a      	bhi.n	8000f54 <__udivdi3+0x130>
 8000ebe:	fab3 f683 	clz	r6, r3
 8000ec2:	2e00      	cmp	r6, #0
 8000ec4:	d14d      	bne.n	8000f62 <__udivdi3+0x13e>
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	d302      	bcc.n	8000ed0 <__udivdi3+0xac>
 8000eca:	4282      	cmp	r2, r0
 8000ecc:	f200 80d6 	bhi.w	800107c <__udivdi3+0x258>
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	4610      	mov	r0, r2
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000edc:	4770      	bx	lr
 8000ede:	b912      	cbnz	r2, 8000ee6 <__udivdi3+0xc2>
 8000ee0:	2401      	movs	r4, #1
 8000ee2:	fbb4 f4f2 	udiv	r4, r4, r2
 8000ee6:	fab4 f284 	clz	r2, r4
 8000eea:	2a00      	cmp	r2, #0
 8000eec:	d17c      	bne.n	8000fe8 <__udivdi3+0x1c4>
 8000eee:	1b09      	subs	r1, r1, r4
 8000ef0:	0c26      	lsrs	r6, r4, #16
 8000ef2:	b2a7      	uxth	r7, r4
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	fbb1 f0f6 	udiv	r0, r1, r6
 8000efa:	0c2a      	lsrs	r2, r5, #16
 8000efc:	fb06 1110 	mls	r1, r6, r0, r1
 8000f00:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
 8000f04:	fb07 f200 	mul.w	r2, r7, r0
 8000f08:	428a      	cmp	r2, r1
 8000f0a:	d907      	bls.n	8000f1c <__udivdi3+0xf8>
 8000f0c:	1909      	adds	r1, r1, r4
 8000f0e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f12:	d202      	bcs.n	8000f1a <__udivdi3+0xf6>
 8000f14:	428a      	cmp	r2, r1
 8000f16:	f200 80c3 	bhi.w	80010a0 <__udivdi3+0x27c>
 8000f1a:	4660      	mov	r0, ip
 8000f1c:	1a89      	subs	r1, r1, r2
 8000f1e:	fbb1 f2f6 	udiv	r2, r1, r6
 8000f22:	b2ad      	uxth	r5, r5
 8000f24:	fb06 1112 	mls	r1, r6, r2, r1
 8000f28:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 8000f2c:	fb07 f702 	mul.w	r7, r7, r2
 8000f30:	42af      	cmp	r7, r5
 8000f32:	d908      	bls.n	8000f46 <__udivdi3+0x122>
 8000f34:	192c      	adds	r4, r5, r4
 8000f36:	f102 31ff 	add.w	r1, r2, #4294967295
 8000f3a:	f080 8096 	bcs.w	800106a <__udivdi3+0x246>
 8000f3e:	42a7      	cmp	r7, r4
 8000f40:	f240 8093 	bls.w	800106a <__udivdi3+0x246>
 8000f44:	3a02      	subs	r2, #2
 8000f46:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000f4a:	4610      	mov	r0, r2
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000f52:	4770      	bx	lr
 8000f54:	2300      	movs	r3, #0
 8000f56:	461a      	mov	r2, r3
 8000f58:	4610      	mov	r0, r2
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000f60:	4770      	bx	lr
 8000f62:	f1c6 0520 	rsb	r5, r6, #32
 8000f66:	fa22 f405 	lsr.w	r4, r2, r5
 8000f6a:	40b3      	lsls	r3, r6
 8000f6c:	431c      	orrs	r4, r3
 8000f6e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8000f72:	fa21 f305 	lsr.w	r3, r1, r5
 8000f76:	fa01 f706 	lsl.w	r7, r1, r6
 8000f7a:	fa20 f505 	lsr.w	r5, r0, r5
 8000f7e:	fbb3 fcf8 	udiv	ip, r3, r8
 8000f82:	432f      	orrs	r7, r5
 8000f84:	fb08 331c 	mls	r3, r8, ip, r3
 8000f88:	0c3d      	lsrs	r5, r7, #16
 8000f8a:	fa1f fa84 	uxth.w	sl, r4
 8000f8e:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 8000f92:	fb0a f90c 	mul.w	r9, sl, ip
 8000f96:	4599      	cmp	r9, r3
 8000f98:	fa02 fb06 	lsl.w	fp, r2, r6
 8000f9c:	d904      	bls.n	8000fa8 <__udivdi3+0x184>
 8000f9e:	191b      	adds	r3, r3, r4
 8000fa0:	f10c 32ff 	add.w	r2, ip, #4294967295
 8000fa4:	d36d      	bcc.n	8001082 <__udivdi3+0x25e>
 8000fa6:	4694      	mov	ip, r2
 8000fa8:	ebc9 0303 	rsb	r3, r9, r3
 8000fac:	fbb3 f5f8 	udiv	r5, r3, r8
 8000fb0:	fb08 3315 	mls	r3, r8, r5, r3
 8000fb4:	b2bf      	uxth	r7, r7
 8000fb6:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
 8000fba:	fb0a f805 	mul.w	r8, sl, r5
 8000fbe:	45b8      	cmp	r8, r7
 8000fc0:	d904      	bls.n	8000fcc <__udivdi3+0x1a8>
 8000fc2:	193f      	adds	r7, r7, r4
 8000fc4:	f105 33ff 	add.w	r3, r5, #4294967295
 8000fc8:	d361      	bcc.n	800108e <__udivdi3+0x26a>
 8000fca:	461d      	mov	r5, r3
 8000fcc:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
 8000fd0:	fbac 230b 	umull	r2, r3, ip, fp
 8000fd4:	ebc8 0707 	rsb	r7, r8, r7
 8000fd8:	429f      	cmp	r7, r3
 8000fda:	f04f 0500 	mov.w	r5, #0
 8000fde:	d349      	bcc.n	8001074 <__udivdi3+0x250>
 8000fe0:	d045      	beq.n	800106e <__udivdi3+0x24a>
 8000fe2:	4662      	mov	r2, ip
 8000fe4:	462b      	mov	r3, r5
 8000fe6:	e763      	b.n	8000eb0 <__udivdi3+0x8c>
 8000fe8:	4094      	lsls	r4, r2
 8000fea:	f1c2 0320 	rsb	r3, r2, #32
 8000fee:	fa21 fc03 	lsr.w	ip, r1, r3
 8000ff2:	0c26      	lsrs	r6, r4, #16
 8000ff4:	fa20 f303 	lsr.w	r3, r0, r3
 8000ff8:	fa01 f502 	lsl.w	r5, r1, r2
 8000ffc:	fbbc f8f6 	udiv	r8, ip, r6
 8001000:	ea43 0105 	orr.w	r1, r3, r5
 8001004:	0c0b      	lsrs	r3, r1, #16
 8001006:	fb06 cc18 	mls	ip, r6, r8, ip
 800100a:	b2a7      	uxth	r7, r4
 800100c:	ea43 4c0c 	orr.w	ip, r3, ip, lsl #16
 8001010:	fb07 f308 	mul.w	r3, r7, r8
 8001014:	4563      	cmp	r3, ip
 8001016:	fa00 f502 	lsl.w	r5, r0, r2
 800101a:	d909      	bls.n	8001030 <__udivdi3+0x20c>
 800101c:	eb1c 0c04 	adds.w	ip, ip, r4
 8001020:	f108 32ff 	add.w	r2, r8, #4294967295
 8001024:	d23a      	bcs.n	800109c <__udivdi3+0x278>
 8001026:	4563      	cmp	r3, ip
 8001028:	d938      	bls.n	800109c <__udivdi3+0x278>
 800102a:	f1a8 0802 	sub.w	r8, r8, #2
 800102e:	44a4      	add	ip, r4
 8001030:	ebc3 0c0c 	rsb	ip, r3, ip
 8001034:	fbbc f3f6 	udiv	r3, ip, r6
 8001038:	b289      	uxth	r1, r1
 800103a:	fb06 cc13 	mls	ip, r6, r3, ip
 800103e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8001042:	fb07 f203 	mul.w	r2, r7, r3
 8001046:	428a      	cmp	r2, r1
 8001048:	d907      	bls.n	800105a <__udivdi3+0x236>
 800104a:	1909      	adds	r1, r1, r4
 800104c:	f103 30ff 	add.w	r0, r3, #4294967295
 8001050:	d222      	bcs.n	8001098 <__udivdi3+0x274>
 8001052:	428a      	cmp	r2, r1
 8001054:	d920      	bls.n	8001098 <__udivdi3+0x274>
 8001056:	3b02      	subs	r3, #2
 8001058:	4421      	add	r1, r4
 800105a:	1a89      	subs	r1, r1, r2
 800105c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8001060:	e749      	b.n	8000ef6 <__udivdi3+0xd2>
 8001062:	463a      	mov	r2, r7
 8001064:	e70c      	b.n	8000e80 <__udivdi3+0x5c>
 8001066:	4633      	mov	r3, r6
 8001068:	e71f      	b.n	8000eaa <__udivdi3+0x86>
 800106a:	460a      	mov	r2, r1
 800106c:	e76b      	b.n	8000f46 <__udivdi3+0x122>
 800106e:	40b0      	lsls	r0, r6
 8001070:	4290      	cmp	r0, r2
 8001072:	d2b6      	bcs.n	8000fe2 <__udivdi3+0x1be>
 8001074:	f10c 32ff 	add.w	r2, ip, #4294967295
 8001078:	2300      	movs	r3, #0
 800107a:	e719      	b.n	8000eb0 <__udivdi3+0x8c>
 800107c:	4633      	mov	r3, r6
 800107e:	4632      	mov	r2, r6
 8001080:	e716      	b.n	8000eb0 <__udivdi3+0x8c>
 8001082:	4599      	cmp	r9, r3
 8001084:	d98f      	bls.n	8000fa6 <__udivdi3+0x182>
 8001086:	f1ac 0c02 	sub.w	ip, ip, #2
 800108a:	4423      	add	r3, r4
 800108c:	e78c      	b.n	8000fa8 <__udivdi3+0x184>
 800108e:	45b8      	cmp	r8, r7
 8001090:	d99b      	bls.n	8000fca <__udivdi3+0x1a6>
 8001092:	3d02      	subs	r5, #2
 8001094:	4427      	add	r7, r4
 8001096:	e799      	b.n	8000fcc <__udivdi3+0x1a8>
 8001098:	4603      	mov	r3, r0
 800109a:	e7de      	b.n	800105a <__udivdi3+0x236>
 800109c:	4690      	mov	r8, r2
 800109e:	e7c7      	b.n	8001030 <__udivdi3+0x20c>
 80010a0:	3802      	subs	r0, #2
 80010a2:	4421      	add	r1, r4
 80010a4:	e73a      	b.n	8000f1c <__udivdi3+0xf8>
 80010a6:	bf00      	nop

080010a8 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80010a8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010aa:	f002 fa27 	bl	80034fc <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  HAL_SYSTICK_IRQHandler();
 80010b2:	f002 b9fa 	b.w	80034aa <HAL_SYSTICK_IRQHandler>

080010b6 <RCC_IRQHandler>:

/**
* @brief This function handles RCC global interrupt.
*/
void RCC_IRQHandler(void)
{
 80010b6:	4770      	bx	lr

080010b8 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80010b8:	4801      	ldr	r0, [pc, #4]	; (80010c0 <TIM3_IRQHandler+0x8>)
 80010ba:	f000 bf9b 	b.w	8001ff4 <HAL_TIM_IRQHandler>
 80010be:	bf00      	nop
 80010c0:	200006a0 	.word	0x200006a0

080010c4 <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80010c4:	4801      	ldr	r0, [pc, #4]	; (80010cc <TIM4_IRQHandler+0x8>)
 80010c6:	f000 bf95 	b.w	8001ff4 <HAL_TIM_IRQHandler>
 80010ca:	bf00      	nop
 80010cc:	200005a0 	.word	0x200005a0

080010d0 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80010d0:	4801      	ldr	r0, [pc, #4]	; (80010d8 <USART3_IRQHandler+0x8>)
 80010d2:	f000 bc7b 	b.w	80019cc <HAL_UART_IRQHandler>
 80010d6:	bf00      	nop
 80010d8:	200005e8 	.word	0x200005e8

080010dc <TIM5_IRQHandler>:
void TIM5_IRQHandler(void)
{
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80010dc:	4801      	ldr	r0, [pc, #4]	; (80010e4 <TIM5_IRQHandler+0x8>)
 80010de:	f000 bf89 	b.w	8001ff4 <HAL_TIM_IRQHandler>
 80010e2:	bf00      	nop
 80010e4:	20000664 	.word	0x20000664

080010e8 <UART5_IRQHandler>:
void UART5_IRQHandler(void)
{
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80010e8:	4801      	ldr	r0, [pc, #4]	; (80010f0 <UART5_IRQHandler+0x8>)
 80010ea:	f000 bc6f 	b.w	80019cc <HAL_UART_IRQHandler>
 80010ee:	bf00      	nop
 80010f0:	200006e0 	.word	0x200006e0

080010f4 <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010f4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010f6:	2003      	movs	r0, #3
 80010f8:	f002 f964 	bl	80033c4 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80010fc:	2100      	movs	r1, #0
 80010fe:	460a      	mov	r2, r1
 8001100:	f06f 000b 	mvn.w	r0, #11
 8001104:	f002 f970 	bl	80033e8 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001108:	2100      	movs	r1, #0
 800110a:	460a      	mov	r2, r1
 800110c:	f06f 000a 	mvn.w	r0, #10
 8001110:	f002 f96a 	bl	80033e8 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8001114:	2100      	movs	r1, #0
 8001116:	460a      	mov	r2, r1
 8001118:	f06f 0009 	mvn.w	r0, #9
 800111c:	f002 f964 	bl	80033e8 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8001120:	2100      	movs	r1, #0
 8001122:	460a      	mov	r2, r1
 8001124:	f06f 0003 	mvn.w	r0, #3
 8001128:	f002 f95e 	bl	80033e8 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800112c:	2100      	movs	r1, #0
 800112e:	460a      	mov	r2, r1
 8001130:	f04f 30ff 	mov.w	r0, #4294967295
 8001134:	f002 f958 	bl	80033e8 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init*/
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001138:	2100      	movs	r1, #0
 800113a:	2005      	movs	r0, #5
 800113c:	460a      	mov	r2, r1
 800113e:	f002 f953 	bl	80033e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001142:	2005      	movs	r0, #5

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001144:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);

  /* Peripheral interrupt init*/
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001148:	f002 b980 	b.w	800344c <HAL_NVIC_EnableIRQ>

0800114c <HAL_TIM_Base_MspInit>:

  /* USER CODE END MspInit 1 */
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800114c:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  if(htim_base->Instance==TIM3)
 800114e:	6803      	ldr	r3, [r0, #0]
 8001150:	4a21      	ldr	r2, [pc, #132]	; (80011d8 <HAL_TIM_Base_MspInit+0x8c>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d111      	bne.n	800117a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001156:	2100      	movs	r1, #0
 8001158:	4b20      	ldr	r3, [pc, #128]	; (80011dc <HAL_TIM_Base_MspInit+0x90>)
 800115a:	9101      	str	r1, [sp, #4]
 800115c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800115e:	f042 0202 	orr.w	r2, r2, #2
 8001162:	641a      	str	r2, [r3, #64]	; 0x40
 8001164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001166:	f003 0302 	and.w	r3, r3, #2
 800116a:	9301      	str	r3, [sp, #4]
    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800116c:	201d      	movs	r0, #29
 800116e:	460a      	mov	r2, r1
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001170:	9b01      	ldr	r3, [sp, #4]
    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001172:	f002 f939 	bl	80033e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001176:	201d      	movs	r0, #29
 8001178:	e028      	b.n	80011cc <HAL_TIM_Base_MspInit+0x80>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM4)
 800117a:	4a19      	ldr	r2, [pc, #100]	; (80011e0 <HAL_TIM_Base_MspInit+0x94>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d111      	bne.n	80011a4 <HAL_TIM_Base_MspInit+0x58>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001180:	2100      	movs	r1, #0
 8001182:	4b16      	ldr	r3, [pc, #88]	; (80011dc <HAL_TIM_Base_MspInit+0x90>)
 8001184:	9102      	str	r1, [sp, #8]
 8001186:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001188:	f042 0204 	orr.w	r2, r2, #4
 800118c:	641a      	str	r2, [r3, #64]	; 0x40
 800118e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001190:	f003 0304 	and.w	r3, r3, #4
 8001194:	9302      	str	r3, [sp, #8]
    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001196:	201e      	movs	r0, #30
 8001198:	460a      	mov	r2, r1
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800119a:	9b02      	ldr	r3, [sp, #8]
    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800119c:	f002 f924 	bl	80033e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80011a0:	201e      	movs	r0, #30
 80011a2:	e013      	b.n	80011cc <HAL_TIM_Base_MspInit+0x80>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
  else if(htim_base->Instance==TIM5)
 80011a4:	4a0f      	ldr	r2, [pc, #60]	; (80011e4 <HAL_TIM_Base_MspInit+0x98>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d112      	bne.n	80011d0 <HAL_TIM_Base_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80011aa:	2100      	movs	r1, #0
 80011ac:	4b0b      	ldr	r3, [pc, #44]	; (80011dc <HAL_TIM_Base_MspInit+0x90>)
 80011ae:	9103      	str	r1, [sp, #12]
 80011b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011b2:	f042 0208 	orr.w	r2, r2, #8
 80011b6:	641a      	str	r2, [r3, #64]	; 0x40
 80011b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ba:	f003 0308 	and.w	r3, r3, #8
 80011be:	9303      	str	r3, [sp, #12]
    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80011c0:	2032      	movs	r0, #50	; 0x32
 80011c2:	460a      	mov	r2, r1
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80011c4:	9b03      	ldr	r3, [sp, #12]
    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80011c6:	f002 f90f 	bl	80033e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80011ca:	2032      	movs	r0, #50	; 0x32
 80011cc:	f002 f93e 	bl	800344c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80011d0:	b005      	add	sp, #20
 80011d2:	f85d fb04 	ldr.w	pc, [sp], #4
 80011d6:	bf00      	nop
 80011d8:	40000400 	.word	0x40000400
 80011dc:	40023800 	.word	0x40023800
 80011e0:	40000800 	.word	0x40000800
 80011e4:	40000c00 	.word	0x40000c00

080011e8 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==UART5)
 80011ec:	6803      	ldr	r3, [r0, #0]
 80011ee:	4a2e      	ldr	r2, [pc, #184]	; (80012a8 <HAL_UART_MspInit+0xc0>)
 80011f0:	4293      	cmp	r3, r2
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011f2:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==UART5)
 80011f4:	d12e      	bne.n	8001254 <HAL_UART_MspInit+0x6c>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80011f6:	2400      	movs	r4, #0
 80011f8:	4b2c      	ldr	r3, [pc, #176]	; (80012ac <HAL_UART_MspInit+0xc4>)
 80011fa:	9401      	str	r4, [sp, #4]
 80011fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011fe:	482c      	ldr	r0, [pc, #176]	; (80012b0 <HAL_UART_MspInit+0xc8>)
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001200:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001204:	641a      	str	r2, [r3, #64]	; 0x40
 8001206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001208:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800120c:	9301      	str	r3, [sp, #4]
 800120e:	9b01      	ldr	r3, [sp, #4]
    /**UART5 GPIO Configuration    
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001210:	f04f 0802 	mov.w	r8, #2
  
    /**UART5 GPIO Configuration    
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001214:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001218:	2701      	movs	r7, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800121a:	2603      	movs	r6, #3
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800121c:	2508      	movs	r5, #8
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800121e:	a903      	add	r1, sp, #12
  
    /**UART5 GPIO Configuration    
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001220:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001222:	f8cd 8010 	str.w	r8, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001226:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001228:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800122a:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800122c:	f001 ffce 	bl	80031cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001230:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001232:	4820      	ldr	r0, [pc, #128]	; (80012b4 <HAL_UART_MspInit+0xcc>)
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001234:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001236:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001238:	f8cd 8010 	str.w	r8, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800123c:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800123e:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001240:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001242:	f001 ffc3 	bl	80031cc <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8001246:	2035      	movs	r0, #53	; 0x35
 8001248:	4621      	mov	r1, r4
 800124a:	4622      	mov	r2, r4
 800124c:	f002 f8cc 	bl	80033e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001250:	2035      	movs	r0, #53	; 0x35
 8001252:	e023      	b.n	800129c <HAL_UART_MspInit+0xb4>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
  else if(huart->Instance==USART3)
 8001254:	4a18      	ldr	r2, [pc, #96]	; (80012b8 <HAL_UART_MspInit+0xd0>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d122      	bne.n	80012a0 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800125a:	2400      	movs	r4, #0
 800125c:	4b13      	ldr	r3, [pc, #76]	; (80012ac <HAL_UART_MspInit+0xc4>)
 800125e:	9402      	str	r4, [sp, #8]
 8001260:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001262:	4814      	ldr	r0, [pc, #80]	; (80012b4 <HAL_UART_MspInit+0xcc>)
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001264:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001268:	641a      	str	r2, [r3, #64]	; 0x40
 800126a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001270:	9302      	str	r3, [sp, #8]
 8001272:	9b02      	ldr	r3, [sp, #8]
  
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001274:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001278:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127a:	2302      	movs	r3, #2
 800127c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800127e:	2301      	movs	r3, #1
 8001280:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001282:	2303      	movs	r3, #3
 8001284:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001286:	a903      	add	r1, sp, #12
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001288:	2307      	movs	r3, #7
 800128a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800128c:	f001 ff9e 	bl	80031cc <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001290:	2027      	movs	r0, #39	; 0x27
 8001292:	4621      	mov	r1, r4
 8001294:	4622      	mov	r2, r4
 8001296:	f002 f8a7 	bl	80033e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800129a:	2027      	movs	r0, #39	; 0x27
 800129c:	f002 f8d6 	bl	800344c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80012a0:	b008      	add	sp, #32
 80012a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80012a6:	bf00      	nop
 80012a8:	40005000 	.word	0x40005000
 80012ac:	40023800 	.word	0x40023800
 80012b0:	40020800 	.word	0x40020800
 80012b4:	40020c00 	.word	0x40020c00
 80012b8:	40004800 	.word	0x40004800
 80012bc:	00000000 	.word	0x00000000

080012c0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE END PFP */

/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012c0:	b530      	push	{r4, r5, lr}
	static int	n=0;
	char s[20];

	if(htim->Instance==TIM3) {
 80012c2:	6803      	ldr	r3, [r0, #0]
 80012c4:	4a34      	ldr	r2, [pc, #208]	; (8001398 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80012c6:	4c35      	ldr	r4, [pc, #212]	; (800139c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80012c8:	4293      	cmp	r3, r2

/* USER CODE END PFP */

/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012ca:	b089      	sub	sp, #36	; 0x24
	static int	n=0;
	char s[20];

	if(htim->Instance==TIM3) {
 80012cc:	d116      	bne.n	80012fc <HAL_TIM_PeriodElapsedCallback+0x3c>
		HAL_GPIO_TogglePin(GPIOB,  GPIO_PIN_15 | GPIO_PIN_0);
 80012ce:	4834      	ldr	r0, [pc, #208]	; (80013a0 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80012d0:	f248 0101 	movw	r1, #32769	; 0x8001
 80012d4:	f002 f872 	bl	80033bc <HAL_GPIO_TogglePin>
	    sprintf(s,"%3d : %10.5lf\r\n",n,sin(n*PI/180));
 80012d8:	6825      	ldr	r5, [r4, #0]
 80012da:	4628      	mov	r0, r5
 80012dc:	f7ff f8e6 	bl	80004ac <__aeabi_i2d>
 80012e0:	a32b      	add	r3, pc, #172	; (adr r3, 8001390 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80012e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e6:	f7ff f947 	bl	8000578 <__aeabi_dmul>
 80012ea:	2200      	movs	r2, #0
 80012ec:	4b2d      	ldr	r3, [pc, #180]	; (80013a4 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80012ee:	f7ff fa6d 	bl	80007cc <__aeabi_ddiv>
 80012f2:	ec41 0b10 	vmov	d0, r0, r1
 80012f6:	f005 f8cb 	bl	8006490 <sin>
 80012fa:	e032      	b.n	8001362 <HAL_TIM_PeriodElapsedCallback+0xa2>
		HAL_UART_Transmit(&huart3, (uint8_t *)s,18 ,1000);
	}
	else if(htim->Instance==TIM4) {
 80012fc:	4a2a      	ldr	r2, [pc, #168]	; (80013a8 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d116      	bne.n	8001330 <HAL_TIM_PeriodElapsedCallback+0x70>
		HAL_GPIO_TogglePin(GPIOB,  LD2_Pin | GPIO_PIN_13);
 8001302:	4827      	ldr	r0, [pc, #156]	; (80013a0 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001304:	f44f 5102 	mov.w	r1, #8320	; 0x2080
 8001308:	f002 f858 	bl	80033bc <HAL_GPIO_TogglePin>
	    sprintf(s,"%3d : %10.5lf\r\n",n,cos(n*PI/180));
 800130c:	6825      	ldr	r5, [r4, #0]
 800130e:	4628      	mov	r0, r5
 8001310:	f7ff f8cc 	bl	80004ac <__aeabi_i2d>
 8001314:	a31e      	add	r3, pc, #120	; (adr r3, 8001390 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800131a:	f7ff f92d 	bl	8000578 <__aeabi_dmul>
 800131e:	2200      	movs	r2, #0
 8001320:	4b20      	ldr	r3, [pc, #128]	; (80013a4 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001322:	f7ff fa53 	bl	80007cc <__aeabi_ddiv>
 8001326:	ec41 0b10 	vmov	d0, r0, r1
 800132a:	f005 f86d 	bl	8006408 <cos>
 800132e:	e018      	b.n	8001362 <HAL_TIM_PeriodElapsedCallback+0xa2>
		HAL_UART_Transmit(&huart3, (uint8_t *)s,18 ,1000);
	}
	else if(htim->Instance==TIM5) {
 8001330:	4a1e      	ldr	r2, [pc, #120]	; (80013ac <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d123      	bne.n	800137e <HAL_TIM_PeriodElapsedCallback+0xbe>
		HAL_GPIO_TogglePin(GPIOB,  LD3_Pin | GPIO_PIN_12);
 8001336:	481a      	ldr	r0, [pc, #104]	; (80013a0 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001338:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 800133c:	f002 f83e 	bl	80033bc <HAL_GPIO_TogglePin>
	    sprintf(s,"%3d : %10.5lf\r\n",n,exp(n*PI/180));
 8001340:	6825      	ldr	r5, [r4, #0]
 8001342:	4628      	mov	r0, r5
 8001344:	f7ff f8b2 	bl	80004ac <__aeabi_i2d>
 8001348:	a311      	add	r3, pc, #68	; (adr r3, 8001390 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800134a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800134e:	f7ff f913 	bl	8000578 <__aeabi_dmul>
 8001352:	2200      	movs	r2, #0
 8001354:	4b13      	ldr	r3, [pc, #76]	; (80013a4 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001356:	f7ff fa39 	bl	80007cc <__aeabi_ddiv>
 800135a:	ec41 0b10 	vmov	d0, r0, r1
 800135e:	f005 f8df 	bl	8006520 <exp>
 8001362:	4913      	ldr	r1, [pc, #76]	; (80013b0 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001364:	462a      	mov	r2, r5
 8001366:	ed8d 0b00 	vstr	d0, [sp]
 800136a:	a803      	add	r0, sp, #12
 800136c:	f002 f94e 	bl	800360c <sprintf>
		HAL_UART_Transmit(&huart3, (uint8_t *)s,18 ,1000);
 8001370:	4810      	ldr	r0, [pc, #64]	; (80013b4 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001372:	a903      	add	r1, sp, #12
 8001374:	2212      	movs	r2, #18
 8001376:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800137a:	f000 fac9 	bl	8001910 <HAL_UART_Transmit>
	}
	if(++n==91) n = 0;
 800137e:	6822      	ldr	r2, [r4, #0]
 8001380:	4b06      	ldr	r3, [pc, #24]	; (800139c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001382:	3201      	adds	r2, #1
 8001384:	2a5b      	cmp	r2, #91	; 0x5b
 8001386:	bf08      	it	eq
 8001388:	2200      	moveq	r2, #0
 800138a:	601a      	str	r2, [r3, #0]

}
 800138c:	b009      	add	sp, #36	; 0x24
 800138e:	bd30      	pop	{r4, r5, pc}
 8001390:	fc8b007a 	.word	0xfc8b007a
 8001394:	400921fa 	.word	0x400921fa
 8001398:	40000400 	.word	0x40000400
 800139c:	20000560 	.word	0x20000560
 80013a0:	40020400 	.word	0x40020400
 80013a4:	40668000 	.word	0x40668000
 80013a8:	40000800 	.word	0x40000800
 80013ac:	40000c00 	.word	0x40000c00
 80013b0:	080079b8 	.word	0x080079b8
 80013b4:	200005e8 	.word	0x200005e8

080013b8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
	uint8_t	i;

	if(huart->Instance==USART3)
 80013b8:	6803      	ldr	r3, [r0, #0]
 80013ba:	4a28      	ldr	r2, [pc, #160]	; (800145c <HAL_UART_RxCpltCallback+0xa4>)
 80013bc:	4293      	cmp	r3, r2
	if(++n==91) n = 0;

}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80013be:	b510      	push	{r4, lr}
	uint8_t	i;

	if(huart->Instance==USART3)
 80013c0:	d120      	bne.n	8001404 <HAL_UART_RxCpltCallback+0x4c>
	{
		if(Rx_Indx3==0)
 80013c2:	4927      	ldr	r1, [pc, #156]	; (8001460 <HAL_UART_RxCpltCallback+0xa8>)
 80013c4:	780b      	ldrb	r3, [r1, #0]
 80013c6:	b143      	cbz	r3, 80013da <HAL_UART_RxCpltCallback+0x22>
		{
			for(i=0;i<DATA;i++) Rx_Buffer3[i] = 0;
		}
		if(Rx_Data3[0]!=0x0d)
 80013c8:	4a26      	ldr	r2, [pc, #152]	; (8001464 <HAL_UART_RxCpltCallback+0xac>)
 80013ca:	7812      	ldrb	r2, [r2, #0]
 80013cc:	2a0d      	cmp	r2, #13
 80013ce:	d00c      	beq.n	80013ea <HAL_UART_RxCpltCallback+0x32>
		{
			Rx_Buffer3[Rx_Indx3++]=Rx_Data3[0];
 80013d0:	1c58      	adds	r0, r3, #1
 80013d2:	7008      	strb	r0, [r1, #0]
 80013d4:	4924      	ldr	r1, [pc, #144]	; (8001468 <HAL_UART_RxCpltCallback+0xb0>)
 80013d6:	54ca      	strb	r2, [r1, r3]
 80013d8:	e00c      	b.n	80013f4 <HAL_UART_RxCpltCallback+0x3c>
{
	uint8_t	i;

	if(huart->Instance==USART3)
	{
		if(Rx_Indx3==0)
 80013da:	461a      	mov	r2, r3
		{
			for(i=0;i<DATA;i++) Rx_Buffer3[i] = 0;
 80013dc:	4822      	ldr	r0, [pc, #136]	; (8001468 <HAL_UART_RxCpltCallback+0xb0>)
 80013de:	2400      	movs	r4, #0
 80013e0:	5414      	strb	r4, [r2, r0]
 80013e2:	3201      	adds	r2, #1
 80013e4:	2a0a      	cmp	r2, #10
 80013e6:	d1f9      	bne.n	80013dc <HAL_UART_RxCpltCallback+0x24>
 80013e8:	e7ee      	b.n	80013c8 <HAL_UART_RxCpltCallback+0x10>
		{
			Rx_Buffer3[Rx_Indx3++]=Rx_Data3[0];
		}
		else
		{
			Rx_Indx3 = 0;
 80013ea:	2300      	movs	r3, #0
 80013ec:	700b      	strb	r3, [r1, #0]
			Transfer_cplt3 = 1;
 80013ee:	4b1f      	ldr	r3, [pc, #124]	; (800146c <HAL_UART_RxCpltCallback+0xb4>)
 80013f0:	2201      	movs	r2, #1
 80013f2:	701a      	strb	r2, [r3, #0]
		}
		HAL_UART_Receive_IT(&huart3, Rx_Data3, 1);
 80013f4:	491b      	ldr	r1, [pc, #108]	; (8001464 <HAL_UART_RxCpltCallback+0xac>)
 80013f6:	481e      	ldr	r0, [pc, #120]	; (8001470 <HAL_UART_RxCpltCallback+0xb8>)
 80013f8:	2201      	movs	r2, #1
 80013fa:	f000 f9f3 	bl	80017e4 <HAL_UART_Receive_IT>
		HAL_UART_Transmit(&huart3, Rx_Data3, 1,1000);
 80013fe:	481c      	ldr	r0, [pc, #112]	; (8001470 <HAL_UART_RxCpltCallback+0xb8>)
 8001400:	4918      	ldr	r1, [pc, #96]	; (8001464 <HAL_UART_RxCpltCallback+0xac>)
 8001402:	e022      	b.n	800144a <HAL_UART_RxCpltCallback+0x92>
			Transfer_cplt4 = 1;
		}
		HAL_UART_Receive_IT(&huart4, Rx_Data4, 1);
		HAL_UART_Transmit(&huart4, Rx_Data4, 1,1000);
	} */
	else if(huart->Instance==UART5)
 8001404:	4a1b      	ldr	r2, [pc, #108]	; (8001474 <HAL_UART_RxCpltCallback+0xbc>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d126      	bne.n	8001458 <HAL_UART_RxCpltCallback+0xa0>
	{
		if(Rx_Indx5==0)
 800140a:	491b      	ldr	r1, [pc, #108]	; (8001478 <HAL_UART_RxCpltCallback+0xc0>)
 800140c:	780b      	ldrb	r3, [r1, #0]
 800140e:	b143      	cbz	r3, 8001422 <HAL_UART_RxCpltCallback+0x6a>
		{
			for(i=0;i<DATA;i++) Rx_Buffer5[i] = 0;
		}
		if(Rx_Data5[0]!=0x0d)
 8001410:	4a1a      	ldr	r2, [pc, #104]	; (800147c <HAL_UART_RxCpltCallback+0xc4>)
 8001412:	7812      	ldrb	r2, [r2, #0]
 8001414:	2a0d      	cmp	r2, #13
 8001416:	d00c      	beq.n	8001432 <HAL_UART_RxCpltCallback+0x7a>
		{
			Rx_Buffer5[Rx_Indx5++]=Rx_Data5[0];
 8001418:	1c58      	adds	r0, r3, #1
 800141a:	7008      	strb	r0, [r1, #0]
 800141c:	4918      	ldr	r1, [pc, #96]	; (8001480 <HAL_UART_RxCpltCallback+0xc8>)
 800141e:	54ca      	strb	r2, [r1, r3]
 8001420:	e00c      	b.n	800143c <HAL_UART_RxCpltCallback+0x84>
		HAL_UART_Receive_IT(&huart4, Rx_Data4, 1);
		HAL_UART_Transmit(&huart4, Rx_Data4, 1,1000);
	} */
	else if(huart->Instance==UART5)
	{
		if(Rx_Indx5==0)
 8001422:	461a      	mov	r2, r3
		{
			for(i=0;i<DATA;i++) Rx_Buffer5[i] = 0;
 8001424:	4816      	ldr	r0, [pc, #88]	; (8001480 <HAL_UART_RxCpltCallback+0xc8>)
 8001426:	2400      	movs	r4, #0
 8001428:	5414      	strb	r4, [r2, r0]
 800142a:	3201      	adds	r2, #1
 800142c:	2a0a      	cmp	r2, #10
 800142e:	d1f9      	bne.n	8001424 <HAL_UART_RxCpltCallback+0x6c>
 8001430:	e7ee      	b.n	8001410 <HAL_UART_RxCpltCallback+0x58>
		{
			Rx_Buffer5[Rx_Indx5++]=Rx_Data5[0];
		}
		else
		{
			Rx_Indx5 = 0;
 8001432:	2300      	movs	r3, #0
 8001434:	700b      	strb	r3, [r1, #0]
			Transfer_cplt5 = 1;
 8001436:	4b13      	ldr	r3, [pc, #76]	; (8001484 <HAL_UART_RxCpltCallback+0xcc>)
 8001438:	2201      	movs	r2, #1
 800143a:	701a      	strb	r2, [r3, #0]
		}
		HAL_UART_Receive_IT(&huart5, Rx_Data5, 1);
 800143c:	490f      	ldr	r1, [pc, #60]	; (800147c <HAL_UART_RxCpltCallback+0xc4>)
 800143e:	4812      	ldr	r0, [pc, #72]	; (8001488 <HAL_UART_RxCpltCallback+0xd0>)
 8001440:	2201      	movs	r2, #1
 8001442:	f000 f9cf 	bl	80017e4 <HAL_UART_Receive_IT>
		HAL_UART_Transmit(&huart5, Rx_Data5, 1,1000);
 8001446:	4810      	ldr	r0, [pc, #64]	; (8001488 <HAL_UART_RxCpltCallback+0xd0>)
 8001448:	490c      	ldr	r1, [pc, #48]	; (800147c <HAL_UART_RxCpltCallback+0xc4>)
 800144a:	2201      	movs	r2, #1
 800144c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
	}
}
 8001450:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		{
			Rx_Indx5 = 0;
			Transfer_cplt5 = 1;
		}
		HAL_UART_Receive_IT(&huart5, Rx_Data5, 1);
		HAL_UART_Transmit(&huart5, Rx_Data5, 1,1000);
 8001454:	f000 ba5c 	b.w	8001910 <HAL_UART_Transmit>
 8001458:	bd10      	pop	{r4, pc}
 800145a:	bf00      	nop
 800145c:	40004800 	.word	0x40004800
 8001460:	20000756 	.word	0x20000756
 8001464:	20000753 	.word	0x20000753
 8001468:	200005dc 	.word	0x200005dc
 800146c:	2000075a 	.word	0x2000075a
 8001470:	200005e8 	.word	0x200005e8
 8001474:	40005000 	.word	0x40005000
 8001478:	200006dc 	.word	0x200006dc
 800147c:	20000758 	.word	0x20000758
 8001480:	20000658 	.word	0x20000658
 8001484:	20000755 	.word	0x20000755
 8001488:	200006e0 	.word	0x200006e0

0800148c <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 800148c:	b570      	push	{r4, r5, r6, lr}
 800148e:	b0b4      	sub	sp, #208	; 0xd0

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
 8001490:	2400      	movs	r4, #0
 8001492:	4b2a      	ldr	r3, [pc, #168]	; (800153c <SystemClock_Config+0xb0>)
 8001494:	9400      	str	r4, [sp, #0]
 8001496:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001498:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800149c:	641a      	str	r2, [r3, #64]	; 0x40
 800149e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a4:	9300      	str	r3, [sp, #0]
 80014a6:	9b00      	ldr	r3, [sp, #0]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014a8:	4b25      	ldr	r3, [pc, #148]	; (8001540 <SystemClock_Config+0xb4>)
 80014aa:	9401      	str	r4, [sp, #4]
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014ba:	9301      	str	r3, [sp, #4]
 80014bc:	9b01      	ldr	r3, [sp, #4]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014be:	2301      	movs	r3, #1
 80014c0:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014c6:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014c8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014cc:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014ce:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80014d0:	2604      	movs	r6, #4
  RCC_OscInitStruct.PLL.PLLN = 216;
 80014d2:	23d8      	movs	r3, #216	; 0xd8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80014d4:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 216;
 80014d6:	9310      	str	r3, [sp, #64]	; 0x40

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014d8:	950d      	str	r5, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
 80014da:	960f      	str	r6, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014dc:	9511      	str	r5, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80014de:	9512      	str	r5, [sp, #72]	; 0x48
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80014e0:	f001 fafa 	bl	8002ad8 <HAL_RCC_OscConfig>

  HAL_PWREx_EnableOverDrive();
 80014e4:	f001 fe38 	bl	8003158 <HAL_PWREx_EnableOverDrive>

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014e8:	230f      	movs	r3, #15
 80014ea:	9302      	str	r3, [sp, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80014ec:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7);
 80014f0:	2107      	movs	r1, #7

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80014f2:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7);
 80014f4:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80014f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014fa:	9306      	str	r3, [sp, #24]

  HAL_PWREx_EnableOverDrive();

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014fc:	9503      	str	r5, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014fe:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7);
 8001500:	f001 fcb6 	bl	8002e70 <HAL_RCC_ClockConfig>

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_UART5;
 8001504:	f44f 63a0 	mov.w	r3, #1280	; 0x500
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
  PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8001508:	a813      	add	r0, sp, #76	; 0x4c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7);

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_UART5;
 800150a:	9313      	str	r3, [sp, #76]	; 0x4c
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800150c:	9426      	str	r4, [sp, #152]	; 0x98
  PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 800150e:	9428      	str	r4, [sp, #160]	; 0xa0
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8001510:	f000 ff34 	bl	800237c <HAL_RCCEx_PeriphCLKConfig>

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001514:	f001 fdda 	bl	80030cc <HAL_RCC_GetHCLKFreq>
 8001518:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800151c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001520:	f001 ffa0 	bl	8003464 <HAL_SYSTICK_Config>

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001524:	4630      	mov	r0, r6
 8001526:	f001 ffb3 	bl	8003490 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800152a:	f04f 30ff 	mov.w	r0, #4294967295
 800152e:	4621      	mov	r1, r4
 8001530:	4622      	mov	r2, r4
 8001532:	f001 ff59 	bl	80033e8 <HAL_NVIC_SetPriority>
}
 8001536:	b034      	add	sp, #208	; 0xd0
 8001538:	bd70      	pop	{r4, r5, r6, pc}
 800153a:	bf00      	nop
 800153c:	40023800 	.word	0x40023800
 8001540:	40007000 	.word	0x40007000

08001544 <main>:
}

/* USER CODE END 0 */

int main(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b08e      	sub	sp, #56	; 0x38
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001548:	2400      	movs	r4, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800154a:	f001 ffc5 	bl	80034d8 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 800154e:	f7ff ff9d 	bl	800148c <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001552:	4b93      	ldr	r3, [pc, #588]	; (80017a0 <main+0x25c>)
 8001554:	9400      	str	r4, [sp, #0]
 8001556:	6b1a      	ldr	r2, [r3, #48]	; 0x30

  /*Configure GPIO pin : User_Blue_Button_Pin */
  GPIO_InitStruct.Pin = User_Blue_Button_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(User_Blue_Button_GPIO_Port, &GPIO_InitStruct);
 8001558:	4892      	ldr	r0, [pc, #584]	; (80017a4 <main+0x260>)
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800155a:	f042 0204 	orr.w	r2, r2, #4
 800155e:	631a      	str	r2, [r3, #48]	; 0x30
 8001560:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001562:	f002 0204 	and.w	r2, r2, #4
 8001566:	9200      	str	r2, [sp, #0]
 8001568:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800156a:	9401      	str	r4, [sp, #4]
 800156c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800156e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001572:	631a      	str	r2, [r3, #48]	; 0x30
 8001574:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001576:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800157a:	9201      	str	r2, [sp, #4]
 800157c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800157e:	9402      	str	r4, [sp, #8]
 8001580:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001582:	f042 0201 	orr.w	r2, r2, #1
 8001586:	631a      	str	r2, [r3, #48]	; 0x30
 8001588:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800158a:	f002 0201 	and.w	r2, r2, #1
 800158e:	9202      	str	r2, [sp, #8]
 8001590:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001592:	9403      	str	r4, [sp, #12]
 8001594:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001596:	f042 0202 	orr.w	r2, r2, #2
 800159a:	631a      	str	r2, [r3, #48]	; 0x30
 800159c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800159e:	f002 0202 	and.w	r2, r2, #2
 80015a2:	9203      	str	r2, [sp, #12]
 80015a4:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015a6:	9404      	str	r4, [sp, #16]
 80015a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015aa:	f042 0208 	orr.w	r2, r2, #8
 80015ae:	631a      	str	r2, [r3, #48]	; 0x30
 80015b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015b2:	f002 0208 	and.w	r2, r2, #8
 80015b6:	9204      	str	r2, [sp, #16]
 80015b8:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80015ba:	9405      	str	r4, [sp, #20]
 80015bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80015c2:	631a      	str	r2, [r3, #48]	; 0x30
 80015c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015ca:	9305      	str	r3, [sp, #20]

  /*Configure GPIO pin : User_Blue_Button_Pin */
  GPIO_InitStruct.Pin = User_Blue_Button_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(User_Blue_Button_GPIO_Port, &GPIO_InitStruct);
 80015cc:	a909      	add	r1, sp, #36	; 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80015ce:	9b05      	ldr	r3, [sp, #20]

  /*Configure GPIO pin : User_Blue_Button_Pin */
  GPIO_InitStruct.Pin = User_Blue_Button_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015d0:	940a      	str	r4, [sp, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOG_CLK_ENABLE();

  /*Configure GPIO pin : User_Blue_Button_Pin */
  GPIO_InitStruct.Pin = User_Blue_Button_Pin;
 80015d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(User_Blue_Button_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d6:	2602      	movs	r6, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015d8:	2503      	movs	r5, #3
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015da:	270b      	movs	r7, #11
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOG_CLK_ENABLE();

  /*Configure GPIO pin : User_Blue_Button_Pin */
  GPIO_InitStruct.Pin = User_Blue_Button_Pin;
 80015dc:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015de:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(User_Blue_Button_GPIO_Port, &GPIO_InitStruct);
 80015e0:	f001 fdf4 	bl	80031cc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80015e4:	2332      	movs	r3, #50	; 0x32
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015e6:	486f      	ldr	r0, [pc, #444]	; (80017a4 <main+0x260>)
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(User_Blue_Button_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80015e8:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015ea:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(User_Blue_Button_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ec:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ee:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015f0:	970d      	str	r7, [sp, #52]	; 0x34
  HAL_GPIO_Init(User_Blue_Button_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f2:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015f4:	f001 fdea 	bl	80031cc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80015f8:	2386      	movs	r3, #134	; 0x86
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015fa:	486b      	ldr	r0, [pc, #428]	; (80017a8 <main+0x264>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : RMII_REF_CK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80015fc:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015fe:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : RMII_REF_CK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001600:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001602:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001604:	970d      	str	r7, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : PB0 PB12 PB13 LD3_Pin 
                           PB15 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_12|GPIO_PIN_13|LD3_Pin 
 8001606:	f24f 0981 	movw	r9, #61569	; 0xf081
                          |GPIO_PIN_15|LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800160a:	f04f 0a01 	mov.w	sl, #1
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : RMII_REF_CK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160e:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001610:	f001 fddc 	bl	80031cc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_12|GPIO_PIN_13|LD3_Pin 
                          |GPIO_PIN_15|LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001614:	4865      	ldr	r0, [pc, #404]	; (80017ac <main+0x268>)
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : PB0 PB12 PB13 LD3_Pin 
                           PB15 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_12|GPIO_PIN_13|LD3_Pin 
 8001616:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
                          |GPIO_PIN_15|LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800161a:	a909      	add	r1, sp, #36	; 0x24

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800161c:	f04f 0840 	mov.w	r8, #64	; 0x40

  /*Configure GPIO pins : PB0 PB12 PB13 LD3_Pin 
                           PB15 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_12|GPIO_PIN_13|LD3_Pin 
                          |GPIO_PIN_15|LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001620:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001624:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001626:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001628:	f001 fdd0 	bl	80031cc <HAL_GPIO_Init>
  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800162c:	4860      	ldr	r0, [pc, #384]	; (80017b0 <main+0x26c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800162e:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001632:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001634:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001638:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800163a:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800163c:	f001 fdc6 	bl	80031cc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001640:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001642:	485b      	ldr	r0, [pc, #364]	; (80017b0 <main+0x26c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001644:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001646:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001648:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164a:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800164c:	f001 fdbe 	bl	80031cc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001650:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001654:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001656:	4854      	ldr	r0, [pc, #336]	; (80017a8 <main+0x264>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001658:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800165a:	230a      	movs	r3, #10
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800165c:	a909      	add	r1, sp, #36	; 0x24

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800165e:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001660:	930d      	str	r3, [sp, #52]	; 0x34
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001662:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001664:	f001 fdb2 	bl	80031cc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001668:	f44f 5320 	mov.w	r3, #10240	; 0x2800
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800166c:	4850      	ldr	r0, [pc, #320]	; (80017b0 <main+0x26c>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800166e:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001670:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001672:	960a      	str	r6, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001674:	950c      	str	r5, [sp, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001676:	970d      	str	r7, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001678:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800167a:	f001 fda7 	bl	80031cc <HAL_GPIO_Init>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_12|GPIO_PIN_13|LD3_Pin 
 800167e:	484b      	ldr	r0, [pc, #300]	; (80017ac <main+0x268>)
{

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim3.Instance = TIM3;
 8001680:	4d4c      	ldr	r5, [pc, #304]	; (80017b4 <main+0x270>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_12|GPIO_PIN_13|LD3_Pin 
 8001682:	4649      	mov	r1, r9
 8001684:	4622      	mov	r2, r4
 8001686:	f001 fe95 	bl	80033b4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15|LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800168a:	4622      	mov	r2, r4
 800168c:	4641      	mov	r1, r8
 800168e:	4848      	ldr	r0, [pc, #288]	; (80017b0 <main+0x26c>)
 8001690:	f001 fe90 	bl	80033b4 <HAL_GPIO_WritePin>

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 10800;
 8001694:	4b48      	ldr	r3, [pc, #288]	; (80017b8 <main+0x274>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001696:	60ac      	str	r4, [r5, #8]

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 10800;
 8001698:	f642 2730 	movw	r7, #10800	; 0x2a30
 800169c:	e885 0088 	stmia.w	r5, {r3, r7}
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 9999;
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  HAL_TIM_Base_Init(&htim3);
 80016a0:	4628      	mov	r0, r5
  TIM_MasterConfigTypeDef sMasterConfig;

  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 10800;
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 9999;
 80016a2:	f242 730f 	movw	r3, #9999	; 0x270f
 80016a6:	60eb      	str	r3, [r5, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  HAL_TIM_Base_Init(&htim3);

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016a8:	f44f 5680 	mov.w	r6, #4096	; 0x1000

  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 10800;
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 9999;
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016ac:	612c      	str	r4, [r5, #16]
  HAL_TIM_Base_Init(&htim3);
 80016ae:	f000 fdb5 	bl	800221c <HAL_TIM_Base_Init>

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig);
 80016b2:	4628      	mov	r0, r5
 80016b4:	a909      	add	r1, sp, #36	; 0x24
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 9999;
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  HAL_TIM_Base_Init(&htim3);

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016b6:	9609      	str	r6, [sp, #36]	; 0x24
  HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig);
 80016b8:	f000 fdd0 	bl	800225c <HAL_TIM_ConfigClockSource>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig);
 80016bc:	a906      	add	r1, sp, #24
 80016be:	4628      	mov	r0, r5
  HAL_TIM_Base_Init(&htim3);

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig);

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016c0:	9406      	str	r4, [sp, #24]
{

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim4.Instance = TIM4;
 80016c2:	4d3e      	ldr	r5, [pc, #248]	; (80017bc <main+0x278>)

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig);

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016c4:	9408      	str	r4, [sp, #32]
  HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig);
 80016c6:	f000 fc39 	bl	8001f3c <HAL_TIMEx_MasterConfigSynchronization>
{

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim4.Instance = TIM4;
 80016ca:	4b3d      	ldr	r3, [pc, #244]	; (80017c0 <main+0x27c>)
  htim4.Init.Prescaler = 10800;
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016cc:	60ac      	str	r4, [r5, #8]

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim4.Instance = TIM4;
  htim4.Init.Prescaler = 10800;
 80016ce:	e885 0088 	stmia.w	r5, {r3, r7}
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim4.Init.Period = 4999;
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  HAL_TIM_Base_Init(&htim4);
 80016d2:	4628      	mov	r0, r5
  TIM_MasterConfigTypeDef sMasterConfig;

  htim4.Instance = TIM4;
  htim4.Init.Prescaler = 10800;
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim4.Init.Period = 4999;
 80016d4:	f241 3387 	movw	r3, #4999	; 0x1387
 80016d8:	60eb      	str	r3, [r5, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016da:	612c      	str	r4, [r5, #16]
  HAL_TIM_Base_Init(&htim4);
 80016dc:	f000 fd9e 	bl	800221c <HAL_TIM_Base_Init>

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig);
 80016e0:	4628      	mov	r0, r5
 80016e2:	a909      	add	r1, sp, #36	; 0x24
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim4.Init.Period = 4999;
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  HAL_TIM_Base_Init(&htim4);

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016e4:	9609      	str	r6, [sp, #36]	; 0x24
  HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig);
 80016e6:	f000 fdb9 	bl	800225c <HAL_TIM_ConfigClockSource>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig);
 80016ea:	a906      	add	r1, sp, #24
 80016ec:	4628      	mov	r0, r5
  HAL_TIM_Base_Init(&htim4);

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig);

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016ee:	9406      	str	r4, [sp, #24]
{

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim5.Instance = TIM5;
 80016f0:	4d34      	ldr	r5, [pc, #208]	; (80017c4 <main+0x280>)

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig);

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016f2:	9408      	str	r4, [sp, #32]
  HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig);
 80016f4:	f000 fc22 	bl	8001f3c <HAL_TIMEx_MasterConfigSynchronization>
{

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim5.Instance = TIM5;
 80016f8:	4b33      	ldr	r3, [pc, #204]	; (80017c8 <main+0x284>)
  htim5.Init.Prescaler = 10800;
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016fa:	60ac      	str	r4, [r5, #8]

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim5.Instance = TIM5;
  htim5.Init.Prescaler = 10800;
 80016fc:	e885 0088 	stmia.w	r5, {r3, r7}
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim5.Init.Period = 2499;
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  HAL_TIM_Base_Init(&htim5);
 8001700:	4628      	mov	r0, r5
  TIM_MasterConfigTypeDef sMasterConfig;

  htim5.Instance = TIM5;
  htim5.Init.Prescaler = 10800;
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim5.Init.Period = 2499;
 8001702:	f640 13c3 	movw	r3, #2499	; 0x9c3
 8001706:	60eb      	str	r3, [r5, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001708:	612c      	str	r4, [r5, #16]
  HAL_TIM_Base_Init(&htim5);
 800170a:	f000 fd87 	bl	800221c <HAL_TIM_Base_Init>

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig);
 800170e:	4628      	mov	r0, r5
 8001710:	a909      	add	r1, sp, #36	; 0x24
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim5.Init.Period = 2499;
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  HAL_TIM_Base_Init(&htim5);

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001712:	9609      	str	r6, [sp, #36]	; 0x24
  HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig);
 8001714:	f000 fda2 	bl	800225c <HAL_TIM_ConfigClockSource>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig);
 8001718:	4628      	mov	r0, r5
 800171a:	a906      	add	r1, sp, #24
  HAL_TIM_Base_Init(&htim5);

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig);

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800171c:	9406      	str	r4, [sp, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800171e:	9408      	str	r4, [sp, #32]
  HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig);
 8001720:	f000 fc0c 	bl	8001f3c <HAL_TIMEx_MasterConfigSynchronization>

/* UART5 init function */
void MX_UART5_Init(void)
{

  huart5.Instance = UART5;
 8001724:	4829      	ldr	r0, [pc, #164]	; (80017cc <main+0x288>)
  huart5.Init.BaudRate = 115200;
 8001726:	4b2a      	ldr	r3, [pc, #168]	; (80017d0 <main+0x28c>)
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001728:	6084      	str	r4, [r0, #8]
/* UART5 init function */
void MX_UART5_Init(void)
{

  huart5.Instance = UART5;
  huart5.Init.BaudRate = 115200;
 800172a:	f44f 36e1 	mov.w	r6, #115200	; 0x1c200
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
  huart5.Init.StopBits = UART_STOPBITS_1;
  huart5.Init.Parity = UART_PARITY_NONE;
  huart5.Init.Mode = UART_MODE_TX_RX;
 800172e:	250c      	movs	r5, #12
/* UART5 init function */
void MX_UART5_Init(void)
{

  huart5.Instance = UART5;
  huart5.Init.BaudRate = 115200;
 8001730:	e880 0048 	stmia.w	r0, {r3, r6}
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001734:	60c4      	str	r4, [r0, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001736:	6104      	str	r4, [r0, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001738:	6145      	str	r5, [r0, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800173a:	6184      	str	r4, [r0, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800173c:	61c4      	str	r4, [r0, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800173e:	6204      	str	r4, [r0, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001740:	6244      	str	r4, [r0, #36]	; 0x24
  HAL_UART_Init(&huart5);
 8001742:	f000 fbc9 	bl	8001ed8 <HAL_UART_Init>

/* USART3 init function */
void MX_USART3_UART_Init(void)
{

  huart3.Instance = USART3;
 8001746:	4823      	ldr	r0, [pc, #140]	; (80017d4 <main+0x290>)
 8001748:	4b23      	ldr	r3, [pc, #140]	; (80017d8 <main+0x294>)
  huart3.Init.BaudRate = 115200;
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800174a:	6084      	str	r4, [r0, #8]
/* USART3 init function */
void MX_USART3_UART_Init(void)
{

  huart3.Instance = USART3;
  huart3.Init.BaudRate = 115200;
 800174c:	e880 0048 	stmia.w	r0, {r3, r6}
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001750:	60c4      	str	r4, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001752:	6104      	str	r4, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001754:	6145      	str	r5, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001756:	6184      	str	r4, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001758:	61c4      	str	r4, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800175a:	6204      	str	r4, [r0, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800175c:	6244      	str	r4, [r0, #36]	; 0x24
  HAL_UART_Init(&huart3);
 800175e:	f000 fbbb 	bl	8001ed8 <HAL_UART_Init>
  MX_TIM5_Init();
  MX_UART5_Init();
  MX_USART3_UART_Init();

  /* USER CODE BEGIN 2 */
	while(HAL_TIM_Base_Start_IT(&htim3)!=HAL_OK);
 8001762:	4814      	ldr	r0, [pc, #80]	; (80017b4 <main+0x270>)
 8001764:	f000 fc37 	bl	8001fd6 <HAL_TIM_Base_Start_IT>
 8001768:	2800      	cmp	r0, #0
 800176a:	d1fa      	bne.n	8001762 <main+0x21e>
	while(HAL_TIM_Base_Start_IT(&htim4)!=HAL_OK);
 800176c:	4813      	ldr	r0, [pc, #76]	; (80017bc <main+0x278>)
 800176e:	f000 fc32 	bl	8001fd6 <HAL_TIM_Base_Start_IT>
 8001772:	2800      	cmp	r0, #0
 8001774:	d1fa      	bne.n	800176c <main+0x228>
	while(HAL_TIM_Base_Start_IT(&htim5)!=HAL_OK);
 8001776:	4813      	ldr	r0, [pc, #76]	; (80017c4 <main+0x280>)
 8001778:	f000 fc2d 	bl	8001fd6 <HAL_TIM_Base_Start_IT>
 800177c:	2800      	cmp	r0, #0
 800177e:	d1fa      	bne.n	8001776 <main+0x232>

	while(HAL_UART_Receive_IT(&huart3, Rx_Data3, 1)!=HAL_OK);
 8001780:	4814      	ldr	r0, [pc, #80]	; (80017d4 <main+0x290>)
 8001782:	4916      	ldr	r1, [pc, #88]	; (80017dc <main+0x298>)
 8001784:	2201      	movs	r2, #1
 8001786:	f000 f82d 	bl	80017e4 <HAL_UART_Receive_IT>
 800178a:	2800      	cmp	r0, #0
 800178c:	d1f8      	bne.n	8001780 <main+0x23c>
	while(HAL_UART_Receive_IT(&huart5, Rx_Data5, 1)!=HAL_OK);
 800178e:	480f      	ldr	r0, [pc, #60]	; (80017cc <main+0x288>)
 8001790:	4913      	ldr	r1, [pc, #76]	; (80017e0 <main+0x29c>)
 8001792:	2201      	movs	r2, #1
 8001794:	f000 f826 	bl	80017e4 <HAL_UART_Receive_IT>
 8001798:	2800      	cmp	r0, #0
 800179a:	d1f8      	bne.n	800178e <main+0x24a>
 800179c:	e7fe      	b.n	800179c <main+0x258>
 800179e:	bf00      	nop
 80017a0:	40023800 	.word	0x40023800
 80017a4:	40020800 	.word	0x40020800
 80017a8:	40020000 	.word	0x40020000
 80017ac:	40020400 	.word	0x40020400
 80017b0:	40021800 	.word	0x40021800
 80017b4:	200006a0 	.word	0x200006a0
 80017b8:	40000400 	.word	0x40000400
 80017bc:	200005a0 	.word	0x200005a0
 80017c0:	40000800 	.word	0x40000800
 80017c4:	20000664 	.word	0x20000664
 80017c8:	40000c00 	.word	0x40000c00
 80017cc:	200006e0 	.word	0x200006e0
 80017d0:	40005000 	.word	0x40005000
 80017d4:	200005e8 	.word	0x200005e8
 80017d8:	40004800 	.word	0x40004800
 80017dc:	20000753 	.word	0x20000753
 80017e0:	20000758 	.word	0x20000758

080017e4 <HAL_UART_Receive_IT>:
  * @param Size: amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
 80017e4:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d003      	beq.n	80017f4 <HAL_UART_Receive_IT+0x10>
 80017ec:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 80017f0:	2b12      	cmp	r3, #18
 80017f2:	d146      	bne.n	8001882 <HAL_UART_Receive_IT+0x9e>
  {
    if((pData == NULL ) || (Size == 0)) 
 80017f4:	2900      	cmp	r1, #0
 80017f6:	d042      	beq.n	800187e <HAL_UART_Receive_IT+0x9a>
 80017f8:	2a00      	cmp	r2, #0
 80017fa:	d040      	beq.n	800187e <HAL_UART_Receive_IT+0x9a>
    {
      return HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80017fc:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8001800:	2b01      	cmp	r3, #1
 8001802:	d03e      	beq.n	8001882 <HAL_UART_Receive_IT+0x9e>
 8001804:	2301      	movs	r3, #1
 8001806:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->pRxBuffPtr = pData;
    huart->RxXferSize = Size;
    huart->RxXferCount = Size;

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800180a:	6883      	ldr	r3, [r0, #8]
    }

    /* Process Locked */
    __HAL_LOCK(huart);

    huart->pRxBuffPtr = pData;
 800180c:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferSize = Size;
    huart->RxXferCount = Size;

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800180e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000

    /* Process Locked */
    __HAL_LOCK(huart);

    huart->pRxBuffPtr = pData;
    huart->RxXferSize = Size;
 8001812:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
    huart->RxXferCount = Size;
 8001816:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800181a:	d104      	bne.n	8001826 <HAL_UART_Receive_IT+0x42>
 800181c:	6903      	ldr	r3, [r0, #16]
 800181e:	b92b      	cbnz	r3, 800182c <HAL_UART_Receive_IT+0x48>
 8001820:	f240 13ff 	movw	r3, #511	; 0x1ff
 8001824:	e00d      	b.n	8001842 <HAL_UART_Receive_IT+0x5e>
 8001826:	b92b      	cbnz	r3, 8001834 <HAL_UART_Receive_IT+0x50>
 8001828:	6903      	ldr	r3, [r0, #16]
 800182a:	b90b      	cbnz	r3, 8001830 <HAL_UART_Receive_IT+0x4c>
 800182c:	23ff      	movs	r3, #255	; 0xff
 800182e:	e008      	b.n	8001842 <HAL_UART_Receive_IT+0x5e>
 8001830:	237f      	movs	r3, #127	; 0x7f
 8001832:	e006      	b.n	8001842 <HAL_UART_Receive_IT+0x5e>
 8001834:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001838:	d105      	bne.n	8001846 <HAL_UART_Receive_IT+0x62>
 800183a:	6903      	ldr	r3, [r0, #16]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d0f7      	beq.n	8001830 <HAL_UART_Receive_IT+0x4c>
 8001840:	233f      	movs	r3, #63	; 0x3f
 8001842:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001846:	2300      	movs	r3, #0
 8001848:	66c3      	str	r3, [r0, #108]	; 0x6c
    /* Check if a transmit process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX) 
 800184a:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 800184e:	2b12      	cmp	r3, #18
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 8001850:	bf0c      	ite	eq
 8001852:	2332      	moveq	r3, #50	; 0x32
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_RX;
 8001854:	2322      	movne	r3, #34	; 0x22
 8001856:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
    }

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800185a:	6803      	ldr	r3, [r0, #0]
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001862:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001864:	689a      	ldr	r2, [r3, #8]
 8001866:	f042 0201 	orr.w	r2, r2, #1
 800186a:	609a      	str	r2, [r3, #8]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800186c:	6819      	ldr	r1, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800186e:	2200      	movs	r2, #0

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001870:	f041 0120 	orr.w	r1, r1, #32

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001874:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001878:	6019      	str	r1, [r3, #0]

    return HAL_OK;
 800187a:	4610      	mov	r0, r2
 800187c:	4770      	bx	lr
{
  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_TX))
  {
    if((pData == NULL ) || (Size == 0)) 
    {
      return HAL_ERROR;
 800187e:	2001      	movs	r0, #1
 8001880:	4770      	bx	lr

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY; 
 8001882:	2002      	movs	r0, #2
  }
}
 8001884:	4770      	bx	lr

08001886 <UART_WaitOnFlagUntilTimeout>:
  * @param  Status: The new Flag status (SET or RESET).
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Timeout)
{
 8001886:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800188a:	4604      	mov	r4, r0
 800188c:	460e      	mov	r6, r1
 800188e:	4690      	mov	r8, r2
 8001890:	461d      	mov	r5, r3
  uint32_t tickstart = HAL_GetTick();
 8001892:	f001 fe3b 	bl	800350c <HAL_GetTick>
 8001896:	4607      	mov	r7, r0
  
  /* Wait until flag is set */
  if(Status == RESET)
 8001898:	f1b8 0f00 	cmp.w	r8, #0
 800189c:	d136      	bne.n	800190c <UART_WaitOnFlagUntilTimeout+0x86>
  {    
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 800189e:	6822      	ldr	r2, [r4, #0]
 80018a0:	69d3      	ldr	r3, [r2, #28]
 80018a2:	4033      	ands	r3, r6
 80018a4:	42b3      	cmp	r3, r6
 80018a6:	d00e      	beq.n	80018c6 <UART_WaitOnFlagUntilTimeout+0x40>
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80018a8:	1c69      	adds	r1, r5, #1
 80018aa:	d0f9      	beq.n	80018a0 <UART_WaitOnFlagUntilTimeout+0x1a>
      {
        if((Timeout == 0)||((HAL_GetTick()-tickstart) >=  Timeout))
 80018ac:	b17d      	cbz	r5, 80018ce <UART_WaitOnFlagUntilTimeout+0x48>
 80018ae:	f001 fe2d 	bl	800350c <HAL_GetTick>
 80018b2:	1bc0      	subs	r0, r0, r7
 80018b4:	42a8      	cmp	r0, r5
 80018b6:	d3f2      	bcc.n	800189e <UART_WaitOnFlagUntilTimeout+0x18>
 80018b8:	e009      	b.n	80018ce <UART_WaitOnFlagUntilTimeout+0x48>
  else
  {
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80018ba:	1c6b      	adds	r3, r5, #1
 80018bc:	d106      	bne.n	80018cc <UART_WaitOnFlagUntilTimeout+0x46>
      }
    }
  }
  else
  {
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
 80018be:	69d3      	ldr	r3, [r2, #28]
 80018c0:	4033      	ands	r3, r6
 80018c2:	42b3      	cmp	r3, r6
 80018c4:	d0f9      	beq.n	80018ba <UART_WaitOnFlagUntilTimeout+0x34>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;      
 80018c6:	2000      	movs	r0, #0
 80018c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
      {
        if((Timeout == 0)||((HAL_GetTick()-tickstart) >=  Timeout))
 80018cc:	b9cd      	cbnz	r5, 8001902 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80018ce:	6823      	ldr	r3, [r4, #0]
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80018d6:	601a      	str	r2, [r3, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	f022 0220 	bic.w	r2, r2, #32
 80018de:	601a      	str	r2, [r3, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80018e6:	601a      	str	r2, [r3, #0]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80018e8:	689a      	ldr	r2, [r3, #8]
 80018ea:	f022 0201 	bic.w	r2, r2, #1
 80018ee:	609a      	str	r2, [r3, #8]
          
          huart->State= HAL_UART_STATE_READY;
 80018f0:	2301      	movs	r3, #1
 80018f2:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80018f6:	2300      	movs	r3, #0
 80018f8:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
          
          return HAL_TIMEOUT;
 80018fc:	2003      	movs	r0, #3
 80018fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
      {
        if((Timeout == 0)||((HAL_GetTick()-tickstart) >=  Timeout))
 8001902:	f001 fe03 	bl	800350c <HAL_GetTick>
 8001906:	1bc0      	subs	r0, r0, r7
 8001908:	42a8      	cmp	r0, r5
 800190a:	d2e0      	bcs.n	80018ce <UART_WaitOnFlagUntilTimeout+0x48>
      }
    }
  }
  else
  {
    while(__HAL_UART_GET_FLAG(huart, Flag) != RESET)
 800190c:	6822      	ldr	r2, [r4, #0]
 800190e:	e7d6      	b.n	80018be <UART_WaitOnFlagUntilTimeout+0x38>

08001910 <HAL_UART_Transmit>:
  * @param Size: amount of data to be sent
  * @param Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001910:	b570      	push	{r4, r5, r6, lr}
 8001912:	461e      	mov	r6, r3
   uint16_t* tmp;

  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 8001914:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8001918:	2b01      	cmp	r3, #1
  * @param Size: amount of data to be sent
  * @param Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800191a:	4604      	mov	r4, r0
 800191c:	460d      	mov	r5, r1
   uint16_t* tmp;

  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
 800191e:	d003      	beq.n	8001928 <HAL_UART_Transmit+0x18>
 8001920:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8001924:	2b22      	cmp	r3, #34	; 0x22
 8001926:	d14d      	bne.n	80019c4 <HAL_UART_Transmit+0xb4>
  {
    if((pData == NULL ) || (Size == 0))
 8001928:	2d00      	cmp	r5, #0
 800192a:	d049      	beq.n	80019c0 <HAL_UART_Transmit+0xb0>
 800192c:	2a00      	cmp	r2, #0
 800192e:	d047      	beq.n	80019c0 <HAL_UART_Transmit+0xb0>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001930:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
 8001934:	2b01      	cmp	r3, #1
 8001936:	d045      	beq.n	80019c4 <HAL_UART_Transmit+0xb4>
 8001938:	2301      	movs	r3, #1
 800193a:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800193e:	2300      	movs	r3, #0
 8001940:	66e3      	str	r3, [r4, #108]	; 0x6c
    /* Check if a non-blocking receive process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_RX) 
 8001942:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
    else
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
    }

    huart->TxXferSize = Size;
 8001946:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
    /* Process Locked */
    __HAL_LOCK(huart);

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    /* Check if a non-blocking receive process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_RX) 
 800194a:	2b22      	cmp	r3, #34	; 0x22
    {
      huart->State = HAL_UART_STATE_BUSY_TX_RX;
 800194c:	bf0c      	ite	eq
 800194e:	2332      	moveq	r3, #50	; 0x32
    }
    else
    {
      huart->State = HAL_UART_STATE_BUSY_TX;
 8001950:	2312      	movne	r3, #18
 8001952:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    }

    huart->TxXferSize = Size;
    huart->TxXferCount = Size;
 8001956:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0)
 800195a:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 800195e:	b1e2      	cbz	r2, 800199a <HAL_UART_Transmit+0x8a>
    {
      huart->TxXferCount--;
 8001960:	3a01      	subs	r2, #1
 8001962:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)  
 8001966:	4620      	mov	r0, r4
 8001968:	2180      	movs	r1, #128	; 0x80
 800196a:	2200      	movs	r2, #0
 800196c:	4633      	mov	r3, r6
 800196e:	f7ff ff8a 	bl	8001886 <UART_WaitOnFlagUntilTimeout>
 8001972:	b108      	cbz	r0, 8001978 <HAL_UART_Transmit+0x68>
        { 
          return HAL_TIMEOUT;
 8001974:	2003      	movs	r0, #3
 8001976:	bd70      	pop	{r4, r5, r6, pc}
        }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001978:	68a3      	ldr	r3, [r4, #8]
 800197a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800197e:	6823      	ldr	r3, [r4, #0]
 8001980:	d107      	bne.n	8001992 <HAL_UART_Transmit+0x82>
 8001982:	6922      	ldr	r2, [r4, #16]
 8001984:	b92a      	cbnz	r2, 8001992 <HAL_UART_Transmit+0x82>
      {
        tmp = (uint16_t*) pData;
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 8001986:	f835 2b02 	ldrh.w	r2, [r5], #2
 800198a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800198e:	629a      	str	r2, [r3, #40]	; 0x28
        pData += 2;
 8001990:	e7e3      	b.n	800195a <HAL_UART_Transmit+0x4a>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFF);
 8001992:	782a      	ldrb	r2, [r5, #0]
 8001994:	629a      	str	r2, [r3, #40]	; 0x28
 8001996:	3501      	adds	r5, #1
 8001998:	e7df      	b.n	800195a <HAL_UART_Transmit+0x4a>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, Timeout) != HAL_OK)  
 800199a:	4620      	mov	r0, r4
 800199c:	2140      	movs	r1, #64	; 0x40
 800199e:	4633      	mov	r3, r6
 80019a0:	f7ff ff71 	bl	8001886 <UART_WaitOnFlagUntilTimeout>
 80019a4:	2800      	cmp	r0, #0
 80019a6:	d1e5      	bne.n	8001974 <HAL_UART_Transmit+0x64>
    { 
      return HAL_TIMEOUT;
    }
    /* Check if a non-blocking receive Process is ongoing or not */
    if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 80019a8:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 80019ac:	2b32      	cmp	r3, #50	; 0x32
    {
      huart->State = HAL_UART_STATE_BUSY_RX;
 80019ae:	bf0c      	ite	eq
 80019b0:	2322      	moveq	r3, #34	; 0x22
    }
    else
    {
      huart->State = HAL_UART_STATE_READY;
 80019b2:	2301      	movne	r3, #1
 80019b4:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80019b8:	2300      	movs	r3, #0
 80019ba:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68

    return HAL_OK;
 80019be:	bd70      	pop	{r4, r5, r6, pc}

  if((huart->State == HAL_UART_STATE_READY) || (huart->State == HAL_UART_STATE_BUSY_RX))
  {
    if((pData == NULL ) || (Size == 0))
    {
      return  HAL_ERROR;
 80019c0:	2001      	movs	r0, #1
 80019c2:	bd70      	pop	{r4, r5, r6, pc}

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80019c4:	2002      	movs	r0, #2
  }
}
 80019c6:	bd70      	pop	{r4, r5, r6, pc}

080019c8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param huart: uart handle
  * @retval None
  */
 __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80019c8:	4770      	bx	lr

080019ca <HAL_UART_ErrorCallback>:
  * @brief UART error callbacks
  * @param huart: uart handle
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80019ca:	4770      	bx	lr

080019cc <HAL_UART_IRQHandler>:
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
  /* UART parity error interrupt occurred -------------------------------------*/
  if((__HAL_UART_GET_IT(huart, UART_IT_PE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE) != RESET))
 80019cc:	6803      	ldr	r3, [r0, #0]
 80019ce:	69da      	ldr	r2, [r3, #28]
 80019d0:	07d1      	lsls	r1, r2, #31
  * @brief This function handles UART interrupt request.
  * @param huart: uart handle
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80019d2:	b510      	push	{r4, lr}
 80019d4:	4604      	mov	r4, r0
  /* UART parity error interrupt occurred -------------------------------------*/
  if((__HAL_UART_GET_IT(huart, UART_IT_PE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE) != RESET))
 80019d6:	d509      	bpl.n	80019ec <HAL_UART_IRQHandler+0x20>
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	05d2      	lsls	r2, r2, #23
 80019dc:	d506      	bpl.n	80019ec <HAL_UART_IRQHandler+0x20>
  { 
		__HAL_UART_CLEAR_PEFLAG(huart);
 80019de:	2201      	movs	r2, #1
 80019e0:	621a      	str	r2, [r3, #32]

    huart->ErrorCode |= HAL_UART_ERROR_PE;
 80019e2:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
 80019e4:	4311      	orrs	r1, r2
 80019e6:	66c1      	str	r1, [r0, #108]	; 0x6c
    /* Set the UART state ready to be able to start again the process */
    huart->State = HAL_UART_STATE_READY;
 80019e8:	f880 2069 	strb.w	r2, [r0, #105]	; 0x69
  }
  
  /* UART frame error interrupt occurred --------------------------------------*/
  if((__HAL_UART_GET_IT(huart, UART_IT_FE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 80019ec:	69da      	ldr	r2, [r3, #28]
 80019ee:	0790      	lsls	r0, r2, #30
 80019f0:	d50b      	bpl.n	8001a0a <HAL_UART_IRQHandler+0x3e>
 80019f2:	689a      	ldr	r2, [r3, #8]
 80019f4:	07d1      	lsls	r1, r2, #31
 80019f6:	d508      	bpl.n	8001a0a <HAL_UART_IRQHandler+0x3e>
  { 
    __HAL_UART_CLEAR_FEFLAG(huart);
 80019f8:	2202      	movs	r2, #2
 80019fa:	621a      	str	r2, [r3, #32]

    huart->ErrorCode |= HAL_UART_ERROR_FE;
 80019fc:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80019fe:	f042 0204 	orr.w	r2, r2, #4
 8001a02:	66e2      	str	r2, [r4, #108]	; 0x6c
    /* Set the UART state ready to be able to start again the process */
    huart->State = HAL_UART_STATE_READY;
 8001a04:	2201      	movs	r2, #1
 8001a06:	f884 2069 	strb.w	r2, [r4, #105]	; 0x69
  }
  
  /* UART noise error interrupt occurred --------------------------------------*/
  if((__HAL_UART_GET_IT(huart, UART_IT_NE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 8001a0a:	69da      	ldr	r2, [r3, #28]
 8001a0c:	0752      	lsls	r2, r2, #29
 8001a0e:	d50b      	bpl.n	8001a28 <HAL_UART_IRQHandler+0x5c>
 8001a10:	689a      	ldr	r2, [r3, #8]
 8001a12:	07d0      	lsls	r0, r2, #31
 8001a14:	d508      	bpl.n	8001a28 <HAL_UART_IRQHandler+0x5c>
  { 
    __HAL_UART_CLEAR_NEFLAG(huart);
 8001a16:	2204      	movs	r2, #4
 8001a18:	621a      	str	r2, [r3, #32]

    huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001a1a:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8001a1c:	f042 0202 	orr.w	r2, r2, #2
 8001a20:	66e2      	str	r2, [r4, #108]	; 0x6c
    /* Set the UART state ready to be able to start again the process */
    huart->State = HAL_UART_STATE_READY;
 8001a22:	2201      	movs	r2, #1
 8001a24:	f884 2069 	strb.w	r2, [r4, #105]	; 0x69
  }
  
  /* UART Over-Run interrupt occurred -----------------------------------------*/
  if((__HAL_UART_GET_IT(huart, UART_IT_ORE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR) != RESET))
 8001a28:	69da      	ldr	r2, [r3, #28]
 8001a2a:	0711      	lsls	r1, r2, #28
 8001a2c:	d50a      	bpl.n	8001a44 <HAL_UART_IRQHandler+0x78>
 8001a2e:	689a      	ldr	r2, [r3, #8]
 8001a30:	07d2      	lsls	r2, r2, #31
 8001a32:	d507      	bpl.n	8001a44 <HAL_UART_IRQHandler+0x78>
  { 
    __HAL_UART_CLEAR_OREFLAG(huart);
 8001a34:	2208      	movs	r2, #8
 8001a36:	621a      	str	r2, [r3, #32]

    huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001a38:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	66e3      	str	r3, [r4, #108]	; 0x6c
    /* Set the UART state ready to be able to start again the process */
    huart->State = HAL_UART_STATE_READY;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  }

   /* Call UART Error Call back function if need be --------------------------*/
  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001a44:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8001a46:	b113      	cbz	r3, 8001a4e <HAL_UART_IRQHandler+0x82>
  {
    HAL_UART_ErrorCallback(huart);
 8001a48:	4620      	mov	r0, r4
 8001a4a:	f7ff ffbe 	bl	80019ca <HAL_UART_ErrorCallback>
  }

  /* UART in mode Receiver ---------------------------------------------------*/
  if((__HAL_UART_GET_IT(huart, UART_IT_RXNE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_RXNE) != RESET))
 8001a4e:	6823      	ldr	r3, [r4, #0]
 8001a50:	69da      	ldr	r2, [r3, #28]
 8001a52:	0690      	lsls	r0, r2, #26
 8001a54:	d543      	bpl.n	8001ade <HAL_UART_IRQHandler+0x112>
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	0691      	lsls	r1, r2, #26
 8001a5a:	d540      	bpl.n	8001ade <HAL_UART_IRQHandler+0x112>
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;
  uint16_t uhMask = huart->Mask;

  if((huart->State == HAL_UART_STATE_BUSY_RX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8001a5c:	f894 2069 	ldrb.w	r2, [r4, #105]	; 0x69
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;
  uint16_t uhMask = huart->Mask;
 8001a60:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c

  if((huart->State == HAL_UART_STATE_BUSY_RX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8001a64:	2a22      	cmp	r2, #34	; 0x22
 8001a66:	d003      	beq.n	8001a70 <HAL_UART_IRQHandler+0xa4>
 8001a68:	f894 2069 	ldrb.w	r2, [r4, #105]	; 0x69
 8001a6c:	2a32      	cmp	r2, #50	; 0x32
 8001a6e:	d131      	bne.n	8001ad4 <HAL_UART_IRQHandler+0x108>
  {
    
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001a70:	68a2      	ldr	r2, [r4, #8]
 8001a72:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001a76:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001a78:	d107      	bne.n	8001a8a <HAL_UART_IRQHandler+0xbe>
 8001a7a:	6920      	ldr	r0, [r4, #16]
 8001a7c:	b928      	cbnz	r0, 8001a8a <HAL_UART_IRQHandler+0xbe>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr ;
      *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8001a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a80:	4019      	ands	r1, r3
 8001a82:	f822 1b02 	strh.w	r1, [r2], #2
      huart->pRxBuffPtr +=2;
 8001a86:	6562      	str	r2, [r4, #84]	; 0x54
 8001a88:	e004      	b.n	8001a94 <HAL_UART_IRQHandler+0xc8>
    }
    else
    {
      *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask); 
 8001a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a8c:	1c50      	adds	r0, r2, #1
 8001a8e:	4019      	ands	r1, r3
 8001a90:	6560      	str	r0, [r4, #84]	; 0x54
 8001a92:	7011      	strb	r1, [r2, #0]
    }

    if(--huart->RxXferCount == 0)
 8001a94:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8001a98:	3b01      	subs	r3, #1
 8001a9a:	b29b      	uxth	r3, r3
 8001a9c:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8001aa0:	b9c3      	cbnz	r3, 8001ad4 <HAL_UART_IRQHandler+0x108>
    {
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001aa2:	6823      	ldr	r3, [r4, #0]
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	f022 0220 	bic.w	r2, r2, #32
 8001aaa:	601a      	str	r2, [r3, #0]

      /* Check if a transmit Process is ongoing or not */
      if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 8001aac:	f894 2069 	ldrb.w	r2, [r4, #105]	; 0x69
 8001ab0:	2a32      	cmp	r2, #50	; 0x32
 8001ab2:	d101      	bne.n	8001ab8 <HAL_UART_IRQHandler+0xec>
      {
        huart->State = HAL_UART_STATE_BUSY_TX;
 8001ab4:	2312      	movs	r3, #18
 8001ab6:	e008      	b.n	8001aca <HAL_UART_IRQHandler+0xfe>
      }
      else
      {
        /* Disable the UART Parity Error Interrupt */
        __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001abe:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001ac0:	689a      	ldr	r2, [r3, #8]
 8001ac2:	f022 0201 	bic.w	r2, r2, #1
 8001ac6:	609a      	str	r2, [r3, #8]

        huart->State = HAL_UART_STATE_READY;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
      }
      
      HAL_UART_RxCpltCallback(huart);
 8001ace:	4620      	mov	r0, r4
 8001ad0:	f7ff fc72 	bl	80013b8 <HAL_UART_RxCpltCallback>
  /* UART in mode Receiver ---------------------------------------------------*/
  if((__HAL_UART_GET_IT(huart, UART_IT_RXNE) != RESET) && (__HAL_UART_GET_IT_SOURCE(huart, UART_IT_RXNE) != RESET))
  { 
    UART_Receive_IT(huart);
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8001ad4:	6823      	ldr	r3, [r4, #0]
 8001ad6:	699a      	ldr	r2, [r3, #24]
 8001ad8:	f042 0208 	orr.w	r2, r2, #8
 8001adc:	619a      	str	r2, [r3, #24]
  }
  

  /* UART in mode Transmitter ------------------------------------------------*/
 if((__HAL_UART_GET_IT(huart, UART_IT_TXE) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TXE) != RESET))
 8001ade:	6823      	ldr	r3, [r4, #0]
 8001ae0:	69da      	ldr	r2, [r3, #28]
 8001ae2:	0612      	lsls	r2, r2, #24
 8001ae4:	d53a      	bpl.n	8001b5c <HAL_UART_IRQHandler+0x190>
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	0610      	lsls	r0, r2, #24
 8001aea:	d537      	bpl.n	8001b5c <HAL_UART_IRQHandler+0x190>
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  if ((huart->State == HAL_UART_STATE_BUSY_TX) || (huart->State == HAL_UART_STATE_BUSY_TX_RX))
 8001aec:	f894 2069 	ldrb.w	r2, [r4, #105]	; 0x69
 8001af0:	2a12      	cmp	r2, #18
 8001af2:	d003      	beq.n	8001afc <HAL_UART_IRQHandler+0x130>
 8001af4:	f894 2069 	ldrb.w	r2, [r4, #105]	; 0x69
 8001af8:	2a32      	cmp	r2, #50	; 0x32
 8001afa:	d12f      	bne.n	8001b5c <HAL_UART_IRQHandler+0x190>
  {

    if(huart->TxXferCount == 0)
 8001afc:	f8b4 1052 	ldrh.w	r1, [r4, #82]	; 0x52
 8001b00:	b9b9      	cbnz	r1, 8001b32 <HAL_UART_IRQHandler+0x166>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b08:	601a      	str	r2, [r3, #0]

      /* Check if a receive Process is ongoing or not */
      if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 8001b0a:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 8001b0e:	2b32      	cmp	r3, #50	; 0x32
      {
        huart->State = HAL_UART_STATE_BUSY_RX;
 8001b10:	bf0c      	ite	eq
 8001b12:	2322      	moveq	r3, #34	; 0x22
      }
      else
      {      
        huart->State = HAL_UART_STATE_READY;
 8001b14:	2301      	movne	r3, #1
 8001b16:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
      }
      
      /* Wait on TC flag to be able to start a second transfer */
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001b1a:	4620      	mov	r0, r4
 8001b1c:	2140      	movs	r1, #64	; 0x40
 8001b1e:	2200      	movs	r2, #0
 8001b20:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001b24:	f7ff feaf 	bl	8001886 <UART_WaitOnFlagUntilTimeout>
 8001b28:	b9c0      	cbnz	r0, 8001b5c <HAL_UART_IRQHandler+0x190>
      { 
        return HAL_TIMEOUT;
      }

      HAL_UART_TxCpltCallback(huart);
 8001b2a:	4620      	mov	r0, r4
 8001b2c:	f7ff ff4c 	bl	80019c8 <HAL_UART_TxCpltCallback>
 8001b30:	e014      	b.n	8001b5c <HAL_UART_IRQHandler+0x190>

      return HAL_OK;
    }
    else
    {
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b32:	68a2      	ldr	r2, [r4, #8]
 8001b34:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001b38:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8001b3a:	d108      	bne.n	8001b4e <HAL_UART_IRQHandler+0x182>
 8001b3c:	6920      	ldr	r0, [r4, #16]
 8001b3e:	b930      	cbnz	r0, 8001b4e <HAL_UART_IRQHandler+0x182>
      {
        tmp = (uint16_t*) huart->pTxBuffPtr;
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FF);
 8001b40:	f832 0b02 	ldrh.w	r0, [r2], #2
 8001b44:	f3c0 0008 	ubfx	r0, r0, #0, #9
 8001b48:	6298      	str	r0, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2;
 8001b4a:	64e2      	str	r2, [r4, #76]	; 0x4c
 8001b4c:	e003      	b.n	8001b56 <HAL_UART_IRQHandler+0x18a>
      } 
      else
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFF);
 8001b4e:	1c50      	adds	r0, r2, #1
 8001b50:	64e0      	str	r0, [r4, #76]	; 0x4c
 8001b52:	7812      	ldrb	r2, [r2, #0]
 8001b54:	629a      	str	r2, [r3, #40]	; 0x28
      }

      huart->TxXferCount--;
 8001b56:	3901      	subs	r1, #1
 8001b58:	f8a4 1052 	strh.w	r1, [r4, #82]	; 0x52
  {
    UART_Transmit_IT(huart);
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
 if((__HAL_UART_GET_IT(huart, UART_IT_TC) != RESET) &&(__HAL_UART_GET_IT_SOURCE(huart, UART_IT_TC) != RESET))
 8001b5c:	6823      	ldr	r3, [r4, #0]
 8001b5e:	69da      	ldr	r2, [r3, #28]
 8001b60:	0651      	lsls	r1, r2, #25
 8001b62:	d511      	bpl.n	8001b88 <HAL_UART_IRQHandler+0x1bc>
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	0652      	lsls	r2, r2, #25
 8001b68:	d50e      	bpl.n	8001b88 <HAL_UART_IRQHandler+0x1bc>
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b70:	601a      	str	r2, [r3, #0]

  /* Check if a receive process is ongoing or not */
  if(huart->State == HAL_UART_STATE_BUSY_TX_RX)
 8001b72:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 8001b76:	2b32      	cmp	r3, #50	; 0x32
  {
    huart->State = HAL_UART_STATE_BUSY_RX;
 8001b78:	bf0c      	ite	eq
 8001b7a:	2322      	moveq	r3, #34	; 0x22
  }
  else
  {
    huart->State = HAL_UART_STATE_READY;
 8001b7c:	2301      	movne	r3, #1
 8001b7e:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  }

  HAL_UART_TxCpltCallback(huart);
 8001b82:	4620      	mov	r0, r4
 8001b84:	f7ff ff20 	bl	80019c8 <HAL_UART_TxCpltCallback>
 8001b88:	bd10      	pop	{r4, pc}
	...

08001b8c <UART_SetConfig>:
  * @brief Configure the UART peripheral 
  * @param huart: uart handle
  * @retval None
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001b8c:	b538      	push	{r3, r4, r5, lr}
 8001b8e:	4604      	mov	r4, r0
   *  set the M bits according to huart->Init.WordLength value 
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001b90:	6805      	ldr	r5, [r0, #0]
   *  the UART Word Length, Parity, Mode and oversampling: 
   *  set the M bits according to huart->Init.WordLength value 
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001b92:	68a2      	ldr	r2, [r4, #8]
 8001b94:	6921      	ldr	r1, [r4, #16]
 8001b96:	69c3      	ldr	r3, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001b98:	6828      	ldr	r0, [r5, #0]
   *  the UART Word Length, Parity, Mode and oversampling: 
   *  set the M bits according to huart->Init.WordLength value 
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001b9a:	4311      	orrs	r1, r2
 8001b9c:	6962      	ldr	r2, [r4, #20]
 8001b9e:	430a      	orrs	r2, r1
 8001ba0:	ea42 0103 	orr.w	r1, r2, r3
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001ba4:	4a81      	ldr	r2, [pc, #516]	; (8001dac <UART_SetConfig+0x220>)
 8001ba6:	4002      	ands	r2, r0
 8001ba8:	430a      	orrs	r2, r1
 8001baa:	602a      	str	r2, [r5, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001bac:	6869      	ldr	r1, [r5, #4]
 8001bae:	68e2      	ldr	r2, [r4, #12]
 8001bb0:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8001bb4:	430a      	orrs	r2, r1
 8001bb6:	606a      	str	r2, [r5, #4]
   * - UART HardWare Flow Control: set CTSE and RTSE bits according 
   *   to huart->Init.HwFlowCtl value 
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001bb8:	68a8      	ldr	r0, [r5, #8]
  /* Configure 
   * - UART HardWare Flow Control: set CTSE and RTSE bits according 
   *   to huart->Init.HwFlowCtl value 
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001bba:	6a21      	ldr	r1, [r4, #32]
 8001bbc:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001bbe:	f420 6030 	bic.w	r0, r0, #2816	; 0xb00
  /* Configure 
   * - UART HardWare Flow Control: set CTSE and RTSE bits according 
   *   to huart->Init.HwFlowCtl value 
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001bc2:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001bc4:	4302      	orrs	r2, r0
 8001bc6:	60aa      	str	r2, [r5, #8]
  
  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001bc8:	4a79      	ldr	r2, [pc, #484]	; (8001db0 <UART_SetConfig+0x224>)
 8001bca:	4295      	cmp	r5, r2
 8001bcc:	d107      	bne.n	8001bde <UART_SetConfig+0x52>
 8001bce:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8001bd2:	4978      	ldr	r1, [pc, #480]	; (8001db4 <UART_SetConfig+0x228>)
 8001bd4:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8001bd8:	f002 0203 	and.w	r2, r2, #3
 8001bdc:	e009      	b.n	8001bf2 <UART_SetConfig+0x66>
 8001bde:	4a76      	ldr	r2, [pc, #472]	; (8001db8 <UART_SetConfig+0x22c>)
 8001be0:	4295      	cmp	r5, r2
 8001be2:	d10c      	bne.n	8001bfe <UART_SetConfig+0x72>
 8001be4:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400
 8001be8:	4974      	ldr	r1, [pc, #464]	; (8001dbc <UART_SetConfig+0x230>)
 8001bea:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8001bee:	f002 020c 	and.w	r2, r2, #12

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001bf2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001bf6:	5c8a      	ldrb	r2, [r1, r2]
 8001bf8:	f040 80b1 	bne.w	8001d5e <UART_SetConfig+0x1d2>
 8001bfc:	e072      	b.n	8001ce4 <UART_SetConfig+0x158>
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
  
  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001bfe:	4a70      	ldr	r2, [pc, #448]	; (8001dc0 <UART_SetConfig+0x234>)
 8001c00:	4295      	cmp	r5, r2
 8001c02:	d10d      	bne.n	8001c20 <UART_SetConfig+0x94>
 8001c04:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
 8001c08:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8001c0c:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8001c10:	2a10      	cmp	r2, #16
 8001c12:	f000 8082 	beq.w	8001d1a <UART_SetConfig+0x18e>
 8001c16:	d95d      	bls.n	8001cd4 <UART_SetConfig+0x148>
 8001c18:	2a20      	cmp	r2, #32
 8001c1a:	d078      	beq.n	8001d0e <UART_SetConfig+0x182>
 8001c1c:	2a30      	cmp	r2, #48	; 0x30
 8001c1e:	e00e      	b.n	8001c3e <UART_SetConfig+0xb2>
 8001c20:	4a68      	ldr	r2, [pc, #416]	; (8001dc4 <UART_SetConfig+0x238>)
 8001c22:	4295      	cmp	r5, r2
 8001c24:	d10d      	bne.n	8001c42 <UART_SetConfig+0xb6>
 8001c26:	f502 32f6 	add.w	r2, r2, #125952	; 0x1ec00
 8001c2a:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8001c2e:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 8001c32:	2a40      	cmp	r2, #64	; 0x40
 8001c34:	d071      	beq.n	8001d1a <UART_SetConfig+0x18e>
 8001c36:	d94d      	bls.n	8001cd4 <UART_SetConfig+0x148>
 8001c38:	2a80      	cmp	r2, #128	; 0x80
 8001c3a:	d068      	beq.n	8001d0e <UART_SetConfig+0x182>
 8001c3c:	2ac0      	cmp	r2, #192	; 0xc0
 8001c3e:	d076      	beq.n	8001d2e <UART_SetConfig+0x1a2>
 8001c40:	e080      	b.n	8001d44 <UART_SetConfig+0x1b8>
 8001c42:	4a61      	ldr	r2, [pc, #388]	; (8001dc8 <UART_SetConfig+0x23c>)
 8001c44:	4295      	cmp	r5, r2
 8001c46:	d10f      	bne.n	8001c68 <UART_SetConfig+0xdc>
 8001c48:	f502 32f4 	add.w	r2, r2, #124928	; 0x1e800
 8001c4c:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8001c50:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001c54:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8001c58:	d05f      	beq.n	8001d1a <UART_SetConfig+0x18e>
 8001c5a:	d93b      	bls.n	8001cd4 <UART_SetConfig+0x148>
 8001c5c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8001c60:	d055      	beq.n	8001d0e <UART_SetConfig+0x182>
 8001c62:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8001c66:	e7ea      	b.n	8001c3e <UART_SetConfig+0xb2>
 8001c68:	4a58      	ldr	r2, [pc, #352]	; (8001dcc <UART_SetConfig+0x240>)
 8001c6a:	4295      	cmp	r5, r2
 8001c6c:	d112      	bne.n	8001c94 <UART_SetConfig+0x108>
 8001c6e:	f502 3292 	add.w	r2, r2, #74752	; 0x12400
 8001c72:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8001c76:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8001c7a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8001c7e:	d04c      	beq.n	8001d1a <UART_SetConfig+0x18e>
 8001c80:	d802      	bhi.n	8001c88 <UART_SetConfig+0xfc>
 8001c82:	2a00      	cmp	r2, #0
 8001c84:	d03d      	beq.n	8001d02 <UART_SetConfig+0x176>
 8001c86:	e05d      	b.n	8001d44 <UART_SetConfig+0x1b8>
 8001c88:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8001c8c:	d03f      	beq.n	8001d0e <UART_SetConfig+0x182>
 8001c8e:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 8001c92:	e7d4      	b.n	8001c3e <UART_SetConfig+0xb2>
 8001c94:	4a4e      	ldr	r2, [pc, #312]	; (8001dd0 <UART_SetConfig+0x244>)
 8001c96:	4295      	cmp	r5, r2
 8001c98:	d10f      	bne.n	8001cba <UART_SetConfig+0x12e>
 8001c9a:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 8001c9e:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8001ca2:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 8001ca6:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001caa:	d036      	beq.n	8001d1a <UART_SetConfig+0x18e>
 8001cac:	d912      	bls.n	8001cd4 <UART_SetConfig+0x148>
 8001cae:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001cb2:	d02c      	beq.n	8001d0e <UART_SetConfig+0x182>
 8001cb4:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 8001cb8:	e7c1      	b.n	8001c3e <UART_SetConfig+0xb2>
 8001cba:	4a46      	ldr	r2, [pc, #280]	; (8001dd4 <UART_SetConfig+0x248>)
 8001cbc:	4295      	cmp	r5, r2
 8001cbe:	d141      	bne.n	8001d44 <UART_SetConfig+0x1b8>
 8001cc0:	f502 32de 	add.w	r2, r2, #113664	; 0x1bc00
 8001cc4:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8001cc8:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8001ccc:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8001cd0:	d023      	beq.n	8001d1a <UART_SetConfig+0x18e>
 8001cd2:	d801      	bhi.n	8001cd8 <UART_SetConfig+0x14c>
 8001cd4:	b17a      	cbz	r2, 8001cf6 <UART_SetConfig+0x16a>
 8001cd6:	e035      	b.n	8001d44 <UART_SetConfig+0x1b8>
 8001cd8:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001cdc:	d017      	beq.n	8001d0e <UART_SetConfig+0x182>
 8001cde:	f5b2 4f40 	cmp.w	r2, #49152	; 0xc000
 8001ce2:	e7ac      	b.n	8001c3e <UART_SetConfig+0xb2>

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
  { 
    switch (clocksource)
 8001ce4:	2a08      	cmp	r2, #8
 8001ce6:	d830      	bhi.n	8001d4a <UART_SetConfig+0x1be>
 8001ce8:	e8df f002 	tbb	[pc, r2]
 8001cec:	2f140e08 	.word	0x2f140e08
 8001cf0:	2f2f2f1a 	.word	0x2f2f2f1a
 8001cf4:	24          	.byte	0x24
 8001cf5:	00          	.byte	0x00
  
  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001cf6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001cfa:	d139      	bne.n	8001d70 <UART_SetConfig+0x1e4>
  { 
    switch (clocksource)
    {
    case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001cfc:	f001 fa00 	bl	8003100 <HAL_RCC_GetPCLK1Freq>
 8001d00:	e010      	b.n	8001d24 <UART_SetConfig+0x198>
  
  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001d02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d06:	d136      	bne.n	8001d76 <UART_SetConfig+0x1ea>
    {
    case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
      break;
    case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001d08:	f001 fa10 	bl	800312c <HAL_RCC_GetPCLK2Freq>
 8001d0c:	e00a      	b.n	8001d24 <UART_SetConfig+0x198>
  
  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001d0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d12:	d133      	bne.n	8001d7c <UART_SetConfig+0x1f0>
      break;
    case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
      break;
    case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate)); 
 8001d14:	6863      	ldr	r3, [r4, #4]
 8001d16:	4a30      	ldr	r2, [pc, #192]	; (8001dd8 <UART_SetConfig+0x24c>)
 8001d18:	e00f      	b.n	8001d3a <UART_SetConfig+0x1ae>
  
  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001d1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d1e:	d133      	bne.n	8001d88 <UART_SetConfig+0x1fc>
      break;
    case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate)); 
      break;
    case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001d20:	f001 f98e 	bl	8003040 <HAL_RCC_GetSysClockFreq>
 8001d24:	6863      	ldr	r3, [r4, #4]
 8001d26:	0040      	lsls	r0, r0, #1
 8001d28:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d2c:	e007      	b.n	8001d3e <UART_SetConfig+0x1b2>
  
  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001d2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d32:	d130      	bne.n	8001d96 <UART_SetConfig+0x20a>
      break;
    case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
      break;
    case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate)); 
 8001d34:	6863      	ldr	r3, [r4, #4]
 8001d36:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001d3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d3e:	b29b      	uxth	r3, r3
{
  uint32_t tmpreg                     = 0x00000000;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
  uint16_t brrtemp                    = 0x0000;
  uint16_t usartdiv                   = 0x0000;
  HAL_StatusTypeDef ret               = HAL_OK;  
 8001d40:	2000      	movs	r0, #0
    case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
      break;
    case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate)); 
      break;
 8001d42:	e004      	b.n	8001d4e <UART_SetConfig+0x1c2>
  
  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001d44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d48:	d12d      	bne.n	8001da6 <UART_SetConfig+0x21a>
    case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate)); 
      break;
      case UART_CLOCKSOURCE_UNDEFINED:                
    default:
        ret = HAL_ERROR; 
 8001d4a:	2001      	movs	r0, #1
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
  uint32_t tmpreg                     = 0x00000000;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
  uint16_t brrtemp                    = 0x0000;
  uint16_t usartdiv                   = 0x0000;
 8001d4c:	2300      	movs	r3, #0
    default:
        ret = HAL_ERROR; 
      break;
    }
    
    brrtemp = usartdiv & 0xFFF0;
 8001d4e:	f023 010f 	bic.w	r1, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000F) >> 1U);
    huart->Instance->BRR = brrtemp;
 8001d52:	6822      	ldr	r2, [r4, #0]
        ret = HAL_ERROR; 
      break;
    }
    
    brrtemp = usartdiv & 0xFFF0;
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000F) >> 1U);
 8001d54:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 8001d58:	430b      	orrs	r3, r1
 8001d5a:	60d3      	str	r3, [r2, #12]
 8001d5c:	bd38      	pop	{r3, r4, r5, pc}
  }
  else
  {
    switch (clocksource)
 8001d5e:	2a08      	cmp	r2, #8
 8001d60:	d821      	bhi.n	8001da6 <UART_SetConfig+0x21a>
 8001d62:	e8df f002 	tbb	[pc, r2]
 8001d66:	0805      	.short	0x0805
 8001d68:	2011200b 	.word	0x2011200b
 8001d6c:	2020      	.short	0x2020
 8001d6e:	18          	.byte	0x18
 8001d6f:	00          	.byte	0x00
    {
    case UART_CLOCKSOURCE_PCLK1: 
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001d70:	f001 f9c6 	bl	8003100 <HAL_RCC_GetPCLK1Freq>
 8001d74:	e00a      	b.n	8001d8c <UART_SetConfig+0x200>
      break;
    case UART_CLOCKSOURCE_PCLK2: 
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001d76:	f001 f9d9 	bl	800312c <HAL_RCC_GetPCLK2Freq>
 8001d7a:	e007      	b.n	8001d8c <UART_SetConfig+0x200>
      break;
    case UART_CLOCKSOURCE_HSI: 
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate)); 
 8001d7c:	6863      	ldr	r3, [r4, #4]
 8001d7e:	4a17      	ldr	r2, [pc, #92]	; (8001ddc <UART_SetConfig+0x250>)
 8001d80:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d84:	b29b      	uxth	r3, r3
 8001d86:	e00b      	b.n	8001da0 <UART_SetConfig+0x214>
      break; 
    case UART_CLOCKSOURCE_SYSCLK:  
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001d88:	f001 f95a 	bl	8003040 <HAL_RCC_GetSysClockFreq>
 8001d8c:	6863      	ldr	r3, [r4, #4]
 8001d8e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001d92:	b283      	uxth	r3, r0
 8001d94:	e004      	b.n	8001da0 <UART_SetConfig+0x214>
      break;  
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate)); 
 8001d96:	6863      	ldr	r3, [r4, #4]
 8001d98:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001d9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001da0:	60eb      	str	r3, [r5, #12]
{
  uint32_t tmpreg                     = 0x00000000;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
  uint16_t brrtemp                    = 0x0000;
  uint16_t usartdiv                   = 0x0000;
  HAL_StatusTypeDef ret               = HAL_OK;  
 8001da2:	2000      	movs	r0, #0
    case UART_CLOCKSOURCE_SYSCLK:  
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
      break;  
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate)); 
      break;
 8001da4:	bd38      	pop	{r3, r4, r5, pc}
      case UART_CLOCKSOURCE_UNDEFINED:                
    default:
        ret = HAL_ERROR; 
 8001da6:	2001      	movs	r0, #1
    }
  }

  return ret;   

}
 8001da8:	bd38      	pop	{r3, r4, r5, pc}
 8001daa:	bf00      	nop
 8001dac:	efff69f3 	.word	0xefff69f3
 8001db0:	40011000 	.word	0x40011000
 8001db4:	080079d5 	.word	0x080079d5
 8001db8:	40004400 	.word	0x40004400
 8001dbc:	080079c8 	.word	0x080079c8
 8001dc0:	40004800 	.word	0x40004800
 8001dc4:	40004c00 	.word	0x40004c00
 8001dc8:	40005000 	.word	0x40005000
 8001dcc:	40011400 	.word	0x40011400
 8001dd0:	40007800 	.word	0x40007800
 8001dd4:	40007c00 	.word	0x40007c00
 8001dd8:	01e84800 	.word	0x01e84800
 8001ddc:	00f42400 	.word	0x00f42400

08001de0 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */ 
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
  
  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001de0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001de2:	07da      	lsls	r2, r3, #31
  * @brief Configure the UART peripheral advanced features 
  * @param huart: uart handle  
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8001de4:	b510      	push	{r4, lr}
  /* Check whether the set of advanced features to configure is properly set */ 
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
  
  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001de6:	d506      	bpl.n	8001df6 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001de8:	6802      	ldr	r2, [r0, #0]
 8001dea:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8001dec:	6854      	ldr	r4, [r2, #4]
 8001dee:	f424 3400 	bic.w	r4, r4, #131072	; 0x20000
 8001df2:	4321      	orrs	r1, r4
 8001df4:	6051      	str	r1, [r2, #4]
  }
  
  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001df6:	079c      	lsls	r4, r3, #30
 8001df8:	d506      	bpl.n	8001e08 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001dfa:	6802      	ldr	r2, [r0, #0]
 8001dfc:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8001dfe:	6854      	ldr	r4, [r2, #4]
 8001e00:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 8001e04:	4321      	orrs	r1, r4
 8001e06:	6051      	str	r1, [r2, #4]
  }
  
  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001e08:	0759      	lsls	r1, r3, #29
 8001e0a:	d506      	bpl.n	8001e1a <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001e0c:	6802      	ldr	r2, [r0, #0]
 8001e0e:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8001e10:	6854      	ldr	r4, [r2, #4]
 8001e12:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 8001e16:	4321      	orrs	r1, r4
 8001e18:	6051      	str	r1, [r2, #4]
  }
  
  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001e1a:	071a      	lsls	r2, r3, #28
 8001e1c:	d506      	bpl.n	8001e2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001e1e:	6802      	ldr	r2, [r0, #0]
 8001e20:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8001e22:	6854      	ldr	r4, [r2, #4]
 8001e24:	f424 4400 	bic.w	r4, r4, #32768	; 0x8000
 8001e28:	4321      	orrs	r1, r4
 8001e2a:	6051      	str	r1, [r2, #4]
  }
  
  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001e2c:	06dc      	lsls	r4, r3, #27
 8001e2e:	d506      	bpl.n	8001e3e <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));  
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001e30:	6802      	ldr	r2, [r0, #0]
 8001e32:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8001e34:	6894      	ldr	r4, [r2, #8]
 8001e36:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 8001e3a:	4321      	orrs	r1, r4
 8001e3c:	6091      	str	r1, [r2, #8]
  }
  
  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001e3e:	0699      	lsls	r1, r3, #26
 8001e40:	d506      	bpl.n	8001e50 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));   
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001e42:	6802      	ldr	r2, [r0, #0]
 8001e44:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8001e46:	6894      	ldr	r4, [r2, #8]
 8001e48:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
 8001e4c:	4321      	orrs	r1, r4
 8001e4e:	6091      	str	r1, [r2, #8]
  }
  
  /* if required, configure auto Baud rate detection scheme */              
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001e50:	065a      	lsls	r2, r3, #25
 8001e52:	d50f      	bpl.n	8001e74 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001e54:	6802      	ldr	r2, [r0, #0]
 8001e56:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001e58:	6854      	ldr	r4, [r2, #4]
 8001e5a:	f424 1480 	bic.w	r4, r4, #1048576	; 0x100000
 8001e5e:	430c      	orrs	r4, r1
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001e60:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  
  /* if required, configure auto Baud rate detection scheme */              
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
  {
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001e64:	6054      	str	r4, [r2, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001e66:	d105      	bne.n	8001e74 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001e68:	6854      	ldr	r4, [r2, #4]
 8001e6a:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8001e6c:	f424 04c0 	bic.w	r4, r4, #6291456	; 0x600000
 8001e70:	4321      	orrs	r1, r4
 8001e72:	6051      	str	r1, [r2, #4]
    }
  }
  
  /* if required, configure MSB first on communication line */  
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001e74:	061b      	lsls	r3, r3, #24
 8001e76:	d506      	bpl.n	8001e86 <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));   
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001e78:	6803      	ldr	r3, [r0, #0]
 8001e7a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001e7c:	685a      	ldr	r2, [r3, #4]
 8001e7e:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8001e82:	430a      	orrs	r2, r1
 8001e84:	605a      	str	r2, [r3, #4]
 8001e86:	bd10      	pop	{r4, pc}

08001e88 <UART_CheckIdleState>:
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e88:	2200      	movs	r2, #0
  
  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001e8a:	6803      	ldr	r3, [r0, #0]
  * @brief Check the UART Idle State
  * @param huart: uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8001e8c:	b510      	push	{r4, lr}
  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e8e:	66c2      	str	r2, [r0, #108]	; 0x6c
  
  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	0719      	lsls	r1, r3, #28
  * @brief Check the UART Idle State
  * @param huart: uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8001e94:	4604      	mov	r4, r0
  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
  
  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001e96:	d404      	bmi.n	8001ea2 <UART_CheckIdleState+0x1a>
      /* Timeout Occurred */
      return HAL_TIMEOUT;
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001e98:	6823      	ldr	r3, [r4, #0]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	075b      	lsls	r3, r3, #29
 8001e9e:	d514      	bpl.n	8001eca <UART_CheckIdleState+0x42>
 8001ea0:	e009      	b.n	8001eb6 <UART_CheckIdleState+0x2e>
  
  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, HAL_UART_TIMEOUT_VALUE) != HAL_OK)  
 8001ea2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001ea6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001eaa:	f7ff fcec 	bl	8001886 <UART_WaitOnFlagUntilTimeout>
 8001eae:	2800      	cmp	r0, #0
 8001eb0:	d0f2      	beq.n	8001e98 <UART_CheckIdleState+0x10>
    {
      /* Timeout Occurred */
      return HAL_TIMEOUT;
 8001eb2:	2003      	movs	r0, #3
 8001eb4:	bd10      	pop	{r4, pc}
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET,  HAL_UART_TIMEOUT_VALUE) != HAL_OK)  
 8001eb6:	4620      	mov	r0, r4
 8001eb8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001ec2:	f7ff fce0 	bl	8001886 <UART_WaitOnFlagUntilTimeout>
 8001ec6:	2800      	cmp	r0, #0
 8001ec8:	d1f3      	bne.n	8001eb2 <UART_CheckIdleState+0x2a>
      return HAL_TIMEOUT;
    }
  }
  
  /* Initialize the UART State */
  huart->State= HAL_UART_STATE_READY;
 8001eca:	2301      	movs	r3, #1
    
  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8001ecc:	2000      	movs	r0, #0
      return HAL_TIMEOUT;
    }
  }
  
  /* Initialize the UART State */
  huart->State= HAL_UART_STATE_READY;
 8001ece:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    
  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8001ed2:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  
  return HAL_OK;
 8001ed6:	bd10      	pop	{r4, pc}

08001ed8 <HAL_UART_Init>:
  *         parameters in the UART_InitTypeDef and creates the associated handle .
  * @param huart: uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ed8:	b510      	push	{r4, lr}
  /* Check the UART handle allocation */
  if(huart == NULL)
 8001eda:	4604      	mov	r4, r0
 8001edc:	b360      	cbz	r0, 8001f38 <HAL_UART_Init+0x60>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  
  if(huart->State == HAL_UART_STATE_RESET)
 8001ede:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8001ee2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001ee6:	b91b      	cbnz	r3, 8001ef0 <HAL_UART_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001ee8:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001eec:	f7ff f97c 	bl	80011e8 <HAL_UART_MspInit>
  }

  huart->State = HAL_UART_STATE_BUSY;
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8001ef6:	6823      	ldr	r3, [r4, #0]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	f022 0201 	bic.w	r2, r2, #1
 8001efe:	601a      	str	r2, [r3, #0]
  
  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001f00:	4620      	mov	r0, r4
 8001f02:	f7ff fe43 	bl	8001b8c <UART_SetConfig>
 8001f06:	2801      	cmp	r0, #1
 8001f08:	d016      	beq.n	8001f38 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001f0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001f0c:	b113      	cbz	r3, 8001f14 <HAL_UART_Init+0x3c>
  {
    UART_AdvFeatureConfig(huart);
 8001f0e:	4620      	mov	r0, r4
 8001f10:	f7ff ff66 	bl	8001de0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 8001f14:	6823      	ldr	r3, [r4, #0]
 8001f16:	685a      	ldr	r2, [r3, #4]
 8001f18:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001f1c:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8001f1e:	689a      	ldr	r2, [r3, #8]
 8001f20:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001f24:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	f042 0201 	orr.w	r2, r2, #1

  /* TEACK and/or REACK to check before moving huart->State to Ready */
  return (UART_CheckIdleState(huart));
 8001f2c:	4620      	mov	r0, r4
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
  huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8001f2e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->State to Ready */
  return (UART_CheckIdleState(huart));
}
 8001f30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);

  /* TEACK and/or REACK to check before moving huart->State to Ready */
  return (UART_CheckIdleState(huart));
 8001f34:	f7ff bfa8 	b.w	8001e88 <UART_CheckIdleState>
}
 8001f38:	2001      	movs	r0, #1
 8001f3a:	bd10      	pop	{r4, pc}

08001f3c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8001f3c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001f40:	2b01      	cmp	r3, #1
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8001f42:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8001f44:	d01d      	beq.n	8001f82 <HAL_TIMEx_MasterConfigSynchronization+0x46>

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001f46:	6803      	ldr	r3, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001f48:	4c0f      	ldr	r4, [pc, #60]	; (8001f88 <HAL_TIMEx_MasterConfigSynchronization+0x4c>)
  
  /* Check input state */
  __HAL_LOCK(htim);

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001f4a:	685a      	ldr	r2, [r3, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001f4c:	689d      	ldr	r5, [r3, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001f4e:	42a3      	cmp	r3, r4
 8001f50:	d003      	beq.n	8001f5a <HAL_TIMEx_MasterConfigSynchronization+0x1e>
 8001f52:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001f56:	42a3      	cmp	r3, r4
 8001f58:	d103      	bne.n	8001f62 <HAL_TIMEx_MasterConfigSynchronization+0x26>
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
    
    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8001f5a:	684c      	ldr	r4, [r1, #4]
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
    
    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8001f5c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8001f60:	4322      	orrs	r2, r4
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001f62:	680c      	ldr	r4, [r1, #0]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001f64:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001f68:	4314      	orrs	r4, r2

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001f6a:	688a      	ldr	r2, [r1, #8]
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001f6c:	605c      	str	r4, [r3, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8001f6e:	f025 0580 	bic.w	r5, r5, #128	; 0x80
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001f72:	ea45 0102 	orr.w	r1, r5, r2
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001f76:	6099      	str	r1, [r3, #8]

  __HAL_UNLOCK(htim);
 8001f78:	2300      	movs	r3, #0
 8001f7a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  
  return HAL_OK;
 8001f7e:	4618      	mov	r0, r3
 8001f80:	bd30      	pop	{r4, r5, pc}
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8001f82:	2002      	movs	r0, #2
  htim->Instance->SMCR = tmpsmcr;

  __HAL_UNLOCK(htim);
  
  return HAL_OK;
} 
 8001f84:	bd30      	pop	{r4, r5, pc}
 8001f86:	bf00      	nop
 8001f88:	40010000 	.word	0x40010000

08001f8c <HAL_TIMEx_CommutationCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8001f8c:	4770      	bx	lr

08001f8e <HAL_TIMEx_BreakCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001f8e:	4770      	bx	lr

08001f90 <TIM_TI1_ConfigInputStage>:
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001f90:	6a03      	ldr	r3, [r0, #32]
  * @param  TIM_ICFilter: Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001f92:	b510      	push	{r4, lr}
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f94:	6a04      	ldr	r4, [r0, #32]
 8001f96:	f024 0401 	bic.w	r4, r4, #1
 8001f9a:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8001f9c:	6984      	ldr	r4, [r0, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4);
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001f9e:	f023 030a 	bic.w	r3, r3, #10
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;    
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001fa2:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4);
 8001fa6:	ea44 1202 	orr.w	r2, r4, r2, lsl #4
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;
 8001faa:	4319      	orrs	r1, r3
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001fac:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001fae:	6201      	str	r1, [r0, #32]
 8001fb0:	bd10      	pop	{r4, pc}

08001fb2 <TIM_TI2_ConfigInputStage>:
{
uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001fb2:	6a03      	ldr	r3, [r0, #32]
 8001fb4:	f023 0310 	bic.w	r3, r3, #16
 8001fb8:	6203      	str	r3, [r0, #32]
  * @param  TIM_ICFilter: Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001fba:	b510      	push	{r4, lr}
uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
  tmpccmr1 = TIMx->CCMR1;
 8001fbc:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8001fbe:	6a03      	ldr	r3, [r0, #32]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001fc0:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001fc4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
  tmpccmr1 |= (TIM_ICFilter << 12);
 8001fc8:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |= (TIM_ICPolarity << 4);
 8001fcc:	ea43 1101 	orr.w	r1, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001fd0:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001fd2:	6201      	str	r1, [r0, #32]
 8001fd4:	bd10      	pop	{r4, pc}

08001fd6 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001fd6:	6803      	ldr	r3, [r0, #0]
 8001fd8:	68da      	ldr	r2, [r3, #12]
 8001fda:	f042 0201 	orr.w	r2, r2, #1
 8001fde:	60da      	str	r2, [r3, #12]
      
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	f042 0201 	orr.w	r2, r2, #1
 8001fe6:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
}
 8001fe8:	2000      	movs	r0, #0
 8001fea:	4770      	bx	lr

08001fec <HAL_TIM_OC_DelayElapsedCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fec:	4770      	bx	lr

08001fee <HAL_TIM_IC_CaptureCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001fee:	4770      	bx	lr

08001ff0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ff0:	4770      	bx	lr

08001ff2 <HAL_TIM_TriggerCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ff2:	4770      	bx	lr

08001ff4 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ff4:	6803      	ldr	r3, [r0, #0]
 8001ff6:	691a      	ldr	r2, [r3, #16]
 8001ff8:	0791      	lsls	r1, r2, #30
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ffa:	b510      	push	{r4, lr}
 8001ffc:	4604      	mov	r4, r0
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ffe:	d514      	bpl.n	800202a <HAL_TIM_IRQHandler+0x36>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8002000:	68da      	ldr	r2, [r3, #12]
 8002002:	0792      	lsls	r2, r2, #30
 8002004:	d511      	bpl.n	800202a <HAL_TIM_IRQHandler+0x36>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002006:	f06f 0202 	mvn.w	r2, #2
 800200a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 800200c:	699b      	ldr	r3, [r3, #24]
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800200e:	2201      	movs	r2, #1
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8002010:	0799      	lsls	r1, r3, #30
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002012:	7602      	strb	r2, [r0, #24]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8002014:	d002      	beq.n	800201c <HAL_TIM_IRQHandler+0x28>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8002016:	f7ff ffea 	bl	8001fee <HAL_TIM_IC_CaptureCallback>
 800201a:	e004      	b.n	8002026 <HAL_TIM_IRQHandler+0x32>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800201c:	f7ff ffe6 	bl	8001fec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002020:	4620      	mov	r0, r4
 8002022:	f7ff ffe5 	bl	8001ff0 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002026:	2300      	movs	r3, #0
 8002028:	7623      	strb	r3, [r4, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800202a:	6823      	ldr	r3, [r4, #0]
 800202c:	691a      	ldr	r2, [r3, #16]
 800202e:	0752      	lsls	r2, r2, #29
 8002030:	d516      	bpl.n	8002060 <HAL_TIM_IRQHandler+0x6c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8002032:	68da      	ldr	r2, [r3, #12]
 8002034:	0750      	lsls	r0, r2, #29
 8002036:	d513      	bpl.n	8002060 <HAL_TIM_IRQHandler+0x6c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002038:	f06f 0204 	mvn.w	r2, #4
 800203c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 800203e:	699b      	ldr	r3, [r3, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002040:	2202      	movs	r2, #2
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8002042:	f413 7f40 	tst.w	r3, #768	; 0x300
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002046:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8002048:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 800204a:	d002      	beq.n	8002052 <HAL_TIM_IRQHandler+0x5e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 800204c:	f7ff ffcf 	bl	8001fee <HAL_TIM_IC_CaptureCallback>
 8002050:	e004      	b.n	800205c <HAL_TIM_IRQHandler+0x68>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002052:	f7ff ffcb 	bl	8001fec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002056:	4620      	mov	r0, r4
 8002058:	f7ff ffca 	bl	8001ff0 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800205c:	2300      	movs	r3, #0
 800205e:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002060:	6823      	ldr	r3, [r4, #0]
 8002062:	691a      	ldr	r2, [r3, #16]
 8002064:	0711      	lsls	r1, r2, #28
 8002066:	d515      	bpl.n	8002094 <HAL_TIM_IRQHandler+0xa0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8002068:	68da      	ldr	r2, [r3, #12]
 800206a:	0712      	lsls	r2, r2, #28
 800206c:	d512      	bpl.n	8002094 <HAL_TIM_IRQHandler+0xa0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800206e:	f06f 0208 	mvn.w	r2, #8
 8002072:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8002074:	69db      	ldr	r3, [r3, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002076:	2204      	movs	r2, #4
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8002078:	079b      	lsls	r3, r3, #30
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800207a:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 800207c:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 800207e:	d002      	beq.n	8002086 <HAL_TIM_IRQHandler+0x92>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8002080:	f7ff ffb5 	bl	8001fee <HAL_TIM_IC_CaptureCallback>
 8002084:	e004      	b.n	8002090 <HAL_TIM_IRQHandler+0x9c>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002086:	f7ff ffb1 	bl	8001fec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 800208a:	4620      	mov	r0, r4
 800208c:	f7ff ffb0 	bl	8001ff0 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002090:	2300      	movs	r3, #0
 8002092:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002094:	6823      	ldr	r3, [r4, #0]
 8002096:	691a      	ldr	r2, [r3, #16]
 8002098:	06d0      	lsls	r0, r2, #27
 800209a:	d516      	bpl.n	80020ca <HAL_TIM_IRQHandler+0xd6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 800209c:	68da      	ldr	r2, [r3, #12]
 800209e:	06d1      	lsls	r1, r2, #27
 80020a0:	d513      	bpl.n	80020ca <HAL_TIM_IRQHandler+0xd6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80020a2:	f06f 0210 	mvn.w	r2, #16
 80020a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 80020a8:	69db      	ldr	r3, [r3, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020aa:	2208      	movs	r2, #8
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 80020ac:	f413 7f40 	tst.w	r3, #768	; 0x300
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020b0:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80020b2:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 80020b4:	d002      	beq.n	80020bc <HAL_TIM_IRQHandler+0xc8>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80020b6:	f7ff ff9a 	bl	8001fee <HAL_TIM_IC_CaptureCallback>
 80020ba:	e004      	b.n	80020c6 <HAL_TIM_IRQHandler+0xd2>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020bc:	f7ff ff96 	bl	8001fec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020c0:	4620      	mov	r0, r4
 80020c2:	f7ff ff95 	bl	8001ff0 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020c6:	2300      	movs	r3, #0
 80020c8:	7623      	strb	r3, [r4, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80020ca:	6823      	ldr	r3, [r4, #0]
 80020cc:	691a      	ldr	r2, [r3, #16]
 80020ce:	07d2      	lsls	r2, r2, #31
 80020d0:	d508      	bpl.n	80020e4 <HAL_TIM_IRQHandler+0xf0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80020d2:	68da      	ldr	r2, [r3, #12]
 80020d4:	07d0      	lsls	r0, r2, #31
 80020d6:	d505      	bpl.n	80020e4 <HAL_TIM_IRQHandler+0xf0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80020d8:	f06f 0201 	mvn.w	r2, #1
 80020dc:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80020de:	4620      	mov	r0, r4
 80020e0:	f7ff f8ee 	bl	80012c0 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80020e4:	6823      	ldr	r3, [r4, #0]
 80020e6:	691a      	ldr	r2, [r3, #16]
 80020e8:	0611      	lsls	r1, r2, #24
 80020ea:	d508      	bpl.n	80020fe <HAL_TIM_IRQHandler+0x10a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80020ec:	68da      	ldr	r2, [r3, #12]
 80020ee:	0612      	lsls	r2, r2, #24
 80020f0:	d505      	bpl.n	80020fe <HAL_TIM_IRQHandler+0x10a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80020f2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80020f6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80020f8:	4620      	mov	r0, r4
 80020fa:	f7ff ff48 	bl	8001f8e <HAL_TIMEx_BreakCallback>
    }
  }
  
    /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80020fe:	6823      	ldr	r3, [r4, #0]
 8002100:	691a      	ldr	r2, [r3, #16]
 8002102:	05d0      	lsls	r0, r2, #23
 8002104:	d508      	bpl.n	8002118 <HAL_TIM_IRQHandler+0x124>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002106:	68da      	ldr	r2, [r3, #12]
 8002108:	0611      	lsls	r1, r2, #24
 800210a:	d505      	bpl.n	8002118 <HAL_TIM_IRQHandler+0x124>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800210c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002110:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002112:	4620      	mov	r0, r4
 8002114:	f7ff ff3b 	bl	8001f8e <HAL_TIMEx_BreakCallback>
    }
  }

  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002118:	6823      	ldr	r3, [r4, #0]
 800211a:	691a      	ldr	r2, [r3, #16]
 800211c:	0652      	lsls	r2, r2, #25
 800211e:	d508      	bpl.n	8002132 <HAL_TIM_IRQHandler+0x13e>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8002120:	68da      	ldr	r2, [r3, #12]
 8002122:	0650      	lsls	r0, r2, #25
 8002124:	d505      	bpl.n	8002132 <HAL_TIM_IRQHandler+0x13e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002126:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800212a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800212c:	4620      	mov	r0, r4
 800212e:	f7ff ff60 	bl	8001ff2 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002132:	6823      	ldr	r3, [r4, #0]
 8002134:	691a      	ldr	r2, [r3, #16]
 8002136:	0691      	lsls	r1, r2, #26
 8002138:	d50a      	bpl.n	8002150 <HAL_TIM_IRQHandler+0x15c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 800213a:	68da      	ldr	r2, [r3, #12]
 800213c:	0692      	lsls	r2, r2, #26
 800213e:	d507      	bpl.n	8002150 <HAL_TIM_IRQHandler+0x15c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002140:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8002144:	4620      	mov	r0, r4
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002146:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
    }
  }
}
 8002148:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
      HAL_TIMEx_CommutationCallback(htim);
 800214c:	f7ff bf1e 	b.w	8001f8c <HAL_TIMEx_CommutationCallback>
 8002150:	bd10      	pop	{r4, pc}
	...

08002154 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8002154:	4a2e      	ldr	r2, [pc, #184]	; (8002210 <TIM_Base_SetConfig+0xbc>)
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
 8002156:	6803      	ldr	r3, [r0, #0]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8002158:	4290      	cmp	r0, r2
 800215a:	d012      	beq.n	8002182 <TIM_Base_SetConfig+0x2e>
 800215c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002160:	d00f      	beq.n	8002182 <TIM_Base_SetConfig+0x2e>
 8002162:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002166:	4290      	cmp	r0, r2
 8002168:	d00b      	beq.n	8002182 <TIM_Base_SetConfig+0x2e>
 800216a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800216e:	4290      	cmp	r0, r2
 8002170:	d007      	beq.n	8002182 <TIM_Base_SetConfig+0x2e>
 8002172:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002176:	4290      	cmp	r0, r2
 8002178:	d003      	beq.n	8002182 <TIM_Base_SetConfig+0x2e>
 800217a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800217e:	4290      	cmp	r0, r2
 8002180:	d118      	bne.n	80021b4 <TIM_Base_SetConfig+0x60>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8002182:	684a      	ldr	r2, [r1, #4]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002184:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002188:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 800218a:	4a21      	ldr	r2, [pc, #132]	; (8002210 <TIM_Base_SetConfig+0xbc>)
 800218c:	4290      	cmp	r0, r2
 800218e:	d037      	beq.n	8002200 <TIM_Base_SetConfig+0xac>
 8002190:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002194:	d034      	beq.n	8002200 <TIM_Base_SetConfig+0xac>
 8002196:	4a1f      	ldr	r2, [pc, #124]	; (8002214 <TIM_Base_SetConfig+0xc0>)
 8002198:	4290      	cmp	r0, r2
 800219a:	d031      	beq.n	8002200 <TIM_Base_SetConfig+0xac>
 800219c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80021a0:	4290      	cmp	r0, r2
 80021a2:	d02d      	beq.n	8002200 <TIM_Base_SetConfig+0xac>
 80021a4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80021a8:	4290      	cmp	r0, r2
 80021aa:	d029      	beq.n	8002200 <TIM_Base_SetConfig+0xac>
 80021ac:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80021b0:	4290      	cmp	r0, r2
 80021b2:	d025      	beq.n	8002200 <TIM_Base_SetConfig+0xac>
 80021b4:	4a18      	ldr	r2, [pc, #96]	; (8002218 <TIM_Base_SetConfig+0xc4>)
 80021b6:	4290      	cmp	r0, r2
 80021b8:	d022      	beq.n	8002200 <TIM_Base_SetConfig+0xac>
 80021ba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80021be:	4290      	cmp	r0, r2
 80021c0:	d01e      	beq.n	8002200 <TIM_Base_SetConfig+0xac>
 80021c2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80021c6:	4290      	cmp	r0, r2
 80021c8:	d01a      	beq.n	8002200 <TIM_Base_SetConfig+0xac>
 80021ca:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80021ce:	4290      	cmp	r0, r2
 80021d0:	d016      	beq.n	8002200 <TIM_Base_SetConfig+0xac>
 80021d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80021d6:	4290      	cmp	r0, r2
 80021d8:	d012      	beq.n	8002200 <TIM_Base_SetConfig+0xac>
 80021da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80021de:	4290      	cmp	r0, r2
 80021e0:	d00e      	beq.n	8002200 <TIM_Base_SetConfig+0xac>
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 80021e2:	6003      	str	r3, [r0, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021e4:	688b      	ldr	r3, [r1, #8]
 80021e6:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80021e8:	680b      	ldr	r3, [r1, #0]
 80021ea:	6283      	str	r3, [r0, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 80021ec:	4b08      	ldr	r3, [pc, #32]	; (8002210 <TIM_Base_SetConfig+0xbc>)
 80021ee:	4298      	cmp	r0, r3
 80021f0:	d00b      	beq.n	800220a <TIM_Base_SetConfig+0xb6>
 80021f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021f6:	4298      	cmp	r0, r3
 80021f8:	d007      	beq.n	800220a <TIM_Base_SetConfig+0xb6>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80021fa:	2301      	movs	r3, #1
 80021fc:	6143      	str	r3, [r0, #20]
 80021fe:	4770      	bx	lr
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002200:	68ca      	ldr	r2, [r1, #12]
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002202:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002206:	4313      	orrs	r3, r2
 8002208:	e7eb      	b.n	80021e2 <TIM_Base_SetConfig+0x8e>
  TIMx->PSC = (uint32_t)Structure->Prescaler;
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800220a:	690b      	ldr	r3, [r1, #16]
 800220c:	6303      	str	r3, [r0, #48]	; 0x30
 800220e:	e7f4      	b.n	80021fa <TIM_Base_SetConfig+0xa6>
 8002210:	40010000 	.word	0x40010000
 8002214:	40000400 	.word	0x40000400
 8002218:	40014000 	.word	0x40014000

0800221c <HAL_TIM_Base_Init>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 800221c:	b510      	push	{r4, lr}
  /* Check the TIM handle allocation */
  if(htim == NULL)
 800221e:	4604      	mov	r4, r0
 8002220:	b180      	cbz	r0, 8002244 <HAL_TIM_Base_Init+0x28>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 8002222:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002226:	b90b      	cbnz	r3, 800222c <HAL_TIM_Base_Init+0x10>
  {  
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002228:	f7fe ff90 	bl	800114c <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 800222c:	2302      	movs	r3, #2
 800222e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8002232:	6820      	ldr	r0, [r4, #0]
 8002234:	1d21      	adds	r1, r4, #4
 8002236:	f7ff ff8d 	bl	8002154 <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 800223a:	2301      	movs	r3, #1
 800223c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  return HAL_OK;
 8002240:	2000      	movs	r0, #0
 8002242:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 8002244:	2001      	movs	r0, #1
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
  
  return HAL_OK;
}
 8002246:	bd10      	pop	{r4, pc}

08002248 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002248:	b510      	push	{r4, lr}
  uint32_t tmpsmcr = 0;

  tmpsmcr = TIMx->SMCR;
 800224a:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800224c:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8002250:	4321      	orrs	r1, r4
 8002252:	430a      	orrs	r2, r1
 8002254:	ea42 2303 	orr.w	r3, r2, r3, lsl #8

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002258:	6083      	str	r3, [r0, #8]
 800225a:	bd10      	pop	{r4, pc}

0800225c <HAL_TIM_ConfigClockSource>:
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
  uint32_t tmpsmcr = 0;
    
  /* Process Locked */
  __HAL_LOCK(htim);
 800225c:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 8002260:	2a01      	cmp	r2, #1
  * @param  sClockSourceConfig: pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral. 
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
 8002262:	b510      	push	{r4, lr}
 8002264:	460b      	mov	r3, r1
 8002266:	4604      	mov	r4, r0
 8002268:	f04f 0002 	mov.w	r0, #2
  uint32_t tmpsmcr = 0;
    
  /* Process Locked */
  __HAL_LOCK(htim);
 800226c:	f000 8083 	beq.w	8002376 <HAL_TIM_ConfigClockSource+0x11a>
  
  htim->State = HAL_TIM_STATE_BUSY;
 8002270:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  
  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
  
  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002274:	6820      	ldr	r0, [r4, #0]
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
  uint32_t tmpsmcr = 0;
    
  /* Process Locked */
  __HAL_LOCK(htim);
 8002276:	2201      	movs	r2, #1
 8002278:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
  
  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
  
  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800227c:	6881      	ldr	r1, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800227e:	4a3e      	ldr	r2, [pc, #248]	; (8002378 <HAL_TIM_ConfigClockSource+0x11c>)
 8002280:	400a      	ands	r2, r1
  htim->Instance->SMCR = tmpsmcr;
 8002282:	6082      	str	r2, [r0, #8]
  
  switch (sClockSourceConfig->ClockSource)
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	2a40      	cmp	r2, #64	; 0x40
 8002288:	d058      	beq.n	800233c <HAL_TIM_ConfigClockSource+0xe0>
 800228a:	d814      	bhi.n	80022b6 <HAL_TIM_ConfigClockSource+0x5a>
 800228c:	2a10      	cmp	r2, #16
 800228e:	d060      	beq.n	8002352 <HAL_TIM_ConfigClockSource+0xf6>
 8002290:	d807      	bhi.n	80022a2 <HAL_TIM_ConfigClockSource+0x46>
 8002292:	2a00      	cmp	r2, #0
 8002294:	d169      	bne.n	800236a <HAL_TIM_ConfigClockSource+0x10e>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8002296:	6883      	ldr	r3, [r0, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8002298:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 800229c:	f043 0307 	orr.w	r3, r3, #7
 80022a0:	e062      	b.n	8002368 <HAL_TIM_ConfigClockSource+0x10c>
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;
  
  switch (sClockSourceConfig->ClockSource)
 80022a2:	2a20      	cmp	r2, #32
 80022a4:	d05b      	beq.n	800235e <HAL_TIM_ConfigClockSource+0x102>
 80022a6:	2a30      	cmp	r2, #48	; 0x30
 80022a8:	d15f      	bne.n	800236a <HAL_TIM_ConfigClockSource+0x10e>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 80022aa:	6883      	ldr	r3, [r0, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 80022ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80022b0:	f043 0337 	orr.w	r3, r3, #55	; 0x37
 80022b4:	e058      	b.n	8002368 <HAL_TIM_ConfigClockSource+0x10c>
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;
  
  switch (sClockSourceConfig->ClockSource)
 80022b6:	2a70      	cmp	r2, #112	; 0x70
 80022b8:	d025      	beq.n	8002306 <HAL_TIM_ConfigClockSource+0xaa>
 80022ba:	d80e      	bhi.n	80022da <HAL_TIM_ConfigClockSource+0x7e>
 80022bc:	2a50      	cmp	r2, #80	; 0x50
 80022be:	d031      	beq.n	8002324 <HAL_TIM_ConfigClockSource+0xc8>
 80022c0:	2a60      	cmp	r2, #96	; 0x60
 80022c2:	d152      	bne.n	800236a <HAL_TIM_ConfigClockSource+0x10e>
      
      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance, 
 80022c4:	68da      	ldr	r2, [r3, #12]
 80022c6:	6859      	ldr	r1, [r3, #4]
 80022c8:	f7ff fe73 	bl	8001fb2 <TIM_TI2_ConfigInputStage>
                        sClockSourceConfig->ClockPolarity, 
                        sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80022cc:	6823      	ldr	r3, [r4, #0]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 80022ce:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 80022d0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80022d4:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 80022d8:	e02e      	b.n	8002338 <HAL_TIM_ConfigClockSource+0xdc>
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;
  
  switch (sClockSourceConfig->ClockSource)
 80022da:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80022de:	d00c      	beq.n	80022fa <HAL_TIM_ConfigClockSource+0x9e>
 80022e0:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80022e4:	d141      	bne.n	800236a <HAL_TIM_ConfigClockSource+0x10e>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
      
      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance, 
 80022e6:	685a      	ldr	r2, [r3, #4]
 80022e8:	6899      	ldr	r1, [r3, #8]
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	f7ff ffac 	bl	8002248 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler, 
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80022f0:	6823      	ldr	r3, [r4, #0]
 80022f2:	689a      	ldr	r2, [r3, #8]
 80022f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80022f8:	e01e      	b.n	8002338 <HAL_TIM_ConfigClockSource+0xdc>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    { 
      assert_param(IS_TIM_INSTANCE(htim->Instance));      
      /* Disable slave mode to clock the prescaler directly with the internal clock */
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80022fa:	6883      	ldr	r3, [r0, #8]
 80022fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002300:	f023 0307 	bic.w	r3, r3, #7
 8002304:	e030      	b.n	8002368 <HAL_TIM_ConfigClockSource+0x10c>
      assert_param(IS_TIM_ETR_INSTANCE(htim->Instance));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance, 
 8002306:	685a      	ldr	r2, [r3, #4]
 8002308:	6899      	ldr	r1, [r3, #8]
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	f7ff ff9c 	bl	8002248 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler, 
                        sClockSourceConfig->ClockPolarity, 
                        sClockSourceConfig->ClockFilter);
      /* Get the TIMx SMCR register value */
      tmpsmcr = htim->Instance->SMCR;
 8002310:	6822      	ldr	r2, [r4, #0]
 8002312:	6893      	ldr	r3, [r2, #8]
      /* Reset the SMS and TS Bits */
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002314:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002318:	f023 0377 	bic.w	r3, r3, #119	; 0x77
      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800231c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002320:	6093      	str	r3, [r2, #8]
    }
    break;
 8002322:	e022      	b.n	800236a <HAL_TIM_ConfigClockSource+0x10e>
  
      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance, 
 8002324:	68da      	ldr	r2, [r3, #12]
 8002326:	6859      	ldr	r1, [r3, #4]
 8002328:	f7ff fe32 	bl	8001f90 <TIM_TI1_ConfigInputStage>
                        sClockSourceConfig->ClockPolarity, 
                        sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800232c:	6823      	ldr	r3, [r4, #0]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 800232e:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8002330:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8002334:	f042 0257 	orr.w	r2, r2, #87	; 0x57
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8002338:	609a      	str	r2, [r3, #8]
 800233a:	e016      	b.n	800236a <HAL_TIM_ConfigClockSource+0x10e>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
  
      TIM_TI1_ConfigInputStage(htim->Instance, 
 800233c:	68da      	ldr	r2, [r3, #12]
 800233e:	6859      	ldr	r1, [r3, #4]
 8002340:	f7ff fe26 	bl	8001f90 <TIM_TI1_ConfigInputStage>
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002344:	6823      	ldr	r3, [r4, #0]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8002346:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8002348:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 800234c:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 8002350:	e7f2      	b.n	8002338 <HAL_TIM_ConfigClockSource+0xdc>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8002352:	6883      	ldr	r3, [r0, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8002354:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8002358:	f043 0317 	orr.w	r3, r3, #23
 800235c:	e004      	b.n	8002368 <HAL_TIM_ConfigClockSource+0x10c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 800235e:	6883      	ldr	r3, [r0, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8002360:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8002364:	f043 0327 	orr.w	r3, r3, #39	; 0x27
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8002368:	6083      	str	r3, [r0, #8]
    break;
    
    default:
    break;    
  }
  htim->State = HAL_TIM_STATE_READY;
 800236a:	2301      	movs	r3, #1
  
  __HAL_UNLOCK(htim);
 800236c:	2000      	movs	r0, #0
    break;
    
    default:
    break;    
  }
  htim->State = HAL_TIM_STATE_READY;
 800236e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8002372:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  
  return HAL_OK;
}
 8002376:	bd10      	pop	{r4, pc}
 8002378:	fffe0088 	.word	0xfffe0088

0800237c <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800237c:	6803      	ldr	r3, [r0, #0]
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800237e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002382:	f013 0601 	ands.w	r6, r3, #1
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002386:	4604      	mov	r4, r0
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002388:	d00c      	beq.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x28>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800238a:	4ab5      	ldr	r2, [pc, #724]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800238c:	6891      	ldr	r1, [r2, #8]
 800238e:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 8002392:	6091      	str	r1, [r2, #8]
 8002394:	6b46      	ldr	r6, [r0, #52]	; 0x34
 8002396:	6891      	ldr	r1, [r2, #8]
 8002398:	4331      	orrs	r1, r6
    
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800239a:	f1d6 0601 	rsbs	r6, r6, #1
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800239e:	6091      	str	r1, [r2, #8]
    
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80023a0:	bf38      	it	cc
 80023a2:	2600      	movcc	r6, #0
      plli2sused = 1; 
    }
  }
  
  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80023a4:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
 80023a8:	d012      	beq.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x54>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80023aa:	4aad      	ldr	r2, [pc, #692]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80023ac:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 80023ae:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 80023b2:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
 80023b6:	4329      	orrs	r1, r5
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80023b8:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
    
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80023bc:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80023c0:	d004      	beq.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x50>
    {
      plli2sused = 1; 
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80023c2:	f1d5 0501 	rsbs	r5, r5, #1
 80023c6:	bf38      	it	cc
 80023c8:	2500      	movcc	r5, #0
 80023ca:	e001      	b.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x54>
{
  uint32_t tickstart = 0;
  uint32_t tmpreg0 = 0;
  uint32_t tmpreg1 = 0;
  uint32_t plli2sused = 0;
  uint32_t pllsaiused = 0;
 80023cc:	2500      	movs	r5, #0
    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
    {
      plli2sused = 1; 
 80023ce:	2601      	movs	r6, #1
      pllsaiused = 1; 
    }
  }
  
  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80023d0:	02d9      	lsls	r1, r3, #11
 80023d2:	d510      	bpl.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
    
    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80023d4:	49a2      	ldr	r1, [pc, #648]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80023d6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80023d8:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 80023dc:	f420 0040 	bic.w	r0, r0, #12582912	; 0xc00000
 80023e0:	4310      	orrs	r0, r2
    
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80023e2:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
    
    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80023e6:	f8c1 008c 	str.w	r0, [r1, #140]	; 0x8c
    
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80023ea:	d003      	beq.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x78>
      plli2sused = 1; 
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1; 
 80023ec:	2a00      	cmp	r2, #0
 80023ee:	bf08      	it	eq
 80023f0:	2501      	moveq	r5, #1
 80023f2:	e000      	b.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
    
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
    {
      plli2sused = 1; 
 80023f4:	2601      	movs	r6, #1
  }
  
  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {    
      plli2sused = 1; 
 80023f6:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80023fa:	bf18      	it	ne
 80023fc:	2601      	movne	r6, #1
  }  
  
  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80023fe:	069a      	lsls	r2, r3, #26
 8002400:	d55b      	bpl.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002402:	2300      	movs	r3, #0
 8002404:	9301      	str	r3, [sp, #4]
 8002406:	4b96      	ldr	r3, [pc, #600]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002408:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800240a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800240e:	641a      	str	r2, [r3, #64]	; 0x40
 8002410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002412:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002416:	9301      	str	r3, [sp, #4]
 8002418:	9b01      	ldr	r3, [sp, #4]
      
    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800241a:	4b92      	ldr	r3, [pc, #584]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002422:	601a      	str	r2, [r3, #0]
      
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002424:	f001 f872 	bl	800350c <HAL_GetTick>
 8002428:	4607      	mov	r7, r0
      
    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800242a:	4b8e      	ldr	r3, [pc, #568]	; (8002664 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	05db      	lsls	r3, r3, #23
 8002430:	d406      	bmi.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002432:	f001 f86b 	bl	800350c <HAL_GetTick>
 8002436:	1bc0      	subs	r0, r0, r7
 8002438:	2864      	cmp	r0, #100	; 0x64
 800243a:	d9f6      	bls.n	800242a <HAL_RCCEx_PeriphCLKConfig+0xae>
      {
        return HAL_TIMEOUT;
 800243c:	2003      	movs	r0, #3
 800243e:	e346      	b.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x752>
      }      
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified */ 
    if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002440:	4b87      	ldr	r3, [pc, #540]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002442:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002444:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8002446:	404a      	eors	r2, r1
 8002448:	f412 7f40 	tst.w	r2, #768	; 0x300
 800244c:	d035      	beq.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800244e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
      
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002450:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8002452:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8002456:	6718      	str	r0, [r3, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002458:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800245a:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 800245e:	6718      	str	r0, [r3, #112]	; 0x70
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified */ 
    if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002460:	f422 7140 	bic.w	r1, r2, #768	; 0x300
      
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
      
      /* If LSE is selected as RTC clock source, wait for LSE reactivation */
      if (HAL_IS_BIT_SET(tmpreg0, RCC_BDCR_LSERDY))
 8002464:	0790      	lsls	r0, r2, #30
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
      __HAL_RCC_BACKUPRESET_RELEASE();
      
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002466:	6719      	str	r1, [r3, #112]	; 0x70
      
      /* If LSE is selected as RTC clock source, wait for LSE reactivation */
      if (HAL_IS_BIT_SET(tmpreg0, RCC_BDCR_LSERDY))
 8002468:	d40f      	bmi.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x10e>
          {
            return HAL_TIMEOUT;
          }
        }
      }
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 			
 800246a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800246c:	f402 7340 	and.w	r3, r2, #768	; 0x300
 8002470:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002474:	4b7a      	ldr	r3, [pc, #488]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002476:	d117      	bne.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
 8002478:	6898      	ldr	r0, [r3, #8]
 800247a:	f022 4170 	bic.w	r1, r2, #4026531840	; 0xf0000000
 800247e:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8002482:	f420 10f8 	bic.w	r0, r0, #2031616	; 0x1f0000
 8002486:	4301      	orrs	r1, r0
 8002488:	e011      	b.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x132>
      
      /* If LSE is selected as RTC clock source, wait for LSE reactivation */
      if (HAL_IS_BIT_SET(tmpreg0, RCC_BDCR_LSERDY))
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800248a:	f001 f83f 	bl	800350c <HAL_GetTick>
 800248e:	4607      	mov	r7, r0
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002490:	4b73      	ldr	r3, [pc, #460]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002494:	0799      	lsls	r1, r3, #30
 8002496:	d4e8      	bmi.n	800246a <HAL_RCCEx_PeriphCLKConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002498:	f001 f838 	bl	800350c <HAL_GetTick>
 800249c:	f241 3388 	movw	r3, #5000	; 0x1388
 80024a0:	1bc0      	subs	r0, r0, r7
 80024a2:	4298      	cmp	r0, r3
 80024a4:	d9f4      	bls.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x114>
 80024a6:	e7c9      	b.n	800243c <HAL_RCCEx_PeriphCLKConfig+0xc0>
          {
            return HAL_TIMEOUT;
          }
        }
      }
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 			
 80024a8:	6899      	ldr	r1, [r3, #8]
 80024aa:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80024ae:	6099      	str	r1, [r3, #8]
 80024b0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80024b2:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80024b6:	430a      	orrs	r2, r1
 80024b8:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80024ba:	6823      	ldr	r3, [r4, #0]
 80024bc:	06da      	lsls	r2, r3, #27
 80024be:	d50c      	bpl.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x15e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
    
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80024c0:	4a67      	ldr	r2, [pc, #412]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80024c2:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 80024c6:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 80024ca:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 80024ce:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
 80024d2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80024d4:	4301      	orrs	r1, r0
 80024d6:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }
  
  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80024da:	045f      	lsls	r7, r3, #17
 80024dc:	d508      	bpl.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80024de:	4a60      	ldr	r2, [pc, #384]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80024e0:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80024e2:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
 80024e6:	f420 3040 	bic.w	r0, r0, #196608	; 0x30000
 80024ea:	4301      	orrs	r1, r0
 80024ec:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80024f0:	0418      	lsls	r0, r3, #16
 80024f2:	d508      	bpl.n	8002506 <HAL_RCCEx_PeriphCLKConfig+0x18a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80024f4:	4a5a      	ldr	r2, [pc, #360]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80024f6:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 80024f8:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
 80024fc:	f420 2040 	bic.w	r0, r0, #786432	; 0xc0000
 8002500:	4301      	orrs	r1, r0
 8002502:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
  }
  
  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002506:	03d9      	lsls	r1, r3, #15
 8002508:	d508      	bpl.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800250a:	4a55      	ldr	r2, [pc, #340]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800250c:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800250e:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
 8002512:	f420 1040 	bic.w	r0, r0, #3145728	; 0x300000
 8002516:	4301      	orrs	r1, r0
 8002518:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
  }
    
  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800251c:	039a      	lsls	r2, r3, #14
 800251e:	d508      	bpl.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
    
    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002520:	4a4f      	ldr	r2, [pc, #316]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002522:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8002524:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
 8002528:	f420 0040 	bic.w	r0, r0, #12582912	; 0xc00000
 800252c:	4301      	orrs	r1, r0
 800252e:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002532:	065f      	lsls	r7, r3, #25
 8002534:	d508      	bpl.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002536:	4a4a      	ldr	r2, [pc, #296]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002538:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800253a:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
 800253e:	f020 0003 	bic.w	r0, r0, #3
 8002542:	4301      	orrs	r1, r0
 8002544:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002548:	0618      	lsls	r0, r3, #24
 800254a:	d508      	bpl.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800254c:	4a44      	ldr	r2, [pc, #272]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800254e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8002550:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
 8002554:	f020 000c 	bic.w	r0, r0, #12
 8002558:	4301      	orrs	r1, r0
 800255a:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800255e:	05d9      	lsls	r1, r3, #23
 8002560:	d508      	bpl.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002562:	4a3f      	ldr	r2, [pc, #252]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002564:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8002566:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
 800256a:	f020 0030 	bic.w	r0, r0, #48	; 0x30
 800256e:	4301      	orrs	r1, r0
 8002570:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002574:	059a      	lsls	r2, r3, #22
 8002576:	d508      	bpl.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002578:	4a39      	ldr	r2, [pc, #228]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800257a:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800257c:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
 8002580:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
 8002584:	4301      	orrs	r1, r0
 8002586:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800258a:	055f      	lsls	r7, r3, #21
 800258c:	d508      	bpl.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800258e:	4a34      	ldr	r2, [pc, #208]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002590:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8002592:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
 8002596:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 800259a:	4301      	orrs	r1, r0
 800259c:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80025a0:	0518      	lsls	r0, r3, #20
 80025a2:	d508      	bpl.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
    
    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80025a4:	4a2e      	ldr	r2, [pc, #184]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80025a6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80025a8:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
 80025ac:	f420 6040 	bic.w	r0, r0, #3072	; 0xc00
 80025b0:	4301      	orrs	r1, r0
 80025b2:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80025b6:	04d9      	lsls	r1, r3, #19
 80025b8:	d508      	bpl.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
    
    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80025ba:	4a29      	ldr	r2, [pc, #164]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80025bc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80025be:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
 80025c2:	f420 5040 	bic.w	r0, r0, #12288	; 0x3000
 80025c6:	4301      	orrs	r1, r0
 80025c8:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80025cc:	049a      	lsls	r2, r3, #18
 80025ce:	d508      	bpl.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
    
    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80025d0:	4a23      	ldr	r2, [pc, #140]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80025d2:	6e21      	ldr	r1, [r4, #96]	; 0x60
 80025d4:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
 80025d8:	f420 4040 	bic.w	r0, r0, #49152	; 0xc000
 80025dc:	4301      	orrs	r1, r0
 80025de:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
  }
  
  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80025e2:	025f      	lsls	r7, r3, #9
 80025e4:	d508      	bpl.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80025e6:	4a1e      	ldr	r2, [pc, #120]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80025e8:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 80025ea:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
 80025ee:	f020 6080 	bic.w	r0, r0, #67108864	; 0x4000000
 80025f2:	4301      	orrs	r1, r0
 80025f4:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
  }
  
  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80025f8:	0298      	lsls	r0, r3, #10
 80025fa:	d50c      	bpl.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
    
    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80025fc:	4918      	ldr	r1, [pc, #96]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80025fe:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8002600:	f8d1 0090 	ldr.w	r0, [r1, #144]	; 0x90
 8002604:	f020 6000 	bic.w	r0, r0, #134217728	; 0x8000000
 8002608:	4310      	orrs	r0, r2

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1; 
 800260a:	f1b2 6f00 	cmp.w	r2, #134217728	; 0x8000000
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
    
    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800260e:	f8c1 0090 	str.w	r0, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1; 
 8002612:	bf08      	it	eq
 8002614:	2501      	moveq	r5, #1

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F756xx) || defined(STM32F746xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1; 
 8002616:	f013 0f08 	tst.w	r3, #8
 800261a:	bf18      	it	ne
 800261c:	2501      	movne	r5, #1
  }
#endif /* STM32F756xx || STM32F746xx */
  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800261e:	0359      	lsls	r1, r3, #13
 8002620:	d508      	bpl.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    
    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002622:	4a0f      	ldr	r2, [pc, #60]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8002624:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8002626:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
 800262a:	f020 7040 	bic.w	r0, r0, #50331648	; 0x3000000
 800262e:	4301      	orrs	r1, r0
 8002630:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
   }
  
  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002634:	021a      	lsls	r2, r3, #8
 8002636:	d509      	bpl.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    
    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002638:	4a09      	ldr	r2, [pc, #36]	; (8002660 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800263a:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800263e:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
 8002642:	f020 5080 	bic.w	r0, r0, #268435456	; 0x10000000
 8002646:	4301      	orrs	r1, r0
 8002648:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800264c:	2e01      	cmp	r6, #1
 800264e:	d00b      	beq.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
 8002650:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002654:	d008      	beq.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    }
  } 
  
  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002656:	2d01      	cmp	r5, #1
 8002658:	f040 8195 	bne.w	8002986 <HAL_RCCEx_PeriphCLKConfig+0x60a>
 800265c:	e12b      	b.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x53a>
 800265e:	bf00      	nop
 8002660:	40023800 	.word	0x40023800
 8002664:	40007000 	.word	0x40007000
  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();  
 8002668:	4bcc      	ldr	r3, [pc, #816]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x620>)
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8002670:	601a      	str	r2, [r3, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002672:	f000 ff4b 	bl	800350c <HAL_GetTick>
 8002676:	4606      	mov	r6, r0
    
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002678:	4ac8      	ldr	r2, [pc, #800]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x620>)
 800267a:	6813      	ldr	r3, [r2, #0]
 800267c:	011f      	lsls	r7, r3, #4
 800267e:	d505      	bpl.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x310>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002680:	f000 ff44 	bl	800350c <HAL_GetTick>
 8002684:	1b80      	subs	r0, r0, r6
 8002686:	2864      	cmp	r0, #100	; 0x64
 8002688:	d9f6      	bls.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800268a:	e6d7      	b.n	800243c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
      
    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/ 
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800268c:	6823      	ldr	r3, [r4, #0]
 800268e:	07de      	lsls	r6, r3, #31
 8002690:	d540      	bpl.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x398>
 8002692:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002694:	2900      	cmp	r1, #0
 8002696:	d13d      	bne.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
    
      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SP));
 8002698:	f8d2 e084 	ldr.w	lr, [r2, #132]	; 0x84
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800269c:	f44f 3840 	mov.w	r8, #196608	; 0x30000
 80026a0:	fa98 f8a8 	rbit	r8, r8
 80026a4:	f04f 6770 	mov.w	r7, #251658240	; 0xf000000
 80026a8:	fab8 f888 	clz	r8, r8
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SQ));
 80026ac:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
 80026b0:	fa97 f7a7 	rbit	r7, r7
 80026b4:	f647 79c0 	movw	r9, #32704	; 0x7fc0
 80026b8:	fab7 f787 	clz	r7, r7
 80026bc:	fa99 f9a9 	rbit	r9, r9
 80026c0:	f44f 3c40 	mov.w	ip, #196608	; 0x30000
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80026c4:	fab9 f989 	clz	r9, r9
 80026c8:	fa9c fcac 	rbit	ip, ip
 80026cc:	f04f 6670 	mov.w	r6, #251658240	; 0xf000000
 80026d0:	fabc fc8c 	clz	ip, ip
 80026d4:	fa96 f6a6 	rbit	r6, r6
 80026d8:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 80026dc:	fab6 f686 	clz	r6, r6
 80026e0:	fa92 f2a2 	rbit	r2, r2
 80026e4:	68a1      	ldr	r1, [r4, #8]
 80026e6:	fab2 f282 	clz	r2, r2
 80026ea:	4091      	lsls	r1, r2
 80026ec:	6862      	ldr	r2, [r4, #4]
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
    
      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SP));
 80026ee:	f40e 3e40 	and.w	lr, lr, #196608	; 0x30000
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SQ));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80026f2:	fa02 f209 	lsl.w	r2, r2, r9
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
    
      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SP));
 80026f6:	fa2e fe08 	lsr.w	lr, lr, r8
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SQ));
 80026fa:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80026fe:	430a      	orrs	r2, r1
 8002700:	fa0e fe0c 	lsl.w	lr, lr, ip
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
    
      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SP));
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SQ));
 8002704:	40f8      	lsrs	r0, r7
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002706:	40b0      	lsls	r0, r6
 8002708:	ea42 020e 	orr.w	r2, r2, lr
 800270c:	4302      	orrs	r2, r0
 800270e:	48a3      	ldr	r0, [pc, #652]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x620>)
 8002710:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    }
        
    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/  
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002714:	0318      	lsls	r0, r3, #12
 8002716:	d503      	bpl.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8002718:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800271a:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 800271e:	d005      	beq.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 8002720:	02d9      	lsls	r1, r3, #11
 8002722:	d54b      	bpl.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x440>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S))) 
 8002724:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002726:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 800272a:	d147      	bne.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x440>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
            
      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SP));
 800272c:	4a9b      	ldr	r2, [pc, #620]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x620>)
 800272e:	f44f 3840 	mov.w	r8, #196608	; 0x30000
 8002732:	f8d2 e084 	ldr.w	lr, [r2, #132]	; 0x84
 8002736:	fa98 f8a8 	rbit	r8, r8
 800273a:	f04f 47e0 	mov.w	r7, #1879048192	; 0x70000000
 800273e:	fab8 f888 	clz	r8, r8
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 8002742:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
 8002746:	fa97 f7a7 	rbit	r7, r7
 800274a:	f647 79c0 	movw	r9, #32704	; 0x7fc0
 800274e:	fab7 f787 	clz	r7, r7
 8002752:	fa99 f9a9 	rbit	r9, r9
 8002756:	f44f 3c40 	mov.w	ip, #196608	; 0x30000
      /* Configure the PLLI2S division factors */      
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800275a:	fab9 f989 	clz	r9, r9
 800275e:	fa9c fcac 	rbit	ip, ip
 8002762:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
 8002766:	fabc fc8c 	clz	ip, ip
 800276a:	fa92 f2a2 	rbit	r2, r2
 800276e:	f04f 46e0 	mov.w	r6, #1879048192	; 0x70000000
 8002772:	fab2 f282 	clz	r2, r2
 8002776:	fa96 f6a6 	rbit	r6, r6
 800277a:	68e1      	ldr	r1, [r4, #12]
 800277c:	4091      	lsls	r1, r2
 800277e:	6862      	ldr	r2, [r4, #4]
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
            
      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SP));
 8002780:	f40e 3e40 	and.w	lr, lr, #196608	; 0x30000
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
      /* Configure the PLLI2S division factors */      
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002784:	fa02 f209 	lsl.w	r2, r2, r9
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
            
      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SP));
 8002788:	fa2e fe08 	lsr.w	lr, lr, r8
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 800278c:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
      /* Configure the PLLI2S division factors */      
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002790:	4311      	orrs	r1, r2
 8002792:	fab6 f686 	clz	r6, r6
 8002796:	fa0e fe0c 	lsl.w	lr, lr, ip
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
            
      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SP));
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 800279a:	40f8      	lsrs	r0, r7
      /* Configure the PLLI2S division factors */      
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800279c:	4a7f      	ldr	r2, [pc, #508]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x620>)
 800279e:	40b0      	lsls	r0, r6
 80027a0:	ea41 010e 	orr.w	r1, r1, lr
 80027a4:	4301      	orrs	r1, r0
 80027a6:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
   
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */ 
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);   
 80027aa:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
 80027ae:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80027b0:	f020 001f 	bic.w	r0, r0, #31
 80027b4:	3901      	subs	r1, #1
 80027b6:	4301      	orrs	r1, r0
 80027b8:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
    }          

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/  
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80027bc:	01da      	lsls	r2, r3, #7
 80027be:	d53e      	bpl.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
     
     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SQ));
 80027c0:	4a76      	ldr	r2, [pc, #472]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x620>)
 80027c2:	f04f 6870 	mov.w	r8, #251658240	; 0xf000000
 80027c6:	f8d2 e084 	ldr.w	lr, [r2, #132]	; 0x84
 80027ca:	fa98 f8a8 	rbit	r8, r8
 80027ce:	f04f 47e0 	mov.w	r7, #1879048192	; 0x70000000
 80027d2:	fab8 f888 	clz	r8, r8
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 80027d6:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
 80027da:	fa97 f7a7 	rbit	r7, r7
 80027de:	f647 79c0 	movw	r9, #32704	; 0x7fc0
 80027e2:	fab7 f787 	clz	r7, r7
 80027e6:	fa99 f9a9 	rbit	r9, r9
 80027ea:	f44f 3240 	mov.w	r2, #196608	; 0x30000
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80027ee:	fab9 f989 	clz	r9, r9
 80027f2:	fa92 f2a2 	rbit	r2, r2
 80027f6:	f04f 6c70 	mov.w	ip, #251658240	; 0xf000000
 80027fa:	fab2 f282 	clz	r2, r2
 80027fe:	fa9c fcac 	rbit	ip, ip
 8002802:	f04f 46e0 	mov.w	r6, #1879048192	; 0x70000000
 8002806:	fabc fc8c 	clz	ip, ip
 800280a:	fa96 f6a6 	rbit	r6, r6
 800280e:	6921      	ldr	r1, [r4, #16]
 8002810:	4091      	lsls	r1, r2
 8002812:	6862      	ldr	r2, [r4, #4]
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
     
     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SQ));
 8002814:	f00e 6e70 	and.w	lr, lr, #251658240	; 0xf000000
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002818:	fa02 f209 	lsl.w	r2, r2, r9
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
     
     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SQ));
 800281c:	fa2e fe08 	lsr.w	lr, lr, r8
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 8002820:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002824:	fab6 f686 	clz	r6, r6
 8002828:	430a      	orrs	r2, r1
 800282a:	fa0e fe0c 	lsl.w	lr, lr, ip
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
     
     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SQ));
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLI2SCFGR_PLLI2SR));
 800282e:	40f8      	lsrs	r0, r7
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002830:	40b0      	lsls	r0, r6
 8002832:	ea42 020e 	orr.w	r2, r2, lr
 8002836:	4302      	orrs	r2, r0
 8002838:	4858      	ldr	r0, [pc, #352]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x620>)
 800283a:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    }  
         
    /*----------------- In Case of PLLI2S is just selected  -----------------*/  
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800283e:	019b      	lsls	r3, r3, #6
 8002840:	d526      	bpl.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002842:	f647 7ec0 	movw	lr, #32704	; 0x7fc0
 8002846:	fa9e feae 	rbit	lr, lr
 800284a:	f44f 3140 	mov.w	r1, #196608	; 0x30000
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800284e:	fabe fe8e 	clz	lr, lr
 8002852:	fa91 f1a1 	rbit	r1, r1
 8002856:	f04f 6770 	mov.w	r7, #251658240	; 0xf000000
 800285a:	fab1 f181 	clz	r1, r1
 800285e:	fa97 f7a7 	rbit	r7, r7
 8002862:	f04f 46e0 	mov.w	r6, #1879048192	; 0x70000000
 8002866:	fab7 f787 	clz	r7, r7
 800286a:	fa96 f6a6 	rbit	r6, r6
 800286e:	6920      	ldr	r0, [r4, #16]
 8002870:	68e2      	ldr	r2, [r4, #12]
 8002872:	68a3      	ldr	r3, [r4, #8]
 8002874:	4088      	lsls	r0, r1
 8002876:	6861      	ldr	r1, [r4, #4]
 8002878:	fa01 f10e 	lsl.w	r1, r1, lr
 800287c:	fab6 f686 	clz	r6, r6
 8002880:	4301      	orrs	r1, r0
 8002882:	40ba      	lsls	r2, r7
 8002884:	40b3      	lsls	r3, r6
 8002886:	430a      	orrs	r2, r1
 8002888:	4e44      	ldr	r6, [pc, #272]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x620>)
 800288a:	4313      	orrs	r3, r2
 800288c:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    } 
    
    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002890:	4b42      	ldr	r3, [pc, #264]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x620>)
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002898:	601a      	str	r2, [r3, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800289a:	f000 fe37 	bl	800350c <HAL_GetTick>
 800289e:	4606      	mov	r6, r0

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80028a0:	4b3e      	ldr	r3, [pc, #248]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x620>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	011f      	lsls	r7, r3, #4
 80028a6:	f53f aed6 	bmi.w	8002656 <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80028aa:	f000 fe2f 	bl	800350c <HAL_GetTick>
 80028ae:	1b80      	subs	r0, r0, r6
 80028b0:	2864      	cmp	r0, #100	; 0x64
 80028b2:	d9f5      	bls.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80028b4:	e5c2      	b.n	800243c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE(); 
 80028b6:	4b39      	ldr	r3, [pc, #228]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x620>)
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80028be:	601a      	str	r2, [r3, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028c0:	f000 fe24 	bl	800350c <HAL_GetTick>
 80028c4:	4605      	mov	r5, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80028c6:	4b35      	ldr	r3, [pc, #212]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x620>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	009e      	lsls	r6, r3, #2
 80028cc:	d45d      	bmi.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x60e>
    
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
    
    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/  
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80028ce:	6823      	ldr	r3, [r4, #0]
 80028d0:	031d      	lsls	r5, r3, #12
 80028d2:	d460      	bmi.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x61a>
 80028d4:	02d8      	lsls	r0, r3, #11
 80028d6:	d463      	bmi.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x624>
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
    }           

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/   
    /* In Case of PLLI2S is selected as source clock for CK48 */ 
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80028d8:	0299      	lsls	r1, r3, #10
 80028da:	f100 80ad 	bmi.w	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
    }        

#if defined(STM32F756xx) || defined(STM32F746xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80028de:	071a      	lsls	r2, r3, #28
 80028e0:	d544      	bpl.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
      
      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ));
 80028e2:	4b2e      	ldr	r3, [pc, #184]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x620>)
 80028e4:	f04f 6570 	mov.w	r5, #251658240	; 0xf000000
 80028e8:	f8d3 1088 	ldr.w	r1, [r3, #136]	; 0x88
 80028ec:	fa95 f5a5 	rbit	r5, r5
 80028f0:	f44f 3e40 	mov.w	lr, #196608	; 0x30000
 80028f4:	fab5 f585 	clz	r5, r5
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP));
 80028f8:	f8d3 6088 	ldr.w	r6, [r3, #136]	; 0x88
 80028fc:	fa9e feae 	rbit	lr, lr
 8002900:	f647 7cc0 	movw	ip, #32704	; 0x7fc0
 8002904:	fabe fe8e 	clz	lr, lr
 8002908:	fa9c fcac 	rbit	ip, ip
 800290c:	f44f 3740 	mov.w	r7, #196608	; 0x30000
      
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002910:	fabc fc8c 	clz	ip, ip
 8002914:	fa97 f7a7 	rbit	r7, r7
 8002918:	f04f 6070 	mov.w	r0, #251658240	; 0xf000000
 800291c:	fab7 f787 	clz	r7, r7
 8002920:	fa90 f0a0 	rbit	r0, r0
 8002924:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8002928:	fab0 f080 	clz	r0, r0
 800292c:	fa93 f3a3 	rbit	r3, r3
 8002930:	69e2      	ldr	r2, [r4, #28]
 8002932:	fab3 f383 	clz	r3, r3
 8002936:	409a      	lsls	r2, r3
 8002938:	6963      	ldr	r3, [r4, #20]
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
      
      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ));
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP));
 800293a:	f406 3640 	and.w	r6, r6, #196608	; 0x30000
      
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800293e:	fa03 f30c 	lsl.w	r3, r3, ip
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
      
      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ));
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP));
 8002942:	fa26 f60e 	lsr.w	r6, r6, lr
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
      
      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ));
 8002946:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP));
      
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800294a:	431a      	orrs	r2, r3
 800294c:	40be      	lsls	r6, r7
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
      
      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ));
 800294e:	40e9      	lsrs	r1, r5
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP));
      
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002950:	4b12      	ldr	r3, [pc, #72]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x620>)
 8002952:	4081      	lsls	r1, r0
 8002954:	4332      	orrs	r2, r6
 8002956:	430a      	orrs	r2, r1
 8002958:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800295c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002960:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002962:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8002966:	430a      	orrs	r2, r1
 8002968:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }    
#endif /* STM32F756xx || STM32F746xx */  

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800296c:	4b0b      	ldr	r3, [pc, #44]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x620>)
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002974:	601a      	str	r2, [r3, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002976:	f000 fdc9 	bl	800350c <HAL_GetTick>
 800297a:	4604      	mov	r4, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800297c:	4b07      	ldr	r3, [pc, #28]	; (800299c <HAL_RCCEx_PeriphCLKConfig+0x620>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	f140 809d 	bpl.w	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x744>
        /* return in case of Timeout detected */        
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8002986:	2000      	movs	r0, #0
 8002988:	e0a1      	b.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x752>
    tickstart = HAL_GetTick();

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800298a:	f000 fdbf 	bl	800350c <HAL_GetTick>
 800298e:	1b40      	subs	r0, r0, r5
 8002990:	2864      	cmp	r0, #100	; 0x64
 8002992:	d998      	bls.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x54a>
 8002994:	e552      	b.n	800243c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
    
    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/  
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002996:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002998:	b12a      	cbz	r2, 80029a6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
 800299a:	e79b      	b.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x558>
 800299c:	40023800 	.word	0x40023800
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80029a0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80029a2:	2a00      	cmp	r2, #0
 80029a4:	d198      	bne.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
    
      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP));
 80029a6:	4a4b      	ldr	r2, [pc, #300]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x758>)
 80029a8:	f44f 3c40 	mov.w	ip, #196608	; 0x30000
 80029ac:	f8d2 7088 	ldr.w	r7, [r2, #136]	; 0x88
 80029b0:	fa9c fcac 	rbit	ip, ip
 80029b4:	f04f 46e0 	mov.w	r6, #1879048192	; 0x70000000
 80029b8:	fabc fc8c 	clz	ip, ip
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR));
 80029bc:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
 80029c0:	fa96 f6a6 	rbit	r6, r6
 80029c4:	f647 78c0 	movw	r8, #32704	; 0x7fc0
 80029c8:	fab6 f686 	clz	r6, r6
 80029cc:	fa98 f8a8 	rbit	r8, r8
 80029d0:	f44f 3e40 	mov.w	lr, #196608	; 0x30000
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80029d4:	fab8 f888 	clz	r8, r8
 80029d8:	fa9e feae 	rbit	lr, lr
 80029dc:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
 80029e0:	fabe fe8e 	clz	lr, lr
 80029e4:	fa92 f2a2 	rbit	r2, r2
 80029e8:	f04f 45e0 	mov.w	r5, #1879048192	; 0x70000000
 80029ec:	fab2 f282 	clz	r2, r2
 80029f0:	fa95 f5a5 	rbit	r5, r5
 80029f4:	69a1      	ldr	r1, [r4, #24]
 80029f6:	4091      	lsls	r1, r2
 80029f8:	6962      	ldr	r2, [r4, #20]
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
    
      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP));
 80029fa:	f407 3740 	and.w	r7, r7, #196608	; 0x30000
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR));
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80029fe:	fa02 f208 	lsl.w	r2, r2, r8
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
    
      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP));
 8002a02:	fa27 f70c 	lsr.w	r7, r7, ip
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR));
 8002a06:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002a0a:	4311      	orrs	r1, r2
 8002a0c:	fab5 f585 	clz	r5, r5
 8002a10:	fa07 f70e 	lsl.w	r7, r7, lr
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
    
      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIP));
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR));
 8002a14:	40f0      	lsrs	r0, r6
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002a16:	4a2f      	ldr	r2, [pc, #188]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x758>)
 8002a18:	40a8      	lsls	r0, r5
 8002a1a:	4339      	orrs	r1, r7
 8002a1c:	4301      	orrs	r1, r0
 8002a1e:	f8c2 1088 	str.w	r1, [r2, #136]	; 0x88
      
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */ 
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002a22:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
 8002a26:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002a28:	f420 50f8 	bic.w	r0, r0, #7936	; 0x1f00
 8002a2c:	3901      	subs	r1, #1
 8002a2e:	ea40 2101 	orr.w	r1, r0, r1, lsl #8
 8002a32:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 8002a36:	e74f      	b.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    }           

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/   
    /* In Case of PLLI2S is selected as source clock for CK48 */ 
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002a38:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8002a3a:	f1b2 6f00 	cmp.w	r2, #134217728	; 0x8000000
 8002a3e:	f47f af4e 	bne.w	80028de <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ));
 8002a42:	4a24      	ldr	r2, [pc, #144]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x758>)
 8002a44:	f04f 6c70 	mov.w	ip, #251658240	; 0xf000000
 8002a48:	f8d2 7088 	ldr.w	r7, [r2, #136]	; 0x88
 8002a4c:	fa9c fcac 	rbit	ip, ip
 8002a50:	f04f 46e0 	mov.w	r6, #1879048192	; 0x70000000
 8002a54:	fabc fc8c 	clz	ip, ip
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR));
 8002a58:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
 8002a5c:	fa96 f6a6 	rbit	r6, r6
 8002a60:	f647 78c0 	movw	r8, #32704	; 0x7fc0
 8002a64:	fab6 f686 	clz	r6, r6
 8002a68:	fa98 f8a8 	rbit	r8, r8
 8002a6c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
      
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002a70:	fab8 f888 	clz	r8, r8
 8002a74:	fa92 f2a2 	rbit	r2, r2
 8002a78:	f04f 6e70 	mov.w	lr, #251658240	; 0xf000000
 8002a7c:	fab2 f282 	clz	r2, r2
 8002a80:	fa9e feae 	rbit	lr, lr
 8002a84:	f04f 45e0 	mov.w	r5, #1879048192	; 0x70000000
 8002a88:	fabe fe8e 	clz	lr, lr
 8002a8c:	fa95 f5a5 	rbit	r5, r5
 8002a90:	6a21      	ldr	r1, [r4, #32]
 8002a92:	4091      	lsls	r1, r2
 8002a94:	6962      	ldr	r2, [r4, #20]
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ));
 8002a96:	f007 6770 	and.w	r7, r7, #251658240	; 0xf000000
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR));
      
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002a9a:	fa02 f208 	lsl.w	r2, r2, r8
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ));
 8002a9e:	fa27 f70c 	lsr.w	r7, r7, ip
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR));
 8002aa2:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
      
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002aa6:	fab5 f585 	clz	r5, r5
 8002aaa:	430a      	orrs	r2, r1
 8002aac:	fa07 f70e 	lsl.w	r7, r7, lr
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIQ));
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> POSITION_VAL(RCC_PLLSAICFGR_PLLSAIR));
 8002ab0:	40f0      	lsrs	r0, r6
      
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002ab2:	40a8      	lsls	r0, r5
 8002ab4:	433a      	orrs	r2, r7
 8002ab6:	4302      	orrs	r2, r0
 8002ab8:	4806      	ldr	r0, [pc, #24]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x758>)
 8002aba:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
 8002abe:	e70e      	b.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x562>
    tickstart = HAL_GetTick();

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002ac0:	f000 fd24 	bl	800350c <HAL_GetTick>
 8002ac4:	1b00      	subs	r0, r0, r4
 8002ac6:	2864      	cmp	r0, #100	; 0x64
 8002ac8:	f67f af58 	bls.w	800297c <HAL_RCCEx_PeriphCLKConfig+0x600>
 8002acc:	e4b6      	b.n	800243c <HAL_RCCEx_PeriphCLKConfig+0xc0>
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
}
 8002ace:	b003      	add	sp, #12
 8002ad0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002ad4:	40023800 	.word	0x40023800

08002ad8 <HAL_RCC_OscConfig>:
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ad8:	6803      	ldr	r3, [r0, #0]
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ada:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002adc:	4604      	mov	r4, r0
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ade:	07d8      	lsls	r0, r3, #31
 8002ae0:	d403      	bmi.n	8002aea <HAL_RCC_OscConfig+0x12>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ae2:	6823      	ldr	r3, [r4, #0]
 8002ae4:	0799      	lsls	r1, r3, #30
 8002ae6:	d46d      	bmi.n	8002bc4 <HAL_RCC_OscConfig+0xec>
 8002ae8:	e0b4      	b.n	8002c54 <HAL_RCC_OscConfig+0x17c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002aea:	4b9d      	ldr	r3, [pc, #628]	; (8002d60 <HAL_RCC_OscConfig+0x288>)
 8002aec:	689a      	ldr	r2, [r3, #8]
 8002aee:	f002 020c 	and.w	r2, r2, #12
 8002af2:	2a04      	cmp	r2, #4
 8002af4:	d007      	beq.n	8002b06 <HAL_RCC_OscConfig+0x2e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002af6:	689a      	ldr	r2, [r3, #8]
 8002af8:	f002 020c 	and.w	r2, r2, #12
 8002afc:	2a08      	cmp	r2, #8
 8002afe:	d10b      	bne.n	8002b18 <HAL_RCC_OscConfig+0x40>
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	025a      	lsls	r2, r3, #9
 8002b04:	d508      	bpl.n	8002b18 <HAL_RCC_OscConfig+0x40>
    {
	  if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b06:	4b96      	ldr	r3, [pc, #600]	; (8002d60 <HAL_RCC_OscConfig+0x288>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	039b      	lsls	r3, r3, #14
 8002b0c:	d5e9      	bpl.n	8002ae2 <HAL_RCC_OscConfig+0xa>
 8002b0e:	6863      	ldr	r3, [r4, #4]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d1e6      	bne.n	8002ae2 <HAL_RCC_OscConfig+0xa>
      {
        return HAL_ERROR;
 8002b14:	2001      	movs	r0, #1
 8002b16:	e1a6      	b.n	8002e66 <HAL_RCC_OscConfig+0x38e>
      }
    }
    else
    {
      /* Reset HSEON and HSEBYP bits before configuring the HSE --------------*/
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 8002b18:	4b91      	ldr	r3, [pc, #580]	; (8002d60 <HAL_RCC_OscConfig+0x288>)
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002b20:	601a      	str	r2, [r3, #0]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002b28:	601a      	str	r2, [r3, #0]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002b30:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b32:	f000 fceb 	bl	800350c <HAL_GetTick>
 8002b36:	4605      	mov	r5, r0
      
      /* Wait till HSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b38:	4b89      	ldr	r3, [pc, #548]	; (8002d60 <HAL_RCC_OscConfig+0x288>)
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	0397      	lsls	r7, r2, #14
 8002b3e:	d506      	bpl.n	8002b4e <HAL_RCC_OscConfig+0x76>
      {
        if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b40:	f000 fce4 	bl	800350c <HAL_GetTick>
 8002b44:	1b40      	subs	r0, r0, r5
 8002b46:	2864      	cmp	r0, #100	; 0x64
 8002b48:	d9f6      	bls.n	8002b38 <HAL_RCC_OscConfig+0x60>
        {
          return HAL_TIMEOUT;
 8002b4a:	2003      	movs	r0, #3
 8002b4c:	e18b      	b.n	8002e66 <HAL_RCC_OscConfig+0x38e>
        }
      }
      
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002b54:	601a      	str	r2, [r3, #0]
 8002b56:	6862      	ldr	r2, [r4, #4]
 8002b58:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8002b5c:	d103      	bne.n	8002b66 <HAL_RCC_OscConfig+0x8e>
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002b64:	e005      	b.n	8002b72 <HAL_RCC_OscConfig+0x9a>
 8002b66:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8002b6a:	d108      	bne.n	8002b7e <HAL_RCC_OscConfig+0xa6>
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002b72:	601a      	str	r2, [r3, #0]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002b7a:	601a      	str	r2, [r3, #0]
 8002b7c:	e008      	b.n	8002b90 <HAL_RCC_OscConfig+0xb8>
 8002b7e:	6819      	ldr	r1, [r3, #0]
 8002b80:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8002b84:	6019      	str	r1, [r3, #0]
 8002b86:	6819      	ldr	r1, [r3, #0]
 8002b88:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8002b8c:	6019      	str	r1, [r3, #0]
      
      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b8e:	b162      	cbz	r2, 8002baa <HAL_RCC_OscConfig+0xd2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b90:	f000 fcbc 	bl	800350c <HAL_GetTick>
 8002b94:	4605      	mov	r5, r0
        
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b96:	4b72      	ldr	r3, [pc, #456]	; (8002d60 <HAL_RCC_OscConfig+0x288>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	039e      	lsls	r6, r3, #14
 8002b9c:	d4a1      	bmi.n	8002ae2 <HAL_RCC_OscConfig+0xa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b9e:	f000 fcb5 	bl	800350c <HAL_GetTick>
 8002ba2:	1b40      	subs	r0, r0, r5
 8002ba4:	2864      	cmp	r0, #100	; 0x64
 8002ba6:	d9f6      	bls.n	8002b96 <HAL_RCC_OscConfig+0xbe>
 8002ba8:	e7cf      	b.n	8002b4a <HAL_RCC_OscConfig+0x72>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002baa:	f000 fcaf 	bl	800350c <HAL_GetTick>
 8002bae:	4605      	mov	r5, r0
        
        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bb0:	4b6b      	ldr	r3, [pc, #428]	; (8002d60 <HAL_RCC_OscConfig+0x288>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	0398      	lsls	r0, r3, #14
 8002bb6:	d594      	bpl.n	8002ae2 <HAL_RCC_OscConfig+0xa>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bb8:	f000 fca8 	bl	800350c <HAL_GetTick>
 8002bbc:	1b40      	subs	r0, r0, r5
 8002bbe:	2864      	cmp	r0, #100	; 0x64
 8002bc0:	d9f6      	bls.n	8002bb0 <HAL_RCC_OscConfig+0xd8>
 8002bc2:	e7c2      	b.n	8002b4a <HAL_RCC_OscConfig+0x72>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002bc4:	4b66      	ldr	r3, [pc, #408]	; (8002d60 <HAL_RCC_OscConfig+0x288>)
 8002bc6:	689a      	ldr	r2, [r3, #8]
 8002bc8:	f012 0f0c 	tst.w	r2, #12
 8002bcc:	d007      	beq.n	8002bde <HAL_RCC_OscConfig+0x106>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bce:	689a      	ldr	r2, [r3, #8]
 8002bd0:	f002 020c 	and.w	r2, r2, #12
 8002bd4:	2a08      	cmp	r2, #8
 8002bd6:	d10a      	bne.n	8002bee <HAL_RCC_OscConfig+0x116>
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	0259      	lsls	r1, r3, #9
 8002bdc:	d407      	bmi.n	8002bee <HAL_RCC_OscConfig+0x116>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bde:	4b60      	ldr	r3, [pc, #384]	; (8002d60 <HAL_RCC_OscConfig+0x288>)
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	0792      	lsls	r2, r2, #30
 8002be4:	d517      	bpl.n	8002c16 <HAL_RCC_OscConfig+0x13e>
 8002be6:	68e2      	ldr	r2, [r4, #12]
 8002be8:	2a01      	cmp	r2, #1
 8002bea:	d193      	bne.n	8002b14 <HAL_RCC_OscConfig+0x3c>
 8002bec:	e013      	b.n	8002c16 <HAL_RCC_OscConfig+0x13e>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002bee:	68e2      	ldr	r2, [r4, #12]
 8002bf0:	4b5b      	ldr	r3, [pc, #364]	; (8002d60 <HAL_RCC_OscConfig+0x288>)
 8002bf2:	b1f2      	cbz	r2, 8002c32 <HAL_RCC_OscConfig+0x15a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	f042 0201 	orr.w	r2, r2, #1
 8002bfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bfc:	f000 fc86 	bl	800350c <HAL_GetTick>
 8002c00:	4605      	mov	r5, r0

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c02:	4b57      	ldr	r3, [pc, #348]	; (8002d60 <HAL_RCC_OscConfig+0x288>)
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	0797      	lsls	r7, r2, #30
 8002c08:	d405      	bmi.n	8002c16 <HAL_RCC_OscConfig+0x13e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c0a:	f000 fc7f 	bl	800350c <HAL_GetTick>
 8002c0e:	1b40      	subs	r0, r0, r5
 8002c10:	2864      	cmp	r0, #100	; 0x64
 8002c12:	d9f6      	bls.n	8002c02 <HAL_RCC_OscConfig+0x12a>
 8002c14:	e799      	b.n	8002b4a <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	21f8      	movs	r1, #248	; 0xf8
 8002c1a:	fa91 f1a1 	rbit	r1, r1
 8002c1e:	6923      	ldr	r3, [r4, #16]
 8002c20:	fab1 f181 	clz	r1, r1
 8002c24:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8002c28:	408b      	lsls	r3, r1
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	4a4c      	ldr	r2, [pc, #304]	; (8002d60 <HAL_RCC_OscConfig+0x288>)
 8002c2e:	6013      	str	r3, [r2, #0]
 8002c30:	e010      	b.n	8002c54 <HAL_RCC_OscConfig+0x17c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	f022 0201 	bic.w	r2, r2, #1
 8002c38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c3a:	f000 fc67 	bl	800350c <HAL_GetTick>
 8002c3e:	4605      	mov	r5, r0
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c40:	4b47      	ldr	r3, [pc, #284]	; (8002d60 <HAL_RCC_OscConfig+0x288>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	079e      	lsls	r6, r3, #30
 8002c46:	d505      	bpl.n	8002c54 <HAL_RCC_OscConfig+0x17c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c48:	f000 fc60 	bl	800350c <HAL_GetTick>
 8002c4c:	1b40      	subs	r0, r0, r5
 8002c4e:	2864      	cmp	r0, #100	; 0x64
 8002c50:	d9f6      	bls.n	8002c40 <HAL_RCC_OscConfig+0x168>
 8002c52:	e77a      	b.n	8002b4a <HAL_RCC_OscConfig+0x72>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c54:	6823      	ldr	r3, [r4, #0]
 8002c56:	071d      	lsls	r5, r3, #28
 8002c58:	d403      	bmi.n	8002c62 <HAL_RCC_OscConfig+0x18a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c5a:	6823      	ldr	r3, [r4, #0]
 8002c5c:	0758      	lsls	r0, r3, #29
 8002c5e:	d567      	bpl.n	8002d30 <HAL_RCC_OscConfig+0x258>
 8002c60:	e024      	b.n	8002cac <HAL_RCC_OscConfig+0x1d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c62:	6962      	ldr	r2, [r4, #20]
 8002c64:	4b3e      	ldr	r3, [pc, #248]	; (8002d60 <HAL_RCC_OscConfig+0x288>)
 8002c66:	b182      	cbz	r2, 8002c8a <HAL_RCC_OscConfig+0x1b2>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c68:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8002c6a:	f042 0201 	orr.w	r2, r2, #1
 8002c6e:	675a      	str	r2, [r3, #116]	; 0x74
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c70:	f000 fc4c 	bl	800350c <HAL_GetTick>
 8002c74:	4605      	mov	r5, r0
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c76:	4b3a      	ldr	r3, [pc, #232]	; (8002d60 <HAL_RCC_OscConfig+0x288>)
 8002c78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c7a:	0799      	lsls	r1, r3, #30
 8002c7c:	d4ed      	bmi.n	8002c5a <HAL_RCC_OscConfig+0x182>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c7e:	f000 fc45 	bl	800350c <HAL_GetTick>
 8002c82:	1b40      	subs	r0, r0, r5
 8002c84:	2864      	cmp	r0, #100	; 0x64
 8002c86:	d9f6      	bls.n	8002c76 <HAL_RCC_OscConfig+0x19e>
 8002c88:	e75f      	b.n	8002b4a <HAL_RCC_OscConfig+0x72>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c8a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8002c8c:	f022 0201 	bic.w	r2, r2, #1
 8002c90:	675a      	str	r2, [r3, #116]	; 0x74
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c92:	f000 fc3b 	bl	800350c <HAL_GetTick>
 8002c96:	4605      	mov	r5, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c98:	4b31      	ldr	r3, [pc, #196]	; (8002d60 <HAL_RCC_OscConfig+0x288>)
 8002c9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c9c:	079a      	lsls	r2, r3, #30
 8002c9e:	d5dc      	bpl.n	8002c5a <HAL_RCC_OscConfig+0x182>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ca0:	f000 fc34 	bl	800350c <HAL_GetTick>
 8002ca4:	1b40      	subs	r0, r0, r5
 8002ca6:	2864      	cmp	r0, #100	; 0x64
 8002ca8:	d9f6      	bls.n	8002c98 <HAL_RCC_OscConfig+0x1c0>
 8002caa:	e74e      	b.n	8002b4a <HAL_RCC_OscConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002cac:	2300      	movs	r3, #0
 8002cae:	9301      	str	r3, [sp, #4]
 8002cb0:	4b2b      	ldr	r3, [pc, #172]	; (8002d60 <HAL_RCC_OscConfig+0x288>)
 8002cb2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cb4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002cb8:	641a      	str	r2, [r3, #64]	; 0x40
 8002cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cc0:	9301      	str	r3, [sp, #4]
 8002cc2:	9b01      	ldr	r3, [sp, #4]
    
    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002cc4:	4b27      	ldr	r3, [pc, #156]	; (8002d64 <HAL_RCC_OscConfig+0x28c>)
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ccc:	601a      	str	r2, [r3, #0]
    
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002cce:	f000 fc1d 	bl	800350c <HAL_GetTick>
 8002cd2:	4605      	mov	r5, r0
    
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002cd4:	4b23      	ldr	r3, [pc, #140]	; (8002d64 <HAL_RCC_OscConfig+0x28c>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	05db      	lsls	r3, r3, #23
 8002cda:	d52d      	bpl.n	8002d38 <HAL_RCC_OscConfig+0x260>
        return HAL_TIMEOUT;
      }      
    }
    
    /* Reset LSEON and LSEBYP bits before configuring the LSE ----------------*/
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 8002cdc:	4b20      	ldr	r3, [pc, #128]	; (8002d60 <HAL_RCC_OscConfig+0x288>)
 8002cde:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002ce0:	f022 0201 	bic.w	r2, r2, #1
 8002ce4:	671a      	str	r2, [r3, #112]	; 0x70
 8002ce6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002ce8:	f022 0204 	bic.w	r2, r2, #4
 8002cec:	671a      	str	r2, [r3, #112]	; 0x70
 8002cee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002cf0:	f022 0201 	bic.w	r2, r2, #1
 8002cf4:	671a      	str	r2, [r3, #112]	; 0x70
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cf6:	f000 fc09 	bl	800350c <HAL_GetTick>
 8002cfa:	4605      	mov	r5, r0
    
    /* Wait till LSE is ready */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cfc:	4b18      	ldr	r3, [pc, #96]	; (8002d60 <HAL_RCC_OscConfig+0x288>)
 8002cfe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002d00:	0797      	lsls	r7, r2, #30
 8002d02:	d41f      	bmi.n	8002d44 <HAL_RCC_OscConfig+0x26c>
        return HAL_TIMEOUT;
      }    
    } 
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d04:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002d06:	f022 0201 	bic.w	r2, r2, #1
 8002d0a:	671a      	str	r2, [r3, #112]	; 0x70
 8002d0c:	68a2      	ldr	r2, [r4, #8]
 8002d0e:	2a01      	cmp	r2, #1
 8002d10:	d120      	bne.n	8002d54 <HAL_RCC_OscConfig+0x27c>
 8002d12:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002d14:	f022 0204 	bic.w	r2, r2, #4
 8002d18:	671a      	str	r2, [r3, #112]	; 0x70
 8002d1a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002d1c:	f042 0201 	orr.w	r2, r2, #1
 8002d20:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d22:	f000 fbf3 	bl	800350c <HAL_GetTick>
 8002d26:	4605      	mov	r5, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d28:	4b0d      	ldr	r3, [pc, #52]	; (8002d60 <HAL_RCC_OscConfig+0x288>)
 8002d2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d2c:	079e      	lsls	r6, r3, #30
 8002d2e:	d525      	bpl.n	8002d7c <HAL_RCC_OscConfig+0x2a4>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d30:	69a2      	ldr	r2, [r4, #24]
 8002d32:	2a00      	cmp	r2, #0
 8002d34:	d139      	bne.n	8002daa <HAL_RCC_OscConfig+0x2d2>
 8002d36:	e07b      	b.n	8002e30 <HAL_RCC_OscConfig+0x358>
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
    
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002d38:	f000 fbe8 	bl	800350c <HAL_GetTick>
 8002d3c:	1b40      	subs	r0, r0, r5
 8002d3e:	2864      	cmp	r0, #100	; 0x64
 8002d40:	d9c8      	bls.n	8002cd4 <HAL_RCC_OscConfig+0x1fc>
 8002d42:	e702      	b.n	8002b4a <HAL_RCC_OscConfig+0x72>
    tickstart = HAL_GetTick();
    
    /* Wait till LSE is ready */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
    {
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d44:	f000 fbe2 	bl	800350c <HAL_GetTick>
 8002d48:	f241 3388 	movw	r3, #5000	; 0x1388
 8002d4c:	1b40      	subs	r0, r0, r5
 8002d4e:	4298      	cmp	r0, r3
 8002d50:	d9d4      	bls.n	8002cfc <HAL_RCC_OscConfig+0x224>
 8002d52:	e6fa      	b.n	8002b4a <HAL_RCC_OscConfig+0x72>
        return HAL_TIMEOUT;
      }    
    } 
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d54:	2a05      	cmp	r2, #5
 8002d56:	d107      	bne.n	8002d68 <HAL_RCC_OscConfig+0x290>
 8002d58:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002d5a:	f042 0204 	orr.w	r2, r2, #4
 8002d5e:	e7db      	b.n	8002d18 <HAL_RCC_OscConfig+0x240>
 8002d60:	40023800 	.word	0x40023800
 8002d64:	40007000 	.word	0x40007000
 8002d68:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8002d6a:	f021 0104 	bic.w	r1, r1, #4
 8002d6e:	6719      	str	r1, [r3, #112]	; 0x70
 8002d70:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8002d72:	f021 0101 	bic.w	r1, r1, #1
 8002d76:	6719      	str	r1, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d78:	b142      	cbz	r2, 8002d8c <HAL_RCC_OscConfig+0x2b4>
 8002d7a:	e7d2      	b.n	8002d22 <HAL_RCC_OscConfig+0x24a>
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d7c:	f000 fbc6 	bl	800350c <HAL_GetTick>
 8002d80:	f241 3388 	movw	r3, #5000	; 0x1388
 8002d84:	1b40      	subs	r0, r0, r5
 8002d86:	4298      	cmp	r0, r3
 8002d88:	d9ce      	bls.n	8002d28 <HAL_RCC_OscConfig+0x250>
 8002d8a:	e6de      	b.n	8002b4a <HAL_RCC_OscConfig+0x72>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d8c:	f000 fbbe 	bl	800350c <HAL_GetTick>
 8002d90:	4605      	mov	r5, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d92:	4b36      	ldr	r3, [pc, #216]	; (8002e6c <HAL_RCC_OscConfig+0x394>)
 8002d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d96:	0798      	lsls	r0, r3, #30
 8002d98:	d5ca      	bpl.n	8002d30 <HAL_RCC_OscConfig+0x258>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d9a:	f000 fbb7 	bl	800350c <HAL_GetTick>
 8002d9e:	f241 3388 	movw	r3, #5000	; 0x1388
 8002da2:	1b40      	subs	r0, r0, r5
 8002da4:	4298      	cmp	r0, r3
 8002da6:	d9f4      	bls.n	8002d92 <HAL_RCC_OscConfig+0x2ba>
 8002da8:	e6cf      	b.n	8002b4a <HAL_RCC_OscConfig+0x72>
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002daa:	4b30      	ldr	r3, [pc, #192]	; (8002e6c <HAL_RCC_OscConfig+0x394>)
 8002dac:	6899      	ldr	r1, [r3, #8]
 8002dae:	f001 010c 	and.w	r1, r1, #12
 8002db2:	2908      	cmp	r1, #8
 8002db4:	f43f aeae 	beq.w	8002b14 <HAL_RCC_OscConfig+0x3c>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002db8:	2a02      	cmp	r2, #2
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8002dc0:	601a      	str	r2, [r3, #0]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dc2:	d143      	bne.n	8002e4c <HAL_RCC_OscConfig+0x374>
        
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc4:	f000 fba2 	bl	800350c <HAL_GetTick>
 8002dc8:	4605      	mov	r5, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dca:	4b28      	ldr	r3, [pc, #160]	; (8002e6c <HAL_RCC_OscConfig+0x394>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	0199      	lsls	r1, r3, #6
 8002dd0:	d430      	bmi.n	8002e34 <HAL_RCC_OscConfig+0x35c>
 8002dd2:	f647 77c0 	movw	r7, #32704	; 0x7fc0
 8002dd6:	fa97 f7a7 	rbit	r7, r7
 8002dda:	f44f 3640 	mov.w	r6, #196608	; 0x30000
            return HAL_TIMEOUT;
          }
        }
        
        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002dde:	fab7 f787 	clz	r7, r7
 8002de2:	fa96 f6a6 	rbit	r6, r6
 8002de6:	f04f 6570 	mov.w	r5, #251658240	; 0xf000000
 8002dea:	fab6 f686 	clz	r6, r6
 8002dee:	fa95 f5a5 	rbit	r5, r5
 8002df2:	6a20      	ldr	r0, [r4, #32]
 8002df4:	69e1      	ldr	r1, [r4, #28]
 8002df6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002df8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002dfa:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
 8002dfc:	4301      	orrs	r1, r0
 8002dfe:	085b      	lsrs	r3, r3, #1
 8002e00:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8002e04:	40ba      	lsls	r2, r7
 8002e06:	3b01      	subs	r3, #1
 8002e08:	430a      	orrs	r2, r1
 8002e0a:	40b3      	lsls	r3, r6
 8002e0c:	fab5 f585 	clz	r5, r5
 8002e10:	431a      	orrs	r2, r3
 8002e12:	40ac      	lsls	r4, r5
 8002e14:	4b15      	ldr	r3, [pc, #84]	; (8002e6c <HAL_RCC_OscConfig+0x394>)
 8002e16:	4322      	orrs	r2, r4
 8002e18:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PLLM,
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8002e20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e22:	f000 fb73 	bl	800350c <HAL_GetTick>
 8002e26:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e28:	4b10      	ldr	r3, [pc, #64]	; (8002e6c <HAL_RCC_OscConfig+0x394>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	019a      	lsls	r2, r3, #6
 8002e2e:	d507      	bpl.n	8002e40 <HAL_RCC_OscConfig+0x368>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8002e30:	2000      	movs	r0, #0
 8002e32:	e018      	b.n	8002e66 <HAL_RCC_OscConfig+0x38e>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e34:	f000 fb6a 	bl	800350c <HAL_GetTick>
 8002e38:	1b40      	subs	r0, r0, r5
 8002e3a:	2864      	cmp	r0, #100	; 0x64
 8002e3c:	d9c5      	bls.n	8002dca <HAL_RCC_OscConfig+0x2f2>
 8002e3e:	e684      	b.n	8002b4a <HAL_RCC_OscConfig+0x72>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e40:	f000 fb64 	bl	800350c <HAL_GetTick>
 8002e44:	1b00      	subs	r0, r0, r4
 8002e46:	2864      	cmp	r0, #100	; 0x64
 8002e48:	d9ee      	bls.n	8002e28 <HAL_RCC_OscConfig+0x350>
 8002e4a:	e67e      	b.n	8002b4a <HAL_RCC_OscConfig+0x72>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e4c:	f000 fb5e 	bl	800350c <HAL_GetTick>
 8002e50:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e52:	4b06      	ldr	r3, [pc, #24]	; (8002e6c <HAL_RCC_OscConfig+0x394>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	019b      	lsls	r3, r3, #6
 8002e58:	d5ea      	bpl.n	8002e30 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e5a:	f000 fb57 	bl	800350c <HAL_GetTick>
 8002e5e:	1b00      	subs	r0, r0, r4
 8002e60:	2864      	cmp	r0, #100	; 0x64
 8002e62:	d9f6      	bls.n	8002e52 <HAL_RCC_OscConfig+0x37a>
 8002e64:	e671      	b.n	8002b4a <HAL_RCC_OscConfig+0x72>
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8002e66:	b003      	add	sp, #12
 8002e68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	40023800 	.word	0x40023800

08002e70 <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
     must be correctly programmed according to the frequency of the CPU clock 
     (HCLK) and the supply voltage of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002e70:	4b71      	ldr	r3, [pc, #452]	; (8003038 <HAL_RCC_ClockConfig+0x1c8>)
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	f002 020f 	and.w	r2, r2, #15
 8002e78:	4291      	cmp	r1, r2
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e7a:	b570      	push	{r4, r5, r6, lr}
 8002e7c:	4604      	mov	r4, r0
 8002e7e:	460d      	mov	r5, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
     must be correctly programmed according to the frequency of the CPU clock 
     (HCLK) and the supply voltage of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002e80:	d96b      	bls.n	8002f5a <HAL_RCC_ClockConfig+0xea>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	f022 020f 	bic.w	r2, r2, #15
 8002e88:	430a      	orrs	r2, r1
 8002e8a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 030f 	and.w	r3, r3, #15
 8002e92:	428b      	cmp	r3, r1
 8002e94:	d001      	beq.n	8002e9a <HAL_RCC_ClockConfig+0x2a>
    {
      return HAL_ERROR;
 8002e96:	2001      	movs	r0, #1
 8002e98:	bd70      	pop	{r4, r5, r6, pc}
    }

    /*-------------------------- HCLK Configuration --------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e9a:	6803      	ldr	r3, [r0, #0]
 8002e9c:	079e      	lsls	r6, r3, #30
 8002e9e:	d506      	bpl.n	8002eae <HAL_RCC_ClockConfig+0x3e>
    {
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ea0:	4a66      	ldr	r2, [pc, #408]	; (800303c <HAL_RCC_ClockConfig+0x1cc>)
 8002ea2:	68a1      	ldr	r1, [r4, #8]
 8002ea4:	6890      	ldr	r0, [r2, #8]
 8002ea6:	f020 00f0 	bic.w	r0, r0, #240	; 0xf0
 8002eaa:	4301      	orrs	r1, r0
 8002eac:	6091      	str	r1, [r2, #8]
    }

    /*------------------------- SYSCLK Configuration ---------------------------*/ 
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002eae:	07dd      	lsls	r5, r3, #31
 8002eb0:	d40b      	bmi.n	8002eca <HAL_RCC_ClockConfig+0x5a>
      return HAL_ERROR;
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eb2:	6823      	ldr	r3, [r4, #0]
 8002eb4:	0758      	lsls	r0, r3, #29
 8002eb6:	f140 80b0 	bpl.w	800301a <HAL_RCC_ClockConfig+0x1aa>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002eba:	4a60      	ldr	r2, [pc, #384]	; (800303c <HAL_RCC_ClockConfig+0x1cc>)
 8002ebc:	68e1      	ldr	r1, [r4, #12]
 8002ebe:	6890      	ldr	r0, [r2, #8]
 8002ec0:	f420 50e0 	bic.w	r0, r0, #7168	; 0x1c00
 8002ec4:	4301      	orrs	r1, r0
 8002ec6:	6091      	str	r1, [r2, #8]
 8002ec8:	e0a7      	b.n	800301a <HAL_RCC_ClockConfig+0x1aa>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002eca:	6862      	ldr	r2, [r4, #4]
 8002ecc:	4b5b      	ldr	r3, [pc, #364]	; (800303c <HAL_RCC_ClockConfig+0x1cc>)
 8002ece:	2a01      	cmp	r2, #1
      {
        /* Check the HSE ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ed0:	6819      	ldr	r1, [r3, #0]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ed2:	d102      	bne.n	8002eda <HAL_RCC_ClockConfig+0x6a>
      {
        /* Check the HSE ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ed4:	f411 3f00 	tst.w	r1, #131072	; 0x20000
 8002ed8:	e006      	b.n	8002ee8 <HAL_RCC_ClockConfig+0x78>
        {
          return HAL_ERROR;
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002eda:	2a02      	cmp	r2, #2
 8002edc:	d102      	bne.n	8002ee4 <HAL_RCC_ClockConfig+0x74>
      {
        /* Check the PLL ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ede:	f011 7f00 	tst.w	r1, #33554432	; 0x2000000
 8002ee2:	e001      	b.n	8002ee8 <HAL_RCC_ClockConfig+0x78>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ee4:	f011 0f02 	tst.w	r1, #2
 8002ee8:	d0d5      	beq.n	8002e96 <HAL_RCC_ClockConfig+0x26>
        {
          return HAL_ERROR;
        }
      }

      __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002eea:	6899      	ldr	r1, [r3, #8]
 8002eec:	f021 0103 	bic.w	r1, r1, #3
 8002ef0:	430a      	orrs	r2, r1
 8002ef2:	609a      	str	r2, [r3, #8]
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ef4:	f000 fb0a 	bl	800350c <HAL_GetTick>
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ef8:	6863      	ldr	r3, [r4, #4]
 8002efa:	2b01      	cmp	r3, #1
        }
      }

      __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002efc:	4605      	mov	r5, r0
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002efe:	d10e      	bne.n	8002f1e <HAL_RCC_ClockConfig+0xae>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f00:	4b4e      	ldr	r3, [pc, #312]	; (800303c <HAL_RCC_ClockConfig+0x1cc>)
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	f003 030c 	and.w	r3, r3, #12
 8002f08:	2b04      	cmp	r3, #4
 8002f0a:	d0d2      	beq.n	8002eb2 <HAL_RCC_ClockConfig+0x42>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f0c:	f000 fafe 	bl	800350c <HAL_GetTick>
 8002f10:	f241 3388 	movw	r3, #5000	; 0x1388
 8002f14:	1b40      	subs	r0, r0, r5
 8002f16:	4298      	cmp	r0, r3
 8002f18:	d9f2      	bls.n	8002f00 <HAL_RCC_ClockConfig+0x90>
          {
            return HAL_TIMEOUT;
 8002f1a:	2003      	movs	r0, #3
 8002f1c:	bd70      	pop	{r4, r5, r6, pc}
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d00c      	beq.n	8002f3c <HAL_RCC_ClockConfig+0xcc>
          }
        }
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f22:	4b46      	ldr	r3, [pc, #280]	; (800303c <HAL_RCC_ClockConfig+0x1cc>)
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	f013 0f0c 	tst.w	r3, #12
 8002f2a:	d10e      	bne.n	8002f4a <HAL_RCC_ClockConfig+0xda>
 8002f2c:	e7c1      	b.n	8002eb2 <HAL_RCC_ClockConfig+0x42>
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f2e:	f000 faed 	bl	800350c <HAL_GetTick>
 8002f32:	f241 3388 	movw	r3, #5000	; 0x1388
 8002f36:	1b40      	subs	r0, r0, r5
 8002f38:	4298      	cmp	r0, r3
 8002f3a:	d8ee      	bhi.n	8002f1a <HAL_RCC_ClockConfig+0xaa>
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f3c:	4b3f      	ldr	r3, [pc, #252]	; (800303c <HAL_RCC_ClockConfig+0x1cc>)
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	f003 030c 	and.w	r3, r3, #12
 8002f44:	2b08      	cmp	r3, #8
 8002f46:	d1f2      	bne.n	8002f2e <HAL_RCC_ClockConfig+0xbe>
 8002f48:	e7b3      	b.n	8002eb2 <HAL_RCC_ClockConfig+0x42>
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f4a:	f000 fadf 	bl	800350c <HAL_GetTick>
 8002f4e:	f241 3388 	movw	r3, #5000	; 0x1388
 8002f52:	1b40      	subs	r0, r0, r5
 8002f54:	4298      	cmp	r0, r3
 8002f56:	d9e4      	bls.n	8002f22 <HAL_RCC_ClockConfig+0xb2>
 8002f58:	e7df      	b.n	8002f1a <HAL_RCC_ClockConfig+0xaa>
  }
  /* Decreasing the CPU frequency */
  else
  {
    /*-------------------------- HCLK Configuration --------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f5a:	6803      	ldr	r3, [r0, #0]
 8002f5c:	0799      	lsls	r1, r3, #30
 8002f5e:	d506      	bpl.n	8002f6e <HAL_RCC_ClockConfig+0xfe>
    {
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f60:	4a36      	ldr	r2, [pc, #216]	; (800303c <HAL_RCC_ClockConfig+0x1cc>)
 8002f62:	68a1      	ldr	r1, [r4, #8]
 8002f64:	6890      	ldr	r0, [r2, #8]
 8002f66:	f020 00f0 	bic.w	r0, r0, #240	; 0xf0
 8002f6a:	4301      	orrs	r1, r0
 8002f6c:	6091      	str	r1, [r2, #8]
    }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f6e:	07da      	lsls	r2, r3, #31
 8002f70:	d40b      	bmi.n	8002f8a <HAL_RCC_ClockConfig+0x11a>
        }
      }
    }
    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f72:	4b31      	ldr	r3, [pc, #196]	; (8003038 <HAL_RCC_ClockConfig+0x1c8>)
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	f022 020f 	bic.w	r2, r2, #15
 8002f7a:	432a      	orrs	r2, r5
 8002f7c:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 030f 	and.w	r3, r3, #15
 8002f84:	42ab      	cmp	r3, r5
 8002f86:	d186      	bne.n	8002e96 <HAL_RCC_ClockConfig+0x26>
 8002f88:	e793      	b.n	8002eb2 <HAL_RCC_ClockConfig+0x42>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f8a:	6862      	ldr	r2, [r4, #4]
 8002f8c:	4b2b      	ldr	r3, [pc, #172]	; (800303c <HAL_RCC_ClockConfig+0x1cc>)
 8002f8e:	2a01      	cmp	r2, #1
      {
        /* Check the HSE ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f90:	6819      	ldr	r1, [r3, #0]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f92:	d102      	bne.n	8002f9a <HAL_RCC_ClockConfig+0x12a>
      {
        /* Check the HSE ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f94:	f411 3f00 	tst.w	r1, #131072	; 0x20000
 8002f98:	e006      	b.n	8002fa8 <HAL_RCC_ClockConfig+0x138>
        {
          return HAL_ERROR;
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f9a:	2a02      	cmp	r2, #2
 8002f9c:	d102      	bne.n	8002fa4 <HAL_RCC_ClockConfig+0x134>
      {
        /* Check the PLL ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f9e:	f011 7f00 	tst.w	r1, #33554432	; 0x2000000
 8002fa2:	e001      	b.n	8002fa8 <HAL_RCC_ClockConfig+0x138>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fa4:	f011 0f02 	tst.w	r1, #2
 8002fa8:	f43f af75 	beq.w	8002e96 <HAL_RCC_ClockConfig+0x26>
        {
          return HAL_ERROR;
        }
      }
      __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fac:	6899      	ldr	r1, [r3, #8]
 8002fae:	f021 0103 	bic.w	r1, r1, #3
 8002fb2:	430a      	orrs	r2, r1
 8002fb4:	609a      	str	r2, [r3, #8]
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fb6:	f000 faa9 	bl	800350c <HAL_GetTick>
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fba:	6863      	ldr	r3, [r4, #4]
 8002fbc:	2b01      	cmp	r3, #1
          return HAL_ERROR;
        }
      }
      __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fbe:	4606      	mov	r6, r0
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fc0:	d10d      	bne.n	8002fde <HAL_RCC_ClockConfig+0x16e>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002fc2:	4b1e      	ldr	r3, [pc, #120]	; (800303c <HAL_RCC_ClockConfig+0x1cc>)
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	f003 030c 	and.w	r3, r3, #12
 8002fca:	2b04      	cmp	r3, #4
 8002fcc:	d0d1      	beq.n	8002f72 <HAL_RCC_ClockConfig+0x102>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fce:	f000 fa9d 	bl	800350c <HAL_GetTick>
 8002fd2:	f241 3388 	movw	r3, #5000	; 0x1388
 8002fd6:	1b80      	subs	r0, r0, r6
 8002fd8:	4298      	cmp	r0, r3
 8002fda:	d9f2      	bls.n	8002fc2 <HAL_RCC_ClockConfig+0x152>
 8002fdc:	e79d      	b.n	8002f1a <HAL_RCC_ClockConfig+0xaa>
          {
            return HAL_TIMEOUT;
          } 
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d00c      	beq.n	8002ffc <HAL_RCC_ClockConfig+0x18c>
          } 
        }
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002fe2:	4b16      	ldr	r3, [pc, #88]	; (800303c <HAL_RCC_ClockConfig+0x1cc>)
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	f013 0f0c 	tst.w	r3, #12
 8002fea:	d10e      	bne.n	800300a <HAL_RCC_ClockConfig+0x19a>
 8002fec:	e7c1      	b.n	8002f72 <HAL_RCC_ClockConfig+0x102>
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fee:	f000 fa8d 	bl	800350c <HAL_GetTick>
 8002ff2:	f241 3388 	movw	r3, #5000	; 0x1388
 8002ff6:	1b80      	subs	r0, r0, r6
 8002ff8:	4298      	cmp	r0, r3
 8002ffa:	d88e      	bhi.n	8002f1a <HAL_RCC_ClockConfig+0xaa>
          } 
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ffc:	4b0f      	ldr	r3, [pc, #60]	; (800303c <HAL_RCC_ClockConfig+0x1cc>)
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	f003 030c 	and.w	r3, r3, #12
 8003004:	2b08      	cmp	r3, #8
 8003006:	d1f2      	bne.n	8002fee <HAL_RCC_ClockConfig+0x17e>
 8003008:	e7b3      	b.n	8002f72 <HAL_RCC_ClockConfig+0x102>
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800300a:	f000 fa7f 	bl	800350c <HAL_GetTick>
 800300e:	f241 3388 	movw	r3, #5000	; 0x1388
 8003012:	1b80      	subs	r0, r0, r6
 8003014:	4298      	cmp	r0, r3
 8003016:	d9e4      	bls.n	8002fe2 <HAL_RCC_ClockConfig+0x172>
 8003018:	e77f      	b.n	8002f1a <HAL_RCC_ClockConfig+0xaa>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800301a:	071b      	lsls	r3, r3, #28
 800301c:	d507      	bpl.n	800302e <HAL_RCC_ClockConfig+0x1be>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800301e:	4b07      	ldr	r3, [pc, #28]	; (800303c <HAL_RCC_ClockConfig+0x1cc>)
 8003020:	6921      	ldr	r1, [r4, #16]
 8003022:	689a      	ldr	r2, [r3, #8]
 8003024:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003028:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800302c:	609a      	str	r2, [r3, #8]
  }

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800302e:	2000      	movs	r0, #0
 8003030:	f000 fa3f 	bl	80034b2 <HAL_InitTick>
  
  return HAL_OK;
 8003034:	2000      	movs	r0, #0
}
 8003036:	bd70      	pop	{r4, r5, r6, pc}
 8003038:	40023c00 	.word	0x40023c00
 800303c:	40023800 	.word	0x40023800

08003040 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003040:	4b1f      	ldr	r3, [pc, #124]	; (80030c0 <HAL_RCC_GetSysClockFreq+0x80>)
 8003042:	689a      	ldr	r2, [r3, #8]
 8003044:	f002 020c 	and.w	r2, r2, #12
 8003048:	2a04      	cmp	r2, #4
  *         
  *               
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800304a:	b510      	push	{r4, lr}
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800304c:	d036      	beq.n	80030bc <HAL_RCC_GetSysClockFreq+0x7c>
 800304e:	2a08      	cmp	r2, #8
 8003050:	d001      	beq.n	8003056 <HAL_RCC_GetSysClockFreq+0x16>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003052:	481c      	ldr	r0, [pc, #112]	; (80030c4 <HAL_RCC_GetSysClockFreq+0x84>)
 8003054:	bd10      	pop	{r4, pc}
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003056:	6859      	ldr	r1, [r3, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003058:	685a      	ldr	r2, [r3, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 800305a:	685c      	ldr	r4, [r3, #4]
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800305c:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003060:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003064:	f647 72c0 	movw	r2, #32704	; 0x7fc0
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003068:	d00c      	beq.n	8003084 <HAL_RCC_GetSysClockFreq+0x44>
 800306a:	fa92 f2a2 	rbit	r2, r2
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 800306e:	fab2 f382 	clz	r3, r2
 8003072:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8003076:	4022      	ands	r2, r4
 8003078:	40da      	lsrs	r2, r3
 800307a:	4b13      	ldr	r3, [pc, #76]	; (80030c8 <HAL_RCC_GetSysClockFreq+0x88>)
 800307c:	fbb3 f3f1 	udiv	r3, r3, r1
 8003080:	4353      	muls	r3, r2
 8003082:	e00b      	b.n	800309c <HAL_RCC_GetSysClockFreq+0x5c>
 8003084:	fa92 f2a2 	rbit	r2, r2
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8003088:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800308c:	480d      	ldr	r0, [pc, #52]	; (80030c4 <HAL_RCC_GetSysClockFreq+0x84>)
 800308e:	fab2 f282 	clz	r2, r2
 8003092:	4023      	ands	r3, r4
 8003094:	40d3      	lsrs	r3, r2
 8003096:	fbb0 f1f1 	udiv	r1, r0, r1
 800309a:	434b      	muls	r3, r1
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1 ) *2);
 800309c:	4a08      	ldr	r2, [pc, #32]	; (80030c0 <HAL_RCC_GetSysClockFreq+0x80>)
 800309e:	6850      	ldr	r0, [r2, #4]
 80030a0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80030a4:	fa92 f2a2 	rbit	r2, r2
 80030a8:	fab2 f282 	clz	r2, r2
 80030ac:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
 80030b0:	40d0      	lsrs	r0, r2
 80030b2:	3001      	adds	r0, #1
 80030b4:	0040      	lsls	r0, r0, #1
      
      sysclockfreq = pllvco/pllp;
 80030b6:	fbb3 f0f0 	udiv	r0, r3, r0
      break;
 80030ba:	bd10      	pop	{r4, pc}
      sysclockfreq = HSI_VALUE;
       break;
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80030bc:	4802      	ldr	r0, [pc, #8]	; (80030c8 <HAL_RCC_GetSysClockFreq+0x88>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80030be:	bd10      	pop	{r4, pc}
 80030c0:	40023800 	.word	0x40023800
 80030c4:	00f42400 	.word	0x00f42400
 80030c8:	007a1200 	.word	0x007a1200

080030cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030cc:	b508      	push	{r3, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 80030ce:	f7ff ffb7 	bl	8003040 <HAL_RCC_GetSysClockFreq>
 80030d2:	4b08      	ldr	r3, [pc, #32]	; (80030f4 <HAL_RCC_GetHCLKFreq+0x28>)
 80030d4:	22f0      	movs	r2, #240	; 0xf0
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	fa92 f2a2 	rbit	r2, r2
 80030dc:	fab2 f282 	clz	r2, r2
 80030e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030e4:	40d3      	lsrs	r3, r2
 80030e6:	4a04      	ldr	r2, [pc, #16]	; (80030f8 <HAL_RCC_GetHCLKFreq+0x2c>)
 80030e8:	5cd3      	ldrb	r3, [r2, r3]
 80030ea:	40d8      	lsrs	r0, r3
 80030ec:	4b03      	ldr	r3, [pc, #12]	; (80030fc <HAL_RCC_GetHCLKFreq+0x30>)
 80030ee:	6018      	str	r0, [r3, #0]
  return SystemCoreClock;
}
 80030f0:	bd08      	pop	{r3, pc}
 80030f2:	bf00      	nop
 80030f4:	40023800 	.word	0x40023800
 80030f8:	080079d9 	.word	0x080079d9
 80030fc:	20000000 	.word	0x20000000

08003100 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
 8003100:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8003102:	f7ff ffe3 	bl	80030cc <HAL_RCC_GetHCLKFreq>
 8003106:	4b07      	ldr	r3, [pc, #28]	; (8003124 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003108:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	fa92 f2a2 	rbit	r2, r2
 8003112:	fab2 f282 	clz	r2, r2
 8003116:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800311a:	40d3      	lsrs	r3, r2
 800311c:	4a02      	ldr	r2, [pc, #8]	; (8003128 <HAL_RCC_GetPCLK1Freq+0x28>)
 800311e:	5cd3      	ldrb	r3, [r2, r3]
}
 8003120:	40d8      	lsrs	r0, r3
 8003122:	bd08      	pop	{r3, pc}
 8003124:	40023800 	.word	0x40023800
 8003128:	080079d9 	.word	0x080079d9

0800312c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800312c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 800312e:	f7ff ffcd 	bl	80030cc <HAL_RCC_GetHCLKFreq>
 8003132:	4b07      	ldr	r3, [pc, #28]	; (8003150 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003134:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	fa92 f2a2 	rbit	r2, r2
 800313e:	fab2 f282 	clz	r2, r2
 8003142:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8003146:	40d3      	lsrs	r3, r2
 8003148:	4a02      	ldr	r2, [pc, #8]	; (8003154 <HAL_RCC_GetPCLK2Freq+0x28>)
 800314a:	5cd3      	ldrb	r3, [r2, r3]
} 
 800314c:	40d8      	lsrs	r0, r3
 800314e:	bd08      	pop	{r3, pc}
 8003150:	40023800 	.word	0x40023800
 8003154:	080079d9 	.word	0x080079d9

08003158 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003158:	b513      	push	{r0, r1, r4, lr}
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 800315a:	2300      	movs	r3, #0
 800315c:	9301      	str	r3, [sp, #4]
 800315e:	4b19      	ldr	r3, [pc, #100]	; (80031c4 <HAL_PWREx_EnableOverDrive+0x6c>)
 8003160:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003162:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003166:	641a      	str	r2, [r3, #64]	; 0x40
 8003168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800316e:	9301      	str	r3, [sp, #4]
 8003170:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003172:	4b15      	ldr	r3, [pc, #84]	; (80031c8 <HAL_PWREx_EnableOverDrive+0x70>)
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800317a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800317c:	f000 f9c6 	bl	800350c <HAL_GetTick>
 8003180:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003182:	4b11      	ldr	r3, [pc, #68]	; (80031c8 <HAL_PWREx_EnableOverDrive+0x70>)
 8003184:	685a      	ldr	r2, [r3, #4]
 8003186:	03d2      	lsls	r2, r2, #15
 8003188:	d407      	bmi.n	800319a <HAL_PWREx_EnableOverDrive+0x42>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800318a:	f000 f9bf 	bl	800350c <HAL_GetTick>
 800318e:	1b00      	subs	r0, r0, r4
 8003190:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003194:	d9f5      	bls.n	8003182 <HAL_PWREx_EnableOverDrive+0x2a>
    {
      return HAL_TIMEOUT;
 8003196:	2003      	movs	r0, #3
 8003198:	e012      	b.n	80031c0 <HAL_PWREx_EnableOverDrive+0x68>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80031a0:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80031a2:	f000 f9b3 	bl	800350c <HAL_GetTick>
 80031a6:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80031a8:	4b07      	ldr	r3, [pc, #28]	; (80031c8 <HAL_PWREx_EnableOverDrive+0x70>)
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	039b      	lsls	r3, r3, #14
 80031ae:	d406      	bmi.n	80031be <HAL_PWREx_EnableOverDrive+0x66>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80031b0:	f000 f9ac 	bl	800350c <HAL_GetTick>
 80031b4:	1b00      	subs	r0, r0, r4
 80031b6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80031ba:	d9f5      	bls.n	80031a8 <HAL_PWREx_EnableOverDrive+0x50>
 80031bc:	e7eb      	b.n	8003196 <HAL_PWREx_EnableOverDrive+0x3e>
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 80031be:	2000      	movs	r0, #0
}
 80031c0:	b002      	add	sp, #8
 80031c2:	bd10      	pop	{r4, pc}
 80031c4:	40023800 	.word	0x40023800
 80031c8:	40007000 	.word	0x40007000

080031cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031d0:	680f      	ldr	r7, [r1, #0]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80031d2:	2300      	movs	r3, #0
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80031d4:	2201      	movs	r2, #1
 80031d6:	409a      	lsls	r2, r3
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031d8:	ea02 0507 	and.w	r5, r2, r7

    if(iocurrent == ioposition)
 80031dc:	4295      	cmp	r5, r2
 80031de:	f040 80db 	bne.w	8003398 <HAL_GPIO_Init+0x1cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031e2:	684c      	ldr	r4, [r1, #4]
 80031e4:	f024 0610 	bic.w	r6, r4, #16
 80031e8:	2e02      	cmp	r6, #2
 80031ea:	d116      	bne.n	800321a <HAL_GPIO_Init+0x4e>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80031ec:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 80031f0:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80031f4:	f003 0807 	and.w	r8, r3, #7
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80031f8:	f8dc 2020 	ldr.w	r2, [ip, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80031fc:	ea4f 0888 	mov.w	r8, r8, lsl #2
 8003200:	f04f 090f 	mov.w	r9, #15
 8003204:	fa09 f908 	lsl.w	r9, r9, r8
 8003208:	ea22 0909 	bic.w	r9, r2, r9
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800320c:	690a      	ldr	r2, [r1, #16]
 800320e:	fa02 f808 	lsl.w	r8, r2, r8
 8003212:	ea49 0208 	orr.w	r2, r9, r8
        GPIOx->AFR[position >> 3] = temp;
 8003216:	f8cc 2020 	str.w	r2, [ip, #32]
 800321a:	005a      	lsls	r2, r3, #1
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800321c:	f04f 0c03 	mov.w	ip, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003220:	f8d0 9000 	ldr.w	r9, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003224:	fa0c fc02 	lsl.w	ip, ip, r2
 8003228:	ea6f 0c0c 	mvn.w	ip, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800322c:	f004 0803 	and.w	r8, r4, #3
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003230:	ea0c 0909 	and.w	r9, ip, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003234:	fa08 f802 	lsl.w	r8, r8, r2
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003238:	3e01      	subs	r6, #1
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800323a:	ea49 0808 	orr.w	r8, r9, r8
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800323e:	2e01      	cmp	r6, #1

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
      GPIOx->MODER = temp;
 8003240:	f8c0 8000 	str.w	r8, [r0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003244:	d810      	bhi.n	8003268 <HAL_GPIO_Init+0x9c>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003246:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003248:	ea0c 0806 	and.w	r8, ip, r6
        temp |= (GPIO_Init->Speed << (position * 2));
 800324c:	68ce      	ldr	r6, [r1, #12]
 800324e:	4096      	lsls	r6, r2
 8003250:	ea48 0606 	orr.w	r6, r8, r6
        GPIOx->OSPEEDR = temp;
 8003254:	6086      	str	r6, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003256:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003258:	ea26 0805 	bic.w	r8, r6, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800325c:	f3c4 1600 	ubfx	r6, r4, #4, #1
 8003260:	409e      	lsls	r6, r3
 8003262:	ea48 0606 	orr.w	r6, r8, r6
        GPIOx->OTYPER = temp;
 8003266:	6046      	str	r6, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003268:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800326a:	ea0c 0c06 	and.w	ip, ip, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800326e:	688e      	ldr	r6, [r1, #8]
 8003270:	4096      	lsls	r6, r2
 8003272:	ea4c 0206 	orr.w	r2, ip, r6
      GPIOx->PUPDR = temp;
 8003276:	60c2      	str	r2, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003278:	00e2      	lsls	r2, r4, #3
 800327a:	f140 808d 	bpl.w	8003398 <HAL_GPIO_Init+0x1cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800327e:	4e4a      	ldr	r6, [pc, #296]	; (80033a8 <HAL_GPIO_Init+0x1dc>)
 8003280:	2200      	movs	r2, #0
 8003282:	9201      	str	r2, [sp, #4]
 8003284:	f8d6 c044 	ldr.w	ip, [r6, #68]	; 0x44
 8003288:	f44c 4c80 	orr.w	ip, ip, #16384	; 0x4000
 800328c:	f8c6 c044 	str.w	ip, [r6, #68]	; 0x44
 8003290:	6c76      	ldr	r6, [r6, #68]	; 0x44
 8003292:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8003296:	9601      	str	r6, [sp, #4]
 8003298:	9e01      	ldr	r6, [sp, #4]
 800329a:	f023 0603 	bic.w	r6, r3, #3
 800329e:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 80032a2:	f506 369c 	add.w	r6, r6, #79872	; 0x13800

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80032a6:	f003 0c03 	and.w	ip, r3, #3
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
 80032aa:	f8d6 9008 	ldr.w	r9, [r6, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80032ae:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80032b2:	f04f 080f 	mov.w	r8, #15
 80032b6:	fa08 f80c 	lsl.w	r8, r8, ip
 80032ba:	ea29 0808 	bic.w	r8, r9, r8
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80032be:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 80033b0 <HAL_GPIO_Init+0x1e4>
 80032c2:	4548      	cmp	r0, r9
 80032c4:	d037      	beq.n	8003336 <HAL_GPIO_Init+0x16a>
 80032c6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80032ca:	f502 3201 	add.w	r2, r2, #132096	; 0x20400
 80032ce:	4290      	cmp	r0, r2
 80032d0:	d022      	beq.n	8003318 <HAL_GPIO_Init+0x14c>
 80032d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80032d6:	4290      	cmp	r0, r2
 80032d8:	d020      	beq.n	800331c <HAL_GPIO_Init+0x150>
 80032da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80032de:	4290      	cmp	r0, r2
 80032e0:	d01e      	beq.n	8003320 <HAL_GPIO_Init+0x154>
 80032e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80032e6:	4290      	cmp	r0, r2
 80032e8:	d01c      	beq.n	8003324 <HAL_GPIO_Init+0x158>
 80032ea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80032ee:	4290      	cmp	r0, r2
 80032f0:	d01a      	beq.n	8003328 <HAL_GPIO_Init+0x15c>
 80032f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80032f6:	4290      	cmp	r0, r2
 80032f8:	d018      	beq.n	800332c <HAL_GPIO_Init+0x160>
 80032fa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80032fe:	4290      	cmp	r0, r2
 8003300:	d016      	beq.n	8003330 <HAL_GPIO_Init+0x164>
 8003302:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003306:	4290      	cmp	r0, r2
 8003308:	d014      	beq.n	8003334 <HAL_GPIO_Init+0x168>
 800330a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800330e:	4290      	cmp	r0, r2
 8003310:	bf14      	ite	ne
 8003312:	220a      	movne	r2, #10
 8003314:	2209      	moveq	r2, #9
 8003316:	e00e      	b.n	8003336 <HAL_GPIO_Init+0x16a>
 8003318:	2201      	movs	r2, #1
 800331a:	e00c      	b.n	8003336 <HAL_GPIO_Init+0x16a>
 800331c:	2202      	movs	r2, #2
 800331e:	e00a      	b.n	8003336 <HAL_GPIO_Init+0x16a>
 8003320:	2203      	movs	r2, #3
 8003322:	e008      	b.n	8003336 <HAL_GPIO_Init+0x16a>
 8003324:	2204      	movs	r2, #4
 8003326:	e006      	b.n	8003336 <HAL_GPIO_Init+0x16a>
 8003328:	2205      	movs	r2, #5
 800332a:	e004      	b.n	8003336 <HAL_GPIO_Init+0x16a>
 800332c:	2206      	movs	r2, #6
 800332e:	e002      	b.n	8003336 <HAL_GPIO_Init+0x16a>
 8003330:	2207      	movs	r2, #7
 8003332:	e000      	b.n	8003336 <HAL_GPIO_Init+0x16a>
 8003334:	2208      	movs	r2, #8
 8003336:	fa02 f20c 	lsl.w	r2, r2, ip
 800333a:	ea42 0208 	orr.w	r2, r2, r8
        SYSCFG->EXTICR[position >> 2] = temp;
 800333e:	60b2      	str	r2, [r6, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003340:	4e1a      	ldr	r6, [pc, #104]	; (80033ac <HAL_GPIO_Init+0x1e0>)
 8003342:	f8d6 c000 	ldr.w	ip, [r6]
        temp &= ~((uint32_t)iocurrent);
 8003346:	43ea      	mvns	r2, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003348:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        {
          temp |= iocurrent;
 800334c:	bf14      	ite	ne
 800334e:	ea45 0c0c 	orrne.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
 8003352:	ea02 0c0c 	andeq.w	ip, r2, ip
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 8003356:	f8c6 c000 	str.w	ip, [r6]

        temp = EXTI->EMR;
 800335a:	6876      	ldr	r6, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800335c:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        {
          temp |= iocurrent;
 8003360:	bf14      	ite	ne
 8003362:	ea45 0c06 	orrne.w	ip, r5, r6
          temp |= iocurrent;
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
 8003366:	ea02 0c06 	andeq.w	ip, r2, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 800336a:	4e10      	ldr	r6, [pc, #64]	; (80033ac <HAL_GPIO_Init+0x1e0>)
 800336c:	f8c6 c004 	str.w	ip, [r6, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003370:	f8d6 c008 	ldr.w	ip, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003374:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        {
          temp |= iocurrent;
 8003378:	bf14      	ite	ne
 800337a:	ea45 0c0c 	orrne.w	ip, r5, ip
        }
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
 800337e:	ea02 0c0c 	andeq.w	ip, r2, ip
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 8003382:	f8c6 c008 	str.w	ip, [r6, #8]

        temp = EXTI->FTSR;
 8003386:	68f6      	ldr	r6, [r6, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003388:	02a4      	lsls	r4, r4, #10
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
 800338a:	bf58      	it	pl
 800338c:	ea02 0506 	andpl.w	r5, r2, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 8003390:	4a06      	ldr	r2, [pc, #24]	; (80033ac <HAL_GPIO_Init+0x1e0>)

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          temp |= iocurrent;
 8003392:	bf48      	it	mi
 8003394:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8003396:	60d5      	str	r5, [r2, #12]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003398:	3301      	adds	r3, #1
 800339a:	2b10      	cmp	r3, #16
 800339c:	f47f af1a 	bne.w	80031d4 <HAL_GPIO_Init+0x8>
        }
        EXTI->FTSR = temp;
      }
    }
  }
}
 80033a0:	b003      	add	sp, #12
 80033a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80033a6:	bf00      	nop
 80033a8:	40023800 	.word	0x40023800
 80033ac:	40013c00 	.word	0x40013c00
 80033b0:	40020000 	.word	0x40020000

080033b4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80033b4:	b902      	cbnz	r2, 80033b8 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80033b6:	0409      	lsls	r1, r1, #16
 80033b8:	6181      	str	r1, [r0, #24]
 80033ba:	4770      	bx	lr

080033bc <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80033bc:	6943      	ldr	r3, [r0, #20]
 80033be:	4059      	eors	r1, r3
 80033c0:	6141      	str	r1, [r0, #20]
 80033c2:	4770      	bx	lr

080033c4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033c4:	4a07      	ldr	r2, [pc, #28]	; (80033e4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80033c6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033c8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80033cc:	041b      	lsls	r3, r3, #16
 80033ce:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80033d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033d8:	f000 0007 	and.w	r0, r0, #7

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 80033dc:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 80033e0:	60d3      	str	r3, [r2, #12]
 80033e2:	4770      	bx	lr
 80033e4:	e000ed00 	.word	0xe000ed00

080033e8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033e8:	4b16      	ldr	r3, [pc, #88]	; (8003444 <HAL_NVIC_SetPriority+0x5c>)
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80033f0:	b570      	push	{r4, r5, r6, lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033f2:	1d1d      	adds	r5, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033f4:	f1c3 0407 	rsb	r4, r3, #7
 80033f8:	2c04      	cmp	r4, #4
 80033fa:	bf28      	it	cs
 80033fc:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033fe:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003400:	f04f 0501 	mov.w	r5, #1
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003404:	bf8c      	ite	hi
 8003406:	3b03      	subhi	r3, #3
 8003408:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800340a:	fa05 f404 	lsl.w	r4, r5, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800340e:	fa05 f603 	lsl.w	r6, r5, r3

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003412:	3c01      	subs	r4, #1
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003414:	3e01      	subs	r6, #1

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003416:	4021      	ands	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003418:	4032      	ands	r2, r6

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800341a:	fa01 f303 	lsl.w	r3, r1, r3
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 800341e:	4313      	orrs	r3, r2
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8003420:	2800      	cmp	r0, #0
 8003422:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8003426:	da05      	bge.n	8003434 <HAL_NVIC_SetPriority+0x4c>
  {
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003428:	b2da      	uxtb	r2, r3
 800342a:	f000 000f 	and.w	r0, r0, #15
 800342e:	4b06      	ldr	r3, [pc, #24]	; (8003448 <HAL_NVIC_SetPriority+0x60>)
 8003430:	541a      	strb	r2, [r3, r0]
 8003432:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003434:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8003438:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800343c:	b2db      	uxtb	r3, r3
 800343e:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
 8003442:	bd70      	pop	{r4, r5, r6, pc}
 8003444:	e000ed00 	.word	0xe000ed00
 8003448:	e000ed14 	.word	0xe000ed14

0800344c <HAL_NVIC_EnableIRQ>:
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800344c:	0942      	lsrs	r2, r0, #5
 800344e:	2301      	movs	r3, #1
 8003450:	f000 001f 	and.w	r0, r0, #31
 8003454:	fa03 f000 	lsl.w	r0, r3, r0
 8003458:	4b01      	ldr	r3, [pc, #4]	; (8003460 <HAL_NVIC_EnableIRQ+0x14>)
 800345a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800345e:	4770      	bx	lr
 8003460:	e000e100 	.word	0xe000e100

08003464 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003464:	3801      	subs	r0, #1
 8003466:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800346a:	d20a      	bcs.n	8003482 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800346c:	4b06      	ldr	r3, [pc, #24]	; (8003488 <HAL_SYSTICK_Config+0x24>)
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800346e:	4a07      	ldr	r2, [pc, #28]	; (800348c <HAL_SYSTICK_Config+0x28>)
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003470:	6058      	str	r0, [r3, #4]
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003472:	21f0      	movs	r1, #240	; 0xf0
 8003474:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003478:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800347a:	2207      	movs	r2, #7
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800347c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800347e:	601a      	str	r2, [r3, #0]
 8003480:	4770      	bx	lr
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
 8003482:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8003484:	4770      	bx	lr
 8003486:	bf00      	nop
 8003488:	e000e010 	.word	0xe000e010
 800348c:	e000ed00 	.word	0xe000ed00

08003490 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8003490:	4b04      	ldr	r3, [pc, #16]	; (80034a4 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8003492:	681a      	ldr	r2, [r3, #0]
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8003494:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8003496:	bf0c      	ite	eq
 8003498:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800349c:	f022 0204 	bicne.w	r2, r2, #4
 80034a0:	601a      	str	r2, [r3, #0]
 80034a2:	4770      	bx	lr
 80034a4:	e000e010 	.word	0xe000e010

080034a8 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80034a8:	4770      	bx	lr

080034aa <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80034aa:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80034ac:	f7ff fffc 	bl	80034a8 <HAL_SYSTICK_Callback>
 80034b0:	bd08      	pop	{r3, pc}

080034b2 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80034b2:	b510      	push	{r4, lr}
 80034b4:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80034b6:	f7ff fe09 	bl	80030cc <HAL_RCC_GetHCLKFreq>
 80034ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80034be:	fbb0 f0f3 	udiv	r0, r0, r3
 80034c2:	f7ff ffcf 	bl	8003464 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 80034c6:	f04f 30ff 	mov.w	r0, #4294967295
 80034ca:	4621      	mov	r1, r4
 80034cc:	2200      	movs	r2, #0
 80034ce:	f7ff ff8b 	bl	80033e8 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 80034d2:	2000      	movs	r0, #0
 80034d4:	bd10      	pop	{r4, pc}
	...

080034d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80034d8:	b508      	push	{r3, lr}
  /* Configure Flash prefetch and Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 80034da:	4b07      	ldr	r3, [pc, #28]	; (80034f8 <HAL_Init+0x20>)
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034e2:	601a      	str	r2, [r3, #0]
#endif /* ART_ACCLERATOR_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80034e4:	2003      	movs	r0, #3
 80034e6:	f7ff ff6d 	bl	80033c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80034ea:	2000      	movs	r0, #0
 80034ec:	f7ff ffe1 	bl	80034b2 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80034f0:	f7fd fe00 	bl	80010f4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 80034f4:	2000      	movs	r0, #0
 80034f6:	bd08      	pop	{r3, pc}
 80034f8:	40023c00 	.word	0x40023c00

080034fc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80034fc:	4b02      	ldr	r3, [pc, #8]	; (8003508 <HAL_IncTick+0xc>)
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	3201      	adds	r2, #1
 8003502:	601a      	str	r2, [r3, #0]
 8003504:	4770      	bx	lr
 8003506:	bf00      	nop
 8003508:	20000564 	.word	0x20000564

0800350c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800350c:	4b01      	ldr	r3, [pc, #4]	; (8003514 <HAL_GetTick+0x8>)
 800350e:	6818      	ldr	r0, [r3, #0]
}
 8003510:	4770      	bx	lr
 8003512:	bf00      	nop
 8003514:	20000564 	.word	0x20000564

08003518 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003518:	4a0f      	ldr	r2, [pc, #60]	; (8003558 <SystemInit+0x40>)
 800351a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800351e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003522:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003526:	4b0d      	ldr	r3, [pc, #52]	; (800355c <SystemInit+0x44>)
 8003528:	6819      	ldr	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800352a:	2000      	movs	r0, #0
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800352c:	f041 0101 	orr.w	r1, r1, #1
 8003530:	6019      	str	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003532:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003534:	6819      	ldr	r1, [r3, #0]
 8003536:	f021 7184 	bic.w	r1, r1, #17301504	; 0x1080000
 800353a:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 800353e:	6019      	str	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003540:	4907      	ldr	r1, [pc, #28]	; (8003560 <SystemInit+0x48>)
 8003542:	6059      	str	r1, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003544:	6819      	ldr	r1, [r3, #0]
 8003546:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 800354a:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800354c:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800354e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003552:	6093      	str	r3, [r2, #8]
 8003554:	4770      	bx	lr
 8003556:	bf00      	nop
 8003558:	e000ed00 	.word	0xe000ed00
 800355c:	40023800 	.word	0x40023800
 8003560:	24003010 	.word	0x24003010

08003564 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003564:	f8df d03c 	ldr.w	sp, [pc, #60]	; 80035a4 <LoopFillZerobss+0x16>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003568:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800356a:	f000 b804 	b.w	8003576 <LoopCopyDataInit>

0800356e <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800356e:	4b0e      	ldr	r3, [pc, #56]	; (80035a8 <LoopFillZerobss+0x1a>)
  ldr  r3, [r3, r1]
 8003570:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003572:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003574:	3104      	adds	r1, #4

08003576 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003576:	480d      	ldr	r0, [pc, #52]	; (80035ac <LoopFillZerobss+0x1e>)
  ldr  r3, =_edata
 8003578:	4b0d      	ldr	r3, [pc, #52]	; (80035b0 <LoopFillZerobss+0x22>)
  adds  r2, r0, r1
 800357a:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800357c:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800357e:	f4ff aff6 	bcc.w	800356e <CopyDataInit>
  ldr  r2, =_sbss
 8003582:	4a0c      	ldr	r2, [pc, #48]	; (80035b4 <LoopFillZerobss+0x26>)
  b  LoopFillZerobss
 8003584:	f000 b803 	b.w	800358e <LoopFillZerobss>

08003588 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003588:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800358a:	f842 3b04 	str.w	r3, [r2], #4

0800358e <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800358e:	4b0a      	ldr	r3, [pc, #40]	; (80035b8 <LoopFillZerobss+0x2a>)
  cmp  r2, r3
 8003590:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003592:	f4ff aff9 	bcc.w	8003588 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003596:	f7ff ffbf 	bl	8003518 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800359a:	f000 f811 	bl	80035c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800359e:	f7fd ffd1 	bl	8001544 <main>
  bx  lr    
 80035a2:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80035a4:	20050000 	.word	0x20050000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 80035a8:	08007d70 	.word	0x08007d70
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80035ac:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80035b0:	20000544 	.word	0x20000544
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 80035b4:	20000544 	.word	0x20000544
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80035b8:	2000076c 	.word	0x2000076c

080035bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80035bc:	f7ff bffe 	b.w	80035bc <ADC_IRQHandler>

080035c0 <__libc_init_array>:
 80035c0:	b570      	push	{r4, r5, r6, lr}
 80035c2:	4b0e      	ldr	r3, [pc, #56]	; (80035fc <__libc_init_array+0x3c>)
 80035c4:	4d0e      	ldr	r5, [pc, #56]	; (8003600 <__libc_init_array+0x40>)
 80035c6:	1aed      	subs	r5, r5, r3
 80035c8:	10ad      	asrs	r5, r5, #2
 80035ca:	2400      	movs	r4, #0
 80035cc:	461e      	mov	r6, r3
 80035ce:	42ac      	cmp	r4, r5
 80035d0:	d004      	beq.n	80035dc <__libc_init_array+0x1c>
 80035d2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80035d6:	4790      	blx	r2
 80035d8:	3401      	adds	r4, #1
 80035da:	e7f8      	b.n	80035ce <__libc_init_array+0xe>
 80035dc:	f004 f9de 	bl	800799c <_init>
 80035e0:	4d08      	ldr	r5, [pc, #32]	; (8003604 <__libc_init_array+0x44>)
 80035e2:	4b09      	ldr	r3, [pc, #36]	; (8003608 <__libc_init_array+0x48>)
 80035e4:	1aed      	subs	r5, r5, r3
 80035e6:	10ad      	asrs	r5, r5, #2
 80035e8:	2400      	movs	r4, #0
 80035ea:	461e      	mov	r6, r3
 80035ec:	42ac      	cmp	r4, r5
 80035ee:	d004      	beq.n	80035fa <__libc_init_array+0x3a>
 80035f0:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80035f4:	4790      	blx	r2
 80035f6:	3401      	adds	r4, #1
 80035f8:	e7f8      	b.n	80035ec <__libc_init_array+0x2c>
 80035fa:	bd70      	pop	{r4, r5, r6, pc}
 80035fc:	08007d68 	.word	0x08007d68
 8003600:	08007d68 	.word	0x08007d68
 8003604:	08007d6c 	.word	0x08007d6c
 8003608:	08007d68 	.word	0x08007d68

0800360c <sprintf>:
 800360c:	b40e      	push	{r1, r2, r3}
 800360e:	b500      	push	{lr}
 8003610:	b09c      	sub	sp, #112	; 0x70
 8003612:	f44f 7102 	mov.w	r1, #520	; 0x208
 8003616:	f8ad 1014 	strh.w	r1, [sp, #20]
 800361a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800361e:	9104      	str	r1, [sp, #16]
 8003620:	9107      	str	r1, [sp, #28]
 8003622:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003626:	ab1d      	add	r3, sp, #116	; 0x74
 8003628:	f8ad 1016 	strh.w	r1, [sp, #22]
 800362c:	4908      	ldr	r1, [pc, #32]	; (8003650 <sprintf+0x44>)
 800362e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003632:	9002      	str	r0, [sp, #8]
 8003634:	9006      	str	r0, [sp, #24]
 8003636:	6808      	ldr	r0, [r1, #0]
 8003638:	9301      	str	r3, [sp, #4]
 800363a:	a902      	add	r1, sp, #8
 800363c:	f000 f80c 	bl	8003658 <_svfprintf_r>
 8003640:	9b02      	ldr	r3, [sp, #8]
 8003642:	2200      	movs	r2, #0
 8003644:	701a      	strb	r2, [r3, #0]
 8003646:	b01c      	add	sp, #112	; 0x70
 8003648:	f85d eb04 	ldr.w	lr, [sp], #4
 800364c:	b003      	add	sp, #12
 800364e:	4770      	bx	lr
 8003650:	200000f4 	.word	0x200000f4
 8003654:	00000000 	.word	0x00000000

08003658 <_svfprintf_r>:
 8003658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800365c:	b0bf      	sub	sp, #252	; 0xfc
 800365e:	468b      	mov	fp, r1
 8003660:	4698      	mov	r8, r3
 8003662:	9207      	str	r2, [sp, #28]
 8003664:	4682      	mov	sl, r0
 8003666:	f001 fddf 	bl	8005228 <_localeconv_r>
 800366a:	6800      	ldr	r0, [r0, #0]
 800366c:	9014      	str	r0, [sp, #80]	; 0x50
 800366e:	f002 fb27 	bl	8005cc0 <strlen>
 8003672:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8003676:	900c      	str	r0, [sp, #48]	; 0x30
 8003678:	0619      	lsls	r1, r3, #24
 800367a:	d515      	bpl.n	80036a8 <_svfprintf_r+0x50>
 800367c:	f8db 3010 	ldr.w	r3, [fp, #16]
 8003680:	b993      	cbnz	r3, 80036a8 <_svfprintf_r+0x50>
 8003682:	4650      	mov	r0, sl
 8003684:	2140      	movs	r1, #64	; 0x40
 8003686:	f001 fddb 	bl	8005240 <_malloc_r>
 800368a:	f8cb 0000 	str.w	r0, [fp]
 800368e:	f8cb 0010 	str.w	r0, [fp, #16]
 8003692:	b930      	cbnz	r0, 80036a2 <_svfprintf_r+0x4a>
 8003694:	230c      	movs	r3, #12
 8003696:	f8ca 3000 	str.w	r3, [sl]
 800369a:	f04f 30ff 	mov.w	r0, #4294967295
 800369e:	f000 bf74 	b.w	800458a <_svfprintf_r+0xf32>
 80036a2:	2340      	movs	r3, #64	; 0x40
 80036a4:	f8cb 3014 	str.w	r3, [fp, #20]
 80036a8:	ed9f 7b9b 	vldr	d7, [pc, #620]	; 8003918 <_svfprintf_r+0x2c0>
 80036ac:	ed8d 7b08 	vstr	d7, [sp, #32]
 80036b0:	2300      	movs	r3, #0
 80036b2:	ae2e      	add	r6, sp, #184	; 0xb8
 80036b4:	9621      	str	r6, [sp, #132]	; 0x84
 80036b6:	9323      	str	r3, [sp, #140]	; 0x8c
 80036b8:	9322      	str	r3, [sp, #136]	; 0x88
 80036ba:	9305      	str	r3, [sp, #20]
 80036bc:	9317      	str	r3, [sp, #92]	; 0x5c
 80036be:	9316      	str	r3, [sp, #88]	; 0x58
 80036c0:	930b      	str	r3, [sp, #44]	; 0x2c
 80036c2:	9b07      	ldr	r3, [sp, #28]
 80036c4:	461c      	mov	r4, r3
 80036c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80036ca:	b91a      	cbnz	r2, 80036d4 <_svfprintf_r+0x7c>
 80036cc:	9807      	ldr	r0, [sp, #28]
 80036ce:	1a25      	subs	r5, r4, r0
 80036d0:	d103      	bne.n	80036da <_svfprintf_r+0x82>
 80036d2:	e01b      	b.n	800370c <_svfprintf_r+0xb4>
 80036d4:	2a25      	cmp	r2, #37	; 0x25
 80036d6:	d1f5      	bne.n	80036c4 <_svfprintf_r+0x6c>
 80036d8:	e7f8      	b.n	80036cc <_svfprintf_r+0x74>
 80036da:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80036dc:	9907      	ldr	r1, [sp, #28]
 80036de:	442b      	add	r3, r5
 80036e0:	9323      	str	r3, [sp, #140]	; 0x8c
 80036e2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80036e4:	3301      	adds	r3, #1
 80036e6:	2b07      	cmp	r3, #7
 80036e8:	e886 0022 	stmia.w	r6, {r1, r5}
 80036ec:	9322      	str	r3, [sp, #136]	; 0x88
 80036ee:	dc01      	bgt.n	80036f4 <_svfprintf_r+0x9c>
 80036f0:	3608      	adds	r6, #8
 80036f2:	e008      	b.n	8003706 <_svfprintf_r+0xae>
 80036f4:	4650      	mov	r0, sl
 80036f6:	4659      	mov	r1, fp
 80036f8:	aa21      	add	r2, sp, #132	; 0x84
 80036fa:	f002 fae9 	bl	8005cd0 <__ssprint_r>
 80036fe:	2800      	cmp	r0, #0
 8003700:	f040 873b 	bne.w	800457a <_svfprintf_r+0xf22>
 8003704:	ae2e      	add	r6, sp, #184	; 0xb8
 8003706:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003708:	442a      	add	r2, r5
 800370a:	920b      	str	r2, [sp, #44]	; 0x2c
 800370c:	7823      	ldrb	r3, [r4, #0]
 800370e:	2b00      	cmp	r3, #0
 8003710:	f000 872c 	beq.w	800456c <_svfprintf_r+0xf14>
 8003714:	2300      	movs	r3, #0
 8003716:	3401      	adds	r4, #1
 8003718:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 800371c:	f04f 39ff 	mov.w	r9, #4294967295
 8003720:	930a      	str	r3, [sp, #40]	; 0x28
 8003722:	461f      	mov	r7, r3
 8003724:	1c65      	adds	r5, r4, #1
 8003726:	7824      	ldrb	r4, [r4, #0]
 8003728:	9507      	str	r5, [sp, #28]
 800372a:	9404      	str	r4, [sp, #16]
 800372c:	9c04      	ldr	r4, [sp, #16]
 800372e:	f1a4 0220 	sub.w	r2, r4, #32
 8003732:	2a58      	cmp	r2, #88	; 0x58
 8003734:	f200 838b 	bhi.w	8003e4e <_svfprintf_r+0x7f6>
 8003738:	e8df f012 	tbh	[pc, r2, lsl #1]
 800373c:	0389006d 	.word	0x0389006d
 8003740:	00710389 	.word	0x00710389
 8003744:	03890389 	.word	0x03890389
 8003748:	03890389 	.word	0x03890389
 800374c:	03890389 	.word	0x03890389
 8003750:	0059005b 	.word	0x0059005b
 8003754:	00770389 	.word	0x00770389
 8003758:	0389007a 	.word	0x0389007a
 800375c:	00a300a0 	.word	0x00a300a0
 8003760:	00a300a3 	.word	0x00a300a3
 8003764:	00a300a3 	.word	0x00a300a3
 8003768:	00a300a3 	.word	0x00a300a3
 800376c:	00a300a3 	.word	0x00a300a3
 8003770:	03890389 	.word	0x03890389
 8003774:	03890389 	.word	0x03890389
 8003778:	03890389 	.word	0x03890389
 800377c:	03890389 	.word	0x03890389
 8003780:	03890389 	.word	0x03890389
 8003784:	010800d4 	.word	0x010800d4
 8003788:	01080389 	.word	0x01080389
 800378c:	03890389 	.word	0x03890389
 8003790:	03890389 	.word	0x03890389
 8003794:	038900b7 	.word	0x038900b7
 8003798:	02680389 	.word	0x02680389
 800379c:	03890389 	.word	0x03890389
 80037a0:	03890389 	.word	0x03890389
 80037a4:	02c10389 	.word	0x02c10389
 80037a8:	03890389 	.word	0x03890389
 80037ac:	03890068 	.word	0x03890068
 80037b0:	03890389 	.word	0x03890389
 80037b4:	03890389 	.word	0x03890389
 80037b8:	03890389 	.word	0x03890389
 80037bc:	03890389 	.word	0x03890389
 80037c0:	00ca0389 	.word	0x00ca0389
 80037c4:	01080065 	.word	0x01080065
 80037c8:	01080108 	.word	0x01080108
 80037cc:	006500ba 	.word	0x006500ba
 80037d0:	03890389 	.word	0x03890389
 80037d4:	038900bd 	.word	0x038900bd
 80037d8:	026a0249 	.word	0x026a0249
 80037dc:	00c70292 	.word	0x00c70292
 80037e0:	02a40389 	.word	0x02a40389
 80037e4:	02c30389 	.word	0x02c30389
 80037e8:	03890389 	.word	0x03890389
 80037ec:	02de      	.short	0x02de
 80037ee:	232b      	movs	r3, #43	; 0x2b
 80037f0:	e007      	b.n	8003802 <_svfprintf_r+0x1aa>
 80037f2:	f8d8 5000 	ldr.w	r5, [r8]
 80037f6:	950a      	str	r5, [sp, #40]	; 0x28
 80037f8:	2d00      	cmp	r5, #0
 80037fa:	f108 0204 	add.w	r2, r8, #4
 80037fe:	db11      	blt.n	8003824 <_svfprintf_r+0x1cc>
 8003800:	4690      	mov	r8, r2
 8003802:	9c07      	ldr	r4, [sp, #28]
 8003804:	e78e      	b.n	8003724 <_svfprintf_r+0xcc>
 8003806:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 800380a:	e06f      	b.n	80038ec <_svfprintf_r+0x294>
 800380c:	4c44      	ldr	r4, [pc, #272]	; (8003920 <_svfprintf_r+0x2c8>)
 800380e:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 8003812:	9417      	str	r4, [sp, #92]	; 0x5c
 8003814:	e274      	b.n	8003d00 <_svfprintf_r+0x6a8>
 8003816:	2b00      	cmp	r3, #0
 8003818:	bf08      	it	eq
 800381a:	2320      	moveq	r3, #32
 800381c:	e7f1      	b.n	8003802 <_svfprintf_r+0x1aa>
 800381e:	f047 0701 	orr.w	r7, r7, #1
 8003822:	e7ee      	b.n	8003802 <_svfprintf_r+0x1aa>
 8003824:	426d      	negs	r5, r5
 8003826:	950a      	str	r5, [sp, #40]	; 0x28
 8003828:	4690      	mov	r8, r2
 800382a:	f047 0704 	orr.w	r7, r7, #4
 800382e:	e7e8      	b.n	8003802 <_svfprintf_r+0x1aa>
 8003830:	9c07      	ldr	r4, [sp, #28]
 8003832:	7825      	ldrb	r5, [r4, #0]
 8003834:	9504      	str	r5, [sp, #16]
 8003836:	2d2a      	cmp	r5, #42	; 0x2a
 8003838:	f104 0201 	add.w	r2, r4, #1
 800383c:	d002      	beq.n	8003844 <_svfprintf_r+0x1ec>
 800383e:	f04f 0900 	mov.w	r9, #0
 8003842:	e00b      	b.n	800385c <_svfprintf_r+0x204>
 8003844:	f8d8 9000 	ldr.w	r9, [r8]
 8003848:	9207      	str	r2, [sp, #28]
 800384a:	f108 0104 	add.w	r1, r8, #4
 800384e:	f1b9 0f00 	cmp.w	r9, #0
 8003852:	4688      	mov	r8, r1
 8003854:	dad5      	bge.n	8003802 <_svfprintf_r+0x1aa>
 8003856:	f04f 39ff 	mov.w	r9, #4294967295
 800385a:	e7d2      	b.n	8003802 <_svfprintf_r+0x1aa>
 800385c:	9d04      	ldr	r5, [sp, #16]
 800385e:	f1a5 0130 	sub.w	r1, r5, #48	; 0x30
 8003862:	2909      	cmp	r1, #9
 8003864:	d806      	bhi.n	8003874 <_svfprintf_r+0x21c>
 8003866:	200a      	movs	r0, #10
 8003868:	f812 4b01 	ldrb.w	r4, [r2], #1
 800386c:	9404      	str	r4, [sp, #16]
 800386e:	fb00 1909 	mla	r9, r0, r9, r1
 8003872:	e7f3      	b.n	800385c <_svfprintf_r+0x204>
 8003874:	ea49 79e9 	orr.w	r9, r9, r9, asr #31
 8003878:	9207      	str	r2, [sp, #28]
 800387a:	e757      	b.n	800372c <_svfprintf_r+0xd4>
 800387c:	f047 0780 	orr.w	r7, r7, #128	; 0x80
 8003880:	e7bf      	b.n	8003802 <_svfprintf_r+0x1aa>
 8003882:	2400      	movs	r4, #0
 8003884:	940a      	str	r4, [sp, #40]	; 0x28
 8003886:	9d04      	ldr	r5, [sp, #16]
 8003888:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800388a:	f1a5 0230 	sub.w	r2, r5, #48	; 0x30
 800388e:	210a      	movs	r1, #10
 8003890:	fb01 2404 	mla	r4, r1, r4, r2
 8003894:	9a07      	ldr	r2, [sp, #28]
 8003896:	940a      	str	r4, [sp, #40]	; 0x28
 8003898:	f812 5b01 	ldrb.w	r5, [r2], #1
 800389c:	9504      	str	r5, [sp, #16]
 800389e:	f1a5 0130 	sub.w	r1, r5, #48	; 0x30
 80038a2:	2909      	cmp	r1, #9
 80038a4:	d8e8      	bhi.n	8003878 <_svfprintf_r+0x220>
 80038a6:	9207      	str	r2, [sp, #28]
 80038a8:	e7ed      	b.n	8003886 <_svfprintf_r+0x22e>
 80038aa:	f047 0708 	orr.w	r7, r7, #8
 80038ae:	e7a8      	b.n	8003802 <_svfprintf_r+0x1aa>
 80038b0:	f047 0740 	orr.w	r7, r7, #64	; 0x40
 80038b4:	e7a5      	b.n	8003802 <_svfprintf_r+0x1aa>
 80038b6:	9c07      	ldr	r4, [sp, #28]
 80038b8:	7822      	ldrb	r2, [r4, #0]
 80038ba:	2a6c      	cmp	r2, #108	; 0x6c
 80038bc:	d102      	bne.n	80038c4 <_svfprintf_r+0x26c>
 80038be:	3401      	adds	r4, #1
 80038c0:	9407      	str	r4, [sp, #28]
 80038c2:	e002      	b.n	80038ca <_svfprintf_r+0x272>
 80038c4:	f047 0710 	orr.w	r7, r7, #16
 80038c8:	e79b      	b.n	8003802 <_svfprintf_r+0x1aa>
 80038ca:	f047 0720 	orr.w	r7, r7, #32
 80038ce:	e798      	b.n	8003802 <_svfprintf_r+0x1aa>
 80038d0:	f8d8 3000 	ldr.w	r3, [r8]
 80038d4:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
 80038d8:	2500      	movs	r5, #0
 80038da:	f88d 5067 	strb.w	r5, [sp, #103]	; 0x67
 80038de:	f108 0804 	add.w	r8, r8, #4
 80038e2:	e2bf      	b.n	8003e64 <_svfprintf_r+0x80c>
 80038e4:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 80038e8:	f047 0710 	orr.w	r7, r7, #16
 80038ec:	06ba      	lsls	r2, r7, #26
 80038ee:	d508      	bpl.n	8003902 <_svfprintf_r+0x2aa>
 80038f0:	f108 0807 	add.w	r8, r8, #7
 80038f4:	f028 0307 	bic.w	r3, r8, #7
 80038f8:	f103 0808 	add.w	r8, r3, #8
 80038fc:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003900:	e018      	b.n	8003934 <_svfprintf_r+0x2dc>
 8003902:	f017 0f10 	tst.w	r7, #16
 8003906:	f108 0304 	add.w	r3, r8, #4
 800390a:	d00b      	beq.n	8003924 <_svfprintf_r+0x2cc>
 800390c:	f8d8 4000 	ldr.w	r4, [r8]
 8003910:	e00e      	b.n	8003930 <_svfprintf_r+0x2d8>
 8003912:	bf00      	nop
 8003914:	f3af 8000 	nop.w
	...
 8003920:	08007a09 	.word	0x08007a09
 8003924:	f8d8 4000 	ldr.w	r4, [r8]
 8003928:	f017 0f40 	tst.w	r7, #64	; 0x40
 800392c:	bf18      	it	ne
 800392e:	b224      	sxthne	r4, r4
 8003930:	17e5      	asrs	r5, r4, #31
 8003932:	4698      	mov	r8, r3
 8003934:	2c00      	cmp	r4, #0
 8003936:	f175 0100 	sbcs.w	r1, r5, #0
 800393a:	f280 820c 	bge.w	8003d56 <_svfprintf_r+0x6fe>
 800393e:	232d      	movs	r3, #45	; 0x2d
 8003940:	4264      	negs	r4, r4
 8003942:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 8003946:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 800394a:	e204      	b.n	8003d56 <_svfprintf_r+0x6fe>
 800394c:	9c04      	ldr	r4, [sp, #16]
 800394e:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 8003952:	f108 0807 	add.w	r8, r8, #7
 8003956:	f028 0307 	bic.w	r3, r8, #7
 800395a:	9706      	str	r7, [sp, #24]
 800395c:	940d      	str	r4, [sp, #52]	; 0x34
 800395e:	ed93 7b00 	vldr	d7, [r3]
 8003962:	ed8d 7b08 	vstr	d7, [sp, #32]
 8003966:	ed9d 0b08 	vldr	d0, [sp, #32]
 800396a:	f103 0808 	add.w	r8, r3, #8
 800396e:	f002 f973 	bl	8005c58 <__fpclassifyd>
 8003972:	2801      	cmp	r0, #1
 8003974:	d116      	bne.n	80039a4 <_svfprintf_r+0x34c>
 8003976:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800397a:	2200      	movs	r2, #0
 800397c:	2300      	movs	r3, #0
 800397e:	f7fd f86d 	bl	8000a5c <__aeabi_dcmplt>
 8003982:	b110      	cbz	r0, 800398a <_svfprintf_r+0x332>
 8003984:	232d      	movs	r3, #45	; 0x2d
 8003986:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 800398a:	4ba8      	ldr	r3, [pc, #672]	; (8003c2c <_svfprintf_r+0x5d4>)
 800398c:	4aa8      	ldr	r2, [pc, #672]	; (8003c30 <_svfprintf_r+0x5d8>)
 800398e:	9c04      	ldr	r4, [sp, #16]
 8003990:	2c47      	cmp	r4, #71	; 0x47
 8003992:	bfd8      	it	le
 8003994:	461a      	movle	r2, r3
 8003996:	9203      	str	r2, [sp, #12]
 8003998:	f027 0780 	bic.w	r7, r7, #128	; 0x80
 800399c:	f04f 0903 	mov.w	r9, #3
 80039a0:	2500      	movs	r5, #0
 80039a2:	e266      	b.n	8003e72 <_svfprintf_r+0x81a>
 80039a4:	ed9d 0b08 	vldr	d0, [sp, #32]
 80039a8:	f002 f956 	bl	8005c58 <__fpclassifyd>
 80039ac:	b958      	cbnz	r0, 80039c6 <_svfprintf_r+0x36e>
 80039ae:	4ba1      	ldr	r3, [pc, #644]	; (8003c34 <_svfprintf_r+0x5dc>)
 80039b0:	4aa1      	ldr	r2, [pc, #644]	; (8003c38 <_svfprintf_r+0x5e0>)
 80039b2:	9d04      	ldr	r5, [sp, #16]
 80039b4:	2d47      	cmp	r5, #71	; 0x47
 80039b6:	bfd8      	it	le
 80039b8:	461a      	movle	r2, r3
 80039ba:	9203      	str	r2, [sp, #12]
 80039bc:	f027 0780 	bic.w	r7, r7, #128	; 0x80
 80039c0:	f04f 0903 	mov.w	r9, #3
 80039c4:	e254      	b.n	8003e70 <_svfprintf_r+0x818>
 80039c6:	f1b9 3fff 	cmp.w	r9, #4294967295
 80039ca:	d00a      	beq.n	80039e2 <_svfprintf_r+0x38a>
 80039cc:	9c04      	ldr	r4, [sp, #16]
 80039ce:	f024 0320 	bic.w	r3, r4, #32
 80039d2:	2b47      	cmp	r3, #71	; 0x47
 80039d4:	d107      	bne.n	80039e6 <_svfprintf_r+0x38e>
 80039d6:	f1b9 0f00 	cmp.w	r9, #0
 80039da:	bf08      	it	eq
 80039dc:	f04f 0901 	moveq.w	r9, #1
 80039e0:	e001      	b.n	80039e6 <_svfprintf_r+0x38e>
 80039e2:	f04f 0906 	mov.w	r9, #6
 80039e6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	f447 7780 	orr.w	r7, r7, #256	; 0x100
 80039f0:	da07      	bge.n	8003a02 <_svfprintf_r+0x3aa>
 80039f2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80039f4:	9d08      	ldr	r5, [sp, #32]
 80039f6:	950e      	str	r5, [sp, #56]	; 0x38
 80039f8:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80039fc:	900f      	str	r0, [sp, #60]	; 0x3c
 80039fe:	242d      	movs	r4, #45	; 0x2d
 8003a00:	e004      	b.n	8003a0c <_svfprintf_r+0x3b4>
 8003a02:	ed9d 7b08 	vldr	d7, [sp, #32]
 8003a06:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8003a0a:	2400      	movs	r4, #0
 8003a0c:	9d04      	ldr	r5, [sp, #16]
 8003a0e:	9415      	str	r4, [sp, #84]	; 0x54
 8003a10:	f025 0420 	bic.w	r4, r5, #32
 8003a14:	2c46      	cmp	r4, #70	; 0x46
 8003a16:	d004      	beq.n	8003a22 <_svfprintf_r+0x3ca>
 8003a18:	2c45      	cmp	r4, #69	; 0x45
 8003a1a:	d105      	bne.n	8003a28 <_svfprintf_r+0x3d0>
 8003a1c:	f109 0501 	add.w	r5, r9, #1
 8003a20:	e003      	b.n	8003a2a <_svfprintf_r+0x3d2>
 8003a22:	464d      	mov	r5, r9
 8003a24:	2103      	movs	r1, #3
 8003a26:	e001      	b.n	8003a2c <_svfprintf_r+0x3d4>
 8003a28:	464d      	mov	r5, r9
 8003a2a:	2102      	movs	r1, #2
 8003a2c:	ab1c      	add	r3, sp, #112	; 0x70
 8003a2e:	9300      	str	r3, [sp, #0]
 8003a30:	ab1f      	add	r3, sp, #124	; 0x7c
 8003a32:	9301      	str	r3, [sp, #4]
 8003a34:	4650      	mov	r0, sl
 8003a36:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 8003a3a:	462a      	mov	r2, r5
 8003a3c:	ab1b      	add	r3, sp, #108	; 0x6c
 8003a3e:	f000 fe3b 	bl	80046b8 <_dtoa_r>
 8003a42:	2c47      	cmp	r4, #71	; 0x47
 8003a44:	9003      	str	r0, [sp, #12]
 8003a46:	d10a      	bne.n	8003a5e <_svfprintf_r+0x406>
 8003a48:	9806      	ldr	r0, [sp, #24]
 8003a4a:	07c3      	lsls	r3, r0, #31
 8003a4c:	d407      	bmi.n	8003a5e <_svfprintf_r+0x406>
 8003a4e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003a50:	9d03      	ldr	r5, [sp, #12]
 8003a52:	2c47      	cmp	r4, #71	; 0x47
 8003a54:	ebc5 0303 	rsb	r3, r5, r3
 8003a58:	9305      	str	r3, [sp, #20]
 8003a5a:	d137      	bne.n	8003acc <_svfprintf_r+0x474>
 8003a5c:	e02d      	b.n	8003aba <_svfprintf_r+0x462>
 8003a5e:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8003a62:	2c46      	cmp	r4, #70	; 0x46
 8003a64:	44ac      	add	ip, r5
 8003a66:	d113      	bne.n	8003a90 <_svfprintf_r+0x438>
 8003a68:	9803      	ldr	r0, [sp, #12]
 8003a6a:	7803      	ldrb	r3, [r0, #0]
 8003a6c:	2b30      	cmp	r3, #48	; 0x30
 8003a6e:	d10d      	bne.n	8003a8c <_svfprintf_r+0x434>
 8003a70:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8003a74:	2200      	movs	r2, #0
 8003a76:	2300      	movs	r3, #0
 8003a78:	f8cd c008 	str.w	ip, [sp, #8]
 8003a7c:	f7fc ffe4 	bl	8000a48 <__aeabi_dcmpeq>
 8003a80:	f8dd c008 	ldr.w	ip, [sp, #8]
 8003a84:	b910      	cbnz	r0, 8003a8c <_svfprintf_r+0x434>
 8003a86:	f1c5 0501 	rsb	r5, r5, #1
 8003a8a:	951b      	str	r5, [sp, #108]	; 0x6c
 8003a8c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003a8e:	449c      	add	ip, r3
 8003a90:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8003a94:	2200      	movs	r2, #0
 8003a96:	2300      	movs	r3, #0
 8003a98:	f8cd c008 	str.w	ip, [sp, #8]
 8003a9c:	f7fc ffd4 	bl	8000a48 <__aeabi_dcmpeq>
 8003aa0:	f8dd c008 	ldr.w	ip, [sp, #8]
 8003aa4:	b108      	cbz	r0, 8003aaa <_svfprintf_r+0x452>
 8003aa6:	f8cd c07c 	str.w	ip, [sp, #124]	; 0x7c
 8003aaa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003aac:	4563      	cmp	r3, ip
 8003aae:	d2ce      	bcs.n	8003a4e <_svfprintf_r+0x3f6>
 8003ab0:	1c5a      	adds	r2, r3, #1
 8003ab2:	921f      	str	r2, [sp, #124]	; 0x7c
 8003ab4:	2230      	movs	r2, #48	; 0x30
 8003ab6:	701a      	strb	r2, [r3, #0]
 8003ab8:	e7f7      	b.n	8003aaa <_svfprintf_r+0x452>
 8003aba:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003abc:	1cdc      	adds	r4, r3, #3
 8003abe:	db01      	blt.n	8003ac4 <_svfprintf_r+0x46c>
 8003ac0:	454b      	cmp	r3, r9
 8003ac2:	dd62      	ble.n	8003b8a <_svfprintf_r+0x532>
 8003ac4:	9c04      	ldr	r4, [sp, #16]
 8003ac6:	3c02      	subs	r4, #2
 8003ac8:	9404      	str	r4, [sp, #16]
 8003aca:	e002      	b.n	8003ad2 <_svfprintf_r+0x47a>
 8003acc:	9d04      	ldr	r5, [sp, #16]
 8003ace:	2d65      	cmp	r5, #101	; 0x65
 8003ad0:	dc42      	bgt.n	8003b58 <_svfprintf_r+0x500>
 8003ad2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003ad4:	9c04      	ldr	r4, [sp, #16]
 8003ad6:	f88d 4074 	strb.w	r4, [sp, #116]	; 0x74
 8003ada:	3b01      	subs	r3, #1
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	931b      	str	r3, [sp, #108]	; 0x6c
 8003ae0:	bfba      	itte	lt
 8003ae2:	425b      	neglt	r3, r3
 8003ae4:	222d      	movlt	r2, #45	; 0x2d
 8003ae6:	222b      	movge	r2, #43	; 0x2b
 8003ae8:	2b09      	cmp	r3, #9
 8003aea:	f88d 2075 	strb.w	r2, [sp, #117]	; 0x75
 8003aee:	dd1c      	ble.n	8003b2a <_svfprintf_r+0x4d2>
 8003af0:	f10d 0282 	add.w	r2, sp, #130	; 0x82
 8003af4:	200a      	movs	r0, #10
 8003af6:	fb93 f1f0 	sdiv	r1, r3, r0
 8003afa:	fb00 3311 	mls	r3, r0, r1, r3
 8003afe:	3330      	adds	r3, #48	; 0x30
 8003b00:	2909      	cmp	r1, #9
 8003b02:	4614      	mov	r4, r2
 8003b04:	f802 3901 	strb.w	r3, [r2], #-1
 8003b08:	460b      	mov	r3, r1
 8003b0a:	dcf3      	bgt.n	8003af4 <_svfprintf_r+0x49c>
 8003b0c:	f101 0330 	add.w	r3, r1, #48	; 0x30
 8003b10:	f804 3d01 	strb.w	r3, [r4, #-1]!
 8003b14:	f10d 0376 	add.w	r3, sp, #118	; 0x76
 8003b18:	f10d 0283 	add.w	r2, sp, #131	; 0x83
 8003b1c:	4294      	cmp	r4, r2
 8003b1e:	d20b      	bcs.n	8003b38 <_svfprintf_r+0x4e0>
 8003b20:	f814 2b01 	ldrb.w	r2, [r4], #1
 8003b24:	f803 2b01 	strb.w	r2, [r3], #1
 8003b28:	e7f6      	b.n	8003b18 <_svfprintf_r+0x4c0>
 8003b2a:	2230      	movs	r2, #48	; 0x30
 8003b2c:	4413      	add	r3, r2
 8003b2e:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 8003b32:	f88d 2076 	strb.w	r2, [sp, #118]	; 0x76
 8003b36:	ab1e      	add	r3, sp, #120	; 0x78
 8003b38:	9d05      	ldr	r5, [sp, #20]
 8003b3a:	aa1d      	add	r2, sp, #116	; 0x74
 8003b3c:	1a9a      	subs	r2, r3, r2
 8003b3e:	4691      	mov	r9, r2
 8003b40:	2d01      	cmp	r5, #1
 8003b42:	9216      	str	r2, [sp, #88]	; 0x58
 8003b44:	44a9      	add	r9, r5
 8003b46:	dc03      	bgt.n	8003b50 <_svfprintf_r+0x4f8>
 8003b48:	9d06      	ldr	r5, [sp, #24]
 8003b4a:	f015 0401 	ands.w	r4, r5, #1
 8003b4e:	d037      	beq.n	8003bc0 <_svfprintf_r+0x568>
 8003b50:	f109 0901 	add.w	r9, r9, #1
 8003b54:	2400      	movs	r4, #0
 8003b56:	e033      	b.n	8003bc0 <_svfprintf_r+0x568>
 8003b58:	9c04      	ldr	r4, [sp, #16]
 8003b5a:	2c66      	cmp	r4, #102	; 0x66
 8003b5c:	d115      	bne.n	8003b8a <_svfprintf_r+0x532>
 8003b5e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	dd09      	ble.n	8003b78 <_svfprintf_r+0x520>
 8003b64:	f1b9 0f00 	cmp.w	r9, #0
 8003b68:	d102      	bne.n	8003b70 <_svfprintf_r+0x518>
 8003b6a:	9d06      	ldr	r5, [sp, #24]
 8003b6c:	07e8      	lsls	r0, r5, #31
 8003b6e:	d523      	bpl.n	8003bb8 <_svfprintf_r+0x560>
 8003b70:	f109 0901 	add.w	r9, r9, #1
 8003b74:	444b      	add	r3, r9
 8003b76:	e01f      	b.n	8003bb8 <_svfprintf_r+0x560>
 8003b78:	f1b9 0f00 	cmp.w	r9, #0
 8003b7c:	d102      	bne.n	8003b84 <_svfprintf_r+0x52c>
 8003b7e:	9c06      	ldr	r4, [sp, #24]
 8003b80:	07e1      	lsls	r1, r4, #31
 8003b82:	d515      	bpl.n	8003bb0 <_svfprintf_r+0x558>
 8003b84:	f109 0302 	add.w	r3, r9, #2
 8003b88:	e016      	b.n	8003bb8 <_svfprintf_r+0x560>
 8003b8a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003b8c:	9d05      	ldr	r5, [sp, #20]
 8003b8e:	42ab      	cmp	r3, r5
 8003b90:	db04      	blt.n	8003b9c <_svfprintf_r+0x544>
 8003b92:	9c06      	ldr	r4, [sp, #24]
 8003b94:	07e2      	lsls	r2, r4, #31
 8003b96:	d50d      	bpl.n	8003bb4 <_svfprintf_r+0x55c>
 8003b98:	3301      	adds	r3, #1
 8003b9a:	e006      	b.n	8003baa <_svfprintf_r+0x552>
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	9c05      	ldr	r4, [sp, #20]
 8003ba0:	bfd4      	ite	le
 8003ba2:	f1c3 0302 	rsble	r3, r3, #2
 8003ba6:	2301      	movgt	r3, #1
 8003ba8:	4423      	add	r3, r4
 8003baa:	2567      	movs	r5, #103	; 0x67
 8003bac:	950d      	str	r5, [sp, #52]	; 0x34
 8003bae:	e003      	b.n	8003bb8 <_svfprintf_r+0x560>
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e001      	b.n	8003bb8 <_svfprintf_r+0x560>
 8003bb4:	2467      	movs	r4, #103	; 0x67
 8003bb6:	940d      	str	r4, [sp, #52]	; 0x34
 8003bb8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8003bba:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 8003bbc:	9504      	str	r5, [sp, #16]
 8003bbe:	4699      	mov	r9, r3
 8003bc0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8003bc2:	b115      	cbz	r5, 8003bca <_svfprintf_r+0x572>
 8003bc4:	232d      	movs	r3, #45	; 0x2d
 8003bc6:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 8003bca:	2500      	movs	r5, #0
 8003bcc:	e152      	b.n	8003e74 <_svfprintf_r+0x81c>
 8003bce:	f017 0f20 	tst.w	r7, #32
 8003bd2:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 8003bd6:	f108 0104 	add.w	r1, r8, #4
 8003bda:	d008      	beq.n	8003bee <_svfprintf_r+0x596>
 8003bdc:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8003bde:	f8d8 0000 	ldr.w	r0, [r8]
 8003be2:	17e5      	asrs	r5, r4, #31
 8003be4:	4622      	mov	r2, r4
 8003be6:	462b      	mov	r3, r5
 8003be8:	e9c0 2300 	strd	r2, r3, [r0]
 8003bec:	e00c      	b.n	8003c08 <_svfprintf_r+0x5b0>
 8003bee:	06fb      	lsls	r3, r7, #27
 8003bf0:	d406      	bmi.n	8003c00 <_svfprintf_r+0x5a8>
 8003bf2:	067d      	lsls	r5, r7, #25
 8003bf4:	d504      	bpl.n	8003c00 <_svfprintf_r+0x5a8>
 8003bf6:	f8d8 3000 	ldr.w	r3, [r8]
 8003bfa:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8003bfc:	801c      	strh	r4, [r3, #0]
 8003bfe:	e003      	b.n	8003c08 <_svfprintf_r+0x5b0>
 8003c00:	f8d8 3000 	ldr.w	r3, [r8]
 8003c04:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8003c06:	601d      	str	r5, [r3, #0]
 8003c08:	4688      	mov	r8, r1
 8003c0a:	e55a      	b.n	80036c2 <_svfprintf_r+0x6a>
 8003c0c:	f047 0710 	orr.w	r7, r7, #16
 8003c10:	f017 0320 	ands.w	r3, r7, #32
 8003c14:	d012      	beq.n	8003c3c <_svfprintf_r+0x5e4>
 8003c16:	f108 0807 	add.w	r8, r8, #7
 8003c1a:	f028 0307 	bic.w	r3, r8, #7
 8003c1e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003c22:	f103 0808 	add.w	r8, r3, #8
 8003c26:	2300      	movs	r3, #0
 8003c28:	e091      	b.n	8003d4e <_svfprintf_r+0x6f6>
 8003c2a:	bf00      	nop
 8003c2c:	080079f9 	.word	0x080079f9
 8003c30:	080079fd 	.word	0x080079fd
 8003c34:	08007a01 	.word	0x08007a01
 8003c38:	08007a05 	.word	0x08007a05
 8003c3c:	f017 0110 	ands.w	r1, r7, #16
 8003c40:	f108 0204 	add.w	r2, r8, #4
 8003c44:	d107      	bne.n	8003c56 <_svfprintf_r+0x5fe>
 8003c46:	f017 0340 	ands.w	r3, r7, #64	; 0x40
 8003c4a:	d004      	beq.n	8003c56 <_svfprintf_r+0x5fe>
 8003c4c:	f8b8 4000 	ldrh.w	r4, [r8]
 8003c50:	2500      	movs	r5, #0
 8003c52:	4690      	mov	r8, r2
 8003c54:	e7e7      	b.n	8003c26 <_svfprintf_r+0x5ce>
 8003c56:	f8d8 4000 	ldr.w	r4, [r8]
 8003c5a:	2500      	movs	r5, #0
 8003c5c:	4690      	mov	r8, r2
 8003c5e:	e076      	b.n	8003d4e <_svfprintf_r+0x6f6>
 8003c60:	2330      	movs	r3, #48	; 0x30
 8003c62:	2278      	movs	r2, #120	; 0x78
 8003c64:	48a8      	ldr	r0, [pc, #672]	; (8003f08 <_svfprintf_r+0x8b0>)
 8003c66:	f8d8 4000 	ldr.w	r4, [r8]
 8003c6a:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
 8003c6e:	2500      	movs	r5, #0
 8003c70:	f047 0702 	orr.w	r7, r7, #2
 8003c74:	f88d 2069 	strb.w	r2, [sp, #105]	; 0x69
 8003c78:	f108 0804 	add.w	r8, r8, #4
 8003c7c:	9017      	str	r0, [sp, #92]	; 0x5c
 8003c7e:	2302      	movs	r3, #2
 8003c80:	9204      	str	r2, [sp, #16]
 8003c82:	e064      	b.n	8003d4e <_svfprintf_r+0x6f6>
 8003c84:	4643      	mov	r3, r8
 8003c86:	2500      	movs	r5, #0
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	9303      	str	r3, [sp, #12]
 8003c8c:	45a9      	cmp	r9, r5
 8003c8e:	f108 0804 	add.w	r8, r8, #4
 8003c92:	f88d 5067 	strb.w	r5, [sp, #103]	; 0x67
 8003c96:	db0d      	blt.n	8003cb4 <_svfprintf_r+0x65c>
 8003c98:	4618      	mov	r0, r3
 8003c9a:	4629      	mov	r1, r5
 8003c9c:	464a      	mov	r2, r9
 8003c9e:	f001 fce1 	bl	8005664 <memchr>
 8003ca2:	2800      	cmp	r0, #0
 8003ca4:	f000 80e4 	beq.w	8003e70 <_svfprintf_r+0x818>
 8003ca8:	9c03      	ldr	r4, [sp, #12]
 8003caa:	1b00      	subs	r0, r0, r4
 8003cac:	4548      	cmp	r0, r9
 8003cae:	bfb8      	it	lt
 8003cb0:	4681      	movlt	r9, r0
 8003cb2:	e0de      	b.n	8003e72 <_svfprintf_r+0x81a>
 8003cb4:	9803      	ldr	r0, [sp, #12]
 8003cb6:	f002 f803 	bl	8005cc0 <strlen>
 8003cba:	4681      	mov	r9, r0
 8003cbc:	e0d9      	b.n	8003e72 <_svfprintf_r+0x81a>
 8003cbe:	f047 0710 	orr.w	r7, r7, #16
 8003cc2:	06bc      	lsls	r4, r7, #26
 8003cc4:	d508      	bpl.n	8003cd8 <_svfprintf_r+0x680>
 8003cc6:	f108 0807 	add.w	r8, r8, #7
 8003cca:	f028 0307 	bic.w	r3, r8, #7
 8003cce:	f103 0808 	add.w	r8, r3, #8
 8003cd2:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003cd6:	e00d      	b.n	8003cf4 <_svfprintf_r+0x69c>
 8003cd8:	f017 0f10 	tst.w	r7, #16
 8003cdc:	f108 0304 	add.w	r3, r8, #4
 8003ce0:	d104      	bne.n	8003cec <_svfprintf_r+0x694>
 8003ce2:	0678      	lsls	r0, r7, #25
 8003ce4:	d502      	bpl.n	8003cec <_svfprintf_r+0x694>
 8003ce6:	f8b8 4000 	ldrh.w	r4, [r8]
 8003cea:	e001      	b.n	8003cf0 <_svfprintf_r+0x698>
 8003cec:	f8d8 4000 	ldr.w	r4, [r8]
 8003cf0:	2500      	movs	r5, #0
 8003cf2:	4698      	mov	r8, r3
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	e02a      	b.n	8003d4e <_svfprintf_r+0x6f6>
 8003cf8:	4d83      	ldr	r5, [pc, #524]	; (8003f08 <_svfprintf_r+0x8b0>)
 8003cfa:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 8003cfe:	9517      	str	r5, [sp, #92]	; 0x5c
 8003d00:	06b9      	lsls	r1, r7, #26
 8003d02:	d508      	bpl.n	8003d16 <_svfprintf_r+0x6be>
 8003d04:	f108 0807 	add.w	r8, r8, #7
 8003d08:	f028 0307 	bic.w	r3, r8, #7
 8003d0c:	f103 0808 	add.w	r8, r3, #8
 8003d10:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003d14:	e00d      	b.n	8003d32 <_svfprintf_r+0x6da>
 8003d16:	f017 0f10 	tst.w	r7, #16
 8003d1a:	f108 0304 	add.w	r3, r8, #4
 8003d1e:	d104      	bne.n	8003d2a <_svfprintf_r+0x6d2>
 8003d20:	067a      	lsls	r2, r7, #25
 8003d22:	d502      	bpl.n	8003d2a <_svfprintf_r+0x6d2>
 8003d24:	f8b8 4000 	ldrh.w	r4, [r8]
 8003d28:	e001      	b.n	8003d2e <_svfprintf_r+0x6d6>
 8003d2a:	f8d8 4000 	ldr.w	r4, [r8]
 8003d2e:	2500      	movs	r5, #0
 8003d30:	4698      	mov	r8, r3
 8003d32:	07fb      	lsls	r3, r7, #31
 8003d34:	d50a      	bpl.n	8003d4c <_svfprintf_r+0x6f4>
 8003d36:	ea54 0005 	orrs.w	r0, r4, r5
 8003d3a:	d007      	beq.n	8003d4c <_svfprintf_r+0x6f4>
 8003d3c:	2330      	movs	r3, #48	; 0x30
 8003d3e:	9904      	ldr	r1, [sp, #16]
 8003d40:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
 8003d44:	f88d 1069 	strb.w	r1, [sp, #105]	; 0x69
 8003d48:	f047 0702 	orr.w	r7, r7, #2
 8003d4c:	2302      	movs	r3, #2
 8003d4e:	2200      	movs	r2, #0
 8003d50:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8003d54:	e000      	b.n	8003d58 <_svfprintf_r+0x700>
 8003d56:	2301      	movs	r3, #1
 8003d58:	f1b9 0f00 	cmp.w	r9, #0
 8003d5c:	bfa8      	it	ge
 8003d5e:	f027 0780 	bicge.w	r7, r7, #128	; 0x80
 8003d62:	ea54 0205 	orrs.w	r2, r4, r5
 8003d66:	d102      	bne.n	8003d6e <_svfprintf_r+0x716>
 8003d68:	f1b9 0f00 	cmp.w	r9, #0
 8003d6c:	d05a      	beq.n	8003e24 <_svfprintf_r+0x7cc>
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d01f      	beq.n	8003db2 <_svfprintf_r+0x75a>
 8003d72:	2b02      	cmp	r3, #2
 8003d74:	f10d 03b7 	add.w	r3, sp, #183	; 0xb7
 8003d78:	d041      	beq.n	8003dfe <_svfprintf_r+0x7a6>
 8003d7a:	08e1      	lsrs	r1, r4, #3
 8003d7c:	ea41 7045 	orr.w	r0, r1, r5, lsl #29
 8003d80:	08e9      	lsrs	r1, r5, #3
 8003d82:	9010      	str	r0, [sp, #64]	; 0x40
 8003d84:	9111      	str	r1, [sp, #68]	; 0x44
 8003d86:	f004 0207 	and.w	r2, r4, #7
 8003d8a:	e9dd 4510 	ldrd	r4, r5, [sp, #64]	; 0x40
 8003d8e:	3230      	adds	r2, #48	; 0x30
 8003d90:	ea54 0005 	orrs.w	r0, r4, r5
 8003d94:	9303      	str	r3, [sp, #12]
 8003d96:	701a      	strb	r2, [r3, #0]
 8003d98:	f103 33ff 	add.w	r3, r3, #4294967295
 8003d9c:	d1ed      	bne.n	8003d7a <_svfprintf_r+0x722>
 8003d9e:	07f8      	lsls	r0, r7, #31
 8003da0:	9903      	ldr	r1, [sp, #12]
 8003da2:	d54c      	bpl.n	8003e3e <_svfprintf_r+0x7e6>
 8003da4:	2a30      	cmp	r2, #48	; 0x30
 8003da6:	d04a      	beq.n	8003e3e <_svfprintf_r+0x7e6>
 8003da8:	9303      	str	r3, [sp, #12]
 8003daa:	2330      	movs	r3, #48	; 0x30
 8003dac:	f801 3c01 	strb.w	r3, [r1, #-1]
 8003db0:	e045      	b.n	8003e3e <_svfprintf_r+0x7e6>
 8003db2:	2d00      	cmp	r5, #0
 8003db4:	bf08      	it	eq
 8003db6:	2c0a      	cmpeq	r4, #10
 8003db8:	d205      	bcs.n	8003dc6 <_svfprintf_r+0x76e>
 8003dba:	3430      	adds	r4, #48	; 0x30
 8003dbc:	f88d 40b7 	strb.w	r4, [sp, #183]	; 0xb7
 8003dc0:	f10d 04b7 	add.w	r4, sp, #183	; 0xb7
 8003dc4:	e03a      	b.n	8003e3c <_svfprintf_r+0x7e4>
 8003dc6:	f10d 00b7 	add.w	r0, sp, #183	; 0xb7
 8003dca:	9006      	str	r0, [sp, #24]
 8003dcc:	9906      	ldr	r1, [sp, #24]
 8003dce:	9103      	str	r1, [sp, #12]
 8003dd0:	4620      	mov	r0, r4
 8003dd2:	4629      	mov	r1, r5
 8003dd4:	220a      	movs	r2, #10
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	f7fc fe90 	bl	8000afc <__aeabi_uldivmod>
 8003ddc:	9b06      	ldr	r3, [sp, #24]
 8003dde:	3230      	adds	r2, #48	; 0x30
 8003de0:	f803 2901 	strb.w	r2, [r3], #-1
 8003de4:	4620      	mov	r0, r4
 8003de6:	9306      	str	r3, [sp, #24]
 8003de8:	4629      	mov	r1, r5
 8003dea:	220a      	movs	r2, #10
 8003dec:	2300      	movs	r3, #0
 8003dee:	f7fc fe85 	bl	8000afc <__aeabi_uldivmod>
 8003df2:	4604      	mov	r4, r0
 8003df4:	460d      	mov	r5, r1
 8003df6:	ea54 0005 	orrs.w	r0, r4, r5
 8003dfa:	d1e7      	bne.n	8003dcc <_svfprintf_r+0x774>
 8003dfc:	e01f      	b.n	8003e3e <_svfprintf_r+0x7e6>
 8003dfe:	f004 020f 	and.w	r2, r4, #15
 8003e02:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8003e04:	9303      	str	r3, [sp, #12]
 8003e06:	5c8a      	ldrb	r2, [r1, r2]
 8003e08:	f803 2901 	strb.w	r2, [r3], #-1
 8003e0c:	0922      	lsrs	r2, r4, #4
 8003e0e:	ea42 7005 	orr.w	r0, r2, r5, lsl #28
 8003e12:	0929      	lsrs	r1, r5, #4
 8003e14:	9012      	str	r0, [sp, #72]	; 0x48
 8003e16:	9113      	str	r1, [sp, #76]	; 0x4c
 8003e18:	e9dd 4512 	ldrd	r4, r5, [sp, #72]	; 0x48
 8003e1c:	ea54 0205 	orrs.w	r2, r4, r5
 8003e20:	d1ed      	bne.n	8003dfe <_svfprintf_r+0x7a6>
 8003e22:	e00c      	b.n	8003e3e <_svfprintf_r+0x7e6>
 8003e24:	b933      	cbnz	r3, 8003e34 <_svfprintf_r+0x7dc>
 8003e26:	07fb      	lsls	r3, r7, #31
 8003e28:	d507      	bpl.n	8003e3a <_svfprintf_r+0x7e2>
 8003e2a:	ac3e      	add	r4, sp, #248	; 0xf8
 8003e2c:	2330      	movs	r3, #48	; 0x30
 8003e2e:	f804 3d41 	strb.w	r3, [r4, #-65]!
 8003e32:	e003      	b.n	8003e3c <_svfprintf_r+0x7e4>
 8003e34:	ad2e      	add	r5, sp, #184	; 0xb8
 8003e36:	9503      	str	r5, [sp, #12]
 8003e38:	e001      	b.n	8003e3e <_svfprintf_r+0x7e6>
 8003e3a:	ac2e      	add	r4, sp, #184	; 0xb8
 8003e3c:	9403      	str	r4, [sp, #12]
 8003e3e:	9c03      	ldr	r4, [sp, #12]
 8003e40:	464d      	mov	r5, r9
 8003e42:	f10d 09b8 	add.w	r9, sp, #184	; 0xb8
 8003e46:	ebc4 0909 	rsb	r9, r4, r9
 8003e4a:	2400      	movs	r4, #0
 8003e4c:	e012      	b.n	8003e74 <_svfprintf_r+0x81c>
 8003e4e:	9d04      	ldr	r5, [sp, #16]
 8003e50:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 8003e54:	2d00      	cmp	r5, #0
 8003e56:	f000 8389 	beq.w	800456c <_svfprintf_r+0xf14>
 8003e5a:	f88d 5090 	strb.w	r5, [sp, #144]	; 0x90
 8003e5e:	2500      	movs	r5, #0
 8003e60:	f88d 5067 	strb.w	r5, [sp, #103]	; 0x67
 8003e64:	a824      	add	r0, sp, #144	; 0x90
 8003e66:	f04f 0901 	mov.w	r9, #1
 8003e6a:	462c      	mov	r4, r5
 8003e6c:	9003      	str	r0, [sp, #12]
 8003e6e:	e001      	b.n	8003e74 <_svfprintf_r+0x81c>
 8003e70:	4605      	mov	r5, r0
 8003e72:	462c      	mov	r4, r5
 8003e74:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
 8003e78:	45a9      	cmp	r9, r5
 8003e7a:	bfac      	ite	ge
 8003e7c:	4649      	movge	r1, r9
 8003e7e:	4629      	movlt	r1, r5
 8003e80:	9106      	str	r1, [sp, #24]
 8003e82:	b10b      	cbz	r3, 8003e88 <_svfprintf_r+0x830>
 8003e84:	3101      	adds	r1, #1
 8003e86:	9106      	str	r1, [sp, #24]
 8003e88:	f017 0302 	ands.w	r3, r7, #2
 8003e8c:	930d      	str	r3, [sp, #52]	; 0x34
 8003e8e:	d002      	beq.n	8003e96 <_svfprintf_r+0x83e>
 8003e90:	9806      	ldr	r0, [sp, #24]
 8003e92:	3002      	adds	r0, #2
 8003e94:	9006      	str	r0, [sp, #24]
 8003e96:	f017 0384 	ands.w	r3, r7, #132	; 0x84
 8003e9a:	9315      	str	r3, [sp, #84]	; 0x54
 8003e9c:	d141      	bne.n	8003f22 <_svfprintf_r+0x8ca>
 8003e9e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003ea0:	9906      	ldr	r1, [sp, #24]
 8003ea2:	ebc1 0c00 	rsb	ip, r1, r0
 8003ea6:	f1bc 0f00 	cmp.w	ip, #0
 8003eaa:	dd3a      	ble.n	8003f22 <_svfprintf_r+0x8ca>
 8003eac:	4b17      	ldr	r3, [pc, #92]	; (8003f0c <_svfprintf_r+0x8b4>)
 8003eae:	6033      	str	r3, [r6, #0]
 8003eb0:	f1bc 0f10 	cmp.w	ip, #16
 8003eb4:	dd1b      	ble.n	8003eee <_svfprintf_r+0x896>
 8003eb6:	2310      	movs	r3, #16
 8003eb8:	6073      	str	r3, [r6, #4]
 8003eba:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003ebc:	3310      	adds	r3, #16
 8003ebe:	9323      	str	r3, [sp, #140]	; 0x8c
 8003ec0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003ec2:	3301      	adds	r3, #1
 8003ec4:	2b07      	cmp	r3, #7
 8003ec6:	9322      	str	r3, [sp, #136]	; 0x88
 8003ec8:	dc01      	bgt.n	8003ece <_svfprintf_r+0x876>
 8003eca:	3608      	adds	r6, #8
 8003ecc:	e00c      	b.n	8003ee8 <_svfprintf_r+0x890>
 8003ece:	4650      	mov	r0, sl
 8003ed0:	4659      	mov	r1, fp
 8003ed2:	aa21      	add	r2, sp, #132	; 0x84
 8003ed4:	f8cd c008 	str.w	ip, [sp, #8]
 8003ed8:	f001 fefa 	bl	8005cd0 <__ssprint_r>
 8003edc:	f8dd c008 	ldr.w	ip, [sp, #8]
 8003ee0:	2800      	cmp	r0, #0
 8003ee2:	f040 834a 	bne.w	800457a <_svfprintf_r+0xf22>
 8003ee6:	ae2e      	add	r6, sp, #184	; 0xb8
 8003ee8:	f1ac 0c10 	sub.w	ip, ip, #16
 8003eec:	e7de      	b.n	8003eac <_svfprintf_r+0x854>
 8003eee:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003ef0:	f8c6 c004 	str.w	ip, [r6, #4]
 8003ef4:	4463      	add	r3, ip
 8003ef6:	9323      	str	r3, [sp, #140]	; 0x8c
 8003ef8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003efa:	3301      	adds	r3, #1
 8003efc:	2b07      	cmp	r3, #7
 8003efe:	9322      	str	r3, [sp, #136]	; 0x88
 8003f00:	dc06      	bgt.n	8003f10 <_svfprintf_r+0x8b8>
 8003f02:	3608      	adds	r6, #8
 8003f04:	e00d      	b.n	8003f22 <_svfprintf_r+0x8ca>
 8003f06:	bf00      	nop
 8003f08:	08007a1a 	.word	0x08007a1a
 8003f0c:	08007a2d 	.word	0x08007a2d
 8003f10:	4650      	mov	r0, sl
 8003f12:	4659      	mov	r1, fp
 8003f14:	aa21      	add	r2, sp, #132	; 0x84
 8003f16:	f001 fedb 	bl	8005cd0 <__ssprint_r>
 8003f1a:	2800      	cmp	r0, #0
 8003f1c:	f040 832d 	bne.w	800457a <_svfprintf_r+0xf22>
 8003f20:	ae2e      	add	r6, sp, #184	; 0xb8
 8003f22:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
 8003f26:	b1bb      	cbz	r3, 8003f58 <_svfprintf_r+0x900>
 8003f28:	f10d 0367 	add.w	r3, sp, #103	; 0x67
 8003f2c:	6033      	str	r3, [r6, #0]
 8003f2e:	2301      	movs	r3, #1
 8003f30:	6073      	str	r3, [r6, #4]
 8003f32:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003f34:	3301      	adds	r3, #1
 8003f36:	9323      	str	r3, [sp, #140]	; 0x8c
 8003f38:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003f3a:	3301      	adds	r3, #1
 8003f3c:	2b07      	cmp	r3, #7
 8003f3e:	9322      	str	r3, [sp, #136]	; 0x88
 8003f40:	dc01      	bgt.n	8003f46 <_svfprintf_r+0x8ee>
 8003f42:	3608      	adds	r6, #8
 8003f44:	e008      	b.n	8003f58 <_svfprintf_r+0x900>
 8003f46:	4650      	mov	r0, sl
 8003f48:	4659      	mov	r1, fp
 8003f4a:	aa21      	add	r2, sp, #132	; 0x84
 8003f4c:	f001 fec0 	bl	8005cd0 <__ssprint_r>
 8003f50:	2800      	cmp	r0, #0
 8003f52:	f040 8312 	bne.w	800457a <_svfprintf_r+0xf22>
 8003f56:	ae2e      	add	r6, sp, #184	; 0xb8
 8003f58:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003f5a:	b1b3      	cbz	r3, 8003f8a <_svfprintf_r+0x932>
 8003f5c:	ab1a      	add	r3, sp, #104	; 0x68
 8003f5e:	6033      	str	r3, [r6, #0]
 8003f60:	2302      	movs	r3, #2
 8003f62:	6073      	str	r3, [r6, #4]
 8003f64:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003f66:	3302      	adds	r3, #2
 8003f68:	9323      	str	r3, [sp, #140]	; 0x8c
 8003f6a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003f6c:	3301      	adds	r3, #1
 8003f6e:	2b07      	cmp	r3, #7
 8003f70:	9322      	str	r3, [sp, #136]	; 0x88
 8003f72:	dc01      	bgt.n	8003f78 <_svfprintf_r+0x920>
 8003f74:	3608      	adds	r6, #8
 8003f76:	e008      	b.n	8003f8a <_svfprintf_r+0x932>
 8003f78:	4650      	mov	r0, sl
 8003f7a:	4659      	mov	r1, fp
 8003f7c:	aa21      	add	r2, sp, #132	; 0x84
 8003f7e:	f001 fea7 	bl	8005cd0 <__ssprint_r>
 8003f82:	2800      	cmp	r0, #0
 8003f84:	f040 82f9 	bne.w	800457a <_svfprintf_r+0xf22>
 8003f88:	ae2e      	add	r6, sp, #184	; 0xb8
 8003f8a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003f8c:	2b80      	cmp	r3, #128	; 0x80
 8003f8e:	d13c      	bne.n	800400a <_svfprintf_r+0x9b2>
 8003f90:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003f92:	9906      	ldr	r1, [sp, #24]
 8003f94:	ebc1 0c00 	rsb	ip, r1, r0
 8003f98:	f1bc 0f00 	cmp.w	ip, #0
 8003f9c:	dd35      	ble.n	800400a <_svfprintf_r+0x9b2>
 8003f9e:	4b9c      	ldr	r3, [pc, #624]	; (8004210 <_svfprintf_r+0xbb8>)
 8003fa0:	6033      	str	r3, [r6, #0]
 8003fa2:	f1bc 0f10 	cmp.w	ip, #16
 8003fa6:	dd1b      	ble.n	8003fe0 <_svfprintf_r+0x988>
 8003fa8:	2310      	movs	r3, #16
 8003faa:	6073      	str	r3, [r6, #4]
 8003fac:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003fae:	3310      	adds	r3, #16
 8003fb0:	9323      	str	r3, [sp, #140]	; 0x8c
 8003fb2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003fb4:	3301      	adds	r3, #1
 8003fb6:	2b07      	cmp	r3, #7
 8003fb8:	9322      	str	r3, [sp, #136]	; 0x88
 8003fba:	dc01      	bgt.n	8003fc0 <_svfprintf_r+0x968>
 8003fbc:	3608      	adds	r6, #8
 8003fbe:	e00c      	b.n	8003fda <_svfprintf_r+0x982>
 8003fc0:	4650      	mov	r0, sl
 8003fc2:	4659      	mov	r1, fp
 8003fc4:	aa21      	add	r2, sp, #132	; 0x84
 8003fc6:	f8cd c008 	str.w	ip, [sp, #8]
 8003fca:	f001 fe81 	bl	8005cd0 <__ssprint_r>
 8003fce:	f8dd c008 	ldr.w	ip, [sp, #8]
 8003fd2:	2800      	cmp	r0, #0
 8003fd4:	f040 82d1 	bne.w	800457a <_svfprintf_r+0xf22>
 8003fd8:	ae2e      	add	r6, sp, #184	; 0xb8
 8003fda:	f1ac 0c10 	sub.w	ip, ip, #16
 8003fde:	e7de      	b.n	8003f9e <_svfprintf_r+0x946>
 8003fe0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8003fe2:	f8c6 c004 	str.w	ip, [r6, #4]
 8003fe6:	4463      	add	r3, ip
 8003fe8:	9323      	str	r3, [sp, #140]	; 0x8c
 8003fea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003fec:	3301      	adds	r3, #1
 8003fee:	2b07      	cmp	r3, #7
 8003ff0:	9322      	str	r3, [sp, #136]	; 0x88
 8003ff2:	dc01      	bgt.n	8003ff8 <_svfprintf_r+0x9a0>
 8003ff4:	3608      	adds	r6, #8
 8003ff6:	e008      	b.n	800400a <_svfprintf_r+0x9b2>
 8003ff8:	4650      	mov	r0, sl
 8003ffa:	4659      	mov	r1, fp
 8003ffc:	aa21      	add	r2, sp, #132	; 0x84
 8003ffe:	f001 fe67 	bl	8005cd0 <__ssprint_r>
 8004002:	2800      	cmp	r0, #0
 8004004:	f040 82b9 	bne.w	800457a <_svfprintf_r+0xf22>
 8004008:	ae2e      	add	r6, sp, #184	; 0xb8
 800400a:	ebc9 0505 	rsb	r5, r9, r5
 800400e:	2d00      	cmp	r5, #0
 8004010:	dd2e      	ble.n	8004070 <_svfprintf_r+0xa18>
 8004012:	4b7f      	ldr	r3, [pc, #508]	; (8004210 <_svfprintf_r+0xbb8>)
 8004014:	6033      	str	r3, [r6, #0]
 8004016:	2d10      	cmp	r5, #16
 8004018:	dd16      	ble.n	8004048 <_svfprintf_r+0x9f0>
 800401a:	2310      	movs	r3, #16
 800401c:	6073      	str	r3, [r6, #4]
 800401e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004020:	3310      	adds	r3, #16
 8004022:	9323      	str	r3, [sp, #140]	; 0x8c
 8004024:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004026:	3301      	adds	r3, #1
 8004028:	2b07      	cmp	r3, #7
 800402a:	9322      	str	r3, [sp, #136]	; 0x88
 800402c:	dc01      	bgt.n	8004032 <_svfprintf_r+0x9da>
 800402e:	3608      	adds	r6, #8
 8004030:	e008      	b.n	8004044 <_svfprintf_r+0x9ec>
 8004032:	4650      	mov	r0, sl
 8004034:	4659      	mov	r1, fp
 8004036:	aa21      	add	r2, sp, #132	; 0x84
 8004038:	f001 fe4a 	bl	8005cd0 <__ssprint_r>
 800403c:	2800      	cmp	r0, #0
 800403e:	f040 829c 	bne.w	800457a <_svfprintf_r+0xf22>
 8004042:	ae2e      	add	r6, sp, #184	; 0xb8
 8004044:	3d10      	subs	r5, #16
 8004046:	e7e4      	b.n	8004012 <_svfprintf_r+0x9ba>
 8004048:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800404a:	6075      	str	r5, [r6, #4]
 800404c:	441d      	add	r5, r3
 800404e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004050:	9523      	str	r5, [sp, #140]	; 0x8c
 8004052:	3301      	adds	r3, #1
 8004054:	2b07      	cmp	r3, #7
 8004056:	9322      	str	r3, [sp, #136]	; 0x88
 8004058:	dc01      	bgt.n	800405e <_svfprintf_r+0xa06>
 800405a:	3608      	adds	r6, #8
 800405c:	e008      	b.n	8004070 <_svfprintf_r+0xa18>
 800405e:	4650      	mov	r0, sl
 8004060:	4659      	mov	r1, fp
 8004062:	aa21      	add	r2, sp, #132	; 0x84
 8004064:	f001 fe34 	bl	8005cd0 <__ssprint_r>
 8004068:	2800      	cmp	r0, #0
 800406a:	f040 8286 	bne.w	800457a <_svfprintf_r+0xf22>
 800406e:	ae2e      	add	r6, sp, #184	; 0xb8
 8004070:	05fd      	lsls	r5, r7, #23
 8004072:	d405      	bmi.n	8004080 <_svfprintf_r+0xa28>
 8004074:	9c03      	ldr	r4, [sp, #12]
 8004076:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004078:	e886 0210 	stmia.w	r6, {r4, r9}
 800407c:	444b      	add	r3, r9
 800407e:	e0da      	b.n	8004236 <_svfprintf_r+0xbde>
 8004080:	9d04      	ldr	r5, [sp, #16]
 8004082:	2d65      	cmp	r5, #101	; 0x65
 8004084:	f340 81a7 	ble.w	80043d6 <_svfprintf_r+0xd7e>
 8004088:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800408c:	2200      	movs	r2, #0
 800408e:	2300      	movs	r3, #0
 8004090:	f7fc fcda 	bl	8000a48 <__aeabi_dcmpeq>
 8004094:	2800      	cmp	r0, #0
 8004096:	d059      	beq.n	800414c <_svfprintf_r+0xaf4>
 8004098:	4b5e      	ldr	r3, [pc, #376]	; (8004214 <_svfprintf_r+0xbbc>)
 800409a:	6033      	str	r3, [r6, #0]
 800409c:	2301      	movs	r3, #1
 800409e:	6073      	str	r3, [r6, #4]
 80040a0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80040a2:	3301      	adds	r3, #1
 80040a4:	9323      	str	r3, [sp, #140]	; 0x8c
 80040a6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80040a8:	3301      	adds	r3, #1
 80040aa:	2b07      	cmp	r3, #7
 80040ac:	9322      	str	r3, [sp, #136]	; 0x88
 80040ae:	dc01      	bgt.n	80040b4 <_svfprintf_r+0xa5c>
 80040b0:	3608      	adds	r6, #8
 80040b2:	e008      	b.n	80040c6 <_svfprintf_r+0xa6e>
 80040b4:	4650      	mov	r0, sl
 80040b6:	4659      	mov	r1, fp
 80040b8:	aa21      	add	r2, sp, #132	; 0x84
 80040ba:	f001 fe09 	bl	8005cd0 <__ssprint_r>
 80040be:	2800      	cmp	r0, #0
 80040c0:	f040 825b 	bne.w	800457a <_svfprintf_r+0xf22>
 80040c4:	ae2e      	add	r6, sp, #184	; 0xb8
 80040c6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80040c8:	9c05      	ldr	r4, [sp, #20]
 80040ca:	42a3      	cmp	r3, r4
 80040cc:	db02      	blt.n	80040d4 <_svfprintf_r+0xa7c>
 80040ce:	07fc      	lsls	r4, r7, #31
 80040d0:	f140 8202 	bpl.w	80044d8 <_svfprintf_r+0xe80>
 80040d4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80040d6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80040d8:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80040da:	6035      	str	r5, [r6, #0]
 80040dc:	4423      	add	r3, r4
 80040de:	9323      	str	r3, [sp, #140]	; 0x8c
 80040e0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80040e2:	6074      	str	r4, [r6, #4]
 80040e4:	3301      	adds	r3, #1
 80040e6:	2b07      	cmp	r3, #7
 80040e8:	9322      	str	r3, [sp, #136]	; 0x88
 80040ea:	dc01      	bgt.n	80040f0 <_svfprintf_r+0xa98>
 80040ec:	3608      	adds	r6, #8
 80040ee:	e008      	b.n	8004102 <_svfprintf_r+0xaaa>
 80040f0:	4650      	mov	r0, sl
 80040f2:	4659      	mov	r1, fp
 80040f4:	aa21      	add	r2, sp, #132	; 0x84
 80040f6:	f001 fdeb 	bl	8005cd0 <__ssprint_r>
 80040fa:	2800      	cmp	r0, #0
 80040fc:	f040 823d 	bne.w	800457a <_svfprintf_r+0xf22>
 8004100:	ae2e      	add	r6, sp, #184	; 0xb8
 8004102:	9d05      	ldr	r5, [sp, #20]
 8004104:	1e6c      	subs	r4, r5, #1
 8004106:	2c00      	cmp	r4, #0
 8004108:	f340 81e6 	ble.w	80044d8 <_svfprintf_r+0xe80>
 800410c:	4b40      	ldr	r3, [pc, #256]	; (8004210 <_svfprintf_r+0xbb8>)
 800410e:	6033      	str	r3, [r6, #0]
 8004110:	2c10      	cmp	r4, #16
 8004112:	dd16      	ble.n	8004142 <_svfprintf_r+0xaea>
 8004114:	2310      	movs	r3, #16
 8004116:	6073      	str	r3, [r6, #4]
 8004118:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800411a:	3310      	adds	r3, #16
 800411c:	9323      	str	r3, [sp, #140]	; 0x8c
 800411e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004120:	3301      	adds	r3, #1
 8004122:	2b07      	cmp	r3, #7
 8004124:	9322      	str	r3, [sp, #136]	; 0x88
 8004126:	dc01      	bgt.n	800412c <_svfprintf_r+0xad4>
 8004128:	3608      	adds	r6, #8
 800412a:	e008      	b.n	800413e <_svfprintf_r+0xae6>
 800412c:	4650      	mov	r0, sl
 800412e:	4659      	mov	r1, fp
 8004130:	aa21      	add	r2, sp, #132	; 0x84
 8004132:	f001 fdcd 	bl	8005cd0 <__ssprint_r>
 8004136:	2800      	cmp	r0, #0
 8004138:	f040 821f 	bne.w	800457a <_svfprintf_r+0xf22>
 800413c:	ae2e      	add	r6, sp, #184	; 0xb8
 800413e:	3c10      	subs	r4, #16
 8004140:	e7e4      	b.n	800410c <_svfprintf_r+0xab4>
 8004142:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004144:	6074      	str	r4, [r6, #4]
 8004146:	441c      	add	r4, r3
 8004148:	9423      	str	r4, [sp, #140]	; 0x8c
 800414a:	e134      	b.n	80043b6 <_svfprintf_r+0xd5e>
 800414c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800414e:	2b00      	cmp	r3, #0
 8004150:	dc73      	bgt.n	800423a <_svfprintf_r+0xbe2>
 8004152:	4b30      	ldr	r3, [pc, #192]	; (8004214 <_svfprintf_r+0xbbc>)
 8004154:	6033      	str	r3, [r6, #0]
 8004156:	2301      	movs	r3, #1
 8004158:	6073      	str	r3, [r6, #4]
 800415a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800415c:	3301      	adds	r3, #1
 800415e:	9323      	str	r3, [sp, #140]	; 0x8c
 8004160:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004162:	3301      	adds	r3, #1
 8004164:	2b07      	cmp	r3, #7
 8004166:	9322      	str	r3, [sp, #136]	; 0x88
 8004168:	dc01      	bgt.n	800416e <_svfprintf_r+0xb16>
 800416a:	3608      	adds	r6, #8
 800416c:	e008      	b.n	8004180 <_svfprintf_r+0xb28>
 800416e:	4650      	mov	r0, sl
 8004170:	4659      	mov	r1, fp
 8004172:	aa21      	add	r2, sp, #132	; 0x84
 8004174:	f001 fdac 	bl	8005cd0 <__ssprint_r>
 8004178:	2800      	cmp	r0, #0
 800417a:	f040 81fe 	bne.w	800457a <_svfprintf_r+0xf22>
 800417e:	ae2e      	add	r6, sp, #184	; 0xb8
 8004180:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004182:	b923      	cbnz	r3, 800418e <_svfprintf_r+0xb36>
 8004184:	9c05      	ldr	r4, [sp, #20]
 8004186:	b914      	cbnz	r4, 800418e <_svfprintf_r+0xb36>
 8004188:	07f8      	lsls	r0, r7, #31
 800418a:	f140 81a5 	bpl.w	80044d8 <_svfprintf_r+0xe80>
 800418e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8004190:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004192:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8004194:	6035      	str	r5, [r6, #0]
 8004196:	4423      	add	r3, r4
 8004198:	9323      	str	r3, [sp, #140]	; 0x8c
 800419a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800419c:	6074      	str	r4, [r6, #4]
 800419e:	3301      	adds	r3, #1
 80041a0:	2b07      	cmp	r3, #7
 80041a2:	9322      	str	r3, [sp, #136]	; 0x88
 80041a4:	dc01      	bgt.n	80041aa <_svfprintf_r+0xb52>
 80041a6:	3608      	adds	r6, #8
 80041a8:	e008      	b.n	80041bc <_svfprintf_r+0xb64>
 80041aa:	4650      	mov	r0, sl
 80041ac:	4659      	mov	r1, fp
 80041ae:	aa21      	add	r2, sp, #132	; 0x84
 80041b0:	f001 fd8e 	bl	8005cd0 <__ssprint_r>
 80041b4:	2800      	cmp	r0, #0
 80041b6:	f040 81e0 	bne.w	800457a <_svfprintf_r+0xf22>
 80041ba:	ae2e      	add	r6, sp, #184	; 0xb8
 80041bc:	9c1b      	ldr	r4, [sp, #108]	; 0x6c
 80041be:	4264      	negs	r4, r4
 80041c0:	2c00      	cmp	r4, #0
 80041c2:	dd32      	ble.n	800422a <_svfprintf_r+0xbd2>
 80041c4:	4b12      	ldr	r3, [pc, #72]	; (8004210 <_svfprintf_r+0xbb8>)
 80041c6:	6033      	str	r3, [r6, #0]
 80041c8:	2c10      	cmp	r4, #16
 80041ca:	dd16      	ble.n	80041fa <_svfprintf_r+0xba2>
 80041cc:	2310      	movs	r3, #16
 80041ce:	6073      	str	r3, [r6, #4]
 80041d0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80041d2:	3310      	adds	r3, #16
 80041d4:	9323      	str	r3, [sp, #140]	; 0x8c
 80041d6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80041d8:	3301      	adds	r3, #1
 80041da:	2b07      	cmp	r3, #7
 80041dc:	9322      	str	r3, [sp, #136]	; 0x88
 80041de:	dc01      	bgt.n	80041e4 <_svfprintf_r+0xb8c>
 80041e0:	3608      	adds	r6, #8
 80041e2:	e008      	b.n	80041f6 <_svfprintf_r+0xb9e>
 80041e4:	4650      	mov	r0, sl
 80041e6:	4659      	mov	r1, fp
 80041e8:	aa21      	add	r2, sp, #132	; 0x84
 80041ea:	f001 fd71 	bl	8005cd0 <__ssprint_r>
 80041ee:	2800      	cmp	r0, #0
 80041f0:	f040 81c3 	bne.w	800457a <_svfprintf_r+0xf22>
 80041f4:	ae2e      	add	r6, sp, #184	; 0xb8
 80041f6:	3c10      	subs	r4, #16
 80041f8:	e7e4      	b.n	80041c4 <_svfprintf_r+0xb6c>
 80041fa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80041fc:	6074      	str	r4, [r6, #4]
 80041fe:	441c      	add	r4, r3
 8004200:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004202:	9423      	str	r4, [sp, #140]	; 0x8c
 8004204:	3301      	adds	r3, #1
 8004206:	2b07      	cmp	r3, #7
 8004208:	9322      	str	r3, [sp, #136]	; 0x88
 800420a:	dc05      	bgt.n	8004218 <_svfprintf_r+0xbc0>
 800420c:	3608      	adds	r6, #8
 800420e:	e00c      	b.n	800422a <_svfprintf_r+0xbd2>
 8004210:	080079e9 	.word	0x080079e9
 8004214:	08007a2b 	.word	0x08007a2b
 8004218:	4650      	mov	r0, sl
 800421a:	4659      	mov	r1, fp
 800421c:	aa21      	add	r2, sp, #132	; 0x84
 800421e:	f001 fd57 	bl	8005cd0 <__ssprint_r>
 8004222:	2800      	cmp	r0, #0
 8004224:	f040 81a9 	bne.w	800457a <_svfprintf_r+0xf22>
 8004228:	ae2e      	add	r6, sp, #184	; 0xb8
 800422a:	9d03      	ldr	r5, [sp, #12]
 800422c:	9c05      	ldr	r4, [sp, #20]
 800422e:	6035      	str	r5, [r6, #0]
 8004230:	6074      	str	r4, [r6, #4]
 8004232:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004234:	4423      	add	r3, r4
 8004236:	9323      	str	r3, [sp, #140]	; 0x8c
 8004238:	e0bd      	b.n	80043b6 <_svfprintf_r+0xd5e>
 800423a:	9805      	ldr	r0, [sp, #20]
 800423c:	9d03      	ldr	r5, [sp, #12]
 800423e:	4681      	mov	r9, r0
 8004240:	45a1      	cmp	r9, r4
 8004242:	bfa8      	it	ge
 8004244:	46a1      	movge	r9, r4
 8004246:	f1b9 0f00 	cmp.w	r9, #0
 800424a:	4405      	add	r5, r0
 800424c:	dd15      	ble.n	800427a <_svfprintf_r+0xc22>
 800424e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004250:	9903      	ldr	r1, [sp, #12]
 8004252:	444b      	add	r3, r9
 8004254:	9323      	str	r3, [sp, #140]	; 0x8c
 8004256:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004258:	3301      	adds	r3, #1
 800425a:	2b07      	cmp	r3, #7
 800425c:	e886 0202 	stmia.w	r6, {r1, r9}
 8004260:	9322      	str	r3, [sp, #136]	; 0x88
 8004262:	dc01      	bgt.n	8004268 <_svfprintf_r+0xc10>
 8004264:	3608      	adds	r6, #8
 8004266:	e008      	b.n	800427a <_svfprintf_r+0xc22>
 8004268:	4650      	mov	r0, sl
 800426a:	4659      	mov	r1, fp
 800426c:	aa21      	add	r2, sp, #132	; 0x84
 800426e:	f001 fd2f 	bl	8005cd0 <__ssprint_r>
 8004272:	2800      	cmp	r0, #0
 8004274:	f040 8181 	bne.w	800457a <_svfprintf_r+0xf22>
 8004278:	ae2e      	add	r6, sp, #184	; 0xb8
 800427a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800427e:	ebc9 0904 	rsb	r9, r9, r4
 8004282:	f1b9 0f00 	cmp.w	r9, #0
 8004286:	dd31      	ble.n	80042ec <_svfprintf_r+0xc94>
 8004288:	4b9a      	ldr	r3, [pc, #616]	; (80044f4 <_svfprintf_r+0xe9c>)
 800428a:	6033      	str	r3, [r6, #0]
 800428c:	f1b9 0f10 	cmp.w	r9, #16
 8004290:	dd17      	ble.n	80042c2 <_svfprintf_r+0xc6a>
 8004292:	2310      	movs	r3, #16
 8004294:	6073      	str	r3, [r6, #4]
 8004296:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004298:	3310      	adds	r3, #16
 800429a:	9323      	str	r3, [sp, #140]	; 0x8c
 800429c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800429e:	3301      	adds	r3, #1
 80042a0:	2b07      	cmp	r3, #7
 80042a2:	9322      	str	r3, [sp, #136]	; 0x88
 80042a4:	dc01      	bgt.n	80042aa <_svfprintf_r+0xc52>
 80042a6:	3608      	adds	r6, #8
 80042a8:	e008      	b.n	80042bc <_svfprintf_r+0xc64>
 80042aa:	4650      	mov	r0, sl
 80042ac:	4659      	mov	r1, fp
 80042ae:	aa21      	add	r2, sp, #132	; 0x84
 80042b0:	f001 fd0e 	bl	8005cd0 <__ssprint_r>
 80042b4:	2800      	cmp	r0, #0
 80042b6:	f040 8160 	bne.w	800457a <_svfprintf_r+0xf22>
 80042ba:	ae2e      	add	r6, sp, #184	; 0xb8
 80042bc:	f1a9 0910 	sub.w	r9, r9, #16
 80042c0:	e7e2      	b.n	8004288 <_svfprintf_r+0xc30>
 80042c2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80042c4:	f8c6 9004 	str.w	r9, [r6, #4]
 80042c8:	444b      	add	r3, r9
 80042ca:	9323      	str	r3, [sp, #140]	; 0x8c
 80042cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80042ce:	3301      	adds	r3, #1
 80042d0:	2b07      	cmp	r3, #7
 80042d2:	9322      	str	r3, [sp, #136]	; 0x88
 80042d4:	dc01      	bgt.n	80042da <_svfprintf_r+0xc82>
 80042d6:	3608      	adds	r6, #8
 80042d8:	e008      	b.n	80042ec <_svfprintf_r+0xc94>
 80042da:	4650      	mov	r0, sl
 80042dc:	4659      	mov	r1, fp
 80042de:	aa21      	add	r2, sp, #132	; 0x84
 80042e0:	f001 fcf6 	bl	8005cd0 <__ssprint_r>
 80042e4:	2800      	cmp	r0, #0
 80042e6:	f040 8148 	bne.w	800457a <_svfprintf_r+0xf22>
 80042ea:	ae2e      	add	r6, sp, #184	; 0xb8
 80042ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80042ee:	9805      	ldr	r0, [sp, #20]
 80042f0:	9a03      	ldr	r2, [sp, #12]
 80042f2:	4283      	cmp	r3, r0
 80042f4:	4414      	add	r4, r2
 80042f6:	db01      	blt.n	80042fc <_svfprintf_r+0xca4>
 80042f8:	07f9      	lsls	r1, r7, #31
 80042fa:	d516      	bpl.n	800432a <_svfprintf_r+0xcd2>
 80042fc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80042fe:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004300:	9914      	ldr	r1, [sp, #80]	; 0x50
 8004302:	6031      	str	r1, [r6, #0]
 8004304:	4413      	add	r3, r2
 8004306:	9323      	str	r3, [sp, #140]	; 0x8c
 8004308:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800430a:	6072      	str	r2, [r6, #4]
 800430c:	3301      	adds	r3, #1
 800430e:	2b07      	cmp	r3, #7
 8004310:	9322      	str	r3, [sp, #136]	; 0x88
 8004312:	dc01      	bgt.n	8004318 <_svfprintf_r+0xcc0>
 8004314:	3608      	adds	r6, #8
 8004316:	e008      	b.n	800432a <_svfprintf_r+0xcd2>
 8004318:	4650      	mov	r0, sl
 800431a:	4659      	mov	r1, fp
 800431c:	aa21      	add	r2, sp, #132	; 0x84
 800431e:	f001 fcd7 	bl	8005cd0 <__ssprint_r>
 8004322:	2800      	cmp	r0, #0
 8004324:	f040 8129 	bne.w	800457a <_svfprintf_r+0xf22>
 8004328:	ae2e      	add	r6, sp, #184	; 0xb8
 800432a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800432c:	9805      	ldr	r0, [sp, #20]
 800432e:	1b2d      	subs	r5, r5, r4
 8004330:	1ac3      	subs	r3, r0, r3
 8004332:	429d      	cmp	r5, r3
 8004334:	bfa8      	it	ge
 8004336:	461d      	movge	r5, r3
 8004338:	2d00      	cmp	r5, #0
 800433a:	dd14      	ble.n	8004366 <_svfprintf_r+0xd0e>
 800433c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800433e:	442b      	add	r3, r5
 8004340:	9323      	str	r3, [sp, #140]	; 0x8c
 8004342:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004344:	3301      	adds	r3, #1
 8004346:	2b07      	cmp	r3, #7
 8004348:	e886 0030 	stmia.w	r6, {r4, r5}
 800434c:	9322      	str	r3, [sp, #136]	; 0x88
 800434e:	dc01      	bgt.n	8004354 <_svfprintf_r+0xcfc>
 8004350:	3608      	adds	r6, #8
 8004352:	e008      	b.n	8004366 <_svfprintf_r+0xd0e>
 8004354:	4650      	mov	r0, sl
 8004356:	4659      	mov	r1, fp
 8004358:	aa21      	add	r2, sp, #132	; 0x84
 800435a:	f001 fcb9 	bl	8005cd0 <__ssprint_r>
 800435e:	2800      	cmp	r0, #0
 8004360:	f040 810b 	bne.w	800457a <_svfprintf_r+0xf22>
 8004364:	ae2e      	add	r6, sp, #184	; 0xb8
 8004366:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004368:	9c05      	ldr	r4, [sp, #20]
 800436a:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 800436e:	1ae3      	subs	r3, r4, r3
 8004370:	1b5d      	subs	r5, r3, r5
 8004372:	2d00      	cmp	r5, #0
 8004374:	f340 80b0 	ble.w	80044d8 <_svfprintf_r+0xe80>
 8004378:	4b5e      	ldr	r3, [pc, #376]	; (80044f4 <_svfprintf_r+0xe9c>)
 800437a:	6033      	str	r3, [r6, #0]
 800437c:	2d10      	cmp	r5, #16
 800437e:	dd16      	ble.n	80043ae <_svfprintf_r+0xd56>
 8004380:	2310      	movs	r3, #16
 8004382:	6073      	str	r3, [r6, #4]
 8004384:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004386:	3310      	adds	r3, #16
 8004388:	9323      	str	r3, [sp, #140]	; 0x8c
 800438a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800438c:	3301      	adds	r3, #1
 800438e:	2b07      	cmp	r3, #7
 8004390:	9322      	str	r3, [sp, #136]	; 0x88
 8004392:	dc01      	bgt.n	8004398 <_svfprintf_r+0xd40>
 8004394:	3608      	adds	r6, #8
 8004396:	e008      	b.n	80043aa <_svfprintf_r+0xd52>
 8004398:	4650      	mov	r0, sl
 800439a:	4659      	mov	r1, fp
 800439c:	aa21      	add	r2, sp, #132	; 0x84
 800439e:	f001 fc97 	bl	8005cd0 <__ssprint_r>
 80043a2:	2800      	cmp	r0, #0
 80043a4:	f040 80e9 	bne.w	800457a <_svfprintf_r+0xf22>
 80043a8:	ae2e      	add	r6, sp, #184	; 0xb8
 80043aa:	3d10      	subs	r5, #16
 80043ac:	e7e4      	b.n	8004378 <_svfprintf_r+0xd20>
 80043ae:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80043b0:	6075      	str	r5, [r6, #4]
 80043b2:	441d      	add	r5, r3
 80043b4:	9523      	str	r5, [sp, #140]	; 0x8c
 80043b6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80043b8:	3301      	adds	r3, #1
 80043ba:	2b07      	cmp	r3, #7
 80043bc:	9322      	str	r3, [sp, #136]	; 0x88
 80043be:	f340 808a 	ble.w	80044d6 <_svfprintf_r+0xe7e>
 80043c2:	4650      	mov	r0, sl
 80043c4:	4659      	mov	r1, fp
 80043c6:	aa21      	add	r2, sp, #132	; 0x84
 80043c8:	f001 fc82 	bl	8005cd0 <__ssprint_r>
 80043cc:	2800      	cmp	r0, #0
 80043ce:	f040 80d4 	bne.w	800457a <_svfprintf_r+0xf22>
 80043d2:	ae2e      	add	r6, sp, #184	; 0xb8
 80043d4:	e080      	b.n	80044d8 <_svfprintf_r+0xe80>
 80043d6:	9d05      	ldr	r5, [sp, #20]
 80043d8:	2d01      	cmp	r5, #1
 80043da:	dc01      	bgt.n	80043e0 <_svfprintf_r+0xd88>
 80043dc:	07fa      	lsls	r2, r7, #31
 80043de:	d56d      	bpl.n	80044bc <_svfprintf_r+0xe64>
 80043e0:	2301      	movs	r3, #1
 80043e2:	6073      	str	r3, [r6, #4]
 80043e4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80043e6:	9c03      	ldr	r4, [sp, #12]
 80043e8:	6034      	str	r4, [r6, #0]
 80043ea:	3301      	adds	r3, #1
 80043ec:	9323      	str	r3, [sp, #140]	; 0x8c
 80043ee:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80043f0:	3301      	adds	r3, #1
 80043f2:	2b07      	cmp	r3, #7
 80043f4:	9322      	str	r3, [sp, #136]	; 0x88
 80043f6:	dc01      	bgt.n	80043fc <_svfprintf_r+0xda4>
 80043f8:	3608      	adds	r6, #8
 80043fa:	e008      	b.n	800440e <_svfprintf_r+0xdb6>
 80043fc:	4650      	mov	r0, sl
 80043fe:	4659      	mov	r1, fp
 8004400:	aa21      	add	r2, sp, #132	; 0x84
 8004402:	f001 fc65 	bl	8005cd0 <__ssprint_r>
 8004406:	2800      	cmp	r0, #0
 8004408:	f040 80b7 	bne.w	800457a <_svfprintf_r+0xf22>
 800440c:	ae2e      	add	r6, sp, #184	; 0xb8
 800440e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8004410:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004412:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8004414:	6035      	str	r5, [r6, #0]
 8004416:	4423      	add	r3, r4
 8004418:	9323      	str	r3, [sp, #140]	; 0x8c
 800441a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800441c:	6074      	str	r4, [r6, #4]
 800441e:	3301      	adds	r3, #1
 8004420:	2b07      	cmp	r3, #7
 8004422:	9322      	str	r3, [sp, #136]	; 0x88
 8004424:	dc01      	bgt.n	800442a <_svfprintf_r+0xdd2>
 8004426:	3608      	adds	r6, #8
 8004428:	e008      	b.n	800443c <_svfprintf_r+0xde4>
 800442a:	4650      	mov	r0, sl
 800442c:	4659      	mov	r1, fp
 800442e:	aa21      	add	r2, sp, #132	; 0x84
 8004430:	f001 fc4e 	bl	8005cd0 <__ssprint_r>
 8004434:	2800      	cmp	r0, #0
 8004436:	f040 80a0 	bne.w	800457a <_svfprintf_r+0xf22>
 800443a:	ae2e      	add	r6, sp, #184	; 0xb8
 800443c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004440:	2200      	movs	r2, #0
 8004442:	2300      	movs	r3, #0
 8004444:	f7fc fb00 	bl	8000a48 <__aeabi_dcmpeq>
 8004448:	9d05      	ldr	r5, [sp, #20]
 800444a:	1e6c      	subs	r4, r5, #1
 800444c:	b940      	cbnz	r0, 8004460 <_svfprintf_r+0xe08>
 800444e:	9d03      	ldr	r5, [sp, #12]
 8004450:	1c6b      	adds	r3, r5, #1
 8004452:	e886 0018 	stmia.w	r6, {r3, r4}
 8004456:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004458:	9c05      	ldr	r4, [sp, #20]
 800445a:	3b01      	subs	r3, #1
 800445c:	4423      	add	r3, r4
 800445e:	e033      	b.n	80044c8 <_svfprintf_r+0xe70>
 8004460:	2c00      	cmp	r4, #0
 8004462:	dd34      	ble.n	80044ce <_svfprintf_r+0xe76>
 8004464:	4b23      	ldr	r3, [pc, #140]	; (80044f4 <_svfprintf_r+0xe9c>)
 8004466:	6033      	str	r3, [r6, #0]
 8004468:	2c10      	cmp	r4, #16
 800446a:	dd15      	ble.n	8004498 <_svfprintf_r+0xe40>
 800446c:	2310      	movs	r3, #16
 800446e:	6073      	str	r3, [r6, #4]
 8004470:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004472:	3310      	adds	r3, #16
 8004474:	9323      	str	r3, [sp, #140]	; 0x8c
 8004476:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004478:	3301      	adds	r3, #1
 800447a:	2b07      	cmp	r3, #7
 800447c:	9322      	str	r3, [sp, #136]	; 0x88
 800447e:	dc01      	bgt.n	8004484 <_svfprintf_r+0xe2c>
 8004480:	3608      	adds	r6, #8
 8004482:	e007      	b.n	8004494 <_svfprintf_r+0xe3c>
 8004484:	4650      	mov	r0, sl
 8004486:	4659      	mov	r1, fp
 8004488:	aa21      	add	r2, sp, #132	; 0x84
 800448a:	f001 fc21 	bl	8005cd0 <__ssprint_r>
 800448e:	2800      	cmp	r0, #0
 8004490:	d173      	bne.n	800457a <_svfprintf_r+0xf22>
 8004492:	ae2e      	add	r6, sp, #184	; 0xb8
 8004494:	3c10      	subs	r4, #16
 8004496:	e7e5      	b.n	8004464 <_svfprintf_r+0xe0c>
 8004498:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800449a:	6074      	str	r4, [r6, #4]
 800449c:	441c      	add	r4, r3
 800449e:	9423      	str	r4, [sp, #140]	; 0x8c
 80044a0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80044a2:	3301      	adds	r3, #1
 80044a4:	2b07      	cmp	r3, #7
 80044a6:	9322      	str	r3, [sp, #136]	; 0x88
 80044a8:	dd10      	ble.n	80044cc <_svfprintf_r+0xe74>
 80044aa:	4650      	mov	r0, sl
 80044ac:	4659      	mov	r1, fp
 80044ae:	aa21      	add	r2, sp, #132	; 0x84
 80044b0:	f001 fc0e 	bl	8005cd0 <__ssprint_r>
 80044b4:	2800      	cmp	r0, #0
 80044b6:	d160      	bne.n	800457a <_svfprintf_r+0xf22>
 80044b8:	ae2e      	add	r6, sp, #184	; 0xb8
 80044ba:	e008      	b.n	80044ce <_svfprintf_r+0xe76>
 80044bc:	2301      	movs	r3, #1
 80044be:	6073      	str	r3, [r6, #4]
 80044c0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80044c2:	9d03      	ldr	r5, [sp, #12]
 80044c4:	6035      	str	r5, [r6, #0]
 80044c6:	3301      	adds	r3, #1
 80044c8:	9323      	str	r3, [sp, #140]	; 0x8c
 80044ca:	e7e9      	b.n	80044a0 <_svfprintf_r+0xe48>
 80044cc:	3608      	adds	r6, #8
 80044ce:	ab1d      	add	r3, sp, #116	; 0x74
 80044d0:	6033      	str	r3, [r6, #0]
 80044d2:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80044d4:	e6ac      	b.n	8004230 <_svfprintf_r+0xbd8>
 80044d6:	3608      	adds	r6, #8
 80044d8:	077b      	lsls	r3, r7, #29
 80044da:	d40d      	bmi.n	80044f8 <_svfprintf_r+0xea0>
 80044dc:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80044de:	9806      	ldr	r0, [sp, #24]
 80044e0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80044e2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80044e4:	42a0      	cmp	r0, r4
 80044e6:	bfac      	ite	ge
 80044e8:	182d      	addge	r5, r5, r0
 80044ea:	192d      	addlt	r5, r5, r4
 80044ec:	950b      	str	r5, [sp, #44]	; 0x2c
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d037      	beq.n	8004562 <_svfprintf_r+0xf0a>
 80044f2:	e030      	b.n	8004556 <_svfprintf_r+0xefe>
 80044f4:	080079e9 	.word	0x080079e9
 80044f8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80044fa:	9806      	ldr	r0, [sp, #24]
 80044fc:	1a2c      	subs	r4, r5, r0
 80044fe:	2c00      	cmp	r4, #0
 8004500:	ddec      	ble.n	80044dc <_svfprintf_r+0xe84>
 8004502:	4b23      	ldr	r3, [pc, #140]	; (8004590 <_svfprintf_r+0xf38>)
 8004504:	6033      	str	r3, [r6, #0]
 8004506:	2c10      	cmp	r4, #16
 8004508:	dd14      	ble.n	8004534 <_svfprintf_r+0xedc>
 800450a:	2310      	movs	r3, #16
 800450c:	6073      	str	r3, [r6, #4]
 800450e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004510:	3310      	adds	r3, #16
 8004512:	9323      	str	r3, [sp, #140]	; 0x8c
 8004514:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004516:	3301      	adds	r3, #1
 8004518:	2b07      	cmp	r3, #7
 800451a:	9322      	str	r3, [sp, #136]	; 0x88
 800451c:	dc01      	bgt.n	8004522 <_svfprintf_r+0xeca>
 800451e:	3608      	adds	r6, #8
 8004520:	e006      	b.n	8004530 <_svfprintf_r+0xed8>
 8004522:	4650      	mov	r0, sl
 8004524:	4659      	mov	r1, fp
 8004526:	aa21      	add	r2, sp, #132	; 0x84
 8004528:	f001 fbd2 	bl	8005cd0 <__ssprint_r>
 800452c:	bb28      	cbnz	r0, 800457a <_svfprintf_r+0xf22>
 800452e:	ae2e      	add	r6, sp, #184	; 0xb8
 8004530:	3c10      	subs	r4, #16
 8004532:	e7e6      	b.n	8004502 <_svfprintf_r+0xeaa>
 8004534:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004536:	6074      	str	r4, [r6, #4]
 8004538:	441c      	add	r4, r3
 800453a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800453c:	9423      	str	r4, [sp, #140]	; 0x8c
 800453e:	3301      	adds	r3, #1
 8004540:	2b07      	cmp	r3, #7
 8004542:	9322      	str	r3, [sp, #136]	; 0x88
 8004544:	ddca      	ble.n	80044dc <_svfprintf_r+0xe84>
 8004546:	4650      	mov	r0, sl
 8004548:	4659      	mov	r1, fp
 800454a:	aa21      	add	r2, sp, #132	; 0x84
 800454c:	f001 fbc0 	bl	8005cd0 <__ssprint_r>
 8004550:	2800      	cmp	r0, #0
 8004552:	d0c3      	beq.n	80044dc <_svfprintf_r+0xe84>
 8004554:	e011      	b.n	800457a <_svfprintf_r+0xf22>
 8004556:	4650      	mov	r0, sl
 8004558:	4659      	mov	r1, fp
 800455a:	aa21      	add	r2, sp, #132	; 0x84
 800455c:	f001 fbb8 	bl	8005cd0 <__ssprint_r>
 8004560:	b958      	cbnz	r0, 800457a <_svfprintf_r+0xf22>
 8004562:	2300      	movs	r3, #0
 8004564:	9322      	str	r3, [sp, #136]	; 0x88
 8004566:	ae2e      	add	r6, sp, #184	; 0xb8
 8004568:	f7ff b8ab 	b.w	80036c2 <_svfprintf_r+0x6a>
 800456c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800456e:	b123      	cbz	r3, 800457a <_svfprintf_r+0xf22>
 8004570:	4650      	mov	r0, sl
 8004572:	4659      	mov	r1, fp
 8004574:	aa21      	add	r2, sp, #132	; 0x84
 8004576:	f001 fbab 	bl	8005cd0 <__ssprint_r>
 800457a:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800457e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8004580:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004584:	bf18      	it	ne
 8004586:	f04f 30ff 	movne.w	r0, #4294967295
 800458a:	b03f      	add	sp, #252	; 0xfc
 800458c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004590:	08007a2d 	.word	0x08007a2d
 8004594:	f3af 8000 	nop.w

08004598 <quorem>:
 8004598:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800459c:	6903      	ldr	r3, [r0, #16]
 800459e:	690c      	ldr	r4, [r1, #16]
 80045a0:	42a3      	cmp	r3, r4
 80045a2:	4680      	mov	r8, r0
 80045a4:	f2c0 8081 	blt.w	80046aa <quorem+0x112>
 80045a8:	3c01      	subs	r4, #1
 80045aa:	f101 0714 	add.w	r7, r1, #20
 80045ae:	00a2      	lsls	r2, r4, #2
 80045b0:	f100 0514 	add.w	r5, r0, #20
 80045b4:	4691      	mov	r9, r2
 80045b6:	9200      	str	r2, [sp, #0]
 80045b8:	f857 6024 	ldr.w	r6, [r7, r4, lsl #2]
 80045bc:	442a      	add	r2, r5
 80045be:	9201      	str	r2, [sp, #4]
 80045c0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80045c4:	3601      	adds	r6, #1
 80045c6:	fbb2 f6f6 	udiv	r6, r2, r6
 80045ca:	44b9      	add	r9, r7
 80045cc:	2e00      	cmp	r6, #0
 80045ce:	d03a      	beq.n	8004646 <quorem+0xae>
 80045d0:	f04f 0e00 	mov.w	lr, #0
 80045d4:	463a      	mov	r2, r7
 80045d6:	4628      	mov	r0, r5
 80045d8:	46f3      	mov	fp, lr
 80045da:	f852 cb04 	ldr.w	ip, [r2], #4
 80045de:	6803      	ldr	r3, [r0, #0]
 80045e0:	fa1f fa8c 	uxth.w	sl, ip
 80045e4:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80045e8:	fb0a ea06 	mla	sl, sl, r6, lr
 80045ec:	fb0c fc06 	mul.w	ip, ip, r6
 80045f0:	eb0c 4c1a 	add.w	ip, ip, sl, lsr #16
 80045f4:	fa1f fa8a 	uxth.w	sl, sl
 80045f8:	ebca 0a0b 	rsb	sl, sl, fp
 80045fc:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8004600:	fa1f fc8c 	uxth.w	ip, ip
 8004604:	fa1a fa83 	uxtah	sl, sl, r3
 8004608:	ebcc 4c13 	rsb	ip, ip, r3, lsr #16
 800460c:	eb0c 4c2a 	add.w	ip, ip, sl, asr #16
 8004610:	fa1f fa8a 	uxth.w	sl, sl
 8004614:	ea4a 4a0c 	orr.w	sl, sl, ip, lsl #16
 8004618:	454a      	cmp	r2, r9
 800461a:	ea4f 4b2c 	mov.w	fp, ip, asr #16
 800461e:	f840 ab04 	str.w	sl, [r0], #4
 8004622:	d9da      	bls.n	80045da <quorem+0x42>
 8004624:	9a00      	ldr	r2, [sp, #0]
 8004626:	58ab      	ldr	r3, [r5, r2]
 8004628:	b96b      	cbnz	r3, 8004646 <quorem+0xae>
 800462a:	9a01      	ldr	r2, [sp, #4]
 800462c:	1f13      	subs	r3, r2, #4
 800462e:	42ab      	cmp	r3, r5
 8004630:	461a      	mov	r2, r3
 8004632:	d802      	bhi.n	800463a <quorem+0xa2>
 8004634:	f8c8 4010 	str.w	r4, [r8, #16]
 8004638:	e005      	b.n	8004646 <quorem+0xae>
 800463a:	6812      	ldr	r2, [r2, #0]
 800463c:	3b04      	subs	r3, #4
 800463e:	2a00      	cmp	r2, #0
 8004640:	d1f8      	bne.n	8004634 <quorem+0x9c>
 8004642:	3c01      	subs	r4, #1
 8004644:	e7f3      	b.n	800462e <quorem+0x96>
 8004646:	4640      	mov	r0, r8
 8004648:	f001 fa3b 	bl	8005ac2 <__mcmp>
 800464c:	2800      	cmp	r0, #0
 800464e:	db2a      	blt.n	80046a6 <quorem+0x10e>
 8004650:	3601      	adds	r6, #1
 8004652:	462b      	mov	r3, r5
 8004654:	2000      	movs	r0, #0
 8004656:	f857 cb04 	ldr.w	ip, [r7], #4
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	fa1f f18c 	uxth.w	r1, ip
 8004660:	1a41      	subs	r1, r0, r1
 8004662:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8004666:	fa11 f182 	uxtah	r1, r1, r2
 800466a:	ebcc 4212 	rsb	r2, ip, r2, lsr #16
 800466e:	eb02 4221 	add.w	r2, r2, r1, asr #16
 8004672:	b289      	uxth	r1, r1
 8004674:	1410      	asrs	r0, r2, #16
 8004676:	454f      	cmp	r7, r9
 8004678:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 800467c:	f843 2b04 	str.w	r2, [r3], #4
 8004680:	d9e9      	bls.n	8004656 <quorem+0xbe>
 8004682:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004686:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800468a:	b962      	cbnz	r2, 80046a6 <quorem+0x10e>
 800468c:	3b04      	subs	r3, #4
 800468e:	42ab      	cmp	r3, r5
 8004690:	461a      	mov	r2, r3
 8004692:	d802      	bhi.n	800469a <quorem+0x102>
 8004694:	f8c8 4010 	str.w	r4, [r8, #16]
 8004698:	e005      	b.n	80046a6 <quorem+0x10e>
 800469a:	6812      	ldr	r2, [r2, #0]
 800469c:	3b04      	subs	r3, #4
 800469e:	2a00      	cmp	r2, #0
 80046a0:	d1f8      	bne.n	8004694 <quorem+0xfc>
 80046a2:	3c01      	subs	r4, #1
 80046a4:	e7f3      	b.n	800468e <quorem+0xf6>
 80046a6:	4630      	mov	r0, r6
 80046a8:	e000      	b.n	80046ac <quorem+0x114>
 80046aa:	2000      	movs	r0, #0
 80046ac:	b003      	add	sp, #12
 80046ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046b2:	0000      	movs	r0, r0
 80046b4:	0000      	movs	r0, r0
	...

080046b8 <_dtoa_r>:
 80046b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046bc:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80046be:	b09b      	sub	sp, #108	; 0x6c
 80046c0:	4682      	mov	sl, r0
 80046c2:	910d      	str	r1, [sp, #52]	; 0x34
 80046c4:	920e      	str	r2, [sp, #56]	; 0x38
 80046c6:	9314      	str	r3, [sp, #80]	; 0x50
 80046c8:	9c24      	ldr	r4, [sp, #144]	; 0x90
 80046ca:	ed8d 0b02 	vstr	d0, [sp, #8]
 80046ce:	b945      	cbnz	r5, 80046e2 <_dtoa_r+0x2a>
 80046d0:	2010      	movs	r0, #16
 80046d2:	f000 fdad 	bl	8005230 <malloc>
 80046d6:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
 80046da:	6045      	str	r5, [r0, #4]
 80046dc:	6085      	str	r5, [r0, #8]
 80046de:	6005      	str	r5, [r0, #0]
 80046e0:	60c5      	str	r5, [r0, #12]
 80046e2:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 80046e6:	6819      	ldr	r1, [r3, #0]
 80046e8:	b161      	cbz	r1, 8004704 <_dtoa_r+0x4c>
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	604b      	str	r3, [r1, #4]
 80046ee:	2201      	movs	r2, #1
 80046f0:	fa02 f303 	lsl.w	r3, r2, r3
 80046f4:	608b      	str	r3, [r1, #8]
 80046f6:	4650      	mov	r0, sl
 80046f8:	f001 f803 	bl	8005702 <_Bfree>
 80046fc:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 8004700:	2200      	movs	r2, #0
 8004702:	601a      	str	r2, [r3, #0]
 8004704:	9903      	ldr	r1, [sp, #12]
 8004706:	2900      	cmp	r1, #0
 8004708:	da05      	bge.n	8004716 <_dtoa_r+0x5e>
 800470a:	2301      	movs	r3, #1
 800470c:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8004710:	6023      	str	r3, [r4, #0]
 8004712:	9203      	str	r2, [sp, #12]
 8004714:	e001      	b.n	800471a <_dtoa_r+0x62>
 8004716:	2300      	movs	r3, #0
 8004718:	6023      	str	r3, [r4, #0]
 800471a:	9c03      	ldr	r4, [sp, #12]
 800471c:	4a9a      	ldr	r2, [pc, #616]	; (8004988 <_dtoa_r+0x2d0>)
 800471e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8004722:	0d1b      	lsrs	r3, r3, #20
 8004724:	051b      	lsls	r3, r3, #20
 8004726:	4293      	cmp	r3, r2
 8004728:	d11d      	bne.n	8004766 <_dtoa_r+0xae>
 800472a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800472c:	9902      	ldr	r1, [sp, #8]
 800472e:	f242 730f 	movw	r3, #9999	; 0x270f
 8004732:	603b      	str	r3, [r7, #0]
 8004734:	b941      	cbnz	r1, 8004748 <_dtoa_r+0x90>
 8004736:	4b95      	ldr	r3, [pc, #596]	; (800498c <_dtoa_r+0x2d4>)
 8004738:	4a95      	ldr	r2, [pc, #596]	; (8004990 <_dtoa_r+0x2d8>)
 800473a:	f3c4 0013 	ubfx	r0, r4, #0, #20
 800473e:	2800      	cmp	r0, #0
 8004740:	bf0c      	ite	eq
 8004742:	4610      	moveq	r0, r2
 8004744:	4618      	movne	r0, r3
 8004746:	e000      	b.n	800474a <_dtoa_r+0x92>
 8004748:	4890      	ldr	r0, [pc, #576]	; (800498c <_dtoa_r+0x2d4>)
 800474a:	9f25      	ldr	r7, [sp, #148]	; 0x94
 800474c:	2f00      	cmp	r7, #0
 800474e:	f000 8565 	beq.w	800521c <_dtoa_r+0xb64>
 8004752:	78c3      	ldrb	r3, [r0, #3]
 8004754:	b113      	cbz	r3, 800475c <_dtoa_r+0xa4>
 8004756:	f100 0308 	add.w	r3, r0, #8
 800475a:	e000      	b.n	800475e <_dtoa_r+0xa6>
 800475c:	1cc3      	adds	r3, r0, #3
 800475e:	9f25      	ldr	r7, [sp, #148]	; 0x94
 8004760:	603b      	str	r3, [r7, #0]
 8004762:	f000 bd5b 	b.w	800521c <_dtoa_r+0xb64>
 8004766:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800476a:	2200      	movs	r2, #0
 800476c:	4640      	mov	r0, r8
 800476e:	4649      	mov	r1, r9
 8004770:	2300      	movs	r3, #0
 8004772:	f7fc f969 	bl	8000a48 <__aeabi_dcmpeq>
 8004776:	4605      	mov	r5, r0
 8004778:	b158      	cbz	r0, 8004792 <_dtoa_r+0xda>
 800477a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800477c:	2301      	movs	r3, #1
 800477e:	603b      	str	r3, [r7, #0]
 8004780:	9f25      	ldr	r7, [sp, #148]	; 0x94
 8004782:	2f00      	cmp	r7, #0
 8004784:	f000 8547 	beq.w	8005216 <_dtoa_r+0xb5e>
 8004788:	4882      	ldr	r0, [pc, #520]	; (8004994 <_dtoa_r+0x2dc>)
 800478a:	6038      	str	r0, [r7, #0]
 800478c:	3801      	subs	r0, #1
 800478e:	f000 bd45 	b.w	800521c <_dtoa_r+0xb64>
 8004792:	4650      	mov	r0, sl
 8004794:	ec49 8b10 	vmov	d0, r8, r9
 8004798:	a919      	add	r1, sp, #100	; 0x64
 800479a:	aa18      	add	r2, sp, #96	; 0x60
 800479c:	f001 fa0c 	bl	8005bb8 <__d2b>
 80047a0:	f3c4 560a 	ubfx	r6, r4, #20, #11
 80047a4:	4683      	mov	fp, r0
 80047a6:	b156      	cbz	r6, 80047be <_dtoa_r+0x106>
 80047a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80047ac:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80047b0:	4640      	mov	r0, r8
 80047b2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80047b6:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
 80047ba:	9515      	str	r5, [sp, #84]	; 0x54
 80047bc:	e01c      	b.n	80047f8 <_dtoa_r+0x140>
 80047be:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80047c0:	9e18      	ldr	r6, [sp, #96]	; 0x60
 80047c2:	441e      	add	r6, r3
 80047c4:	f46f 6382 	mvn.w	r3, #1040	; 0x410
 80047c8:	429e      	cmp	r6, r3
 80047ca:	db09      	blt.n	80047e0 <_dtoa_r+0x128>
 80047cc:	9902      	ldr	r1, [sp, #8]
 80047ce:	331f      	adds	r3, #31
 80047d0:	f206 4012 	addw	r0, r6, #1042	; 0x412
 80047d4:	1b9b      	subs	r3, r3, r6
 80047d6:	fa21 f000 	lsr.w	r0, r1, r0
 80047da:	409c      	lsls	r4, r3
 80047dc:	4320      	orrs	r0, r4
 80047de:	e004      	b.n	80047ea <_dtoa_r+0x132>
 80047e0:	486d      	ldr	r0, [pc, #436]	; (8004998 <_dtoa_r+0x2e0>)
 80047e2:	9a02      	ldr	r2, [sp, #8]
 80047e4:	1b80      	subs	r0, r0, r6
 80047e6:	fa02 f000 	lsl.w	r0, r2, r0
 80047ea:	f7fb fe4f 	bl	800048c <__aeabi_ui2d>
 80047ee:	2701      	movs	r7, #1
 80047f0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80047f4:	3e01      	subs	r6, #1
 80047f6:	9715      	str	r7, [sp, #84]	; 0x54
 80047f8:	2200      	movs	r2, #0
 80047fa:	4b68      	ldr	r3, [pc, #416]	; (800499c <_dtoa_r+0x2e4>)
 80047fc:	f7fb fd08 	bl	8000210 <__aeabi_dsub>
 8004800:	a35b      	add	r3, pc, #364	; (adr r3, 8004970 <_dtoa_r+0x2b8>)
 8004802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004806:	f7fb feb7 	bl	8000578 <__aeabi_dmul>
 800480a:	a35b      	add	r3, pc, #364	; (adr r3, 8004978 <_dtoa_r+0x2c0>)
 800480c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004810:	f7fb fd00 	bl	8000214 <__adddf3>
 8004814:	4604      	mov	r4, r0
 8004816:	4630      	mov	r0, r6
 8004818:	460d      	mov	r5, r1
 800481a:	f7fb fe47 	bl	80004ac <__aeabi_i2d>
 800481e:	a358      	add	r3, pc, #352	; (adr r3, 8004980 <_dtoa_r+0x2c8>)
 8004820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004824:	f7fb fea8 	bl	8000578 <__aeabi_dmul>
 8004828:	4602      	mov	r2, r0
 800482a:	460b      	mov	r3, r1
 800482c:	4620      	mov	r0, r4
 800482e:	4629      	mov	r1, r5
 8004830:	f7fb fcf0 	bl	8000214 <__adddf3>
 8004834:	4604      	mov	r4, r0
 8004836:	460d      	mov	r5, r1
 8004838:	f7fc f938 	bl	8000aac <__aeabi_d2iz>
 800483c:	4629      	mov	r1, r5
 800483e:	4681      	mov	r9, r0
 8004840:	2200      	movs	r2, #0
 8004842:	4620      	mov	r0, r4
 8004844:	2300      	movs	r3, #0
 8004846:	f7fc f909 	bl	8000a5c <__aeabi_dcmplt>
 800484a:	b158      	cbz	r0, 8004864 <_dtoa_r+0x1ac>
 800484c:	4648      	mov	r0, r9
 800484e:	f7fb fe2d 	bl	80004ac <__aeabi_i2d>
 8004852:	4602      	mov	r2, r0
 8004854:	460b      	mov	r3, r1
 8004856:	4620      	mov	r0, r4
 8004858:	4629      	mov	r1, r5
 800485a:	f7fc f8f5 	bl	8000a48 <__aeabi_dcmpeq>
 800485e:	b908      	cbnz	r0, 8004864 <_dtoa_r+0x1ac>
 8004860:	f109 39ff 	add.w	r9, r9, #4294967295
 8004864:	f1b9 0f16 	cmp.w	r9, #22
 8004868:	d80d      	bhi.n	8004886 <_dtoa_r+0x1ce>
 800486a:	4b4d      	ldr	r3, [pc, #308]	; (80049a0 <_dtoa_r+0x2e8>)
 800486c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8004870:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004874:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004878:	f7fc f90e 	bl	8000a98 <__aeabi_dcmpgt>
 800487c:	b130      	cbz	r0, 800488c <_dtoa_r+0x1d4>
 800487e:	f109 39ff 	add.w	r9, r9, #4294967295
 8004882:	2700      	movs	r7, #0
 8004884:	e000      	b.n	8004888 <_dtoa_r+0x1d0>
 8004886:	2701      	movs	r7, #1
 8004888:	9711      	str	r7, [sp, #68]	; 0x44
 800488a:	e000      	b.n	800488e <_dtoa_r+0x1d6>
 800488c:	9011      	str	r0, [sp, #68]	; 0x44
 800488e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8004890:	1b9e      	subs	r6, r3, r6
 8004892:	3e01      	subs	r6, #1
 8004894:	9606      	str	r6, [sp, #24]
 8004896:	d504      	bpl.n	80048a2 <_dtoa_r+0x1ea>
 8004898:	4277      	negs	r7, r6
 800489a:	9705      	str	r7, [sp, #20]
 800489c:	2700      	movs	r7, #0
 800489e:	9706      	str	r7, [sp, #24]
 80048a0:	e001      	b.n	80048a6 <_dtoa_r+0x1ee>
 80048a2:	2700      	movs	r7, #0
 80048a4:	9705      	str	r7, [sp, #20]
 80048a6:	f1b9 0f00 	cmp.w	r9, #0
 80048aa:	db07      	blt.n	80048bc <_dtoa_r+0x204>
 80048ac:	9f06      	ldr	r7, [sp, #24]
 80048ae:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 80048b2:	444f      	add	r7, r9
 80048b4:	9706      	str	r7, [sp, #24]
 80048b6:	2700      	movs	r7, #0
 80048b8:	970b      	str	r7, [sp, #44]	; 0x2c
 80048ba:	e008      	b.n	80048ce <_dtoa_r+0x216>
 80048bc:	9f05      	ldr	r7, [sp, #20]
 80048be:	ebc9 0707 	rsb	r7, r9, r7
 80048c2:	9705      	str	r7, [sp, #20]
 80048c4:	f1c9 0700 	rsb	r7, r9, #0
 80048c8:	970b      	str	r7, [sp, #44]	; 0x2c
 80048ca:	2700      	movs	r7, #0
 80048cc:	9710      	str	r7, [sp, #64]	; 0x40
 80048ce:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80048d0:	2f09      	cmp	r7, #9
 80048d2:	d828      	bhi.n	8004926 <_dtoa_r+0x26e>
 80048d4:	2f05      	cmp	r7, #5
 80048d6:	bfc4      	itt	gt
 80048d8:	3f04      	subgt	r7, #4
 80048da:	970d      	strgt	r7, [sp, #52]	; 0x34
 80048dc:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80048de:	f1a7 0302 	sub.w	r3, r7, #2
 80048e2:	bfcc      	ite	gt
 80048e4:	2500      	movgt	r5, #0
 80048e6:	2501      	movle	r5, #1
 80048e8:	2b03      	cmp	r3, #3
 80048ea:	d821      	bhi.n	8004930 <_dtoa_r+0x278>
 80048ec:	e8df f003 	tbb	[pc, r3]
 80048f0:	04020f06 	.word	0x04020f06
 80048f4:	2701      	movs	r7, #1
 80048f6:	e002      	b.n	80048fe <_dtoa_r+0x246>
 80048f8:	2701      	movs	r7, #1
 80048fa:	e009      	b.n	8004910 <_dtoa_r+0x258>
 80048fc:	2700      	movs	r7, #0
 80048fe:	970c      	str	r7, [sp, #48]	; 0x30
 8004900:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8004902:	2f00      	cmp	r7, #0
 8004904:	dd1e      	ble.n	8004944 <_dtoa_r+0x28c>
 8004906:	970a      	str	r7, [sp, #40]	; 0x28
 8004908:	9704      	str	r7, [sp, #16]
 800490a:	463b      	mov	r3, r7
 800490c:	e01f      	b.n	800494e <_dtoa_r+0x296>
 800490e:	2700      	movs	r7, #0
 8004910:	970c      	str	r7, [sp, #48]	; 0x30
 8004912:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8004914:	444f      	add	r7, r9
 8004916:	970a      	str	r7, [sp, #40]	; 0x28
 8004918:	3701      	adds	r7, #1
 800491a:	463b      	mov	r3, r7
 800491c:	9704      	str	r7, [sp, #16]
 800491e:	2b01      	cmp	r3, #1
 8004920:	bfb8      	it	lt
 8004922:	2301      	movlt	r3, #1
 8004924:	e013      	b.n	800494e <_dtoa_r+0x296>
 8004926:	2501      	movs	r5, #1
 8004928:	2700      	movs	r7, #0
 800492a:	970d      	str	r7, [sp, #52]	; 0x34
 800492c:	950c      	str	r5, [sp, #48]	; 0x30
 800492e:	e001      	b.n	8004934 <_dtoa_r+0x27c>
 8004930:	2701      	movs	r7, #1
 8004932:	970c      	str	r7, [sp, #48]	; 0x30
 8004934:	f04f 37ff 	mov.w	r7, #4294967295
 8004938:	970a      	str	r7, [sp, #40]	; 0x28
 800493a:	9704      	str	r7, [sp, #16]
 800493c:	2700      	movs	r7, #0
 800493e:	2312      	movs	r3, #18
 8004940:	970e      	str	r7, [sp, #56]	; 0x38
 8004942:	e004      	b.n	800494e <_dtoa_r+0x296>
 8004944:	2701      	movs	r7, #1
 8004946:	970a      	str	r7, [sp, #40]	; 0x28
 8004948:	9704      	str	r7, [sp, #16]
 800494a:	463b      	mov	r3, r7
 800494c:	970e      	str	r7, [sp, #56]	; 0x38
 800494e:	f8da 4024 	ldr.w	r4, [sl, #36]	; 0x24
 8004952:	2200      	movs	r2, #0
 8004954:	6062      	str	r2, [r4, #4]
 8004956:	2104      	movs	r1, #4
 8004958:	f101 0214 	add.w	r2, r1, #20
 800495c:	429a      	cmp	r2, r3
 800495e:	d821      	bhi.n	80049a4 <_dtoa_r+0x2ec>
 8004960:	6862      	ldr	r2, [r4, #4]
 8004962:	3201      	adds	r2, #1
 8004964:	6062      	str	r2, [r4, #4]
 8004966:	0049      	lsls	r1, r1, #1
 8004968:	e7f6      	b.n	8004958 <_dtoa_r+0x2a0>
 800496a:	bf00      	nop
 800496c:	f3af 8000 	nop.w
 8004970:	636f4361 	.word	0x636f4361
 8004974:	3fd287a7 	.word	0x3fd287a7
 8004978:	8b60c8b3 	.word	0x8b60c8b3
 800497c:	3fc68a28 	.word	0x3fc68a28
 8004980:	509f79fb 	.word	0x509f79fb
 8004984:	3fd34413 	.word	0x3fd34413
 8004988:	7ff00000 	.word	0x7ff00000
 800498c:	08007a46 	.word	0x08007a46
 8004990:	08007a3d 	.word	0x08007a3d
 8004994:	08007a2c 	.word	0x08007a2c
 8004998:	fffffbee 	.word	0xfffffbee
 800499c:	3ff80000 	.word	0x3ff80000
 80049a0:	08007a58 	.word	0x08007a58
 80049a4:	4650      	mov	r0, sl
 80049a6:	6861      	ldr	r1, [r4, #4]
 80049a8:	f000 fe76 	bl	8005698 <_Balloc>
 80049ac:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 80049b0:	9f04      	ldr	r7, [sp, #16]
 80049b2:	6020      	str	r0, [r4, #0]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	9307      	str	r3, [sp, #28]
 80049b8:	2f0e      	cmp	r7, #14
 80049ba:	f200 8169 	bhi.w	8004c90 <_dtoa_r+0x5d8>
 80049be:	2d00      	cmp	r5, #0
 80049c0:	f000 8166 	beq.w	8004c90 <_dtoa_r+0x5d8>
 80049c4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80049c8:	f1b9 0f00 	cmp.w	r9, #0
 80049cc:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 80049d0:	dd31      	ble.n	8004a36 <_dtoa_r+0x37e>
 80049d2:	4a80      	ldr	r2, [pc, #512]	; (8004bd4 <_dtoa_r+0x51c>)
 80049d4:	f009 030f 	and.w	r3, r9, #15
 80049d8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80049dc:	ed93 7b00 	vldr	d7, [r3]
 80049e0:	ea4f 1429 	mov.w	r4, r9, asr #4
 80049e4:	06e0      	lsls	r0, r4, #27
 80049e6:	ed8d 7b08 	vstr	d7, [sp, #32]
 80049ea:	d50c      	bpl.n	8004a06 <_dtoa_r+0x34e>
 80049ec:	4b7a      	ldr	r3, [pc, #488]	; (8004bd8 <_dtoa_r+0x520>)
 80049ee:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 80049f2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80049f6:	f7fb fee9 	bl	80007cc <__aeabi_ddiv>
 80049fa:	f004 040f 	and.w	r4, r4, #15
 80049fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004a02:	2703      	movs	r7, #3
 8004a04:	e000      	b.n	8004a08 <_dtoa_r+0x350>
 8004a06:	2702      	movs	r7, #2
 8004a08:	4d73      	ldr	r5, [pc, #460]	; (8004bd8 <_dtoa_r+0x520>)
 8004a0a:	b16c      	cbz	r4, 8004a28 <_dtoa_r+0x370>
 8004a0c:	07e1      	lsls	r1, r4, #31
 8004a0e:	d508      	bpl.n	8004a22 <_dtoa_r+0x36a>
 8004a10:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004a14:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004a18:	f7fb fdae 	bl	8000578 <__aeabi_dmul>
 8004a1c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004a20:	3701      	adds	r7, #1
 8004a22:	1064      	asrs	r4, r4, #1
 8004a24:	3508      	adds	r5, #8
 8004a26:	e7f0      	b.n	8004a0a <_dtoa_r+0x352>
 8004a28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004a2c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004a30:	f7fb fecc 	bl	80007cc <__aeabi_ddiv>
 8004a34:	e01b      	b.n	8004a6e <_dtoa_r+0x3b6>
 8004a36:	f1c9 0400 	rsb	r4, r9, #0
 8004a3a:	b1dc      	cbz	r4, 8004a74 <_dtoa_r+0x3bc>
 8004a3c:	4b65      	ldr	r3, [pc, #404]	; (8004bd4 <_dtoa_r+0x51c>)
 8004a3e:	4d66      	ldr	r5, [pc, #408]	; (8004bd8 <_dtoa_r+0x520>)
 8004a40:	f004 020f 	and.w	r2, r4, #15
 8004a44:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004a48:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8004a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a50:	f7fb fd92 	bl	8000578 <__aeabi_dmul>
 8004a54:	1124      	asrs	r4, r4, #4
 8004a56:	2702      	movs	r7, #2
 8004a58:	b14c      	cbz	r4, 8004a6e <_dtoa_r+0x3b6>
 8004a5a:	07e2      	lsls	r2, r4, #31
 8004a5c:	d504      	bpl.n	8004a68 <_dtoa_r+0x3b0>
 8004a5e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004a62:	3701      	adds	r7, #1
 8004a64:	f7fb fd88 	bl	8000578 <__aeabi_dmul>
 8004a68:	1064      	asrs	r4, r4, #1
 8004a6a:	3508      	adds	r5, #8
 8004a6c:	e7f4      	b.n	8004a58 <_dtoa_r+0x3a0>
 8004a6e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004a72:	e000      	b.n	8004a76 <_dtoa_r+0x3be>
 8004a74:	2702      	movs	r7, #2
 8004a76:	9911      	ldr	r1, [sp, #68]	; 0x44
 8004a78:	b1e1      	cbz	r1, 8004ab4 <_dtoa_r+0x3fc>
 8004a7a:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	4620      	mov	r0, r4
 8004a82:	4629      	mov	r1, r5
 8004a84:	4b55      	ldr	r3, [pc, #340]	; (8004bdc <_dtoa_r+0x524>)
 8004a86:	f7fb ffe9 	bl	8000a5c <__aeabi_dcmplt>
 8004a8a:	b1c0      	cbz	r0, 8004abe <_dtoa_r+0x406>
 8004a8c:	9a04      	ldr	r2, [sp, #16]
 8004a8e:	b1da      	cbz	r2, 8004ac8 <_dtoa_r+0x410>
 8004a90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	f340 80f8 	ble.w	8004c88 <_dtoa_r+0x5d0>
 8004a98:	f109 31ff 	add.w	r1, r9, #4294967295
 8004a9c:	910f      	str	r1, [sp, #60]	; 0x3c
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	4620      	mov	r0, r4
 8004aa2:	4629      	mov	r1, r5
 8004aa4:	4b4e      	ldr	r3, [pc, #312]	; (8004be0 <_dtoa_r+0x528>)
 8004aa6:	f7fb fd67 	bl	8000578 <__aeabi_dmul>
 8004aaa:	3701      	adds	r7, #1
 8004aac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004ab0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004ab2:	e00c      	b.n	8004ace <_dtoa_r+0x416>
 8004ab4:	9b04      	ldr	r3, [sp, #16]
 8004ab6:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 8004aba:	9308      	str	r3, [sp, #32]
 8004abc:	e008      	b.n	8004ad0 <_dtoa_r+0x418>
 8004abe:	9904      	ldr	r1, [sp, #16]
 8004ac0:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 8004ac4:	9108      	str	r1, [sp, #32]
 8004ac6:	e003      	b.n	8004ad0 <_dtoa_r+0x418>
 8004ac8:	9a04      	ldr	r2, [sp, #16]
 8004aca:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 8004ace:	9208      	str	r2, [sp, #32]
 8004ad0:	4638      	mov	r0, r7
 8004ad2:	f7fb fceb 	bl	80004ac <__aeabi_i2d>
 8004ad6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004ada:	f7fb fd4d 	bl	8000578 <__aeabi_dmul>
 8004ade:	2200      	movs	r2, #0
 8004ae0:	4b40      	ldr	r3, [pc, #256]	; (8004be4 <_dtoa_r+0x52c>)
 8004ae2:	f7fb fb97 	bl	8000214 <__adddf3>
 8004ae6:	9f08      	ldr	r7, [sp, #32]
 8004ae8:	4604      	mov	r4, r0
 8004aea:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8004aee:	b9cf      	cbnz	r7, 8004b24 <_dtoa_r+0x46c>
 8004af0:	2200      	movs	r2, #0
 8004af2:	4b3d      	ldr	r3, [pc, #244]	; (8004be8 <_dtoa_r+0x530>)
 8004af4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004af8:	f7fb fb8a 	bl	8000210 <__aeabi_dsub>
 8004afc:	4622      	mov	r2, r4
 8004afe:	462b      	mov	r3, r5
 8004b00:	4606      	mov	r6, r0
 8004b02:	460f      	mov	r7, r1
 8004b04:	f7fb ffc8 	bl	8000a98 <__aeabi_dcmpgt>
 8004b08:	2800      	cmp	r0, #0
 8004b0a:	f040 824b 	bne.w	8004fa4 <_dtoa_r+0x8ec>
 8004b0e:	4622      	mov	r2, r4
 8004b10:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8004b14:	4630      	mov	r0, r6
 8004b16:	4639      	mov	r1, r7
 8004b18:	f7fb ffa0 	bl	8000a5c <__aeabi_dcmplt>
 8004b1c:	2800      	cmp	r0, #0
 8004b1e:	f040 8237 	bne.w	8004f90 <_dtoa_r+0x8d8>
 8004b22:	e0b1      	b.n	8004c88 <_dtoa_r+0x5d0>
 8004b24:	9f08      	ldr	r7, [sp, #32]
 8004b26:	4b2b      	ldr	r3, [pc, #172]	; (8004bd4 <_dtoa_r+0x51c>)
 8004b28:	1e7a      	subs	r2, r7, #1
 8004b2a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8004b2c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004b30:	2f00      	cmp	r7, #0
 8004b32:	d05d      	beq.n	8004bf0 <_dtoa_r+0x538>
 8004b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b38:	2000      	movs	r0, #0
 8004b3a:	492c      	ldr	r1, [pc, #176]	; (8004bec <_dtoa_r+0x534>)
 8004b3c:	f7fb fe46 	bl	80007cc <__aeabi_ddiv>
 8004b40:	4622      	mov	r2, r4
 8004b42:	462b      	mov	r3, r5
 8004b44:	f7fb fb64 	bl	8000210 <__aeabi_dsub>
 8004b48:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004b4c:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8004b50:	4604      	mov	r4, r0
 8004b52:	460d      	mov	r5, r1
 8004b54:	4639      	mov	r1, r7
 8004b56:	4630      	mov	r0, r6
 8004b58:	f7fb ffa8 	bl	8000aac <__aeabi_d2iz>
 8004b5c:	9000      	str	r0, [sp, #0]
 8004b5e:	f7fb fca5 	bl	80004ac <__aeabi_i2d>
 8004b62:	4602      	mov	r2, r0
 8004b64:	460b      	mov	r3, r1
 8004b66:	4630      	mov	r0, r6
 8004b68:	4639      	mov	r1, r7
 8004b6a:	f7fb fb51 	bl	8000210 <__aeabi_dsub>
 8004b6e:	f8dd c000 	ldr.w	ip, [sp]
 8004b72:	f10c 0330 	add.w	r3, ip, #48	; 0x30
 8004b76:	f808 3b01 	strb.w	r3, [r8], #1
 8004b7a:	4622      	mov	r2, r4
 8004b7c:	462b      	mov	r3, r5
 8004b7e:	4606      	mov	r6, r0
 8004b80:	460f      	mov	r7, r1
 8004b82:	f7fb ff6b 	bl	8000a5c <__aeabi_dcmplt>
 8004b86:	2800      	cmp	r0, #0
 8004b88:	f040 8333 	bne.w	80051f2 <_dtoa_r+0xb3a>
 8004b8c:	4632      	mov	r2, r6
 8004b8e:	463b      	mov	r3, r7
 8004b90:	2000      	movs	r0, #0
 8004b92:	4912      	ldr	r1, [pc, #72]	; (8004bdc <_dtoa_r+0x524>)
 8004b94:	f7fb fb3c 	bl	8000210 <__aeabi_dsub>
 8004b98:	4622      	mov	r2, r4
 8004b9a:	462b      	mov	r3, r5
 8004b9c:	f7fb ff5e 	bl	8000a5c <__aeabi_dcmplt>
 8004ba0:	2800      	cmp	r0, #0
 8004ba2:	f040 80d4 	bne.w	8004d4e <_dtoa_r+0x696>
 8004ba6:	9907      	ldr	r1, [sp, #28]
 8004ba8:	9a08      	ldr	r2, [sp, #32]
 8004baa:	ebc1 0308 	rsb	r3, r1, r8
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	da6a      	bge.n	8004c88 <_dtoa_r+0x5d0>
 8004bb2:	4620      	mov	r0, r4
 8004bb4:	4629      	mov	r1, r5
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	4b09      	ldr	r3, [pc, #36]	; (8004be0 <_dtoa_r+0x528>)
 8004bba:	f7fb fcdd 	bl	8000578 <__aeabi_dmul>
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	4604      	mov	r4, r0
 8004bc2:	460d      	mov	r5, r1
 8004bc4:	4630      	mov	r0, r6
 8004bc6:	4639      	mov	r1, r7
 8004bc8:	4b05      	ldr	r3, [pc, #20]	; (8004be0 <_dtoa_r+0x528>)
 8004bca:	f7fb fcd5 	bl	8000578 <__aeabi_dmul>
 8004bce:	4606      	mov	r6, r0
 8004bd0:	460f      	mov	r7, r1
 8004bd2:	e7bf      	b.n	8004b54 <_dtoa_r+0x49c>
 8004bd4:	08007a58 	.word	0x08007a58
 8004bd8:	08007b20 	.word	0x08007b20
 8004bdc:	3ff00000 	.word	0x3ff00000
 8004be0:	40240000 	.word	0x40240000
 8004be4:	401c0000 	.word	0x401c0000
 8004be8:	40140000 	.word	0x40140000
 8004bec:	3fe00000 	.word	0x3fe00000
 8004bf0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004bf4:	4622      	mov	r2, r4
 8004bf6:	462b      	mov	r3, r5
 8004bf8:	f7fb fcbe 	bl	8000578 <__aeabi_dmul>
 8004bfc:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8004c00:	9b08      	ldr	r3, [sp, #32]
 8004c02:	9c07      	ldr	r4, [sp, #28]
 8004c04:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
 8004c08:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004c0c:	4498      	add	r8, r3
 8004c0e:	4639      	mov	r1, r7
 8004c10:	4630      	mov	r0, r6
 8004c12:	f7fb ff4b 	bl	8000aac <__aeabi_d2iz>
 8004c16:	4605      	mov	r5, r0
 8004c18:	f7fb fc48 	bl	80004ac <__aeabi_i2d>
 8004c1c:	3530      	adds	r5, #48	; 0x30
 8004c1e:	4602      	mov	r2, r0
 8004c20:	460b      	mov	r3, r1
 8004c22:	4630      	mov	r0, r6
 8004c24:	4639      	mov	r1, r7
 8004c26:	f7fb faf3 	bl	8000210 <__aeabi_dsub>
 8004c2a:	f804 5b01 	strb.w	r5, [r4], #1
 8004c2e:	4544      	cmp	r4, r8
 8004c30:	4606      	mov	r6, r0
 8004c32:	460f      	mov	r7, r1
 8004c34:	d121      	bne.n	8004c7a <_dtoa_r+0x5c2>
 8004c36:	2200      	movs	r2, #0
 8004c38:	4b87      	ldr	r3, [pc, #540]	; (8004e58 <_dtoa_r+0x7a0>)
 8004c3a:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 8004c3e:	f7fb fae9 	bl	8000214 <__adddf3>
 8004c42:	4602      	mov	r2, r0
 8004c44:	460b      	mov	r3, r1
 8004c46:	4630      	mov	r0, r6
 8004c48:	4639      	mov	r1, r7
 8004c4a:	f7fb ff25 	bl	8000a98 <__aeabi_dcmpgt>
 8004c4e:	2800      	cmp	r0, #0
 8004c50:	d17d      	bne.n	8004d4e <_dtoa_r+0x696>
 8004c52:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8004c56:	2000      	movs	r0, #0
 8004c58:	497f      	ldr	r1, [pc, #508]	; (8004e58 <_dtoa_r+0x7a0>)
 8004c5a:	f7fb fad9 	bl	8000210 <__aeabi_dsub>
 8004c5e:	4602      	mov	r2, r0
 8004c60:	460b      	mov	r3, r1
 8004c62:	4630      	mov	r0, r6
 8004c64:	4639      	mov	r1, r7
 8004c66:	f7fb fef9 	bl	8000a5c <__aeabi_dcmplt>
 8004c6a:	b168      	cbz	r0, 8004c88 <_dtoa_r+0x5d0>
 8004c6c:	46a0      	mov	r8, r4
 8004c6e:	3c01      	subs	r4, #1
 8004c70:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8004c74:	2b30      	cmp	r3, #48	; 0x30
 8004c76:	d0f9      	beq.n	8004c6c <_dtoa_r+0x5b4>
 8004c78:	e2bb      	b.n	80051f2 <_dtoa_r+0xb3a>
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	4b77      	ldr	r3, [pc, #476]	; (8004e5c <_dtoa_r+0x7a4>)
 8004c7e:	f7fb fc7b 	bl	8000578 <__aeabi_dmul>
 8004c82:	4606      	mov	r6, r0
 8004c84:	460f      	mov	r7, r1
 8004c86:	e7c2      	b.n	8004c0e <_dtoa_r+0x556>
 8004c88:	ed9d 7b12 	vldr	d7, [sp, #72]	; 0x48
 8004c8c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004c90:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	db7c      	blt.n	8004d90 <_dtoa_r+0x6d8>
 8004c96:	f1b9 0f0e 	cmp.w	r9, #14
 8004c9a:	dc79      	bgt.n	8004d90 <_dtoa_r+0x6d8>
 8004c9c:	4b70      	ldr	r3, [pc, #448]	; (8004e60 <_dtoa_r+0x7a8>)
 8004c9e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8004ca0:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8004ca4:	2f00      	cmp	r7, #0
 8004ca6:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004caa:	da14      	bge.n	8004cd6 <_dtoa_r+0x61e>
 8004cac:	9f04      	ldr	r7, [sp, #16]
 8004cae:	2f00      	cmp	r7, #0
 8004cb0:	dc11      	bgt.n	8004cd6 <_dtoa_r+0x61e>
 8004cb2:	f040 816f 	bne.w	8004f94 <_dtoa_r+0x8dc>
 8004cb6:	4620      	mov	r0, r4
 8004cb8:	4629      	mov	r1, r5
 8004cba:	2200      	movs	r2, #0
 8004cbc:	4b69      	ldr	r3, [pc, #420]	; (8004e64 <_dtoa_r+0x7ac>)
 8004cbe:	f7fb fc5b 	bl	8000578 <__aeabi_dmul>
 8004cc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004cc6:	f7fb fedd 	bl	8000a84 <__aeabi_dcmpge>
 8004cca:	9d04      	ldr	r5, [sp, #16]
 8004ccc:	462c      	mov	r4, r5
 8004cce:	2800      	cmp	r0, #0
 8004cd0:	f040 8162 	bne.w	8004f98 <_dtoa_r+0x8e0>
 8004cd4:	e16a      	b.n	8004fac <_dtoa_r+0x8f4>
 8004cd6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8004cda:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8004cde:	4622      	mov	r2, r4
 8004ce0:	462b      	mov	r3, r5
 8004ce2:	4630      	mov	r0, r6
 8004ce4:	4639      	mov	r1, r7
 8004ce6:	f7fb fd71 	bl	80007cc <__aeabi_ddiv>
 8004cea:	f7fb fedf 	bl	8000aac <__aeabi_d2iz>
 8004cee:	9002      	str	r0, [sp, #8]
 8004cf0:	f7fb fbdc 	bl	80004ac <__aeabi_i2d>
 8004cf4:	4622      	mov	r2, r4
 8004cf6:	462b      	mov	r3, r5
 8004cf8:	f7fb fc3e 	bl	8000578 <__aeabi_dmul>
 8004cfc:	4602      	mov	r2, r0
 8004cfe:	460b      	mov	r3, r1
 8004d00:	4630      	mov	r0, r6
 8004d02:	4639      	mov	r1, r7
 8004d04:	f7fb fa84 	bl	8000210 <__aeabi_dsub>
 8004d08:	9f02      	ldr	r7, [sp, #8]
 8004d0a:	f107 0630 	add.w	r6, r7, #48	; 0x30
 8004d0e:	f808 6b01 	strb.w	r6, [r8], #1
 8004d12:	9f07      	ldr	r7, [sp, #28]
 8004d14:	ebc7 0608 	rsb	r6, r7, r8
 8004d18:	9f04      	ldr	r7, [sp, #16]
 8004d1a:	42be      	cmp	r6, r7
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	460b      	mov	r3, r1
 8004d20:	d129      	bne.n	8004d76 <_dtoa_r+0x6be>
 8004d22:	f7fb fa77 	bl	8000214 <__adddf3>
 8004d26:	4622      	mov	r2, r4
 8004d28:	462b      	mov	r3, r5
 8004d2a:	4606      	mov	r6, r0
 8004d2c:	460f      	mov	r7, r1
 8004d2e:	f7fb feb3 	bl	8000a98 <__aeabi_dcmpgt>
 8004d32:	b970      	cbnz	r0, 8004d52 <_dtoa_r+0x69a>
 8004d34:	4630      	mov	r0, r6
 8004d36:	4639      	mov	r1, r7
 8004d38:	4622      	mov	r2, r4
 8004d3a:	462b      	mov	r3, r5
 8004d3c:	f7fb fe84 	bl	8000a48 <__aeabi_dcmpeq>
 8004d40:	2800      	cmp	r0, #0
 8004d42:	f000 8258 	beq.w	80051f6 <_dtoa_r+0xb3e>
 8004d46:	9f02      	ldr	r7, [sp, #8]
 8004d48:	07fb      	lsls	r3, r7, #31
 8004d4a:	d402      	bmi.n	8004d52 <_dtoa_r+0x69a>
 8004d4c:	e253      	b.n	80051f6 <_dtoa_r+0xb3e>
 8004d4e:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
 8004d52:	4643      	mov	r3, r8
 8004d54:	4698      	mov	r8, r3
 8004d56:	3b01      	subs	r3, #1
 8004d58:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8004d5c:	2a39      	cmp	r2, #57	; 0x39
 8004d5e:	d106      	bne.n	8004d6e <_dtoa_r+0x6b6>
 8004d60:	9f07      	ldr	r7, [sp, #28]
 8004d62:	429f      	cmp	r7, r3
 8004d64:	d1f6      	bne.n	8004d54 <_dtoa_r+0x69c>
 8004d66:	2230      	movs	r2, #48	; 0x30
 8004d68:	f109 0901 	add.w	r9, r9, #1
 8004d6c:	703a      	strb	r2, [r7, #0]
 8004d6e:	781a      	ldrb	r2, [r3, #0]
 8004d70:	3201      	adds	r2, #1
 8004d72:	701a      	strb	r2, [r3, #0]
 8004d74:	e23f      	b.n	80051f6 <_dtoa_r+0xb3e>
 8004d76:	2200      	movs	r2, #0
 8004d78:	4b38      	ldr	r3, [pc, #224]	; (8004e5c <_dtoa_r+0x7a4>)
 8004d7a:	f7fb fbfd 	bl	8000578 <__aeabi_dmul>
 8004d7e:	2200      	movs	r2, #0
 8004d80:	2300      	movs	r3, #0
 8004d82:	4606      	mov	r6, r0
 8004d84:	460f      	mov	r7, r1
 8004d86:	f7fb fe5f 	bl	8000a48 <__aeabi_dcmpeq>
 8004d8a:	2800      	cmp	r0, #0
 8004d8c:	d0a7      	beq.n	8004cde <_dtoa_r+0x626>
 8004d8e:	e232      	b.n	80051f6 <_dtoa_r+0xb3e>
 8004d90:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8004d92:	2f00      	cmp	r7, #0
 8004d94:	d030      	beq.n	8004df8 <_dtoa_r+0x740>
 8004d96:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8004d98:	2f01      	cmp	r7, #1
 8004d9a:	dc0a      	bgt.n	8004db2 <_dtoa_r+0x6fa>
 8004d9c:	9f15      	ldr	r7, [sp, #84]	; 0x54
 8004d9e:	b117      	cbz	r7, 8004da6 <_dtoa_r+0x6ee>
 8004da0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004da4:	e002      	b.n	8004dac <_dtoa_r+0x6f4>
 8004da6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8004da8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004dac:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8004dae:	9e05      	ldr	r6, [sp, #20]
 8004db0:	e016      	b.n	8004de0 <_dtoa_r+0x728>
 8004db2:	9f04      	ldr	r7, [sp, #16]
 8004db4:	1e7d      	subs	r5, r7, #1
 8004db6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8004db8:	42af      	cmp	r7, r5
 8004dba:	db01      	blt.n	8004dc0 <_dtoa_r+0x708>
 8004dbc:	1b7d      	subs	r5, r7, r5
 8004dbe:	e006      	b.n	8004dce <_dtoa_r+0x716>
 8004dc0:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8004dc2:	950b      	str	r5, [sp, #44]	; 0x2c
 8004dc4:	1beb      	subs	r3, r5, r7
 8004dc6:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8004dc8:	441f      	add	r7, r3
 8004dca:	9710      	str	r7, [sp, #64]	; 0x40
 8004dcc:	2500      	movs	r5, #0
 8004dce:	9f04      	ldr	r7, [sp, #16]
 8004dd0:	2f00      	cmp	r7, #0
 8004dd2:	da03      	bge.n	8004ddc <_dtoa_r+0x724>
 8004dd4:	9905      	ldr	r1, [sp, #20]
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	1bce      	subs	r6, r1, r7
 8004dda:	e001      	b.n	8004de0 <_dtoa_r+0x728>
 8004ddc:	9e05      	ldr	r6, [sp, #20]
 8004dde:	9b04      	ldr	r3, [sp, #16]
 8004de0:	9f05      	ldr	r7, [sp, #20]
 8004de2:	441f      	add	r7, r3
 8004de4:	9705      	str	r7, [sp, #20]
 8004de6:	9f06      	ldr	r7, [sp, #24]
 8004de8:	4650      	mov	r0, sl
 8004dea:	441f      	add	r7, r3
 8004dec:	2101      	movs	r1, #1
 8004dee:	9706      	str	r7, [sp, #24]
 8004df0:	f000 fd25 	bl	800583e <__i2b>
 8004df4:	4604      	mov	r4, r0
 8004df6:	e002      	b.n	8004dfe <_dtoa_r+0x746>
 8004df8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8004dfa:	9e05      	ldr	r6, [sp, #20]
 8004dfc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8004dfe:	b16e      	cbz	r6, 8004e1c <_dtoa_r+0x764>
 8004e00:	9f06      	ldr	r7, [sp, #24]
 8004e02:	2f00      	cmp	r7, #0
 8004e04:	dd0a      	ble.n	8004e1c <_dtoa_r+0x764>
 8004e06:	463b      	mov	r3, r7
 8004e08:	9f05      	ldr	r7, [sp, #20]
 8004e0a:	42b3      	cmp	r3, r6
 8004e0c:	bfa8      	it	ge
 8004e0e:	4633      	movge	r3, r6
 8004e10:	1aff      	subs	r7, r7, r3
 8004e12:	9705      	str	r7, [sp, #20]
 8004e14:	9f06      	ldr	r7, [sp, #24]
 8004e16:	1aff      	subs	r7, r7, r3
 8004e18:	1af6      	subs	r6, r6, r3
 8004e1a:	9706      	str	r7, [sp, #24]
 8004e1c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8004e1e:	2f00      	cmp	r7, #0
 8004e20:	dd28      	ble.n	8004e74 <_dtoa_r+0x7bc>
 8004e22:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8004e24:	b307      	cbz	r7, 8004e68 <_dtoa_r+0x7b0>
 8004e26:	2d00      	cmp	r5, #0
 8004e28:	dd10      	ble.n	8004e4c <_dtoa_r+0x794>
 8004e2a:	4621      	mov	r1, r4
 8004e2c:	462a      	mov	r2, r5
 8004e2e:	4650      	mov	r0, sl
 8004e30:	f000 fda6 	bl	8005980 <__pow5mult>
 8004e34:	4604      	mov	r4, r0
 8004e36:	465a      	mov	r2, fp
 8004e38:	4621      	mov	r1, r4
 8004e3a:	4650      	mov	r0, sl
 8004e3c:	f000 fd08 	bl	8005850 <__multiply>
 8004e40:	4659      	mov	r1, fp
 8004e42:	4607      	mov	r7, r0
 8004e44:	4650      	mov	r0, sl
 8004e46:	f000 fc5c 	bl	8005702 <_Bfree>
 8004e4a:	46bb      	mov	fp, r7
 8004e4c:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8004e4e:	1b7a      	subs	r2, r7, r5
 8004e50:	d010      	beq.n	8004e74 <_dtoa_r+0x7bc>
 8004e52:	4650      	mov	r0, sl
 8004e54:	4659      	mov	r1, fp
 8004e56:	e00a      	b.n	8004e6e <_dtoa_r+0x7b6>
 8004e58:	3fe00000 	.word	0x3fe00000
 8004e5c:	40240000 	.word	0x40240000
 8004e60:	08007a58 	.word	0x08007a58
 8004e64:	40140000 	.word	0x40140000
 8004e68:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004e6a:	4650      	mov	r0, sl
 8004e6c:	4659      	mov	r1, fp
 8004e6e:	f000 fd87 	bl	8005980 <__pow5mult>
 8004e72:	4683      	mov	fp, r0
 8004e74:	4650      	mov	r0, sl
 8004e76:	2101      	movs	r1, #1
 8004e78:	f000 fce1 	bl	800583e <__i2b>
 8004e7c:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8004e7e:	2f00      	cmp	r7, #0
 8004e80:	4605      	mov	r5, r0
 8004e82:	dd05      	ble.n	8004e90 <_dtoa_r+0x7d8>
 8004e84:	4629      	mov	r1, r5
 8004e86:	4650      	mov	r0, sl
 8004e88:	463a      	mov	r2, r7
 8004e8a:	f000 fd79 	bl	8005980 <__pow5mult>
 8004e8e:	4605      	mov	r5, r0
 8004e90:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8004e92:	2f01      	cmp	r7, #1
 8004e94:	dc12      	bgt.n	8004ebc <_dtoa_r+0x804>
 8004e96:	9902      	ldr	r1, [sp, #8]
 8004e98:	b981      	cbnz	r1, 8004ebc <_dtoa_r+0x804>
 8004e9a:	9a03      	ldr	r2, [sp, #12]
 8004e9c:	f3c2 0313 	ubfx	r3, r2, #0, #20
 8004ea0:	b973      	cbnz	r3, 8004ec0 <_dtoa_r+0x808>
 8004ea2:	f022 4700 	bic.w	r7, r2, #2147483648	; 0x80000000
 8004ea6:	0d3f      	lsrs	r7, r7, #20
 8004ea8:	053f      	lsls	r7, r7, #20
 8004eaa:	b157      	cbz	r7, 8004ec2 <_dtoa_r+0x80a>
 8004eac:	9f05      	ldr	r7, [sp, #20]
 8004eae:	3701      	adds	r7, #1
 8004eb0:	9705      	str	r7, [sp, #20]
 8004eb2:	9f06      	ldr	r7, [sp, #24]
 8004eb4:	3701      	adds	r7, #1
 8004eb6:	9706      	str	r7, [sp, #24]
 8004eb8:	2701      	movs	r7, #1
 8004eba:	e002      	b.n	8004ec2 <_dtoa_r+0x80a>
 8004ebc:	2700      	movs	r7, #0
 8004ebe:	e000      	b.n	8004ec2 <_dtoa_r+0x80a>
 8004ec0:	9f02      	ldr	r7, [sp, #8]
 8004ec2:	9910      	ldr	r1, [sp, #64]	; 0x40
 8004ec4:	b141      	cbz	r1, 8004ed8 <_dtoa_r+0x820>
 8004ec6:	692b      	ldr	r3, [r5, #16]
 8004ec8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8004ecc:	6918      	ldr	r0, [r3, #16]
 8004ece:	f000 fc69 	bl	80057a4 <__hi0bits>
 8004ed2:	f1c0 0020 	rsb	r0, r0, #32
 8004ed6:	e000      	b.n	8004eda <_dtoa_r+0x822>
 8004ed8:	2001      	movs	r0, #1
 8004eda:	9b06      	ldr	r3, [sp, #24]
 8004edc:	4403      	add	r3, r0
 8004ede:	f013 031f 	ands.w	r3, r3, #31
 8004ee2:	d008      	beq.n	8004ef6 <_dtoa_r+0x83e>
 8004ee4:	f1c3 0220 	rsb	r2, r3, #32
 8004ee8:	2a04      	cmp	r2, #4
 8004eea:	dd02      	ble.n	8004ef2 <_dtoa_r+0x83a>
 8004eec:	f1c3 031c 	rsb	r3, r3, #28
 8004ef0:	e002      	b.n	8004ef8 <_dtoa_r+0x840>
 8004ef2:	d008      	beq.n	8004f06 <_dtoa_r+0x84e>
 8004ef4:	4613      	mov	r3, r2
 8004ef6:	331c      	adds	r3, #28
 8004ef8:	9a05      	ldr	r2, [sp, #20]
 8004efa:	9906      	ldr	r1, [sp, #24]
 8004efc:	441a      	add	r2, r3
 8004efe:	4419      	add	r1, r3
 8004f00:	9205      	str	r2, [sp, #20]
 8004f02:	441e      	add	r6, r3
 8004f04:	9106      	str	r1, [sp, #24]
 8004f06:	9a05      	ldr	r2, [sp, #20]
 8004f08:	2a00      	cmp	r2, #0
 8004f0a:	dd04      	ble.n	8004f16 <_dtoa_r+0x85e>
 8004f0c:	4659      	mov	r1, fp
 8004f0e:	4650      	mov	r0, sl
 8004f10:	f000 fd84 	bl	8005a1c <__lshift>
 8004f14:	4683      	mov	fp, r0
 8004f16:	9b06      	ldr	r3, [sp, #24]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	dd05      	ble.n	8004f28 <_dtoa_r+0x870>
 8004f1c:	4629      	mov	r1, r5
 8004f1e:	4650      	mov	r0, sl
 8004f20:	461a      	mov	r2, r3
 8004f22:	f000 fd7b 	bl	8005a1c <__lshift>
 8004f26:	4605      	mov	r5, r0
 8004f28:	9911      	ldr	r1, [sp, #68]	; 0x44
 8004f2a:	b1e1      	cbz	r1, 8004f66 <_dtoa_r+0x8ae>
 8004f2c:	4658      	mov	r0, fp
 8004f2e:	4629      	mov	r1, r5
 8004f30:	f000 fdc7 	bl	8005ac2 <__mcmp>
 8004f34:	2800      	cmp	r0, #0
 8004f36:	da16      	bge.n	8004f66 <_dtoa_r+0x8ae>
 8004f38:	4659      	mov	r1, fp
 8004f3a:	220a      	movs	r2, #10
 8004f3c:	4650      	mov	r0, sl
 8004f3e:	2300      	movs	r3, #0
 8004f40:	f000 fbf6 	bl	8005730 <__multadd>
 8004f44:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004f46:	f109 39ff 	add.w	r9, r9, #4294967295
 8004f4a:	4683      	mov	fp, r0
 8004f4c:	b14a      	cbz	r2, 8004f62 <_dtoa_r+0x8aa>
 8004f4e:	4621      	mov	r1, r4
 8004f50:	2300      	movs	r3, #0
 8004f52:	4650      	mov	r0, sl
 8004f54:	220a      	movs	r2, #10
 8004f56:	f000 fbeb 	bl	8005730 <__multadd>
 8004f5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f5c:	9304      	str	r3, [sp, #16]
 8004f5e:	4604      	mov	r4, r0
 8004f60:	e001      	b.n	8004f66 <_dtoa_r+0x8ae>
 8004f62:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004f64:	9104      	str	r1, [sp, #16]
 8004f66:	9a04      	ldr	r2, [sp, #16]
 8004f68:	2a00      	cmp	r2, #0
 8004f6a:	dc29      	bgt.n	8004fc0 <_dtoa_r+0x908>
 8004f6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004f6e:	2b02      	cmp	r3, #2
 8004f70:	dd26      	ble.n	8004fc0 <_dtoa_r+0x908>
 8004f72:	b98a      	cbnz	r2, 8004f98 <_dtoa_r+0x8e0>
 8004f74:	4629      	mov	r1, r5
 8004f76:	2205      	movs	r2, #5
 8004f78:	9b04      	ldr	r3, [sp, #16]
 8004f7a:	4650      	mov	r0, sl
 8004f7c:	f000 fbd8 	bl	8005730 <__multadd>
 8004f80:	4605      	mov	r5, r0
 8004f82:	4629      	mov	r1, r5
 8004f84:	4658      	mov	r0, fp
 8004f86:	f000 fd9c 	bl	8005ac2 <__mcmp>
 8004f8a:	2800      	cmp	r0, #0
 8004f8c:	dc0e      	bgt.n	8004fac <_dtoa_r+0x8f4>
 8004f8e:	e003      	b.n	8004f98 <_dtoa_r+0x8e0>
 8004f90:	9d08      	ldr	r5, [sp, #32]
 8004f92:	e000      	b.n	8004f96 <_dtoa_r+0x8de>
 8004f94:	2500      	movs	r5, #0
 8004f96:	462c      	mov	r4, r5
 8004f98:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8004f9a:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8004f9e:	ea6f 0907 	mvn.w	r9, r7
 8004fa2:	e00a      	b.n	8004fba <_dtoa_r+0x902>
 8004fa4:	9d08      	ldr	r5, [sp, #32]
 8004fa6:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
 8004faa:	462c      	mov	r4, r5
 8004fac:	9f07      	ldr	r7, [sp, #28]
 8004fae:	2331      	movs	r3, #49	; 0x31
 8004fb0:	f107 0801 	add.w	r8, r7, #1
 8004fb4:	703b      	strb	r3, [r7, #0]
 8004fb6:	f109 0901 	add.w	r9, r9, #1
 8004fba:	4627      	mov	r7, r4
 8004fbc:	2400      	movs	r4, #0
 8004fbe:	e107      	b.n	80051d0 <_dtoa_r+0xb18>
 8004fc0:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004fc2:	2900      	cmp	r1, #0
 8004fc4:	f000 80bb 	beq.w	800513e <_dtoa_r+0xa86>
 8004fc8:	2e00      	cmp	r6, #0
 8004fca:	dd05      	ble.n	8004fd8 <_dtoa_r+0x920>
 8004fcc:	4621      	mov	r1, r4
 8004fce:	4650      	mov	r0, sl
 8004fd0:	4632      	mov	r2, r6
 8004fd2:	f000 fd23 	bl	8005a1c <__lshift>
 8004fd6:	4604      	mov	r4, r0
 8004fd8:	b19f      	cbz	r7, 8005002 <_dtoa_r+0x94a>
 8004fda:	6861      	ldr	r1, [r4, #4]
 8004fdc:	4650      	mov	r0, sl
 8004fde:	f000 fb5b 	bl	8005698 <_Balloc>
 8004fe2:	6922      	ldr	r2, [r4, #16]
 8004fe4:	3202      	adds	r2, #2
 8004fe6:	4606      	mov	r6, r0
 8004fe8:	f104 010c 	add.w	r1, r4, #12
 8004fec:	0092      	lsls	r2, r2, #2
 8004fee:	300c      	adds	r0, #12
 8004ff0:	f000 fb47 	bl	8005682 <memcpy>
 8004ff4:	4650      	mov	r0, sl
 8004ff6:	4631      	mov	r1, r6
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	f000 fd0f 	bl	8005a1c <__lshift>
 8004ffe:	4607      	mov	r7, r0
 8005000:	e000      	b.n	8005004 <_dtoa_r+0x94c>
 8005002:	4627      	mov	r7, r4
 8005004:	9e07      	ldr	r6, [sp, #28]
 8005006:	4629      	mov	r1, r5
 8005008:	4658      	mov	r0, fp
 800500a:	f7ff fac5 	bl	8004598 <quorem>
 800500e:	4621      	mov	r1, r4
 8005010:	f100 0c30 	add.w	ip, r0, #48	; 0x30
 8005014:	4680      	mov	r8, r0
 8005016:	4658      	mov	r0, fp
 8005018:	f8cd c000 	str.w	ip, [sp]
 800501c:	f000 fd51 	bl	8005ac2 <__mcmp>
 8005020:	463a      	mov	r2, r7
 8005022:	9005      	str	r0, [sp, #20]
 8005024:	4629      	mov	r1, r5
 8005026:	4650      	mov	r0, sl
 8005028:	f000 fd68 	bl	8005afc <__mdiff>
 800502c:	68c3      	ldr	r3, [r0, #12]
 800502e:	f8dd c000 	ldr.w	ip, [sp]
 8005032:	4602      	mov	r2, r0
 8005034:	b94b      	cbnz	r3, 800504a <_dtoa_r+0x992>
 8005036:	4611      	mov	r1, r2
 8005038:	4658      	mov	r0, fp
 800503a:	9201      	str	r2, [sp, #4]
 800503c:	f000 fd41 	bl	8005ac2 <__mcmp>
 8005040:	9a01      	ldr	r2, [sp, #4]
 8005042:	f8dd c000 	ldr.w	ip, [sp]
 8005046:	4603      	mov	r3, r0
 8005048:	e000      	b.n	800504c <_dtoa_r+0x994>
 800504a:	2301      	movs	r3, #1
 800504c:	4650      	mov	r0, sl
 800504e:	4611      	mov	r1, r2
 8005050:	9301      	str	r3, [sp, #4]
 8005052:	f8cd c000 	str.w	ip, [sp]
 8005056:	f000 fb54 	bl	8005702 <_Bfree>
 800505a:	9b01      	ldr	r3, [sp, #4]
 800505c:	f8dd c000 	ldr.w	ip, [sp]
 8005060:	b963      	cbnz	r3, 800507c <_dtoa_r+0x9c4>
 8005062:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005064:	b952      	cbnz	r2, 800507c <_dtoa_r+0x9c4>
 8005066:	9902      	ldr	r1, [sp, #8]
 8005068:	f001 0201 	and.w	r2, r1, #1
 800506c:	b932      	cbnz	r2, 800507c <_dtoa_r+0x9c4>
 800506e:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
 8005072:	d035      	beq.n	80050e0 <_dtoa_r+0xa28>
 8005074:	9b05      	ldr	r3, [sp, #20]
 8005076:	2b00      	cmp	r3, #0
 8005078:	dc24      	bgt.n	80050c4 <_dtoa_r+0xa0c>
 800507a:	e025      	b.n	80050c8 <_dtoa_r+0xa10>
 800507c:	9905      	ldr	r1, [sp, #20]
 800507e:	2900      	cmp	r1, #0
 8005080:	da02      	bge.n	8005088 <_dtoa_r+0x9d0>
 8005082:	2b00      	cmp	r3, #0
 8005084:	dc08      	bgt.n	8005098 <_dtoa_r+0x9e0>
 8005086:	e01f      	b.n	80050c8 <_dtoa_r+0xa10>
 8005088:	d123      	bne.n	80050d2 <_dtoa_r+0xa1a>
 800508a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800508c:	bb0a      	cbnz	r2, 80050d2 <_dtoa_r+0xa1a>
 800508e:	9902      	ldr	r1, [sp, #8]
 8005090:	f001 0201 	and.w	r2, r1, #1
 8005094:	b9ea      	cbnz	r2, 80050d2 <_dtoa_r+0xa1a>
 8005096:	e7f4      	b.n	8005082 <_dtoa_r+0x9ca>
 8005098:	4659      	mov	r1, fp
 800509a:	2201      	movs	r2, #1
 800509c:	4650      	mov	r0, sl
 800509e:	f8cd c000 	str.w	ip, [sp]
 80050a2:	f000 fcbb 	bl	8005a1c <__lshift>
 80050a6:	4629      	mov	r1, r5
 80050a8:	4683      	mov	fp, r0
 80050aa:	f000 fd0a 	bl	8005ac2 <__mcmp>
 80050ae:	2800      	cmp	r0, #0
 80050b0:	f8dd c000 	ldr.w	ip, [sp]
 80050b4:	dc03      	bgt.n	80050be <_dtoa_r+0xa06>
 80050b6:	d107      	bne.n	80050c8 <_dtoa_r+0xa10>
 80050b8:	f01c 0f01 	tst.w	ip, #1
 80050bc:	d004      	beq.n	80050c8 <_dtoa_r+0xa10>
 80050be:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
 80050c2:	d00d      	beq.n	80050e0 <_dtoa_r+0xa28>
 80050c4:	f108 0c31 	add.w	ip, r8, #49	; 0x31
 80050c8:	f106 0801 	add.w	r8, r6, #1
 80050cc:	f886 c000 	strb.w	ip, [r6]
 80050d0:	e07e      	b.n	80051d0 <_dtoa_r+0xb18>
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	f106 0801 	add.w	r8, r6, #1
 80050d8:	dd09      	ble.n	80050ee <_dtoa_r+0xa36>
 80050da:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
 80050de:	d103      	bne.n	80050e8 <_dtoa_r+0xa30>
 80050e0:	2339      	movs	r3, #57	; 0x39
 80050e2:	7033      	strb	r3, [r6, #0]
 80050e4:	3601      	adds	r6, #1
 80050e6:	e05b      	b.n	80051a0 <_dtoa_r+0xae8>
 80050e8:	f10c 0301 	add.w	r3, ip, #1
 80050ec:	e068      	b.n	80051c0 <_dtoa_r+0xb08>
 80050ee:	9a07      	ldr	r2, [sp, #28]
 80050f0:	9904      	ldr	r1, [sp, #16]
 80050f2:	4646      	mov	r6, r8
 80050f4:	ebc2 0308 	rsb	r3, r2, r8
 80050f8:	428b      	cmp	r3, r1
 80050fa:	f806 cc01 	strb.w	ip, [r6, #-1]
 80050fe:	d03c      	beq.n	800517a <_dtoa_r+0xac2>
 8005100:	4659      	mov	r1, fp
 8005102:	220a      	movs	r2, #10
 8005104:	2300      	movs	r3, #0
 8005106:	4650      	mov	r0, sl
 8005108:	f000 fb12 	bl	8005730 <__multadd>
 800510c:	42bc      	cmp	r4, r7
 800510e:	4683      	mov	fp, r0
 8005110:	4621      	mov	r1, r4
 8005112:	4650      	mov	r0, sl
 8005114:	f04f 020a 	mov.w	r2, #10
 8005118:	f04f 0300 	mov.w	r3, #0
 800511c:	d104      	bne.n	8005128 <_dtoa_r+0xa70>
 800511e:	f000 fb07 	bl	8005730 <__multadd>
 8005122:	4604      	mov	r4, r0
 8005124:	4607      	mov	r7, r0
 8005126:	e76e      	b.n	8005006 <_dtoa_r+0x94e>
 8005128:	f000 fb02 	bl	8005730 <__multadd>
 800512c:	4639      	mov	r1, r7
 800512e:	4604      	mov	r4, r0
 8005130:	220a      	movs	r2, #10
 8005132:	4650      	mov	r0, sl
 8005134:	2300      	movs	r3, #0
 8005136:	f000 fafb 	bl	8005730 <__multadd>
 800513a:	4607      	mov	r7, r0
 800513c:	e763      	b.n	8005006 <_dtoa_r+0x94e>
 800513e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8005140:	4658      	mov	r0, fp
 8005142:	4629      	mov	r1, r5
 8005144:	f7ff fa28 	bl	8004598 <quorem>
 8005148:	9f07      	ldr	r7, [sp, #28]
 800514a:	f100 0c30 	add.w	ip, r0, #48	; 0x30
 800514e:	f807 c006 	strb.w	ip, [r7, r6]
 8005152:	9f04      	ldr	r7, [sp, #16]
 8005154:	3601      	adds	r6, #1
 8005156:	42be      	cmp	r6, r7
 8005158:	db07      	blt.n	800516a <_dtoa_r+0xab2>
 800515a:	9e07      	ldr	r6, [sp, #28]
 800515c:	2f01      	cmp	r7, #1
 800515e:	bfac      	ite	ge
 8005160:	19f6      	addge	r6, r6, r7
 8005162:	3601      	addlt	r6, #1
 8005164:	4627      	mov	r7, r4
 8005166:	2400      	movs	r4, #0
 8005168:	e007      	b.n	800517a <_dtoa_r+0xac2>
 800516a:	4659      	mov	r1, fp
 800516c:	4650      	mov	r0, sl
 800516e:	220a      	movs	r2, #10
 8005170:	2300      	movs	r3, #0
 8005172:	f000 fadd 	bl	8005730 <__multadd>
 8005176:	4683      	mov	fp, r0
 8005178:	e7e2      	b.n	8005140 <_dtoa_r+0xa88>
 800517a:	4659      	mov	r1, fp
 800517c:	2201      	movs	r2, #1
 800517e:	4650      	mov	r0, sl
 8005180:	f8cd c000 	str.w	ip, [sp]
 8005184:	f000 fc4a 	bl	8005a1c <__lshift>
 8005188:	4629      	mov	r1, r5
 800518a:	4683      	mov	fp, r0
 800518c:	f000 fc99 	bl	8005ac2 <__mcmp>
 8005190:	2800      	cmp	r0, #0
 8005192:	f8dd c000 	ldr.w	ip, [sp]
 8005196:	dc03      	bgt.n	80051a0 <_dtoa_r+0xae8>
 8005198:	d114      	bne.n	80051c4 <_dtoa_r+0xb0c>
 800519a:	f01c 0f01 	tst.w	ip, #1
 800519e:	d011      	beq.n	80051c4 <_dtoa_r+0xb0c>
 80051a0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80051a4:	2b39      	cmp	r3, #57	; 0x39
 80051a6:	46b0      	mov	r8, r6
 80051a8:	f106 36ff 	add.w	r6, r6, #4294967295
 80051ac:	d107      	bne.n	80051be <_dtoa_r+0xb06>
 80051ae:	9907      	ldr	r1, [sp, #28]
 80051b0:	42b1      	cmp	r1, r6
 80051b2:	d1f5      	bne.n	80051a0 <_dtoa_r+0xae8>
 80051b4:	2331      	movs	r3, #49	; 0x31
 80051b6:	f109 0901 	add.w	r9, r9, #1
 80051ba:	700b      	strb	r3, [r1, #0]
 80051bc:	e008      	b.n	80051d0 <_dtoa_r+0xb18>
 80051be:	3301      	adds	r3, #1
 80051c0:	7033      	strb	r3, [r6, #0]
 80051c2:	e005      	b.n	80051d0 <_dtoa_r+0xb18>
 80051c4:	46b0      	mov	r8, r6
 80051c6:	3e01      	subs	r6, #1
 80051c8:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80051cc:	2b30      	cmp	r3, #48	; 0x30
 80051ce:	d0f9      	beq.n	80051c4 <_dtoa_r+0xb0c>
 80051d0:	4650      	mov	r0, sl
 80051d2:	4629      	mov	r1, r5
 80051d4:	f000 fa95 	bl	8005702 <_Bfree>
 80051d8:	b16f      	cbz	r7, 80051f6 <_dtoa_r+0xb3e>
 80051da:	b12c      	cbz	r4, 80051e8 <_dtoa_r+0xb30>
 80051dc:	42bc      	cmp	r4, r7
 80051de:	d003      	beq.n	80051e8 <_dtoa_r+0xb30>
 80051e0:	4650      	mov	r0, sl
 80051e2:	4621      	mov	r1, r4
 80051e4:	f000 fa8d 	bl	8005702 <_Bfree>
 80051e8:	4650      	mov	r0, sl
 80051ea:	4639      	mov	r1, r7
 80051ec:	f000 fa89 	bl	8005702 <_Bfree>
 80051f0:	e001      	b.n	80051f6 <_dtoa_r+0xb3e>
 80051f2:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
 80051f6:	4650      	mov	r0, sl
 80051f8:	4659      	mov	r1, fp
 80051fa:	f000 fa82 	bl	8005702 <_Bfree>
 80051fe:	2300      	movs	r3, #0
 8005200:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005202:	f888 3000 	strb.w	r3, [r8]
 8005206:	f109 0301 	add.w	r3, r9, #1
 800520a:	603b      	str	r3, [r7, #0]
 800520c:	9f25      	ldr	r7, [sp, #148]	; 0x94
 800520e:	b127      	cbz	r7, 800521a <_dtoa_r+0xb62>
 8005210:	f8c7 8000 	str.w	r8, [r7]
 8005214:	e001      	b.n	800521a <_dtoa_r+0xb62>
 8005216:	4803      	ldr	r0, [pc, #12]	; (8005224 <_dtoa_r+0xb6c>)
 8005218:	e000      	b.n	800521c <_dtoa_r+0xb64>
 800521a:	9807      	ldr	r0, [sp, #28]
 800521c:	b01b      	add	sp, #108	; 0x6c
 800521e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005222:	bf00      	nop
 8005224:	08007a2b 	.word	0x08007a2b

08005228 <_localeconv_r>:
 8005228:	4800      	ldr	r0, [pc, #0]	; (800522c <_localeconv_r+0x4>)
 800522a:	4770      	bx	lr
 800522c:	200000f8 	.word	0x200000f8

08005230 <malloc>:
 8005230:	4b02      	ldr	r3, [pc, #8]	; (800523c <malloc+0xc>)
 8005232:	4601      	mov	r1, r0
 8005234:	6818      	ldr	r0, [r3, #0]
 8005236:	f000 b803 	b.w	8005240 <_malloc_r>
 800523a:	bf00      	nop
 800523c:	200000f4 	.word	0x200000f4

08005240 <_malloc_r>:
 8005240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005244:	f101 040b 	add.w	r4, r1, #11
 8005248:	2c16      	cmp	r4, #22
 800524a:	b085      	sub	sp, #20
 800524c:	4607      	mov	r7, r0
 800524e:	d903      	bls.n	8005258 <_malloc_r+0x18>
 8005250:	f034 0407 	bics.w	r4, r4, #7
 8005254:	d501      	bpl.n	800525a <_malloc_r+0x1a>
 8005256:	e002      	b.n	800525e <_malloc_r+0x1e>
 8005258:	2410      	movs	r4, #16
 800525a:	428c      	cmp	r4, r1
 800525c:	d202      	bcs.n	8005264 <_malloc_r+0x24>
 800525e:	230c      	movs	r3, #12
 8005260:	603b      	str	r3, [r7, #0]
 8005262:	e1dd      	b.n	8005620 <_malloc_r+0x3e0>
 8005264:	4638      	mov	r0, r7
 8005266:	f000 fa15 	bl	8005694 <__malloc_lock>
 800526a:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 800526e:	4d97      	ldr	r5, [pc, #604]	; (80054cc <_malloc_r+0x28c>)
 8005270:	d214      	bcs.n	800529c <_malloc_r+0x5c>
 8005272:	08e2      	lsrs	r2, r4, #3
 8005274:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
 8005278:	68de      	ldr	r6, [r3, #12]
 800527a:	429e      	cmp	r6, r3
 800527c:	d106      	bne.n	800528c <_malloc_r+0x4c>
 800527e:	f106 0308 	add.w	r3, r6, #8
 8005282:	6976      	ldr	r6, [r6, #20]
 8005284:	429e      	cmp	r6, r3
 8005286:	bf08      	it	eq
 8005288:	3202      	addeq	r2, #2
 800528a:	d043      	beq.n	8005314 <_malloc_r+0xd4>
 800528c:	6873      	ldr	r3, [r6, #4]
 800528e:	68f2      	ldr	r2, [r6, #12]
 8005290:	68b1      	ldr	r1, [r6, #8]
 8005292:	f023 0303 	bic.w	r3, r3, #3
 8005296:	60ca      	str	r2, [r1, #12]
 8005298:	6091      	str	r1, [r2, #8]
 800529a:	e05d      	b.n	8005358 <_malloc_r+0x118>
 800529c:	0a62      	lsrs	r2, r4, #9
 800529e:	d01a      	beq.n	80052d6 <_malloc_r+0x96>
 80052a0:	2a04      	cmp	r2, #4
 80052a2:	d802      	bhi.n	80052aa <_malloc_r+0x6a>
 80052a4:	09a2      	lsrs	r2, r4, #6
 80052a6:	3238      	adds	r2, #56	; 0x38
 80052a8:	e018      	b.n	80052dc <_malloc_r+0x9c>
 80052aa:	2a14      	cmp	r2, #20
 80052ac:	d801      	bhi.n	80052b2 <_malloc_r+0x72>
 80052ae:	325b      	adds	r2, #91	; 0x5b
 80052b0:	e014      	b.n	80052dc <_malloc_r+0x9c>
 80052b2:	2a54      	cmp	r2, #84	; 0x54
 80052b4:	d802      	bhi.n	80052bc <_malloc_r+0x7c>
 80052b6:	0b22      	lsrs	r2, r4, #12
 80052b8:	326e      	adds	r2, #110	; 0x6e
 80052ba:	e00f      	b.n	80052dc <_malloc_r+0x9c>
 80052bc:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80052c0:	d802      	bhi.n	80052c8 <_malloc_r+0x88>
 80052c2:	0be2      	lsrs	r2, r4, #15
 80052c4:	3277      	adds	r2, #119	; 0x77
 80052c6:	e009      	b.n	80052dc <_malloc_r+0x9c>
 80052c8:	f240 5354 	movw	r3, #1364	; 0x554
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d804      	bhi.n	80052da <_malloc_r+0x9a>
 80052d0:	0ca2      	lsrs	r2, r4, #18
 80052d2:	327c      	adds	r2, #124	; 0x7c
 80052d4:	e002      	b.n	80052dc <_malloc_r+0x9c>
 80052d6:	223f      	movs	r2, #63	; 0x3f
 80052d8:	e000      	b.n	80052dc <_malloc_r+0x9c>
 80052da:	227e      	movs	r2, #126	; 0x7e
 80052dc:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
 80052e0:	68de      	ldr	r6, [r3, #12]
 80052e2:	429e      	cmp	r6, r3
 80052e4:	d015      	beq.n	8005312 <_malloc_r+0xd2>
 80052e6:	6871      	ldr	r1, [r6, #4]
 80052e8:	f021 0103 	bic.w	r1, r1, #3
 80052ec:	1b08      	subs	r0, r1, r4
 80052ee:	280f      	cmp	r0, #15
 80052f0:	dd01      	ble.n	80052f6 <_malloc_r+0xb6>
 80052f2:	3a01      	subs	r2, #1
 80052f4:	e00d      	b.n	8005312 <_malloc_r+0xd2>
 80052f6:	2800      	cmp	r0, #0
 80052f8:	db09      	blt.n	800530e <_malloc_r+0xce>
 80052fa:	68f3      	ldr	r3, [r6, #12]
 80052fc:	68b2      	ldr	r2, [r6, #8]
 80052fe:	60d3      	str	r3, [r2, #12]
 8005300:	609a      	str	r2, [r3, #8]
 8005302:	1873      	adds	r3, r6, r1
 8005304:	685a      	ldr	r2, [r3, #4]
 8005306:	f042 0201 	orr.w	r2, r2, #1
 800530a:	605a      	str	r2, [r3, #4]
 800530c:	e193      	b.n	8005636 <_malloc_r+0x3f6>
 800530e:	68f6      	ldr	r6, [r6, #12]
 8005310:	e7e7      	b.n	80052e2 <_malloc_r+0xa2>
 8005312:	3201      	adds	r2, #1
 8005314:	496d      	ldr	r1, [pc, #436]	; (80054cc <_malloc_r+0x28c>)
 8005316:	692e      	ldr	r6, [r5, #16]
 8005318:	f101 0008 	add.w	r0, r1, #8
 800531c:	4286      	cmp	r6, r0
 800531e:	4686      	mov	lr, r0
 8005320:	d06d      	beq.n	80053fe <_malloc_r+0x1be>
 8005322:	6873      	ldr	r3, [r6, #4]
 8005324:	f023 0303 	bic.w	r3, r3, #3
 8005328:	ebc4 0c03 	rsb	ip, r4, r3
 800532c:	f1bc 0f0f 	cmp.w	ip, #15
 8005330:	dd0d      	ble.n	800534e <_malloc_r+0x10e>
 8005332:	1933      	adds	r3, r6, r4
 8005334:	f04c 0201 	orr.w	r2, ip, #1
 8005338:	f044 0401 	orr.w	r4, r4, #1
 800533c:	6074      	str	r4, [r6, #4]
 800533e:	614b      	str	r3, [r1, #20]
 8005340:	610b      	str	r3, [r1, #16]
 8005342:	60d8      	str	r0, [r3, #12]
 8005344:	6098      	str	r0, [r3, #8]
 8005346:	605a      	str	r2, [r3, #4]
 8005348:	f843 c00c 	str.w	ip, [r3, ip]
 800534c:	e173      	b.n	8005636 <_malloc_r+0x3f6>
 800534e:	f1bc 0f00 	cmp.w	ip, #0
 8005352:	6148      	str	r0, [r1, #20]
 8005354:	6108      	str	r0, [r1, #16]
 8005356:	db01      	blt.n	800535c <_malloc_r+0x11c>
 8005358:	4433      	add	r3, r6
 800535a:	e7d3      	b.n	8005304 <_malloc_r+0xc4>
 800535c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005360:	d211      	bcs.n	8005386 <_malloc_r+0x146>
 8005362:	08db      	lsrs	r3, r3, #3
 8005364:	1098      	asrs	r0, r3, #2
 8005366:	f04f 0c01 	mov.w	ip, #1
 800536a:	fa0c fc00 	lsl.w	ip, ip, r0
 800536e:	6848      	ldr	r0, [r1, #4]
 8005370:	ea4c 0000 	orr.w	r0, ip, r0
 8005374:	6048      	str	r0, [r1, #4]
 8005376:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800537a:	688b      	ldr	r3, [r1, #8]
 800537c:	60b3      	str	r3, [r6, #8]
 800537e:	60f1      	str	r1, [r6, #12]
 8005380:	608e      	str	r6, [r1, #8]
 8005382:	60de      	str	r6, [r3, #12]
 8005384:	e03b      	b.n	80053fe <_malloc_r+0x1be>
 8005386:	0a58      	lsrs	r0, r3, #9
 8005388:	2804      	cmp	r0, #4
 800538a:	d802      	bhi.n	8005392 <_malloc_r+0x152>
 800538c:	0998      	lsrs	r0, r3, #6
 800538e:	3038      	adds	r0, #56	; 0x38
 8005390:	e015      	b.n	80053be <_malloc_r+0x17e>
 8005392:	2814      	cmp	r0, #20
 8005394:	d801      	bhi.n	800539a <_malloc_r+0x15a>
 8005396:	305b      	adds	r0, #91	; 0x5b
 8005398:	e011      	b.n	80053be <_malloc_r+0x17e>
 800539a:	2854      	cmp	r0, #84	; 0x54
 800539c:	d802      	bhi.n	80053a4 <_malloc_r+0x164>
 800539e:	0b18      	lsrs	r0, r3, #12
 80053a0:	306e      	adds	r0, #110	; 0x6e
 80053a2:	e00c      	b.n	80053be <_malloc_r+0x17e>
 80053a4:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
 80053a8:	d802      	bhi.n	80053b0 <_malloc_r+0x170>
 80053aa:	0bd8      	lsrs	r0, r3, #15
 80053ac:	3077      	adds	r0, #119	; 0x77
 80053ae:	e006      	b.n	80053be <_malloc_r+0x17e>
 80053b0:	f240 5154 	movw	r1, #1364	; 0x554
 80053b4:	4288      	cmp	r0, r1
 80053b6:	bf9a      	itte	ls
 80053b8:	0c98      	lsrls	r0, r3, #18
 80053ba:	307c      	addls	r0, #124	; 0x7c
 80053bc:	207e      	movhi	r0, #126	; 0x7e
 80053be:	eb05 0cc0 	add.w	ip, r5, r0, lsl #3
 80053c2:	f8df 8108 	ldr.w	r8, [pc, #264]	; 80054cc <_malloc_r+0x28c>
 80053c6:	f8dc 1008 	ldr.w	r1, [ip, #8]
 80053ca:	4561      	cmp	r1, ip
 80053cc:	d10d      	bne.n	80053ea <_malloc_r+0x1aa>
 80053ce:	2301      	movs	r3, #1
 80053d0:	1080      	asrs	r0, r0, #2
 80053d2:	fa03 f000 	lsl.w	r0, r3, r0
 80053d6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80053da:	4303      	orrs	r3, r0
 80053dc:	f8c8 3004 	str.w	r3, [r8, #4]
 80053e0:	460b      	mov	r3, r1
 80053e2:	e008      	b.n	80053f6 <_malloc_r+0x1b6>
 80053e4:	6889      	ldr	r1, [r1, #8]
 80053e6:	4561      	cmp	r1, ip
 80053e8:	d004      	beq.n	80053f4 <_malloc_r+0x1b4>
 80053ea:	6848      	ldr	r0, [r1, #4]
 80053ec:	f020 0003 	bic.w	r0, r0, #3
 80053f0:	4283      	cmp	r3, r0
 80053f2:	d3f7      	bcc.n	80053e4 <_malloc_r+0x1a4>
 80053f4:	68cb      	ldr	r3, [r1, #12]
 80053f6:	60f3      	str	r3, [r6, #12]
 80053f8:	60b1      	str	r1, [r6, #8]
 80053fa:	609e      	str	r6, [r3, #8]
 80053fc:	60ce      	str	r6, [r1, #12]
 80053fe:	2101      	movs	r1, #1
 8005400:	1093      	asrs	r3, r2, #2
 8005402:	fa01 f303 	lsl.w	r3, r1, r3
 8005406:	6869      	ldr	r1, [r5, #4]
 8005408:	428b      	cmp	r3, r1
 800540a:	d861      	bhi.n	80054d0 <_malloc_r+0x290>
 800540c:	420b      	tst	r3, r1
 800540e:	d106      	bne.n	800541e <_malloc_r+0x1de>
 8005410:	f022 0203 	bic.w	r2, r2, #3
 8005414:	005b      	lsls	r3, r3, #1
 8005416:	420b      	tst	r3, r1
 8005418:	f102 0204 	add.w	r2, r2, #4
 800541c:	d0fa      	beq.n	8005414 <_malloc_r+0x1d4>
 800541e:	eb05 00c2 	add.w	r0, r5, r2, lsl #3
 8005422:	4680      	mov	r8, r0
 8005424:	4694      	mov	ip, r2
 8005426:	f8d8 600c 	ldr.w	r6, [r8, #12]
 800542a:	4546      	cmp	r6, r8
 800542c:	d02d      	beq.n	800548a <_malloc_r+0x24a>
 800542e:	6871      	ldr	r1, [r6, #4]
 8005430:	f021 0903 	bic.w	r9, r1, #3
 8005434:	ebc4 0109 	rsb	r1, r4, r9
 8005438:	290f      	cmp	r1, #15
 800543a:	dd13      	ble.n	8005464 <_malloc_r+0x224>
 800543c:	1933      	adds	r3, r6, r4
 800543e:	f044 0401 	orr.w	r4, r4, #1
 8005442:	68f2      	ldr	r2, [r6, #12]
 8005444:	6074      	str	r4, [r6, #4]
 8005446:	f856 0f08 	ldr.w	r0, [r6, #8]!
 800544a:	60c2      	str	r2, [r0, #12]
 800544c:	6090      	str	r0, [r2, #8]
 800544e:	f041 0201 	orr.w	r2, r1, #1
 8005452:	616b      	str	r3, [r5, #20]
 8005454:	612b      	str	r3, [r5, #16]
 8005456:	f8c3 e00c 	str.w	lr, [r3, #12]
 800545a:	f8c3 e008 	str.w	lr, [r3, #8]
 800545e:	605a      	str	r2, [r3, #4]
 8005460:	5059      	str	r1, [r3, r1]
 8005462:	e00c      	b.n	800547e <_malloc_r+0x23e>
 8005464:	2900      	cmp	r1, #0
 8005466:	db0e      	blt.n	8005486 <_malloc_r+0x246>
 8005468:	eb06 0109 	add.w	r1, r6, r9
 800546c:	684b      	ldr	r3, [r1, #4]
 800546e:	f043 0301 	orr.w	r3, r3, #1
 8005472:	604b      	str	r3, [r1, #4]
 8005474:	68f3      	ldr	r3, [r6, #12]
 8005476:	f856 2f08 	ldr.w	r2, [r6, #8]!
 800547a:	60d3      	str	r3, [r2, #12]
 800547c:	609a      	str	r2, [r3, #8]
 800547e:	4638      	mov	r0, r7
 8005480:	f000 f909 	bl	8005696 <__malloc_unlock>
 8005484:	e0db      	b.n	800563e <_malloc_r+0x3fe>
 8005486:	68f6      	ldr	r6, [r6, #12]
 8005488:	e7cf      	b.n	800542a <_malloc_r+0x1ea>
 800548a:	f10c 0c01 	add.w	ip, ip, #1
 800548e:	f01c 0f03 	tst.w	ip, #3
 8005492:	f108 0808 	add.w	r8, r8, #8
 8005496:	d1c6      	bne.n	8005426 <_malloc_r+0x1e6>
 8005498:	0791      	lsls	r1, r2, #30
 800549a:	d104      	bne.n	80054a6 <_malloc_r+0x266>
 800549c:	686a      	ldr	r2, [r5, #4]
 800549e:	ea22 0203 	bic.w	r2, r2, r3
 80054a2:	606a      	str	r2, [r5, #4]
 80054a4:	e006      	b.n	80054b4 <_malloc_r+0x274>
 80054a6:	f1a0 0108 	sub.w	r1, r0, #8
 80054aa:	6800      	ldr	r0, [r0, #0]
 80054ac:	4288      	cmp	r0, r1
 80054ae:	f102 32ff 	add.w	r2, r2, #4294967295
 80054b2:	d0f1      	beq.n	8005498 <_malloc_r+0x258>
 80054b4:	6869      	ldr	r1, [r5, #4]
 80054b6:	005b      	lsls	r3, r3, #1
 80054b8:	428b      	cmp	r3, r1
 80054ba:	d809      	bhi.n	80054d0 <_malloc_r+0x290>
 80054bc:	b143      	cbz	r3, 80054d0 <_malloc_r+0x290>
 80054be:	4662      	mov	r2, ip
 80054c0:	420b      	tst	r3, r1
 80054c2:	d1ac      	bne.n	800541e <_malloc_r+0x1de>
 80054c4:	3204      	adds	r2, #4
 80054c6:	005b      	lsls	r3, r3, #1
 80054c8:	e7fa      	b.n	80054c0 <_malloc_r+0x280>
 80054ca:	bf00      	nop
 80054cc:	20000130 	.word	0x20000130
 80054d0:	f8d5 8008 	ldr.w	r8, [r5, #8]
 80054d4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80054d8:	f023 0903 	bic.w	r9, r3, #3
 80054dc:	45a1      	cmp	r9, r4
 80054de:	d304      	bcc.n	80054ea <_malloc_r+0x2aa>
 80054e0:	ebc4 0309 	rsb	r3, r4, r9
 80054e4:	2b0f      	cmp	r3, #15
 80054e6:	f300 809d 	bgt.w	8005624 <_malloc_r+0x3e4>
 80054ea:	4b57      	ldr	r3, [pc, #348]	; (8005648 <_malloc_r+0x408>)
 80054ec:	4a57      	ldr	r2, [pc, #348]	; (800564c <_malloc_r+0x40c>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	6811      	ldr	r1, [r2, #0]
 80054f2:	f103 0a10 	add.w	sl, r3, #16
 80054f6:	3101      	adds	r1, #1
 80054f8:	eb08 0c09 	add.w	ip, r8, r9
 80054fc:	44a2      	add	sl, r4
 80054fe:	4b54      	ldr	r3, [pc, #336]	; (8005650 <_malloc_r+0x410>)
 8005500:	d004      	beq.n	800550c <_malloc_r+0x2cc>
 8005502:	1e59      	subs	r1, r3, #1
 8005504:	448a      	add	sl, r1
 8005506:	4259      	negs	r1, r3
 8005508:	ea0a 0a01 	and.w	sl, sl, r1
 800550c:	4638      	mov	r0, r7
 800550e:	4651      	mov	r1, sl
 8005510:	9201      	str	r2, [sp, #4]
 8005512:	9302      	str	r3, [sp, #8]
 8005514:	f8cd c00c 	str.w	ip, [sp, #12]
 8005518:	f000 fbc2 	bl	8005ca0 <_sbrk_r>
 800551c:	1c42      	adds	r2, r0, #1
 800551e:	aa01      	add	r2, sp, #4
 8005520:	4606      	mov	r6, r0
 8005522:	e892 100c 	ldmia.w	r2, {r2, r3, ip}
 8005526:	d06e      	beq.n	8005606 <_malloc_r+0x3c6>
 8005528:	4560      	cmp	r0, ip
 800552a:	d201      	bcs.n	8005530 <_malloc_r+0x2f0>
 800552c:	45a8      	cmp	r8, r5
 800552e:	d16a      	bne.n	8005606 <_malloc_r+0x3c6>
 8005530:	4948      	ldr	r1, [pc, #288]	; (8005654 <_malloc_r+0x414>)
 8005532:	6808      	ldr	r0, [r1, #0]
 8005534:	4566      	cmp	r6, ip
 8005536:	eb0a 0e00 	add.w	lr, sl, r0
 800553a:	f8c1 e000 	str.w	lr, [r1]
 800553e:	4846      	ldr	r0, [pc, #280]	; (8005658 <_malloc_r+0x418>)
 8005540:	468b      	mov	fp, r1
 8005542:	d107      	bne.n	8005554 <_malloc_r+0x314>
 8005544:	4206      	tst	r6, r0
 8005546:	d105      	bne.n	8005554 <_malloc_r+0x314>
 8005548:	68ab      	ldr	r3, [r5, #8]
 800554a:	44d1      	add	r9, sl
 800554c:	f049 0201 	orr.w	r2, r9, #1
 8005550:	605a      	str	r2, [r3, #4]
 8005552:	e04c      	b.n	80055ee <_malloc_r+0x3ae>
 8005554:	6812      	ldr	r2, [r2, #0]
 8005556:	3201      	adds	r2, #1
 8005558:	d102      	bne.n	8005560 <_malloc_r+0x320>
 800555a:	4a3c      	ldr	r2, [pc, #240]	; (800564c <_malloc_r+0x40c>)
 800555c:	6016      	str	r6, [r2, #0]
 800555e:	e005      	b.n	800556c <_malloc_r+0x32c>
 8005560:	ebcc 0c06 	rsb	ip, ip, r6
 8005564:	eb0e 020c 	add.w	r2, lr, ip
 8005568:	f8cb 2000 	str.w	r2, [fp]
 800556c:	f016 0207 	ands.w	r2, r6, #7
 8005570:	bf1c      	itt	ne
 8005572:	f1c2 0208 	rsbne	r2, r2, #8
 8005576:	18b6      	addne	r6, r6, r2
 8005578:	44b2      	add	sl, r6
 800557a:	4413      	add	r3, r2
 800557c:	ea0a 0000 	and.w	r0, sl, r0
 8005580:	ebc0 0a03 	rsb	sl, r0, r3
 8005584:	4651      	mov	r1, sl
 8005586:	4638      	mov	r0, r7
 8005588:	f000 fb8a 	bl	8005ca0 <_sbrk_r>
 800558c:	1c43      	adds	r3, r0, #1
 800558e:	bf04      	itt	eq
 8005590:	4630      	moveq	r0, r6
 8005592:	f04f 0a00 	moveq.w	sl, #0
 8005596:	f8db 3000 	ldr.w	r3, [fp]
 800559a:	60ae      	str	r6, [r5, #8]
 800559c:	1b80      	subs	r0, r0, r6
 800559e:	4450      	add	r0, sl
 80055a0:	4453      	add	r3, sl
 80055a2:	f040 0001 	orr.w	r0, r0, #1
 80055a6:	45a8      	cmp	r8, r5
 80055a8:	f8cb 3000 	str.w	r3, [fp]
 80055ac:	6070      	str	r0, [r6, #4]
 80055ae:	d01e      	beq.n	80055ee <_malloc_r+0x3ae>
 80055b0:	f1b9 0f0f 	cmp.w	r9, #15
 80055b4:	d802      	bhi.n	80055bc <_malloc_r+0x37c>
 80055b6:	2301      	movs	r3, #1
 80055b8:	6073      	str	r3, [r6, #4]
 80055ba:	e024      	b.n	8005606 <_malloc_r+0x3c6>
 80055bc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80055c0:	f1a9 090c 	sub.w	r9, r9, #12
 80055c4:	f029 0907 	bic.w	r9, r9, #7
 80055c8:	f003 0301 	and.w	r3, r3, #1
 80055cc:	ea49 0303 	orr.w	r3, r9, r3
 80055d0:	f8c8 3004 	str.w	r3, [r8, #4]
 80055d4:	eb08 0309 	add.w	r3, r8, r9
 80055d8:	2205      	movs	r2, #5
 80055da:	f1b9 0f0f 	cmp.w	r9, #15
 80055de:	605a      	str	r2, [r3, #4]
 80055e0:	609a      	str	r2, [r3, #8]
 80055e2:	d904      	bls.n	80055ee <_malloc_r+0x3ae>
 80055e4:	4638      	mov	r0, r7
 80055e6:	f108 0108 	add.w	r1, r8, #8
 80055ea:	f000 fc87 	bl	8005efc <_free_r>
 80055ee:	4a1b      	ldr	r2, [pc, #108]	; (800565c <_malloc_r+0x41c>)
 80055f0:	f8db 3000 	ldr.w	r3, [fp]
 80055f4:	6811      	ldr	r1, [r2, #0]
 80055f6:	428b      	cmp	r3, r1
 80055f8:	bf88      	it	hi
 80055fa:	6013      	strhi	r3, [r2, #0]
 80055fc:	4a18      	ldr	r2, [pc, #96]	; (8005660 <_malloc_r+0x420>)
 80055fe:	6811      	ldr	r1, [r2, #0]
 8005600:	428b      	cmp	r3, r1
 8005602:	bf88      	it	hi
 8005604:	6013      	strhi	r3, [r2, #0]
 8005606:	68ab      	ldr	r3, [r5, #8]
 8005608:	685a      	ldr	r2, [r3, #4]
 800560a:	f022 0203 	bic.w	r2, r2, #3
 800560e:	42a2      	cmp	r2, r4
 8005610:	ebc4 0302 	rsb	r3, r4, r2
 8005614:	d301      	bcc.n	800561a <_malloc_r+0x3da>
 8005616:	2b0f      	cmp	r3, #15
 8005618:	dc04      	bgt.n	8005624 <_malloc_r+0x3e4>
 800561a:	4638      	mov	r0, r7
 800561c:	f000 f83b 	bl	8005696 <__malloc_unlock>
 8005620:	2600      	movs	r6, #0
 8005622:	e00c      	b.n	800563e <_malloc_r+0x3fe>
 8005624:	68ae      	ldr	r6, [r5, #8]
 8005626:	f044 0201 	orr.w	r2, r4, #1
 800562a:	4434      	add	r4, r6
 800562c:	f043 0301 	orr.w	r3, r3, #1
 8005630:	6072      	str	r2, [r6, #4]
 8005632:	60ac      	str	r4, [r5, #8]
 8005634:	6063      	str	r3, [r4, #4]
 8005636:	4638      	mov	r0, r7
 8005638:	f000 f82d 	bl	8005696 <__malloc_unlock>
 800563c:	3608      	adds	r6, #8
 800563e:	4630      	mov	r0, r6
 8005640:	b005      	add	sp, #20
 8005642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005646:	bf00      	nop
 8005648:	20000570 	.word	0x20000570
 800564c:	2000053c 	.word	0x2000053c
 8005650:	00001000 	.word	0x00001000
 8005654:	20000574 	.word	0x20000574
 8005658:	00000fff 	.word	0x00000fff
 800565c:	2000056c 	.word	0x2000056c
 8005660:	20000568 	.word	0x20000568

08005664 <memchr>:
 8005664:	b510      	push	{r4, lr}
 8005666:	b2c9      	uxtb	r1, r1
 8005668:	4402      	add	r2, r0
 800566a:	4290      	cmp	r0, r2
 800566c:	4603      	mov	r3, r0
 800566e:	d006      	beq.n	800567e <memchr+0x1a>
 8005670:	781c      	ldrb	r4, [r3, #0]
 8005672:	428c      	cmp	r4, r1
 8005674:	f100 0001 	add.w	r0, r0, #1
 8005678:	d1f7      	bne.n	800566a <memchr+0x6>
 800567a:	4618      	mov	r0, r3
 800567c:	bd10      	pop	{r4, pc}
 800567e:	2000      	movs	r0, #0
 8005680:	bd10      	pop	{r4, pc}

08005682 <memcpy>:
 8005682:	b510      	push	{r4, lr}
 8005684:	2300      	movs	r3, #0
 8005686:	4293      	cmp	r3, r2
 8005688:	d003      	beq.n	8005692 <memcpy+0x10>
 800568a:	5ccc      	ldrb	r4, [r1, r3]
 800568c:	54c4      	strb	r4, [r0, r3]
 800568e:	3301      	adds	r3, #1
 8005690:	e7f9      	b.n	8005686 <memcpy+0x4>
 8005692:	bd10      	pop	{r4, pc}

08005694 <__malloc_lock>:
 8005694:	4770      	bx	lr

08005696 <__malloc_unlock>:
 8005696:	4770      	bx	lr

08005698 <_Balloc>:
 8005698:	b570      	push	{r4, r5, r6, lr}
 800569a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800569c:	4604      	mov	r4, r0
 800569e:	460e      	mov	r6, r1
 80056a0:	b93d      	cbnz	r5, 80056b2 <_Balloc+0x1a>
 80056a2:	2010      	movs	r0, #16
 80056a4:	f7ff fdc4 	bl	8005230 <malloc>
 80056a8:	6260      	str	r0, [r4, #36]	; 0x24
 80056aa:	6045      	str	r5, [r0, #4]
 80056ac:	6085      	str	r5, [r0, #8]
 80056ae:	6005      	str	r5, [r0, #0]
 80056b0:	60c5      	str	r5, [r0, #12]
 80056b2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80056b4:	68eb      	ldr	r3, [r5, #12]
 80056b6:	b143      	cbz	r3, 80056ca <_Balloc+0x32>
 80056b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80056ba:	68da      	ldr	r2, [r3, #12]
 80056bc:	f852 0026 	ldr.w	r0, [r2, r6, lsl #2]
 80056c0:	b178      	cbz	r0, 80056e2 <_Balloc+0x4a>
 80056c2:	6801      	ldr	r1, [r0, #0]
 80056c4:	f842 1026 	str.w	r1, [r2, r6, lsl #2]
 80056c8:	e017      	b.n	80056fa <_Balloc+0x62>
 80056ca:	4620      	mov	r0, r4
 80056cc:	2104      	movs	r1, #4
 80056ce:	2221      	movs	r2, #33	; 0x21
 80056d0:	f000 fb92 	bl	8005df8 <_calloc_r>
 80056d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80056d6:	60e8      	str	r0, [r5, #12]
 80056d8:	68db      	ldr	r3, [r3, #12]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d1ec      	bne.n	80056b8 <_Balloc+0x20>
 80056de:	2000      	movs	r0, #0
 80056e0:	bd70      	pop	{r4, r5, r6, pc}
 80056e2:	2101      	movs	r1, #1
 80056e4:	fa01 f506 	lsl.w	r5, r1, r6
 80056e8:	1d6a      	adds	r2, r5, #5
 80056ea:	4620      	mov	r0, r4
 80056ec:	0092      	lsls	r2, r2, #2
 80056ee:	f000 fb83 	bl	8005df8 <_calloc_r>
 80056f2:	2800      	cmp	r0, #0
 80056f4:	d0f3      	beq.n	80056de <_Balloc+0x46>
 80056f6:	6046      	str	r6, [r0, #4]
 80056f8:	6085      	str	r5, [r0, #8]
 80056fa:	2200      	movs	r2, #0
 80056fc:	6102      	str	r2, [r0, #16]
 80056fe:	60c2      	str	r2, [r0, #12]
 8005700:	bd70      	pop	{r4, r5, r6, pc}

08005702 <_Bfree>:
 8005702:	b570      	push	{r4, r5, r6, lr}
 8005704:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005706:	4606      	mov	r6, r0
 8005708:	460d      	mov	r5, r1
 800570a:	b93c      	cbnz	r4, 800571c <_Bfree+0x1a>
 800570c:	2010      	movs	r0, #16
 800570e:	f7ff fd8f 	bl	8005230 <malloc>
 8005712:	6270      	str	r0, [r6, #36]	; 0x24
 8005714:	6044      	str	r4, [r0, #4]
 8005716:	6084      	str	r4, [r0, #8]
 8005718:	6004      	str	r4, [r0, #0]
 800571a:	60c4      	str	r4, [r0, #12]
 800571c:	b13d      	cbz	r5, 800572e <_Bfree+0x2c>
 800571e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005720:	686a      	ldr	r2, [r5, #4]
 8005722:	68db      	ldr	r3, [r3, #12]
 8005724:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005728:	6029      	str	r1, [r5, #0]
 800572a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800572e:	bd70      	pop	{r4, r5, r6, pc}

08005730 <__multadd>:
 8005730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005734:	460c      	mov	r4, r1
 8005736:	461e      	mov	r6, r3
 8005738:	690d      	ldr	r5, [r1, #16]
 800573a:	4607      	mov	r7, r0
 800573c:	3114      	adds	r1, #20
 800573e:	2300      	movs	r3, #0
 8005740:	6808      	ldr	r0, [r1, #0]
 8005742:	fa1f fc80 	uxth.w	ip, r0
 8005746:	0c00      	lsrs	r0, r0, #16
 8005748:	fb02 6c0c 	mla	ip, r2, ip, r6
 800574c:	4350      	muls	r0, r2
 800574e:	eb00 401c 	add.w	r0, r0, ip, lsr #16
 8005752:	3301      	adds	r3, #1
 8005754:	fa1f fc8c 	uxth.w	ip, ip
 8005758:	0c06      	lsrs	r6, r0, #16
 800575a:	42ab      	cmp	r3, r5
 800575c:	eb0c 4000 	add.w	r0, ip, r0, lsl #16
 8005760:	f841 0b04 	str.w	r0, [r1], #4
 8005764:	dbec      	blt.n	8005740 <__multadd+0x10>
 8005766:	b1d6      	cbz	r6, 800579e <__multadd+0x6e>
 8005768:	68a3      	ldr	r3, [r4, #8]
 800576a:	429d      	cmp	r5, r3
 800576c:	db12      	blt.n	8005794 <__multadd+0x64>
 800576e:	6861      	ldr	r1, [r4, #4]
 8005770:	4638      	mov	r0, r7
 8005772:	3101      	adds	r1, #1
 8005774:	f7ff ff90 	bl	8005698 <_Balloc>
 8005778:	6922      	ldr	r2, [r4, #16]
 800577a:	3202      	adds	r2, #2
 800577c:	f104 010c 	add.w	r1, r4, #12
 8005780:	4680      	mov	r8, r0
 8005782:	0092      	lsls	r2, r2, #2
 8005784:	300c      	adds	r0, #12
 8005786:	f7ff ff7c 	bl	8005682 <memcpy>
 800578a:	4621      	mov	r1, r4
 800578c:	4638      	mov	r0, r7
 800578e:	f7ff ffb8 	bl	8005702 <_Bfree>
 8005792:	4644      	mov	r4, r8
 8005794:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005798:	3501      	adds	r5, #1
 800579a:	615e      	str	r6, [r3, #20]
 800579c:	6125      	str	r5, [r4, #16]
 800579e:	4620      	mov	r0, r4
 80057a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080057a4 <__hi0bits>:
 80057a4:	0c03      	lsrs	r3, r0, #16
 80057a6:	041b      	lsls	r3, r3, #16
 80057a8:	b913      	cbnz	r3, 80057b0 <__hi0bits+0xc>
 80057aa:	0400      	lsls	r0, r0, #16
 80057ac:	2310      	movs	r3, #16
 80057ae:	e000      	b.n	80057b2 <__hi0bits+0xe>
 80057b0:	2300      	movs	r3, #0
 80057b2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80057b6:	bf04      	itt	eq
 80057b8:	0200      	lsleq	r0, r0, #8
 80057ba:	3308      	addeq	r3, #8
 80057bc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80057c0:	bf04      	itt	eq
 80057c2:	0100      	lsleq	r0, r0, #4
 80057c4:	3304      	addeq	r3, #4
 80057c6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80057ca:	bf04      	itt	eq
 80057cc:	0080      	lsleq	r0, r0, #2
 80057ce:	3302      	addeq	r3, #2
 80057d0:	2800      	cmp	r0, #0
 80057d2:	db03      	blt.n	80057dc <__hi0bits+0x38>
 80057d4:	0042      	lsls	r2, r0, #1
 80057d6:	d503      	bpl.n	80057e0 <__hi0bits+0x3c>
 80057d8:	1c58      	adds	r0, r3, #1
 80057da:	4770      	bx	lr
 80057dc:	4618      	mov	r0, r3
 80057de:	4770      	bx	lr
 80057e0:	2020      	movs	r0, #32
 80057e2:	4770      	bx	lr

080057e4 <__lo0bits>:
 80057e4:	6803      	ldr	r3, [r0, #0]
 80057e6:	f013 0207 	ands.w	r2, r3, #7
 80057ea:	d00b      	beq.n	8005804 <__lo0bits+0x20>
 80057ec:	07d9      	lsls	r1, r3, #31
 80057ee:	d422      	bmi.n	8005836 <__lo0bits+0x52>
 80057f0:	079a      	lsls	r2, r3, #30
 80057f2:	d503      	bpl.n	80057fc <__lo0bits+0x18>
 80057f4:	085b      	lsrs	r3, r3, #1
 80057f6:	6003      	str	r3, [r0, #0]
 80057f8:	2001      	movs	r0, #1
 80057fa:	4770      	bx	lr
 80057fc:	089b      	lsrs	r3, r3, #2
 80057fe:	6003      	str	r3, [r0, #0]
 8005800:	2002      	movs	r0, #2
 8005802:	4770      	bx	lr
 8005804:	b299      	uxth	r1, r3
 8005806:	b909      	cbnz	r1, 800580c <__lo0bits+0x28>
 8005808:	0c1b      	lsrs	r3, r3, #16
 800580a:	2210      	movs	r2, #16
 800580c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005810:	bf04      	itt	eq
 8005812:	0a1b      	lsreq	r3, r3, #8
 8005814:	3208      	addeq	r2, #8
 8005816:	0719      	lsls	r1, r3, #28
 8005818:	bf04      	itt	eq
 800581a:	091b      	lsreq	r3, r3, #4
 800581c:	3204      	addeq	r2, #4
 800581e:	0799      	lsls	r1, r3, #30
 8005820:	bf04      	itt	eq
 8005822:	089b      	lsreq	r3, r3, #2
 8005824:	3202      	addeq	r2, #2
 8005826:	07d9      	lsls	r1, r3, #31
 8005828:	d402      	bmi.n	8005830 <__lo0bits+0x4c>
 800582a:	085b      	lsrs	r3, r3, #1
 800582c:	d005      	beq.n	800583a <__lo0bits+0x56>
 800582e:	3201      	adds	r2, #1
 8005830:	6003      	str	r3, [r0, #0]
 8005832:	4610      	mov	r0, r2
 8005834:	4770      	bx	lr
 8005836:	2000      	movs	r0, #0
 8005838:	4770      	bx	lr
 800583a:	2020      	movs	r0, #32
 800583c:	4770      	bx	lr

0800583e <__i2b>:
 800583e:	b510      	push	{r4, lr}
 8005840:	460c      	mov	r4, r1
 8005842:	2101      	movs	r1, #1
 8005844:	f7ff ff28 	bl	8005698 <_Balloc>
 8005848:	2201      	movs	r2, #1
 800584a:	6144      	str	r4, [r0, #20]
 800584c:	6102      	str	r2, [r0, #16]
 800584e:	bd10      	pop	{r4, pc}

08005850 <__multiply>:
 8005850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005854:	4616      	mov	r6, r2
 8005856:	690a      	ldr	r2, [r1, #16]
 8005858:	6933      	ldr	r3, [r6, #16]
 800585a:	429a      	cmp	r2, r3
 800585c:	b085      	sub	sp, #20
 800585e:	460d      	mov	r5, r1
 8005860:	da01      	bge.n	8005866 <__multiply+0x16>
 8005862:	4635      	mov	r5, r6
 8005864:	460e      	mov	r6, r1
 8005866:	f8d5 8010 	ldr.w	r8, [r5, #16]
 800586a:	6937      	ldr	r7, [r6, #16]
 800586c:	68ab      	ldr	r3, [r5, #8]
 800586e:	6869      	ldr	r1, [r5, #4]
 8005870:	eb08 0407 	add.w	r4, r8, r7
 8005874:	429c      	cmp	r4, r3
 8005876:	bfc8      	it	gt
 8005878:	3101      	addgt	r1, #1
 800587a:	f7ff ff0d 	bl	8005698 <_Balloc>
 800587e:	f100 0314 	add.w	r3, r0, #20
 8005882:	eb03 0184 	add.w	r1, r3, r4, lsl #2
 8005886:	9101      	str	r1, [sp, #4]
 8005888:	461a      	mov	r2, r3
 800588a:	f8dd a004 	ldr.w	sl, [sp, #4]
 800588e:	4552      	cmp	r2, sl
 8005890:	d203      	bcs.n	800589a <__multiply+0x4a>
 8005892:	2100      	movs	r1, #0
 8005894:	f842 1b04 	str.w	r1, [r2], #4
 8005898:	e7f7      	b.n	800588a <__multiply+0x3a>
 800589a:	f105 0114 	add.w	r1, r5, #20
 800589e:	f106 0214 	add.w	r2, r6, #20
 80058a2:	eb01 0888 	add.w	r8, r1, r8, lsl #2
 80058a6:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80058aa:	f8cd 8008 	str.w	r8, [sp, #8]
 80058ae:	9703      	str	r7, [sp, #12]
 80058b0:	9e03      	ldr	r6, [sp, #12]
 80058b2:	42b2      	cmp	r2, r6
 80058b4:	4615      	mov	r5, r2
 80058b6:	d256      	bcs.n	8005966 <__multiply+0x116>
 80058b8:	f8b5 c000 	ldrh.w	ip, [r5]
 80058bc:	3204      	adds	r2, #4
 80058be:	f1bc 0f00 	cmp.w	ip, #0
 80058c2:	d025      	beq.n	8005910 <__multiply+0xc0>
 80058c4:	460f      	mov	r7, r1
 80058c6:	461d      	mov	r5, r3
 80058c8:	2600      	movs	r6, #0
 80058ca:	f857 9b04 	ldr.w	r9, [r7], #4
 80058ce:	f8d5 8000 	ldr.w	r8, [r5]
 80058d2:	fa1f fb89 	uxth.w	fp, r9
 80058d6:	fa1f fa88 	uxth.w	sl, r8
 80058da:	fb0c aa0b 	mla	sl, ip, fp, sl
 80058de:	ea4f 4919 	mov.w	r9, r9, lsr #16
 80058e2:	ea4f 4818 	mov.w	r8, r8, lsr #16
 80058e6:	44b2      	add	sl, r6
 80058e8:	fb0c 8809 	mla	r8, ip, r9, r8
 80058ec:	eb08 481a 	add.w	r8, r8, sl, lsr #16
 80058f0:	fa1f fa8a 	uxth.w	sl, sl
 80058f4:	ea4a 4a08 	orr.w	sl, sl, r8, lsl #16
 80058f8:	ea4f 4618 	mov.w	r6, r8, lsr #16
 80058fc:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8005900:	46ab      	mov	fp, r5
 8005902:	45b8      	cmp	r8, r7
 8005904:	f84b ab04 	str.w	sl, [fp], #4
 8005908:	d901      	bls.n	800590e <__multiply+0xbe>
 800590a:	465d      	mov	r5, fp
 800590c:	e7dd      	b.n	80058ca <__multiply+0x7a>
 800590e:	606e      	str	r6, [r5, #4]
 8005910:	f832 8c02 	ldrh.w	r8, [r2, #-2]
 8005914:	f1b8 0f00 	cmp.w	r8, #0
 8005918:	d023      	beq.n	8005962 <__multiply+0x112>
 800591a:	681e      	ldr	r6, [r3, #0]
 800591c:	460f      	mov	r7, r1
 800591e:	461d      	mov	r5, r3
 8005920:	f04f 0900 	mov.w	r9, #0
 8005924:	f8b7 a000 	ldrh.w	sl, [r7]
 8005928:	f8b5 c002 	ldrh.w	ip, [r5, #2]
 800592c:	fb08 cc0a 	mla	ip, r8, sl, ip
 8005930:	44e1      	add	r9, ip
 8005932:	b2b6      	uxth	r6, r6
 8005934:	46ac      	mov	ip, r5
 8005936:	ea46 4609 	orr.w	r6, r6, r9, lsl #16
 800593a:	f84c 6b04 	str.w	r6, [ip], #4
 800593e:	f857 6b04 	ldr.w	r6, [r7], #4
 8005942:	f8b5 a004 	ldrh.w	sl, [r5, #4]
 8005946:	0c36      	lsrs	r6, r6, #16
 8005948:	fb08 a606 	mla	r6, r8, r6, sl
 800594c:	f8dd a008 	ldr.w	sl, [sp, #8]
 8005950:	eb06 4619 	add.w	r6, r6, r9, lsr #16
 8005954:	4557      	cmp	r7, sl
 8005956:	ea4f 4916 	mov.w	r9, r6, lsr #16
 800595a:	d201      	bcs.n	8005960 <__multiply+0x110>
 800595c:	4665      	mov	r5, ip
 800595e:	e7e1      	b.n	8005924 <__multiply+0xd4>
 8005960:	606e      	str	r6, [r5, #4]
 8005962:	3304      	adds	r3, #4
 8005964:	e7a4      	b.n	80058b0 <__multiply+0x60>
 8005966:	9b01      	ldr	r3, [sp, #4]
 8005968:	2c00      	cmp	r4, #0
 800596a:	dc03      	bgt.n	8005974 <__multiply+0x124>
 800596c:	6104      	str	r4, [r0, #16]
 800596e:	b005      	add	sp, #20
 8005970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005974:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8005978:	2a00      	cmp	r2, #0
 800597a:	d1f7      	bne.n	800596c <__multiply+0x11c>
 800597c:	3c01      	subs	r4, #1
 800597e:	e7f3      	b.n	8005968 <__multiply+0x118>

08005980 <__pow5mult>:
 8005980:	f012 0303 	ands.w	r3, r2, #3
 8005984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005988:	4605      	mov	r5, r0
 800598a:	460e      	mov	r6, r1
 800598c:	4617      	mov	r7, r2
 800598e:	d007      	beq.n	80059a0 <__pow5mult+0x20>
 8005990:	3b01      	subs	r3, #1
 8005992:	4a21      	ldr	r2, [pc, #132]	; (8005a18 <__pow5mult+0x98>)
 8005994:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005998:	2300      	movs	r3, #0
 800599a:	f7ff fec9 	bl	8005730 <__multadd>
 800599e:	4606      	mov	r6, r0
 80059a0:	10bf      	asrs	r7, r7, #2
 80059a2:	d035      	beq.n	8005a10 <__pow5mult+0x90>
 80059a4:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 80059a6:	b93c      	cbnz	r4, 80059b8 <__pow5mult+0x38>
 80059a8:	2010      	movs	r0, #16
 80059aa:	f7ff fc41 	bl	8005230 <malloc>
 80059ae:	6268      	str	r0, [r5, #36]	; 0x24
 80059b0:	6044      	str	r4, [r0, #4]
 80059b2:	6084      	str	r4, [r0, #8]
 80059b4:	6004      	str	r4, [r0, #0]
 80059b6:	60c4      	str	r4, [r0, #12]
 80059b8:	f8d5 8024 	ldr.w	r8, [r5, #36]	; 0x24
 80059bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80059c0:	b97c      	cbnz	r4, 80059e2 <__pow5mult+0x62>
 80059c2:	4628      	mov	r0, r5
 80059c4:	f240 2171 	movw	r1, #625	; 0x271
 80059c8:	f7ff ff39 	bl	800583e <__i2b>
 80059cc:	2300      	movs	r3, #0
 80059ce:	f8c8 0008 	str.w	r0, [r8, #8]
 80059d2:	4604      	mov	r4, r0
 80059d4:	6003      	str	r3, [r0, #0]
 80059d6:	e004      	b.n	80059e2 <__pow5mult+0x62>
 80059d8:	107f      	asrs	r7, r7, #1
 80059da:	d019      	beq.n	8005a10 <__pow5mult+0x90>
 80059dc:	6820      	ldr	r0, [r4, #0]
 80059de:	b170      	cbz	r0, 80059fe <__pow5mult+0x7e>
 80059e0:	4604      	mov	r4, r0
 80059e2:	07fb      	lsls	r3, r7, #31
 80059e4:	d5f8      	bpl.n	80059d8 <__pow5mult+0x58>
 80059e6:	4631      	mov	r1, r6
 80059e8:	4622      	mov	r2, r4
 80059ea:	4628      	mov	r0, r5
 80059ec:	f7ff ff30 	bl	8005850 <__multiply>
 80059f0:	4631      	mov	r1, r6
 80059f2:	4680      	mov	r8, r0
 80059f4:	4628      	mov	r0, r5
 80059f6:	f7ff fe84 	bl	8005702 <_Bfree>
 80059fa:	4646      	mov	r6, r8
 80059fc:	e7ec      	b.n	80059d8 <__pow5mult+0x58>
 80059fe:	4628      	mov	r0, r5
 8005a00:	4621      	mov	r1, r4
 8005a02:	4622      	mov	r2, r4
 8005a04:	f7ff ff24 	bl	8005850 <__multiply>
 8005a08:	2300      	movs	r3, #0
 8005a0a:	6020      	str	r0, [r4, #0]
 8005a0c:	6003      	str	r3, [r0, #0]
 8005a0e:	e7e7      	b.n	80059e0 <__pow5mult+0x60>
 8005a10:	4630      	mov	r0, r6
 8005a12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a16:	bf00      	nop
 8005a18:	08007b48 	.word	0x08007b48

08005a1c <__lshift>:
 8005a1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a20:	460c      	mov	r4, r1
 8005a22:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005a26:	6923      	ldr	r3, [r4, #16]
 8005a28:	6849      	ldr	r1, [r1, #4]
 8005a2a:	eb0a 0903 	add.w	r9, sl, r3
 8005a2e:	68a3      	ldr	r3, [r4, #8]
 8005a30:	4680      	mov	r8, r0
 8005a32:	4615      	mov	r5, r2
 8005a34:	f109 0701 	add.w	r7, r9, #1
 8005a38:	429f      	cmp	r7, r3
 8005a3a:	dd02      	ble.n	8005a42 <__lshift+0x26>
 8005a3c:	3101      	adds	r1, #1
 8005a3e:	005b      	lsls	r3, r3, #1
 8005a40:	e7fa      	b.n	8005a38 <__lshift+0x1c>
 8005a42:	4640      	mov	r0, r8
 8005a44:	f7ff fe28 	bl	8005698 <_Balloc>
 8005a48:	2300      	movs	r3, #0
 8005a4a:	4606      	mov	r6, r0
 8005a4c:	f100 0214 	add.w	r2, r0, #20
 8005a50:	4553      	cmp	r3, sl
 8005a52:	da04      	bge.n	8005a5e <__lshift+0x42>
 8005a54:	2100      	movs	r1, #0
 8005a56:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8005a5a:	3301      	adds	r3, #1
 8005a5c:	e7f8      	b.n	8005a50 <__lshift+0x34>
 8005a5e:	6920      	ldr	r0, [r4, #16]
 8005a60:	ea2a 71ea 	bic.w	r1, sl, sl, asr #31
 8005a64:	f104 0314 	add.w	r3, r4, #20
 8005a68:	f015 0c1f 	ands.w	ip, r5, #31
 8005a6c:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8005a70:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
 8005a74:	d016      	beq.n	8005aa4 <__lshift+0x88>
 8005a76:	f1cc 0a20 	rsb	sl, ip, #32
 8005a7a:	2500      	movs	r5, #0
 8005a7c:	6818      	ldr	r0, [r3, #0]
 8005a7e:	460a      	mov	r2, r1
 8005a80:	fa00 f00c 	lsl.w	r0, r0, ip
 8005a84:	4305      	orrs	r5, r0
 8005a86:	f842 5b04 	str.w	r5, [r2], #4
 8005a8a:	f853 5b04 	ldr.w	r5, [r3], #4
 8005a8e:	4573      	cmp	r3, lr
 8005a90:	fa25 f50a 	lsr.w	r5, r5, sl
 8005a94:	d201      	bcs.n	8005a9a <__lshift+0x7e>
 8005a96:	4611      	mov	r1, r2
 8005a98:	e7f0      	b.n	8005a7c <__lshift+0x60>
 8005a9a:	604d      	str	r5, [r1, #4]
 8005a9c:	b145      	cbz	r5, 8005ab0 <__lshift+0x94>
 8005a9e:	f109 0702 	add.w	r7, r9, #2
 8005aa2:	e005      	b.n	8005ab0 <__lshift+0x94>
 8005aa4:	f853 2b04 	ldr.w	r2, [r3], #4
 8005aa8:	f841 2b04 	str.w	r2, [r1], #4
 8005aac:	4573      	cmp	r3, lr
 8005aae:	d3f9      	bcc.n	8005aa4 <__lshift+0x88>
 8005ab0:	3f01      	subs	r7, #1
 8005ab2:	4640      	mov	r0, r8
 8005ab4:	6137      	str	r7, [r6, #16]
 8005ab6:	4621      	mov	r1, r4
 8005ab8:	f7ff fe23 	bl	8005702 <_Bfree>
 8005abc:	4630      	mov	r0, r6
 8005abe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005ac2 <__mcmp>:
 8005ac2:	6902      	ldr	r2, [r0, #16]
 8005ac4:	690b      	ldr	r3, [r1, #16]
 8005ac6:	1ad2      	subs	r2, r2, r3
 8005ac8:	b510      	push	{r4, lr}
 8005aca:	d113      	bne.n	8005af4 <__mcmp+0x32>
 8005acc:	009c      	lsls	r4, r3, #2
 8005ace:	3014      	adds	r0, #20
 8005ad0:	f101 0214 	add.w	r2, r1, #20
 8005ad4:	1903      	adds	r3, r0, r4
 8005ad6:	4422      	add	r2, r4
 8005ad8:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8005adc:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8005ae0:	428c      	cmp	r4, r1
 8005ae2:	d003      	beq.n	8005aec <__mcmp+0x2a>
 8005ae4:	d208      	bcs.n	8005af8 <__mcmp+0x36>
 8005ae6:	f04f 30ff 	mov.w	r0, #4294967295
 8005aea:	bd10      	pop	{r4, pc}
 8005aec:	4298      	cmp	r0, r3
 8005aee:	d3f3      	bcc.n	8005ad8 <__mcmp+0x16>
 8005af0:	2000      	movs	r0, #0
 8005af2:	bd10      	pop	{r4, pc}
 8005af4:	4610      	mov	r0, r2
 8005af6:	bd10      	pop	{r4, pc}
 8005af8:	2001      	movs	r0, #1
 8005afa:	bd10      	pop	{r4, pc}

08005afc <__mdiff>:
 8005afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b00:	4606      	mov	r6, r0
 8005b02:	460c      	mov	r4, r1
 8005b04:	4608      	mov	r0, r1
 8005b06:	4611      	mov	r1, r2
 8005b08:	4615      	mov	r5, r2
 8005b0a:	f7ff ffda 	bl	8005ac2 <__mcmp>
 8005b0e:	1e07      	subs	r7, r0, #0
 8005b10:	d108      	bne.n	8005b24 <__mdiff+0x28>
 8005b12:	4630      	mov	r0, r6
 8005b14:	4639      	mov	r1, r7
 8005b16:	f7ff fdbf 	bl	8005698 <_Balloc>
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	6103      	str	r3, [r0, #16]
 8005b1e:	6147      	str	r7, [r0, #20]
 8005b20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b24:	db01      	blt.n	8005b2a <__mdiff+0x2e>
 8005b26:	2700      	movs	r7, #0
 8005b28:	e003      	b.n	8005b32 <__mdiff+0x36>
 8005b2a:	4623      	mov	r3, r4
 8005b2c:	2701      	movs	r7, #1
 8005b2e:	462c      	mov	r4, r5
 8005b30:	461d      	mov	r5, r3
 8005b32:	6861      	ldr	r1, [r4, #4]
 8005b34:	4630      	mov	r0, r6
 8005b36:	f7ff fdaf 	bl	8005698 <_Balloc>
 8005b3a:	6922      	ldr	r2, [r4, #16]
 8005b3c:	692b      	ldr	r3, [r5, #16]
 8005b3e:	60c7      	str	r7, [r0, #12]
 8005b40:	3414      	adds	r4, #20
 8005b42:	f105 0614 	add.w	r6, r5, #20
 8005b46:	eb06 0a83 	add.w	sl, r6, r3, lsl #2
 8005b4a:	eb04 0c82 	add.w	ip, r4, r2, lsl #2
 8005b4e:	f100 0314 	add.w	r3, r0, #20
 8005b52:	2100      	movs	r1, #0
 8005b54:	f854 7b04 	ldr.w	r7, [r4], #4
 8005b58:	f856 9b04 	ldr.w	r9, [r6], #4
 8005b5c:	fa11 f187 	uxtah	r1, r1, r7
 8005b60:	fa1f f589 	uxth.w	r5, r9
 8005b64:	ea4f 4919 	mov.w	r9, r9, lsr #16
 8005b68:	ebc5 0801 	rsb	r8, r5, r1
 8005b6c:	ebc9 4717 	rsb	r7, r9, r7, lsr #16
 8005b70:	eb07 4728 	add.w	r7, r7, r8, asr #16
 8005b74:	fa1f f888 	uxth.w	r8, r8
 8005b78:	1439      	asrs	r1, r7, #16
 8005b7a:	45b2      	cmp	sl, r6
 8005b7c:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
 8005b80:	4625      	mov	r5, r4
 8005b82:	f843 7b04 	str.w	r7, [r3], #4
 8005b86:	d8e5      	bhi.n	8005b54 <__mdiff+0x58>
 8005b88:	4565      	cmp	r5, ip
 8005b8a:	d20d      	bcs.n	8005ba8 <__mdiff+0xac>
 8005b8c:	f855 4b04 	ldr.w	r4, [r5], #4
 8005b90:	fa11 f684 	uxtah	r6, r1, r4
 8005b94:	0c24      	lsrs	r4, r4, #16
 8005b96:	eb04 4426 	add.w	r4, r4, r6, asr #16
 8005b9a:	b2b6      	uxth	r6, r6
 8005b9c:	1421      	asrs	r1, r4, #16
 8005b9e:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
 8005ba2:	f843 4b04 	str.w	r4, [r3], #4
 8005ba6:	e7ef      	b.n	8005b88 <__mdiff+0x8c>
 8005ba8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005bac:	b909      	cbnz	r1, 8005bb2 <__mdiff+0xb6>
 8005bae:	3a01      	subs	r2, #1
 8005bb0:	e7fa      	b.n	8005ba8 <__mdiff+0xac>
 8005bb2:	6102      	str	r2, [r0, #16]
 8005bb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005bb8 <__d2b>:
 8005bb8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005bbc:	4689      	mov	r9, r1
 8005bbe:	2101      	movs	r1, #1
 8005bc0:	ec55 4b10 	vmov	r4, r5, d0
 8005bc4:	4690      	mov	r8, r2
 8005bc6:	f7ff fd67 	bl	8005698 <_Balloc>
 8005bca:	f3c5 570a 	ubfx	r7, r5, #20, #11
 8005bce:	4606      	mov	r6, r0
 8005bd0:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8005bd4:	b10f      	cbz	r7, 8005bda <__d2b+0x22>
 8005bd6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005bda:	9301      	str	r3, [sp, #4]
 8005bdc:	b1d4      	cbz	r4, 8005c14 <__d2b+0x5c>
 8005bde:	a802      	add	r0, sp, #8
 8005be0:	f840 4d08 	str.w	r4, [r0, #-8]!
 8005be4:	4668      	mov	r0, sp
 8005be6:	f7ff fdfd 	bl	80057e4 <__lo0bits>
 8005bea:	9b00      	ldr	r3, [sp, #0]
 8005bec:	b148      	cbz	r0, 8005c02 <__d2b+0x4a>
 8005bee:	9a01      	ldr	r2, [sp, #4]
 8005bf0:	f1c0 0120 	rsb	r1, r0, #32
 8005bf4:	fa02 f101 	lsl.w	r1, r2, r1
 8005bf8:	430b      	orrs	r3, r1
 8005bfa:	40c2      	lsrs	r2, r0
 8005bfc:	6173      	str	r3, [r6, #20]
 8005bfe:	9201      	str	r2, [sp, #4]
 8005c00:	e000      	b.n	8005c04 <__d2b+0x4c>
 8005c02:	6173      	str	r3, [r6, #20]
 8005c04:	9b01      	ldr	r3, [sp, #4]
 8005c06:	61b3      	str	r3, [r6, #24]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	bf0c      	ite	eq
 8005c0c:	2401      	moveq	r4, #1
 8005c0e:	2402      	movne	r4, #2
 8005c10:	6134      	str	r4, [r6, #16]
 8005c12:	e007      	b.n	8005c24 <__d2b+0x6c>
 8005c14:	a801      	add	r0, sp, #4
 8005c16:	f7ff fde5 	bl	80057e4 <__lo0bits>
 8005c1a:	2401      	movs	r4, #1
 8005c1c:	9b01      	ldr	r3, [sp, #4]
 8005c1e:	6173      	str	r3, [r6, #20]
 8005c20:	6134      	str	r4, [r6, #16]
 8005c22:	3020      	adds	r0, #32
 8005c24:	b13f      	cbz	r7, 8005c36 <__d2b+0x7e>
 8005c26:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
 8005c2a:	4407      	add	r7, r0
 8005c2c:	f8c9 7000 	str.w	r7, [r9]
 8005c30:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005c34:	e00a      	b.n	8005c4c <__d2b+0x94>
 8005c36:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8005c3a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005c3e:	f8c9 0000 	str.w	r0, [r9]
 8005c42:	6918      	ldr	r0, [r3, #16]
 8005c44:	f7ff fdae 	bl	80057a4 <__hi0bits>
 8005c48:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
 8005c4c:	f8c8 0000 	str.w	r0, [r8]
 8005c50:	4630      	mov	r0, r6
 8005c52:	b003      	add	sp, #12
 8005c54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08005c58 <__fpclassifyd>:
 8005c58:	ec51 0b10 	vmov	r0, r1, d0
 8005c5c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8005c60:	b510      	push	{r4, lr}
 8005c62:	d100      	bne.n	8005c66 <__fpclassifyd+0xe>
 8005c64:	b178      	cbz	r0, 8005c86 <__fpclassifyd+0x2e>
 8005c66:	4a0c      	ldr	r2, [pc, #48]	; (8005c98 <__fpclassifyd+0x40>)
 8005c68:	f5a3 1480 	sub.w	r4, r3, #1048576	; 0x100000
 8005c6c:	4294      	cmp	r4, r2
 8005c6e:	d90c      	bls.n	8005c8a <__fpclassifyd+0x32>
 8005c70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c74:	d30b      	bcc.n	8005c8e <__fpclassifyd+0x36>
 8005c76:	4a09      	ldr	r2, [pc, #36]	; (8005c9c <__fpclassifyd+0x44>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d10a      	bne.n	8005c92 <__fpclassifyd+0x3a>
 8005c7c:	f1d0 0001 	rsbs	r0, r0, #1
 8005c80:	bf38      	it	cc
 8005c82:	2000      	movcc	r0, #0
 8005c84:	bd10      	pop	{r4, pc}
 8005c86:	2002      	movs	r0, #2
 8005c88:	bd10      	pop	{r4, pc}
 8005c8a:	2004      	movs	r0, #4
 8005c8c:	bd10      	pop	{r4, pc}
 8005c8e:	2003      	movs	r0, #3
 8005c90:	bd10      	pop	{r4, pc}
 8005c92:	2000      	movs	r0, #0
 8005c94:	bd10      	pop	{r4, pc}
 8005c96:	bf00      	nop
 8005c98:	7fdfffff 	.word	0x7fdfffff
 8005c9c:	7ff00000 	.word	0x7ff00000

08005ca0 <_sbrk_r>:
 8005ca0:	b538      	push	{r3, r4, r5, lr}
 8005ca2:	4c06      	ldr	r4, [pc, #24]	; (8005cbc <_sbrk_r+0x1c>)
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	4605      	mov	r5, r0
 8005ca8:	4608      	mov	r0, r1
 8005caa:	6023      	str	r3, [r4, #0]
 8005cac:	f000 f88a 	bl	8005dc4 <_sbrk>
 8005cb0:	1c43      	adds	r3, r0, #1
 8005cb2:	d102      	bne.n	8005cba <_sbrk_r+0x1a>
 8005cb4:	6823      	ldr	r3, [r4, #0]
 8005cb6:	b103      	cbz	r3, 8005cba <_sbrk_r+0x1a>
 8005cb8:	602b      	str	r3, [r5, #0]
 8005cba:	bd38      	pop	{r3, r4, r5, pc}
 8005cbc:	20000768 	.word	0x20000768

08005cc0 <strlen>:
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005cc6:	2a00      	cmp	r2, #0
 8005cc8:	d1fb      	bne.n	8005cc2 <strlen+0x2>
 8005cca:	1a18      	subs	r0, r3, r0
 8005ccc:	3801      	subs	r0, #1
 8005cce:	4770      	bx	lr

08005cd0 <__ssprint_r>:
 8005cd0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cd4:	4680      	mov	r8, r0
 8005cd6:	6890      	ldr	r0, [r2, #8]
 8005cd8:	f8d2 9000 	ldr.w	r9, [r2]
 8005cdc:	460c      	mov	r4, r1
 8005cde:	4615      	mov	r5, r2
 8005ce0:	b118      	cbz	r0, 8005cea <__ssprint_r+0x1a>
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	9301      	str	r3, [sp, #4]
 8005ce6:	461e      	mov	r6, r3
 8005ce8:	e008      	b.n	8005cfc <__ssprint_r+0x2c>
 8005cea:	6050      	str	r0, [r2, #4]
 8005cec:	e066      	b.n	8005dbc <__ssprint_r+0xec>
 8005cee:	f8d9 3000 	ldr.w	r3, [r9]
 8005cf2:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8005cf6:	9301      	str	r3, [sp, #4]
 8005cf8:	f109 0908 	add.w	r9, r9, #8
 8005cfc:	2e00      	cmp	r6, #0
 8005cfe:	d0f6      	beq.n	8005cee <__ssprint_r+0x1e>
 8005d00:	68a7      	ldr	r7, [r4, #8]
 8005d02:	42be      	cmp	r6, r7
 8005d04:	d347      	bcc.n	8005d96 <__ssprint_r+0xc6>
 8005d06:	89a2      	ldrh	r2, [r4, #12]
 8005d08:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005d0c:	d041      	beq.n	8005d92 <__ssprint_r+0xc2>
 8005d0e:	6823      	ldr	r3, [r4, #0]
 8005d10:	6921      	ldr	r1, [r4, #16]
 8005d12:	ebc1 0a03 	rsb	sl, r1, r3
 8005d16:	6963      	ldr	r3, [r4, #20]
 8005d18:	2002      	movs	r0, #2
 8005d1a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005d1e:	fb93 fbf0 	sdiv	fp, r3, r0
 8005d22:	f10a 0001 	add.w	r0, sl, #1
 8005d26:	4430      	add	r0, r6
 8005d28:	4583      	cmp	fp, r0
 8005d2a:	bf38      	it	cc
 8005d2c:	4683      	movcc	fp, r0
 8005d2e:	0553      	lsls	r3, r2, #21
 8005d30:	4640      	mov	r0, r8
 8005d32:	d50f      	bpl.n	8005d54 <__ssprint_r+0x84>
 8005d34:	4659      	mov	r1, fp
 8005d36:	f7ff fa83 	bl	8005240 <_malloc_r>
 8005d3a:	4607      	mov	r7, r0
 8005d3c:	b198      	cbz	r0, 8005d66 <__ssprint_r+0x96>
 8005d3e:	4652      	mov	r2, sl
 8005d40:	6921      	ldr	r1, [r4, #16]
 8005d42:	f7ff fc9e 	bl	8005682 <memcpy>
 8005d46:	89a2      	ldrh	r2, [r4, #12]
 8005d48:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8005d4c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005d50:	81a2      	strh	r2, [r4, #12]
 8005d52:	e015      	b.n	8005d80 <__ssprint_r+0xb0>
 8005d54:	465a      	mov	r2, fp
 8005d56:	f000 f9ad 	bl	80060b4 <_realloc_r>
 8005d5a:	4607      	mov	r7, r0
 8005d5c:	b980      	cbnz	r0, 8005d80 <__ssprint_r+0xb0>
 8005d5e:	4640      	mov	r0, r8
 8005d60:	6921      	ldr	r1, [r4, #16]
 8005d62:	f000 f8cb 	bl	8005efc <_free_r>
 8005d66:	230c      	movs	r3, #12
 8005d68:	f8c8 3000 	str.w	r3, [r8]
 8005d6c:	89a3      	ldrh	r3, [r4, #12]
 8005d6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d72:	81a3      	strh	r3, [r4, #12]
 8005d74:	2300      	movs	r3, #0
 8005d76:	60ab      	str	r3, [r5, #8]
 8005d78:	606b      	str	r3, [r5, #4]
 8005d7a:	f04f 30ff 	mov.w	r0, #4294967295
 8005d7e:	e01d      	b.n	8005dbc <__ssprint_r+0xec>
 8005d80:	6127      	str	r7, [r4, #16]
 8005d82:	ebca 030b 	rsb	r3, sl, fp
 8005d86:	4457      	add	r7, sl
 8005d88:	6027      	str	r7, [r4, #0]
 8005d8a:	f8c4 b014 	str.w	fp, [r4, #20]
 8005d8e:	4637      	mov	r7, r6
 8005d90:	60a3      	str	r3, [r4, #8]
 8005d92:	42be      	cmp	r6, r7
 8005d94:	d200      	bcs.n	8005d98 <__ssprint_r+0xc8>
 8005d96:	4637      	mov	r7, r6
 8005d98:	463a      	mov	r2, r7
 8005d9a:	6820      	ldr	r0, [r4, #0]
 8005d9c:	9901      	ldr	r1, [sp, #4]
 8005d9e:	f000 f965 	bl	800606c <memmove>
 8005da2:	68a3      	ldr	r3, [r4, #8]
 8005da4:	1bdb      	subs	r3, r3, r7
 8005da6:	60a3      	str	r3, [r4, #8]
 8005da8:	6823      	ldr	r3, [r4, #0]
 8005daa:	441f      	add	r7, r3
 8005dac:	68ab      	ldr	r3, [r5, #8]
 8005dae:	6027      	str	r7, [r4, #0]
 8005db0:	1b9e      	subs	r6, r3, r6
 8005db2:	60ae      	str	r6, [r5, #8]
 8005db4:	2e00      	cmp	r6, #0
 8005db6:	d19a      	bne.n	8005cee <__ssprint_r+0x1e>
 8005db8:	606e      	str	r6, [r5, #4]
 8005dba:	4630      	mov	r0, r6
 8005dbc:	b003      	add	sp, #12
 8005dbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08005dc4 <_sbrk>:
 8005dc4:	4b09      	ldr	r3, [pc, #36]	; (8005dec <_sbrk+0x28>)
 8005dc6:	681a      	ldr	r2, [r3, #0]
 8005dc8:	b90a      	cbnz	r2, 8005dce <_sbrk+0xa>
 8005dca:	4a09      	ldr	r2, [pc, #36]	; (8005df0 <_sbrk+0x2c>)
 8005dcc:	601a      	str	r2, [r3, #0]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	466a      	mov	r2, sp
 8005dd2:	4418      	add	r0, r3
 8005dd4:	4290      	cmp	r0, r2
 8005dd6:	d905      	bls.n	8005de4 <_sbrk+0x20>
 8005dd8:	4b06      	ldr	r3, [pc, #24]	; (8005df4 <_sbrk+0x30>)
 8005dda:	220c      	movs	r2, #12
 8005ddc:	601a      	str	r2, [r3, #0]
 8005dde:	f04f 30ff 	mov.w	r0, #4294967295
 8005de2:	4770      	bx	lr
 8005de4:	4a01      	ldr	r2, [pc, #4]	; (8005dec <_sbrk+0x28>)
 8005de6:	6010      	str	r0, [r2, #0]
 8005de8:	4618      	mov	r0, r3
 8005dea:	4770      	bx	lr
 8005dec:	2000059c 	.word	0x2000059c
 8005df0:	2000076c 	.word	0x2000076c
 8005df4:	20000768 	.word	0x20000768

08005df8 <_calloc_r>:
 8005df8:	b510      	push	{r4, lr}
 8005dfa:	4351      	muls	r1, r2
 8005dfc:	f7ff fa20 	bl	8005240 <_malloc_r>
 8005e00:	4604      	mov	r4, r0
 8005e02:	b320      	cbz	r0, 8005e4e <_calloc_r+0x56>
 8005e04:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8005e08:	f022 0203 	bic.w	r2, r2, #3
 8005e0c:	3a04      	subs	r2, #4
 8005e0e:	2a24      	cmp	r2, #36	; 0x24
 8005e10:	d81a      	bhi.n	8005e48 <_calloc_r+0x50>
 8005e12:	2a13      	cmp	r2, #19
 8005e14:	d912      	bls.n	8005e3c <_calloc_r+0x44>
 8005e16:	2100      	movs	r1, #0
 8005e18:	2a1b      	cmp	r2, #27
 8005e1a:	6001      	str	r1, [r0, #0]
 8005e1c:	6041      	str	r1, [r0, #4]
 8005e1e:	d802      	bhi.n	8005e26 <_calloc_r+0x2e>
 8005e20:	f100 0308 	add.w	r3, r0, #8
 8005e24:	e00b      	b.n	8005e3e <_calloc_r+0x46>
 8005e26:	2a24      	cmp	r2, #36	; 0x24
 8005e28:	6081      	str	r1, [r0, #8]
 8005e2a:	60c1      	str	r1, [r0, #12]
 8005e2c:	bf11      	iteee	ne
 8005e2e:	f100 0310 	addne.w	r3, r0, #16
 8005e32:	6101      	streq	r1, [r0, #16]
 8005e34:	f100 0318 	addeq.w	r3, r0, #24
 8005e38:	6141      	streq	r1, [r0, #20]
 8005e3a:	e000      	b.n	8005e3e <_calloc_r+0x46>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	2200      	movs	r2, #0
 8005e40:	601a      	str	r2, [r3, #0]
 8005e42:	605a      	str	r2, [r3, #4]
 8005e44:	609a      	str	r2, [r3, #8]
 8005e46:	e002      	b.n	8005e4e <_calloc_r+0x56>
 8005e48:	2100      	movs	r1, #0
 8005e4a:	f000 f92a 	bl	80060a2 <memset>
 8005e4e:	4620      	mov	r0, r4
 8005e50:	bd10      	pop	{r4, pc}
	...

08005e54 <_malloc_trim_r>:
 8005e54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e58:	4d24      	ldr	r5, [pc, #144]	; (8005eec <_malloc_trim_r+0x98>)
 8005e5a:	4f25      	ldr	r7, [pc, #148]	; (8005ef0 <_malloc_trim_r+0x9c>)
 8005e5c:	460e      	mov	r6, r1
 8005e5e:	4604      	mov	r4, r0
 8005e60:	f7ff fc18 	bl	8005694 <__malloc_lock>
 8005e64:	68ab      	ldr	r3, [r5, #8]
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	f023 0803 	bic.w	r8, r3, #3
 8005e6c:	f1a7 0311 	sub.w	r3, r7, #17
 8005e70:	4443      	add	r3, r8
 8005e72:	1b9e      	subs	r6, r3, r6
 8005e74:	fbb6 f6f7 	udiv	r6, r6, r7
 8005e78:	3e01      	subs	r6, #1
 8005e7a:	437e      	muls	r6, r7
 8005e7c:	42be      	cmp	r6, r7
 8005e7e:	da05      	bge.n	8005e8c <_malloc_trim_r+0x38>
 8005e80:	4620      	mov	r0, r4
 8005e82:	f7ff fc08 	bl	8005696 <__malloc_unlock>
 8005e86:	2000      	movs	r0, #0
 8005e88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e8c:	4620      	mov	r0, r4
 8005e8e:	2100      	movs	r1, #0
 8005e90:	f7ff ff06 	bl	8005ca0 <_sbrk_r>
 8005e94:	68ab      	ldr	r3, [r5, #8]
 8005e96:	4443      	add	r3, r8
 8005e98:	4298      	cmp	r0, r3
 8005e9a:	d1f1      	bne.n	8005e80 <_malloc_trim_r+0x2c>
 8005e9c:	4620      	mov	r0, r4
 8005e9e:	4271      	negs	r1, r6
 8005ea0:	f7ff fefe 	bl	8005ca0 <_sbrk_r>
 8005ea4:	3001      	adds	r0, #1
 8005ea6:	d110      	bne.n	8005eca <_malloc_trim_r+0x76>
 8005ea8:	4620      	mov	r0, r4
 8005eaa:	2100      	movs	r1, #0
 8005eac:	f7ff fef8 	bl	8005ca0 <_sbrk_r>
 8005eb0:	68ab      	ldr	r3, [r5, #8]
 8005eb2:	1ac2      	subs	r2, r0, r3
 8005eb4:	2a0f      	cmp	r2, #15
 8005eb6:	dde3      	ble.n	8005e80 <_malloc_trim_r+0x2c>
 8005eb8:	490e      	ldr	r1, [pc, #56]	; (8005ef4 <_malloc_trim_r+0xa0>)
 8005eba:	6809      	ldr	r1, [r1, #0]
 8005ebc:	1a40      	subs	r0, r0, r1
 8005ebe:	490e      	ldr	r1, [pc, #56]	; (8005ef8 <_malloc_trim_r+0xa4>)
 8005ec0:	f042 0201 	orr.w	r2, r2, #1
 8005ec4:	6008      	str	r0, [r1, #0]
 8005ec6:	605a      	str	r2, [r3, #4]
 8005ec8:	e7da      	b.n	8005e80 <_malloc_trim_r+0x2c>
 8005eca:	68ab      	ldr	r3, [r5, #8]
 8005ecc:	ebc6 0808 	rsb	r8, r6, r8
 8005ed0:	f048 0201 	orr.w	r2, r8, #1
 8005ed4:	605a      	str	r2, [r3, #4]
 8005ed6:	4b08      	ldr	r3, [pc, #32]	; (8005ef8 <_malloc_trim_r+0xa4>)
 8005ed8:	681a      	ldr	r2, [r3, #0]
 8005eda:	4620      	mov	r0, r4
 8005edc:	1b96      	subs	r6, r2, r6
 8005ede:	601e      	str	r6, [r3, #0]
 8005ee0:	f7ff fbd9 	bl	8005696 <__malloc_unlock>
 8005ee4:	2001      	movs	r0, #1
 8005ee6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005eea:	bf00      	nop
 8005eec:	20000130 	.word	0x20000130
 8005ef0:	00001000 	.word	0x00001000
 8005ef4:	2000053c 	.word	0x2000053c
 8005ef8:	20000574 	.word	0x20000574

08005efc <_free_r>:
 8005efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005efe:	4606      	mov	r6, r0
 8005f00:	460d      	mov	r5, r1
 8005f02:	2900      	cmp	r1, #0
 8005f04:	f000 80a9 	beq.w	800605a <_free_r+0x15e>
 8005f08:	f7ff fbc4 	bl	8005694 <__malloc_lock>
 8005f0c:	f855 cc04 	ldr.w	ip, [r5, #-4]
 8005f10:	4c52      	ldr	r4, [pc, #328]	; (800605c <_free_r+0x160>)
 8005f12:	f1a5 0308 	sub.w	r3, r5, #8
 8005f16:	f02c 0201 	bic.w	r2, ip, #1
 8005f1a:	1898      	adds	r0, r3, r2
 8005f1c:	68a1      	ldr	r1, [r4, #8]
 8005f1e:	6847      	ldr	r7, [r0, #4]
 8005f20:	4288      	cmp	r0, r1
 8005f22:	f027 0703 	bic.w	r7, r7, #3
 8005f26:	f00c 0101 	and.w	r1, ip, #1
 8005f2a:	d11b      	bne.n	8005f64 <_free_r+0x68>
 8005f2c:	443a      	add	r2, r7
 8005f2e:	b939      	cbnz	r1, 8005f40 <_free_r+0x44>
 8005f30:	f855 1c08 	ldr.w	r1, [r5, #-8]
 8005f34:	1a5b      	subs	r3, r3, r1
 8005f36:	440a      	add	r2, r1
 8005f38:	6898      	ldr	r0, [r3, #8]
 8005f3a:	68d9      	ldr	r1, [r3, #12]
 8005f3c:	60c1      	str	r1, [r0, #12]
 8005f3e:	6088      	str	r0, [r1, #8]
 8005f40:	f042 0101 	orr.w	r1, r2, #1
 8005f44:	6059      	str	r1, [r3, #4]
 8005f46:	60a3      	str	r3, [r4, #8]
 8005f48:	4b45      	ldr	r3, [pc, #276]	; (8006060 <_free_r+0x164>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	d304      	bcc.n	8005f5a <_free_r+0x5e>
 8005f50:	4b44      	ldr	r3, [pc, #272]	; (8006064 <_free_r+0x168>)
 8005f52:	4630      	mov	r0, r6
 8005f54:	6819      	ldr	r1, [r3, #0]
 8005f56:	f7ff ff7d 	bl	8005e54 <_malloc_trim_r>
 8005f5a:	4630      	mov	r0, r6
 8005f5c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005f60:	f7ff bb99 	b.w	8005696 <__malloc_unlock>
 8005f64:	6047      	str	r7, [r0, #4]
 8005f66:	b979      	cbnz	r1, 8005f88 <_free_r+0x8c>
 8005f68:	f855 5c08 	ldr.w	r5, [r5, #-8]
 8005f6c:	1b5b      	subs	r3, r3, r5
 8005f6e:	442a      	add	r2, r5
 8005f70:	689d      	ldr	r5, [r3, #8]
 8005f72:	f104 0c08 	add.w	ip, r4, #8
 8005f76:	4565      	cmp	r5, ip
 8005f78:	d008      	beq.n	8005f8c <_free_r+0x90>
 8005f7a:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8005f7e:	f8c5 c00c 	str.w	ip, [r5, #12]
 8005f82:	f8cc 5008 	str.w	r5, [ip, #8]
 8005f86:	e002      	b.n	8005f8e <_free_r+0x92>
 8005f88:	2100      	movs	r1, #0
 8005f8a:	e000      	b.n	8005f8e <_free_r+0x92>
 8005f8c:	2101      	movs	r1, #1
 8005f8e:	19c5      	adds	r5, r0, r7
 8005f90:	686d      	ldr	r5, [r5, #4]
 8005f92:	07ed      	lsls	r5, r5, #31
 8005f94:	d40e      	bmi.n	8005fb4 <_free_r+0xb8>
 8005f96:	443a      	add	r2, r7
 8005f98:	6885      	ldr	r5, [r0, #8]
 8005f9a:	b941      	cbnz	r1, 8005fae <_free_r+0xb2>
 8005f9c:	4f32      	ldr	r7, [pc, #200]	; (8006068 <_free_r+0x16c>)
 8005f9e:	42bd      	cmp	r5, r7
 8005fa0:	d105      	bne.n	8005fae <_free_r+0xb2>
 8005fa2:	6163      	str	r3, [r4, #20]
 8005fa4:	6123      	str	r3, [r4, #16]
 8005fa6:	2101      	movs	r1, #1
 8005fa8:	60dd      	str	r5, [r3, #12]
 8005faa:	609d      	str	r5, [r3, #8]
 8005fac:	e002      	b.n	8005fb4 <_free_r+0xb8>
 8005fae:	68c0      	ldr	r0, [r0, #12]
 8005fb0:	60e8      	str	r0, [r5, #12]
 8005fb2:	6085      	str	r5, [r0, #8]
 8005fb4:	f042 0001 	orr.w	r0, r2, #1
 8005fb8:	6058      	str	r0, [r3, #4]
 8005fba:	509a      	str	r2, [r3, r2]
 8005fbc:	2900      	cmp	r1, #0
 8005fbe:	d1cc      	bne.n	8005f5a <_free_r+0x5e>
 8005fc0:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8005fc4:	d20e      	bcs.n	8005fe4 <_free_r+0xe8>
 8005fc6:	08d2      	lsrs	r2, r2, #3
 8005fc8:	1091      	asrs	r1, r2, #2
 8005fca:	2001      	movs	r0, #1
 8005fcc:	4088      	lsls	r0, r1
 8005fce:	6861      	ldr	r1, [r4, #4]
 8005fd0:	4301      	orrs	r1, r0
 8005fd2:	6061      	str	r1, [r4, #4]
 8005fd4:	eb04 04c2 	add.w	r4, r4, r2, lsl #3
 8005fd8:	68a2      	ldr	r2, [r4, #8]
 8005fda:	609a      	str	r2, [r3, #8]
 8005fdc:	60dc      	str	r4, [r3, #12]
 8005fde:	60a3      	str	r3, [r4, #8]
 8005fe0:	60d3      	str	r3, [r2, #12]
 8005fe2:	e7ba      	b.n	8005f5a <_free_r+0x5e>
 8005fe4:	0a51      	lsrs	r1, r2, #9
 8005fe6:	2904      	cmp	r1, #4
 8005fe8:	d802      	bhi.n	8005ff0 <_free_r+0xf4>
 8005fea:	0991      	lsrs	r1, r2, #6
 8005fec:	3138      	adds	r1, #56	; 0x38
 8005fee:	e015      	b.n	800601c <_free_r+0x120>
 8005ff0:	2914      	cmp	r1, #20
 8005ff2:	d801      	bhi.n	8005ff8 <_free_r+0xfc>
 8005ff4:	315b      	adds	r1, #91	; 0x5b
 8005ff6:	e011      	b.n	800601c <_free_r+0x120>
 8005ff8:	2954      	cmp	r1, #84	; 0x54
 8005ffa:	d802      	bhi.n	8006002 <_free_r+0x106>
 8005ffc:	0b11      	lsrs	r1, r2, #12
 8005ffe:	316e      	adds	r1, #110	; 0x6e
 8006000:	e00c      	b.n	800601c <_free_r+0x120>
 8006002:	f5b1 7faa 	cmp.w	r1, #340	; 0x154
 8006006:	d802      	bhi.n	800600e <_free_r+0x112>
 8006008:	0bd1      	lsrs	r1, r2, #15
 800600a:	3177      	adds	r1, #119	; 0x77
 800600c:	e006      	b.n	800601c <_free_r+0x120>
 800600e:	f240 5054 	movw	r0, #1364	; 0x554
 8006012:	4281      	cmp	r1, r0
 8006014:	bf9a      	itte	ls
 8006016:	0c91      	lsrls	r1, r2, #18
 8006018:	317c      	addls	r1, #124	; 0x7c
 800601a:	217e      	movhi	r1, #126	; 0x7e
 800601c:	eb04 04c1 	add.w	r4, r4, r1, lsl #3
 8006020:	480e      	ldr	r0, [pc, #56]	; (800605c <_free_r+0x160>)
 8006022:	68a5      	ldr	r5, [r4, #8]
 8006024:	42a5      	cmp	r5, r4
 8006026:	d001      	beq.n	800602c <_free_r+0x130>
 8006028:	4629      	mov	r1, r5
 800602a:	e00b      	b.n	8006044 <_free_r+0x148>
 800602c:	2201      	movs	r2, #1
 800602e:	1089      	asrs	r1, r1, #2
 8006030:	fa02 f101 	lsl.w	r1, r2, r1
 8006034:	6842      	ldr	r2, [r0, #4]
 8006036:	430a      	orrs	r2, r1
 8006038:	6042      	str	r2, [r0, #4]
 800603a:	4629      	mov	r1, r5
 800603c:	e008      	b.n	8006050 <_free_r+0x154>
 800603e:	6889      	ldr	r1, [r1, #8]
 8006040:	42a1      	cmp	r1, r4
 8006042:	d004      	beq.n	800604e <_free_r+0x152>
 8006044:	6848      	ldr	r0, [r1, #4]
 8006046:	f020 0003 	bic.w	r0, r0, #3
 800604a:	4282      	cmp	r2, r0
 800604c:	d3f7      	bcc.n	800603e <_free_r+0x142>
 800604e:	68cd      	ldr	r5, [r1, #12]
 8006050:	60dd      	str	r5, [r3, #12]
 8006052:	6099      	str	r1, [r3, #8]
 8006054:	60ab      	str	r3, [r5, #8]
 8006056:	60cb      	str	r3, [r1, #12]
 8006058:	e77f      	b.n	8005f5a <_free_r+0x5e>
 800605a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800605c:	20000130 	.word	0x20000130
 8006060:	20000538 	.word	0x20000538
 8006064:	20000570 	.word	0x20000570
 8006068:	20000138 	.word	0x20000138

0800606c <memmove>:
 800606c:	4281      	cmp	r1, r0
 800606e:	b570      	push	{r4, r5, r6, lr}
 8006070:	d301      	bcc.n	8006076 <memmove+0xa>
 8006072:	2300      	movs	r3, #0
 8006074:	e00e      	b.n	8006094 <memmove+0x28>
 8006076:	188c      	adds	r4, r1, r2
 8006078:	42a0      	cmp	r0, r4
 800607a:	d2fa      	bcs.n	8006072 <memmove+0x6>
 800607c:	1885      	adds	r5, r0, r2
 800607e:	4613      	mov	r3, r2
 8006080:	f113 33ff 	adds.w	r3, r3, #4294967295
 8006084:	d305      	bcc.n	8006092 <memmove+0x26>
 8006086:	4251      	negs	r1, r2
 8006088:	1866      	adds	r6, r4, r1
 800608a:	4429      	add	r1, r5
 800608c:	5cf6      	ldrb	r6, [r6, r3]
 800608e:	54ce      	strb	r6, [r1, r3]
 8006090:	e7f6      	b.n	8006080 <memmove+0x14>
 8006092:	bd70      	pop	{r4, r5, r6, pc}
 8006094:	4293      	cmp	r3, r2
 8006096:	d003      	beq.n	80060a0 <memmove+0x34>
 8006098:	5ccc      	ldrb	r4, [r1, r3]
 800609a:	54c4      	strb	r4, [r0, r3]
 800609c:	3301      	adds	r3, #1
 800609e:	e7f9      	b.n	8006094 <memmove+0x28>
 80060a0:	bd70      	pop	{r4, r5, r6, pc}

080060a2 <memset>:
 80060a2:	4402      	add	r2, r0
 80060a4:	4603      	mov	r3, r0
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d002      	beq.n	80060b0 <memset+0xe>
 80060aa:	f803 1b01 	strb.w	r1, [r3], #1
 80060ae:	e7fa      	b.n	80060a6 <memset+0x4>
 80060b0:	4770      	bx	lr
	...

080060b4 <_realloc_r>:
 80060b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060b8:	4681      	mov	r9, r0
 80060ba:	460c      	mov	r4, r1
 80060bc:	b929      	cbnz	r1, 80060ca <_realloc_r+0x16>
 80060be:	4611      	mov	r1, r2
 80060c0:	b003      	add	sp, #12
 80060c2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060c6:	f7ff b8bb 	b.w	8005240 <_malloc_r>
 80060ca:	9201      	str	r2, [sp, #4]
 80060cc:	f7ff fae2 	bl	8005694 <__malloc_lock>
 80060d0:	9a01      	ldr	r2, [sp, #4]
 80060d2:	f854 5c04 	ldr.w	r5, [r4, #-4]
 80060d6:	f102 070b 	add.w	r7, r2, #11
 80060da:	2f16      	cmp	r7, #22
 80060dc:	f1a4 0808 	sub.w	r8, r4, #8
 80060e0:	f025 0603 	bic.w	r6, r5, #3
 80060e4:	d903      	bls.n	80060ee <_realloc_r+0x3a>
 80060e6:	f037 0707 	bics.w	r7, r7, #7
 80060ea:	d501      	bpl.n	80060f0 <_realloc_r+0x3c>
 80060ec:	e002      	b.n	80060f4 <_realloc_r+0x40>
 80060ee:	2710      	movs	r7, #16
 80060f0:	4297      	cmp	r7, r2
 80060f2:	d204      	bcs.n	80060fe <_realloc_r+0x4a>
 80060f4:	230c      	movs	r3, #12
 80060f6:	f8c9 3000 	str.w	r3, [r9]
 80060fa:	2000      	movs	r0, #0
 80060fc:	e17e      	b.n	80063fc <_realloc_r+0x348>
 80060fe:	42be      	cmp	r6, r7
 8006100:	f280 8154 	bge.w	80063ac <_realloc_r+0x2f8>
 8006104:	49a2      	ldr	r1, [pc, #648]	; (8006390 <_realloc_r+0x2dc>)
 8006106:	f8d1 e008 	ldr.w	lr, [r1, #8]
 800610a:	eb08 0306 	add.w	r3, r8, r6
 800610e:	4573      	cmp	r3, lr
 8006110:	468b      	mov	fp, r1
 8006112:	6858      	ldr	r0, [r3, #4]
 8006114:	d005      	beq.n	8006122 <_realloc_r+0x6e>
 8006116:	f020 0101 	bic.w	r1, r0, #1
 800611a:	4419      	add	r1, r3
 800611c:	6849      	ldr	r1, [r1, #4]
 800611e:	07c9      	lsls	r1, r1, #31
 8006120:	d425      	bmi.n	800616e <_realloc_r+0xba>
 8006122:	f020 0003 	bic.w	r0, r0, #3
 8006126:	4573      	cmp	r3, lr
 8006128:	eb00 0106 	add.w	r1, r0, r6
 800612c:	d117      	bne.n	800615e <_realloc_r+0xaa>
 800612e:	f107 0c10 	add.w	ip, r7, #16
 8006132:	4561      	cmp	r1, ip
 8006134:	db1d      	blt.n	8006172 <_realloc_r+0xbe>
 8006136:	eb08 0507 	add.w	r5, r8, r7
 800613a:	1bc9      	subs	r1, r1, r7
 800613c:	f041 0101 	orr.w	r1, r1, #1
 8006140:	f8cb 5008 	str.w	r5, [fp, #8]
 8006144:	6069      	str	r1, [r5, #4]
 8006146:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800614a:	f003 0301 	and.w	r3, r3, #1
 800614e:	431f      	orrs	r7, r3
 8006150:	4648      	mov	r0, r9
 8006152:	f844 7c04 	str.w	r7, [r4, #-4]
 8006156:	f7ff fa9e 	bl	8005696 <__malloc_unlock>
 800615a:	4620      	mov	r0, r4
 800615c:	e14e      	b.n	80063fc <_realloc_r+0x348>
 800615e:	42b9      	cmp	r1, r7
 8006160:	db07      	blt.n	8006172 <_realloc_r+0xbe>
 8006162:	68da      	ldr	r2, [r3, #12]
 8006164:	689b      	ldr	r3, [r3, #8]
 8006166:	460e      	mov	r6, r1
 8006168:	60da      	str	r2, [r3, #12]
 800616a:	6093      	str	r3, [r2, #8]
 800616c:	e11e      	b.n	80063ac <_realloc_r+0x2f8>
 800616e:	2000      	movs	r0, #0
 8006170:	4603      	mov	r3, r0
 8006172:	07e9      	lsls	r1, r5, #31
 8006174:	f100 80c9 	bmi.w	800630a <_realloc_r+0x256>
 8006178:	f854 5c08 	ldr.w	r5, [r4, #-8]
 800617c:	ebc5 0508 	rsb	r5, r5, r8
 8006180:	6869      	ldr	r1, [r5, #4]
 8006182:	f021 0103 	bic.w	r1, r1, #3
 8006186:	eb01 0a06 	add.w	sl, r1, r6
 800618a:	2b00      	cmp	r3, #0
 800618c:	f000 8088 	beq.w	80062a0 <_realloc_r+0x1ec>
 8006190:	4573      	cmp	r3, lr
 8006192:	d14b      	bne.n	800622c <_realloc_r+0x178>
 8006194:	eb0a 0300 	add.w	r3, sl, r0
 8006198:	f107 0110 	add.w	r1, r7, #16
 800619c:	428b      	cmp	r3, r1
 800619e:	db7f      	blt.n	80062a0 <_realloc_r+0x1ec>
 80061a0:	46a8      	mov	r8, r5
 80061a2:	68ea      	ldr	r2, [r5, #12]
 80061a4:	f858 1f08 	ldr.w	r1, [r8, #8]!
 80061a8:	60ca      	str	r2, [r1, #12]
 80061aa:	6091      	str	r1, [r2, #8]
 80061ac:	1f32      	subs	r2, r6, #4
 80061ae:	2a24      	cmp	r2, #36	; 0x24
 80061b0:	d825      	bhi.n	80061fe <_realloc_r+0x14a>
 80061b2:	2a13      	cmp	r2, #19
 80061b4:	d91b      	bls.n	80061ee <_realloc_r+0x13a>
 80061b6:	6821      	ldr	r1, [r4, #0]
 80061b8:	60a9      	str	r1, [r5, #8]
 80061ba:	6861      	ldr	r1, [r4, #4]
 80061bc:	60e9      	str	r1, [r5, #12]
 80061be:	2a1b      	cmp	r2, #27
 80061c0:	d803      	bhi.n	80061ca <_realloc_r+0x116>
 80061c2:	f105 0210 	add.w	r2, r5, #16
 80061c6:	3408      	adds	r4, #8
 80061c8:	e012      	b.n	80061f0 <_realloc_r+0x13c>
 80061ca:	68a1      	ldr	r1, [r4, #8]
 80061cc:	6129      	str	r1, [r5, #16]
 80061ce:	68e1      	ldr	r1, [r4, #12]
 80061d0:	6169      	str	r1, [r5, #20]
 80061d2:	2a24      	cmp	r2, #36	; 0x24
 80061d4:	d003      	beq.n	80061de <_realloc_r+0x12a>
 80061d6:	f105 0218 	add.w	r2, r5, #24
 80061da:	3410      	adds	r4, #16
 80061dc:	e008      	b.n	80061f0 <_realloc_r+0x13c>
 80061de:	6922      	ldr	r2, [r4, #16]
 80061e0:	61aa      	str	r2, [r5, #24]
 80061e2:	6961      	ldr	r1, [r4, #20]
 80061e4:	61e9      	str	r1, [r5, #28]
 80061e6:	f105 0220 	add.w	r2, r5, #32
 80061ea:	3418      	adds	r4, #24
 80061ec:	e000      	b.n	80061f0 <_realloc_r+0x13c>
 80061ee:	4642      	mov	r2, r8
 80061f0:	6821      	ldr	r1, [r4, #0]
 80061f2:	6011      	str	r1, [r2, #0]
 80061f4:	6861      	ldr	r1, [r4, #4]
 80061f6:	6051      	str	r1, [r2, #4]
 80061f8:	68a1      	ldr	r1, [r4, #8]
 80061fa:	6091      	str	r1, [r2, #8]
 80061fc:	e005      	b.n	800620a <_realloc_r+0x156>
 80061fe:	4640      	mov	r0, r8
 8006200:	4621      	mov	r1, r4
 8006202:	9301      	str	r3, [sp, #4]
 8006204:	f7ff ff32 	bl	800606c <memmove>
 8006208:	9b01      	ldr	r3, [sp, #4]
 800620a:	19ea      	adds	r2, r5, r7
 800620c:	1bdb      	subs	r3, r3, r7
 800620e:	f043 0301 	orr.w	r3, r3, #1
 8006212:	f8cb 2008 	str.w	r2, [fp, #8]
 8006216:	6053      	str	r3, [r2, #4]
 8006218:	686b      	ldr	r3, [r5, #4]
 800621a:	f003 0301 	and.w	r3, r3, #1
 800621e:	431f      	orrs	r7, r3
 8006220:	4648      	mov	r0, r9
 8006222:	606f      	str	r7, [r5, #4]
 8006224:	f7ff fa37 	bl	8005696 <__malloc_unlock>
 8006228:	4640      	mov	r0, r8
 800622a:	e0e7      	b.n	80063fc <_realloc_r+0x348>
 800622c:	eb0a 0b00 	add.w	fp, sl, r0
 8006230:	45bb      	cmp	fp, r7
 8006232:	db35      	blt.n	80062a0 <_realloc_r+0x1ec>
 8006234:	68da      	ldr	r2, [r3, #12]
 8006236:	689b      	ldr	r3, [r3, #8]
 8006238:	4628      	mov	r0, r5
 800623a:	60da      	str	r2, [r3, #12]
 800623c:	6093      	str	r3, [r2, #8]
 800623e:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8006242:	68eb      	ldr	r3, [r5, #12]
 8006244:	60d3      	str	r3, [r2, #12]
 8006246:	609a      	str	r2, [r3, #8]
 8006248:	1f32      	subs	r2, r6, #4
 800624a:	2a24      	cmp	r2, #36	; 0x24
 800624c:	d823      	bhi.n	8006296 <_realloc_r+0x1e2>
 800624e:	2a13      	cmp	r2, #19
 8006250:	d91a      	bls.n	8006288 <_realloc_r+0x1d4>
 8006252:	6823      	ldr	r3, [r4, #0]
 8006254:	60ab      	str	r3, [r5, #8]
 8006256:	6863      	ldr	r3, [r4, #4]
 8006258:	60eb      	str	r3, [r5, #12]
 800625a:	2a1b      	cmp	r2, #27
 800625c:	d803      	bhi.n	8006266 <_realloc_r+0x1b2>
 800625e:	f105 0010 	add.w	r0, r5, #16
 8006262:	3408      	adds	r4, #8
 8006264:	e010      	b.n	8006288 <_realloc_r+0x1d4>
 8006266:	68a3      	ldr	r3, [r4, #8]
 8006268:	612b      	str	r3, [r5, #16]
 800626a:	68e3      	ldr	r3, [r4, #12]
 800626c:	616b      	str	r3, [r5, #20]
 800626e:	2a24      	cmp	r2, #36	; 0x24
 8006270:	d003      	beq.n	800627a <_realloc_r+0x1c6>
 8006272:	f105 0018 	add.w	r0, r5, #24
 8006276:	3410      	adds	r4, #16
 8006278:	e006      	b.n	8006288 <_realloc_r+0x1d4>
 800627a:	6923      	ldr	r3, [r4, #16]
 800627c:	61ab      	str	r3, [r5, #24]
 800627e:	6963      	ldr	r3, [r4, #20]
 8006280:	61eb      	str	r3, [r5, #28]
 8006282:	f105 0020 	add.w	r0, r5, #32
 8006286:	3418      	adds	r4, #24
 8006288:	6823      	ldr	r3, [r4, #0]
 800628a:	6003      	str	r3, [r0, #0]
 800628c:	6863      	ldr	r3, [r4, #4]
 800628e:	6043      	str	r3, [r0, #4]
 8006290:	68a3      	ldr	r3, [r4, #8]
 8006292:	6083      	str	r3, [r0, #8]
 8006294:	e002      	b.n	800629c <_realloc_r+0x1e8>
 8006296:	4621      	mov	r1, r4
 8006298:	f7ff fee8 	bl	800606c <memmove>
 800629c:	465e      	mov	r6, fp
 800629e:	e02e      	b.n	80062fe <_realloc_r+0x24a>
 80062a0:	45ba      	cmp	sl, r7
 80062a2:	db32      	blt.n	800630a <_realloc_r+0x256>
 80062a4:	4628      	mov	r0, r5
 80062a6:	68eb      	ldr	r3, [r5, #12]
 80062a8:	f850 2f08 	ldr.w	r2, [r0, #8]!
 80062ac:	60d3      	str	r3, [r2, #12]
 80062ae:	609a      	str	r2, [r3, #8]
 80062b0:	1f32      	subs	r2, r6, #4
 80062b2:	2a24      	cmp	r2, #36	; 0x24
 80062b4:	d825      	bhi.n	8006302 <_realloc_r+0x24e>
 80062b6:	2a13      	cmp	r2, #19
 80062b8:	d91a      	bls.n	80062f0 <_realloc_r+0x23c>
 80062ba:	6823      	ldr	r3, [r4, #0]
 80062bc:	60ab      	str	r3, [r5, #8]
 80062be:	6863      	ldr	r3, [r4, #4]
 80062c0:	60eb      	str	r3, [r5, #12]
 80062c2:	2a1b      	cmp	r2, #27
 80062c4:	d803      	bhi.n	80062ce <_realloc_r+0x21a>
 80062c6:	f105 0010 	add.w	r0, r5, #16
 80062ca:	3408      	adds	r4, #8
 80062cc:	e010      	b.n	80062f0 <_realloc_r+0x23c>
 80062ce:	68a3      	ldr	r3, [r4, #8]
 80062d0:	612b      	str	r3, [r5, #16]
 80062d2:	68e3      	ldr	r3, [r4, #12]
 80062d4:	616b      	str	r3, [r5, #20]
 80062d6:	2a24      	cmp	r2, #36	; 0x24
 80062d8:	d003      	beq.n	80062e2 <_realloc_r+0x22e>
 80062da:	f105 0018 	add.w	r0, r5, #24
 80062de:	3410      	adds	r4, #16
 80062e0:	e006      	b.n	80062f0 <_realloc_r+0x23c>
 80062e2:	6923      	ldr	r3, [r4, #16]
 80062e4:	61ab      	str	r3, [r5, #24]
 80062e6:	6963      	ldr	r3, [r4, #20]
 80062e8:	61eb      	str	r3, [r5, #28]
 80062ea:	f105 0020 	add.w	r0, r5, #32
 80062ee:	3418      	adds	r4, #24
 80062f0:	6823      	ldr	r3, [r4, #0]
 80062f2:	6003      	str	r3, [r0, #0]
 80062f4:	6863      	ldr	r3, [r4, #4]
 80062f6:	6043      	str	r3, [r0, #4]
 80062f8:	68a3      	ldr	r3, [r4, #8]
 80062fa:	6083      	str	r3, [r0, #8]
 80062fc:	4656      	mov	r6, sl
 80062fe:	46a8      	mov	r8, r5
 8006300:	e054      	b.n	80063ac <_realloc_r+0x2f8>
 8006302:	4621      	mov	r1, r4
 8006304:	f7ff feb2 	bl	800606c <memmove>
 8006308:	e7f8      	b.n	80062fc <_realloc_r+0x248>
 800630a:	4648      	mov	r0, r9
 800630c:	4611      	mov	r1, r2
 800630e:	f7fe ff97 	bl	8005240 <_malloc_r>
 8006312:	4605      	mov	r5, r0
 8006314:	2800      	cmp	r0, #0
 8006316:	d044      	beq.n	80063a2 <_realloc_r+0x2ee>
 8006318:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800631c:	f023 0301 	bic.w	r3, r3, #1
 8006320:	f1a0 0208 	sub.w	r2, r0, #8
 8006324:	4443      	add	r3, r8
 8006326:	429a      	cmp	r2, r3
 8006328:	d105      	bne.n	8006336 <_realloc_r+0x282>
 800632a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800632e:	f023 0303 	bic.w	r3, r3, #3
 8006332:	441e      	add	r6, r3
 8006334:	e03a      	b.n	80063ac <_realloc_r+0x2f8>
 8006336:	1f32      	subs	r2, r6, #4
 8006338:	2a24      	cmp	r2, #36	; 0x24
 800633a:	d82b      	bhi.n	8006394 <_realloc_r+0x2e0>
 800633c:	2a13      	cmp	r2, #19
 800633e:	d91e      	bls.n	800637e <_realloc_r+0x2ca>
 8006340:	6823      	ldr	r3, [r4, #0]
 8006342:	6003      	str	r3, [r0, #0]
 8006344:	6863      	ldr	r3, [r4, #4]
 8006346:	6043      	str	r3, [r0, #4]
 8006348:	2a1b      	cmp	r2, #27
 800634a:	d804      	bhi.n	8006356 <_realloc_r+0x2a2>
 800634c:	f100 0308 	add.w	r3, r0, #8
 8006350:	f104 0208 	add.w	r2, r4, #8
 8006354:	e015      	b.n	8006382 <_realloc_r+0x2ce>
 8006356:	68a3      	ldr	r3, [r4, #8]
 8006358:	6083      	str	r3, [r0, #8]
 800635a:	68e3      	ldr	r3, [r4, #12]
 800635c:	60c3      	str	r3, [r0, #12]
 800635e:	2a24      	cmp	r2, #36	; 0x24
 8006360:	d004      	beq.n	800636c <_realloc_r+0x2b8>
 8006362:	f100 0310 	add.w	r3, r0, #16
 8006366:	f104 0210 	add.w	r2, r4, #16
 800636a:	e00a      	b.n	8006382 <_realloc_r+0x2ce>
 800636c:	6923      	ldr	r3, [r4, #16]
 800636e:	6103      	str	r3, [r0, #16]
 8006370:	6961      	ldr	r1, [r4, #20]
 8006372:	6141      	str	r1, [r0, #20]
 8006374:	f100 0318 	add.w	r3, r0, #24
 8006378:	f104 0218 	add.w	r2, r4, #24
 800637c:	e001      	b.n	8006382 <_realloc_r+0x2ce>
 800637e:	4603      	mov	r3, r0
 8006380:	4622      	mov	r2, r4
 8006382:	6811      	ldr	r1, [r2, #0]
 8006384:	6019      	str	r1, [r3, #0]
 8006386:	6851      	ldr	r1, [r2, #4]
 8006388:	6059      	str	r1, [r3, #4]
 800638a:	6892      	ldr	r2, [r2, #8]
 800638c:	609a      	str	r2, [r3, #8]
 800638e:	e004      	b.n	800639a <_realloc_r+0x2e6>
 8006390:	20000130 	.word	0x20000130
 8006394:	4621      	mov	r1, r4
 8006396:	f7ff fe69 	bl	800606c <memmove>
 800639a:	4648      	mov	r0, r9
 800639c:	4621      	mov	r1, r4
 800639e:	f7ff fdad 	bl	8005efc <_free_r>
 80063a2:	4648      	mov	r0, r9
 80063a4:	f7ff f977 	bl	8005696 <__malloc_unlock>
 80063a8:	4628      	mov	r0, r5
 80063aa:	e027      	b.n	80063fc <_realloc_r+0x348>
 80063ac:	1bf3      	subs	r3, r6, r7
 80063ae:	2b0f      	cmp	r3, #15
 80063b0:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80063b4:	d913      	bls.n	80063de <_realloc_r+0x32a>
 80063b6:	eb08 0107 	add.w	r1, r8, r7
 80063ba:	f002 0201 	and.w	r2, r2, #1
 80063be:	4317      	orrs	r7, r2
 80063c0:	f043 0201 	orr.w	r2, r3, #1
 80063c4:	440b      	add	r3, r1
 80063c6:	f8c8 7004 	str.w	r7, [r8, #4]
 80063ca:	604a      	str	r2, [r1, #4]
 80063cc:	685a      	ldr	r2, [r3, #4]
 80063ce:	f042 0201 	orr.w	r2, r2, #1
 80063d2:	605a      	str	r2, [r3, #4]
 80063d4:	4648      	mov	r0, r9
 80063d6:	3108      	adds	r1, #8
 80063d8:	f7ff fd90 	bl	8005efc <_free_r>
 80063dc:	e009      	b.n	80063f2 <_realloc_r+0x33e>
 80063de:	f002 0201 	and.w	r2, r2, #1
 80063e2:	4332      	orrs	r2, r6
 80063e4:	4446      	add	r6, r8
 80063e6:	f8c8 2004 	str.w	r2, [r8, #4]
 80063ea:	6873      	ldr	r3, [r6, #4]
 80063ec:	f043 0301 	orr.w	r3, r3, #1
 80063f0:	6073      	str	r3, [r6, #4]
 80063f2:	4648      	mov	r0, r9
 80063f4:	f7ff f94f 	bl	8005696 <__malloc_unlock>
 80063f8:	f108 0008 	add.w	r0, r8, #8
 80063fc:	b003      	add	sp, #12
 80063fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006402:	bf00      	nop
 8006404:	0000      	movs	r0, r0
	...

08006408 <cos>:
 8006408:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800640a:	ec51 0b10 	vmov	r0, r1, d0
 800640e:	4a1e      	ldr	r2, [pc, #120]	; (8006488 <cos+0x80>)
 8006410:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006414:	4293      	cmp	r3, r2
 8006416:	dc02      	bgt.n	800641e <cos+0x16>
 8006418:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8006480 <cos+0x78>
 800641c:	e016      	b.n	800644c <cos+0x44>
 800641e:	4a1b      	ldr	r2, [pc, #108]	; (800648c <cos+0x84>)
 8006420:	4293      	cmp	r3, r2
 8006422:	dd05      	ble.n	8006430 <cos+0x28>
 8006424:	ee10 2a10 	vmov	r2, s0
 8006428:	460b      	mov	r3, r1
 800642a:	f7f9 fef1 	bl	8000210 <__aeabi_dsub>
 800642e:	e021      	b.n	8006474 <cos+0x6c>
 8006430:	4668      	mov	r0, sp
 8006432:	f000 fa71 	bl	8006918 <__ieee754_rem_pio2>
 8006436:	f000 0003 	and.w	r0, r0, #3
 800643a:	2801      	cmp	r0, #1
 800643c:	ed9d 0b00 	vldr	d0, [sp]
 8006440:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006444:	d005      	beq.n	8006452 <cos+0x4a>
 8006446:	2802      	cmp	r0, #2
 8006448:	d006      	beq.n	8006458 <cos+0x50>
 800644a:	b970      	cbnz	r0, 800646a <cos+0x62>
 800644c:	f000 fc68 	bl	8006d20 <__kernel_cos>
 8006450:	e00e      	b.n	8006470 <cos+0x68>
 8006452:	f001 f8b1 	bl	80075b8 <__kernel_sin>
 8006456:	e001      	b.n	800645c <cos+0x54>
 8006458:	f000 fc62 	bl	8006d20 <__kernel_cos>
 800645c:	ec53 2b10 	vmov	r2, r3, d0
 8006460:	ee10 0a10 	vmov	r0, s0
 8006464:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006468:	e004      	b.n	8006474 <cos+0x6c>
 800646a:	2001      	movs	r0, #1
 800646c:	f001 f8a4 	bl	80075b8 <__kernel_sin>
 8006470:	ec51 0b10 	vmov	r0, r1, d0
 8006474:	ec41 0b10 	vmov	d0, r0, r1
 8006478:	b005      	add	sp, #20
 800647a:	f85d fb04 	ldr.w	pc, [sp], #4
 800647e:	bf00      	nop
	...
 8006488:	3fe921fb 	.word	0x3fe921fb
 800648c:	7fefffff 	.word	0x7fefffff

08006490 <sin>:
 8006490:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006492:	ec51 0b10 	vmov	r0, r1, d0
 8006496:	4a20      	ldr	r2, [pc, #128]	; (8006518 <sin+0x88>)
 8006498:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800649c:	4293      	cmp	r3, r2
 800649e:	dc03      	bgt.n	80064a8 <sin+0x18>
 80064a0:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8006510 <sin+0x80>
 80064a4:	2000      	movs	r0, #0
 80064a6:	e017      	b.n	80064d8 <sin+0x48>
 80064a8:	4a1c      	ldr	r2, [pc, #112]	; (800651c <sin+0x8c>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	dd05      	ble.n	80064ba <sin+0x2a>
 80064ae:	ee10 2a10 	vmov	r2, s0
 80064b2:	460b      	mov	r3, r1
 80064b4:	f7f9 feac 	bl	8000210 <__aeabi_dsub>
 80064b8:	e022      	b.n	8006500 <sin+0x70>
 80064ba:	4668      	mov	r0, sp
 80064bc:	f000 fa2c 	bl	8006918 <__ieee754_rem_pio2>
 80064c0:	f000 0003 	and.w	r0, r0, #3
 80064c4:	2801      	cmp	r0, #1
 80064c6:	ed9d 0b00 	vldr	d0, [sp]
 80064ca:	ed9d 1b02 	vldr	d1, [sp, #8]
 80064ce:	d008      	beq.n	80064e2 <sin+0x52>
 80064d0:	2802      	cmp	r0, #2
 80064d2:	d009      	beq.n	80064e8 <sin+0x58>
 80064d4:	b960      	cbnz	r0, 80064f0 <sin+0x60>
 80064d6:	2001      	movs	r0, #1
 80064d8:	f001 f86e 	bl	80075b8 <__kernel_sin>
 80064dc:	ec51 0b10 	vmov	r0, r1, d0
 80064e0:	e00e      	b.n	8006500 <sin+0x70>
 80064e2:	f000 fc1d 	bl	8006d20 <__kernel_cos>
 80064e6:	e7f9      	b.n	80064dc <sin+0x4c>
 80064e8:	2001      	movs	r0, #1
 80064ea:	f001 f865 	bl	80075b8 <__kernel_sin>
 80064ee:	e001      	b.n	80064f4 <sin+0x64>
 80064f0:	f000 fc16 	bl	8006d20 <__kernel_cos>
 80064f4:	ec53 2b10 	vmov	r2, r3, d0
 80064f8:	ee10 0a10 	vmov	r0, s0
 80064fc:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006500:	ec41 0b10 	vmov	d0, r0, r1
 8006504:	b005      	add	sp, #20
 8006506:	f85d fb04 	ldr.w	pc, [sp], #4
 800650a:	bf00      	nop
 800650c:	f3af 8000 	nop.w
	...
 8006518:	3fe921fb 	.word	0x3fe921fb
 800651c:	7fefffff 	.word	0x7fefffff

08006520 <exp>:
 8006520:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006522:	ed2d 8b02 	vpush	{d8}
 8006526:	4e38      	ldr	r6, [pc, #224]	; (8006608 <exp+0xe8>)
 8006528:	b08b      	sub	sp, #44	; 0x2c
 800652a:	ec55 4b10 	vmov	r4, r5, d0
 800652e:	f000 f873 	bl	8006618 <__ieee754_exp>
 8006532:	f996 3000 	ldrsb.w	r3, [r6]
 8006536:	eeb0 8a40 	vmov.f32	s16, s0
 800653a:	eef0 8a60 	vmov.f32	s17, s1
 800653e:	3301      	adds	r3, #1
 8006540:	d050      	beq.n	80065e4 <exp+0xc4>
 8006542:	ec45 4b10 	vmov	d0, r4, r5
 8006546:	f001 f904 	bl	8007752 <finite>
 800654a:	2800      	cmp	r0, #0
 800654c:	d04a      	beq.n	80065e4 <exp+0xc4>
 800654e:	4620      	mov	r0, r4
 8006550:	4629      	mov	r1, r5
 8006552:	a329      	add	r3, pc, #164	; (adr r3, 80065f8 <exp+0xd8>)
 8006554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006558:	f7fa fa9e 	bl	8000a98 <__aeabi_dcmpgt>
 800655c:	4607      	mov	r7, r0
 800655e:	b1b8      	cbz	r0, 8006590 <exp+0x70>
 8006560:	2303      	movs	r3, #3
 8006562:	9300      	str	r3, [sp, #0]
 8006564:	7831      	ldrb	r1, [r6, #0]
 8006566:	4b29      	ldr	r3, [pc, #164]	; (800660c <exp+0xec>)
 8006568:	9301      	str	r3, [sp, #4]
 800656a:	2300      	movs	r3, #0
 800656c:	9308      	str	r3, [sp, #32]
 800656e:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8006572:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8006576:	b929      	cbnz	r1, 8006584 <exp+0x64>
 8006578:	4b25      	ldr	r3, [pc, #148]	; (8006610 <exp+0xf0>)
 800657a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800657e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006582:	e01e      	b.n	80065c2 <exp+0xa2>
 8006584:	4b23      	ldr	r3, [pc, #140]	; (8006614 <exp+0xf4>)
 8006586:	2200      	movs	r2, #0
 8006588:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800658c:	2902      	cmp	r1, #2
 800658e:	e017      	b.n	80065c0 <exp+0xa0>
 8006590:	4620      	mov	r0, r4
 8006592:	4629      	mov	r1, r5
 8006594:	a31a      	add	r3, pc, #104	; (adr r3, 8006600 <exp+0xe0>)
 8006596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800659a:	f7fa fa5f 	bl	8000a5c <__aeabi_dcmplt>
 800659e:	b308      	cbz	r0, 80065e4 <exp+0xc4>
 80065a0:	2304      	movs	r3, #4
 80065a2:	9300      	str	r3, [sp, #0]
 80065a4:	4b19      	ldr	r3, [pc, #100]	; (800660c <exp+0xec>)
 80065a6:	9301      	str	r3, [sp, #4]
 80065a8:	2200      	movs	r2, #0
 80065aa:	2300      	movs	r3, #0
 80065ac:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80065b0:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80065b4:	f996 3000 	ldrsb.w	r3, [r6]
 80065b8:	9708      	str	r7, [sp, #32]
 80065ba:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80065be:	2b02      	cmp	r3, #2
 80065c0:	d003      	beq.n	80065ca <exp+0xaa>
 80065c2:	4668      	mov	r0, sp
 80065c4:	f001 f958 	bl	8007878 <matherr>
 80065c8:	b918      	cbnz	r0, 80065d2 <exp+0xb2>
 80065ca:	f001 f9e1 	bl	8007990 <__errno>
 80065ce:	2322      	movs	r3, #34	; 0x22
 80065d0:	6003      	str	r3, [r0, #0]
 80065d2:	9b08      	ldr	r3, [sp, #32]
 80065d4:	b11b      	cbz	r3, 80065de <exp+0xbe>
 80065d6:	f001 f9db 	bl	8007990 <__errno>
 80065da:	9b08      	ldr	r3, [sp, #32]
 80065dc:	6003      	str	r3, [r0, #0]
 80065de:	ed9d 0b06 	vldr	d0, [sp, #24]
 80065e2:	e003      	b.n	80065ec <exp+0xcc>
 80065e4:	eeb0 0a48 	vmov.f32	s0, s16
 80065e8:	eef0 0a68 	vmov.f32	s1, s17
 80065ec:	b00b      	add	sp, #44	; 0x2c
 80065ee:	ecbd 8b02 	vpop	{d8}
 80065f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065f4:	f3af 8000 	nop.w
 80065f8:	fefa39ef 	.word	0xfefa39ef
 80065fc:	40862e42 	.word	0x40862e42
 8006600:	d52d3051 	.word	0xd52d3051
 8006604:	c0874910 	.word	0xc0874910
 8006608:	20000540 	.word	0x20000540
 800660c:	08007b54 	.word	0x08007b54
 8006610:	47efffff 	.word	0x47efffff
 8006614:	7ff00000 	.word	0x7ff00000

08006618 <__ieee754_exp>:
 8006618:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800661c:	ec55 4b10 	vmov	r4, r5, d0
 8006620:	48af      	ldr	r0, [pc, #700]	; (80068e0 <__ieee754_exp+0x2c8>)
 8006622:	f025 4100 	bic.w	r1, r5, #2147483648	; 0x80000000
 8006626:	4281      	cmp	r1, r0
 8006628:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 800662c:	d927      	bls.n	800667e <__ieee754_exp+0x66>
 800662e:	48ad      	ldr	r0, [pc, #692]	; (80068e4 <__ieee754_exp+0x2cc>)
 8006630:	4281      	cmp	r1, r0
 8006632:	ee10 0a10 	vmov	r0, s0
 8006636:	4629      	mov	r1, r5
 8006638:	d90c      	bls.n	8006654 <__ieee754_exp+0x3c>
 800663a:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800663e:	4323      	orrs	r3, r4
 8006640:	d002      	beq.n	8006648 <__ieee754_exp+0x30>
 8006642:	4622      	mov	r2, r4
 8006644:	462b      	mov	r3, r5
 8006646:	e07f      	b.n	8006748 <__ieee754_exp+0x130>
 8006648:	2e00      	cmp	r6, #0
 800664a:	f000 815b 	beq.w	8006904 <__ieee754_exp+0x2ec>
 800664e:	2000      	movs	r0, #0
 8006650:	2100      	movs	r1, #0
 8006652:	e15a      	b.n	800690a <__ieee754_exp+0x2f2>
 8006654:	a38c      	add	r3, pc, #560	; (adr r3, 8006888 <__ieee754_exp+0x270>)
 8006656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800665a:	f7fa fa1d 	bl	8000a98 <__aeabi_dcmpgt>
 800665e:	b128      	cbz	r0, 800666c <__ieee754_exp+0x54>
 8006660:	a18b      	add	r1, pc, #556	; (adr r1, 8006890 <__ieee754_exp+0x278>)
 8006662:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006666:	4602      	mov	r2, r0
 8006668:	460b      	mov	r3, r1
 800666a:	e107      	b.n	800687c <__ieee754_exp+0x264>
 800666c:	4620      	mov	r0, r4
 800666e:	4629      	mov	r1, r5
 8006670:	a389      	add	r3, pc, #548	; (adr r3, 8006898 <__ieee754_exp+0x280>)
 8006672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006676:	f7fa f9f1 	bl	8000a5c <__aeabi_dcmplt>
 800667a:	b1e8      	cbz	r0, 80066b8 <__ieee754_exp+0xa0>
 800667c:	e7e7      	b.n	800664e <__ieee754_exp+0x36>
 800667e:	4b9a      	ldr	r3, [pc, #616]	; (80068e8 <__ieee754_exp+0x2d0>)
 8006680:	4299      	cmp	r1, r3
 8006682:	d94d      	bls.n	8006720 <__ieee754_exp+0x108>
 8006684:	4b99      	ldr	r3, [pc, #612]	; (80068ec <__ieee754_exp+0x2d4>)
 8006686:	4299      	cmp	r1, r3
 8006688:	d816      	bhi.n	80066b8 <__ieee754_exp+0xa0>
 800668a:	4b99      	ldr	r3, [pc, #612]	; (80068f0 <__ieee754_exp+0x2d8>)
 800668c:	00f7      	lsls	r7, r6, #3
 800668e:	443b      	add	r3, r7
 8006690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006694:	ee10 0a10 	vmov	r0, s0
 8006698:	4629      	mov	r1, r5
 800669a:	f7f9 fdb9 	bl	8000210 <__aeabi_dsub>
 800669e:	4b95      	ldr	r3, [pc, #596]	; (80068f4 <__ieee754_exp+0x2dc>)
 80066a0:	441f      	add	r7, r3
 80066a2:	ed97 7b00 	vldr	d7, [r7]
 80066a6:	f1c6 0801 	rsb	r8, r6, #1
 80066aa:	4682      	mov	sl, r0
 80066ac:	468b      	mov	fp, r1
 80066ae:	ed8d 7b00 	vstr	d7, [sp]
 80066b2:	ebc6 0808 	rsb	r8, r6, r8
 80066b6:	e02a      	b.n	800670e <__ieee754_exp+0xf6>
 80066b8:	a379      	add	r3, pc, #484	; (adr r3, 80068a0 <__ieee754_exp+0x288>)
 80066ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066be:	4620      	mov	r0, r4
 80066c0:	4629      	mov	r1, r5
 80066c2:	f7f9 ff59 	bl	8000578 <__aeabi_dmul>
 80066c6:	4b8c      	ldr	r3, [pc, #560]	; (80068f8 <__ieee754_exp+0x2e0>)
 80066c8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80066cc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80066d0:	f7f9 fda0 	bl	8000214 <__adddf3>
 80066d4:	f7fa f9ea 	bl	8000aac <__aeabi_d2iz>
 80066d8:	4680      	mov	r8, r0
 80066da:	f7f9 fee7 	bl	80004ac <__aeabi_i2d>
 80066de:	a372      	add	r3, pc, #456	; (adr r3, 80068a8 <__ieee754_exp+0x290>)
 80066e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066e4:	4606      	mov	r6, r0
 80066e6:	460f      	mov	r7, r1
 80066e8:	f7f9 ff46 	bl	8000578 <__aeabi_dmul>
 80066ec:	4602      	mov	r2, r0
 80066ee:	460b      	mov	r3, r1
 80066f0:	4620      	mov	r0, r4
 80066f2:	4629      	mov	r1, r5
 80066f4:	f7f9 fd8c 	bl	8000210 <__aeabi_dsub>
 80066f8:	a36d      	add	r3, pc, #436	; (adr r3, 80068b0 <__ieee754_exp+0x298>)
 80066fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066fe:	4682      	mov	sl, r0
 8006700:	468b      	mov	fp, r1
 8006702:	4630      	mov	r0, r6
 8006704:	4639      	mov	r1, r7
 8006706:	f7f9 ff37 	bl	8000578 <__aeabi_dmul>
 800670a:	e9cd 0100 	strd	r0, r1, [sp]
 800670e:	4650      	mov	r0, sl
 8006710:	4659      	mov	r1, fp
 8006712:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006716:	f7f9 fd7b 	bl	8000210 <__aeabi_dsub>
 800671a:	4604      	mov	r4, r0
 800671c:	460d      	mov	r5, r1
 800671e:	e01a      	b.n	8006756 <__ieee754_exp+0x13e>
 8006720:	4b76      	ldr	r3, [pc, #472]	; (80068fc <__ieee754_exp+0x2e4>)
 8006722:	4299      	cmp	r1, r3
 8006724:	d813      	bhi.n	800674e <__ieee754_exp+0x136>
 8006726:	a35a      	add	r3, pc, #360	; (adr r3, 8006890 <__ieee754_exp+0x278>)
 8006728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800672c:	ee10 0a10 	vmov	r0, s0
 8006730:	4629      	mov	r1, r5
 8006732:	f7f9 fd6f 	bl	8000214 <__adddf3>
 8006736:	2200      	movs	r2, #0
 8006738:	4b71      	ldr	r3, [pc, #452]	; (8006900 <__ieee754_exp+0x2e8>)
 800673a:	f7fa f9ad 	bl	8000a98 <__aeabi_dcmpgt>
 800673e:	b148      	cbz	r0, 8006754 <__ieee754_exp+0x13c>
 8006740:	4b6f      	ldr	r3, [pc, #444]	; (8006900 <__ieee754_exp+0x2e8>)
 8006742:	4620      	mov	r0, r4
 8006744:	4629      	mov	r1, r5
 8006746:	2200      	movs	r2, #0
 8006748:	f7f9 fd64 	bl	8000214 <__adddf3>
 800674c:	e0dd      	b.n	800690a <__ieee754_exp+0x2f2>
 800674e:	f04f 0800 	mov.w	r8, #0
 8006752:	e000      	b.n	8006756 <__ieee754_exp+0x13e>
 8006754:	4680      	mov	r8, r0
 8006756:	4622      	mov	r2, r4
 8006758:	462b      	mov	r3, r5
 800675a:	4620      	mov	r0, r4
 800675c:	4629      	mov	r1, r5
 800675e:	f7f9 ff0b 	bl	8000578 <__aeabi_dmul>
 8006762:	a355      	add	r3, pc, #340	; (adr r3, 80068b8 <__ieee754_exp+0x2a0>)
 8006764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006768:	4606      	mov	r6, r0
 800676a:	460f      	mov	r7, r1
 800676c:	f7f9 ff04 	bl	8000578 <__aeabi_dmul>
 8006770:	a353      	add	r3, pc, #332	; (adr r3, 80068c0 <__ieee754_exp+0x2a8>)
 8006772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006776:	f7f9 fd4b 	bl	8000210 <__aeabi_dsub>
 800677a:	4602      	mov	r2, r0
 800677c:	460b      	mov	r3, r1
 800677e:	4630      	mov	r0, r6
 8006780:	4639      	mov	r1, r7
 8006782:	f7f9 fef9 	bl	8000578 <__aeabi_dmul>
 8006786:	a350      	add	r3, pc, #320	; (adr r3, 80068c8 <__ieee754_exp+0x2b0>)
 8006788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800678c:	f7f9 fd42 	bl	8000214 <__adddf3>
 8006790:	4602      	mov	r2, r0
 8006792:	460b      	mov	r3, r1
 8006794:	4630      	mov	r0, r6
 8006796:	4639      	mov	r1, r7
 8006798:	f7f9 feee 	bl	8000578 <__aeabi_dmul>
 800679c:	a34c      	add	r3, pc, #304	; (adr r3, 80068d0 <__ieee754_exp+0x2b8>)
 800679e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067a2:	f7f9 fd35 	bl	8000210 <__aeabi_dsub>
 80067a6:	4602      	mov	r2, r0
 80067a8:	460b      	mov	r3, r1
 80067aa:	4630      	mov	r0, r6
 80067ac:	4639      	mov	r1, r7
 80067ae:	f7f9 fee3 	bl	8000578 <__aeabi_dmul>
 80067b2:	a349      	add	r3, pc, #292	; (adr r3, 80068d8 <__ieee754_exp+0x2c0>)
 80067b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067b8:	f7f9 fd2c 	bl	8000214 <__adddf3>
 80067bc:	4602      	mov	r2, r0
 80067be:	460b      	mov	r3, r1
 80067c0:	4630      	mov	r0, r6
 80067c2:	4639      	mov	r1, r7
 80067c4:	f7f9 fed8 	bl	8000578 <__aeabi_dmul>
 80067c8:	4602      	mov	r2, r0
 80067ca:	460b      	mov	r3, r1
 80067cc:	4620      	mov	r0, r4
 80067ce:	4629      	mov	r1, r5
 80067d0:	f7f9 fd1e 	bl	8000210 <__aeabi_dsub>
 80067d4:	4606      	mov	r6, r0
 80067d6:	460f      	mov	r7, r1
 80067d8:	4620      	mov	r0, r4
 80067da:	4629      	mov	r1, r5
 80067dc:	4632      	mov	r2, r6
 80067de:	463b      	mov	r3, r7
 80067e0:	f1b8 0f00 	cmp.w	r8, #0
 80067e4:	d11b      	bne.n	800681e <__ieee754_exp+0x206>
 80067e6:	f7f9 fec7 	bl	8000578 <__aeabi_dmul>
 80067ea:	2200      	movs	r2, #0
 80067ec:	4680      	mov	r8, r0
 80067ee:	4689      	mov	r9, r1
 80067f0:	4630      	mov	r0, r6
 80067f2:	4639      	mov	r1, r7
 80067f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80067f8:	f7f9 fd0a 	bl	8000210 <__aeabi_dsub>
 80067fc:	4602      	mov	r2, r0
 80067fe:	460b      	mov	r3, r1
 8006800:	4640      	mov	r0, r8
 8006802:	4649      	mov	r1, r9
 8006804:	f7f9 ffe2 	bl	80007cc <__aeabi_ddiv>
 8006808:	4622      	mov	r2, r4
 800680a:	462b      	mov	r3, r5
 800680c:	f7f9 fd00 	bl	8000210 <__aeabi_dsub>
 8006810:	4602      	mov	r2, r0
 8006812:	460b      	mov	r3, r1
 8006814:	2000      	movs	r0, #0
 8006816:	493a      	ldr	r1, [pc, #232]	; (8006900 <__ieee754_exp+0x2e8>)
 8006818:	f7f9 fcfa 	bl	8000210 <__aeabi_dsub>
 800681c:	e075      	b.n	800690a <__ieee754_exp+0x2f2>
 800681e:	f7f9 feab 	bl	8000578 <__aeabi_dmul>
 8006822:	4632      	mov	r2, r6
 8006824:	4604      	mov	r4, r0
 8006826:	460d      	mov	r5, r1
 8006828:	463b      	mov	r3, r7
 800682a:	2000      	movs	r0, #0
 800682c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006830:	f7f9 fcee 	bl	8000210 <__aeabi_dsub>
 8006834:	4602      	mov	r2, r0
 8006836:	460b      	mov	r3, r1
 8006838:	4620      	mov	r0, r4
 800683a:	4629      	mov	r1, r5
 800683c:	f7f9 ffc6 	bl	80007cc <__aeabi_ddiv>
 8006840:	4602      	mov	r2, r0
 8006842:	460b      	mov	r3, r1
 8006844:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006848:	f7f9 fce2 	bl	8000210 <__aeabi_dsub>
 800684c:	4652      	mov	r2, sl
 800684e:	465b      	mov	r3, fp
 8006850:	f7f9 fcde 	bl	8000210 <__aeabi_dsub>
 8006854:	460b      	mov	r3, r1
 8006856:	4602      	mov	r2, r0
 8006858:	4929      	ldr	r1, [pc, #164]	; (8006900 <__ieee754_exp+0x2e8>)
 800685a:	2000      	movs	r0, #0
 800685c:	f7f9 fcd8 	bl	8000210 <__aeabi_dsub>
 8006860:	f46f 737f 	mvn.w	r3, #1020	; 0x3fc
 8006864:	4598      	cmp	r8, r3
 8006866:	db02      	blt.n	800686e <__ieee754_exp+0x256>
 8006868:	eb01 5108 	add.w	r1, r1, r8, lsl #20
 800686c:	e04d      	b.n	800690a <__ieee754_exp+0x2f2>
 800686e:	f508 787a 	add.w	r8, r8, #1000	; 0x3e8
 8006872:	eb01 5108 	add.w	r1, r1, r8, lsl #20
 8006876:	2200      	movs	r2, #0
 8006878:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 800687c:	f7f9 fe7c 	bl	8000578 <__aeabi_dmul>
 8006880:	e043      	b.n	800690a <__ieee754_exp+0x2f2>
 8006882:	bf00      	nop
 8006884:	f3af 8000 	nop.w
 8006888:	fefa39ef 	.word	0xfefa39ef
 800688c:	40862e42 	.word	0x40862e42
 8006890:	8800759c 	.word	0x8800759c
 8006894:	7e37e43c 	.word	0x7e37e43c
 8006898:	d52d3051 	.word	0xd52d3051
 800689c:	c0874910 	.word	0xc0874910
 80068a0:	652b82fe 	.word	0x652b82fe
 80068a4:	3ff71547 	.word	0x3ff71547
 80068a8:	fee00000 	.word	0xfee00000
 80068ac:	3fe62e42 	.word	0x3fe62e42
 80068b0:	35793c76 	.word	0x35793c76
 80068b4:	3dea39ef 	.word	0x3dea39ef
 80068b8:	72bea4d0 	.word	0x72bea4d0
 80068bc:	3e663769 	.word	0x3e663769
 80068c0:	c5d26bf1 	.word	0xc5d26bf1
 80068c4:	3ebbbd41 	.word	0x3ebbbd41
 80068c8:	af25de2c 	.word	0xaf25de2c
 80068cc:	3f11566a 	.word	0x3f11566a
 80068d0:	16bebd93 	.word	0x16bebd93
 80068d4:	3f66c16c 	.word	0x3f66c16c
 80068d8:	5555553e 	.word	0x5555553e
 80068dc:	3fc55555 	.word	0x3fc55555
 80068e0:	40862e41 	.word	0x40862e41
 80068e4:	7fefffff 	.word	0x7fefffff
 80068e8:	3fd62e42 	.word	0x3fd62e42
 80068ec:	3ff0a2b1 	.word	0x3ff0a2b1
 80068f0:	08007b78 	.word	0x08007b78
 80068f4:	08007b68 	.word	0x08007b68
 80068f8:	08007b58 	.word	0x08007b58
 80068fc:	3e2fffff 	.word	0x3e2fffff
 8006900:	3ff00000 	.word	0x3ff00000
 8006904:	ee10 0a10 	vmov	r0, s0
 8006908:	4629      	mov	r1, r5
 800690a:	ec41 0b10 	vmov	d0, r0, r1
 800690e:	b003      	add	sp, #12
 8006910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006914:	f3af 8000 	nop.w

08006918 <__ieee754_rem_pio2>:
 8006918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800691c:	b08f      	sub	sp, #60	; 0x3c
 800691e:	ed8d 0b06 	vstr	d0, [sp, #24]
 8006922:	9907      	ldr	r1, [sp, #28]
 8006924:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 8006928:	49ad      	ldr	r1, [pc, #692]	; (8006be0 <__ieee754_rem_pio2+0x2c8>)
 800692a:	4588      	cmp	r8, r1
 800692c:	ec53 2b10 	vmov	r2, r3, d0
 8006930:	4682      	mov	sl, r0
 8006932:	dc06      	bgt.n	8006942 <__ieee754_rem_pio2+0x2a>
 8006934:	2200      	movs	r2, #0
 8006936:	2300      	movs	r3, #0
 8006938:	ed8a 0b00 	vstr	d0, [sl]
 800693c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8006940:	e188      	b.n	8006c54 <__ieee754_rem_pio2+0x33c>
 8006942:	49a8      	ldr	r1, [pc, #672]	; (8006be4 <__ieee754_rem_pio2+0x2cc>)
 8006944:	4588      	cmp	r8, r1
 8006946:	dc72      	bgt.n	8006a2e <__ieee754_rem_pio2+0x116>
 8006948:	9907      	ldr	r1, [sp, #28]
 800694a:	4ea7      	ldr	r6, [pc, #668]	; (8006be8 <__ieee754_rem_pio2+0x2d0>)
 800694c:	2900      	cmp	r1, #0
 800694e:	ee10 0a10 	vmov	r0, s0
 8006952:	4619      	mov	r1, r3
 8006954:	a394      	add	r3, pc, #592	; (adr r3, 8006ba8 <__ieee754_rem_pio2+0x290>)
 8006956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800695a:	dd33      	ble.n	80069c4 <__ieee754_rem_pio2+0xac>
 800695c:	f7f9 fc58 	bl	8000210 <__aeabi_dsub>
 8006960:	45b0      	cmp	r8, r6
 8006962:	4604      	mov	r4, r0
 8006964:	460d      	mov	r5, r1
 8006966:	d010      	beq.n	800698a <__ieee754_rem_pio2+0x72>
 8006968:	a391      	add	r3, pc, #580	; (adr r3, 8006bb0 <__ieee754_rem_pio2+0x298>)
 800696a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800696e:	f7f9 fc4f 	bl	8000210 <__aeabi_dsub>
 8006972:	4602      	mov	r2, r0
 8006974:	460b      	mov	r3, r1
 8006976:	e9ca 2300 	strd	r2, r3, [sl]
 800697a:	4620      	mov	r0, r4
 800697c:	4629      	mov	r1, r5
 800697e:	f7f9 fc47 	bl	8000210 <__aeabi_dsub>
 8006982:	a38b      	add	r3, pc, #556	; (adr r3, 8006bb0 <__ieee754_rem_pio2+0x298>)
 8006984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006988:	e016      	b.n	80069b8 <__ieee754_rem_pio2+0xa0>
 800698a:	a38b      	add	r3, pc, #556	; (adr r3, 8006bb8 <__ieee754_rem_pio2+0x2a0>)
 800698c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006990:	f7f9 fc3e 	bl	8000210 <__aeabi_dsub>
 8006994:	a38a      	add	r3, pc, #552	; (adr r3, 8006bc0 <__ieee754_rem_pio2+0x2a8>)
 8006996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800699a:	4604      	mov	r4, r0
 800699c:	460d      	mov	r5, r1
 800699e:	f7f9 fc37 	bl	8000210 <__aeabi_dsub>
 80069a2:	4602      	mov	r2, r0
 80069a4:	460b      	mov	r3, r1
 80069a6:	e9ca 2300 	strd	r2, r3, [sl]
 80069aa:	4620      	mov	r0, r4
 80069ac:	4629      	mov	r1, r5
 80069ae:	f7f9 fc2f 	bl	8000210 <__aeabi_dsub>
 80069b2:	a383      	add	r3, pc, #524	; (adr r3, 8006bc0 <__ieee754_rem_pio2+0x2a8>)
 80069b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069b8:	f7f9 fc2a 	bl	8000210 <__aeabi_dsub>
 80069bc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80069c0:	2001      	movs	r0, #1
 80069c2:	e1a1      	b.n	8006d08 <__ieee754_rem_pio2+0x3f0>
 80069c4:	f7f9 fc26 	bl	8000214 <__adddf3>
 80069c8:	45b0      	cmp	r8, r6
 80069ca:	4604      	mov	r4, r0
 80069cc:	460d      	mov	r5, r1
 80069ce:	d010      	beq.n	80069f2 <__ieee754_rem_pio2+0xda>
 80069d0:	a377      	add	r3, pc, #476	; (adr r3, 8006bb0 <__ieee754_rem_pio2+0x298>)
 80069d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069d6:	f7f9 fc1d 	bl	8000214 <__adddf3>
 80069da:	4602      	mov	r2, r0
 80069dc:	460b      	mov	r3, r1
 80069de:	e9ca 2300 	strd	r2, r3, [sl]
 80069e2:	4620      	mov	r0, r4
 80069e4:	4629      	mov	r1, r5
 80069e6:	f7f9 fc13 	bl	8000210 <__aeabi_dsub>
 80069ea:	a371      	add	r3, pc, #452	; (adr r3, 8006bb0 <__ieee754_rem_pio2+0x298>)
 80069ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069f0:	e016      	b.n	8006a20 <__ieee754_rem_pio2+0x108>
 80069f2:	a371      	add	r3, pc, #452	; (adr r3, 8006bb8 <__ieee754_rem_pio2+0x2a0>)
 80069f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069f8:	f7f9 fc0c 	bl	8000214 <__adddf3>
 80069fc:	a370      	add	r3, pc, #448	; (adr r3, 8006bc0 <__ieee754_rem_pio2+0x2a8>)
 80069fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a02:	4604      	mov	r4, r0
 8006a04:	460d      	mov	r5, r1
 8006a06:	f7f9 fc05 	bl	8000214 <__adddf3>
 8006a0a:	4602      	mov	r2, r0
 8006a0c:	460b      	mov	r3, r1
 8006a0e:	e9ca 2300 	strd	r2, r3, [sl]
 8006a12:	4620      	mov	r0, r4
 8006a14:	4629      	mov	r1, r5
 8006a16:	f7f9 fbfb 	bl	8000210 <__aeabi_dsub>
 8006a1a:	a369      	add	r3, pc, #420	; (adr r3, 8006bc0 <__ieee754_rem_pio2+0x2a8>)
 8006a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a20:	f7f9 fbf8 	bl	8000214 <__adddf3>
 8006a24:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006a28:	f04f 30ff 	mov.w	r0, #4294967295
 8006a2c:	e16c      	b.n	8006d08 <__ieee754_rem_pio2+0x3f0>
 8006a2e:	496f      	ldr	r1, [pc, #444]	; (8006bec <__ieee754_rem_pio2+0x2d4>)
 8006a30:	4588      	cmp	r8, r1
 8006a32:	f300 8103 	bgt.w	8006c3c <__ieee754_rem_pio2+0x324>
 8006a36:	f000 fe83 	bl	8007740 <fabs>
 8006a3a:	ec55 4b10 	vmov	r4, r5, d0
 8006a3e:	ee10 0a10 	vmov	r0, s0
 8006a42:	a361      	add	r3, pc, #388	; (adr r3, 8006bc8 <__ieee754_rem_pio2+0x2b0>)
 8006a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a48:	4629      	mov	r1, r5
 8006a4a:	f7f9 fd95 	bl	8000578 <__aeabi_dmul>
 8006a4e:	2200      	movs	r2, #0
 8006a50:	4b67      	ldr	r3, [pc, #412]	; (8006bf0 <__ieee754_rem_pio2+0x2d8>)
 8006a52:	f7f9 fbdf 	bl	8000214 <__adddf3>
 8006a56:	f7fa f829 	bl	8000aac <__aeabi_d2iz>
 8006a5a:	4683      	mov	fp, r0
 8006a5c:	f7f9 fd26 	bl	80004ac <__aeabi_i2d>
 8006a60:	a351      	add	r3, pc, #324	; (adr r3, 8006ba8 <__ieee754_rem_pio2+0x290>)
 8006a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a66:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006a6a:	f7f9 fd85 	bl	8000578 <__aeabi_dmul>
 8006a6e:	4602      	mov	r2, r0
 8006a70:	460b      	mov	r3, r1
 8006a72:	4620      	mov	r0, r4
 8006a74:	4629      	mov	r1, r5
 8006a76:	f7f9 fbcb 	bl	8000210 <__aeabi_dsub>
 8006a7a:	a34d      	add	r3, pc, #308	; (adr r3, 8006bb0 <__ieee754_rem_pio2+0x298>)
 8006a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a80:	4604      	mov	r4, r0
 8006a82:	460d      	mov	r5, r1
 8006a84:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a88:	f7f9 fd76 	bl	8000578 <__aeabi_dmul>
 8006a8c:	f1bb 0f1f 	cmp.w	fp, #31
 8006a90:	4606      	mov	r6, r0
 8006a92:	460f      	mov	r7, r1
 8006a94:	4620      	mov	r0, r4
 8006a96:	4629      	mov	r1, r5
 8006a98:	dc06      	bgt.n	8006aa8 <__ieee754_rem_pio2+0x190>
 8006a9a:	f10b 32ff 	add.w	r2, fp, #4294967295
 8006a9e:	4b55      	ldr	r3, [pc, #340]	; (8006bf4 <__ieee754_rem_pio2+0x2dc>)
 8006aa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006aa4:	4598      	cmp	r8, r3
 8006aa6:	d176      	bne.n	8006b96 <__ieee754_rem_pio2+0x27e>
 8006aa8:	463b      	mov	r3, r7
 8006aaa:	4632      	mov	r2, r6
 8006aac:	f7f9 fbb0 	bl	8000210 <__aeabi_dsub>
 8006ab0:	ea4f 5c28 	mov.w	ip, r8, asr #20
 8006ab4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006ab8:	ebc3 030c 	rsb	r3, r3, ip
 8006abc:	2b10      	cmp	r3, #16
 8006abe:	e9ca 0100 	strd	r0, r1, [sl]
 8006ac2:	f340 809b 	ble.w	8006bfc <__ieee754_rem_pio2+0x2e4>
 8006ac6:	a33c      	add	r3, pc, #240	; (adr r3, 8006bb8 <__ieee754_rem_pio2+0x2a0>)
 8006ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006acc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006ad0:	f8cd c00c 	str.w	ip, [sp, #12]
 8006ad4:	f7f9 fd50 	bl	8000578 <__aeabi_dmul>
 8006ad8:	4606      	mov	r6, r0
 8006ada:	460f      	mov	r7, r1
 8006adc:	4632      	mov	r2, r6
 8006ade:	463b      	mov	r3, r7
 8006ae0:	4620      	mov	r0, r4
 8006ae2:	4629      	mov	r1, r5
 8006ae4:	f7f9 fb94 	bl	8000210 <__aeabi_dsub>
 8006ae8:	4680      	mov	r8, r0
 8006aea:	4689      	mov	r9, r1
 8006aec:	4620      	mov	r0, r4
 8006aee:	4629      	mov	r1, r5
 8006af0:	4642      	mov	r2, r8
 8006af2:	464b      	mov	r3, r9
 8006af4:	f7f9 fb8c 	bl	8000210 <__aeabi_dsub>
 8006af8:	4632      	mov	r2, r6
 8006afa:	463b      	mov	r3, r7
 8006afc:	f7f9 fb88 	bl	8000210 <__aeabi_dsub>
 8006b00:	a32f      	add	r3, pc, #188	; (adr r3, 8006bc0 <__ieee754_rem_pio2+0x2a8>)
 8006b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b06:	4604      	mov	r4, r0
 8006b08:	460d      	mov	r5, r1
 8006b0a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b0e:	f7f9 fd33 	bl	8000578 <__aeabi_dmul>
 8006b12:	4622      	mov	r2, r4
 8006b14:	462b      	mov	r3, r5
 8006b16:	f7f9 fb7b 	bl	8000210 <__aeabi_dsub>
 8006b1a:	4606      	mov	r6, r0
 8006b1c:	460f      	mov	r7, r1
 8006b1e:	463b      	mov	r3, r7
 8006b20:	4640      	mov	r0, r8
 8006b22:	4649      	mov	r1, r9
 8006b24:	4632      	mov	r2, r6
 8006b26:	f7f9 fb73 	bl	8000210 <__aeabi_dsub>
 8006b2a:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8006b2e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006b32:	ebc3 030c 	rsb	r3, r3, ip
 8006b36:	2b31      	cmp	r3, #49	; 0x31
 8006b38:	e9ca 0100 	strd	r0, r1, [sl]
 8006b3c:	dd5c      	ble.n	8006bf8 <__ieee754_rem_pio2+0x2e0>
 8006b3e:	a324      	add	r3, pc, #144	; (adr r3, 8006bd0 <__ieee754_rem_pio2+0x2b8>)
 8006b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b44:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b48:	f7f9 fd16 	bl	8000578 <__aeabi_dmul>
 8006b4c:	4606      	mov	r6, r0
 8006b4e:	460f      	mov	r7, r1
 8006b50:	4632      	mov	r2, r6
 8006b52:	463b      	mov	r3, r7
 8006b54:	4640      	mov	r0, r8
 8006b56:	4649      	mov	r1, r9
 8006b58:	f7f9 fb5a 	bl	8000210 <__aeabi_dsub>
 8006b5c:	4604      	mov	r4, r0
 8006b5e:	460d      	mov	r5, r1
 8006b60:	4622      	mov	r2, r4
 8006b62:	462b      	mov	r3, r5
 8006b64:	4640      	mov	r0, r8
 8006b66:	4649      	mov	r1, r9
 8006b68:	f7f9 fb52 	bl	8000210 <__aeabi_dsub>
 8006b6c:	4632      	mov	r2, r6
 8006b6e:	463b      	mov	r3, r7
 8006b70:	f7f9 fb4e 	bl	8000210 <__aeabi_dsub>
 8006b74:	a318      	add	r3, pc, #96	; (adr r3, 8006bd8 <__ieee754_rem_pio2+0x2c0>)
 8006b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b7a:	4606      	mov	r6, r0
 8006b7c:	460f      	mov	r7, r1
 8006b7e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b82:	f7f9 fcf9 	bl	8000578 <__aeabi_dmul>
 8006b86:	4632      	mov	r2, r6
 8006b88:	463b      	mov	r3, r7
 8006b8a:	f7f9 fb41 	bl	8000210 <__aeabi_dsub>
 8006b8e:	4606      	mov	r6, r0
 8006b90:	460f      	mov	r7, r1
 8006b92:	4620      	mov	r0, r4
 8006b94:	4629      	mov	r1, r5
 8006b96:	4632      	mov	r2, r6
 8006b98:	463b      	mov	r3, r7
 8006b9a:	f7f9 fb39 	bl	8000210 <__aeabi_dsub>
 8006b9e:	e9ca 0100 	strd	r0, r1, [sl]
 8006ba2:	e02b      	b.n	8006bfc <__ieee754_rem_pio2+0x2e4>
 8006ba4:	f3af 8000 	nop.w
 8006ba8:	54400000 	.word	0x54400000
 8006bac:	3ff921fb 	.word	0x3ff921fb
 8006bb0:	1a626331 	.word	0x1a626331
 8006bb4:	3dd0b461 	.word	0x3dd0b461
 8006bb8:	1a600000 	.word	0x1a600000
 8006bbc:	3dd0b461 	.word	0x3dd0b461
 8006bc0:	2e037073 	.word	0x2e037073
 8006bc4:	3ba3198a 	.word	0x3ba3198a
 8006bc8:	6dc9c883 	.word	0x6dc9c883
 8006bcc:	3fe45f30 	.word	0x3fe45f30
 8006bd0:	2e000000 	.word	0x2e000000
 8006bd4:	3ba3198a 	.word	0x3ba3198a
 8006bd8:	252049c1 	.word	0x252049c1
 8006bdc:	397b839a 	.word	0x397b839a
 8006be0:	3fe921fb 	.word	0x3fe921fb
 8006be4:	4002d97b 	.word	0x4002d97b
 8006be8:	3ff921fb 	.word	0x3ff921fb
 8006bec:	413921fb 	.word	0x413921fb
 8006bf0:	3fe00000 	.word	0x3fe00000
 8006bf4:	08007b88 	.word	0x08007b88
 8006bf8:	4644      	mov	r4, r8
 8006bfa:	464d      	mov	r5, r9
 8006bfc:	e9da 8900 	ldrd	r8, r9, [sl]
 8006c00:	4620      	mov	r0, r4
 8006c02:	4642      	mov	r2, r8
 8006c04:	464b      	mov	r3, r9
 8006c06:	4629      	mov	r1, r5
 8006c08:	f7f9 fb02 	bl	8000210 <__aeabi_dsub>
 8006c0c:	4632      	mov	r2, r6
 8006c0e:	463b      	mov	r3, r7
 8006c10:	f7f9 fafe 	bl	8000210 <__aeabi_dsub>
 8006c14:	9a07      	ldr	r2, [sp, #28]
 8006c16:	2a00      	cmp	r2, #0
 8006c18:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006c1c:	da73      	bge.n	8006d06 <__ieee754_rem_pio2+0x3ee>
 8006c1e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006c22:	f8ca 3004 	str.w	r3, [sl, #4]
 8006c26:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006c2a:	f8ca 0008 	str.w	r0, [sl, #8]
 8006c2e:	f8ca 8000 	str.w	r8, [sl]
 8006c32:	f8ca 300c 	str.w	r3, [sl, #12]
 8006c36:	f1cb 0000 	rsb	r0, fp, #0
 8006c3a:	e065      	b.n	8006d08 <__ieee754_rem_pio2+0x3f0>
 8006c3c:	4934      	ldr	r1, [pc, #208]	; (8006d10 <__ieee754_rem_pio2+0x3f8>)
 8006c3e:	4588      	cmp	r8, r1
 8006c40:	dd0a      	ble.n	8006c58 <__ieee754_rem_pio2+0x340>
 8006c42:	ee10 0a10 	vmov	r0, s0
 8006c46:	4619      	mov	r1, r3
 8006c48:	f7f9 fae2 	bl	8000210 <__aeabi_dsub>
 8006c4c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006c50:	e9ca 0100 	strd	r0, r1, [sl]
 8006c54:	2000      	movs	r0, #0
 8006c56:	e057      	b.n	8006d08 <__ieee754_rem_pio2+0x3f0>
 8006c58:	ea4f 5628 	mov.w	r6, r8, asr #20
 8006c5c:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 8006c60:	eba8 5506 	sub.w	r5, r8, r6, lsl #20
 8006c64:	4610      	mov	r0, r2
 8006c66:	4629      	mov	r1, r5
 8006c68:	ee10 4a10 	vmov	r4, s0
 8006c6c:	f7f9 ff1e 	bl	8000aac <__aeabi_d2iz>
 8006c70:	f7f9 fc1c 	bl	80004ac <__aeabi_i2d>
 8006c74:	4602      	mov	r2, r0
 8006c76:	460b      	mov	r3, r1
 8006c78:	4620      	mov	r0, r4
 8006c7a:	4629      	mov	r1, r5
 8006c7c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006c80:	f7f9 fac6 	bl	8000210 <__aeabi_dsub>
 8006c84:	2200      	movs	r2, #0
 8006c86:	4b23      	ldr	r3, [pc, #140]	; (8006d14 <__ieee754_rem_pio2+0x3fc>)
 8006c88:	f7f9 fc76 	bl	8000578 <__aeabi_dmul>
 8006c8c:	4604      	mov	r4, r0
 8006c8e:	460d      	mov	r5, r1
 8006c90:	f7f9 ff0c 	bl	8000aac <__aeabi_d2iz>
 8006c94:	f7f9 fc0a 	bl	80004ac <__aeabi_i2d>
 8006c98:	4602      	mov	r2, r0
 8006c9a:	460b      	mov	r3, r1
 8006c9c:	4620      	mov	r0, r4
 8006c9e:	4629      	mov	r1, r5
 8006ca0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006ca4:	f7f9 fab4 	bl	8000210 <__aeabi_dsub>
 8006ca8:	2200      	movs	r2, #0
 8006caa:	4b1a      	ldr	r3, [pc, #104]	; (8006d14 <__ieee754_rem_pio2+0x3fc>)
 8006cac:	f7f9 fc64 	bl	8000578 <__aeabi_dmul>
 8006cb0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006cb4:	2403      	movs	r4, #3
 8006cb6:	a908      	add	r1, sp, #32
 8006cb8:	1e65      	subs	r5, r4, #1
 8006cba:	eb01 03c5 	add.w	r3, r1, r5, lsl #3
 8006cbe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	f7f9 febf 	bl	8000a48 <__aeabi_dcmpeq>
 8006cca:	b108      	cbz	r0, 8006cd0 <__ieee754_rem_pio2+0x3b8>
 8006ccc:	462c      	mov	r4, r5
 8006cce:	e7f2      	b.n	8006cb6 <__ieee754_rem_pio2+0x39e>
 8006cd0:	2302      	movs	r3, #2
 8006cd2:	9300      	str	r3, [sp, #0]
 8006cd4:	4b10      	ldr	r3, [pc, #64]	; (8006d18 <__ieee754_rem_pio2+0x400>)
 8006cd6:	9301      	str	r3, [sp, #4]
 8006cd8:	4632      	mov	r2, r6
 8006cda:	a808      	add	r0, sp, #32
 8006cdc:	4651      	mov	r1, sl
 8006cde:	4623      	mov	r3, r4
 8006ce0:	f000 f912 	bl	8006f08 <__kernel_rem_pio2>
 8006ce4:	9a07      	ldr	r2, [sp, #28]
 8006ce6:	2a00      	cmp	r2, #0
 8006ce8:	da0e      	bge.n	8006d08 <__ieee754_rem_pio2+0x3f0>
 8006cea:	f8da 3004 	ldr.w	r3, [sl, #4]
 8006cee:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006cf2:	f8ca 3004 	str.w	r3, [sl, #4]
 8006cf6:	f8da 300c 	ldr.w	r3, [sl, #12]
 8006cfa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006cfe:	f8ca 300c 	str.w	r3, [sl, #12]
 8006d02:	4240      	negs	r0, r0
 8006d04:	e000      	b.n	8006d08 <__ieee754_rem_pio2+0x3f0>
 8006d06:	4658      	mov	r0, fp
 8006d08:	b00f      	add	sp, #60	; 0x3c
 8006d0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d0e:	bf00      	nop
 8006d10:	7fefffff 	.word	0x7fefffff
 8006d14:	41700000 	.word	0x41700000
 8006d18:	08007c08 	.word	0x08007c08
 8006d1c:	f3af 8000 	nop.w

08006d20 <__kernel_cos>:
 8006d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d24:	ec57 6b10 	vmov	r6, r7, d0
 8006d28:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
 8006d2c:	b085      	sub	sp, #20
 8006d2e:	f1b9 5f79 	cmp.w	r9, #1044381696	; 0x3e400000
 8006d32:	ed8d 1b00 	vstr	d1, [sp]
 8006d36:	da07      	bge.n	8006d48 <__kernel_cos+0x28>
 8006d38:	ee10 0a10 	vmov	r0, s0
 8006d3c:	4639      	mov	r1, r7
 8006d3e:	f7f9 feb5 	bl	8000aac <__aeabi_d2iz>
 8006d42:	2800      	cmp	r0, #0
 8006d44:	f000 80b2 	beq.w	8006eac <__kernel_cos+0x18c>
 8006d48:	4632      	mov	r2, r6
 8006d4a:	463b      	mov	r3, r7
 8006d4c:	4630      	mov	r0, r6
 8006d4e:	4639      	mov	r1, r7
 8006d50:	f7f9 fc12 	bl	8000578 <__aeabi_dmul>
 8006d54:	a35e      	add	r3, pc, #376	; (adr r3, 8006ed0 <__kernel_cos+0x1b0>)
 8006d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d5a:	4604      	mov	r4, r0
 8006d5c:	460d      	mov	r5, r1
 8006d5e:	f7f9 fc0b 	bl	8000578 <__aeabi_dmul>
 8006d62:	a35d      	add	r3, pc, #372	; (adr r3, 8006ed8 <__kernel_cos+0x1b8>)
 8006d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d68:	f7f9 fa54 	bl	8000214 <__adddf3>
 8006d6c:	4602      	mov	r2, r0
 8006d6e:	460b      	mov	r3, r1
 8006d70:	4620      	mov	r0, r4
 8006d72:	4629      	mov	r1, r5
 8006d74:	f7f9 fc00 	bl	8000578 <__aeabi_dmul>
 8006d78:	a359      	add	r3, pc, #356	; (adr r3, 8006ee0 <__kernel_cos+0x1c0>)
 8006d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d7e:	f7f9 fa47 	bl	8000210 <__aeabi_dsub>
 8006d82:	4602      	mov	r2, r0
 8006d84:	460b      	mov	r3, r1
 8006d86:	4620      	mov	r0, r4
 8006d88:	4629      	mov	r1, r5
 8006d8a:	f7f9 fbf5 	bl	8000578 <__aeabi_dmul>
 8006d8e:	a356      	add	r3, pc, #344	; (adr r3, 8006ee8 <__kernel_cos+0x1c8>)
 8006d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d94:	f7f9 fa3e 	bl	8000214 <__adddf3>
 8006d98:	4602      	mov	r2, r0
 8006d9a:	460b      	mov	r3, r1
 8006d9c:	4620      	mov	r0, r4
 8006d9e:	4629      	mov	r1, r5
 8006da0:	f7f9 fbea 	bl	8000578 <__aeabi_dmul>
 8006da4:	a352      	add	r3, pc, #328	; (adr r3, 8006ef0 <__kernel_cos+0x1d0>)
 8006da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006daa:	f7f9 fa31 	bl	8000210 <__aeabi_dsub>
 8006dae:	4602      	mov	r2, r0
 8006db0:	460b      	mov	r3, r1
 8006db2:	4620      	mov	r0, r4
 8006db4:	4629      	mov	r1, r5
 8006db6:	f7f9 fbdf 	bl	8000578 <__aeabi_dmul>
 8006dba:	a34f      	add	r3, pc, #316	; (adr r3, 8006ef8 <__kernel_cos+0x1d8>)
 8006dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dc0:	f7f9 fa28 	bl	8000214 <__adddf3>
 8006dc4:	460b      	mov	r3, r1
 8006dc6:	4602      	mov	r2, r0
 8006dc8:	4629      	mov	r1, r5
 8006dca:	4620      	mov	r0, r4
 8006dcc:	f7f9 fbd4 	bl	8000578 <__aeabi_dmul>
 8006dd0:	4b3b      	ldr	r3, [pc, #236]	; (8006ec0 <__kernel_cos+0x1a0>)
 8006dd2:	4599      	cmp	r9, r3
 8006dd4:	4682      	mov	sl, r0
 8006dd6:	468b      	mov	fp, r1
 8006dd8:	dc26      	bgt.n	8006e28 <__kernel_cos+0x108>
 8006dda:	4620      	mov	r0, r4
 8006ddc:	4629      	mov	r1, r5
 8006dde:	2200      	movs	r2, #0
 8006de0:	4b38      	ldr	r3, [pc, #224]	; (8006ec4 <__kernel_cos+0x1a4>)
 8006de2:	f7f9 fbc9 	bl	8000578 <__aeabi_dmul>
 8006de6:	4652      	mov	r2, sl
 8006de8:	4680      	mov	r8, r0
 8006dea:	4689      	mov	r9, r1
 8006dec:	4620      	mov	r0, r4
 8006dee:	4629      	mov	r1, r5
 8006df0:	465b      	mov	r3, fp
 8006df2:	f7f9 fbc1 	bl	8000578 <__aeabi_dmul>
 8006df6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006dfa:	4604      	mov	r4, r0
 8006dfc:	460d      	mov	r5, r1
 8006dfe:	4630      	mov	r0, r6
 8006e00:	4639      	mov	r1, r7
 8006e02:	f7f9 fbb9 	bl	8000578 <__aeabi_dmul>
 8006e06:	4602      	mov	r2, r0
 8006e08:	460b      	mov	r3, r1
 8006e0a:	4620      	mov	r0, r4
 8006e0c:	4629      	mov	r1, r5
 8006e0e:	f7f9 f9ff 	bl	8000210 <__aeabi_dsub>
 8006e12:	4602      	mov	r2, r0
 8006e14:	460b      	mov	r3, r1
 8006e16:	4640      	mov	r0, r8
 8006e18:	4649      	mov	r1, r9
 8006e1a:	f7f9 f9f9 	bl	8000210 <__aeabi_dsub>
 8006e1e:	4602      	mov	r2, r0
 8006e20:	460b      	mov	r3, r1
 8006e22:	2000      	movs	r0, #0
 8006e24:	4928      	ldr	r1, [pc, #160]	; (8006ec8 <__kernel_cos+0x1a8>)
 8006e26:	e03e      	b.n	8006ea6 <__kernel_cos+0x186>
 8006e28:	4b28      	ldr	r3, [pc, #160]	; (8006ecc <__kernel_cos+0x1ac>)
 8006e2a:	4599      	cmp	r9, r3
 8006e2c:	dc05      	bgt.n	8006e3a <__kernel_cos+0x11a>
 8006e2e:	f5a9 1300 	sub.w	r3, r9, #2097152	; 0x200000
 8006e32:	2200      	movs	r2, #0
 8006e34:	4690      	mov	r8, r2
 8006e36:	4699      	mov	r9, r3
 8006e38:	e003      	b.n	8006e42 <__kernel_cos+0x122>
 8006e3a:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8006f00 <__kernel_cos+0x1e0>
 8006e3e:	f04f 0800 	mov.w	r8, #0
 8006e42:	4642      	mov	r2, r8
 8006e44:	464b      	mov	r3, r9
 8006e46:	2000      	movs	r0, #0
 8006e48:	491f      	ldr	r1, [pc, #124]	; (8006ec8 <__kernel_cos+0x1a8>)
 8006e4a:	f7f9 f9e1 	bl	8000210 <__aeabi_dsub>
 8006e4e:	2200      	movs	r2, #0
 8006e50:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e54:	4b1b      	ldr	r3, [pc, #108]	; (8006ec4 <__kernel_cos+0x1a4>)
 8006e56:	4620      	mov	r0, r4
 8006e58:	4629      	mov	r1, r5
 8006e5a:	f7f9 fb8d 	bl	8000578 <__aeabi_dmul>
 8006e5e:	4642      	mov	r2, r8
 8006e60:	464b      	mov	r3, r9
 8006e62:	f7f9 f9d5 	bl	8000210 <__aeabi_dsub>
 8006e66:	4652      	mov	r2, sl
 8006e68:	4680      	mov	r8, r0
 8006e6a:	4689      	mov	r9, r1
 8006e6c:	4620      	mov	r0, r4
 8006e6e:	4629      	mov	r1, r5
 8006e70:	465b      	mov	r3, fp
 8006e72:	f7f9 fb81 	bl	8000578 <__aeabi_dmul>
 8006e76:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006e7a:	4604      	mov	r4, r0
 8006e7c:	460d      	mov	r5, r1
 8006e7e:	4630      	mov	r0, r6
 8006e80:	4639      	mov	r1, r7
 8006e82:	f7f9 fb79 	bl	8000578 <__aeabi_dmul>
 8006e86:	4602      	mov	r2, r0
 8006e88:	460b      	mov	r3, r1
 8006e8a:	4620      	mov	r0, r4
 8006e8c:	4629      	mov	r1, r5
 8006e8e:	f7f9 f9bf 	bl	8000210 <__aeabi_dsub>
 8006e92:	4602      	mov	r2, r0
 8006e94:	460b      	mov	r3, r1
 8006e96:	4640      	mov	r0, r8
 8006e98:	4649      	mov	r1, r9
 8006e9a:	f7f9 f9b9 	bl	8000210 <__aeabi_dsub>
 8006e9e:	4602      	mov	r2, r0
 8006ea0:	460b      	mov	r3, r1
 8006ea2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ea6:	f7f9 f9b3 	bl	8000210 <__aeabi_dsub>
 8006eaa:	e001      	b.n	8006eb0 <__kernel_cos+0x190>
 8006eac:	4906      	ldr	r1, [pc, #24]	; (8006ec8 <__kernel_cos+0x1a8>)
 8006eae:	2000      	movs	r0, #0
 8006eb0:	ec41 0b10 	vmov	d0, r0, r1
 8006eb4:	b005      	add	sp, #20
 8006eb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006eba:	bf00      	nop
 8006ebc:	f3af 8000 	nop.w
 8006ec0:	3fd33332 	.word	0x3fd33332
 8006ec4:	3fe00000 	.word	0x3fe00000
 8006ec8:	3ff00000 	.word	0x3ff00000
 8006ecc:	3fe90000 	.word	0x3fe90000
 8006ed0:	be8838d4 	.word	0xbe8838d4
 8006ed4:	bda8fae9 	.word	0xbda8fae9
 8006ed8:	bdb4b1c4 	.word	0xbdb4b1c4
 8006edc:	3e21ee9e 	.word	0x3e21ee9e
 8006ee0:	809c52ad 	.word	0x809c52ad
 8006ee4:	3e927e4f 	.word	0x3e927e4f
 8006ee8:	19cb1590 	.word	0x19cb1590
 8006eec:	3efa01a0 	.word	0x3efa01a0
 8006ef0:	16c15177 	.word	0x16c15177
 8006ef4:	3f56c16c 	.word	0x3f56c16c
 8006ef8:	5555554c 	.word	0x5555554c
 8006efc:	3fa55555 	.word	0x3fa55555
 8006f00:	3fd20000 	.word	0x3fd20000
 8006f04:	f3af 8000 	nop.w

08006f08 <__kernel_rem_pio2>:
 8006f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f0c:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8006f10:	f1a2 0803 	sub.w	r8, r2, #3
 8006f14:	9309      	str	r3, [sp, #36]	; 0x24
 8006f16:	9ca4      	ldr	r4, [sp, #656]	; 0x290
 8006f18:	4bb1      	ldr	r3, [pc, #708]	; (80071e0 <__kernel_rem_pio2+0x2d8>)
 8006f1a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006f1c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8006f20:	9304      	str	r3, [sp, #16]
 8006f22:	3d01      	subs	r5, #1
 8006f24:	9506      	str	r5, [sp, #24]
 8006f26:	46a9      	mov	r9, r5
 8006f28:	9d04      	ldr	r5, [sp, #16]
 8006f2a:	900a      	str	r0, [sp, #40]	; 0x28
 8006f2c:	2318      	movs	r3, #24
 8006f2e:	fb98 f8f3 	sdiv	r8, r8, r3
 8006f32:	44a9      	add	r9, r5
 8006f34:	9d06      	ldr	r5, [sp, #24]
 8006f36:	9108      	str	r1, [sp, #32]
 8006f38:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8006f3c:	ebc5 0608 	rsb	r6, r5, r8
 8006f40:	9da5      	ldr	r5, [sp, #660]	; 0x294
 8006f42:	ea6f 0408 	mvn.w	r4, r8
 8006f46:	eb05 0786 	add.w	r7, r5, r6, lsl #2
 8006f4a:	fb03 2404 	mla	r4, r3, r4, r2
 8006f4e:	2500      	movs	r5, #0
 8006f50:	454d      	cmp	r5, r9
 8006f52:	dc0f      	bgt.n	8006f74 <__kernel_rem_pio2+0x6c>
 8006f54:	42f5      	cmn	r5, r6
 8006f56:	d404      	bmi.n	8006f62 <__kernel_rem_pio2+0x5a>
 8006f58:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
 8006f5c:	f7f9 faa6 	bl	80004ac <__aeabi_i2d>
 8006f60:	e001      	b.n	8006f66 <__kernel_rem_pio2+0x5e>
 8006f62:	2000      	movs	r0, #0
 8006f64:	2100      	movs	r1, #0
 8006f66:	aa22      	add	r2, sp, #136	; 0x88
 8006f68:	eb02 03c5 	add.w	r3, r2, r5, lsl #3
 8006f6c:	e9c3 0100 	strd	r0, r1, [r3]
 8006f70:	3501      	adds	r5, #1
 8006f72:	e7ed      	b.n	8006f50 <__kernel_rem_pio2+0x48>
 8006f74:	2500      	movs	r5, #0
 8006f76:	9a04      	ldr	r2, [sp, #16]
 8006f78:	4295      	cmp	r5, r2
 8006f7a:	dc26      	bgt.n	8006fca <__kernel_rem_pio2+0xc2>
 8006f7c:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8006f80:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8006f84:	44aa      	add	sl, r5
 8006f86:	ab22      	add	r3, sp, #136	; 0x88
 8006f88:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8006f8c:	2600      	movs	r6, #0
 8006f8e:	2700      	movs	r7, #0
 8006f90:	f04f 0900 	mov.w	r9, #0
 8006f94:	9b06      	ldr	r3, [sp, #24]
 8006f96:	4599      	cmp	r9, r3
 8006f98:	dc10      	bgt.n	8006fbc <__kernel_rem_pio2+0xb4>
 8006f9a:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8006f9e:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8006fa2:	f7f9 fae9 	bl	8000578 <__aeabi_dmul>
 8006fa6:	4602      	mov	r2, r0
 8006fa8:	460b      	mov	r3, r1
 8006faa:	4630      	mov	r0, r6
 8006fac:	4639      	mov	r1, r7
 8006fae:	f7f9 f931 	bl	8000214 <__adddf3>
 8006fb2:	f109 0901 	add.w	r9, r9, #1
 8006fb6:	4606      	mov	r6, r0
 8006fb8:	460f      	mov	r7, r1
 8006fba:	e7eb      	b.n	8006f94 <__kernel_rem_pio2+0x8c>
 8006fbc:	a99a      	add	r1, sp, #616	; 0x268
 8006fbe:	eb01 03c5 	add.w	r3, r1, r5, lsl #3
 8006fc2:	e943 6728 	strd	r6, r7, [r3, #-160]	; 0xa0
 8006fc6:	3501      	adds	r5, #1
 8006fc8:	e7d5      	b.n	8006f76 <__kernel_rem_pio2+0x6e>
 8006fca:	9d04      	ldr	r5, [sp, #16]
 8006fcc:	f8dd a010 	ldr.w	sl, [sp, #16]
 8006fd0:	a90e      	add	r1, sp, #56	; 0x38
 8006fd2:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8006fd6:	9da5      	ldr	r5, [sp, #660]	; 0x294
 8006fd8:	910b      	str	r1, [sp, #44]	; 0x2c
 8006fda:	eb05 0588 	add.w	r5, r5, r8, lsl #2
 8006fde:	950d      	str	r5, [sp, #52]	; 0x34
 8006fe0:	ea4f 09ca 	mov.w	r9, sl, lsl #3
 8006fe4:	ab9a      	add	r3, sp, #616	; 0x268
 8006fe6:	444b      	add	r3, r9
 8006fe8:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8006fec:	a972      	add	r1, sp, #456	; 0x1c8
 8006fee:	f10d 0834 	add.w	r8, sp, #52	; 0x34
 8006ff2:	4489      	add	r9, r1
 8006ff4:	4655      	mov	r5, sl
 8006ff6:	2d00      	cmp	r5, #0
 8006ff8:	dd23      	ble.n	8007042 <__kernel_rem_pio2+0x13a>
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	4b79      	ldr	r3, [pc, #484]	; (80071e4 <__kernel_rem_pio2+0x2dc>)
 8006ffe:	4630      	mov	r0, r6
 8007000:	4639      	mov	r1, r7
 8007002:	f7f9 fab9 	bl	8000578 <__aeabi_dmul>
 8007006:	f7f9 fd51 	bl	8000aac <__aeabi_d2iz>
 800700a:	f7f9 fa4f 	bl	80004ac <__aeabi_i2d>
 800700e:	2200      	movs	r2, #0
 8007010:	4b75      	ldr	r3, [pc, #468]	; (80071e8 <__kernel_rem_pio2+0x2e0>)
 8007012:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007016:	f7f9 faaf 	bl	8000578 <__aeabi_dmul>
 800701a:	4602      	mov	r2, r0
 800701c:	460b      	mov	r3, r1
 800701e:	4630      	mov	r0, r6
 8007020:	4639      	mov	r1, r7
 8007022:	f7f9 f8f5 	bl	8000210 <__aeabi_dsub>
 8007026:	f7f9 fd41 	bl	8000aac <__aeabi_d2iz>
 800702a:	e979 2302 	ldrd	r2, r3, [r9, #-8]!
 800702e:	f848 0f04 	str.w	r0, [r8, #4]!
 8007032:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007036:	f7f9 f8ed 	bl	8000214 <__adddf3>
 800703a:	3d01      	subs	r5, #1
 800703c:	4606      	mov	r6, r0
 800703e:	460f      	mov	r7, r1
 8007040:	e7d9      	b.n	8006ff6 <__kernel_rem_pio2+0xee>
 8007042:	ec47 6b10 	vmov	d0, r6, r7
 8007046:	4620      	mov	r0, r4
 8007048:	f000 fc1a 	bl	8007880 <scalbn>
 800704c:	ec57 6b10 	vmov	r6, r7, d0
 8007050:	2200      	movs	r2, #0
 8007052:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8007056:	ee10 0a10 	vmov	r0, s0
 800705a:	4639      	mov	r1, r7
 800705c:	f7f9 fa8c 	bl	8000578 <__aeabi_dmul>
 8007060:	ec41 0b10 	vmov	d0, r0, r1
 8007064:	f000 fb80 	bl	8007768 <floor>
 8007068:	2200      	movs	r2, #0
 800706a:	ec51 0b10 	vmov	r0, r1, d0
 800706e:	4b5f      	ldr	r3, [pc, #380]	; (80071ec <__kernel_rem_pio2+0x2e4>)
 8007070:	f7f9 fa82 	bl	8000578 <__aeabi_dmul>
 8007074:	4602      	mov	r2, r0
 8007076:	460b      	mov	r3, r1
 8007078:	4630      	mov	r0, r6
 800707a:	4639      	mov	r1, r7
 800707c:	f7f9 f8c8 	bl	8000210 <__aeabi_dsub>
 8007080:	460f      	mov	r7, r1
 8007082:	4606      	mov	r6, r0
 8007084:	f7f9 fd12 	bl	8000aac <__aeabi_d2iz>
 8007088:	9002      	str	r0, [sp, #8]
 800708a:	f7f9 fa0f 	bl	80004ac <__aeabi_i2d>
 800708e:	4602      	mov	r2, r0
 8007090:	460b      	mov	r3, r1
 8007092:	4630      	mov	r0, r6
 8007094:	4639      	mov	r1, r7
 8007096:	f7f9 f8bb 	bl	8000210 <__aeabi_dsub>
 800709a:	2c00      	cmp	r4, #0
 800709c:	4606      	mov	r6, r0
 800709e:	460f      	mov	r7, r1
 80070a0:	dd16      	ble.n	80070d0 <__kernel_rem_pio2+0x1c8>
 80070a2:	f10a 32ff 	add.w	r2, sl, #4294967295
 80070a6:	ab0e      	add	r3, sp, #56	; 0x38
 80070a8:	9d02      	ldr	r5, [sp, #8]
 80070aa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80070ae:	f1c4 0318 	rsb	r3, r4, #24
 80070b2:	fa41 f003 	asr.w	r0, r1, r3
 80070b6:	fa00 f303 	lsl.w	r3, r0, r3
 80070ba:	1acb      	subs	r3, r1, r3
 80070bc:	a90e      	add	r1, sp, #56	; 0x38
 80070be:	4405      	add	r5, r0
 80070c0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80070c4:	f1c4 0217 	rsb	r2, r4, #23
 80070c8:	9502      	str	r5, [sp, #8]
 80070ca:	fa43 f902 	asr.w	r9, r3, r2
 80070ce:	e00f      	b.n	80070f0 <__kernel_rem_pio2+0x1e8>
 80070d0:	d107      	bne.n	80070e2 <__kernel_rem_pio2+0x1da>
 80070d2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80070d6:	aa0e      	add	r2, sp, #56	; 0x38
 80070d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070dc:	ea4f 59e3 	mov.w	r9, r3, asr #23
 80070e0:	e006      	b.n	80070f0 <__kernel_rem_pio2+0x1e8>
 80070e2:	2200      	movs	r2, #0
 80070e4:	4b42      	ldr	r3, [pc, #264]	; (80071f0 <__kernel_rem_pio2+0x2e8>)
 80070e6:	f7f9 fccd 	bl	8000a84 <__aeabi_dcmpge>
 80070ea:	b928      	cbnz	r0, 80070f8 <__kernel_rem_pio2+0x1f0>
 80070ec:	4681      	mov	r9, r0
 80070ee:	e04d      	b.n	800718c <__kernel_rem_pio2+0x284>
 80070f0:	f1b9 0f00 	cmp.w	r9, #0
 80070f4:	dc02      	bgt.n	80070fc <__kernel_rem_pio2+0x1f4>
 80070f6:	e049      	b.n	800718c <__kernel_rem_pio2+0x284>
 80070f8:	f04f 0902 	mov.w	r9, #2
 80070fc:	9d02      	ldr	r5, [sp, #8]
 80070fe:	2300      	movs	r3, #0
 8007100:	3501      	adds	r5, #1
 8007102:	9502      	str	r5, [sp, #8]
 8007104:	aa0e      	add	r2, sp, #56	; 0x38
 8007106:	461d      	mov	r5, r3
 8007108:	4553      	cmp	r3, sl
 800710a:	da0f      	bge.n	800712c <__kernel_rem_pio2+0x224>
 800710c:	f852 1b04 	ldr.w	r1, [r2], #4
 8007110:	b91d      	cbnz	r5, 800711a <__kernel_rem_pio2+0x212>
 8007112:	b149      	cbz	r1, 8007128 <__kernel_rem_pio2+0x220>
 8007114:	f1c1 7180 	rsb	r1, r1, #16777216	; 0x1000000
 8007118:	e003      	b.n	8007122 <__kernel_rem_pio2+0x21a>
 800711a:	f1c1 11ff 	rsb	r1, r1, #16711935	; 0xff00ff
 800711e:	f501 417f 	add.w	r1, r1, #65280	; 0xff00
 8007122:	f842 1c04 	str.w	r1, [r2, #-4]
 8007126:	2501      	movs	r5, #1
 8007128:	3301      	adds	r3, #1
 800712a:	e7ed      	b.n	8007108 <__kernel_rem_pio2+0x200>
 800712c:	2c00      	cmp	r4, #0
 800712e:	dd14      	ble.n	800715a <__kernel_rem_pio2+0x252>
 8007130:	2c01      	cmp	r4, #1
 8007132:	d009      	beq.n	8007148 <__kernel_rem_pio2+0x240>
 8007134:	2c02      	cmp	r4, #2
 8007136:	d110      	bne.n	800715a <__kernel_rem_pio2+0x252>
 8007138:	f10a 33ff 	add.w	r3, sl, #4294967295
 800713c:	a90e      	add	r1, sp, #56	; 0x38
 800713e:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8007142:	f3c2 0215 	ubfx	r2, r2, #0, #22
 8007146:	e006      	b.n	8007156 <__kernel_rem_pio2+0x24e>
 8007148:	f10a 33ff 	add.w	r3, sl, #4294967295
 800714c:	a90e      	add	r1, sp, #56	; 0x38
 800714e:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8007152:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8007156:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800715a:	f1b9 0f02 	cmp.w	r9, #2
 800715e:	d115      	bne.n	800718c <__kernel_rem_pio2+0x284>
 8007160:	4632      	mov	r2, r6
 8007162:	463b      	mov	r3, r7
 8007164:	2000      	movs	r0, #0
 8007166:	4923      	ldr	r1, [pc, #140]	; (80071f4 <__kernel_rem_pio2+0x2ec>)
 8007168:	f7f9 f852 	bl	8000210 <__aeabi_dsub>
 800716c:	4606      	mov	r6, r0
 800716e:	460f      	mov	r7, r1
 8007170:	b165      	cbz	r5, 800718c <__kernel_rem_pio2+0x284>
 8007172:	4620      	mov	r0, r4
 8007174:	ed9f 0b18 	vldr	d0, [pc, #96]	; 80071d8 <__kernel_rem_pio2+0x2d0>
 8007178:	f000 fb82 	bl	8007880 <scalbn>
 800717c:	4630      	mov	r0, r6
 800717e:	4639      	mov	r1, r7
 8007180:	ec53 2b10 	vmov	r2, r3, d0
 8007184:	f7f9 f844 	bl	8000210 <__aeabi_dsub>
 8007188:	4606      	mov	r6, r0
 800718a:	460f      	mov	r7, r1
 800718c:	4630      	mov	r0, r6
 800718e:	4639      	mov	r1, r7
 8007190:	2200      	movs	r2, #0
 8007192:	2300      	movs	r3, #0
 8007194:	f7f9 fc58 	bl	8000a48 <__aeabi_dcmpeq>
 8007198:	2800      	cmp	r0, #0
 800719a:	d074      	beq.n	8007286 <__kernel_rem_pio2+0x37e>
 800719c:	aa0e      	add	r2, sp, #56	; 0x38
 800719e:	f10a 31ff 	add.w	r1, sl, #4294967295
 80071a2:	eb02 008a 	add.w	r0, r2, sl, lsl #2
 80071a6:	2300      	movs	r3, #0
 80071a8:	460a      	mov	r2, r1
 80071aa:	9d04      	ldr	r5, [sp, #16]
 80071ac:	42aa      	cmp	r2, r5
 80071ae:	db04      	blt.n	80071ba <__kernel_rem_pio2+0x2b2>
 80071b0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80071b4:	3a01      	subs	r2, #1
 80071b6:	432b      	orrs	r3, r5
 80071b8:	e7f7      	b.n	80071aa <__kernel_rem_pio2+0x2a2>
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	f040 81ed 	bne.w	800759a <__kernel_rem_pio2+0x692>
 80071c0:	2601      	movs	r6, #1
 80071c2:	f06f 0303 	mvn.w	r3, #3
 80071c6:	4373      	muls	r3, r6
 80071c8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80071ca:	58eb      	ldr	r3, [r5, r3]
 80071cc:	b9a3      	cbnz	r3, 80071f8 <__kernel_rem_pio2+0x2f0>
 80071ce:	3601      	adds	r6, #1
 80071d0:	e7f7      	b.n	80071c2 <__kernel_rem_pio2+0x2ba>
 80071d2:	bf00      	nop
 80071d4:	f3af 8000 	nop.w
 80071d8:	00000000 	.word	0x00000000
 80071dc:	3ff00000 	.word	0x3ff00000
 80071e0:	08007d10 	.word	0x08007d10
 80071e4:	3e700000 	.word	0x3e700000
 80071e8:	41700000 	.word	0x41700000
 80071ec:	40200000 	.word	0x40200000
 80071f0:	3fe00000 	.word	0x3fe00000
 80071f4:	3ff00000 	.word	0x3ff00000
 80071f8:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 80071fc:	aa72      	add	r2, sp, #456	; 0x1c8
 80071fe:	44d3      	add	fp, sl
 8007200:	a922      	add	r1, sp, #136	; 0x88
 8007202:	eb02 02ca 	add.w	r2, r2, sl, lsl #3
 8007206:	f10a 0501 	add.w	r5, sl, #1
 800720a:	eb01 0bcb 	add.w	fp, r1, fp, lsl #3
 800720e:	920c      	str	r2, [sp, #48]	; 0x30
 8007210:	2700      	movs	r7, #0
 8007212:	eb0a 0306 	add.w	r3, sl, r6
 8007216:	429d      	cmp	r5, r3
 8007218:	dc33      	bgt.n	8007282 <__kernel_rem_pio2+0x37a>
 800721a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800721c:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007220:	f7f9 f944 	bl	80004ac <__aeabi_i2d>
 8007224:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 80074c0 <__kernel_rem_pio2+0x5b8>
 8007228:	eb0b 0907 	add.w	r9, fp, r7
 800722c:	e9c9 0100 	strd	r0, r1, [r9]
 8007230:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007234:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 8007238:	f04f 0800 	mov.w	r8, #0
 800723c:	9906      	ldr	r1, [sp, #24]
 800723e:	4588      	cmp	r8, r1
 8007240:	dc16      	bgt.n	8007270 <__kernel_rem_pio2+0x368>
 8007242:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 8007246:	eba9 03c8 	sub.w	r3, r9, r8, lsl #3
 800724a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800724e:	f8cd c004 	str.w	ip, [sp, #4]
 8007252:	f7f9 f991 	bl	8000578 <__aeabi_dmul>
 8007256:	4602      	mov	r2, r0
 8007258:	460b      	mov	r3, r1
 800725a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800725e:	f7f8 ffd9 	bl	8000214 <__adddf3>
 8007262:	f108 0801 	add.w	r8, r8, #1
 8007266:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800726a:	f8dd c004 	ldr.w	ip, [sp, #4]
 800726e:	e7e5      	b.n	800723c <__kernel_rem_pio2+0x334>
 8007270:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007272:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007276:	443b      	add	r3, r7
 8007278:	ed83 7b02 	vstr	d7, [r3, #8]
 800727c:	3501      	adds	r5, #1
 800727e:	3708      	adds	r7, #8
 8007280:	e7c7      	b.n	8007212 <__kernel_rem_pio2+0x30a>
 8007282:	469a      	mov	sl, r3
 8007284:	e6ac      	b.n	8006fe0 <__kernel_rem_pio2+0xd8>
 8007286:	ec47 6b10 	vmov	d0, r6, r7
 800728a:	4260      	negs	r0, r4
 800728c:	f000 faf8 	bl	8007880 <scalbn>
 8007290:	ec57 6b10 	vmov	r6, r7, d0
 8007294:	ee10 0a10 	vmov	r0, s0
 8007298:	4639      	mov	r1, r7
 800729a:	2200      	movs	r2, #0
 800729c:	4b8c      	ldr	r3, [pc, #560]	; (80074d0 <__kernel_rem_pio2+0x5c8>)
 800729e:	f7f9 fbf1 	bl	8000a84 <__aeabi_dcmpge>
 80072a2:	b1f8      	cbz	r0, 80072e4 <__kernel_rem_pio2+0x3dc>
 80072a4:	2200      	movs	r2, #0
 80072a6:	4b8b      	ldr	r3, [pc, #556]	; (80074d4 <__kernel_rem_pio2+0x5cc>)
 80072a8:	4630      	mov	r0, r6
 80072aa:	4639      	mov	r1, r7
 80072ac:	f7f9 f964 	bl	8000578 <__aeabi_dmul>
 80072b0:	f7f9 fbfc 	bl	8000aac <__aeabi_d2iz>
 80072b4:	4605      	mov	r5, r0
 80072b6:	f7f9 f8f9 	bl	80004ac <__aeabi_i2d>
 80072ba:	2200      	movs	r2, #0
 80072bc:	4b84      	ldr	r3, [pc, #528]	; (80074d0 <__kernel_rem_pio2+0x5c8>)
 80072be:	f7f9 f95b 	bl	8000578 <__aeabi_dmul>
 80072c2:	4602      	mov	r2, r0
 80072c4:	460b      	mov	r3, r1
 80072c6:	4630      	mov	r0, r6
 80072c8:	4639      	mov	r1, r7
 80072ca:	f7f8 ffa1 	bl	8000210 <__aeabi_dsub>
 80072ce:	f7f9 fbed 	bl	8000aac <__aeabi_d2iz>
 80072d2:	aa0e      	add	r2, sp, #56	; 0x38
 80072d4:	3418      	adds	r4, #24
 80072d6:	f842 002a 	str.w	r0, [r2, sl, lsl #2]
 80072da:	f10a 0a01 	add.w	sl, sl, #1
 80072de:	f842 502a 	str.w	r5, [r2, sl, lsl #2]
 80072e2:	e006      	b.n	80072f2 <__kernel_rem_pio2+0x3ea>
 80072e4:	4630      	mov	r0, r6
 80072e6:	4639      	mov	r1, r7
 80072e8:	f7f9 fbe0 	bl	8000aac <__aeabi_d2iz>
 80072ec:	ab0e      	add	r3, sp, #56	; 0x38
 80072ee:	f843 002a 	str.w	r0, [r3, sl, lsl #2]
 80072f2:	4620      	mov	r0, r4
 80072f4:	ed9f 0b74 	vldr	d0, [pc, #464]	; 80074c8 <__kernel_rem_pio2+0x5c0>
 80072f8:	f000 fac2 	bl	8007880 <scalbn>
 80072fc:	f10a 0b01 	add.w	fp, sl, #1
 8007300:	a972      	add	r1, sp, #456	; 0x1c8
 8007302:	ec55 4b10 	vmov	r4, r5, d0
 8007306:	eb01 06cb 	add.w	r6, r1, fp, lsl #3
 800730a:	4657      	mov	r7, sl
 800730c:	2f00      	cmp	r7, #0
 800730e:	db16      	blt.n	800733e <__kernel_rem_pio2+0x436>
 8007310:	aa0e      	add	r2, sp, #56	; 0x38
 8007312:	f852 0027 	ldr.w	r0, [r2, r7, lsl #2]
 8007316:	f7f9 f8c9 	bl	80004ac <__aeabi_i2d>
 800731a:	4602      	mov	r2, r0
 800731c:	460b      	mov	r3, r1
 800731e:	4620      	mov	r0, r4
 8007320:	4629      	mov	r1, r5
 8007322:	f7f9 f929 	bl	8000578 <__aeabi_dmul>
 8007326:	2200      	movs	r2, #0
 8007328:	e966 0102 	strd	r0, r1, [r6, #-8]!
 800732c:	4b69      	ldr	r3, [pc, #420]	; (80074d4 <__kernel_rem_pio2+0x5cc>)
 800732e:	4620      	mov	r0, r4
 8007330:	4629      	mov	r1, r5
 8007332:	f7f9 f921 	bl	8000578 <__aeabi_dmul>
 8007336:	3f01      	subs	r7, #1
 8007338:	4604      	mov	r4, r0
 800733a:	460d      	mov	r5, r1
 800733c:	e7e6      	b.n	800730c <__kernel_rem_pio2+0x404>
 800733e:	ab72      	add	r3, sp, #456	; 0x1c8
 8007340:	eb03 08ca 	add.w	r8, r3, sl, lsl #3
 8007344:	2500      	movs	r5, #0
 8007346:	ebc5 030a 	rsb	r3, r5, sl
 800734a:	2b00      	cmp	r3, #0
 800734c:	db28      	blt.n	80073a0 <__kernel_rem_pio2+0x498>
 800734e:	ed9f 7b5c 	vldr	d7, [pc, #368]	; 80074c0 <__kernel_rem_pio2+0x5b8>
 8007352:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007356:	00ee      	lsls	r6, r5, #3
 8007358:	ebc6 0708 	rsb	r7, r6, r8
 800735c:	2400      	movs	r4, #0
 800735e:	9904      	ldr	r1, [sp, #16]
 8007360:	428c      	cmp	r4, r1
 8007362:	dc15      	bgt.n	8007390 <__kernel_rem_pio2+0x488>
 8007364:	42ac      	cmp	r4, r5
 8007366:	dc13      	bgt.n	8007390 <__kernel_rem_pio2+0x488>
 8007368:	4a5b      	ldr	r2, [pc, #364]	; (80074d8 <__kernel_rem_pio2+0x5d0>)
 800736a:	00e3      	lsls	r3, r4, #3
 800736c:	441a      	add	r2, r3
 800736e:	443b      	add	r3, r7
 8007370:	e9d2 0100 	ldrd	r0, r1, [r2]
 8007374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007378:	f7f9 f8fe 	bl	8000578 <__aeabi_dmul>
 800737c:	4602      	mov	r2, r0
 800737e:	460b      	mov	r3, r1
 8007380:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007384:	f7f8 ff46 	bl	8000214 <__adddf3>
 8007388:	3401      	adds	r4, #1
 800738a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800738e:	e7e6      	b.n	800735e <__kernel_rem_pio2+0x456>
 8007390:	ed9d 7b06 	vldr	d7, [sp, #24]
 8007394:	aa4a      	add	r2, sp, #296	; 0x128
 8007396:	4416      	add	r6, r2
 8007398:	ed86 7b00 	vstr	d7, [r6]
 800739c:	3501      	adds	r5, #1
 800739e:	e7d2      	b.n	8007346 <__kernel_rem_pio2+0x43e>
 80073a0:	9ca4      	ldr	r4, [sp, #656]	; 0x290
 80073a2:	2c03      	cmp	r4, #3
 80073a4:	f200 80f2 	bhi.w	800758c <__kernel_rem_pio2+0x684>
 80073a8:	e8df f004 	tbb	[pc, r4]
 80073ac:	0208080f 	.word	0x0208080f
 80073b0:	a94a      	add	r1, sp, #296	; 0x128
 80073b2:	eb01 08cb 	add.w	r8, r1, fp, lsl #3
 80073b6:	46c3      	mov	fp, r8
 80073b8:	46d4      	mov	ip, sl
 80073ba:	e057      	b.n	800746c <__kernel_rem_pio2+0x564>
 80073bc:	aa4a      	add	r2, sp, #296	; 0x128
 80073be:	eb02 05cb 	add.w	r5, r2, fp, lsl #3
 80073c2:	4654      	mov	r4, sl
 80073c4:	2200      	movs	r2, #0
 80073c6:	2300      	movs	r3, #0
 80073c8:	e01b      	b.n	8007402 <__kernel_rem_pio2+0x4fa>
 80073ca:	ab4a      	add	r3, sp, #296	; 0x128
 80073cc:	eb03 04cb 	add.w	r4, r3, fp, lsl #3
 80073d0:	2000      	movs	r0, #0
 80073d2:	2100      	movs	r1, #0
 80073d4:	f1ba 0f00 	cmp.w	sl, #0
 80073d8:	db06      	blt.n	80073e8 <__kernel_rem_pio2+0x4e0>
 80073da:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80073de:	f7f8 ff19 	bl	8000214 <__adddf3>
 80073e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80073e6:	e7f5      	b.n	80073d4 <__kernel_rem_pio2+0x4cc>
 80073e8:	f1b9 0f00 	cmp.w	r9, #0
 80073ec:	d003      	beq.n	80073f6 <__kernel_rem_pio2+0x4ee>
 80073ee:	4602      	mov	r2, r0
 80073f0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80073f4:	e001      	b.n	80073fa <__kernel_rem_pio2+0x4f2>
 80073f6:	4602      	mov	r2, r0
 80073f8:	460b      	mov	r3, r1
 80073fa:	9c08      	ldr	r4, [sp, #32]
 80073fc:	e9c4 2300 	strd	r2, r3, [r4]
 8007400:	e0c4      	b.n	800758c <__kernel_rem_pio2+0x684>
 8007402:	2c00      	cmp	r4, #0
 8007404:	db09      	blt.n	800741a <__kernel_rem_pio2+0x512>
 8007406:	4610      	mov	r0, r2
 8007408:	4619      	mov	r1, r3
 800740a:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800740e:	f7f8 ff01 	bl	8000214 <__adddf3>
 8007412:	3c01      	subs	r4, #1
 8007414:	4602      	mov	r2, r0
 8007416:	460b      	mov	r3, r1
 8007418:	e7f3      	b.n	8007402 <__kernel_rem_pio2+0x4fa>
 800741a:	f1b9 0f00 	cmp.w	r9, #0
 800741e:	d003      	beq.n	8007428 <__kernel_rem_pio2+0x520>
 8007420:	4610      	mov	r0, r2
 8007422:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007426:	e001      	b.n	800742c <__kernel_rem_pio2+0x524>
 8007428:	4610      	mov	r0, r2
 800742a:	4619      	mov	r1, r3
 800742c:	9d08      	ldr	r5, [sp, #32]
 800742e:	e9c5 0100 	strd	r0, r1, [r5]
 8007432:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8007436:	f7f8 feeb 	bl	8000210 <__aeabi_dsub>
 800743a:	2401      	movs	r4, #1
 800743c:	4554      	cmp	r4, sl
 800743e:	dc08      	bgt.n	8007452 <__kernel_rem_pio2+0x54a>
 8007440:	aa4a      	add	r2, sp, #296	; 0x128
 8007442:	eb02 03c4 	add.w	r3, r2, r4, lsl #3
 8007446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800744a:	f7f8 fee3 	bl	8000214 <__adddf3>
 800744e:	3401      	adds	r4, #1
 8007450:	e7f4      	b.n	800743c <__kernel_rem_pio2+0x534>
 8007452:	f1b9 0f00 	cmp.w	r9, #0
 8007456:	d003      	beq.n	8007460 <__kernel_rem_pio2+0x558>
 8007458:	4602      	mov	r2, r0
 800745a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800745e:	e001      	b.n	8007464 <__kernel_rem_pio2+0x55c>
 8007460:	4602      	mov	r2, r0
 8007462:	460b      	mov	r3, r1
 8007464:	9c08      	ldr	r4, [sp, #32]
 8007466:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800746a:	e08f      	b.n	800758c <__kernel_rem_pio2+0x684>
 800746c:	f1bc 0f00 	cmp.w	ip, #0
 8007470:	dd34      	ble.n	80074dc <__kernel_rem_pio2+0x5d4>
 8007472:	ed1b 7b04 	vldr	d7, [fp, #-16]
 8007476:	e95b 6702 	ldrd	r6, r7, [fp, #-8]
 800747a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800747e:	ec51 0b17 	vmov	r0, r1, d7
 8007482:	4632      	mov	r2, r6
 8007484:	463b      	mov	r3, r7
 8007486:	f8cd c004 	str.w	ip, [sp, #4]
 800748a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800748e:	f7f8 fec1 	bl	8000214 <__adddf3>
 8007492:	4604      	mov	r4, r0
 8007494:	460d      	mov	r5, r1
 8007496:	4622      	mov	r2, r4
 8007498:	462b      	mov	r3, r5
 800749a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800749e:	f7f8 feb7 	bl	8000210 <__aeabi_dsub>
 80074a2:	4602      	mov	r2, r0
 80074a4:	460b      	mov	r3, r1
 80074a6:	4630      	mov	r0, r6
 80074a8:	4639      	mov	r1, r7
 80074aa:	f7f8 feb3 	bl	8000214 <__adddf3>
 80074ae:	e96b 0102 	strd	r0, r1, [fp, #-8]!
 80074b2:	f8dd c004 	ldr.w	ip, [sp, #4]
 80074b6:	e94b 4502 	strd	r4, r5, [fp, #-8]
 80074ba:	e7d7      	b.n	800746c <__kernel_rem_pio2+0x564>
 80074bc:	f3af 8000 	nop.w
	...
 80074cc:	3ff00000 	.word	0x3ff00000
 80074d0:	41700000 	.word	0x41700000
 80074d4:	3e700000 	.word	0x3e700000
 80074d8:	08007d20 	.word	0x08007d20
 80074dc:	46c3      	mov	fp, r8
 80074de:	46d4      	mov	ip, sl
 80074e0:	f1bc 0f01 	cmp.w	ip, #1
 80074e4:	dd24      	ble.n	8007530 <__kernel_rem_pio2+0x628>
 80074e6:	ed1b 7b02 	vldr	d7, [fp, #-8]
 80074ea:	e95b 6704 	ldrd	r6, r7, [fp, #-16]
 80074ee:	f10c 3cff 	add.w	ip, ip, #4294967295
 80074f2:	ec53 2b17 	vmov	r2, r3, d7
 80074f6:	4630      	mov	r0, r6
 80074f8:	4639      	mov	r1, r7
 80074fa:	f8cd c004 	str.w	ip, [sp, #4]
 80074fe:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007502:	f7f8 fe87 	bl	8000214 <__adddf3>
 8007506:	4604      	mov	r4, r0
 8007508:	460d      	mov	r5, r1
 800750a:	4622      	mov	r2, r4
 800750c:	462b      	mov	r3, r5
 800750e:	4630      	mov	r0, r6
 8007510:	4639      	mov	r1, r7
 8007512:	f7f8 fe7d 	bl	8000210 <__aeabi_dsub>
 8007516:	4602      	mov	r2, r0
 8007518:	460b      	mov	r3, r1
 800751a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800751e:	f7f8 fe79 	bl	8000214 <__adddf3>
 8007522:	e96b 0102 	strd	r0, r1, [fp, #-8]!
 8007526:	f8dd c004 	ldr.w	ip, [sp, #4]
 800752a:	e94b 4502 	strd	r4, r5, [fp, #-8]
 800752e:	e7d7      	b.n	80074e0 <__kernel_rem_pio2+0x5d8>
 8007530:	4644      	mov	r4, r8
 8007532:	2000      	movs	r0, #0
 8007534:	2100      	movs	r1, #0
 8007536:	f1ba 0f01 	cmp.w	sl, #1
 800753a:	dd06      	ble.n	800754a <__kernel_rem_pio2+0x642>
 800753c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007540:	f7f8 fe68 	bl	8000214 <__adddf3>
 8007544:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007548:	e7f5      	b.n	8007536 <__kernel_rem_pio2+0x62e>
 800754a:	f1b9 0f00 	cmp.w	r9, #0
 800754e:	d10c      	bne.n	800756a <__kernel_rem_pio2+0x662>
 8007550:	ac9a      	add	r4, sp, #616	; 0x268
 8007552:	e974 2350 	ldrd	r2, r3, [r4, #-320]!	; 0x140
 8007556:	9d08      	ldr	r5, [sp, #32]
 8007558:	e9c5 2300 	strd	r2, r3, [r5]
 800755c:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 8007560:	e9c5 0104 	strd	r0, r1, [r5, #16]
 8007564:	e9c5 2302 	strd	r2, r3, [r5, #8]
 8007568:	e010      	b.n	800758c <__kernel_rem_pio2+0x684>
 800756a:	9c08      	ldr	r4, [sp, #32]
 800756c:	9b4a      	ldr	r3, [sp, #296]	; 0x128
 800756e:	6023      	str	r3, [r4, #0]
 8007570:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
 8007572:	6120      	str	r0, [r4, #16]
 8007574:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007578:	6063      	str	r3, [r4, #4]
 800757a:	9b4c      	ldr	r3, [sp, #304]	; 0x130
 800757c:	60a3      	str	r3, [r4, #8]
 800757e:	9b4d      	ldr	r3, [sp, #308]	; 0x134
 8007580:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007584:	60e3      	str	r3, [r4, #12]
 8007586:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800758a:	6163      	str	r3, [r4, #20]
 800758c:	9d02      	ldr	r5, [sp, #8]
 800758e:	f005 0007 	and.w	r0, r5, #7
 8007592:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8007596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800759a:	3c18      	subs	r4, #24
 800759c:	468a      	mov	sl, r1
 800759e:	a90e      	add	r1, sp, #56	; 0x38
 80075a0:	f851 302a 	ldr.w	r3, [r1, sl, lsl #2]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	f47f aea4 	bne.w	80072f2 <__kernel_rem_pio2+0x3ea>
 80075aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80075ae:	3c18      	subs	r4, #24
 80075b0:	e7f5      	b.n	800759e <__kernel_rem_pio2+0x696>
 80075b2:	bf00      	nop
 80075b4:	f3af 8000 	nop.w

080075b8 <__kernel_sin>:
 80075b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075bc:	ec55 4b10 	vmov	r4, r5, d0
 80075c0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80075c4:	b085      	sub	sp, #20
 80075c6:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80075ca:	ed8d 1b00 	vstr	d1, [sp]
 80075ce:	4682      	mov	sl, r0
 80075d0:	da07      	bge.n	80075e2 <__kernel_sin+0x2a>
 80075d2:	ee10 0a10 	vmov	r0, s0
 80075d6:	4629      	mov	r1, r5
 80075d8:	f7f9 fa68 	bl	8000aac <__aeabi_d2iz>
 80075dc:	2800      	cmp	r0, #0
 80075de:	f000 808c 	beq.w	80076fa <__kernel_sin+0x142>
 80075e2:	4622      	mov	r2, r4
 80075e4:	462b      	mov	r3, r5
 80075e6:	4620      	mov	r0, r4
 80075e8:	4629      	mov	r1, r5
 80075ea:	f7f8 ffc5 	bl	8000578 <__aeabi_dmul>
 80075ee:	4622      	mov	r2, r4
 80075f0:	462b      	mov	r3, r5
 80075f2:	4606      	mov	r6, r0
 80075f4:	460f      	mov	r7, r1
 80075f6:	f7f8 ffbf 	bl	8000578 <__aeabi_dmul>
 80075fa:	a346      	add	r3, pc, #280	; (adr r3, 8007714 <__kernel_sin+0x15c>)
 80075fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007600:	4680      	mov	r8, r0
 8007602:	4689      	mov	r9, r1
 8007604:	4630      	mov	r0, r6
 8007606:	4639      	mov	r1, r7
 8007608:	f7f8 ffb6 	bl	8000578 <__aeabi_dmul>
 800760c:	a343      	add	r3, pc, #268	; (adr r3, 800771c <__kernel_sin+0x164>)
 800760e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007612:	f7f8 fdfd 	bl	8000210 <__aeabi_dsub>
 8007616:	4602      	mov	r2, r0
 8007618:	460b      	mov	r3, r1
 800761a:	4630      	mov	r0, r6
 800761c:	4639      	mov	r1, r7
 800761e:	f7f8 ffab 	bl	8000578 <__aeabi_dmul>
 8007622:	a340      	add	r3, pc, #256	; (adr r3, 8007724 <__kernel_sin+0x16c>)
 8007624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007628:	f7f8 fdf4 	bl	8000214 <__adddf3>
 800762c:	4602      	mov	r2, r0
 800762e:	460b      	mov	r3, r1
 8007630:	4630      	mov	r0, r6
 8007632:	4639      	mov	r1, r7
 8007634:	f7f8 ffa0 	bl	8000578 <__aeabi_dmul>
 8007638:	a33c      	add	r3, pc, #240	; (adr r3, 800772c <__kernel_sin+0x174>)
 800763a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800763e:	f7f8 fde7 	bl	8000210 <__aeabi_dsub>
 8007642:	4602      	mov	r2, r0
 8007644:	460b      	mov	r3, r1
 8007646:	4630      	mov	r0, r6
 8007648:	4639      	mov	r1, r7
 800764a:	f7f8 ff95 	bl	8000578 <__aeabi_dmul>
 800764e:	a339      	add	r3, pc, #228	; (adr r3, 8007734 <__kernel_sin+0x17c>)
 8007650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007654:	f7f8 fdde 	bl	8000214 <__adddf3>
 8007658:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800765c:	f1ba 0f00 	cmp.w	sl, #0
 8007660:	d117      	bne.n	8007692 <__kernel_sin+0xda>
 8007662:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007666:	4630      	mov	r0, r6
 8007668:	4639      	mov	r1, r7
 800766a:	f7f8 ff85 	bl	8000578 <__aeabi_dmul>
 800766e:	a326      	add	r3, pc, #152	; (adr r3, 8007708 <__kernel_sin+0x150>)
 8007670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007674:	f7f8 fdcc 	bl	8000210 <__aeabi_dsub>
 8007678:	4602      	mov	r2, r0
 800767a:	460b      	mov	r3, r1
 800767c:	4640      	mov	r0, r8
 800767e:	4649      	mov	r1, r9
 8007680:	f7f8 ff7a 	bl	8000578 <__aeabi_dmul>
 8007684:	4602      	mov	r2, r0
 8007686:	460b      	mov	r3, r1
 8007688:	4620      	mov	r0, r4
 800768a:	4629      	mov	r1, r5
 800768c:	f7f8 fdc2 	bl	8000214 <__adddf3>
 8007690:	e035      	b.n	80076fe <__kernel_sin+0x146>
 8007692:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007696:	2200      	movs	r2, #0
 8007698:	4b1d      	ldr	r3, [pc, #116]	; (8007710 <__kernel_sin+0x158>)
 800769a:	f7f8 ff6d 	bl	8000578 <__aeabi_dmul>
 800769e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80076a2:	4682      	mov	sl, r0
 80076a4:	468b      	mov	fp, r1
 80076a6:	4640      	mov	r0, r8
 80076a8:	4649      	mov	r1, r9
 80076aa:	f7f8 ff65 	bl	8000578 <__aeabi_dmul>
 80076ae:	4602      	mov	r2, r0
 80076b0:	460b      	mov	r3, r1
 80076b2:	4650      	mov	r0, sl
 80076b4:	4659      	mov	r1, fp
 80076b6:	f7f8 fdab 	bl	8000210 <__aeabi_dsub>
 80076ba:	4602      	mov	r2, r0
 80076bc:	460b      	mov	r3, r1
 80076be:	4630      	mov	r0, r6
 80076c0:	4639      	mov	r1, r7
 80076c2:	f7f8 ff59 	bl	8000578 <__aeabi_dmul>
 80076c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80076ca:	f7f8 fda1 	bl	8000210 <__aeabi_dsub>
 80076ce:	a30e      	add	r3, pc, #56	; (adr r3, 8007708 <__kernel_sin+0x150>)
 80076d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076d4:	4606      	mov	r6, r0
 80076d6:	460f      	mov	r7, r1
 80076d8:	4640      	mov	r0, r8
 80076da:	4649      	mov	r1, r9
 80076dc:	f7f8 ff4c 	bl	8000578 <__aeabi_dmul>
 80076e0:	4602      	mov	r2, r0
 80076e2:	460b      	mov	r3, r1
 80076e4:	4630      	mov	r0, r6
 80076e6:	4639      	mov	r1, r7
 80076e8:	f7f8 fd94 	bl	8000214 <__adddf3>
 80076ec:	4602      	mov	r2, r0
 80076ee:	460b      	mov	r3, r1
 80076f0:	4620      	mov	r0, r4
 80076f2:	4629      	mov	r1, r5
 80076f4:	f7f8 fd8c 	bl	8000210 <__aeabi_dsub>
 80076f8:	e001      	b.n	80076fe <__kernel_sin+0x146>
 80076fa:	4620      	mov	r0, r4
 80076fc:	4629      	mov	r1, r5
 80076fe:	ec41 0b10 	vmov	d0, r0, r1
 8007702:	b005      	add	sp, #20
 8007704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007708:	55555549 	.word	0x55555549
 800770c:	3fc55555 	.word	0x3fc55555
 8007710:	3fe00000 	.word	0x3fe00000
 8007714:	5acfd57c 	.word	0x5acfd57c
 8007718:	3de5d93a 	.word	0x3de5d93a
 800771c:	8a2b9ceb 	.word	0x8a2b9ceb
 8007720:	3e5ae5e6 	.word	0x3e5ae5e6
 8007724:	57b1fe7d 	.word	0x57b1fe7d
 8007728:	3ec71de3 	.word	0x3ec71de3
 800772c:	19c161d5 	.word	0x19c161d5
 8007730:	3f2a01a0 	.word	0x3f2a01a0
 8007734:	1110f8a6 	.word	0x1110f8a6
 8007738:	3f811111 	.word	0x3f811111
 800773c:	f3af 8000 	nop.w

08007740 <fabs>:
 8007740:	ec51 0b10 	vmov	r0, r1, d0
 8007744:	ec53 2b10 	vmov	r2, r3, d0
 8007748:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800774c:	ec43 2b10 	vmov	d0, r2, r3
 8007750:	4770      	bx	lr

08007752 <finite>:
 8007752:	ec53 2b10 	vmov	r2, r3, d0
 8007756:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800775a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800775e:	0fc0      	lsrs	r0, r0, #31
 8007760:	4770      	bx	lr
 8007762:	0000      	movs	r0, r0
 8007764:	0000      	movs	r0, r0
	...

08007768 <floor>:
 8007768:	ec51 0b10 	vmov	r0, r1, d0
 800776c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007770:	f3c1 590a 	ubfx	r9, r1, #20, #11
 8007774:	f2a9 38ff 	subw	r8, r9, #1023	; 0x3ff
 8007778:	f1b8 0f13 	cmp.w	r8, #19
 800777c:	ee10 4a10 	vmov	r4, s0
 8007780:	460d      	mov	r5, r1
 8007782:	460e      	mov	r6, r1
 8007784:	4607      	mov	r7, r0
 8007786:	dc35      	bgt.n	80077f4 <floor+0x8c>
 8007788:	f1b8 0f00 	cmp.w	r8, #0
 800778c:	da15      	bge.n	80077ba <floor+0x52>
 800778e:	a336      	add	r3, pc, #216	; (adr r3, 8007868 <floor+0x100>)
 8007790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007794:	f7f8 fd3e 	bl	8000214 <__adddf3>
 8007798:	2200      	movs	r2, #0
 800779a:	2300      	movs	r3, #0
 800779c:	f7f9 f97c 	bl	8000a98 <__aeabi_dcmpgt>
 80077a0:	2800      	cmp	r0, #0
 80077a2:	d05a      	beq.n	800785a <floor+0xf2>
 80077a4:	2d00      	cmp	r5, #0
 80077a6:	da56      	bge.n	8007856 <floor+0xee>
 80077a8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80077ac:	4323      	orrs	r3, r4
 80077ae:	4b30      	ldr	r3, [pc, #192]	; (8007870 <floor+0x108>)
 80077b0:	f04f 0700 	mov.w	r7, #0
 80077b4:	bf18      	it	ne
 80077b6:	461e      	movne	r6, r3
 80077b8:	e04f      	b.n	800785a <floor+0xf2>
 80077ba:	4b2e      	ldr	r3, [pc, #184]	; (8007874 <floor+0x10c>)
 80077bc:	fa43 f908 	asr.w	r9, r3, r8
 80077c0:	ea09 0301 	and.w	r3, r9, r1
 80077c4:	4303      	orrs	r3, r0
 80077c6:	d04a      	beq.n	800785e <floor+0xf6>
 80077c8:	a327      	add	r3, pc, #156	; (adr r3, 8007868 <floor+0x100>)
 80077ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ce:	f7f8 fd21 	bl	8000214 <__adddf3>
 80077d2:	2200      	movs	r2, #0
 80077d4:	2300      	movs	r3, #0
 80077d6:	f7f9 f95f 	bl	8000a98 <__aeabi_dcmpgt>
 80077da:	2800      	cmp	r0, #0
 80077dc:	d03d      	beq.n	800785a <floor+0xf2>
 80077de:	2d00      	cmp	r5, #0
 80077e0:	da04      	bge.n	80077ec <floor+0x84>
 80077e2:	f44f 1680 	mov.w	r6, #1048576	; 0x100000
 80077e6:	fa46 f608 	asr.w	r6, r6, r8
 80077ea:	442e      	add	r6, r5
 80077ec:	ea26 0609 	bic.w	r6, r6, r9
 80077f0:	2700      	movs	r7, #0
 80077f2:	e032      	b.n	800785a <floor+0xf2>
 80077f4:	f1b8 0f33 	cmp.w	r8, #51	; 0x33
 80077f8:	dd08      	ble.n	800780c <floor+0xa4>
 80077fa:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
 80077fe:	d12e      	bne.n	800785e <floor+0xf6>
 8007800:	ee10 2a10 	vmov	r2, s0
 8007804:	460b      	mov	r3, r1
 8007806:	f7f8 fd05 	bl	8000214 <__adddf3>
 800780a:	e028      	b.n	800785e <floor+0xf6>
 800780c:	f2a9 4313 	subw	r3, r9, #1043	; 0x413
 8007810:	f04f 3aff 	mov.w	sl, #4294967295
 8007814:	fa2a fa03 	lsr.w	sl, sl, r3
 8007818:	ea1a 0f00 	tst.w	sl, r0
 800781c:	d01f      	beq.n	800785e <floor+0xf6>
 800781e:	a312      	add	r3, pc, #72	; (adr r3, 8007868 <floor+0x100>)
 8007820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007824:	f7f8 fcf6 	bl	8000214 <__adddf3>
 8007828:	2200      	movs	r2, #0
 800782a:	2300      	movs	r3, #0
 800782c:	f7f9 f934 	bl	8000a98 <__aeabi_dcmpgt>
 8007830:	b198      	cbz	r0, 800785a <floor+0xf2>
 8007832:	2d00      	cmp	r5, #0
 8007834:	da0c      	bge.n	8007850 <floor+0xe8>
 8007836:	f1b8 0f14 	cmp.w	r8, #20
 800783a:	d008      	beq.n	800784e <floor+0xe6>
 800783c:	f5c9 6986 	rsb	r9, r9, #1072	; 0x430
 8007840:	f109 0903 	add.w	r9, r9, #3
 8007844:	2701      	movs	r7, #1
 8007846:	fa07 f709 	lsl.w	r7, r7, r9
 800784a:	193f      	adds	r7, r7, r4
 800784c:	d300      	bcc.n	8007850 <floor+0xe8>
 800784e:	1c6e      	adds	r6, r5, #1
 8007850:	ea27 070a 	bic.w	r7, r7, sl
 8007854:	e001      	b.n	800785a <floor+0xf2>
 8007856:	2700      	movs	r7, #0
 8007858:	463e      	mov	r6, r7
 800785a:	4631      	mov	r1, r6
 800785c:	4638      	mov	r0, r7
 800785e:	ec41 0b10 	vmov	d0, r0, r1
 8007862:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007866:	bf00      	nop
 8007868:	8800759c 	.word	0x8800759c
 800786c:	7e37e43c 	.word	0x7e37e43c
 8007870:	bff00000 	.word	0xbff00000
 8007874:	000fffff 	.word	0x000fffff

08007878 <matherr>:
 8007878:	2000      	movs	r0, #0
 800787a:	4770      	bx	lr
 800787c:	0000      	movs	r0, r0
	...

08007880 <scalbn>:
 8007880:	b538      	push	{r3, r4, r5, lr}
 8007882:	eeb0 1a40 	vmov.f32	s2, s0
 8007886:	eef0 1a60 	vmov.f32	s3, s1
 800788a:	ec53 2b10 	vmov	r2, r3, d0
 800788e:	f3c3 510a 	ubfx	r1, r3, #20, #11
 8007892:	4604      	mov	r4, r0
 8007894:	461d      	mov	r5, r3
 8007896:	b9a1      	cbnz	r1, 80078c2 <scalbn+0x42>
 8007898:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800789c:	4313      	orrs	r3, r2
 800789e:	ec51 0b10 	vmov	r0, r1, d0
 80078a2:	d052      	beq.n	800794a <scalbn+0xca>
 80078a4:	4b2e      	ldr	r3, [pc, #184]	; (8007960 <scalbn+0xe0>)
 80078a6:	4d2f      	ldr	r5, [pc, #188]	; (8007964 <scalbn+0xe4>)
 80078a8:	2200      	movs	r2, #0
 80078aa:	f7f8 fe65 	bl	8000578 <__aeabi_dmul>
 80078ae:	42ac      	cmp	r4, r5
 80078b0:	ec41 0b11 	vmov	d1, r0, r1
 80078b4:	460b      	mov	r3, r1
 80078b6:	db37      	blt.n	8007928 <scalbn+0xa8>
 80078b8:	f3c3 510a 	ubfx	r1, r3, #20, #11
 80078bc:	461d      	mov	r5, r3
 80078be:	3936      	subs	r1, #54	; 0x36
 80078c0:	e00b      	b.n	80078da <scalbn+0x5a>
 80078c2:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80078c6:	4299      	cmp	r1, r3
 80078c8:	d107      	bne.n	80078da <scalbn+0x5a>
 80078ca:	ec51 0b10 	vmov	r0, r1, d0
 80078ce:	ee10 2a10 	vmov	r2, s0
 80078d2:	460b      	mov	r3, r1
 80078d4:	f7f8 fc9e 	bl	8000214 <__adddf3>
 80078d8:	e037      	b.n	800794a <scalbn+0xca>
 80078da:	190b      	adds	r3, r1, r4
 80078dc:	f240 72fe 	movw	r2, #2046	; 0x7fe
 80078e0:	4293      	cmp	r3, r2
 80078e2:	dc11      	bgt.n	8007908 <scalbn+0x88>
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	dd08      	ble.n	80078fa <scalbn+0x7a>
 80078e8:	f025 45ff 	bic.w	r5, r5, #2139095040	; 0x7f800000
 80078ec:	f425 05e0 	bic.w	r5, r5, #7340032	; 0x700000
 80078f0:	ec51 0b11 	vmov	r0, r1, d1
 80078f4:	ea45 5103 	orr.w	r1, r5, r3, lsl #20
 80078f8:	e027      	b.n	800794a <scalbn+0xca>
 80078fa:	f113 0f35 	cmn.w	r3, #53	; 0x35
 80078fe:	da17      	bge.n	8007930 <scalbn+0xb0>
 8007900:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007904:	429c      	cmp	r4, r3
 8007906:	dd09      	ble.n	800791c <scalbn+0x9c>
 8007908:	ed9f 0b11 	vldr	d0, [pc, #68]	; 8007950 <scalbn+0xd0>
 800790c:	f000 f830 	bl	8007970 <copysign>
 8007910:	a30f      	add	r3, pc, #60	; (adr r3, 8007950 <scalbn+0xd0>)
 8007912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007916:	ec51 0b10 	vmov	r0, r1, d0
 800791a:	e014      	b.n	8007946 <scalbn+0xc6>
 800791c:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8007958 <scalbn+0xd8>
 8007920:	f000 f826 	bl	8007970 <copysign>
 8007924:	ec51 0b10 	vmov	r0, r1, d0
 8007928:	a30b      	add	r3, pc, #44	; (adr r3, 8007958 <scalbn+0xd8>)
 800792a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800792e:	e00a      	b.n	8007946 <scalbn+0xc6>
 8007930:	f025 45ff 	bic.w	r5, r5, #2139095040	; 0x7f800000
 8007934:	3336      	adds	r3, #54	; 0x36
 8007936:	f425 05e0 	bic.w	r5, r5, #7340032	; 0x700000
 800793a:	ec51 0b11 	vmov	r0, r1, d1
 800793e:	ea45 5103 	orr.w	r1, r5, r3, lsl #20
 8007942:	4b09      	ldr	r3, [pc, #36]	; (8007968 <scalbn+0xe8>)
 8007944:	2200      	movs	r2, #0
 8007946:	f7f8 fe17 	bl	8000578 <__aeabi_dmul>
 800794a:	ec41 0b10 	vmov	d0, r0, r1
 800794e:	bd38      	pop	{r3, r4, r5, pc}
 8007950:	8800759c 	.word	0x8800759c
 8007954:	7e37e43c 	.word	0x7e37e43c
 8007958:	c2f8f359 	.word	0xc2f8f359
 800795c:	01a56e1f 	.word	0x01a56e1f
 8007960:	43500000 	.word	0x43500000
 8007964:	ffff3cb0 	.word	0xffff3cb0
 8007968:	3c900000 	.word	0x3c900000
 800796c:	f3af 8000 	nop.w

08007970 <copysign>:
 8007970:	b530      	push	{r4, r5, lr}
 8007972:	ec51 0b10 	vmov	r0, r1, d0
 8007976:	ec55 4b11 	vmov	r4, r5, d1
 800797a:	ec53 2b10 	vmov	r2, r3, d0
 800797e:	f005 4000 	and.w	r0, r5, #2147483648	; 0x80000000
 8007982:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007986:	ea40 0301 	orr.w	r3, r0, r1
 800798a:	ec43 2b10 	vmov	d0, r2, r3
 800798e:	bd30      	pop	{r4, r5, pc}

08007990 <__errno>:
 8007990:	4b01      	ldr	r3, [pc, #4]	; (8007998 <__errno+0x8>)
 8007992:	6818      	ldr	r0, [r3, #0]
 8007994:	4770      	bx	lr
 8007996:	bf00      	nop
 8007998:	200000f4 	.word	0x200000f4

0800799c <_init>:
 800799c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800799e:	bf00      	nop
 80079a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079a2:	bc08      	pop	{r3}
 80079a4:	469e      	mov	lr, r3
 80079a6:	4770      	bx	lr

080079a8 <_fini>:
 80079a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079aa:	bf00      	nop
 80079ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079ae:	bc08      	pop	{r3}
 80079b0:	469e      	mov	lr, r3
 80079b2:	4770      	bx	lr
