
446RE_GetTick.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002374  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08002544  08002544  00012544  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08002604  08002604  00012604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800260c  0800260c  0001260c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08002610  08002610  00012610  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000000  08002614  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000078  20000070  08002684  00020070  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200000e8  08002684  000200e8  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000d4bd  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001e56  00000000  00000000  0002d55d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002de6  00000000  00000000  0002f3b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000005b8  00000000  00000000  000321a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000710  00000000  00000000  00032758  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00003833  00000000  00000000  00032e68  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000278a  00000000  00000000  0003669b  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00038e25  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001640  00000000  00000000  00038ea4  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stab         00000084  00000000  00000000  0003a4e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stabstr      00000117  00000000  00000000  0003a568  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800252c 	.word	0x0800252c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	0800252c 	.word	0x0800252c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b97a 	b.w	80005bc <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	468c      	mov	ip, r1
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	9e08      	ldr	r6, [sp, #32]
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d151      	bne.n	8000394 <__udivmoddi4+0xb4>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d96d      	bls.n	80003d2 <__udivmoddi4+0xf2>
 80002f6:	fab2 fe82 	clz	lr, r2
 80002fa:	f1be 0f00 	cmp.w	lr, #0
 80002fe:	d00b      	beq.n	8000318 <__udivmoddi4+0x38>
 8000300:	f1ce 0c20 	rsb	ip, lr, #32
 8000304:	fa01 f50e 	lsl.w	r5, r1, lr
 8000308:	fa20 fc0c 	lsr.w	ip, r0, ip
 800030c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000310:	ea4c 0c05 	orr.w	ip, ip, r5
 8000314:	fa00 f40e 	lsl.w	r4, r0, lr
 8000318:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800031c:	0c25      	lsrs	r5, r4, #16
 800031e:	fbbc f8fa 	udiv	r8, ip, sl
 8000322:	fa1f f987 	uxth.w	r9, r7
 8000326:	fb0a cc18 	mls	ip, sl, r8, ip
 800032a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800032e:	fb08 f309 	mul.w	r3, r8, r9
 8000332:	42ab      	cmp	r3, r5
 8000334:	d90a      	bls.n	800034c <__udivmoddi4+0x6c>
 8000336:	19ed      	adds	r5, r5, r7
 8000338:	f108 32ff 	add.w	r2, r8, #4294967295
 800033c:	f080 8123 	bcs.w	8000586 <__udivmoddi4+0x2a6>
 8000340:	42ab      	cmp	r3, r5
 8000342:	f240 8120 	bls.w	8000586 <__udivmoddi4+0x2a6>
 8000346:	f1a8 0802 	sub.w	r8, r8, #2
 800034a:	443d      	add	r5, r7
 800034c:	1aed      	subs	r5, r5, r3
 800034e:	b2a4      	uxth	r4, r4
 8000350:	fbb5 f0fa 	udiv	r0, r5, sl
 8000354:	fb0a 5510 	mls	r5, sl, r0, r5
 8000358:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800035c:	fb00 f909 	mul.w	r9, r0, r9
 8000360:	45a1      	cmp	r9, r4
 8000362:	d909      	bls.n	8000378 <__udivmoddi4+0x98>
 8000364:	19e4      	adds	r4, r4, r7
 8000366:	f100 33ff 	add.w	r3, r0, #4294967295
 800036a:	f080 810a 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800036e:	45a1      	cmp	r9, r4
 8000370:	f240 8107 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000374:	3802      	subs	r0, #2
 8000376:	443c      	add	r4, r7
 8000378:	eba4 0409 	sub.w	r4, r4, r9
 800037c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000380:	2100      	movs	r1, #0
 8000382:	2e00      	cmp	r6, #0
 8000384:	d061      	beq.n	800044a <__udivmoddi4+0x16a>
 8000386:	fa24 f40e 	lsr.w	r4, r4, lr
 800038a:	2300      	movs	r3, #0
 800038c:	6034      	str	r4, [r6, #0]
 800038e:	6073      	str	r3, [r6, #4]
 8000390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000394:	428b      	cmp	r3, r1
 8000396:	d907      	bls.n	80003a8 <__udivmoddi4+0xc8>
 8000398:	2e00      	cmp	r6, #0
 800039a:	d054      	beq.n	8000446 <__udivmoddi4+0x166>
 800039c:	2100      	movs	r1, #0
 800039e:	e886 0021 	stmia.w	r6, {r0, r5}
 80003a2:	4608      	mov	r0, r1
 80003a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a8:	fab3 f183 	clz	r1, r3
 80003ac:	2900      	cmp	r1, #0
 80003ae:	f040 808e 	bne.w	80004ce <__udivmoddi4+0x1ee>
 80003b2:	42ab      	cmp	r3, r5
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xdc>
 80003b6:	4282      	cmp	r2, r0
 80003b8:	f200 80fa 	bhi.w	80005b0 <__udivmoddi4+0x2d0>
 80003bc:	1a84      	subs	r4, r0, r2
 80003be:	eb65 0503 	sbc.w	r5, r5, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	46ac      	mov	ip, r5
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d03f      	beq.n	800044a <__udivmoddi4+0x16a>
 80003ca:	e886 1010 	stmia.w	r6, {r4, ip}
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	b912      	cbnz	r2, 80003da <__udivmoddi4+0xfa>
 80003d4:	2701      	movs	r7, #1
 80003d6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003da:	fab7 fe87 	clz	lr, r7
 80003de:	f1be 0f00 	cmp.w	lr, #0
 80003e2:	d134      	bne.n	800044e <__udivmoddi4+0x16e>
 80003e4:	1beb      	subs	r3, r5, r7
 80003e6:	0c3a      	lsrs	r2, r7, #16
 80003e8:	fa1f fc87 	uxth.w	ip, r7
 80003ec:	2101      	movs	r1, #1
 80003ee:	fbb3 f8f2 	udiv	r8, r3, r2
 80003f2:	0c25      	lsrs	r5, r4, #16
 80003f4:	fb02 3318 	mls	r3, r2, r8, r3
 80003f8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003fc:	fb0c f308 	mul.w	r3, ip, r8
 8000400:	42ab      	cmp	r3, r5
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x134>
 8000404:	19ed      	adds	r5, r5, r7
 8000406:	f108 30ff 	add.w	r0, r8, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x132>
 800040c:	42ab      	cmp	r3, r5
 800040e:	f200 80d1 	bhi.w	80005b4 <__udivmoddi4+0x2d4>
 8000412:	4680      	mov	r8, r0
 8000414:	1aed      	subs	r5, r5, r3
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb5 f0f2 	udiv	r0, r5, r2
 800041c:	fb02 5510 	mls	r5, r2, r0, r5
 8000420:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000424:	fb0c fc00 	mul.w	ip, ip, r0
 8000428:	45a4      	cmp	ip, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x15c>
 800042c:	19e4      	adds	r4, r4, r7
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x15a>
 8000434:	45a4      	cmp	ip, r4
 8000436:	f200 80b8 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 040c 	sub.w	r4, r4, ip
 8000440:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000444:	e79d      	b.n	8000382 <__udivmoddi4+0xa2>
 8000446:	4631      	mov	r1, r6
 8000448:	4630      	mov	r0, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1ce 0420 	rsb	r4, lr, #32
 8000452:	fa05 f30e 	lsl.w	r3, r5, lr
 8000456:	fa07 f70e 	lsl.w	r7, r7, lr
 800045a:	fa20 f804 	lsr.w	r8, r0, r4
 800045e:	0c3a      	lsrs	r2, r7, #16
 8000460:	fa25 f404 	lsr.w	r4, r5, r4
 8000464:	ea48 0803 	orr.w	r8, r8, r3
 8000468:	fbb4 f1f2 	udiv	r1, r4, r2
 800046c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000470:	fb02 4411 	mls	r4, r2, r1, r4
 8000474:	fa1f fc87 	uxth.w	ip, r7
 8000478:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800047c:	fb01 f30c 	mul.w	r3, r1, ip
 8000480:	42ab      	cmp	r3, r5
 8000482:	fa00 f40e 	lsl.w	r4, r0, lr
 8000486:	d909      	bls.n	800049c <__udivmoddi4+0x1bc>
 8000488:	19ed      	adds	r5, r5, r7
 800048a:	f101 30ff 	add.w	r0, r1, #4294967295
 800048e:	f080 808a 	bcs.w	80005a6 <__udivmoddi4+0x2c6>
 8000492:	42ab      	cmp	r3, r5
 8000494:	f240 8087 	bls.w	80005a6 <__udivmoddi4+0x2c6>
 8000498:	3902      	subs	r1, #2
 800049a:	443d      	add	r5, r7
 800049c:	1aeb      	subs	r3, r5, r3
 800049e:	fa1f f588 	uxth.w	r5, r8
 80004a2:	fbb3 f0f2 	udiv	r0, r3, r2
 80004a6:	fb02 3310 	mls	r3, r2, r0, r3
 80004aa:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004ae:	fb00 f30c 	mul.w	r3, r0, ip
 80004b2:	42ab      	cmp	r3, r5
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x1e6>
 80004b6:	19ed      	adds	r5, r5, r7
 80004b8:	f100 38ff 	add.w	r8, r0, #4294967295
 80004bc:	d26f      	bcs.n	800059e <__udivmoddi4+0x2be>
 80004be:	42ab      	cmp	r3, r5
 80004c0:	d96d      	bls.n	800059e <__udivmoddi4+0x2be>
 80004c2:	3802      	subs	r0, #2
 80004c4:	443d      	add	r5, r7
 80004c6:	1aeb      	subs	r3, r5, r3
 80004c8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004cc:	e78f      	b.n	80003ee <__udivmoddi4+0x10e>
 80004ce:	f1c1 0720 	rsb	r7, r1, #32
 80004d2:	fa22 f807 	lsr.w	r8, r2, r7
 80004d6:	408b      	lsls	r3, r1
 80004d8:	fa05 f401 	lsl.w	r4, r5, r1
 80004dc:	ea48 0303 	orr.w	r3, r8, r3
 80004e0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004e4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004e8:	40fd      	lsrs	r5, r7
 80004ea:	ea4e 0e04 	orr.w	lr, lr, r4
 80004ee:	fbb5 f9fc 	udiv	r9, r5, ip
 80004f2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004f6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004fa:	fa1f f883 	uxth.w	r8, r3
 80004fe:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000502:	fb09 f408 	mul.w	r4, r9, r8
 8000506:	42ac      	cmp	r4, r5
 8000508:	fa02 f201 	lsl.w	r2, r2, r1
 800050c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000510:	d908      	bls.n	8000524 <__udivmoddi4+0x244>
 8000512:	18ed      	adds	r5, r5, r3
 8000514:	f109 30ff 	add.w	r0, r9, #4294967295
 8000518:	d243      	bcs.n	80005a2 <__udivmoddi4+0x2c2>
 800051a:	42ac      	cmp	r4, r5
 800051c:	d941      	bls.n	80005a2 <__udivmoddi4+0x2c2>
 800051e:	f1a9 0902 	sub.w	r9, r9, #2
 8000522:	441d      	add	r5, r3
 8000524:	1b2d      	subs	r5, r5, r4
 8000526:	fa1f fe8e 	uxth.w	lr, lr
 800052a:	fbb5 f0fc 	udiv	r0, r5, ip
 800052e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000532:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000536:	fb00 f808 	mul.w	r8, r0, r8
 800053a:	45a0      	cmp	r8, r4
 800053c:	d907      	bls.n	800054e <__udivmoddi4+0x26e>
 800053e:	18e4      	adds	r4, r4, r3
 8000540:	f100 35ff 	add.w	r5, r0, #4294967295
 8000544:	d229      	bcs.n	800059a <__udivmoddi4+0x2ba>
 8000546:	45a0      	cmp	r8, r4
 8000548:	d927      	bls.n	800059a <__udivmoddi4+0x2ba>
 800054a:	3802      	subs	r0, #2
 800054c:	441c      	add	r4, r3
 800054e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000552:	eba4 0408 	sub.w	r4, r4, r8
 8000556:	fba0 8902 	umull	r8, r9, r0, r2
 800055a:	454c      	cmp	r4, r9
 800055c:	46c6      	mov	lr, r8
 800055e:	464d      	mov	r5, r9
 8000560:	d315      	bcc.n	800058e <__udivmoddi4+0x2ae>
 8000562:	d012      	beq.n	800058a <__udivmoddi4+0x2aa>
 8000564:	b156      	cbz	r6, 800057c <__udivmoddi4+0x29c>
 8000566:	ebba 030e 	subs.w	r3, sl, lr
 800056a:	eb64 0405 	sbc.w	r4, r4, r5
 800056e:	fa04 f707 	lsl.w	r7, r4, r7
 8000572:	40cb      	lsrs	r3, r1
 8000574:	431f      	orrs	r7, r3
 8000576:	40cc      	lsrs	r4, r1
 8000578:	6037      	str	r7, [r6, #0]
 800057a:	6074      	str	r4, [r6, #4]
 800057c:	2100      	movs	r1, #0
 800057e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000582:	4618      	mov	r0, r3
 8000584:	e6f8      	b.n	8000378 <__udivmoddi4+0x98>
 8000586:	4690      	mov	r8, r2
 8000588:	e6e0      	b.n	800034c <__udivmoddi4+0x6c>
 800058a:	45c2      	cmp	sl, r8
 800058c:	d2ea      	bcs.n	8000564 <__udivmoddi4+0x284>
 800058e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000592:	eb69 0503 	sbc.w	r5, r9, r3
 8000596:	3801      	subs	r0, #1
 8000598:	e7e4      	b.n	8000564 <__udivmoddi4+0x284>
 800059a:	4628      	mov	r0, r5
 800059c:	e7d7      	b.n	800054e <__udivmoddi4+0x26e>
 800059e:	4640      	mov	r0, r8
 80005a0:	e791      	b.n	80004c6 <__udivmoddi4+0x1e6>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e7be      	b.n	8000524 <__udivmoddi4+0x244>
 80005a6:	4601      	mov	r1, r0
 80005a8:	e778      	b.n	800049c <__udivmoddi4+0x1bc>
 80005aa:	3802      	subs	r0, #2
 80005ac:	443c      	add	r4, r7
 80005ae:	e745      	b.n	800043c <__udivmoddi4+0x15c>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e708      	b.n	80003c6 <__udivmoddi4+0xe6>
 80005b4:	f1a8 0802 	sub.w	r8, r8, #2
 80005b8:	443d      	add	r5, r7
 80005ba:	e72b      	b.n	8000414 <__udivmoddi4+0x134>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005c0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005c2:	4a0e      	ldr	r2, [pc, #56]	; (80005fc <HAL_InitTick+0x3c>)
 80005c4:	4b0e      	ldr	r3, [pc, #56]	; (8000600 <HAL_InitTick+0x40>)
{
 80005c6:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005c8:	7818      	ldrb	r0, [r3, #0]
 80005ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ce:	fbb3 f3f0 	udiv	r3, r3, r0
 80005d2:	6810      	ldr	r0, [r2, #0]
 80005d4:	fbb0 f0f3 	udiv	r0, r0, r3
 80005d8:	f000 f8a8 	bl	800072c <HAL_SYSTICK_Config>
 80005dc:	4604      	mov	r4, r0
 80005de:	b958      	cbnz	r0, 80005f8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005e0:	2d0f      	cmp	r5, #15
 80005e2:	d809      	bhi.n	80005f8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005e4:	4602      	mov	r2, r0
 80005e6:	4629      	mov	r1, r5
 80005e8:	f04f 30ff 	mov.w	r0, #4294967295
 80005ec:	f000 f85e 	bl	80006ac <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005f0:	4b04      	ldr	r3, [pc, #16]	; (8000604 <HAL_InitTick+0x44>)
 80005f2:	4620      	mov	r0, r4
 80005f4:	601d      	str	r5, [r3, #0]
 80005f6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80005f8:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80005fa:	bd38      	pop	{r3, r4, r5, pc}
 80005fc:	20000008 	.word	0x20000008
 8000600:	20000000 	.word	0x20000000
 8000604:	20000004 	.word	0x20000004

08000608 <HAL_Init>:
{
 8000608:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800060a:	4b0b      	ldr	r3, [pc, #44]	; (8000638 <HAL_Init+0x30>)
 800060c:	681a      	ldr	r2, [r3, #0]
 800060e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000612:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000614:	681a      	ldr	r2, [r3, #0]
 8000616:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800061a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800061c:	681a      	ldr	r2, [r3, #0]
 800061e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000622:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000624:	2003      	movs	r0, #3
 8000626:	f000 f82f 	bl	8000688 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800062a:	2000      	movs	r0, #0
 800062c:	f7ff ffc8 	bl	80005c0 <HAL_InitTick>
  HAL_MspInit();
 8000630:	f000 ff46 	bl	80014c0 <HAL_MspInit>
}
 8000634:	2000      	movs	r0, #0
 8000636:	bd08      	pop	{r3, pc}
 8000638:	40023c00 	.word	0x40023c00

0800063c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800063c:	4a03      	ldr	r2, [pc, #12]	; (800064c <HAL_IncTick+0x10>)
 800063e:	4b04      	ldr	r3, [pc, #16]	; (8000650 <HAL_IncTick+0x14>)
 8000640:	6811      	ldr	r1, [r2, #0]
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	440b      	add	r3, r1
 8000646:	6013      	str	r3, [r2, #0]
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	200000a0 	.word	0x200000a0
 8000650:	20000000 	.word	0x20000000

08000654 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000654:	4b01      	ldr	r3, [pc, #4]	; (800065c <HAL_GetTick+0x8>)
 8000656:	6818      	ldr	r0, [r3, #0]
}
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	200000a0 	.word	0x200000a0

08000660 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000660:	b538      	push	{r3, r4, r5, lr}
 8000662:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000664:	f7ff fff6 	bl	8000654 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000668:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800066a:	bf1c      	itt	ne
 800066c:	4b05      	ldrne	r3, [pc, #20]	; (8000684 <HAL_Delay+0x24>)
 800066e:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000670:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000672:	bf18      	it	ne
 8000674:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000676:	f7ff ffed 	bl	8000654 <HAL_GetTick>
 800067a:	1b40      	subs	r0, r0, r5
 800067c:	4284      	cmp	r4, r0
 800067e:	d8fa      	bhi.n	8000676 <HAL_Delay+0x16>
  {
  }
}
 8000680:	bd38      	pop	{r3, r4, r5, pc}
 8000682:	bf00      	nop
 8000684:	20000000 	.word	0x20000000

08000688 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000688:	4a07      	ldr	r2, [pc, #28]	; (80006a8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800068a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800068c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000690:	041b      	lsls	r3, r3, #16
 8000692:	0c1b      	lsrs	r3, r3, #16
 8000694:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000698:	0200      	lsls	r0, r0, #8
 800069a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800069e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80006a2:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80006a4:	60d3      	str	r3, [r2, #12]
 80006a6:	4770      	bx	lr
 80006a8:	e000ed00 	.word	0xe000ed00

080006ac <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006ac:	4b17      	ldr	r3, [pc, #92]	; (800070c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80006ae:	b530      	push	{r4, r5, lr}
 80006b0:	68dc      	ldr	r4, [r3, #12]
 80006b2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006b6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006ba:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006bc:	2b04      	cmp	r3, #4
 80006be:	bf28      	it	cs
 80006c0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006c2:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006c4:	f04f 0501 	mov.w	r5, #1
 80006c8:	fa05 f303 	lsl.w	r3, r5, r3
 80006cc:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006d0:	bf8c      	ite	hi
 80006d2:	3c03      	subhi	r4, #3
 80006d4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006d6:	4019      	ands	r1, r3
 80006d8:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006da:	fa05 f404 	lsl.w	r4, r5, r4
 80006de:	3c01      	subs	r4, #1
 80006e0:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80006e2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006e4:	ea42 0201 	orr.w	r2, r2, r1
 80006e8:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ec:	bfaf      	iteee	ge
 80006ee:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f2:	f000 000f 	andlt.w	r0, r0, #15
 80006f6:	4b06      	ldrlt	r3, [pc, #24]	; (8000710 <HAL_NVIC_SetPriority+0x64>)
 80006f8:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006fa:	bfa5      	ittet	ge
 80006fc:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000700:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000702:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000704:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000708:	bd30      	pop	{r4, r5, pc}
 800070a:	bf00      	nop
 800070c:	e000ed00 	.word	0xe000ed00
 8000710:	e000ed14 	.word	0xe000ed14

08000714 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000714:	0942      	lsrs	r2, r0, #5
 8000716:	2301      	movs	r3, #1
 8000718:	f000 001f 	and.w	r0, r0, #31
 800071c:	fa03 f000 	lsl.w	r0, r3, r0
 8000720:	4b01      	ldr	r3, [pc, #4]	; (8000728 <HAL_NVIC_EnableIRQ+0x14>)
 8000722:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000726:	4770      	bx	lr
 8000728:	e000e100 	.word	0xe000e100

0800072c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800072c:	3801      	subs	r0, #1
 800072e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000732:	d20a      	bcs.n	800074a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000734:	4b06      	ldr	r3, [pc, #24]	; (8000750 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000736:	4a07      	ldr	r2, [pc, #28]	; (8000754 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000738:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800073a:	21f0      	movs	r1, #240	; 0xf0
 800073c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000740:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000742:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000744:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000746:	601a      	str	r2, [r3, #0]
 8000748:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800074a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	e000e010 	.word	0xe000e010
 8000754:	e000ed00 	.word	0xe000ed00

08000758 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000758:	4b04      	ldr	r3, [pc, #16]	; (800076c <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800075a:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800075c:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800075e:	bf0c      	ite	eq
 8000760:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000764:	f022 0204 	bicne.w	r2, r2, #4
 8000768:	601a      	str	r2, [r3, #0]
 800076a:	4770      	bx	lr
 800076c:	e000e010 	.word	0xe000e010

08000770 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000770:	4770      	bx	lr

08000772 <HAL_SYSTICK_IRQHandler>:
{
 8000772:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000774:	f7ff fffc 	bl	8000770 <HAL_SYSTICK_Callback>
 8000778:	bd08      	pop	{r3, pc}
	...

0800077c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800077c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000780:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000782:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000784:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8000928 <HAL_GPIO_Init+0x1ac>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000788:	4a65      	ldr	r2, [pc, #404]	; (8000920 <HAL_GPIO_Init+0x1a4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800078a:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 800092c <HAL_GPIO_Init+0x1b0>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800078e:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000790:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8000792:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000796:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8000798:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800079c:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 80007a0:	45b6      	cmp	lr, r6
 80007a2:	f040 80aa 	bne.w	80008fa <HAL_GPIO_Init+0x17e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007a6:	684c      	ldr	r4, [r1, #4]
 80007a8:	f024 0710 	bic.w	r7, r4, #16
 80007ac:	2f02      	cmp	r7, #2
 80007ae:	d116      	bne.n	80007de <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 80007b0:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80007b4:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80007b8:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80007bc:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80007c0:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80007c4:	f04f 0c0f 	mov.w	ip, #15
 80007c8:	fa0c fc0b 	lsl.w	ip, ip, fp
 80007cc:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80007d0:	690d      	ldr	r5, [r1, #16]
 80007d2:	fa05 f50b 	lsl.w	r5, r5, fp
 80007d6:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 80007da:	f8ca 5020 	str.w	r5, [sl, #32]
 80007de:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80007e2:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80007e4:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80007e8:	fa05 f50a 	lsl.w	r5, r5, sl
 80007ec:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80007ee:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80007f2:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80007f6:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007fa:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80007fc:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000800:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000802:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000806:	d811      	bhi.n	800082c <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8000808:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800080a:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 800080e:	68cf      	ldr	r7, [r1, #12]
 8000810:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000814:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8000818:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800081a:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800081c:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000820:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000824:	409f      	lsls	r7, r3
 8000826:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 800082a:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 800082c:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800082e:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000830:	688f      	ldr	r7, [r1, #8]
 8000832:	fa07 f70a 	lsl.w	r7, r7, sl
 8000836:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000838:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800083a:	00e5      	lsls	r5, r4, #3
 800083c:	d55d      	bpl.n	80008fa <HAL_GPIO_Init+0x17e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800083e:	f04f 0b00 	mov.w	fp, #0
 8000842:	f8cd b00c 	str.w	fp, [sp, #12]
 8000846:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800084a:	4d36      	ldr	r5, [pc, #216]	; (8000924 <HAL_GPIO_Init+0x1a8>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800084c:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000850:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000854:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000858:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 800085c:	9703      	str	r7, [sp, #12]
 800085e:	9f03      	ldr	r7, [sp, #12]
 8000860:	f023 0703 	bic.w	r7, r3, #3
 8000864:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000868:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800086c:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000870:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000874:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000878:	f04f 0e0f 	mov.w	lr, #15
 800087c:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000880:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000882:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000886:	d03f      	beq.n	8000908 <HAL_GPIO_Init+0x18c>
 8000888:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800088c:	42a8      	cmp	r0, r5
 800088e:	d03d      	beq.n	800090c <HAL_GPIO_Init+0x190>
 8000890:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000894:	42a8      	cmp	r0, r5
 8000896:	d03b      	beq.n	8000910 <HAL_GPIO_Init+0x194>
 8000898:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800089c:	42a8      	cmp	r0, r5
 800089e:	d039      	beq.n	8000914 <HAL_GPIO_Init+0x198>
 80008a0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80008a4:	42a8      	cmp	r0, r5
 80008a6:	d037      	beq.n	8000918 <HAL_GPIO_Init+0x19c>
 80008a8:	4548      	cmp	r0, r9
 80008aa:	d037      	beq.n	800091c <HAL_GPIO_Init+0x1a0>
 80008ac:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80008b0:	42a8      	cmp	r0, r5
 80008b2:	bf14      	ite	ne
 80008b4:	2507      	movne	r5, #7
 80008b6:	2506      	moveq	r5, #6
 80008b8:	fa05 f50c 	lsl.w	r5, r5, ip
 80008bc:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 80008c0:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 80008c2:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80008c4:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80008c6:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80008ca:	bf0c      	ite	eq
 80008cc:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80008ce:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 80008d0:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 80008d2:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80008d4:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80008d8:	bf0c      	ite	eq
 80008da:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80008dc:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 80008de:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80008e0:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80008e2:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80008e6:	bf0c      	ite	eq
 80008e8:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80008ea:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 80008ec:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 80008ee:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80008f0:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80008f2:	bf54      	ite	pl
 80008f4:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 80008f6:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 80008f8:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80008fa:	3301      	adds	r3, #1
 80008fc:	2b10      	cmp	r3, #16
 80008fe:	f47f af48 	bne.w	8000792 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000902:	b005      	add	sp, #20
 8000904:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000908:	465d      	mov	r5, fp
 800090a:	e7d5      	b.n	80008b8 <HAL_GPIO_Init+0x13c>
 800090c:	2501      	movs	r5, #1
 800090e:	e7d3      	b.n	80008b8 <HAL_GPIO_Init+0x13c>
 8000910:	2502      	movs	r5, #2
 8000912:	e7d1      	b.n	80008b8 <HAL_GPIO_Init+0x13c>
 8000914:	2503      	movs	r5, #3
 8000916:	e7cf      	b.n	80008b8 <HAL_GPIO_Init+0x13c>
 8000918:	2504      	movs	r5, #4
 800091a:	e7cd      	b.n	80008b8 <HAL_GPIO_Init+0x13c>
 800091c:	2505      	movs	r5, #5
 800091e:	e7cb      	b.n	80008b8 <HAL_GPIO_Init+0x13c>
 8000920:	40013c00 	.word	0x40013c00
 8000924:	40020000 	.word	0x40020000
 8000928:	40023800 	.word	0x40023800
 800092c:	40021400 	.word	0x40021400

08000930 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000930:	b10a      	cbz	r2, 8000936 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000932:	6181      	str	r1, [r0, #24]
 8000934:	4770      	bx	lr
 8000936:	0409      	lsls	r1, r1, #16
 8000938:	e7fb      	b.n	8000932 <HAL_GPIO_WritePin+0x2>

0800093a <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 800093a:	6943      	ldr	r3, [r0, #20]
 800093c:	4059      	eors	r1, r3
 800093e:	6141      	str	r1, [r0, #20]
 8000940:	4770      	bx	lr
	...

08000944 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000944:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000946:	4b04      	ldr	r3, [pc, #16]	; (8000958 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8000948:	6959      	ldr	r1, [r3, #20]
 800094a:	4201      	tst	r1, r0
 800094c:	d002      	beq.n	8000954 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800094e:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000950:	f000 fcb0 	bl	80012b4 <HAL_GPIO_EXTI_Callback>
 8000954:	bd08      	pop	{r3, pc}
 8000956:	bf00      	nop
 8000958:	40013c00 	.word	0x40013c00

0800095c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800095c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 800095e:	2300      	movs	r3, #0
 8000960:	9301      	str	r3, [sp, #4]
 8000962:	4b18      	ldr	r3, [pc, #96]	; (80009c4 <HAL_PWREx_EnableOverDrive+0x68>)
  __HAL_PWR_OVERDRIVE_ENABLE();

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000964:	4c18      	ldr	r4, [pc, #96]	; (80009c8 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000966:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000968:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800096c:	641a      	str	r2, [r3, #64]	; 0x40
 800096e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000970:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000974:	9301      	str	r3, [sp, #4]
 8000976:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000978:	4b14      	ldr	r3, [pc, #80]	; (80009cc <HAL_PWREx_EnableOverDrive+0x70>)
 800097a:	2201      	movs	r2, #1
 800097c:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 800097e:	f7ff fe69 	bl	8000654 <HAL_GetTick>
 8000982:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000984:	6863      	ldr	r3, [r4, #4]
 8000986:	03da      	lsls	r2, r3, #15
 8000988:	d50b      	bpl.n	80009a2 <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800098a:	4b11      	ldr	r3, [pc, #68]	; (80009d0 <HAL_PWREx_EnableOverDrive+0x74>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800098c:	4c0e      	ldr	r4, [pc, #56]	; (80009c8 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800098e:	2201      	movs	r2, #1
 8000990:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8000992:	f7ff fe5f 	bl	8000654 <HAL_GetTick>
 8000996:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000998:	6863      	ldr	r3, [r4, #4]
 800099a:	039b      	lsls	r3, r3, #14
 800099c:	d50a      	bpl.n	80009b4 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 800099e:	2000      	movs	r0, #0
 80009a0:	e006      	b.n	80009b0 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80009a2:	f7ff fe57 	bl	8000654 <HAL_GetTick>
 80009a6:	1b40      	subs	r0, r0, r5
 80009a8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80009ac:	d9ea      	bls.n	8000984 <HAL_PWREx_EnableOverDrive+0x28>
      return HAL_TIMEOUT;
 80009ae:	2003      	movs	r0, #3
}
 80009b0:	b003      	add	sp, #12
 80009b2:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80009b4:	f7ff fe4e 	bl	8000654 <HAL_GetTick>
 80009b8:	1b40      	subs	r0, r0, r5
 80009ba:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80009be:	d9eb      	bls.n	8000998 <HAL_PWREx_EnableOverDrive+0x3c>
 80009c0:	e7f5      	b.n	80009ae <HAL_PWREx_EnableOverDrive+0x52>
 80009c2:	bf00      	nop
 80009c4:	40023800 	.word	0x40023800
 80009c8:	40007000 	.word	0x40007000
 80009cc:	420e0040 	.word	0x420e0040
 80009d0:	420e0044 	.word	0x420e0044

080009d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80009d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80009d8:	460d      	mov	r5, r1
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80009da:	4604      	mov	r4, r0
 80009dc:	b910      	cbnz	r0, 80009e4 <HAL_RCC_ClockConfig+0x10>
  {
    return HAL_ERROR;
 80009de:	2001      	movs	r0, #1
 80009e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80009e4:	4b44      	ldr	r3, [pc, #272]	; (8000af8 <HAL_RCC_ClockConfig+0x124>)
 80009e6:	681a      	ldr	r2, [r3, #0]
 80009e8:	f002 020f 	and.w	r2, r2, #15
 80009ec:	428a      	cmp	r2, r1
 80009ee:	d328      	bcc.n	8000a42 <HAL_RCC_ClockConfig+0x6e>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80009f0:	6821      	ldr	r1, [r4, #0]
 80009f2:	078f      	lsls	r7, r1, #30
 80009f4:	d42d      	bmi.n	8000a52 <HAL_RCC_ClockConfig+0x7e>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80009f6:	07c8      	lsls	r0, r1, #31
 80009f8:	d440      	bmi.n	8000a7c <HAL_RCC_ClockConfig+0xa8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80009fa:	4b3f      	ldr	r3, [pc, #252]	; (8000af8 <HAL_RCC_ClockConfig+0x124>)
 80009fc:	681a      	ldr	r2, [r3, #0]
 80009fe:	f002 020f 	and.w	r2, r2, #15
 8000a02:	4295      	cmp	r5, r2
 8000a04:	d366      	bcc.n	8000ad4 <HAL_RCC_ClockConfig+0x100>
      return HAL_ERROR;
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000a06:	6822      	ldr	r2, [r4, #0]
 8000a08:	0751      	lsls	r1, r2, #29
 8000a0a:	d46c      	bmi.n	8000ae6 <HAL_RCC_ClockConfig+0x112>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000a0c:	0713      	lsls	r3, r2, #28
 8000a0e:	d507      	bpl.n	8000a20 <HAL_RCC_ClockConfig+0x4c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000a10:	4a3a      	ldr	r2, [pc, #232]	; (8000afc <HAL_RCC_ClockConfig+0x128>)
 8000a12:	6921      	ldr	r1, [r4, #16]
 8000a14:	6893      	ldr	r3, [r2, #8]
 8000a16:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000a1a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000a1e:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000a20:	f000 f898 	bl	8000b54 <HAL_RCC_GetSysClockFreq>
 8000a24:	4b35      	ldr	r3, [pc, #212]	; (8000afc <HAL_RCC_ClockConfig+0x128>)
 8000a26:	4a36      	ldr	r2, [pc, #216]	; (8000b00 <HAL_RCC_ClockConfig+0x12c>)
 8000a28:	689b      	ldr	r3, [r3, #8]
 8000a2a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000a2e:	5cd3      	ldrb	r3, [r2, r3]
 8000a30:	40d8      	lsrs	r0, r3
 8000a32:	4b34      	ldr	r3, [pc, #208]	; (8000b04 <HAL_RCC_ClockConfig+0x130>)
 8000a34:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8000a36:	2000      	movs	r0, #0
 8000a38:	f7ff fdc2 	bl	80005c0 <HAL_InitTick>

  return HAL_OK;
 8000a3c:	2000      	movs	r0, #0
 8000a3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000a42:	b2ca      	uxtb	r2, r1
 8000a44:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	f003 030f 	and.w	r3, r3, #15
 8000a4c:	4299      	cmp	r1, r3
 8000a4e:	d1c6      	bne.n	80009de <HAL_RCC_ClockConfig+0xa>
 8000a50:	e7ce      	b.n	80009f0 <HAL_RCC_ClockConfig+0x1c>
 8000a52:	4b2a      	ldr	r3, [pc, #168]	; (8000afc <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000a54:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000a58:	bf1e      	ittt	ne
 8000a5a:	689a      	ldrne	r2, [r3, #8]
 8000a5c:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8000a60:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000a62:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000a64:	bf42      	ittt	mi
 8000a66:	689a      	ldrmi	r2, [r3, #8]
 8000a68:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8000a6c:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000a6e:	689a      	ldr	r2, [r3, #8]
 8000a70:	68a0      	ldr	r0, [r4, #8]
 8000a72:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000a76:	4302      	orrs	r2, r0
 8000a78:	609a      	str	r2, [r3, #8]
 8000a7a:	e7bc      	b.n	80009f6 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000a7c:	6862      	ldr	r2, [r4, #4]
 8000a7e:	4b1f      	ldr	r3, [pc, #124]	; (8000afc <HAL_RCC_ClockConfig+0x128>)
 8000a80:	2a01      	cmp	r2, #1
 8000a82:	d11d      	bne.n	8000ac0 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a8a:	d0a8      	beq.n	80009de <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000a8c:	4e1b      	ldr	r6, [pc, #108]	; (8000afc <HAL_RCC_ClockConfig+0x128>)
 8000a8e:	68b3      	ldr	r3, [r6, #8]
 8000a90:	f023 0303 	bic.w	r3, r3, #3
 8000a94:	4313      	orrs	r3, r2
 8000a96:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000a98:	f7ff fddc 	bl	8000654 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a9c:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000aa0:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000aa2:	68b3      	ldr	r3, [r6, #8]
 8000aa4:	6862      	ldr	r2, [r4, #4]
 8000aa6:	f003 030c 	and.w	r3, r3, #12
 8000aaa:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000aae:	d0a4      	beq.n	80009fa <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ab0:	f7ff fdd0 	bl	8000654 <HAL_GetTick>
 8000ab4:	1bc0      	subs	r0, r0, r7
 8000ab6:	4540      	cmp	r0, r8
 8000ab8:	d9f3      	bls.n	8000aa2 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8000aba:	2003      	movs	r0, #3
}
 8000abc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000ac0:	1e91      	subs	r1, r2, #2
 8000ac2:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ac4:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000ac6:	d802      	bhi.n	8000ace <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ac8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000acc:	e7dd      	b.n	8000a8a <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ace:	f013 0f02 	tst.w	r3, #2
 8000ad2:	e7da      	b.n	8000a8a <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ad4:	b2ea      	uxtb	r2, r5
 8000ad6:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	f003 030f 	and.w	r3, r3, #15
 8000ade:	429d      	cmp	r5, r3
 8000ae0:	f47f af7d 	bne.w	80009de <HAL_RCC_ClockConfig+0xa>
 8000ae4:	e78f      	b.n	8000a06 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000ae6:	4905      	ldr	r1, [pc, #20]	; (8000afc <HAL_RCC_ClockConfig+0x128>)
 8000ae8:	68e0      	ldr	r0, [r4, #12]
 8000aea:	688b      	ldr	r3, [r1, #8]
 8000aec:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000af0:	4303      	orrs	r3, r0
 8000af2:	608b      	str	r3, [r1, #8]
 8000af4:	e78a      	b.n	8000a0c <HAL_RCC_ClockConfig+0x38>
 8000af6:	bf00      	nop
 8000af8:	40023c00 	.word	0x40023c00
 8000afc:	40023800 	.word	0x40023800
 8000b00:	08002551 	.word	0x08002551
 8000b04:	20000008 	.word	0x20000008

08000b08 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8000b08:	4b01      	ldr	r3, [pc, #4]	; (8000b10 <HAL_RCC_GetHCLKFreq+0x8>)
 8000b0a:	6818      	ldr	r0, [r3, #0]
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	20000008 	.word	0x20000008

08000b14 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000b14:	4b04      	ldr	r3, [pc, #16]	; (8000b28 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000b16:	4a05      	ldr	r2, [pc, #20]	; (8000b2c <HAL_RCC_GetPCLK1Freq+0x18>)
 8000b18:	689b      	ldr	r3, [r3, #8]
 8000b1a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8000b1e:	5cd3      	ldrb	r3, [r2, r3]
 8000b20:	4a03      	ldr	r2, [pc, #12]	; (8000b30 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000b22:	6810      	ldr	r0, [r2, #0]
}
 8000b24:	40d8      	lsrs	r0, r3
 8000b26:	4770      	bx	lr
 8000b28:	40023800 	.word	0x40023800
 8000b2c:	08002561 	.word	0x08002561
 8000b30:	20000008 	.word	0x20000008

08000b34 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000b34:	4b04      	ldr	r3, [pc, #16]	; (8000b48 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000b36:	4a05      	ldr	r2, [pc, #20]	; (8000b4c <HAL_RCC_GetPCLK2Freq+0x18>)
 8000b38:	689b      	ldr	r3, [r3, #8]
 8000b3a:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8000b3e:	5cd3      	ldrb	r3, [r2, r3]
 8000b40:	4a03      	ldr	r2, [pc, #12]	; (8000b50 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000b42:	6810      	ldr	r0, [r2, #0]
}
 8000b44:	40d8      	lsrs	r0, r3
 8000b46:	4770      	bx	lr
 8000b48:	40023800 	.word	0x40023800
 8000b4c:	08002561 	.word	0x08002561
 8000b50:	20000008 	.word	0x20000008

08000b54 <HAL_RCC_GetSysClockFreq>:
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000b54:	4920      	ldr	r1, [pc, #128]	; (8000bd8 <HAL_RCC_GetSysClockFreq+0x84>)
{
 8000b56:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000b58:	688b      	ldr	r3, [r1, #8]
 8000b5a:	f003 030c 	and.w	r3, r3, #12
 8000b5e:	2b08      	cmp	r3, #8
 8000b60:	d007      	beq.n	8000b72 <HAL_RCC_GetSysClockFreq+0x1e>
 8000b62:	2b0c      	cmp	r3, #12
 8000b64:	d020      	beq.n	8000ba8 <HAL_RCC_GetSysClockFreq+0x54>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000b66:	4a1d      	ldr	r2, [pc, #116]	; (8000bdc <HAL_RCC_GetSysClockFreq+0x88>)
 8000b68:	481d      	ldr	r0, [pc, #116]	; (8000be0 <HAL_RCC_GetSysClockFreq+0x8c>)
 8000b6a:	2b04      	cmp	r3, #4
 8000b6c:	bf18      	it	ne
 8000b6e:	4610      	movne	r0, r2
 8000b70:	bd08      	pop	{r3, pc}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000b72:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000b74:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b76:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000b78:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b7c:	bf14      	ite	ne
 8000b7e:	4818      	ldrne	r0, [pc, #96]	; (8000be0 <HAL_RCC_GetSysClockFreq+0x8c>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b80:	4816      	ldreq	r0, [pc, #88]	; (8000bdc <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b82:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000b86:	bf18      	it	ne
 8000b88:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000b8a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b8e:	fba1 0100 	umull	r0, r1, r1, r0
 8000b92:	f7ff fb8d 	bl	80002b0 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000b96:	4b10      	ldr	r3, [pc, #64]	; (8000bd8 <HAL_RCC_GetSysClockFreq+0x84>)
 8000b98:	685b      	ldr	r3, [r3, #4]
 8000b9a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000b9e:	3301      	adds	r3, #1
 8000ba0:	005b      	lsls	r3, r3, #1
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);

      sysclockfreq = pllvco/pllr;
 8000ba2:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000ba6:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000ba8:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000baa:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000bac:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000bae:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000bb2:	bf14      	ite	ne
 8000bb4:	480a      	ldrne	r0, [pc, #40]	; (8000be0 <HAL_RCC_GetSysClockFreq+0x8c>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000bb6:	4809      	ldreq	r0, [pc, #36]	; (8000bdc <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000bb8:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000bbc:	bf18      	it	ne
 8000bbe:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000bc0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000bc4:	fba1 0100 	umull	r0, r1, r1, r0
 8000bc8:	f7ff fb72 	bl	80002b0 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8000bcc:	4b02      	ldr	r3, [pc, #8]	; (8000bd8 <HAL_RCC_GetSysClockFreq+0x84>)
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	f3c3 7302 	ubfx	r3, r3, #28, #3
 8000bd4:	e7e5      	b.n	8000ba2 <HAL_RCC_GetSysClockFreq+0x4e>
 8000bd6:	bf00      	nop
 8000bd8:	40023800 	.word	0x40023800
 8000bdc:	00f42400 	.word	0x00f42400
 8000be0:	007a1200 	.word	0x007a1200

08000be4 <HAL_RCC_OscConfig>:
  uint32_t tickstart = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000be4:	6803      	ldr	r3, [r0, #0]
{
 8000be6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bea:	07df      	lsls	r7, r3, #31
{
 8000bec:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bee:	d410      	bmi.n	8000c12 <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000bf0:	6823      	ldr	r3, [r4, #0]
 8000bf2:	079e      	lsls	r6, r3, #30
 8000bf4:	d467      	bmi.n	8000cc6 <HAL_RCC_OscConfig+0xe2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000bf6:	6823      	ldr	r3, [r4, #0]
 8000bf8:	071a      	lsls	r2, r3, #28
 8000bfa:	f100 80b2 	bmi.w	8000d62 <HAL_RCC_OscConfig+0x17e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000bfe:	6823      	ldr	r3, [r4, #0]
 8000c00:	075b      	lsls	r3, r3, #29
 8000c02:	f100 80d0 	bmi.w	8000da6 <HAL_RCC_OscConfig+0x1c2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000c06:	69a2      	ldr	r2, [r4, #24]
 8000c08:	2a00      	cmp	r2, #0
 8000c0a:	f040 8139 	bne.w	8000e80 <HAL_RCC_OscConfig+0x29c>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8000c0e:	2000      	movs	r0, #0
 8000c10:	e01e      	b.n	8000c50 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8000c12:	4b97      	ldr	r3, [pc, #604]	; (8000e70 <HAL_RCC_OscConfig+0x28c>)
 8000c14:	689a      	ldr	r2, [r3, #8]
 8000c16:	f002 020c 	and.w	r2, r2, #12
 8000c1a:	2a04      	cmp	r2, #4
 8000c1c:	d010      	beq.n	8000c40 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8000c1e:	689a      	ldr	r2, [r3, #8]
 8000c20:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8000c24:	2a08      	cmp	r2, #8
 8000c26:	d102      	bne.n	8000c2e <HAL_RCC_OscConfig+0x4a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	025d      	lsls	r5, r3, #9
 8000c2c:	d408      	bmi.n	8000c40 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000c2e:	4b90      	ldr	r3, [pc, #576]	; (8000e70 <HAL_RCC_OscConfig+0x28c>)
 8000c30:	689a      	ldr	r2, [r3, #8]
 8000c32:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8000c36:	2a0c      	cmp	r2, #12
 8000c38:	d10d      	bne.n	8000c56 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000c3a:	685a      	ldr	r2, [r3, #4]
 8000c3c:	0250      	lsls	r0, r2, #9
 8000c3e:	d50a      	bpl.n	8000c56 <HAL_RCC_OscConfig+0x72>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c40:	4b8b      	ldr	r3, [pc, #556]	; (8000e70 <HAL_RCC_OscConfig+0x28c>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	0399      	lsls	r1, r3, #14
 8000c46:	d5d3      	bpl.n	8000bf0 <HAL_RCC_OscConfig+0xc>
 8000c48:	6863      	ldr	r3, [r4, #4]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d1d0      	bne.n	8000bf0 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000c4e:	2001      	movs	r0, #1
}
 8000c50:	b002      	add	sp, #8
 8000c52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c56:	6862      	ldr	r2, [r4, #4]
 8000c58:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8000c5c:	d111      	bne.n	8000c82 <HAL_RCC_OscConfig+0x9e>
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000c64:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000c66:	f7ff fcf5 	bl	8000654 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c6a:	4d81      	ldr	r5, [pc, #516]	; (8000e70 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8000c6c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c6e:	682b      	ldr	r3, [r5, #0]
 8000c70:	039a      	lsls	r2, r3, #14
 8000c72:	d4bd      	bmi.n	8000bf0 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c74:	f7ff fcee 	bl	8000654 <HAL_GetTick>
 8000c78:	1b80      	subs	r0, r0, r6
 8000c7a:	2864      	cmp	r0, #100	; 0x64
 8000c7c:	d9f7      	bls.n	8000c6e <HAL_RCC_OscConfig+0x8a>
            return HAL_TIMEOUT;
 8000c7e:	2003      	movs	r0, #3
 8000c80:	e7e6      	b.n	8000c50 <HAL_RCC_OscConfig+0x6c>
 8000c82:	4d7b      	ldr	r5, [pc, #492]	; (8000e70 <HAL_RCC_OscConfig+0x28c>)
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c84:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8000c88:	682b      	ldr	r3, [r5, #0]
 8000c8a:	d107      	bne.n	8000c9c <HAL_RCC_OscConfig+0xb8>
 8000c8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c90:	602b      	str	r3, [r5, #0]
 8000c92:	682b      	ldr	r3, [r5, #0]
 8000c94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c98:	602b      	str	r3, [r5, #0]
 8000c9a:	e7e4      	b.n	8000c66 <HAL_RCC_OscConfig+0x82>
 8000c9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ca0:	602b      	str	r3, [r5, #0]
 8000ca2:	682b      	ldr	r3, [r5, #0]
 8000ca4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ca8:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000caa:	2a00      	cmp	r2, #0
 8000cac:	d1db      	bne.n	8000c66 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8000cae:	f7ff fcd1 	bl	8000654 <HAL_GetTick>
 8000cb2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cb4:	682b      	ldr	r3, [r5, #0]
 8000cb6:	039b      	lsls	r3, r3, #14
 8000cb8:	d59a      	bpl.n	8000bf0 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000cba:	f7ff fccb 	bl	8000654 <HAL_GetTick>
 8000cbe:	1b80      	subs	r0, r0, r6
 8000cc0:	2864      	cmp	r0, #100	; 0x64
 8000cc2:	d9f7      	bls.n	8000cb4 <HAL_RCC_OscConfig+0xd0>
 8000cc4:	e7db      	b.n	8000c7e <HAL_RCC_OscConfig+0x9a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8000cc6:	4b6a      	ldr	r3, [pc, #424]	; (8000e70 <HAL_RCC_OscConfig+0x28c>)
 8000cc8:	689a      	ldr	r2, [r3, #8]
 8000cca:	f012 0f0c 	tst.w	r2, #12
 8000cce:	d010      	beq.n	8000cf2 <HAL_RCC_OscConfig+0x10e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8000cd0:	689a      	ldr	r2, [r3, #8]
 8000cd2:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8000cd6:	2a08      	cmp	r2, #8
 8000cd8:	d102      	bne.n	8000ce0 <HAL_RCC_OscConfig+0xfc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	025f      	lsls	r7, r3, #9
 8000cde:	d508      	bpl.n	8000cf2 <HAL_RCC_OscConfig+0x10e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000ce0:	4a63      	ldr	r2, [pc, #396]	; (8000e70 <HAL_RCC_OscConfig+0x28c>)
 8000ce2:	6893      	ldr	r3, [r2, #8]
 8000ce4:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8000ce8:	2b0c      	cmp	r3, #12
 8000cea:	d111      	bne.n	8000d10 <HAL_RCC_OscConfig+0x12c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000cec:	6853      	ldr	r3, [r2, #4]
 8000cee:	025e      	lsls	r6, r3, #9
 8000cf0:	d40e      	bmi.n	8000d10 <HAL_RCC_OscConfig+0x12c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cf2:	4b5f      	ldr	r3, [pc, #380]	; (8000e70 <HAL_RCC_OscConfig+0x28c>)
 8000cf4:	681a      	ldr	r2, [r3, #0]
 8000cf6:	0795      	lsls	r5, r2, #30
 8000cf8:	d502      	bpl.n	8000d00 <HAL_RCC_OscConfig+0x11c>
 8000cfa:	68e2      	ldr	r2, [r4, #12]
 8000cfc:	2a01      	cmp	r2, #1
 8000cfe:	d1a6      	bne.n	8000c4e <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d00:	681a      	ldr	r2, [r3, #0]
 8000d02:	6921      	ldr	r1, [r4, #16]
 8000d04:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000d08:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8000d0c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d0e:	e772      	b.n	8000bf6 <HAL_RCC_OscConfig+0x12>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000d10:	68e2      	ldr	r2, [r4, #12]
 8000d12:	4b58      	ldr	r3, [pc, #352]	; (8000e74 <HAL_RCC_OscConfig+0x290>)
 8000d14:	b1b2      	cbz	r2, 8000d44 <HAL_RCC_OscConfig+0x160>
        __HAL_RCC_HSI_ENABLE();
 8000d16:	2201      	movs	r2, #1
 8000d18:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000d1a:	f7ff fc9b 	bl	8000654 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d1e:	4d54      	ldr	r5, [pc, #336]	; (8000e70 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8000d20:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d22:	682b      	ldr	r3, [r5, #0]
 8000d24:	0798      	lsls	r0, r3, #30
 8000d26:	d507      	bpl.n	8000d38 <HAL_RCC_OscConfig+0x154>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d28:	682b      	ldr	r3, [r5, #0]
 8000d2a:	6922      	ldr	r2, [r4, #16]
 8000d2c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000d30:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000d34:	602b      	str	r3, [r5, #0]
 8000d36:	e75e      	b.n	8000bf6 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d38:	f7ff fc8c 	bl	8000654 <HAL_GetTick>
 8000d3c:	1b80      	subs	r0, r0, r6
 8000d3e:	2802      	cmp	r0, #2
 8000d40:	d9ef      	bls.n	8000d22 <HAL_RCC_OscConfig+0x13e>
 8000d42:	e79c      	b.n	8000c7e <HAL_RCC_OscConfig+0x9a>
        __HAL_RCC_HSI_DISABLE();
 8000d44:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000d46:	f7ff fc85 	bl	8000654 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d4a:	4d49      	ldr	r5, [pc, #292]	; (8000e70 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8000d4c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d4e:	682b      	ldr	r3, [r5, #0]
 8000d50:	0799      	lsls	r1, r3, #30
 8000d52:	f57f af50 	bpl.w	8000bf6 <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d56:	f7ff fc7d 	bl	8000654 <HAL_GetTick>
 8000d5a:	1b80      	subs	r0, r0, r6
 8000d5c:	2802      	cmp	r0, #2
 8000d5e:	d9f6      	bls.n	8000d4e <HAL_RCC_OscConfig+0x16a>
 8000d60:	e78d      	b.n	8000c7e <HAL_RCC_OscConfig+0x9a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000d62:	6962      	ldr	r2, [r4, #20]
 8000d64:	4b44      	ldr	r3, [pc, #272]	; (8000e78 <HAL_RCC_OscConfig+0x294>)
 8000d66:	b17a      	cbz	r2, 8000d88 <HAL_RCC_OscConfig+0x1a4>
      __HAL_RCC_LSI_ENABLE();
 8000d68:	2201      	movs	r2, #1
 8000d6a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000d6c:	f7ff fc72 	bl	8000654 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d70:	4d3f      	ldr	r5, [pc, #252]	; (8000e70 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8000d72:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d74:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000d76:	079f      	lsls	r7, r3, #30
 8000d78:	f53f af41 	bmi.w	8000bfe <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d7c:	f7ff fc6a 	bl	8000654 <HAL_GetTick>
 8000d80:	1b80      	subs	r0, r0, r6
 8000d82:	2802      	cmp	r0, #2
 8000d84:	d9f6      	bls.n	8000d74 <HAL_RCC_OscConfig+0x190>
 8000d86:	e77a      	b.n	8000c7e <HAL_RCC_OscConfig+0x9a>
      __HAL_RCC_LSI_DISABLE();
 8000d88:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000d8a:	f7ff fc63 	bl	8000654 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d8e:	4d38      	ldr	r5, [pc, #224]	; (8000e70 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8000d90:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d92:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000d94:	0798      	lsls	r0, r3, #30
 8000d96:	f57f af32 	bpl.w	8000bfe <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d9a:	f7ff fc5b 	bl	8000654 <HAL_GetTick>
 8000d9e:	1b80      	subs	r0, r0, r6
 8000da0:	2802      	cmp	r0, #2
 8000da2:	d9f6      	bls.n	8000d92 <HAL_RCC_OscConfig+0x1ae>
 8000da4:	e76b      	b.n	8000c7e <HAL_RCC_OscConfig+0x9a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000da6:	4b32      	ldr	r3, [pc, #200]	; (8000e70 <HAL_RCC_OscConfig+0x28c>)
 8000da8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000daa:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8000dae:	d128      	bne.n	8000e02 <HAL_RCC_OscConfig+0x21e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000db0:	9201      	str	r2, [sp, #4]
 8000db2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000db4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000db8:	641a      	str	r2, [r3, #64]	; 0x40
 8000dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dc0:	9301      	str	r3, [sp, #4]
 8000dc2:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000dc4:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000dc6:	4d2d      	ldr	r5, [pc, #180]	; (8000e7c <HAL_RCC_OscConfig+0x298>)
 8000dc8:	682b      	ldr	r3, [r5, #0]
 8000dca:	05d9      	lsls	r1, r3, #23
 8000dcc:	d51b      	bpl.n	8000e06 <HAL_RCC_OscConfig+0x222>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000dce:	68a3      	ldr	r3, [r4, #8]
 8000dd0:	4d27      	ldr	r5, [pc, #156]	; (8000e70 <HAL_RCC_OscConfig+0x28c>)
 8000dd2:	2b01      	cmp	r3, #1
 8000dd4:	d127      	bne.n	8000e26 <HAL_RCC_OscConfig+0x242>
 8000dd6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000dd8:	f043 0301 	orr.w	r3, r3, #1
 8000ddc:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000dde:	f7ff fc39 	bl	8000654 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000de2:	4d23      	ldr	r5, [pc, #140]	; (8000e70 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8000de4:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000de6:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000dea:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000dec:	079b      	lsls	r3, r3, #30
 8000dee:	d539      	bpl.n	8000e64 <HAL_RCC_OscConfig+0x280>
    if(pwrclkchanged == SET)
 8000df0:	2e00      	cmp	r6, #0
 8000df2:	f43f af08 	beq.w	8000c06 <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000df6:	4a1e      	ldr	r2, [pc, #120]	; (8000e70 <HAL_RCC_OscConfig+0x28c>)
 8000df8:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000dfa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000dfe:	6413      	str	r3, [r2, #64]	; 0x40
 8000e00:	e701      	b.n	8000c06 <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8000e02:	2600      	movs	r6, #0
 8000e04:	e7df      	b.n	8000dc6 <HAL_RCC_OscConfig+0x1e2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e06:	682b      	ldr	r3, [r5, #0]
 8000e08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e0c:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000e0e:	f7ff fc21 	bl	8000654 <HAL_GetTick>
 8000e12:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e14:	682b      	ldr	r3, [r5, #0]
 8000e16:	05da      	lsls	r2, r3, #23
 8000e18:	d4d9      	bmi.n	8000dce <HAL_RCC_OscConfig+0x1ea>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e1a:	f7ff fc1b 	bl	8000654 <HAL_GetTick>
 8000e1e:	1bc0      	subs	r0, r0, r7
 8000e20:	2802      	cmp	r0, #2
 8000e22:	d9f7      	bls.n	8000e14 <HAL_RCC_OscConfig+0x230>
 8000e24:	e72b      	b.n	8000c7e <HAL_RCC_OscConfig+0x9a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e26:	2b05      	cmp	r3, #5
 8000e28:	d104      	bne.n	8000e34 <HAL_RCC_OscConfig+0x250>
 8000e2a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000e2c:	f043 0304 	orr.w	r3, r3, #4
 8000e30:	672b      	str	r3, [r5, #112]	; 0x70
 8000e32:	e7d0      	b.n	8000dd6 <HAL_RCC_OscConfig+0x1f2>
 8000e34:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000e36:	f022 0201 	bic.w	r2, r2, #1
 8000e3a:	672a      	str	r2, [r5, #112]	; 0x70
 8000e3c:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000e3e:	f022 0204 	bic.w	r2, r2, #4
 8000e42:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d1ca      	bne.n	8000dde <HAL_RCC_OscConfig+0x1fa>
      tickstart = HAL_GetTick();
 8000e48:	f7ff fc04 	bl	8000654 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e4c:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000e50:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e52:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000e54:	0798      	lsls	r0, r3, #30
 8000e56:	d5cb      	bpl.n	8000df0 <HAL_RCC_OscConfig+0x20c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e58:	f7ff fbfc 	bl	8000654 <HAL_GetTick>
 8000e5c:	1bc0      	subs	r0, r0, r7
 8000e5e:	4540      	cmp	r0, r8
 8000e60:	d9f7      	bls.n	8000e52 <HAL_RCC_OscConfig+0x26e>
 8000e62:	e70c      	b.n	8000c7e <HAL_RCC_OscConfig+0x9a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e64:	f7ff fbf6 	bl	8000654 <HAL_GetTick>
 8000e68:	1bc0      	subs	r0, r0, r7
 8000e6a:	4540      	cmp	r0, r8
 8000e6c:	d9bd      	bls.n	8000dea <HAL_RCC_OscConfig+0x206>
 8000e6e:	e706      	b.n	8000c7e <HAL_RCC_OscConfig+0x9a>
 8000e70:	40023800 	.word	0x40023800
 8000e74:	42470000 	.word	0x42470000
 8000e78:	42470e80 	.word	0x42470e80
 8000e7c:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000e80:	4d23      	ldr	r5, [pc, #140]	; (8000f10 <HAL_RCC_OscConfig+0x32c>)
 8000e82:	68ab      	ldr	r3, [r5, #8]
 8000e84:	f003 030c 	and.w	r3, r3, #12
 8000e88:	2b08      	cmp	r3, #8
 8000e8a:	f43f aee0 	beq.w	8000c4e <HAL_RCC_OscConfig+0x6a>
 8000e8e:	4e21      	ldr	r6, [pc, #132]	; (8000f14 <HAL_RCC_OscConfig+0x330>)
 8000e90:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000e92:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000e94:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000e96:	d12d      	bne.n	8000ef4 <HAL_RCC_OscConfig+0x310>
        tickstart = HAL_GetTick();
 8000e98:	f7ff fbdc 	bl	8000654 <HAL_GetTick>
 8000e9c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000e9e:	682b      	ldr	r3, [r5, #0]
 8000ea0:	0199      	lsls	r1, r3, #6
 8000ea2:	d421      	bmi.n	8000ee8 <HAL_RCC_OscConfig+0x304>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000ea4:	6a22      	ldr	r2, [r4, #32]
 8000ea6:	69e3      	ldr	r3, [r4, #28]
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000eac:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000eb0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000eb2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000eb6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000eb8:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8000ebc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ebe:	4c14      	ldr	r4, [pc, #80]	; (8000f10 <HAL_RCC_OscConfig+0x32c>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000ec0:	0852      	lsrs	r2, r2, #1
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000ec8:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000eca:	2301      	movs	r3, #1
 8000ecc:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000ece:	f7ff fbc1 	bl	8000654 <HAL_GetTick>
 8000ed2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ed4:	6823      	ldr	r3, [r4, #0]
 8000ed6:	019a      	lsls	r2, r3, #6
 8000ed8:	f53f ae99 	bmi.w	8000c0e <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000edc:	f7ff fbba 	bl	8000654 <HAL_GetTick>
 8000ee0:	1b40      	subs	r0, r0, r5
 8000ee2:	2802      	cmp	r0, #2
 8000ee4:	d9f6      	bls.n	8000ed4 <HAL_RCC_OscConfig+0x2f0>
 8000ee6:	e6ca      	b.n	8000c7e <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ee8:	f7ff fbb4 	bl	8000654 <HAL_GetTick>
 8000eec:	1bc0      	subs	r0, r0, r7
 8000eee:	2802      	cmp	r0, #2
 8000ef0:	d9d5      	bls.n	8000e9e <HAL_RCC_OscConfig+0x2ba>
 8000ef2:	e6c4      	b.n	8000c7e <HAL_RCC_OscConfig+0x9a>
        tickstart = HAL_GetTick();
 8000ef4:	f7ff fbae 	bl	8000654 <HAL_GetTick>
 8000ef8:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000efa:	682b      	ldr	r3, [r5, #0]
 8000efc:	019b      	lsls	r3, r3, #6
 8000efe:	f57f ae86 	bpl.w	8000c0e <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f02:	f7ff fba7 	bl	8000654 <HAL_GetTick>
 8000f06:	1b00      	subs	r0, r0, r4
 8000f08:	2802      	cmp	r0, #2
 8000f0a:	d9f6      	bls.n	8000efa <HAL_RCC_OscConfig+0x316>
 8000f0c:	e6b7      	b.n	8000c7e <HAL_RCC_OscConfig+0x9a>
 8000f0e:	bf00      	nop
 8000f10:	40023800 	.word	0x40023800
 8000f14:	42470060 	.word	0x42470060

08000f18 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000f18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8000f1c:	6806      	ldr	r6, [r0, #0]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8000f1e:	68c2      	ldr	r2, [r0, #12]
  tmpreg = huart->Instance->CR2;
 8000f20:	6933      	ldr	r3, [r6, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000f22:	69c1      	ldr	r1, [r0, #28]
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8000f24:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8000f28:	4313      	orrs	r3, r2
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8000f2a:	6133      	str	r3, [r6, #16]
{
 8000f2c:	4604      	mov	r4, r0
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000f2e:	6883      	ldr	r3, [r0, #8]
 8000f30:	6900      	ldr	r0, [r0, #16]
  tmpreg = huart->Instance->CR1;
 8000f32:	68f2      	ldr	r2, [r6, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000f34:	4303      	orrs	r3, r0
 8000f36:	6960      	ldr	r0, [r4, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8000f38:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000f3c:	4303      	orrs	r3, r0
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8000f3e:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000f42:	430b      	orrs	r3, r1
 8000f44:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8000f46:	60f3      	str	r3, [r6, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8000f48:	6973      	ldr	r3, [r6, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8000f4a:	69a2      	ldr	r2, [r4, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8000f4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 8000f50:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000f52:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8000f56:	6173      	str	r3, [r6, #20]
 8000f58:	4b7a      	ldr	r3, [pc, #488]	; (8001144 <UART_SetConfig+0x22c>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000f5a:	d17c      	bne.n	8001056 <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8000f5c:	429e      	cmp	r6, r3
 8000f5e:	d003      	beq.n	8000f68 <UART_SetConfig+0x50>
 8000f60:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000f64:	429e      	cmp	r6, r3
 8000f66:	d144      	bne.n	8000ff2 <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8000f68:	f7ff fde4 	bl	8000b34 <HAL_RCC_GetPCLK2Freq>
 8000f6c:	2519      	movs	r5, #25
 8000f6e:	fb05 f300 	mul.w	r3, r5, r0
 8000f72:	6860      	ldr	r0, [r4, #4]
 8000f74:	f04f 0964 	mov.w	r9, #100	; 0x64
 8000f78:	0040      	lsls	r0, r0, #1
 8000f7a:	fbb3 f3f0 	udiv	r3, r3, r0
 8000f7e:	fbb3 f3f9 	udiv	r3, r3, r9
 8000f82:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8000f86:	f7ff fdd5 	bl	8000b34 <HAL_RCC_GetPCLK2Freq>
 8000f8a:	6863      	ldr	r3, [r4, #4]
 8000f8c:	4368      	muls	r0, r5
 8000f8e:	005b      	lsls	r3, r3, #1
 8000f90:	fbb0 f7f3 	udiv	r7, r0, r3
 8000f94:	f7ff fdce 	bl	8000b34 <HAL_RCC_GetPCLK2Freq>
 8000f98:	6863      	ldr	r3, [r4, #4]
 8000f9a:	4368      	muls	r0, r5
 8000f9c:	005b      	lsls	r3, r3, #1
 8000f9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8000fa2:	fbb3 f3f9 	udiv	r3, r3, r9
 8000fa6:	fb09 7313 	mls	r3, r9, r3, r7
 8000faa:	00db      	lsls	r3, r3, #3
 8000fac:	3332      	adds	r3, #50	; 0x32
 8000fae:	fbb3 f3f9 	udiv	r3, r3, r9
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8000fb8:	f7ff fdbc 	bl	8000b34 <HAL_RCC_GetPCLK2Freq>
 8000fbc:	6862      	ldr	r2, [r4, #4]
 8000fbe:	4368      	muls	r0, r5
 8000fc0:	0052      	lsls	r2, r2, #1
 8000fc2:	fbb0 faf2 	udiv	sl, r0, r2
 8000fc6:	f7ff fdb5 	bl	8000b34 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8000fca:	6863      	ldr	r3, [r4, #4]
 8000fcc:	4368      	muls	r0, r5
 8000fce:	005b      	lsls	r3, r3, #1
 8000fd0:	fbb0 f3f3 	udiv	r3, r0, r3
 8000fd4:	fbb3 f3f9 	udiv	r3, r3, r9
 8000fd8:	fb09 a313 	mls	r3, r9, r3, sl
 8000fdc:	00db      	lsls	r3, r3, #3
 8000fde:	3332      	adds	r3, #50	; 0x32
 8000fe0:	fbb3 f3f9 	udiv	r3, r3, r9
 8000fe4:	f003 0307 	and.w	r3, r3, #7
 8000fe8:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8000fea:	443b      	add	r3, r7
 8000fec:	60b3      	str	r3, [r6, #8]
 8000fee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8000ff2:	f7ff fd8f 	bl	8000b14 <HAL_RCC_GetPCLK1Freq>
 8000ff6:	2519      	movs	r5, #25
 8000ff8:	fb05 f300 	mul.w	r3, r5, r0
 8000ffc:	6860      	ldr	r0, [r4, #4]
 8000ffe:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001002:	0040      	lsls	r0, r0, #1
 8001004:	fbb3 f3f0 	udiv	r3, r3, r0
 8001008:	fbb3 f3f9 	udiv	r3, r3, r9
 800100c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001010:	f7ff fd80 	bl	8000b14 <HAL_RCC_GetPCLK1Freq>
 8001014:	6863      	ldr	r3, [r4, #4]
 8001016:	4368      	muls	r0, r5
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	fbb0 f7f3 	udiv	r7, r0, r3
 800101e:	f7ff fd79 	bl	8000b14 <HAL_RCC_GetPCLK1Freq>
 8001022:	6863      	ldr	r3, [r4, #4]
 8001024:	4368      	muls	r0, r5
 8001026:	005b      	lsls	r3, r3, #1
 8001028:	fbb0 f3f3 	udiv	r3, r0, r3
 800102c:	fbb3 f3f9 	udiv	r3, r3, r9
 8001030:	fb09 7313 	mls	r3, r9, r3, r7
 8001034:	00db      	lsls	r3, r3, #3
 8001036:	3332      	adds	r3, #50	; 0x32
 8001038:	fbb3 f3f9 	udiv	r3, r3, r9
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8001042:	f7ff fd67 	bl	8000b14 <HAL_RCC_GetPCLK1Freq>
 8001046:	6862      	ldr	r2, [r4, #4]
 8001048:	4368      	muls	r0, r5
 800104a:	0052      	lsls	r2, r2, #1
 800104c:	fbb0 faf2 	udiv	sl, r0, r2
 8001050:	f7ff fd60 	bl	8000b14 <HAL_RCC_GetPCLK1Freq>
 8001054:	e7b9      	b.n	8000fca <UART_SetConfig+0xb2>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001056:	429e      	cmp	r6, r3
 8001058:	d002      	beq.n	8001060 <UART_SetConfig+0x148>
 800105a:	4b3b      	ldr	r3, [pc, #236]	; (8001148 <UART_SetConfig+0x230>)
 800105c:	429e      	cmp	r6, r3
 800105e:	d140      	bne.n	80010e2 <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001060:	f7ff fd68 	bl	8000b34 <HAL_RCC_GetPCLK2Freq>
 8001064:	6867      	ldr	r7, [r4, #4]
 8001066:	2519      	movs	r5, #25
 8001068:	f04f 0964 	mov.w	r9, #100	; 0x64
 800106c:	fb05 f300 	mul.w	r3, r5, r0
 8001070:	00bf      	lsls	r7, r7, #2
 8001072:	fbb3 f3f7 	udiv	r3, r3, r7
 8001076:	fbb3 f3f9 	udiv	r3, r3, r9
 800107a:	011f      	lsls	r7, r3, #4
 800107c:	f7ff fd5a 	bl	8000b34 <HAL_RCC_GetPCLK2Freq>
 8001080:	6863      	ldr	r3, [r4, #4]
 8001082:	4368      	muls	r0, r5
 8001084:	009b      	lsls	r3, r3, #2
 8001086:	fbb0 f8f3 	udiv	r8, r0, r3
 800108a:	f7ff fd53 	bl	8000b34 <HAL_RCC_GetPCLK2Freq>
 800108e:	6863      	ldr	r3, [r4, #4]
 8001090:	4368      	muls	r0, r5
 8001092:	009b      	lsls	r3, r3, #2
 8001094:	fbb0 f3f3 	udiv	r3, r0, r3
 8001098:	fbb3 f3f9 	udiv	r3, r3, r9
 800109c:	fb09 8313 	mls	r3, r9, r3, r8
 80010a0:	011b      	lsls	r3, r3, #4
 80010a2:	3332      	adds	r3, #50	; 0x32
 80010a4:	fbb3 f3f9 	udiv	r3, r3, r9
 80010a8:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 80010ac:	f7ff fd42 	bl	8000b34 <HAL_RCC_GetPCLK2Freq>
 80010b0:	6862      	ldr	r2, [r4, #4]
 80010b2:	4368      	muls	r0, r5
 80010b4:	0092      	lsls	r2, r2, #2
 80010b6:	fbb0 faf2 	udiv	sl, r0, r2
 80010ba:	f7ff fd3b 	bl	8000b34 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80010be:	6863      	ldr	r3, [r4, #4]
 80010c0:	4368      	muls	r0, r5
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80010c8:	fbb3 f3f9 	udiv	r3, r3, r9
 80010cc:	fb09 a313 	mls	r3, r9, r3, sl
 80010d0:	011b      	lsls	r3, r3, #4
 80010d2:	3332      	adds	r3, #50	; 0x32
 80010d4:	fbb3 f3f9 	udiv	r3, r3, r9
 80010d8:	f003 030f 	and.w	r3, r3, #15
 80010dc:	ea43 0308 	orr.w	r3, r3, r8
 80010e0:	e783      	b.n	8000fea <UART_SetConfig+0xd2>
 80010e2:	f7ff fd17 	bl	8000b14 <HAL_RCC_GetPCLK1Freq>
 80010e6:	6867      	ldr	r7, [r4, #4]
 80010e8:	2519      	movs	r5, #25
 80010ea:	f04f 0964 	mov.w	r9, #100	; 0x64
 80010ee:	fb05 f300 	mul.w	r3, r5, r0
 80010f2:	00bf      	lsls	r7, r7, #2
 80010f4:	fbb3 f3f7 	udiv	r3, r3, r7
 80010f8:	fbb3 f3f9 	udiv	r3, r3, r9
 80010fc:	011f      	lsls	r7, r3, #4
 80010fe:	f7ff fd09 	bl	8000b14 <HAL_RCC_GetPCLK1Freq>
 8001102:	6863      	ldr	r3, [r4, #4]
 8001104:	4368      	muls	r0, r5
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	fbb0 f8f3 	udiv	r8, r0, r3
 800110c:	f7ff fd02 	bl	8000b14 <HAL_RCC_GetPCLK1Freq>
 8001110:	6863      	ldr	r3, [r4, #4]
 8001112:	4368      	muls	r0, r5
 8001114:	009b      	lsls	r3, r3, #2
 8001116:	fbb0 f3f3 	udiv	r3, r0, r3
 800111a:	fbb3 f3f9 	udiv	r3, r3, r9
 800111e:	fb09 8313 	mls	r3, r9, r3, r8
 8001122:	011b      	lsls	r3, r3, #4
 8001124:	3332      	adds	r3, #50	; 0x32
 8001126:	fbb3 f3f9 	udiv	r3, r3, r9
 800112a:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 800112e:	f7ff fcf1 	bl	8000b14 <HAL_RCC_GetPCLK1Freq>
 8001132:	6862      	ldr	r2, [r4, #4]
 8001134:	4368      	muls	r0, r5
 8001136:	0092      	lsls	r2, r2, #2
 8001138:	fbb0 faf2 	udiv	sl, r0, r2
 800113c:	f7ff fcea 	bl	8000b14 <HAL_RCC_GetPCLK1Freq>
 8001140:	e7bd      	b.n	80010be <UART_SetConfig+0x1a6>
 8001142:	bf00      	nop
 8001144:	40011000 	.word	0x40011000
 8001148:	40011400 	.word	0x40011400

0800114c <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 800114c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800114e:	4604      	mov	r4, r0
 8001150:	460e      	mov	r6, r1
 8001152:	4617      	mov	r7, r2
 8001154:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8001156:	6821      	ldr	r1, [r4, #0]
 8001158:	680b      	ldr	r3, [r1, #0]
 800115a:	ea36 0303 	bics.w	r3, r6, r3
 800115e:	d101      	bne.n	8001164 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8001160:	2000      	movs	r0, #0
}
 8001162:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001164:	1c6b      	adds	r3, r5, #1
 8001166:	d0f7      	beq.n	8001158 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001168:	b995      	cbnz	r5, 8001190 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800116a:	6823      	ldr	r3, [r4, #0]
 800116c:	68da      	ldr	r2, [r3, #12]
 800116e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001172:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001174:	695a      	ldr	r2, [r3, #20]
 8001176:	f022 0201 	bic.w	r2, r2, #1
 800117a:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 800117c:	2320      	movs	r3, #32
 800117e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001182:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8001186:	2300      	movs	r3, #0
 8001188:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 800118c:	2003      	movs	r0, #3
 800118e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001190:	f7ff fa60 	bl	8000654 <HAL_GetTick>
 8001194:	1bc0      	subs	r0, r0, r7
 8001196:	4285      	cmp	r5, r0
 8001198:	d2dd      	bcs.n	8001156 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 800119a:	e7e6      	b.n	800116a <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

0800119c <HAL_UART_Init>:
{
 800119c:	b510      	push	{r4, lr}
  if(huart == NULL)
 800119e:	4604      	mov	r4, r0
 80011a0:	b340      	cbz	r0, 80011f4 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 80011a2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80011a6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80011aa:	b91b      	cbnz	r3, 80011b4 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80011ac:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80011b0:	f000 f9d6 	bl	8001560 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80011b4:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80011b6:	2324      	movs	r3, #36	; 0x24
 80011b8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80011bc:	68d3      	ldr	r3, [r2, #12]
 80011be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80011c2:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80011c4:	4620      	mov	r0, r4
 80011c6:	f7ff fea7 	bl	8000f18 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80011ca:	6823      	ldr	r3, [r4, #0]
 80011cc:	691a      	ldr	r2, [r3, #16]
 80011ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80011d2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80011d4:	695a      	ldr	r2, [r3, #20]
 80011d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80011da:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80011dc:	68da      	ldr	r2, [r3, #12]
 80011de:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80011e2:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80011e4:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 80011e6:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80011e8:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 80011ea:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 80011ee:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 80011f2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80011f4:	2001      	movs	r0, #1
}
 80011f6:	bd10      	pop	{r4, pc}

080011f8 <HAL_UART_Transmit>:
{
 80011f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80011fc:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY) 
 80011fe:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001202:	2b20      	cmp	r3, #32
{
 8001204:	4604      	mov	r4, r0
 8001206:	460d      	mov	r5, r1
 8001208:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY) 
 800120a:	d14f      	bne.n	80012ac <HAL_UART_Transmit+0xb4>
    if((pData == NULL ) || (Size == 0)) 
 800120c:	2900      	cmp	r1, #0
 800120e:	d04a      	beq.n	80012a6 <HAL_UART_Transmit+0xae>
 8001210:	2a00      	cmp	r2, #0
 8001212:	d048      	beq.n	80012a6 <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 8001214:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001218:	2b01      	cmp	r3, #1
 800121a:	d047      	beq.n	80012ac <HAL_UART_Transmit+0xb4>
 800121c:	2301      	movs	r3, #1
 800121e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001222:	2300      	movs	r3, #0
 8001224:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001226:	2321      	movs	r3, #33	; 0x21
 8001228:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 800122c:	f7ff fa12 	bl	8000654 <HAL_GetTick>
    huart->TxXferSize = Size;
 8001230:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 8001234:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8001236:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 800123a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800123c:	b29b      	uxth	r3, r3
 800123e:	b96b      	cbnz	r3, 800125c <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001240:	463b      	mov	r3, r7
 8001242:	4632      	mov	r2, r6
 8001244:	2140      	movs	r1, #64	; 0x40
 8001246:	4620      	mov	r0, r4
 8001248:	f7ff ff80 	bl	800114c <UART_WaitOnFlagUntilTimeout.constprop.3>
 800124c:	b9b0      	cbnz	r0, 800127c <HAL_UART_Transmit+0x84>
      huart->gState = HAL_UART_STATE_READY;
 800124e:	2320      	movs	r3, #32
 8001250:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8001254:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 8001258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 800125c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800125e:	3b01      	subs	r3, #1
 8001260:	b29b      	uxth	r3, r3
 8001262:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001264:	68a3      	ldr	r3, [r4, #8]
 8001266:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800126a:	4632      	mov	r2, r6
 800126c:	463b      	mov	r3, r7
 800126e:	f04f 0180 	mov.w	r1, #128	; 0x80
 8001272:	4620      	mov	r0, r4
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001274:	d10e      	bne.n	8001294 <HAL_UART_Transmit+0x9c>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001276:	f7ff ff69 	bl	800114c <UART_WaitOnFlagUntilTimeout.constprop.3>
 800127a:	b110      	cbz	r0, 8001282 <HAL_UART_Transmit+0x8a>
          return HAL_TIMEOUT;
 800127c:	2003      	movs	r0, #3
 800127e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001282:	882b      	ldrh	r3, [r5, #0]
 8001284:	6822      	ldr	r2, [r4, #0]
 8001286:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800128a:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 800128c:	6923      	ldr	r3, [r4, #16]
 800128e:	b943      	cbnz	r3, 80012a2 <HAL_UART_Transmit+0xaa>
          pData +=2U;
 8001290:	3502      	adds	r5, #2
 8001292:	e7d2      	b.n	800123a <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001294:	f7ff ff5a 	bl	800114c <UART_WaitOnFlagUntilTimeout.constprop.3>
 8001298:	2800      	cmp	r0, #0
 800129a:	d1ef      	bne.n	800127c <HAL_UART_Transmit+0x84>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800129c:	6823      	ldr	r3, [r4, #0]
 800129e:	782a      	ldrb	r2, [r5, #0]
 80012a0:	605a      	str	r2, [r3, #4]
 80012a2:	3501      	adds	r5, #1
 80012a4:	e7c9      	b.n	800123a <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 80012a6:	2001      	movs	r0, #1
 80012a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80012ac:	2002      	movs	r0, #2
}
 80012ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080012b4 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
	if(GPIO_Pin==GPIO_PIN_0)
 80012b4:	2801      	cmp	r0, #1
{
 80012b6:	b538      	push	{r3, r4, r5, lr}
	if(GPIO_Pin==GPIO_PIN_0)
 80012b8:	d10f      	bne.n	80012da <HAL_GPIO_EXTI_Callback+0x26>
	{
		newTick = HAL_GetTick();
 80012ba:	f7ff f9cb 	bl	8000654 <HAL_GetTick>
 80012be:	4c07      	ldr	r4, [pc, #28]	; (80012dc <HAL_GPIO_EXTI_Callback+0x28>)

		if((newTick-oldTick) < duration) return;
 80012c0:	4d07      	ldr	r5, [pc, #28]	; (80012e0 <HAL_GPIO_EXTI_Callback+0x2c>)
		newTick = HAL_GetTick();
 80012c2:	6020      	str	r0, [r4, #0]
		if((newTick-oldTick) < duration) return;
 80012c4:	6823      	ldr	r3, [r4, #0]
 80012c6:	682a      	ldr	r2, [r5, #0]
 80012c8:	1a9b      	subs	r3, r3, r2
 80012ca:	2bf9      	cmp	r3, #249	; 0xf9
 80012cc:	d905      	bls.n	80012da <HAL_GPIO_EXTI_Callback+0x26>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80012ce:	2120      	movs	r1, #32
 80012d0:	4804      	ldr	r0, [pc, #16]	; (80012e4 <HAL_GPIO_EXTI_Callback+0x30>)
 80012d2:	f7ff fb32 	bl	800093a <HAL_GPIO_TogglePin>
		oldTick = newTick;
 80012d6:	6823      	ldr	r3, [r4, #0]
 80012d8:	602b      	str	r3, [r5, #0]
 80012da:	bd38      	pop	{r3, r4, r5, pc}
 80012dc:	2000008c 	.word	0x2000008c
 80012e0:	20000090 	.word	0x20000090
 80012e4:	40020000 	.word	0x40020000

080012e8 <_write>:
// printf
//**********************************************************************

#ifdef __GNUC__
int _write(int file,uint8_t*ptr,int len)
{
 80012e8:	b510      	push	{r4, lr}
	HAL_UART_Transmit(&huart2,ptr,len,1000);
 80012ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
{
 80012ee:	4614      	mov	r4, r2
	HAL_UART_Transmit(&huart2,ptr,len,1000);
 80012f0:	4802      	ldr	r0, [pc, #8]	; (80012fc <_write+0x14>)
 80012f2:	b292      	uxth	r2, r2
 80012f4:	f7ff ff80 	bl	80011f8 <HAL_UART_Transmit>
return len;
}
 80012f8:	4620      	mov	r0, r4
 80012fa:	bd10      	pop	{r4, pc}
 80012fc:	200000a4 	.word	0x200000a4

08001300 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001300:	b530      	push	{r4, r5, lr}
 8001302:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001304:	4b2a      	ldr	r3, [pc, #168]	; (80013b0 <SystemClock_Config+0xb0>)
 8001306:	2100      	movs	r1, #0
 8001308:	9100      	str	r1, [sp, #0]
 800130a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800130c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001310:	641a      	str	r2, [r3, #64]	; 0x40
 8001312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001314:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001318:	9300      	str	r3, [sp, #0]
 800131a:	9b00      	ldr	r3, [sp, #0]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800131c:	4b25      	ldr	r3, [pc, #148]	; (80013b4 <SystemClock_Config+0xb4>)
 800131e:	9101      	str	r1, [sp, #4]
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800132e:	9301      	str	r3, [sp, #4]
 8001330:	9b01      	ldr	r3, [sp, #4]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001332:	2301      	movs	r3, #1
 8001334:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001336:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800133a:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800133c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001340:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001342:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001344:	2504      	movs	r5, #4
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001346:	23b4      	movs	r3, #180	; 0xb4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001348:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800134a:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = 4;
 800134c:	950f      	str	r5, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800134e:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001350:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001352:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001354:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001356:	f7ff fc45 	bl	8000be4 <HAL_RCC_OscConfig>
 800135a:	b100      	cbz	r0, 800135e <SystemClock_Config+0x5e>
 800135c:	e7fe      	b.n	800135c <SystemClock_Config+0x5c>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Activate the Over-Drive mode 
    */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800135e:	f7ff fafd 	bl	800095c <HAL_PWREx_EnableOverDrive>
 8001362:	b100      	cbz	r0, 8001366 <SystemClock_Config+0x66>
 8001364:	e7fe      	b.n	8001364 <SystemClock_Config+0x64>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001366:	230f      	movs	r3, #15
 8001368:	9302      	str	r3, [sp, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800136a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800136e:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001370:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001372:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001374:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001378:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800137a:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800137c:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800137e:	f7ff fb29 	bl	80009d4 <HAL_RCC_ClockConfig>
 8001382:	4604      	mov	r4, r0
 8001384:	b100      	cbz	r0, 8001388 <SystemClock_Config+0x88>
 8001386:	e7fe      	b.n	8001386 <SystemClock_Config+0x86>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001388:	f7ff fbbe 	bl	8000b08 <HAL_RCC_GetHCLKFreq>
 800138c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001390:	fbb0 f0f3 	udiv	r0, r0, r3
 8001394:	f7ff f9ca 	bl	800072c <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001398:	4628      	mov	r0, r5
 800139a:	f7ff f9dd 	bl	8000758 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800139e:	4622      	mov	r2, r4
 80013a0:	4621      	mov	r1, r4
 80013a2:	f04f 30ff 	mov.w	r0, #4294967295
 80013a6:	f7ff f981 	bl	80006ac <HAL_NVIC_SetPriority>
}
 80013aa:	b015      	add	sp, #84	; 0x54
 80013ac:	bd30      	pop	{r4, r5, pc}
 80013ae:	bf00      	nop
 80013b0:	40023800 	.word	0x40023800
 80013b4:	40007000 	.word	0x40007000

080013b8 <main>:
{
 80013b8:	b570      	push	{r4, r5, r6, lr}
 80013ba:	b08a      	sub	sp, #40	; 0x28
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013bc:	2400      	movs	r4, #0
  HAL_Init();
 80013be:	f7ff f923 	bl	8000608 <HAL_Init>
  SystemClock_Config();
 80013c2:	f7ff ff9d 	bl	8001300 <SystemClock_Config>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013c6:	4b37      	ldr	r3, [pc, #220]	; (80014a4 <main+0xec>)
 80013c8:	9401      	str	r4, [sp, #4]
 80013ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80013cc:	4836      	ldr	r0, [pc, #216]	; (80014a8 <main+0xf0>)

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013ce:	4e37      	ldr	r6, [pc, #220]	; (80014ac <main+0xf4>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013d0:	f042 0204 	orr.w	r2, r2, #4
 80013d4:	631a      	str	r2, [r3, #48]	; 0x30
 80013d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013d8:	f002 0204 	and.w	r2, r2, #4
 80013dc:	9201      	str	r2, [sp, #4]
 80013de:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013e0:	9402      	str	r4, [sp, #8]
 80013e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013e4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80013e8:	631a      	str	r2, [r3, #48]	; 0x30
 80013ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013ec:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80013f0:	9202      	str	r2, [sp, #8]
 80013f2:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f4:	9403      	str	r4, [sp, #12]
 80013f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013f8:	f042 0201 	orr.w	r2, r2, #1
 80013fc:	631a      	str	r2, [r3, #48]	; 0x30
 80013fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001400:	f002 0201 	and.w	r2, r2, #1
 8001404:	9203      	str	r2, [sp, #12]
 8001406:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001408:	9404      	str	r4, [sp, #16]
 800140a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800140c:	f042 0202 	orr.w	r2, r2, #2
 8001410:	631a      	str	r2, [r3, #48]	; 0x30
 8001412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001414:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001418:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800141a:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800141c:	2120      	movs	r1, #32
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800141e:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001420:	f7ff fa86 	bl	8000930 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 8001424:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001428:	a905      	add	r1, sp, #20
 800142a:	4821      	ldr	r0, [pc, #132]	; (80014b0 <main+0xf8>)
  GPIO_InitStruct.Pin = B1_Pin;
 800142c:	9305      	str	r3, [sp, #20]

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800142e:	2501      	movs	r5, #1
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001430:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001432:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001434:	f7ff f9a2 	bl	800077c <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001438:	a905      	add	r1, sp, #20
 800143a:	481b      	ldr	r0, [pc, #108]	; (80014a8 <main+0xf0>)
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800143c:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800143e:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001440:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001442:	f7ff f99b 	bl	800077c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001446:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001448:	a905      	add	r1, sp, #20
 800144a:	4817      	ldr	r0, [pc, #92]	; (80014a8 <main+0xf0>)
  GPIO_InitStruct.Pin = LD2_Pin;
 800144c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800144e:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001450:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001452:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001454:	f7ff f992 	bl	800077c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001458:	4622      	mov	r2, r4
 800145a:	4621      	mov	r1, r4
 800145c:	2006      	movs	r0, #6
 800145e:	f7ff f925 	bl	80006ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001462:	2006      	movs	r0, #6
 8001464:	f7ff f956 	bl	8000714 <HAL_NVIC_EnableIRQ>
  huart2.Instance = USART2;
 8001468:	4812      	ldr	r0, [pc, #72]	; (80014b4 <main+0xfc>)
  huart2.Init.BaudRate = 115200;
 800146a:	4a13      	ldr	r2, [pc, #76]	; (80014b8 <main+0x100>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800146c:	6084      	str	r4, [r0, #8]
  huart2.Init.BaudRate = 115200;
 800146e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001472:	e880 000c 	stmia.w	r0, {r2, r3}
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001476:	230c      	movs	r3, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001478:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800147a:	6104      	str	r4, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800147c:	6143      	str	r3, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800147e:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001480:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001482:	f7ff fe8b 	bl	800119c <HAL_UART_Init>
 8001486:	b958      	cbnz	r0, 80014a0 <main+0xe8>
	  printf("Tick : %lu\r\n",tickCount);
 8001488:	4c0c      	ldr	r4, [pc, #48]	; (80014bc <main+0x104>)
	  tickCount = HAL_GetTick();
 800148a:	f7ff f8e3 	bl	8000654 <HAL_GetTick>
	  printf("Tick : %lu\r\n",tickCount);
 800148e:	4601      	mov	r1, r0
 8001490:	4620      	mov	r0, r4
 8001492:	f000 f915 	bl	80016c0 <iprintf>
	  HAL_Delay(1000);
 8001496:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800149a:	f7ff f8e1 	bl	8000660 <HAL_Delay>
 800149e:	e7f4      	b.n	800148a <main+0xd2>
 80014a0:	e7fe      	b.n	80014a0 <main+0xe8>
 80014a2:	bf00      	nop
 80014a4:	40023800 	.word	0x40023800
 80014a8:	40020000 	.word	0x40020000
 80014ac:	10210000 	.word	0x10210000
 80014b0:	40020800 	.word	0x40020800
 80014b4:	200000a4 	.word	0x200000a4
 80014b8:	40004400 	.word	0x40004400
 80014bc:	08002544 	.word	0x08002544

080014c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014c0:	b513      	push	{r0, r1, r4, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014c2:	4b26      	ldr	r3, [pc, #152]	; (800155c <HAL_MspInit+0x9c>)
 80014c4:	2400      	movs	r4, #0
 80014c6:	9400      	str	r4, [sp, #0]
 80014c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80014ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80014ce:	645a      	str	r2, [r3, #68]	; 0x44
 80014d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80014d2:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80014d6:	9200      	str	r2, [sp, #0]
 80014d8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014da:	9401      	str	r4, [sp, #4]
 80014dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014de:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80014e2:	641a      	str	r2, [r3, #64]	; 0x40
 80014e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ea:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80014ec:	2007      	movs	r0, #7
  __HAL_RCC_PWR_CLK_ENABLE();
 80014ee:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80014f0:	f7ff f8ca 	bl	8000688 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80014f4:	4622      	mov	r2, r4
 80014f6:	4621      	mov	r1, r4
 80014f8:	f06f 000b 	mvn.w	r0, #11
 80014fc:	f7ff f8d6 	bl	80006ac <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001500:	4622      	mov	r2, r4
 8001502:	4621      	mov	r1, r4
 8001504:	f06f 000a 	mvn.w	r0, #10
 8001508:	f7ff f8d0 	bl	80006ac <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800150c:	4622      	mov	r2, r4
 800150e:	4621      	mov	r1, r4
 8001510:	f06f 0009 	mvn.w	r0, #9
 8001514:	f7ff f8ca 	bl	80006ac <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8001518:	4622      	mov	r2, r4
 800151a:	4621      	mov	r1, r4
 800151c:	f06f 0004 	mvn.w	r0, #4
 8001520:	f7ff f8c4 	bl	80006ac <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8001524:	4622      	mov	r2, r4
 8001526:	4621      	mov	r1, r4
 8001528:	f06f 0003 	mvn.w	r0, #3
 800152c:	f7ff f8be 	bl	80006ac <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001530:	4622      	mov	r2, r4
 8001532:	4621      	mov	r1, r4
 8001534:	f06f 0001 	mvn.w	r0, #1
 8001538:	f7ff f8b8 	bl	80006ac <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800153c:	4622      	mov	r2, r4
 800153e:	4621      	mov	r1, r4
 8001540:	f04f 30ff 	mov.w	r0, #4294967295
 8001544:	f7ff f8b2 	bl	80006ac <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001548:	4622      	mov	r2, r4
 800154a:	4621      	mov	r1, r4
 800154c:	2005      	movs	r0, #5
 800154e:	f7ff f8ad 	bl	80006ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001552:	2005      	movs	r0, #5
 8001554:	f7ff f8de 	bl	8000714 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001558:	b002      	add	sp, #8
 800155a:	bd10      	pop	{r4, pc}
 800155c:	40023800 	.word	0x40023800

08001560 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001560:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 8001562:	6802      	ldr	r2, [r0, #0]
 8001564:	4b0f      	ldr	r3, [pc, #60]	; (80015a4 <HAL_UART_MspInit+0x44>)
 8001566:	429a      	cmp	r2, r3
 8001568:	d119      	bne.n	800159e <HAL_UART_MspInit+0x3e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800156a:	2300      	movs	r3, #0
 800156c:	9300      	str	r3, [sp, #0]
 800156e:	4b0e      	ldr	r3, [pc, #56]	; (80015a8 <HAL_UART_MspInit+0x48>)
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001570:	480e      	ldr	r0, [pc, #56]	; (80015ac <HAL_UART_MspInit+0x4c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8001572:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001574:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001578:	641a      	str	r2, [r3, #64]	; 0x40
 800157a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001580:	9300      	str	r3, [sp, #0]
 8001582:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001584:	230c      	movs	r3, #12
 8001586:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001588:	2302      	movs	r3, #2
 800158a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800158c:	2301      	movs	r3, #1
 800158e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001590:	2303      	movs	r3, #3
 8001592:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001594:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001596:	2307      	movs	r3, #7
 8001598:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800159a:	f7ff f8ef 	bl	800077c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800159e:	b007      	add	sp, #28
 80015a0:	f85d fb04 	ldr.w	pc, [sp], #4
 80015a4:	40004400 	.word	0x40004400
 80015a8:	40023800 	.word	0x40023800
 80015ac:	40020000 	.word	0x40020000

080015b0 <NMI_Handler>:
 80015b0:	4770      	bx	lr

080015b2 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80015b2:	e7fe      	b.n	80015b2 <HardFault_Handler>

080015b4 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 80015b4:	e7fe      	b.n	80015b4 <MemManage_Handler>

080015b6 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 80015b6:	e7fe      	b.n	80015b6 <BusFault_Handler>

080015b8 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 80015b8:	e7fe      	b.n	80015b8 <UsageFault_Handler>

080015ba <SVC_Handler>:
 80015ba:	4770      	bx	lr

080015bc <DebugMon_Handler>:
 80015bc:	4770      	bx	lr

080015be <PendSV_Handler>:
 80015be:	4770      	bx	lr

080015c0 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80015c0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015c2:	f7ff f83b 	bl	800063c <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 80015ca:	f7ff b8d2 	b.w	8000772 <HAL_SYSTICK_IRQHandler>

080015ce <RCC_IRQHandler>:

/**
* @brief This function handles RCC global interrupt.
*/
void RCC_IRQHandler(void)
{
 80015ce:	4770      	bx	lr

080015d0 <EXTI0_IRQHandler>:
void EXTI0_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80015d0:	2001      	movs	r0, #1
 80015d2:	f7ff b9b7 	b.w	8000944 <HAL_GPIO_EXTI_IRQHandler>
	...

080015d8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015d8:	490f      	ldr	r1, [pc, #60]	; (8001618 <SystemInit+0x40>)
 80015da:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80015de:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80015e6:	4b0d      	ldr	r3, [pc, #52]	; (800161c <SystemInit+0x44>)
 80015e8:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80015ea:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 80015ec:	f042 0201 	orr.w	r2, r2, #1
 80015f0:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80015f2:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80015fa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80015fe:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001600:	4a07      	ldr	r2, [pc, #28]	; (8001620 <SystemInit+0x48>)
 8001602:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800160a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800160c:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800160e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001612:	608b      	str	r3, [r1, #8]
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	e000ed00 	.word	0xe000ed00
 800161c:	40023800 	.word	0x40023800
 8001620:	24003010 	.word	0x24003010

08001624 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001624:	f8df d034 	ldr.w	sp, [pc, #52]	; 800165c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001628:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800162a:	e003      	b.n	8001634 <LoopCopyDataInit>

0800162c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800162c:	4b0c      	ldr	r3, [pc, #48]	; (8001660 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800162e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001630:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001632:	3104      	adds	r1, #4

08001634 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001634:	480b      	ldr	r0, [pc, #44]	; (8001664 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001636:	4b0c      	ldr	r3, [pc, #48]	; (8001668 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001638:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800163a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800163c:	d3f6      	bcc.n	800162c <CopyDataInit>
  ldr  r2, =_sbss
 800163e:	4a0b      	ldr	r2, [pc, #44]	; (800166c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001640:	e002      	b.n	8001648 <LoopFillZerobss>

08001642 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001642:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001644:	f842 3b04 	str.w	r3, [r2], #4

08001648 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001648:	4b09      	ldr	r3, [pc, #36]	; (8001670 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800164a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800164c:	d3f9      	bcc.n	8001642 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800164e:	f7ff ffc3 	bl	80015d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001652:	f000 f811 	bl	8001678 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001656:	f7ff feaf 	bl	80013b8 <main>
  bx  lr    
 800165a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800165c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001660:	08002614 	.word	0x08002614
  ldr  r0, =_sdata
 8001664:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001668:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 800166c:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8001670:	200000e8 	.word	0x200000e8

08001674 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001674:	e7fe      	b.n	8001674 <ADC_IRQHandler>
	...

08001678 <__libc_init_array>:
 8001678:	b570      	push	{r4, r5, r6, lr}
 800167a:	4e0d      	ldr	r6, [pc, #52]	; (80016b0 <__libc_init_array+0x38>)
 800167c:	4c0d      	ldr	r4, [pc, #52]	; (80016b4 <__libc_init_array+0x3c>)
 800167e:	1ba4      	subs	r4, r4, r6
 8001680:	10a4      	asrs	r4, r4, #2
 8001682:	2500      	movs	r5, #0
 8001684:	42a5      	cmp	r5, r4
 8001686:	d109      	bne.n	800169c <__libc_init_array+0x24>
 8001688:	4e0b      	ldr	r6, [pc, #44]	; (80016b8 <__libc_init_array+0x40>)
 800168a:	4c0c      	ldr	r4, [pc, #48]	; (80016bc <__libc_init_array+0x44>)
 800168c:	f000 ff4e 	bl	800252c <_init>
 8001690:	1ba4      	subs	r4, r4, r6
 8001692:	10a4      	asrs	r4, r4, #2
 8001694:	2500      	movs	r5, #0
 8001696:	42a5      	cmp	r5, r4
 8001698:	d105      	bne.n	80016a6 <__libc_init_array+0x2e>
 800169a:	bd70      	pop	{r4, r5, r6, pc}
 800169c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80016a0:	4798      	blx	r3
 80016a2:	3501      	adds	r5, #1
 80016a4:	e7ee      	b.n	8001684 <__libc_init_array+0xc>
 80016a6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80016aa:	4798      	blx	r3
 80016ac:	3501      	adds	r5, #1
 80016ae:	e7f2      	b.n	8001696 <__libc_init_array+0x1e>
 80016b0:	0800260c 	.word	0x0800260c
 80016b4:	0800260c 	.word	0x0800260c
 80016b8:	0800260c 	.word	0x0800260c
 80016bc:	08002610 	.word	0x08002610

080016c0 <iprintf>:
 80016c0:	b40f      	push	{r0, r1, r2, r3}
 80016c2:	4b0a      	ldr	r3, [pc, #40]	; (80016ec <iprintf+0x2c>)
 80016c4:	b513      	push	{r0, r1, r4, lr}
 80016c6:	681c      	ldr	r4, [r3, #0]
 80016c8:	b124      	cbz	r4, 80016d4 <iprintf+0x14>
 80016ca:	69a3      	ldr	r3, [r4, #24]
 80016cc:	b913      	cbnz	r3, 80016d4 <iprintf+0x14>
 80016ce:	4620      	mov	r0, r4
 80016d0:	f000 f84e 	bl	8001770 <__sinit>
 80016d4:	ab05      	add	r3, sp, #20
 80016d6:	9a04      	ldr	r2, [sp, #16]
 80016d8:	68a1      	ldr	r1, [r4, #8]
 80016da:	9301      	str	r3, [sp, #4]
 80016dc:	4620      	mov	r0, r4
 80016de:	f000 f961 	bl	80019a4 <_vfiprintf_r>
 80016e2:	b002      	add	sp, #8
 80016e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80016e8:	b004      	add	sp, #16
 80016ea:	4770      	bx	lr
 80016ec:	2000000c 	.word	0x2000000c

080016f0 <_cleanup_r>:
 80016f0:	4901      	ldr	r1, [pc, #4]	; (80016f8 <_cleanup_r+0x8>)
 80016f2:	f000 b8a9 	b.w	8001848 <_fwalk_reent>
 80016f6:	bf00      	nop
 80016f8:	08002279 	.word	0x08002279

080016fc <std.isra.0>:
 80016fc:	2300      	movs	r3, #0
 80016fe:	b510      	push	{r4, lr}
 8001700:	4604      	mov	r4, r0
 8001702:	6003      	str	r3, [r0, #0]
 8001704:	6043      	str	r3, [r0, #4]
 8001706:	6083      	str	r3, [r0, #8]
 8001708:	8181      	strh	r1, [r0, #12]
 800170a:	6643      	str	r3, [r0, #100]	; 0x64
 800170c:	81c2      	strh	r2, [r0, #14]
 800170e:	6103      	str	r3, [r0, #16]
 8001710:	6143      	str	r3, [r0, #20]
 8001712:	6183      	str	r3, [r0, #24]
 8001714:	4619      	mov	r1, r3
 8001716:	2208      	movs	r2, #8
 8001718:	305c      	adds	r0, #92	; 0x5c
 800171a:	f000 f8b3 	bl	8001884 <memset>
 800171e:	4b05      	ldr	r3, [pc, #20]	; (8001734 <std.isra.0+0x38>)
 8001720:	6263      	str	r3, [r4, #36]	; 0x24
 8001722:	4b05      	ldr	r3, [pc, #20]	; (8001738 <std.isra.0+0x3c>)
 8001724:	62a3      	str	r3, [r4, #40]	; 0x28
 8001726:	4b05      	ldr	r3, [pc, #20]	; (800173c <std.isra.0+0x40>)
 8001728:	62e3      	str	r3, [r4, #44]	; 0x2c
 800172a:	4b05      	ldr	r3, [pc, #20]	; (8001740 <std.isra.0+0x44>)
 800172c:	6224      	str	r4, [r4, #32]
 800172e:	6323      	str	r3, [r4, #48]	; 0x30
 8001730:	bd10      	pop	{r4, pc}
 8001732:	bf00      	nop
 8001734:	08001f1d 	.word	0x08001f1d
 8001738:	08001f3f 	.word	0x08001f3f
 800173c:	08001f77 	.word	0x08001f77
 8001740:	08001f9b 	.word	0x08001f9b

08001744 <__sfmoreglue>:
 8001744:	b570      	push	{r4, r5, r6, lr}
 8001746:	1e4a      	subs	r2, r1, #1
 8001748:	2568      	movs	r5, #104	; 0x68
 800174a:	4355      	muls	r5, r2
 800174c:	460e      	mov	r6, r1
 800174e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001752:	f000 f89f 	bl	8001894 <_malloc_r>
 8001756:	4604      	mov	r4, r0
 8001758:	b140      	cbz	r0, 800176c <__sfmoreglue+0x28>
 800175a:	2100      	movs	r1, #0
 800175c:	e880 0042 	stmia.w	r0, {r1, r6}
 8001760:	300c      	adds	r0, #12
 8001762:	60a0      	str	r0, [r4, #8]
 8001764:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001768:	f000 f88c 	bl	8001884 <memset>
 800176c:	4620      	mov	r0, r4
 800176e:	bd70      	pop	{r4, r5, r6, pc}

08001770 <__sinit>:
 8001770:	6983      	ldr	r3, [r0, #24]
 8001772:	b510      	push	{r4, lr}
 8001774:	4604      	mov	r4, r0
 8001776:	bb33      	cbnz	r3, 80017c6 <__sinit+0x56>
 8001778:	6483      	str	r3, [r0, #72]	; 0x48
 800177a:	64c3      	str	r3, [r0, #76]	; 0x4c
 800177c:	6503      	str	r3, [r0, #80]	; 0x50
 800177e:	4b12      	ldr	r3, [pc, #72]	; (80017c8 <__sinit+0x58>)
 8001780:	4a12      	ldr	r2, [pc, #72]	; (80017cc <__sinit+0x5c>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	6282      	str	r2, [r0, #40]	; 0x28
 8001786:	4298      	cmp	r0, r3
 8001788:	bf04      	itt	eq
 800178a:	2301      	moveq	r3, #1
 800178c:	6183      	streq	r3, [r0, #24]
 800178e:	f000 f81f 	bl	80017d0 <__sfp>
 8001792:	6060      	str	r0, [r4, #4]
 8001794:	4620      	mov	r0, r4
 8001796:	f000 f81b 	bl	80017d0 <__sfp>
 800179a:	60a0      	str	r0, [r4, #8]
 800179c:	4620      	mov	r0, r4
 800179e:	f000 f817 	bl	80017d0 <__sfp>
 80017a2:	2200      	movs	r2, #0
 80017a4:	60e0      	str	r0, [r4, #12]
 80017a6:	2104      	movs	r1, #4
 80017a8:	6860      	ldr	r0, [r4, #4]
 80017aa:	f7ff ffa7 	bl	80016fc <std.isra.0>
 80017ae:	2201      	movs	r2, #1
 80017b0:	2109      	movs	r1, #9
 80017b2:	68a0      	ldr	r0, [r4, #8]
 80017b4:	f7ff ffa2 	bl	80016fc <std.isra.0>
 80017b8:	2202      	movs	r2, #2
 80017ba:	2112      	movs	r1, #18
 80017bc:	68e0      	ldr	r0, [r4, #12]
 80017be:	f7ff ff9d 	bl	80016fc <std.isra.0>
 80017c2:	2301      	movs	r3, #1
 80017c4:	61a3      	str	r3, [r4, #24]
 80017c6:	bd10      	pop	{r4, pc}
 80017c8:	080025cc 	.word	0x080025cc
 80017cc:	080016f1 	.word	0x080016f1

080017d0 <__sfp>:
 80017d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017d2:	4b1c      	ldr	r3, [pc, #112]	; (8001844 <__sfp+0x74>)
 80017d4:	681e      	ldr	r6, [r3, #0]
 80017d6:	69b3      	ldr	r3, [r6, #24]
 80017d8:	4607      	mov	r7, r0
 80017da:	b913      	cbnz	r3, 80017e2 <__sfp+0x12>
 80017dc:	4630      	mov	r0, r6
 80017de:	f7ff ffc7 	bl	8001770 <__sinit>
 80017e2:	3648      	adds	r6, #72	; 0x48
 80017e4:	68b4      	ldr	r4, [r6, #8]
 80017e6:	6873      	ldr	r3, [r6, #4]
 80017e8:	3b01      	subs	r3, #1
 80017ea:	d503      	bpl.n	80017f4 <__sfp+0x24>
 80017ec:	6833      	ldr	r3, [r6, #0]
 80017ee:	b133      	cbz	r3, 80017fe <__sfp+0x2e>
 80017f0:	6836      	ldr	r6, [r6, #0]
 80017f2:	e7f7      	b.n	80017e4 <__sfp+0x14>
 80017f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80017f8:	b16d      	cbz	r5, 8001816 <__sfp+0x46>
 80017fa:	3468      	adds	r4, #104	; 0x68
 80017fc:	e7f4      	b.n	80017e8 <__sfp+0x18>
 80017fe:	2104      	movs	r1, #4
 8001800:	4638      	mov	r0, r7
 8001802:	f7ff ff9f 	bl	8001744 <__sfmoreglue>
 8001806:	6030      	str	r0, [r6, #0]
 8001808:	2800      	cmp	r0, #0
 800180a:	d1f1      	bne.n	80017f0 <__sfp+0x20>
 800180c:	230c      	movs	r3, #12
 800180e:	603b      	str	r3, [r7, #0]
 8001810:	4604      	mov	r4, r0
 8001812:	4620      	mov	r0, r4
 8001814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001816:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800181a:	81e3      	strh	r3, [r4, #14]
 800181c:	2301      	movs	r3, #1
 800181e:	81a3      	strh	r3, [r4, #12]
 8001820:	6665      	str	r5, [r4, #100]	; 0x64
 8001822:	6025      	str	r5, [r4, #0]
 8001824:	60a5      	str	r5, [r4, #8]
 8001826:	6065      	str	r5, [r4, #4]
 8001828:	6125      	str	r5, [r4, #16]
 800182a:	6165      	str	r5, [r4, #20]
 800182c:	61a5      	str	r5, [r4, #24]
 800182e:	2208      	movs	r2, #8
 8001830:	4629      	mov	r1, r5
 8001832:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001836:	f000 f825 	bl	8001884 <memset>
 800183a:	6365      	str	r5, [r4, #52]	; 0x34
 800183c:	63a5      	str	r5, [r4, #56]	; 0x38
 800183e:	64a5      	str	r5, [r4, #72]	; 0x48
 8001840:	64e5      	str	r5, [r4, #76]	; 0x4c
 8001842:	e7e6      	b.n	8001812 <__sfp+0x42>
 8001844:	080025cc 	.word	0x080025cc

08001848 <_fwalk_reent>:
 8001848:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800184c:	4680      	mov	r8, r0
 800184e:	4689      	mov	r9, r1
 8001850:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001854:	2600      	movs	r6, #0
 8001856:	b914      	cbnz	r4, 800185e <_fwalk_reent+0x16>
 8001858:	4630      	mov	r0, r6
 800185a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800185e:	68a5      	ldr	r5, [r4, #8]
 8001860:	6867      	ldr	r7, [r4, #4]
 8001862:	3f01      	subs	r7, #1
 8001864:	d501      	bpl.n	800186a <_fwalk_reent+0x22>
 8001866:	6824      	ldr	r4, [r4, #0]
 8001868:	e7f5      	b.n	8001856 <_fwalk_reent+0xe>
 800186a:	89ab      	ldrh	r3, [r5, #12]
 800186c:	2b01      	cmp	r3, #1
 800186e:	d907      	bls.n	8001880 <_fwalk_reent+0x38>
 8001870:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001874:	3301      	adds	r3, #1
 8001876:	d003      	beq.n	8001880 <_fwalk_reent+0x38>
 8001878:	4629      	mov	r1, r5
 800187a:	4640      	mov	r0, r8
 800187c:	47c8      	blx	r9
 800187e:	4306      	orrs	r6, r0
 8001880:	3568      	adds	r5, #104	; 0x68
 8001882:	e7ee      	b.n	8001862 <_fwalk_reent+0x1a>

08001884 <memset>:
 8001884:	4402      	add	r2, r0
 8001886:	4603      	mov	r3, r0
 8001888:	4293      	cmp	r3, r2
 800188a:	d100      	bne.n	800188e <memset+0xa>
 800188c:	4770      	bx	lr
 800188e:	f803 1b01 	strb.w	r1, [r3], #1
 8001892:	e7f9      	b.n	8001888 <memset+0x4>

08001894 <_malloc_r>:
 8001894:	b570      	push	{r4, r5, r6, lr}
 8001896:	1ccd      	adds	r5, r1, #3
 8001898:	f025 0503 	bic.w	r5, r5, #3
 800189c:	3508      	adds	r5, #8
 800189e:	2d0c      	cmp	r5, #12
 80018a0:	bf38      	it	cc
 80018a2:	250c      	movcc	r5, #12
 80018a4:	2d00      	cmp	r5, #0
 80018a6:	4606      	mov	r6, r0
 80018a8:	db01      	blt.n	80018ae <_malloc_r+0x1a>
 80018aa:	42a9      	cmp	r1, r5
 80018ac:	d903      	bls.n	80018b6 <_malloc_r+0x22>
 80018ae:	230c      	movs	r3, #12
 80018b0:	6033      	str	r3, [r6, #0]
 80018b2:	2000      	movs	r0, #0
 80018b4:	bd70      	pop	{r4, r5, r6, pc}
 80018b6:	f000 fd7f 	bl	80023b8 <__malloc_lock>
 80018ba:	4a23      	ldr	r2, [pc, #140]	; (8001948 <_malloc_r+0xb4>)
 80018bc:	6814      	ldr	r4, [r2, #0]
 80018be:	4621      	mov	r1, r4
 80018c0:	b991      	cbnz	r1, 80018e8 <_malloc_r+0x54>
 80018c2:	4c22      	ldr	r4, [pc, #136]	; (800194c <_malloc_r+0xb8>)
 80018c4:	6823      	ldr	r3, [r4, #0]
 80018c6:	b91b      	cbnz	r3, 80018d0 <_malloc_r+0x3c>
 80018c8:	4630      	mov	r0, r6
 80018ca:	f000 fb17 	bl	8001efc <_sbrk_r>
 80018ce:	6020      	str	r0, [r4, #0]
 80018d0:	4629      	mov	r1, r5
 80018d2:	4630      	mov	r0, r6
 80018d4:	f000 fb12 	bl	8001efc <_sbrk_r>
 80018d8:	1c43      	adds	r3, r0, #1
 80018da:	d126      	bne.n	800192a <_malloc_r+0x96>
 80018dc:	230c      	movs	r3, #12
 80018de:	6033      	str	r3, [r6, #0]
 80018e0:	4630      	mov	r0, r6
 80018e2:	f000 fd6a 	bl	80023ba <__malloc_unlock>
 80018e6:	e7e4      	b.n	80018b2 <_malloc_r+0x1e>
 80018e8:	680b      	ldr	r3, [r1, #0]
 80018ea:	1b5b      	subs	r3, r3, r5
 80018ec:	d41a      	bmi.n	8001924 <_malloc_r+0x90>
 80018ee:	2b0b      	cmp	r3, #11
 80018f0:	d90f      	bls.n	8001912 <_malloc_r+0x7e>
 80018f2:	600b      	str	r3, [r1, #0]
 80018f4:	50cd      	str	r5, [r1, r3]
 80018f6:	18cc      	adds	r4, r1, r3
 80018f8:	4630      	mov	r0, r6
 80018fa:	f000 fd5e 	bl	80023ba <__malloc_unlock>
 80018fe:	f104 000b 	add.w	r0, r4, #11
 8001902:	1d23      	adds	r3, r4, #4
 8001904:	f020 0007 	bic.w	r0, r0, #7
 8001908:	1ac3      	subs	r3, r0, r3
 800190a:	d01b      	beq.n	8001944 <_malloc_r+0xb0>
 800190c:	425a      	negs	r2, r3
 800190e:	50e2      	str	r2, [r4, r3]
 8001910:	bd70      	pop	{r4, r5, r6, pc}
 8001912:	428c      	cmp	r4, r1
 8001914:	bf0d      	iteet	eq
 8001916:	6863      	ldreq	r3, [r4, #4]
 8001918:	684b      	ldrne	r3, [r1, #4]
 800191a:	6063      	strne	r3, [r4, #4]
 800191c:	6013      	streq	r3, [r2, #0]
 800191e:	bf18      	it	ne
 8001920:	460c      	movne	r4, r1
 8001922:	e7e9      	b.n	80018f8 <_malloc_r+0x64>
 8001924:	460c      	mov	r4, r1
 8001926:	6849      	ldr	r1, [r1, #4]
 8001928:	e7ca      	b.n	80018c0 <_malloc_r+0x2c>
 800192a:	1cc4      	adds	r4, r0, #3
 800192c:	f024 0403 	bic.w	r4, r4, #3
 8001930:	42a0      	cmp	r0, r4
 8001932:	d005      	beq.n	8001940 <_malloc_r+0xac>
 8001934:	1a21      	subs	r1, r4, r0
 8001936:	4630      	mov	r0, r6
 8001938:	f000 fae0 	bl	8001efc <_sbrk_r>
 800193c:	3001      	adds	r0, #1
 800193e:	d0cd      	beq.n	80018dc <_malloc_r+0x48>
 8001940:	6025      	str	r5, [r4, #0]
 8001942:	e7d9      	b.n	80018f8 <_malloc_r+0x64>
 8001944:	bd70      	pop	{r4, r5, r6, pc}
 8001946:	bf00      	nop
 8001948:	20000094 	.word	0x20000094
 800194c:	20000098 	.word	0x20000098

08001950 <__sfputc_r>:
 8001950:	6893      	ldr	r3, [r2, #8]
 8001952:	3b01      	subs	r3, #1
 8001954:	2b00      	cmp	r3, #0
 8001956:	b410      	push	{r4}
 8001958:	6093      	str	r3, [r2, #8]
 800195a:	da09      	bge.n	8001970 <__sfputc_r+0x20>
 800195c:	6994      	ldr	r4, [r2, #24]
 800195e:	42a3      	cmp	r3, r4
 8001960:	db02      	blt.n	8001968 <__sfputc_r+0x18>
 8001962:	b2cb      	uxtb	r3, r1
 8001964:	2b0a      	cmp	r3, #10
 8001966:	d103      	bne.n	8001970 <__sfputc_r+0x20>
 8001968:	f85d 4b04 	ldr.w	r4, [sp], #4
 800196c:	f000 bb1a 	b.w	8001fa4 <__swbuf_r>
 8001970:	6813      	ldr	r3, [r2, #0]
 8001972:	1c58      	adds	r0, r3, #1
 8001974:	6010      	str	r0, [r2, #0]
 8001976:	7019      	strb	r1, [r3, #0]
 8001978:	b2c8      	uxtb	r0, r1
 800197a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800197e:	4770      	bx	lr

08001980 <__sfputs_r>:
 8001980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001982:	4606      	mov	r6, r0
 8001984:	460f      	mov	r7, r1
 8001986:	4614      	mov	r4, r2
 8001988:	18d5      	adds	r5, r2, r3
 800198a:	42ac      	cmp	r4, r5
 800198c:	d101      	bne.n	8001992 <__sfputs_r+0x12>
 800198e:	2000      	movs	r0, #0
 8001990:	e007      	b.n	80019a2 <__sfputs_r+0x22>
 8001992:	463a      	mov	r2, r7
 8001994:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001998:	4630      	mov	r0, r6
 800199a:	f7ff ffd9 	bl	8001950 <__sfputc_r>
 800199e:	1c43      	adds	r3, r0, #1
 80019a0:	d1f3      	bne.n	800198a <__sfputs_r+0xa>
 80019a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080019a4 <_vfiprintf_r>:
 80019a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80019a8:	b09d      	sub	sp, #116	; 0x74
 80019aa:	460c      	mov	r4, r1
 80019ac:	4617      	mov	r7, r2
 80019ae:	9303      	str	r3, [sp, #12]
 80019b0:	4606      	mov	r6, r0
 80019b2:	b118      	cbz	r0, 80019bc <_vfiprintf_r+0x18>
 80019b4:	6983      	ldr	r3, [r0, #24]
 80019b6:	b90b      	cbnz	r3, 80019bc <_vfiprintf_r+0x18>
 80019b8:	f7ff feda 	bl	8001770 <__sinit>
 80019bc:	4b7c      	ldr	r3, [pc, #496]	; (8001bb0 <_vfiprintf_r+0x20c>)
 80019be:	429c      	cmp	r4, r3
 80019c0:	d157      	bne.n	8001a72 <_vfiprintf_r+0xce>
 80019c2:	6874      	ldr	r4, [r6, #4]
 80019c4:	89a3      	ldrh	r3, [r4, #12]
 80019c6:	0718      	lsls	r0, r3, #28
 80019c8:	d55d      	bpl.n	8001a86 <_vfiprintf_r+0xe2>
 80019ca:	6923      	ldr	r3, [r4, #16]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d05a      	beq.n	8001a86 <_vfiprintf_r+0xe2>
 80019d0:	2300      	movs	r3, #0
 80019d2:	9309      	str	r3, [sp, #36]	; 0x24
 80019d4:	2320      	movs	r3, #32
 80019d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80019da:	2330      	movs	r3, #48	; 0x30
 80019dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80019e0:	f04f 0b01 	mov.w	fp, #1
 80019e4:	46b8      	mov	r8, r7
 80019e6:	4645      	mov	r5, r8
 80019e8:	f815 3b01 	ldrb.w	r3, [r5], #1
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d155      	bne.n	8001a9c <_vfiprintf_r+0xf8>
 80019f0:	ebb8 0a07 	subs.w	sl, r8, r7
 80019f4:	d00b      	beq.n	8001a0e <_vfiprintf_r+0x6a>
 80019f6:	4653      	mov	r3, sl
 80019f8:	463a      	mov	r2, r7
 80019fa:	4621      	mov	r1, r4
 80019fc:	4630      	mov	r0, r6
 80019fe:	f7ff ffbf 	bl	8001980 <__sfputs_r>
 8001a02:	3001      	adds	r0, #1
 8001a04:	f000 80c4 	beq.w	8001b90 <_vfiprintf_r+0x1ec>
 8001a08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001a0a:	4453      	add	r3, sl
 8001a0c:	9309      	str	r3, [sp, #36]	; 0x24
 8001a0e:	f898 3000 	ldrb.w	r3, [r8]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	f000 80bc 	beq.w	8001b90 <_vfiprintf_r+0x1ec>
 8001a18:	2300      	movs	r3, #0
 8001a1a:	f04f 32ff 	mov.w	r2, #4294967295
 8001a1e:	9304      	str	r3, [sp, #16]
 8001a20:	9307      	str	r3, [sp, #28]
 8001a22:	9205      	str	r2, [sp, #20]
 8001a24:	9306      	str	r3, [sp, #24]
 8001a26:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001a2a:	931a      	str	r3, [sp, #104]	; 0x68
 8001a2c:	2205      	movs	r2, #5
 8001a2e:	7829      	ldrb	r1, [r5, #0]
 8001a30:	4860      	ldr	r0, [pc, #384]	; (8001bb4 <_vfiprintf_r+0x210>)
 8001a32:	f7fe fbed 	bl	8000210 <memchr>
 8001a36:	f105 0801 	add.w	r8, r5, #1
 8001a3a:	9b04      	ldr	r3, [sp, #16]
 8001a3c:	2800      	cmp	r0, #0
 8001a3e:	d131      	bne.n	8001aa4 <_vfiprintf_r+0x100>
 8001a40:	06d9      	lsls	r1, r3, #27
 8001a42:	bf44      	itt	mi
 8001a44:	2220      	movmi	r2, #32
 8001a46:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001a4a:	071a      	lsls	r2, r3, #28
 8001a4c:	bf44      	itt	mi
 8001a4e:	222b      	movmi	r2, #43	; 0x2b
 8001a50:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001a54:	782a      	ldrb	r2, [r5, #0]
 8001a56:	2a2a      	cmp	r2, #42	; 0x2a
 8001a58:	d02c      	beq.n	8001ab4 <_vfiprintf_r+0x110>
 8001a5a:	9a07      	ldr	r2, [sp, #28]
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	200a      	movs	r0, #10
 8001a60:	46a8      	mov	r8, r5
 8001a62:	3501      	adds	r5, #1
 8001a64:	f898 3000 	ldrb.w	r3, [r8]
 8001a68:	3b30      	subs	r3, #48	; 0x30
 8001a6a:	2b09      	cmp	r3, #9
 8001a6c:	d96d      	bls.n	8001b4a <_vfiprintf_r+0x1a6>
 8001a6e:	b371      	cbz	r1, 8001ace <_vfiprintf_r+0x12a>
 8001a70:	e026      	b.n	8001ac0 <_vfiprintf_r+0x11c>
 8001a72:	4b51      	ldr	r3, [pc, #324]	; (8001bb8 <_vfiprintf_r+0x214>)
 8001a74:	429c      	cmp	r4, r3
 8001a76:	d101      	bne.n	8001a7c <_vfiprintf_r+0xd8>
 8001a78:	68b4      	ldr	r4, [r6, #8]
 8001a7a:	e7a3      	b.n	80019c4 <_vfiprintf_r+0x20>
 8001a7c:	4b4f      	ldr	r3, [pc, #316]	; (8001bbc <_vfiprintf_r+0x218>)
 8001a7e:	429c      	cmp	r4, r3
 8001a80:	bf08      	it	eq
 8001a82:	68f4      	ldreq	r4, [r6, #12]
 8001a84:	e79e      	b.n	80019c4 <_vfiprintf_r+0x20>
 8001a86:	4621      	mov	r1, r4
 8001a88:	4630      	mov	r0, r6
 8001a8a:	f000 faef 	bl	800206c <__swsetup_r>
 8001a8e:	2800      	cmp	r0, #0
 8001a90:	d09e      	beq.n	80019d0 <_vfiprintf_r+0x2c>
 8001a92:	f04f 30ff 	mov.w	r0, #4294967295
 8001a96:	b01d      	add	sp, #116	; 0x74
 8001a98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a9c:	2b25      	cmp	r3, #37	; 0x25
 8001a9e:	d0a7      	beq.n	80019f0 <_vfiprintf_r+0x4c>
 8001aa0:	46a8      	mov	r8, r5
 8001aa2:	e7a0      	b.n	80019e6 <_vfiprintf_r+0x42>
 8001aa4:	4a43      	ldr	r2, [pc, #268]	; (8001bb4 <_vfiprintf_r+0x210>)
 8001aa6:	1a80      	subs	r0, r0, r2
 8001aa8:	fa0b f000 	lsl.w	r0, fp, r0
 8001aac:	4318      	orrs	r0, r3
 8001aae:	9004      	str	r0, [sp, #16]
 8001ab0:	4645      	mov	r5, r8
 8001ab2:	e7bb      	b.n	8001a2c <_vfiprintf_r+0x88>
 8001ab4:	9a03      	ldr	r2, [sp, #12]
 8001ab6:	1d11      	adds	r1, r2, #4
 8001ab8:	6812      	ldr	r2, [r2, #0]
 8001aba:	9103      	str	r1, [sp, #12]
 8001abc:	2a00      	cmp	r2, #0
 8001abe:	db01      	blt.n	8001ac4 <_vfiprintf_r+0x120>
 8001ac0:	9207      	str	r2, [sp, #28]
 8001ac2:	e004      	b.n	8001ace <_vfiprintf_r+0x12a>
 8001ac4:	4252      	negs	r2, r2
 8001ac6:	f043 0302 	orr.w	r3, r3, #2
 8001aca:	9207      	str	r2, [sp, #28]
 8001acc:	9304      	str	r3, [sp, #16]
 8001ace:	f898 3000 	ldrb.w	r3, [r8]
 8001ad2:	2b2e      	cmp	r3, #46	; 0x2e
 8001ad4:	d110      	bne.n	8001af8 <_vfiprintf_r+0x154>
 8001ad6:	f898 3001 	ldrb.w	r3, [r8, #1]
 8001ada:	2b2a      	cmp	r3, #42	; 0x2a
 8001adc:	f108 0101 	add.w	r1, r8, #1
 8001ae0:	d137      	bne.n	8001b52 <_vfiprintf_r+0x1ae>
 8001ae2:	9b03      	ldr	r3, [sp, #12]
 8001ae4:	1d1a      	adds	r2, r3, #4
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	9203      	str	r2, [sp, #12]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	bfb8      	it	lt
 8001aee:	f04f 33ff 	movlt.w	r3, #4294967295
 8001af2:	f108 0802 	add.w	r8, r8, #2
 8001af6:	9305      	str	r3, [sp, #20]
 8001af8:	4d31      	ldr	r5, [pc, #196]	; (8001bc0 <_vfiprintf_r+0x21c>)
 8001afa:	f898 1000 	ldrb.w	r1, [r8]
 8001afe:	2203      	movs	r2, #3
 8001b00:	4628      	mov	r0, r5
 8001b02:	f7fe fb85 	bl	8000210 <memchr>
 8001b06:	b140      	cbz	r0, 8001b1a <_vfiprintf_r+0x176>
 8001b08:	2340      	movs	r3, #64	; 0x40
 8001b0a:	1b40      	subs	r0, r0, r5
 8001b0c:	fa03 f000 	lsl.w	r0, r3, r0
 8001b10:	9b04      	ldr	r3, [sp, #16]
 8001b12:	4303      	orrs	r3, r0
 8001b14:	9304      	str	r3, [sp, #16]
 8001b16:	f108 0801 	add.w	r8, r8, #1
 8001b1a:	f898 1000 	ldrb.w	r1, [r8]
 8001b1e:	4829      	ldr	r0, [pc, #164]	; (8001bc4 <_vfiprintf_r+0x220>)
 8001b20:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001b24:	2206      	movs	r2, #6
 8001b26:	f108 0701 	add.w	r7, r8, #1
 8001b2a:	f7fe fb71 	bl	8000210 <memchr>
 8001b2e:	2800      	cmp	r0, #0
 8001b30:	d034      	beq.n	8001b9c <_vfiprintf_r+0x1f8>
 8001b32:	4b25      	ldr	r3, [pc, #148]	; (8001bc8 <_vfiprintf_r+0x224>)
 8001b34:	bb03      	cbnz	r3, 8001b78 <_vfiprintf_r+0x1d4>
 8001b36:	9b03      	ldr	r3, [sp, #12]
 8001b38:	3307      	adds	r3, #7
 8001b3a:	f023 0307 	bic.w	r3, r3, #7
 8001b3e:	3308      	adds	r3, #8
 8001b40:	9303      	str	r3, [sp, #12]
 8001b42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001b44:	444b      	add	r3, r9
 8001b46:	9309      	str	r3, [sp, #36]	; 0x24
 8001b48:	e74c      	b.n	80019e4 <_vfiprintf_r+0x40>
 8001b4a:	fb00 3202 	mla	r2, r0, r2, r3
 8001b4e:	2101      	movs	r1, #1
 8001b50:	e786      	b.n	8001a60 <_vfiprintf_r+0xbc>
 8001b52:	2300      	movs	r3, #0
 8001b54:	9305      	str	r3, [sp, #20]
 8001b56:	4618      	mov	r0, r3
 8001b58:	250a      	movs	r5, #10
 8001b5a:	4688      	mov	r8, r1
 8001b5c:	3101      	adds	r1, #1
 8001b5e:	f898 2000 	ldrb.w	r2, [r8]
 8001b62:	3a30      	subs	r2, #48	; 0x30
 8001b64:	2a09      	cmp	r2, #9
 8001b66:	d903      	bls.n	8001b70 <_vfiprintf_r+0x1cc>
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d0c5      	beq.n	8001af8 <_vfiprintf_r+0x154>
 8001b6c:	9005      	str	r0, [sp, #20]
 8001b6e:	e7c3      	b.n	8001af8 <_vfiprintf_r+0x154>
 8001b70:	fb05 2000 	mla	r0, r5, r0, r2
 8001b74:	2301      	movs	r3, #1
 8001b76:	e7f0      	b.n	8001b5a <_vfiprintf_r+0x1b6>
 8001b78:	ab03      	add	r3, sp, #12
 8001b7a:	9300      	str	r3, [sp, #0]
 8001b7c:	4622      	mov	r2, r4
 8001b7e:	4b13      	ldr	r3, [pc, #76]	; (8001bcc <_vfiprintf_r+0x228>)
 8001b80:	a904      	add	r1, sp, #16
 8001b82:	4630      	mov	r0, r6
 8001b84:	f3af 8000 	nop.w
 8001b88:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001b8c:	4681      	mov	r9, r0
 8001b8e:	d1d8      	bne.n	8001b42 <_vfiprintf_r+0x19e>
 8001b90:	89a3      	ldrh	r3, [r4, #12]
 8001b92:	065b      	lsls	r3, r3, #25
 8001b94:	f53f af7d 	bmi.w	8001a92 <_vfiprintf_r+0xee>
 8001b98:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001b9a:	e77c      	b.n	8001a96 <_vfiprintf_r+0xf2>
 8001b9c:	ab03      	add	r3, sp, #12
 8001b9e:	9300      	str	r3, [sp, #0]
 8001ba0:	4622      	mov	r2, r4
 8001ba2:	4b0a      	ldr	r3, [pc, #40]	; (8001bcc <_vfiprintf_r+0x228>)
 8001ba4:	a904      	add	r1, sp, #16
 8001ba6:	4630      	mov	r0, r6
 8001ba8:	f000 f888 	bl	8001cbc <_printf_i>
 8001bac:	e7ec      	b.n	8001b88 <_vfiprintf_r+0x1e4>
 8001bae:	bf00      	nop
 8001bb0:	0800258c 	.word	0x0800258c
 8001bb4:	080025d0 	.word	0x080025d0
 8001bb8:	080025ac 	.word	0x080025ac
 8001bbc:	0800256c 	.word	0x0800256c
 8001bc0:	080025d6 	.word	0x080025d6
 8001bc4:	080025da 	.word	0x080025da
 8001bc8:	00000000 	.word	0x00000000
 8001bcc:	08001981 	.word	0x08001981

08001bd0 <_printf_common>:
 8001bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001bd4:	4691      	mov	r9, r2
 8001bd6:	461f      	mov	r7, r3
 8001bd8:	688a      	ldr	r2, [r1, #8]
 8001bda:	690b      	ldr	r3, [r1, #16]
 8001bdc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001be0:	4293      	cmp	r3, r2
 8001be2:	bfb8      	it	lt
 8001be4:	4613      	movlt	r3, r2
 8001be6:	f8c9 3000 	str.w	r3, [r9]
 8001bea:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001bee:	4606      	mov	r6, r0
 8001bf0:	460c      	mov	r4, r1
 8001bf2:	b112      	cbz	r2, 8001bfa <_printf_common+0x2a>
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	f8c9 3000 	str.w	r3, [r9]
 8001bfa:	6823      	ldr	r3, [r4, #0]
 8001bfc:	0699      	lsls	r1, r3, #26
 8001bfe:	bf42      	ittt	mi
 8001c00:	f8d9 3000 	ldrmi.w	r3, [r9]
 8001c04:	3302      	addmi	r3, #2
 8001c06:	f8c9 3000 	strmi.w	r3, [r9]
 8001c0a:	6825      	ldr	r5, [r4, #0]
 8001c0c:	f015 0506 	ands.w	r5, r5, #6
 8001c10:	d107      	bne.n	8001c22 <_printf_common+0x52>
 8001c12:	f104 0a19 	add.w	sl, r4, #25
 8001c16:	68e3      	ldr	r3, [r4, #12]
 8001c18:	f8d9 2000 	ldr.w	r2, [r9]
 8001c1c:	1a9b      	subs	r3, r3, r2
 8001c1e:	429d      	cmp	r5, r3
 8001c20:	db29      	blt.n	8001c76 <_printf_common+0xa6>
 8001c22:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001c26:	6822      	ldr	r2, [r4, #0]
 8001c28:	3300      	adds	r3, #0
 8001c2a:	bf18      	it	ne
 8001c2c:	2301      	movne	r3, #1
 8001c2e:	0692      	lsls	r2, r2, #26
 8001c30:	d42e      	bmi.n	8001c90 <_printf_common+0xc0>
 8001c32:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001c36:	4639      	mov	r1, r7
 8001c38:	4630      	mov	r0, r6
 8001c3a:	47c0      	blx	r8
 8001c3c:	3001      	adds	r0, #1
 8001c3e:	d021      	beq.n	8001c84 <_printf_common+0xb4>
 8001c40:	6823      	ldr	r3, [r4, #0]
 8001c42:	68e5      	ldr	r5, [r4, #12]
 8001c44:	f8d9 2000 	ldr.w	r2, [r9]
 8001c48:	f003 0306 	and.w	r3, r3, #6
 8001c4c:	2b04      	cmp	r3, #4
 8001c4e:	bf08      	it	eq
 8001c50:	1aad      	subeq	r5, r5, r2
 8001c52:	68a3      	ldr	r3, [r4, #8]
 8001c54:	6922      	ldr	r2, [r4, #16]
 8001c56:	bf0c      	ite	eq
 8001c58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001c5c:	2500      	movne	r5, #0
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	bfc4      	itt	gt
 8001c62:	1a9b      	subgt	r3, r3, r2
 8001c64:	18ed      	addgt	r5, r5, r3
 8001c66:	f04f 0900 	mov.w	r9, #0
 8001c6a:	341a      	adds	r4, #26
 8001c6c:	454d      	cmp	r5, r9
 8001c6e:	d11b      	bne.n	8001ca8 <_printf_common+0xd8>
 8001c70:	2000      	movs	r0, #0
 8001c72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001c76:	2301      	movs	r3, #1
 8001c78:	4652      	mov	r2, sl
 8001c7a:	4639      	mov	r1, r7
 8001c7c:	4630      	mov	r0, r6
 8001c7e:	47c0      	blx	r8
 8001c80:	3001      	adds	r0, #1
 8001c82:	d103      	bne.n	8001c8c <_printf_common+0xbc>
 8001c84:	f04f 30ff 	mov.w	r0, #4294967295
 8001c88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001c8c:	3501      	adds	r5, #1
 8001c8e:	e7c2      	b.n	8001c16 <_printf_common+0x46>
 8001c90:	18e1      	adds	r1, r4, r3
 8001c92:	1c5a      	adds	r2, r3, #1
 8001c94:	2030      	movs	r0, #48	; 0x30
 8001c96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001c9a:	4422      	add	r2, r4
 8001c9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001ca0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001ca4:	3302      	adds	r3, #2
 8001ca6:	e7c4      	b.n	8001c32 <_printf_common+0x62>
 8001ca8:	2301      	movs	r3, #1
 8001caa:	4622      	mov	r2, r4
 8001cac:	4639      	mov	r1, r7
 8001cae:	4630      	mov	r0, r6
 8001cb0:	47c0      	blx	r8
 8001cb2:	3001      	adds	r0, #1
 8001cb4:	d0e6      	beq.n	8001c84 <_printf_common+0xb4>
 8001cb6:	f109 0901 	add.w	r9, r9, #1
 8001cba:	e7d7      	b.n	8001c6c <_printf_common+0x9c>

08001cbc <_printf_i>:
 8001cbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001cc0:	4617      	mov	r7, r2
 8001cc2:	7e0a      	ldrb	r2, [r1, #24]
 8001cc4:	b085      	sub	sp, #20
 8001cc6:	2a6e      	cmp	r2, #110	; 0x6e
 8001cc8:	4698      	mov	r8, r3
 8001cca:	4606      	mov	r6, r0
 8001ccc:	460c      	mov	r4, r1
 8001cce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001cd0:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8001cd4:	f000 80bc 	beq.w	8001e50 <_printf_i+0x194>
 8001cd8:	d81a      	bhi.n	8001d10 <_printf_i+0x54>
 8001cda:	2a63      	cmp	r2, #99	; 0x63
 8001cdc:	d02e      	beq.n	8001d3c <_printf_i+0x80>
 8001cde:	d80a      	bhi.n	8001cf6 <_printf_i+0x3a>
 8001ce0:	2a00      	cmp	r2, #0
 8001ce2:	f000 80c8 	beq.w	8001e76 <_printf_i+0x1ba>
 8001ce6:	2a58      	cmp	r2, #88	; 0x58
 8001ce8:	f000 808a 	beq.w	8001e00 <_printf_i+0x144>
 8001cec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001cf0:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8001cf4:	e02a      	b.n	8001d4c <_printf_i+0x90>
 8001cf6:	2a64      	cmp	r2, #100	; 0x64
 8001cf8:	d001      	beq.n	8001cfe <_printf_i+0x42>
 8001cfa:	2a69      	cmp	r2, #105	; 0x69
 8001cfc:	d1f6      	bne.n	8001cec <_printf_i+0x30>
 8001cfe:	6821      	ldr	r1, [r4, #0]
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001d06:	d023      	beq.n	8001d50 <_printf_i+0x94>
 8001d08:	1d11      	adds	r1, r2, #4
 8001d0a:	6019      	str	r1, [r3, #0]
 8001d0c:	6813      	ldr	r3, [r2, #0]
 8001d0e:	e027      	b.n	8001d60 <_printf_i+0xa4>
 8001d10:	2a73      	cmp	r2, #115	; 0x73
 8001d12:	f000 80b4 	beq.w	8001e7e <_printf_i+0x1c2>
 8001d16:	d808      	bhi.n	8001d2a <_printf_i+0x6e>
 8001d18:	2a6f      	cmp	r2, #111	; 0x6f
 8001d1a:	d02a      	beq.n	8001d72 <_printf_i+0xb6>
 8001d1c:	2a70      	cmp	r2, #112	; 0x70
 8001d1e:	d1e5      	bne.n	8001cec <_printf_i+0x30>
 8001d20:	680a      	ldr	r2, [r1, #0]
 8001d22:	f042 0220 	orr.w	r2, r2, #32
 8001d26:	600a      	str	r2, [r1, #0]
 8001d28:	e003      	b.n	8001d32 <_printf_i+0x76>
 8001d2a:	2a75      	cmp	r2, #117	; 0x75
 8001d2c:	d021      	beq.n	8001d72 <_printf_i+0xb6>
 8001d2e:	2a78      	cmp	r2, #120	; 0x78
 8001d30:	d1dc      	bne.n	8001cec <_printf_i+0x30>
 8001d32:	2278      	movs	r2, #120	; 0x78
 8001d34:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8001d38:	496e      	ldr	r1, [pc, #440]	; (8001ef4 <_printf_i+0x238>)
 8001d3a:	e064      	b.n	8001e06 <_printf_i+0x14a>
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8001d42:	1d11      	adds	r1, r2, #4
 8001d44:	6019      	str	r1, [r3, #0]
 8001d46:	6813      	ldr	r3, [r2, #0]
 8001d48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e0a3      	b.n	8001e98 <_printf_i+0x1dc>
 8001d50:	f011 0f40 	tst.w	r1, #64	; 0x40
 8001d54:	f102 0104 	add.w	r1, r2, #4
 8001d58:	6019      	str	r1, [r3, #0]
 8001d5a:	d0d7      	beq.n	8001d0c <_printf_i+0x50>
 8001d5c:	f9b2 3000 	ldrsh.w	r3, [r2]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	da03      	bge.n	8001d6c <_printf_i+0xb0>
 8001d64:	222d      	movs	r2, #45	; 0x2d
 8001d66:	425b      	negs	r3, r3
 8001d68:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8001d6c:	4962      	ldr	r1, [pc, #392]	; (8001ef8 <_printf_i+0x23c>)
 8001d6e:	220a      	movs	r2, #10
 8001d70:	e017      	b.n	8001da2 <_printf_i+0xe6>
 8001d72:	6820      	ldr	r0, [r4, #0]
 8001d74:	6819      	ldr	r1, [r3, #0]
 8001d76:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001d7a:	d003      	beq.n	8001d84 <_printf_i+0xc8>
 8001d7c:	1d08      	adds	r0, r1, #4
 8001d7e:	6018      	str	r0, [r3, #0]
 8001d80:	680b      	ldr	r3, [r1, #0]
 8001d82:	e006      	b.n	8001d92 <_printf_i+0xd6>
 8001d84:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001d88:	f101 0004 	add.w	r0, r1, #4
 8001d8c:	6018      	str	r0, [r3, #0]
 8001d8e:	d0f7      	beq.n	8001d80 <_printf_i+0xc4>
 8001d90:	880b      	ldrh	r3, [r1, #0]
 8001d92:	4959      	ldr	r1, [pc, #356]	; (8001ef8 <_printf_i+0x23c>)
 8001d94:	2a6f      	cmp	r2, #111	; 0x6f
 8001d96:	bf14      	ite	ne
 8001d98:	220a      	movne	r2, #10
 8001d9a:	2208      	moveq	r2, #8
 8001d9c:	2000      	movs	r0, #0
 8001d9e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8001da2:	6865      	ldr	r5, [r4, #4]
 8001da4:	60a5      	str	r5, [r4, #8]
 8001da6:	2d00      	cmp	r5, #0
 8001da8:	f2c0 809c 	blt.w	8001ee4 <_printf_i+0x228>
 8001dac:	6820      	ldr	r0, [r4, #0]
 8001dae:	f020 0004 	bic.w	r0, r0, #4
 8001db2:	6020      	str	r0, [r4, #0]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d13f      	bne.n	8001e38 <_printf_i+0x17c>
 8001db8:	2d00      	cmp	r5, #0
 8001dba:	f040 8095 	bne.w	8001ee8 <_printf_i+0x22c>
 8001dbe:	4675      	mov	r5, lr
 8001dc0:	2a08      	cmp	r2, #8
 8001dc2:	d10b      	bne.n	8001ddc <_printf_i+0x120>
 8001dc4:	6823      	ldr	r3, [r4, #0]
 8001dc6:	07da      	lsls	r2, r3, #31
 8001dc8:	d508      	bpl.n	8001ddc <_printf_i+0x120>
 8001dca:	6923      	ldr	r3, [r4, #16]
 8001dcc:	6862      	ldr	r2, [r4, #4]
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	bfde      	ittt	le
 8001dd2:	2330      	movle	r3, #48	; 0x30
 8001dd4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001dd8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001ddc:	ebae 0305 	sub.w	r3, lr, r5
 8001de0:	6123      	str	r3, [r4, #16]
 8001de2:	f8cd 8000 	str.w	r8, [sp]
 8001de6:	463b      	mov	r3, r7
 8001de8:	aa03      	add	r2, sp, #12
 8001dea:	4621      	mov	r1, r4
 8001dec:	4630      	mov	r0, r6
 8001dee:	f7ff feef 	bl	8001bd0 <_printf_common>
 8001df2:	3001      	adds	r0, #1
 8001df4:	d155      	bne.n	8001ea2 <_printf_i+0x1e6>
 8001df6:	f04f 30ff 	mov.w	r0, #4294967295
 8001dfa:	b005      	add	sp, #20
 8001dfc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001e00:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8001e04:	493c      	ldr	r1, [pc, #240]	; (8001ef8 <_printf_i+0x23c>)
 8001e06:	6822      	ldr	r2, [r4, #0]
 8001e08:	6818      	ldr	r0, [r3, #0]
 8001e0a:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001e0e:	f100 0504 	add.w	r5, r0, #4
 8001e12:	601d      	str	r5, [r3, #0]
 8001e14:	d001      	beq.n	8001e1a <_printf_i+0x15e>
 8001e16:	6803      	ldr	r3, [r0, #0]
 8001e18:	e002      	b.n	8001e20 <_printf_i+0x164>
 8001e1a:	0655      	lsls	r5, r2, #25
 8001e1c:	d5fb      	bpl.n	8001e16 <_printf_i+0x15a>
 8001e1e:	8803      	ldrh	r3, [r0, #0]
 8001e20:	07d0      	lsls	r0, r2, #31
 8001e22:	bf44      	itt	mi
 8001e24:	f042 0220 	orrmi.w	r2, r2, #32
 8001e28:	6022      	strmi	r2, [r4, #0]
 8001e2a:	b91b      	cbnz	r3, 8001e34 <_printf_i+0x178>
 8001e2c:	6822      	ldr	r2, [r4, #0]
 8001e2e:	f022 0220 	bic.w	r2, r2, #32
 8001e32:	6022      	str	r2, [r4, #0]
 8001e34:	2210      	movs	r2, #16
 8001e36:	e7b1      	b.n	8001d9c <_printf_i+0xe0>
 8001e38:	4675      	mov	r5, lr
 8001e3a:	fbb3 f0f2 	udiv	r0, r3, r2
 8001e3e:	fb02 3310 	mls	r3, r2, r0, r3
 8001e42:	5ccb      	ldrb	r3, [r1, r3]
 8001e44:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2800      	cmp	r0, #0
 8001e4c:	d1f5      	bne.n	8001e3a <_printf_i+0x17e>
 8001e4e:	e7b7      	b.n	8001dc0 <_printf_i+0x104>
 8001e50:	6808      	ldr	r0, [r1, #0]
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	6949      	ldr	r1, [r1, #20]
 8001e56:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001e5a:	d004      	beq.n	8001e66 <_printf_i+0x1aa>
 8001e5c:	1d10      	adds	r0, r2, #4
 8001e5e:	6018      	str	r0, [r3, #0]
 8001e60:	6813      	ldr	r3, [r2, #0]
 8001e62:	6019      	str	r1, [r3, #0]
 8001e64:	e007      	b.n	8001e76 <_printf_i+0x1ba>
 8001e66:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001e6a:	f102 0004 	add.w	r0, r2, #4
 8001e6e:	6018      	str	r0, [r3, #0]
 8001e70:	6813      	ldr	r3, [r2, #0]
 8001e72:	d0f6      	beq.n	8001e62 <_printf_i+0x1a6>
 8001e74:	8019      	strh	r1, [r3, #0]
 8001e76:	2300      	movs	r3, #0
 8001e78:	6123      	str	r3, [r4, #16]
 8001e7a:	4675      	mov	r5, lr
 8001e7c:	e7b1      	b.n	8001de2 <_printf_i+0x126>
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	1d11      	adds	r1, r2, #4
 8001e82:	6019      	str	r1, [r3, #0]
 8001e84:	6815      	ldr	r5, [r2, #0]
 8001e86:	6862      	ldr	r2, [r4, #4]
 8001e88:	2100      	movs	r1, #0
 8001e8a:	4628      	mov	r0, r5
 8001e8c:	f7fe f9c0 	bl	8000210 <memchr>
 8001e90:	b108      	cbz	r0, 8001e96 <_printf_i+0x1da>
 8001e92:	1b40      	subs	r0, r0, r5
 8001e94:	6060      	str	r0, [r4, #4]
 8001e96:	6863      	ldr	r3, [r4, #4]
 8001e98:	6123      	str	r3, [r4, #16]
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001ea0:	e79f      	b.n	8001de2 <_printf_i+0x126>
 8001ea2:	6923      	ldr	r3, [r4, #16]
 8001ea4:	462a      	mov	r2, r5
 8001ea6:	4639      	mov	r1, r7
 8001ea8:	4630      	mov	r0, r6
 8001eaa:	47c0      	blx	r8
 8001eac:	3001      	adds	r0, #1
 8001eae:	d0a2      	beq.n	8001df6 <_printf_i+0x13a>
 8001eb0:	6823      	ldr	r3, [r4, #0]
 8001eb2:	079b      	lsls	r3, r3, #30
 8001eb4:	d507      	bpl.n	8001ec6 <_printf_i+0x20a>
 8001eb6:	2500      	movs	r5, #0
 8001eb8:	f104 0919 	add.w	r9, r4, #25
 8001ebc:	68e3      	ldr	r3, [r4, #12]
 8001ebe:	9a03      	ldr	r2, [sp, #12]
 8001ec0:	1a9b      	subs	r3, r3, r2
 8001ec2:	429d      	cmp	r5, r3
 8001ec4:	db05      	blt.n	8001ed2 <_printf_i+0x216>
 8001ec6:	68e0      	ldr	r0, [r4, #12]
 8001ec8:	9b03      	ldr	r3, [sp, #12]
 8001eca:	4298      	cmp	r0, r3
 8001ecc:	bfb8      	it	lt
 8001ece:	4618      	movlt	r0, r3
 8001ed0:	e793      	b.n	8001dfa <_printf_i+0x13e>
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	464a      	mov	r2, r9
 8001ed6:	4639      	mov	r1, r7
 8001ed8:	4630      	mov	r0, r6
 8001eda:	47c0      	blx	r8
 8001edc:	3001      	adds	r0, #1
 8001ede:	d08a      	beq.n	8001df6 <_printf_i+0x13a>
 8001ee0:	3501      	adds	r5, #1
 8001ee2:	e7eb      	b.n	8001ebc <_printf_i+0x200>
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d1a7      	bne.n	8001e38 <_printf_i+0x17c>
 8001ee8:	780b      	ldrb	r3, [r1, #0]
 8001eea:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001eee:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001ef2:	e765      	b.n	8001dc0 <_printf_i+0x104>
 8001ef4:	080025f2 	.word	0x080025f2
 8001ef8:	080025e1 	.word	0x080025e1

08001efc <_sbrk_r>:
 8001efc:	b538      	push	{r3, r4, r5, lr}
 8001efe:	4c06      	ldr	r4, [pc, #24]	; (8001f18 <_sbrk_r+0x1c>)
 8001f00:	2300      	movs	r3, #0
 8001f02:	4605      	mov	r5, r0
 8001f04:	4608      	mov	r0, r1
 8001f06:	6023      	str	r3, [r4, #0]
 8001f08:	f000 fb02 	bl	8002510 <_sbrk>
 8001f0c:	1c43      	adds	r3, r0, #1
 8001f0e:	d102      	bne.n	8001f16 <_sbrk_r+0x1a>
 8001f10:	6823      	ldr	r3, [r4, #0]
 8001f12:	b103      	cbz	r3, 8001f16 <_sbrk_r+0x1a>
 8001f14:	602b      	str	r3, [r5, #0]
 8001f16:	bd38      	pop	{r3, r4, r5, pc}
 8001f18:	200000e4 	.word	0x200000e4

08001f1c <__sread>:
 8001f1c:	b510      	push	{r4, lr}
 8001f1e:	460c      	mov	r4, r1
 8001f20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f24:	f000 fa98 	bl	8002458 <_read_r>
 8001f28:	2800      	cmp	r0, #0
 8001f2a:	bfab      	itete	ge
 8001f2c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001f2e:	89a3      	ldrhlt	r3, [r4, #12]
 8001f30:	181b      	addge	r3, r3, r0
 8001f32:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001f36:	bfac      	ite	ge
 8001f38:	6563      	strge	r3, [r4, #84]	; 0x54
 8001f3a:	81a3      	strhlt	r3, [r4, #12]
 8001f3c:	bd10      	pop	{r4, pc}

08001f3e <__swrite>:
 8001f3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f42:	461f      	mov	r7, r3
 8001f44:	898b      	ldrh	r3, [r1, #12]
 8001f46:	05db      	lsls	r3, r3, #23
 8001f48:	4605      	mov	r5, r0
 8001f4a:	460c      	mov	r4, r1
 8001f4c:	4616      	mov	r6, r2
 8001f4e:	d505      	bpl.n	8001f5c <__swrite+0x1e>
 8001f50:	2302      	movs	r3, #2
 8001f52:	2200      	movs	r2, #0
 8001f54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f58:	f000 f9b8 	bl	80022cc <_lseek_r>
 8001f5c:	89a3      	ldrh	r3, [r4, #12]
 8001f5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001f62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f66:	81a3      	strh	r3, [r4, #12]
 8001f68:	4632      	mov	r2, r6
 8001f6a:	463b      	mov	r3, r7
 8001f6c:	4628      	mov	r0, r5
 8001f6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001f72:	f000 b869 	b.w	8002048 <_write_r>

08001f76 <__sseek>:
 8001f76:	b510      	push	{r4, lr}
 8001f78:	460c      	mov	r4, r1
 8001f7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f7e:	f000 f9a5 	bl	80022cc <_lseek_r>
 8001f82:	1c43      	adds	r3, r0, #1
 8001f84:	89a3      	ldrh	r3, [r4, #12]
 8001f86:	bf15      	itete	ne
 8001f88:	6560      	strne	r0, [r4, #84]	; 0x54
 8001f8a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001f8e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001f92:	81a3      	strheq	r3, [r4, #12]
 8001f94:	bf18      	it	ne
 8001f96:	81a3      	strhne	r3, [r4, #12]
 8001f98:	bd10      	pop	{r4, pc}

08001f9a <__sclose>:
 8001f9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001f9e:	f000 b8d3 	b.w	8002148 <_close_r>
	...

08001fa4 <__swbuf_r>:
 8001fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fa6:	460e      	mov	r6, r1
 8001fa8:	4614      	mov	r4, r2
 8001faa:	4605      	mov	r5, r0
 8001fac:	b118      	cbz	r0, 8001fb6 <__swbuf_r+0x12>
 8001fae:	6983      	ldr	r3, [r0, #24]
 8001fb0:	b90b      	cbnz	r3, 8001fb6 <__swbuf_r+0x12>
 8001fb2:	f7ff fbdd 	bl	8001770 <__sinit>
 8001fb6:	4b21      	ldr	r3, [pc, #132]	; (800203c <__swbuf_r+0x98>)
 8001fb8:	429c      	cmp	r4, r3
 8001fba:	d12a      	bne.n	8002012 <__swbuf_r+0x6e>
 8001fbc:	686c      	ldr	r4, [r5, #4]
 8001fbe:	69a3      	ldr	r3, [r4, #24]
 8001fc0:	60a3      	str	r3, [r4, #8]
 8001fc2:	89a3      	ldrh	r3, [r4, #12]
 8001fc4:	071a      	lsls	r2, r3, #28
 8001fc6:	d52e      	bpl.n	8002026 <__swbuf_r+0x82>
 8001fc8:	6923      	ldr	r3, [r4, #16]
 8001fca:	b363      	cbz	r3, 8002026 <__swbuf_r+0x82>
 8001fcc:	6923      	ldr	r3, [r4, #16]
 8001fce:	6820      	ldr	r0, [r4, #0]
 8001fd0:	1ac0      	subs	r0, r0, r3
 8001fd2:	6963      	ldr	r3, [r4, #20]
 8001fd4:	b2f6      	uxtb	r6, r6
 8001fd6:	4298      	cmp	r0, r3
 8001fd8:	4637      	mov	r7, r6
 8001fda:	db04      	blt.n	8001fe6 <__swbuf_r+0x42>
 8001fdc:	4621      	mov	r1, r4
 8001fde:	4628      	mov	r0, r5
 8001fe0:	f000 f94a 	bl	8002278 <_fflush_r>
 8001fe4:	bb28      	cbnz	r0, 8002032 <__swbuf_r+0x8e>
 8001fe6:	68a3      	ldr	r3, [r4, #8]
 8001fe8:	3b01      	subs	r3, #1
 8001fea:	60a3      	str	r3, [r4, #8]
 8001fec:	6823      	ldr	r3, [r4, #0]
 8001fee:	1c5a      	adds	r2, r3, #1
 8001ff0:	6022      	str	r2, [r4, #0]
 8001ff2:	701e      	strb	r6, [r3, #0]
 8001ff4:	6963      	ldr	r3, [r4, #20]
 8001ff6:	3001      	adds	r0, #1
 8001ff8:	4298      	cmp	r0, r3
 8001ffa:	d004      	beq.n	8002006 <__swbuf_r+0x62>
 8001ffc:	89a3      	ldrh	r3, [r4, #12]
 8001ffe:	07db      	lsls	r3, r3, #31
 8002000:	d519      	bpl.n	8002036 <__swbuf_r+0x92>
 8002002:	2e0a      	cmp	r6, #10
 8002004:	d117      	bne.n	8002036 <__swbuf_r+0x92>
 8002006:	4621      	mov	r1, r4
 8002008:	4628      	mov	r0, r5
 800200a:	f000 f935 	bl	8002278 <_fflush_r>
 800200e:	b190      	cbz	r0, 8002036 <__swbuf_r+0x92>
 8002010:	e00f      	b.n	8002032 <__swbuf_r+0x8e>
 8002012:	4b0b      	ldr	r3, [pc, #44]	; (8002040 <__swbuf_r+0x9c>)
 8002014:	429c      	cmp	r4, r3
 8002016:	d101      	bne.n	800201c <__swbuf_r+0x78>
 8002018:	68ac      	ldr	r4, [r5, #8]
 800201a:	e7d0      	b.n	8001fbe <__swbuf_r+0x1a>
 800201c:	4b09      	ldr	r3, [pc, #36]	; (8002044 <__swbuf_r+0xa0>)
 800201e:	429c      	cmp	r4, r3
 8002020:	bf08      	it	eq
 8002022:	68ec      	ldreq	r4, [r5, #12]
 8002024:	e7cb      	b.n	8001fbe <__swbuf_r+0x1a>
 8002026:	4621      	mov	r1, r4
 8002028:	4628      	mov	r0, r5
 800202a:	f000 f81f 	bl	800206c <__swsetup_r>
 800202e:	2800      	cmp	r0, #0
 8002030:	d0cc      	beq.n	8001fcc <__swbuf_r+0x28>
 8002032:	f04f 37ff 	mov.w	r7, #4294967295
 8002036:	4638      	mov	r0, r7
 8002038:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800203a:	bf00      	nop
 800203c:	0800258c 	.word	0x0800258c
 8002040:	080025ac 	.word	0x080025ac
 8002044:	0800256c 	.word	0x0800256c

08002048 <_write_r>:
 8002048:	b538      	push	{r3, r4, r5, lr}
 800204a:	4c07      	ldr	r4, [pc, #28]	; (8002068 <_write_r+0x20>)
 800204c:	4605      	mov	r5, r0
 800204e:	4608      	mov	r0, r1
 8002050:	4611      	mov	r1, r2
 8002052:	2200      	movs	r2, #0
 8002054:	6022      	str	r2, [r4, #0]
 8002056:	461a      	mov	r2, r3
 8002058:	f7ff f946 	bl	80012e8 <_write>
 800205c:	1c43      	adds	r3, r0, #1
 800205e:	d102      	bne.n	8002066 <_write_r+0x1e>
 8002060:	6823      	ldr	r3, [r4, #0]
 8002062:	b103      	cbz	r3, 8002066 <_write_r+0x1e>
 8002064:	602b      	str	r3, [r5, #0]
 8002066:	bd38      	pop	{r3, r4, r5, pc}
 8002068:	200000e4 	.word	0x200000e4

0800206c <__swsetup_r>:
 800206c:	4b32      	ldr	r3, [pc, #200]	; (8002138 <__swsetup_r+0xcc>)
 800206e:	b570      	push	{r4, r5, r6, lr}
 8002070:	681d      	ldr	r5, [r3, #0]
 8002072:	4606      	mov	r6, r0
 8002074:	460c      	mov	r4, r1
 8002076:	b125      	cbz	r5, 8002082 <__swsetup_r+0x16>
 8002078:	69ab      	ldr	r3, [r5, #24]
 800207a:	b913      	cbnz	r3, 8002082 <__swsetup_r+0x16>
 800207c:	4628      	mov	r0, r5
 800207e:	f7ff fb77 	bl	8001770 <__sinit>
 8002082:	4b2e      	ldr	r3, [pc, #184]	; (800213c <__swsetup_r+0xd0>)
 8002084:	429c      	cmp	r4, r3
 8002086:	d10f      	bne.n	80020a8 <__swsetup_r+0x3c>
 8002088:	686c      	ldr	r4, [r5, #4]
 800208a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800208e:	b29a      	uxth	r2, r3
 8002090:	0715      	lsls	r5, r2, #28
 8002092:	d42c      	bmi.n	80020ee <__swsetup_r+0x82>
 8002094:	06d0      	lsls	r0, r2, #27
 8002096:	d411      	bmi.n	80020bc <__swsetup_r+0x50>
 8002098:	2209      	movs	r2, #9
 800209a:	6032      	str	r2, [r6, #0]
 800209c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020a0:	81a3      	strh	r3, [r4, #12]
 80020a2:	f04f 30ff 	mov.w	r0, #4294967295
 80020a6:	bd70      	pop	{r4, r5, r6, pc}
 80020a8:	4b25      	ldr	r3, [pc, #148]	; (8002140 <__swsetup_r+0xd4>)
 80020aa:	429c      	cmp	r4, r3
 80020ac:	d101      	bne.n	80020b2 <__swsetup_r+0x46>
 80020ae:	68ac      	ldr	r4, [r5, #8]
 80020b0:	e7eb      	b.n	800208a <__swsetup_r+0x1e>
 80020b2:	4b24      	ldr	r3, [pc, #144]	; (8002144 <__swsetup_r+0xd8>)
 80020b4:	429c      	cmp	r4, r3
 80020b6:	bf08      	it	eq
 80020b8:	68ec      	ldreq	r4, [r5, #12]
 80020ba:	e7e6      	b.n	800208a <__swsetup_r+0x1e>
 80020bc:	0751      	lsls	r1, r2, #29
 80020be:	d512      	bpl.n	80020e6 <__swsetup_r+0x7a>
 80020c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80020c2:	b141      	cbz	r1, 80020d6 <__swsetup_r+0x6a>
 80020c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80020c8:	4299      	cmp	r1, r3
 80020ca:	d002      	beq.n	80020d2 <__swsetup_r+0x66>
 80020cc:	4630      	mov	r0, r6
 80020ce:	f000 f975 	bl	80023bc <_free_r>
 80020d2:	2300      	movs	r3, #0
 80020d4:	6363      	str	r3, [r4, #52]	; 0x34
 80020d6:	89a3      	ldrh	r3, [r4, #12]
 80020d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80020dc:	81a3      	strh	r3, [r4, #12]
 80020de:	2300      	movs	r3, #0
 80020e0:	6063      	str	r3, [r4, #4]
 80020e2:	6923      	ldr	r3, [r4, #16]
 80020e4:	6023      	str	r3, [r4, #0]
 80020e6:	89a3      	ldrh	r3, [r4, #12]
 80020e8:	f043 0308 	orr.w	r3, r3, #8
 80020ec:	81a3      	strh	r3, [r4, #12]
 80020ee:	6923      	ldr	r3, [r4, #16]
 80020f0:	b94b      	cbnz	r3, 8002106 <__swsetup_r+0x9a>
 80020f2:	89a3      	ldrh	r3, [r4, #12]
 80020f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80020f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020fc:	d003      	beq.n	8002106 <__swsetup_r+0x9a>
 80020fe:	4621      	mov	r1, r4
 8002100:	4630      	mov	r0, r6
 8002102:	f000 f919 	bl	8002338 <__smakebuf_r>
 8002106:	89a2      	ldrh	r2, [r4, #12]
 8002108:	f012 0301 	ands.w	r3, r2, #1
 800210c:	d00c      	beq.n	8002128 <__swsetup_r+0xbc>
 800210e:	2300      	movs	r3, #0
 8002110:	60a3      	str	r3, [r4, #8]
 8002112:	6963      	ldr	r3, [r4, #20]
 8002114:	425b      	negs	r3, r3
 8002116:	61a3      	str	r3, [r4, #24]
 8002118:	6923      	ldr	r3, [r4, #16]
 800211a:	b953      	cbnz	r3, 8002132 <__swsetup_r+0xc6>
 800211c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002120:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8002124:	d1ba      	bne.n	800209c <__swsetup_r+0x30>
 8002126:	bd70      	pop	{r4, r5, r6, pc}
 8002128:	0792      	lsls	r2, r2, #30
 800212a:	bf58      	it	pl
 800212c:	6963      	ldrpl	r3, [r4, #20]
 800212e:	60a3      	str	r3, [r4, #8]
 8002130:	e7f2      	b.n	8002118 <__swsetup_r+0xac>
 8002132:	2000      	movs	r0, #0
 8002134:	e7f7      	b.n	8002126 <__swsetup_r+0xba>
 8002136:	bf00      	nop
 8002138:	2000000c 	.word	0x2000000c
 800213c:	0800258c 	.word	0x0800258c
 8002140:	080025ac 	.word	0x080025ac
 8002144:	0800256c 	.word	0x0800256c

08002148 <_close_r>:
 8002148:	b538      	push	{r3, r4, r5, lr}
 800214a:	4c06      	ldr	r4, [pc, #24]	; (8002164 <_close_r+0x1c>)
 800214c:	2300      	movs	r3, #0
 800214e:	4605      	mov	r5, r0
 8002150:	4608      	mov	r0, r1
 8002152:	6023      	str	r3, [r4, #0]
 8002154:	f000 f9b4 	bl	80024c0 <_close>
 8002158:	1c43      	adds	r3, r0, #1
 800215a:	d102      	bne.n	8002162 <_close_r+0x1a>
 800215c:	6823      	ldr	r3, [r4, #0]
 800215e:	b103      	cbz	r3, 8002162 <_close_r+0x1a>
 8002160:	602b      	str	r3, [r5, #0]
 8002162:	bd38      	pop	{r3, r4, r5, pc}
 8002164:	200000e4 	.word	0x200000e4

08002168 <__sflush_r>:
 8002168:	898a      	ldrh	r2, [r1, #12]
 800216a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800216e:	4605      	mov	r5, r0
 8002170:	0710      	lsls	r0, r2, #28
 8002172:	460c      	mov	r4, r1
 8002174:	d45a      	bmi.n	800222c <__sflush_r+0xc4>
 8002176:	684b      	ldr	r3, [r1, #4]
 8002178:	2b00      	cmp	r3, #0
 800217a:	dc05      	bgt.n	8002188 <__sflush_r+0x20>
 800217c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800217e:	2b00      	cmp	r3, #0
 8002180:	dc02      	bgt.n	8002188 <__sflush_r+0x20>
 8002182:	2000      	movs	r0, #0
 8002184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002188:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800218a:	2e00      	cmp	r6, #0
 800218c:	d0f9      	beq.n	8002182 <__sflush_r+0x1a>
 800218e:	2300      	movs	r3, #0
 8002190:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002194:	682f      	ldr	r7, [r5, #0]
 8002196:	602b      	str	r3, [r5, #0]
 8002198:	d033      	beq.n	8002202 <__sflush_r+0x9a>
 800219a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800219c:	89a3      	ldrh	r3, [r4, #12]
 800219e:	075a      	lsls	r2, r3, #29
 80021a0:	d505      	bpl.n	80021ae <__sflush_r+0x46>
 80021a2:	6863      	ldr	r3, [r4, #4]
 80021a4:	1ac0      	subs	r0, r0, r3
 80021a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80021a8:	b10b      	cbz	r3, 80021ae <__sflush_r+0x46>
 80021aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80021ac:	1ac0      	subs	r0, r0, r3
 80021ae:	2300      	movs	r3, #0
 80021b0:	4602      	mov	r2, r0
 80021b2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80021b4:	6a21      	ldr	r1, [r4, #32]
 80021b6:	4628      	mov	r0, r5
 80021b8:	47b0      	blx	r6
 80021ba:	1c43      	adds	r3, r0, #1
 80021bc:	89a3      	ldrh	r3, [r4, #12]
 80021be:	d106      	bne.n	80021ce <__sflush_r+0x66>
 80021c0:	6829      	ldr	r1, [r5, #0]
 80021c2:	291d      	cmp	r1, #29
 80021c4:	d84b      	bhi.n	800225e <__sflush_r+0xf6>
 80021c6:	4a2b      	ldr	r2, [pc, #172]	; (8002274 <__sflush_r+0x10c>)
 80021c8:	40ca      	lsrs	r2, r1
 80021ca:	07d6      	lsls	r6, r2, #31
 80021cc:	d547      	bpl.n	800225e <__sflush_r+0xf6>
 80021ce:	2200      	movs	r2, #0
 80021d0:	6062      	str	r2, [r4, #4]
 80021d2:	04d9      	lsls	r1, r3, #19
 80021d4:	6922      	ldr	r2, [r4, #16]
 80021d6:	6022      	str	r2, [r4, #0]
 80021d8:	d504      	bpl.n	80021e4 <__sflush_r+0x7c>
 80021da:	1c42      	adds	r2, r0, #1
 80021dc:	d101      	bne.n	80021e2 <__sflush_r+0x7a>
 80021de:	682b      	ldr	r3, [r5, #0]
 80021e0:	b903      	cbnz	r3, 80021e4 <__sflush_r+0x7c>
 80021e2:	6560      	str	r0, [r4, #84]	; 0x54
 80021e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80021e6:	602f      	str	r7, [r5, #0]
 80021e8:	2900      	cmp	r1, #0
 80021ea:	d0ca      	beq.n	8002182 <__sflush_r+0x1a>
 80021ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80021f0:	4299      	cmp	r1, r3
 80021f2:	d002      	beq.n	80021fa <__sflush_r+0x92>
 80021f4:	4628      	mov	r0, r5
 80021f6:	f000 f8e1 	bl	80023bc <_free_r>
 80021fa:	2000      	movs	r0, #0
 80021fc:	6360      	str	r0, [r4, #52]	; 0x34
 80021fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002202:	6a21      	ldr	r1, [r4, #32]
 8002204:	2301      	movs	r3, #1
 8002206:	4628      	mov	r0, r5
 8002208:	47b0      	blx	r6
 800220a:	1c41      	adds	r1, r0, #1
 800220c:	d1c6      	bne.n	800219c <__sflush_r+0x34>
 800220e:	682b      	ldr	r3, [r5, #0]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d0c3      	beq.n	800219c <__sflush_r+0x34>
 8002214:	2b1d      	cmp	r3, #29
 8002216:	d001      	beq.n	800221c <__sflush_r+0xb4>
 8002218:	2b16      	cmp	r3, #22
 800221a:	d101      	bne.n	8002220 <__sflush_r+0xb8>
 800221c:	602f      	str	r7, [r5, #0]
 800221e:	e7b0      	b.n	8002182 <__sflush_r+0x1a>
 8002220:	89a3      	ldrh	r3, [r4, #12]
 8002222:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002226:	81a3      	strh	r3, [r4, #12]
 8002228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800222c:	690f      	ldr	r7, [r1, #16]
 800222e:	2f00      	cmp	r7, #0
 8002230:	d0a7      	beq.n	8002182 <__sflush_r+0x1a>
 8002232:	0793      	lsls	r3, r2, #30
 8002234:	680e      	ldr	r6, [r1, #0]
 8002236:	bf08      	it	eq
 8002238:	694b      	ldreq	r3, [r1, #20]
 800223a:	600f      	str	r7, [r1, #0]
 800223c:	bf18      	it	ne
 800223e:	2300      	movne	r3, #0
 8002240:	eba6 0807 	sub.w	r8, r6, r7
 8002244:	608b      	str	r3, [r1, #8]
 8002246:	f1b8 0f00 	cmp.w	r8, #0
 800224a:	dd9a      	ble.n	8002182 <__sflush_r+0x1a>
 800224c:	4643      	mov	r3, r8
 800224e:	463a      	mov	r2, r7
 8002250:	6a21      	ldr	r1, [r4, #32]
 8002252:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002254:	4628      	mov	r0, r5
 8002256:	47b0      	blx	r6
 8002258:	2800      	cmp	r0, #0
 800225a:	dc07      	bgt.n	800226c <__sflush_r+0x104>
 800225c:	89a3      	ldrh	r3, [r4, #12]
 800225e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002262:	81a3      	strh	r3, [r4, #12]
 8002264:	f04f 30ff 	mov.w	r0, #4294967295
 8002268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800226c:	4407      	add	r7, r0
 800226e:	eba8 0800 	sub.w	r8, r8, r0
 8002272:	e7e8      	b.n	8002246 <__sflush_r+0xde>
 8002274:	20400001 	.word	0x20400001

08002278 <_fflush_r>:
 8002278:	b538      	push	{r3, r4, r5, lr}
 800227a:	690b      	ldr	r3, [r1, #16]
 800227c:	4605      	mov	r5, r0
 800227e:	460c      	mov	r4, r1
 8002280:	b1db      	cbz	r3, 80022ba <_fflush_r+0x42>
 8002282:	b118      	cbz	r0, 800228c <_fflush_r+0x14>
 8002284:	6983      	ldr	r3, [r0, #24]
 8002286:	b90b      	cbnz	r3, 800228c <_fflush_r+0x14>
 8002288:	f7ff fa72 	bl	8001770 <__sinit>
 800228c:	4b0c      	ldr	r3, [pc, #48]	; (80022c0 <_fflush_r+0x48>)
 800228e:	429c      	cmp	r4, r3
 8002290:	d109      	bne.n	80022a6 <_fflush_r+0x2e>
 8002292:	686c      	ldr	r4, [r5, #4]
 8002294:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002298:	b17b      	cbz	r3, 80022ba <_fflush_r+0x42>
 800229a:	4621      	mov	r1, r4
 800229c:	4628      	mov	r0, r5
 800229e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80022a2:	f7ff bf61 	b.w	8002168 <__sflush_r>
 80022a6:	4b07      	ldr	r3, [pc, #28]	; (80022c4 <_fflush_r+0x4c>)
 80022a8:	429c      	cmp	r4, r3
 80022aa:	d101      	bne.n	80022b0 <_fflush_r+0x38>
 80022ac:	68ac      	ldr	r4, [r5, #8]
 80022ae:	e7f1      	b.n	8002294 <_fflush_r+0x1c>
 80022b0:	4b05      	ldr	r3, [pc, #20]	; (80022c8 <_fflush_r+0x50>)
 80022b2:	429c      	cmp	r4, r3
 80022b4:	bf08      	it	eq
 80022b6:	68ec      	ldreq	r4, [r5, #12]
 80022b8:	e7ec      	b.n	8002294 <_fflush_r+0x1c>
 80022ba:	2000      	movs	r0, #0
 80022bc:	bd38      	pop	{r3, r4, r5, pc}
 80022be:	bf00      	nop
 80022c0:	0800258c 	.word	0x0800258c
 80022c4:	080025ac 	.word	0x080025ac
 80022c8:	0800256c 	.word	0x0800256c

080022cc <_lseek_r>:
 80022cc:	b538      	push	{r3, r4, r5, lr}
 80022ce:	4c07      	ldr	r4, [pc, #28]	; (80022ec <_lseek_r+0x20>)
 80022d0:	4605      	mov	r5, r0
 80022d2:	4608      	mov	r0, r1
 80022d4:	4611      	mov	r1, r2
 80022d6:	2200      	movs	r2, #0
 80022d8:	6022      	str	r2, [r4, #0]
 80022da:	461a      	mov	r2, r3
 80022dc:	f000 f908 	bl	80024f0 <_lseek>
 80022e0:	1c43      	adds	r3, r0, #1
 80022e2:	d102      	bne.n	80022ea <_lseek_r+0x1e>
 80022e4:	6823      	ldr	r3, [r4, #0]
 80022e6:	b103      	cbz	r3, 80022ea <_lseek_r+0x1e>
 80022e8:	602b      	str	r3, [r5, #0]
 80022ea:	bd38      	pop	{r3, r4, r5, pc}
 80022ec:	200000e4 	.word	0x200000e4

080022f0 <__swhatbuf_r>:
 80022f0:	b570      	push	{r4, r5, r6, lr}
 80022f2:	460e      	mov	r6, r1
 80022f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80022f8:	2900      	cmp	r1, #0
 80022fa:	b090      	sub	sp, #64	; 0x40
 80022fc:	4614      	mov	r4, r2
 80022fe:	461d      	mov	r5, r3
 8002300:	da07      	bge.n	8002312 <__swhatbuf_r+0x22>
 8002302:	2300      	movs	r3, #0
 8002304:	602b      	str	r3, [r5, #0]
 8002306:	89b3      	ldrh	r3, [r6, #12]
 8002308:	061a      	lsls	r2, r3, #24
 800230a:	d410      	bmi.n	800232e <__swhatbuf_r+0x3e>
 800230c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002310:	e00e      	b.n	8002330 <__swhatbuf_r+0x40>
 8002312:	aa01      	add	r2, sp, #4
 8002314:	f000 f8b2 	bl	800247c <_fstat_r>
 8002318:	2800      	cmp	r0, #0
 800231a:	dbf2      	blt.n	8002302 <__swhatbuf_r+0x12>
 800231c:	9a02      	ldr	r2, [sp, #8]
 800231e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002322:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002326:	425a      	negs	r2, r3
 8002328:	415a      	adcs	r2, r3
 800232a:	602a      	str	r2, [r5, #0]
 800232c:	e7ee      	b.n	800230c <__swhatbuf_r+0x1c>
 800232e:	2340      	movs	r3, #64	; 0x40
 8002330:	2000      	movs	r0, #0
 8002332:	6023      	str	r3, [r4, #0]
 8002334:	b010      	add	sp, #64	; 0x40
 8002336:	bd70      	pop	{r4, r5, r6, pc}

08002338 <__smakebuf_r>:
 8002338:	898b      	ldrh	r3, [r1, #12]
 800233a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800233c:	079d      	lsls	r5, r3, #30
 800233e:	4606      	mov	r6, r0
 8002340:	460c      	mov	r4, r1
 8002342:	d507      	bpl.n	8002354 <__smakebuf_r+0x1c>
 8002344:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002348:	6023      	str	r3, [r4, #0]
 800234a:	6123      	str	r3, [r4, #16]
 800234c:	2301      	movs	r3, #1
 800234e:	6163      	str	r3, [r4, #20]
 8002350:	b002      	add	sp, #8
 8002352:	bd70      	pop	{r4, r5, r6, pc}
 8002354:	ab01      	add	r3, sp, #4
 8002356:	466a      	mov	r2, sp
 8002358:	f7ff ffca 	bl	80022f0 <__swhatbuf_r>
 800235c:	9900      	ldr	r1, [sp, #0]
 800235e:	4605      	mov	r5, r0
 8002360:	4630      	mov	r0, r6
 8002362:	f7ff fa97 	bl	8001894 <_malloc_r>
 8002366:	b948      	cbnz	r0, 800237c <__smakebuf_r+0x44>
 8002368:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800236c:	059a      	lsls	r2, r3, #22
 800236e:	d4ef      	bmi.n	8002350 <__smakebuf_r+0x18>
 8002370:	f023 0303 	bic.w	r3, r3, #3
 8002374:	f043 0302 	orr.w	r3, r3, #2
 8002378:	81a3      	strh	r3, [r4, #12]
 800237a:	e7e3      	b.n	8002344 <__smakebuf_r+0xc>
 800237c:	4b0d      	ldr	r3, [pc, #52]	; (80023b4 <__smakebuf_r+0x7c>)
 800237e:	62b3      	str	r3, [r6, #40]	; 0x28
 8002380:	89a3      	ldrh	r3, [r4, #12]
 8002382:	6020      	str	r0, [r4, #0]
 8002384:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002388:	81a3      	strh	r3, [r4, #12]
 800238a:	9b00      	ldr	r3, [sp, #0]
 800238c:	6163      	str	r3, [r4, #20]
 800238e:	9b01      	ldr	r3, [sp, #4]
 8002390:	6120      	str	r0, [r4, #16]
 8002392:	b15b      	cbz	r3, 80023ac <__smakebuf_r+0x74>
 8002394:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002398:	4630      	mov	r0, r6
 800239a:	f000 f881 	bl	80024a0 <_isatty_r>
 800239e:	b128      	cbz	r0, 80023ac <__smakebuf_r+0x74>
 80023a0:	89a3      	ldrh	r3, [r4, #12]
 80023a2:	f023 0303 	bic.w	r3, r3, #3
 80023a6:	f043 0301 	orr.w	r3, r3, #1
 80023aa:	81a3      	strh	r3, [r4, #12]
 80023ac:	89a3      	ldrh	r3, [r4, #12]
 80023ae:	431d      	orrs	r5, r3
 80023b0:	81a5      	strh	r5, [r4, #12]
 80023b2:	e7cd      	b.n	8002350 <__smakebuf_r+0x18>
 80023b4:	080016f1 	.word	0x080016f1

080023b8 <__malloc_lock>:
 80023b8:	4770      	bx	lr

080023ba <__malloc_unlock>:
 80023ba:	4770      	bx	lr

080023bc <_free_r>:
 80023bc:	b538      	push	{r3, r4, r5, lr}
 80023be:	4605      	mov	r5, r0
 80023c0:	2900      	cmp	r1, #0
 80023c2:	d045      	beq.n	8002450 <_free_r+0x94>
 80023c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80023c8:	1f0c      	subs	r4, r1, #4
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	bfb8      	it	lt
 80023ce:	18e4      	addlt	r4, r4, r3
 80023d0:	f7ff fff2 	bl	80023b8 <__malloc_lock>
 80023d4:	4a1f      	ldr	r2, [pc, #124]	; (8002454 <_free_r+0x98>)
 80023d6:	6813      	ldr	r3, [r2, #0]
 80023d8:	4610      	mov	r0, r2
 80023da:	b933      	cbnz	r3, 80023ea <_free_r+0x2e>
 80023dc:	6063      	str	r3, [r4, #4]
 80023de:	6014      	str	r4, [r2, #0]
 80023e0:	4628      	mov	r0, r5
 80023e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80023e6:	f7ff bfe8 	b.w	80023ba <__malloc_unlock>
 80023ea:	42a3      	cmp	r3, r4
 80023ec:	d90c      	bls.n	8002408 <_free_r+0x4c>
 80023ee:	6821      	ldr	r1, [r4, #0]
 80023f0:	1862      	adds	r2, r4, r1
 80023f2:	4293      	cmp	r3, r2
 80023f4:	bf04      	itt	eq
 80023f6:	681a      	ldreq	r2, [r3, #0]
 80023f8:	685b      	ldreq	r3, [r3, #4]
 80023fa:	6063      	str	r3, [r4, #4]
 80023fc:	bf04      	itt	eq
 80023fe:	1852      	addeq	r2, r2, r1
 8002400:	6022      	streq	r2, [r4, #0]
 8002402:	6004      	str	r4, [r0, #0]
 8002404:	e7ec      	b.n	80023e0 <_free_r+0x24>
 8002406:	4613      	mov	r3, r2
 8002408:	685a      	ldr	r2, [r3, #4]
 800240a:	b10a      	cbz	r2, 8002410 <_free_r+0x54>
 800240c:	42a2      	cmp	r2, r4
 800240e:	d9fa      	bls.n	8002406 <_free_r+0x4a>
 8002410:	6819      	ldr	r1, [r3, #0]
 8002412:	1858      	adds	r0, r3, r1
 8002414:	42a0      	cmp	r0, r4
 8002416:	d10b      	bne.n	8002430 <_free_r+0x74>
 8002418:	6820      	ldr	r0, [r4, #0]
 800241a:	4401      	add	r1, r0
 800241c:	1858      	adds	r0, r3, r1
 800241e:	4282      	cmp	r2, r0
 8002420:	6019      	str	r1, [r3, #0]
 8002422:	d1dd      	bne.n	80023e0 <_free_r+0x24>
 8002424:	6810      	ldr	r0, [r2, #0]
 8002426:	6852      	ldr	r2, [r2, #4]
 8002428:	605a      	str	r2, [r3, #4]
 800242a:	4401      	add	r1, r0
 800242c:	6019      	str	r1, [r3, #0]
 800242e:	e7d7      	b.n	80023e0 <_free_r+0x24>
 8002430:	d902      	bls.n	8002438 <_free_r+0x7c>
 8002432:	230c      	movs	r3, #12
 8002434:	602b      	str	r3, [r5, #0]
 8002436:	e7d3      	b.n	80023e0 <_free_r+0x24>
 8002438:	6820      	ldr	r0, [r4, #0]
 800243a:	1821      	adds	r1, r4, r0
 800243c:	428a      	cmp	r2, r1
 800243e:	bf04      	itt	eq
 8002440:	6811      	ldreq	r1, [r2, #0]
 8002442:	6852      	ldreq	r2, [r2, #4]
 8002444:	6062      	str	r2, [r4, #4]
 8002446:	bf04      	itt	eq
 8002448:	1809      	addeq	r1, r1, r0
 800244a:	6021      	streq	r1, [r4, #0]
 800244c:	605c      	str	r4, [r3, #4]
 800244e:	e7c7      	b.n	80023e0 <_free_r+0x24>
 8002450:	bd38      	pop	{r3, r4, r5, pc}
 8002452:	bf00      	nop
 8002454:	20000094 	.word	0x20000094

08002458 <_read_r>:
 8002458:	b538      	push	{r3, r4, r5, lr}
 800245a:	4c07      	ldr	r4, [pc, #28]	; (8002478 <_read_r+0x20>)
 800245c:	4605      	mov	r5, r0
 800245e:	4608      	mov	r0, r1
 8002460:	4611      	mov	r1, r2
 8002462:	2200      	movs	r2, #0
 8002464:	6022      	str	r2, [r4, #0]
 8002466:	461a      	mov	r2, r3
 8002468:	f000 f84a 	bl	8002500 <_read>
 800246c:	1c43      	adds	r3, r0, #1
 800246e:	d102      	bne.n	8002476 <_read_r+0x1e>
 8002470:	6823      	ldr	r3, [r4, #0]
 8002472:	b103      	cbz	r3, 8002476 <_read_r+0x1e>
 8002474:	602b      	str	r3, [r5, #0]
 8002476:	bd38      	pop	{r3, r4, r5, pc}
 8002478:	200000e4 	.word	0x200000e4

0800247c <_fstat_r>:
 800247c:	b538      	push	{r3, r4, r5, lr}
 800247e:	4c07      	ldr	r4, [pc, #28]	; (800249c <_fstat_r+0x20>)
 8002480:	2300      	movs	r3, #0
 8002482:	4605      	mov	r5, r0
 8002484:	4608      	mov	r0, r1
 8002486:	4611      	mov	r1, r2
 8002488:	6023      	str	r3, [r4, #0]
 800248a:	f000 f821 	bl	80024d0 <_fstat>
 800248e:	1c43      	adds	r3, r0, #1
 8002490:	d102      	bne.n	8002498 <_fstat_r+0x1c>
 8002492:	6823      	ldr	r3, [r4, #0]
 8002494:	b103      	cbz	r3, 8002498 <_fstat_r+0x1c>
 8002496:	602b      	str	r3, [r5, #0]
 8002498:	bd38      	pop	{r3, r4, r5, pc}
 800249a:	bf00      	nop
 800249c:	200000e4 	.word	0x200000e4

080024a0 <_isatty_r>:
 80024a0:	b538      	push	{r3, r4, r5, lr}
 80024a2:	4c06      	ldr	r4, [pc, #24]	; (80024bc <_isatty_r+0x1c>)
 80024a4:	2300      	movs	r3, #0
 80024a6:	4605      	mov	r5, r0
 80024a8:	4608      	mov	r0, r1
 80024aa:	6023      	str	r3, [r4, #0]
 80024ac:	f000 f818 	bl	80024e0 <_isatty>
 80024b0:	1c43      	adds	r3, r0, #1
 80024b2:	d102      	bne.n	80024ba <_isatty_r+0x1a>
 80024b4:	6823      	ldr	r3, [r4, #0]
 80024b6:	b103      	cbz	r3, 80024ba <_isatty_r+0x1a>
 80024b8:	602b      	str	r3, [r5, #0]
 80024ba:	bd38      	pop	{r3, r4, r5, pc}
 80024bc:	200000e4 	.word	0x200000e4

080024c0 <_close>:
 80024c0:	4b02      	ldr	r3, [pc, #8]	; (80024cc <_close+0xc>)
 80024c2:	2258      	movs	r2, #88	; 0x58
 80024c4:	601a      	str	r2, [r3, #0]
 80024c6:	f04f 30ff 	mov.w	r0, #4294967295
 80024ca:	4770      	bx	lr
 80024cc:	200000e4 	.word	0x200000e4

080024d0 <_fstat>:
 80024d0:	4b02      	ldr	r3, [pc, #8]	; (80024dc <_fstat+0xc>)
 80024d2:	2258      	movs	r2, #88	; 0x58
 80024d4:	601a      	str	r2, [r3, #0]
 80024d6:	f04f 30ff 	mov.w	r0, #4294967295
 80024da:	4770      	bx	lr
 80024dc:	200000e4 	.word	0x200000e4

080024e0 <_isatty>:
 80024e0:	4b02      	ldr	r3, [pc, #8]	; (80024ec <_isatty+0xc>)
 80024e2:	2258      	movs	r2, #88	; 0x58
 80024e4:	601a      	str	r2, [r3, #0]
 80024e6:	2000      	movs	r0, #0
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	200000e4 	.word	0x200000e4

080024f0 <_lseek>:
 80024f0:	4b02      	ldr	r3, [pc, #8]	; (80024fc <_lseek+0xc>)
 80024f2:	2258      	movs	r2, #88	; 0x58
 80024f4:	601a      	str	r2, [r3, #0]
 80024f6:	f04f 30ff 	mov.w	r0, #4294967295
 80024fa:	4770      	bx	lr
 80024fc:	200000e4 	.word	0x200000e4

08002500 <_read>:
 8002500:	4b02      	ldr	r3, [pc, #8]	; (800250c <_read+0xc>)
 8002502:	2258      	movs	r2, #88	; 0x58
 8002504:	601a      	str	r2, [r3, #0]
 8002506:	f04f 30ff 	mov.w	r0, #4294967295
 800250a:	4770      	bx	lr
 800250c:	200000e4 	.word	0x200000e4

08002510 <_sbrk>:
 8002510:	4b04      	ldr	r3, [pc, #16]	; (8002524 <_sbrk+0x14>)
 8002512:	6819      	ldr	r1, [r3, #0]
 8002514:	4602      	mov	r2, r0
 8002516:	b909      	cbnz	r1, 800251c <_sbrk+0xc>
 8002518:	4903      	ldr	r1, [pc, #12]	; (8002528 <_sbrk+0x18>)
 800251a:	6019      	str	r1, [r3, #0]
 800251c:	6818      	ldr	r0, [r3, #0]
 800251e:	4402      	add	r2, r0
 8002520:	601a      	str	r2, [r3, #0]
 8002522:	4770      	bx	lr
 8002524:	2000009c 	.word	0x2000009c
 8002528:	200000e8 	.word	0x200000e8

0800252c <_init>:
 800252c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800252e:	bf00      	nop
 8002530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002532:	bc08      	pop	{r3}
 8002534:	469e      	mov	lr, r3
 8002536:	4770      	bx	lr

08002538 <_fini>:
 8002538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800253a:	bf00      	nop
 800253c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800253e:	bc08      	pop	{r3}
 8002540:	469e      	mov	lr, r3
 8002542:	4770      	bx	lr
