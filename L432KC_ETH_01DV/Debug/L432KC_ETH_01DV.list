
L432KC_ETH_01DV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006fbc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000368  08007150  08007150  00017150  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080074b8  080074b8  000174b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080074c0  080074c0  000174c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080074c4  080074c4  000174c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000674  20000000  080074c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000021c  20000674  08007b3c  00020674  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000890  08007b3c  00020890  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020674  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001a44b  00000000  00000000  000206a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002d9c  00000000  00000000  0003aaef  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000091eb  00000000  00000000  0003d88b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000c50  00000000  00000000  00046a78  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000010a8  00000000  00000000  000476c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00007167  00000000  00000000  00048770  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000523b  00000000  00000000  0004f8d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00054b12  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003414  00000000  00000000  00054b90  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stab         00000084  00000000  00000000  00057fa4  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stabstr      00000117  00000000  00000000  00058028  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000674 	.word	0x20000674
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007134 	.word	0x08007134

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000678 	.word	0x20000678
 80001cc:	08007134 	.word	0x08007134

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f092 0f00 	teq	r2, #0
 800056a:	bf14      	ite	ne
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800057c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000580:	e720      	b.n	80003c4 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_ul2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	e00a      	b.n	80005aa <__aeabi_l2d+0x16>

08000594 <__aeabi_l2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005a2:	d502      	bpl.n	80005aa <__aeabi_l2d+0x16>
 80005a4:	4240      	negs	r0, r0
 80005a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005b6:	f43f aedc 	beq.w	8000372 <__adddf3+0xe6>
 80005ba:	f04f 0203 	mov.w	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005d2:	f1c2 0320 	rsb	r3, r2, #32
 80005d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005da:	fa20 f002 	lsr.w	r0, r0, r2
 80005de:	fa01 fe03 	lsl.w	lr, r1, r3
 80005e2:	ea40 000e 	orr.w	r0, r0, lr
 80005e6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ea:	4414      	add	r4, r2
 80005ec:	e6c1      	b.n	8000372 <__adddf3+0xe6>
 80005ee:	bf00      	nop

080005f0 <__aeabi_dmul>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005fe:	bf1d      	ittte	ne
 8000600:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000604:	ea94 0f0c 	teqne	r4, ip
 8000608:	ea95 0f0c 	teqne	r5, ip
 800060c:	f000 f8de 	bleq	80007cc <__aeabi_dmul+0x1dc>
 8000610:	442c      	add	r4, r5
 8000612:	ea81 0603 	eor.w	r6, r1, r3
 8000616:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800061a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800061e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000622:	bf18      	it	ne
 8000624:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000628:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800062c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000630:	d038      	beq.n	80006a4 <__aeabi_dmul+0xb4>
 8000632:	fba0 ce02 	umull	ip, lr, r0, r2
 8000636:	f04f 0500 	mov.w	r5, #0
 800063a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800063e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000642:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000646:	f04f 0600 	mov.w	r6, #0
 800064a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800064e:	f09c 0f00 	teq	ip, #0
 8000652:	bf18      	it	ne
 8000654:	f04e 0e01 	orrne.w	lr, lr, #1
 8000658:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800065c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000660:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000664:	d204      	bcs.n	8000670 <__aeabi_dmul+0x80>
 8000666:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800066a:	416d      	adcs	r5, r5
 800066c:	eb46 0606 	adc.w	r6, r6, r6
 8000670:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000674:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000678:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800067c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000680:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000684:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000688:	bf88      	it	hi
 800068a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800068e:	d81e      	bhi.n	80006ce <__aeabi_dmul+0xde>
 8000690:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000694:	bf08      	it	eq
 8000696:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800069a:	f150 0000 	adcs.w	r0, r0, #0
 800069e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a8:	ea46 0101 	orr.w	r1, r6, r1
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	ea81 0103 	eor.w	r1, r1, r3
 80006b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b8:	bfc2      	ittt	gt
 80006ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	popgt	{r4, r5, r6, pc}
 80006c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c8:	f04f 0e00 	mov.w	lr, #0
 80006cc:	3c01      	subs	r4, #1
 80006ce:	f300 80ab 	bgt.w	8000828 <__aeabi_dmul+0x238>
 80006d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006d6:	bfde      	ittt	le
 80006d8:	2000      	movle	r0, #0
 80006da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006de:	bd70      	pople	{r4, r5, r6, pc}
 80006e0:	f1c4 0400 	rsb	r4, r4, #0
 80006e4:	3c20      	subs	r4, #32
 80006e6:	da35      	bge.n	8000754 <__aeabi_dmul+0x164>
 80006e8:	340c      	adds	r4, #12
 80006ea:	dc1b      	bgt.n	8000724 <__aeabi_dmul+0x134>
 80006ec:	f104 0414 	add.w	r4, r4, #20
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f305 	lsl.w	r3, r0, r5
 80006f8:	fa20 f004 	lsr.w	r0, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000708:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800070c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000710:	fa21 f604 	lsr.w	r6, r1, r4
 8000714:	eb42 0106 	adc.w	r1, r2, r6
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 040c 	rsb	r4, r4, #12
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f304 	lsl.w	r3, r0, r4
 8000730:	fa20 f005 	lsr.w	r0, r0, r5
 8000734:	fa01 f204 	lsl.w	r2, r1, r4
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000744:	f141 0100 	adc.w	r1, r1, #0
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f205 	lsl.w	r2, r0, r5
 800075c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000760:	fa20 f304 	lsr.w	r3, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea43 0302 	orr.w	r3, r3, r2
 800076c:	fa21 f004 	lsr.w	r0, r1, r4
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	fa21 f204 	lsr.w	r2, r1, r4
 8000778:	ea20 0002 	bic.w	r0, r0, r2
 800077c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f094 0f00 	teq	r4, #0
 8000790:	d10f      	bne.n	80007b2 <__aeabi_dmul+0x1c2>
 8000792:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000796:	0040      	lsls	r0, r0, #1
 8000798:	eb41 0101 	adc.w	r1, r1, r1
 800079c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a0:	bf08      	it	eq
 80007a2:	3c01      	subeq	r4, #1
 80007a4:	d0f7      	beq.n	8000796 <__aeabi_dmul+0x1a6>
 80007a6:	ea41 0106 	orr.w	r1, r1, r6
 80007aa:	f095 0f00 	teq	r5, #0
 80007ae:	bf18      	it	ne
 80007b0:	4770      	bxne	lr
 80007b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007b6:	0052      	lsls	r2, r2, #1
 80007b8:	eb43 0303 	adc.w	r3, r3, r3
 80007bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3d01      	subeq	r5, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1c6>
 80007c6:	ea43 0306 	orr.w	r3, r3, r6
 80007ca:	4770      	bx	lr
 80007cc:	ea94 0f0c 	teq	r4, ip
 80007d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007d4:	bf18      	it	ne
 80007d6:	ea95 0f0c 	teqne	r5, ip
 80007da:	d00c      	beq.n	80007f6 <__aeabi_dmul+0x206>
 80007dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e0:	bf18      	it	ne
 80007e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e6:	d1d1      	bne.n	800078c <__aeabi_dmul+0x19c>
 80007e8:	ea81 0103 	eor.w	r1, r1, r3
 80007ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f0:	f04f 0000 	mov.w	r0, #0
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fa:	bf06      	itte	eq
 80007fc:	4610      	moveq	r0, r2
 80007fe:	4619      	moveq	r1, r3
 8000800:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000804:	d019      	beq.n	800083a <__aeabi_dmul+0x24a>
 8000806:	ea94 0f0c 	teq	r4, ip
 800080a:	d102      	bne.n	8000812 <__aeabi_dmul+0x222>
 800080c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000810:	d113      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000812:	ea95 0f0c 	teq	r5, ip
 8000816:	d105      	bne.n	8000824 <__aeabi_dmul+0x234>
 8000818:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800081c:	bf1c      	itt	ne
 800081e:	4610      	movne	r0, r2
 8000820:	4619      	movne	r1, r3
 8000822:	d10a      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000830:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000834:	f04f 0000 	mov.w	r0, #0
 8000838:	bd70      	pop	{r4, r5, r6, pc}
 800083a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800083e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000842:	bd70      	pop	{r4, r5, r6, pc}

08000844 <__aeabi_ddiv>:
 8000844:	b570      	push	{r4, r5, r6, lr}
 8000846:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800084a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800084e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000852:	bf1d      	ittte	ne
 8000854:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000858:	ea94 0f0c 	teqne	r4, ip
 800085c:	ea95 0f0c 	teqne	r5, ip
 8000860:	f000 f8a7 	bleq	80009b2 <__aeabi_ddiv+0x16e>
 8000864:	eba4 0405 	sub.w	r4, r4, r5
 8000868:	ea81 0e03 	eor.w	lr, r1, r3
 800086c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000870:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000874:	f000 8088 	beq.w	8000988 <__aeabi_ddiv+0x144>
 8000878:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800087c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000880:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000884:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000888:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800088c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000890:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000894:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000898:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800089c:	429d      	cmp	r5, r3
 800089e:	bf08      	it	eq
 80008a0:	4296      	cmpeq	r6, r2
 80008a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008aa:	d202      	bcs.n	80008b2 <__aeabi_ddiv+0x6e>
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	1ab6      	subs	r6, r6, r2
 80008b4:	eb65 0503 	sbc.w	r5, r5, r3
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000920:	ea55 0e06 	orrs.w	lr, r5, r6
 8000924:	d018      	beq.n	8000958 <__aeabi_ddiv+0x114>
 8000926:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800092a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800092e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000932:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000936:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800093a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800093e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000942:	d1c0      	bne.n	80008c6 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	d10b      	bne.n	8000962 <__aeabi_ddiv+0x11e>
 800094a:	ea41 0100 	orr.w	r1, r1, r0
 800094e:	f04f 0000 	mov.w	r0, #0
 8000952:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000956:	e7b6      	b.n	80008c6 <__aeabi_ddiv+0x82>
 8000958:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800095c:	bf04      	itt	eq
 800095e:	4301      	orreq	r1, r0
 8000960:	2000      	moveq	r0, #0
 8000962:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000966:	bf88      	it	hi
 8000968:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800096c:	f63f aeaf 	bhi.w	80006ce <__aeabi_dmul+0xde>
 8000970:	ebb5 0c03 	subs.w	ip, r5, r3
 8000974:	bf04      	itt	eq
 8000976:	ebb6 0c02 	subseq.w	ip, r6, r2
 800097a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800097e:	f150 0000 	adcs.w	r0, r0, #0
 8000982:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000986:	bd70      	pop	{r4, r5, r6, pc}
 8000988:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800098c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000990:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000994:	bfc2      	ittt	gt
 8000996:	ebd4 050c 	rsbsgt	r5, r4, ip
 800099a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800099e:	bd70      	popgt	{r4, r5, r6, pc}
 80009a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a4:	f04f 0e00 	mov.w	lr, #0
 80009a8:	3c01      	subs	r4, #1
 80009aa:	e690      	b.n	80006ce <__aeabi_dmul+0xde>
 80009ac:	ea45 0e06 	orr.w	lr, r5, r6
 80009b0:	e68d      	b.n	80006ce <__aeabi_dmul+0xde>
 80009b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009b6:	ea94 0f0c 	teq	r4, ip
 80009ba:	bf08      	it	eq
 80009bc:	ea95 0f0c 	teqeq	r5, ip
 80009c0:	f43f af3b 	beq.w	800083a <__aeabi_dmul+0x24a>
 80009c4:	ea94 0f0c 	teq	r4, ip
 80009c8:	d10a      	bne.n	80009e0 <__aeabi_ddiv+0x19c>
 80009ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ce:	f47f af34 	bne.w	800083a <__aeabi_dmul+0x24a>
 80009d2:	ea95 0f0c 	teq	r5, ip
 80009d6:	f47f af25 	bne.w	8000824 <__aeabi_dmul+0x234>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e72c      	b.n	800083a <__aeabi_dmul+0x24a>
 80009e0:	ea95 0f0c 	teq	r5, ip
 80009e4:	d106      	bne.n	80009f4 <__aeabi_ddiv+0x1b0>
 80009e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ea:	f43f aefd 	beq.w	80007e8 <__aeabi_dmul+0x1f8>
 80009ee:	4610      	mov	r0, r2
 80009f0:	4619      	mov	r1, r3
 80009f2:	e722      	b.n	800083a <__aeabi_dmul+0x24a>
 80009f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009fe:	f47f aec5 	bne.w	800078c <__aeabi_dmul+0x19c>
 8000a02:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a06:	f47f af0d 	bne.w	8000824 <__aeabi_dmul+0x234>
 8000a0a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a0e:	f47f aeeb 	bne.w	80007e8 <__aeabi_dmul+0x1f8>
 8000a12:	e712      	b.n	800083a <__aeabi_dmul+0x24a>

08000a14 <__gedf2>:
 8000a14:	f04f 3cff 	mov.w	ip, #4294967295
 8000a18:	e006      	b.n	8000a28 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__ledf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	e002      	b.n	8000a28 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__cmpdf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a3e:	d01b      	beq.n	8000a78 <__cmpdf2+0x54>
 8000a40:	b001      	add	sp, #4
 8000a42:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a46:	bf0c      	ite	eq
 8000a48:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a4c:	ea91 0f03 	teqne	r1, r3
 8000a50:	bf02      	ittt	eq
 8000a52:	ea90 0f02 	teqeq	r0, r2
 8000a56:	2000      	moveq	r0, #0
 8000a58:	4770      	bxeq	lr
 8000a5a:	f110 0f00 	cmn.w	r0, #0
 8000a5e:	ea91 0f03 	teq	r1, r3
 8000a62:	bf58      	it	pl
 8000a64:	4299      	cmppl	r1, r3
 8000a66:	bf08      	it	eq
 8000a68:	4290      	cmpeq	r0, r2
 8000a6a:	bf2c      	ite	cs
 8000a6c:	17d8      	asrcs	r0, r3, #31
 8000a6e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a72:	f040 0001 	orr.w	r0, r0, #1
 8000a76:	4770      	bx	lr
 8000a78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a80:	d102      	bne.n	8000a88 <__cmpdf2+0x64>
 8000a82:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a86:	d107      	bne.n	8000a98 <__cmpdf2+0x74>
 8000a88:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d1d6      	bne.n	8000a40 <__cmpdf2+0x1c>
 8000a92:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a96:	d0d3      	beq.n	8000a40 <__cmpdf2+0x1c>
 8000a98:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_cdrcmple>:
 8000aa0:	4684      	mov	ip, r0
 8000aa2:	4610      	mov	r0, r2
 8000aa4:	4662      	mov	r2, ip
 8000aa6:	468c      	mov	ip, r1
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4663      	mov	r3, ip
 8000aac:	e000      	b.n	8000ab0 <__aeabi_cdcmpeq>
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdcmpeq>:
 8000ab0:	b501      	push	{r0, lr}
 8000ab2:	f7ff ffb7 	bl	8000a24 <__cmpdf2>
 8000ab6:	2800      	cmp	r0, #0
 8000ab8:	bf48      	it	mi
 8000aba:	f110 0f00 	cmnmi.w	r0, #0
 8000abe:	bd01      	pop	{r0, pc}

08000ac0 <__aeabi_dcmpeq>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff fff4 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000ac8:	bf0c      	ite	eq
 8000aca:	2001      	moveq	r0, #1
 8000acc:	2000      	movne	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmplt>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffea 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000adc:	bf34      	ite	cc
 8000ade:	2001      	movcc	r0, #1
 8000ae0:	2000      	movcs	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmple>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffe0 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000af0:	bf94      	ite	ls
 8000af2:	2001      	movls	r0, #1
 8000af4:	2000      	movhi	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpge>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffce 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b04:	bf94      	ite	ls
 8000b06:	2001      	movls	r0, #1
 8000b08:	2000      	movhi	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmpgt>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffc4 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b18:	bf34      	ite	cc
 8000b1a:	2001      	movcc	r0, #1
 8000b1c:	2000      	movcs	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpun>:
 8000b24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b2c:	d102      	bne.n	8000b34 <__aeabi_dcmpun+0x10>
 8000b2e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b32:	d10a      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x20>
 8000b3e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b42:	d102      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	4770      	bx	lr
 8000b4a:	f04f 0001 	mov.w	r0, #1
 8000b4e:	4770      	bx	lr

08000b50 <__aeabi_d2iz>:
 8000b50:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b54:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b58:	d215      	bcs.n	8000b86 <__aeabi_d2iz+0x36>
 8000b5a:	d511      	bpl.n	8000b80 <__aeabi_d2iz+0x30>
 8000b5c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b60:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b64:	d912      	bls.n	8000b8c <__aeabi_d2iz+0x3c>
 8000b66:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b72:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b76:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7a:	bf18      	it	ne
 8000b7c:	4240      	negne	r0, r0
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d105      	bne.n	8000b98 <__aeabi_d2iz+0x48>
 8000b8c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b90:	bf08      	it	eq
 8000b92:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_uldivmod>:
 8000ba0:	b953      	cbnz	r3, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba2:	b94a      	cbnz	r2, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba4:	2900      	cmp	r1, #0
 8000ba6:	bf08      	it	eq
 8000ba8:	2800      	cmpeq	r0, #0
 8000baa:	bf1c      	itt	ne
 8000bac:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb4:	f000 b97a 	b.w	8000eac <__aeabi_idiv0>
 8000bb8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bbc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc0:	f000 f806 	bl	8000bd0 <__udivmoddi4>
 8000bc4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bcc:	b004      	add	sp, #16
 8000bce:	4770      	bx	lr

08000bd0 <__udivmoddi4>:
 8000bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd4:	468c      	mov	ip, r1
 8000bd6:	460d      	mov	r5, r1
 8000bd8:	4604      	mov	r4, r0
 8000bda:	9e08      	ldr	r6, [sp, #32]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d151      	bne.n	8000c84 <__udivmoddi4+0xb4>
 8000be0:	428a      	cmp	r2, r1
 8000be2:	4617      	mov	r7, r2
 8000be4:	d96d      	bls.n	8000cc2 <__udivmoddi4+0xf2>
 8000be6:	fab2 fe82 	clz	lr, r2
 8000bea:	f1be 0f00 	cmp.w	lr, #0
 8000bee:	d00b      	beq.n	8000c08 <__udivmoddi4+0x38>
 8000bf0:	f1ce 0c20 	rsb	ip, lr, #32
 8000bf4:	fa01 f50e 	lsl.w	r5, r1, lr
 8000bf8:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000bfc:	fa02 f70e 	lsl.w	r7, r2, lr
 8000c00:	ea4c 0c05 	orr.w	ip, ip, r5
 8000c04:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c08:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000c0c:	0c25      	lsrs	r5, r4, #16
 8000c0e:	fbbc f8fa 	udiv	r8, ip, sl
 8000c12:	fa1f f987 	uxth.w	r9, r7
 8000c16:	fb0a cc18 	mls	ip, sl, r8, ip
 8000c1a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000c1e:	fb08 f309 	mul.w	r3, r8, r9
 8000c22:	42ab      	cmp	r3, r5
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x6c>
 8000c26:	19ed      	adds	r5, r5, r7
 8000c28:	f108 32ff 	add.w	r2, r8, #4294967295
 8000c2c:	f080 8123 	bcs.w	8000e76 <__udivmoddi4+0x2a6>
 8000c30:	42ab      	cmp	r3, r5
 8000c32:	f240 8120 	bls.w	8000e76 <__udivmoddi4+0x2a6>
 8000c36:	f1a8 0802 	sub.w	r8, r8, #2
 8000c3a:	443d      	add	r5, r7
 8000c3c:	1aed      	subs	r5, r5, r3
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb5 f0fa 	udiv	r0, r5, sl
 8000c44:	fb0a 5510 	mls	r5, sl, r0, r5
 8000c48:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c4c:	fb00 f909 	mul.w	r9, r0, r9
 8000c50:	45a1      	cmp	r9, r4
 8000c52:	d909      	bls.n	8000c68 <__udivmoddi4+0x98>
 8000c54:	19e4      	adds	r4, r4, r7
 8000c56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5a:	f080 810a 	bcs.w	8000e72 <__udivmoddi4+0x2a2>
 8000c5e:	45a1      	cmp	r9, r4
 8000c60:	f240 8107 	bls.w	8000e72 <__udivmoddi4+0x2a2>
 8000c64:	3802      	subs	r0, #2
 8000c66:	443c      	add	r4, r7
 8000c68:	eba4 0409 	sub.w	r4, r4, r9
 8000c6c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c70:	2100      	movs	r1, #0
 8000c72:	2e00      	cmp	r6, #0
 8000c74:	d061      	beq.n	8000d3a <__udivmoddi4+0x16a>
 8000c76:	fa24 f40e 	lsr.w	r4, r4, lr
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	6034      	str	r4, [r6, #0]
 8000c7e:	6073      	str	r3, [r6, #4]
 8000c80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c84:	428b      	cmp	r3, r1
 8000c86:	d907      	bls.n	8000c98 <__udivmoddi4+0xc8>
 8000c88:	2e00      	cmp	r6, #0
 8000c8a:	d054      	beq.n	8000d36 <__udivmoddi4+0x166>
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000c92:	4608      	mov	r0, r1
 8000c94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c98:	fab3 f183 	clz	r1, r3
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	f040 808e 	bne.w	8000dbe <__udivmoddi4+0x1ee>
 8000ca2:	42ab      	cmp	r3, r5
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xdc>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80fa 	bhi.w	8000ea0 <__udivmoddi4+0x2d0>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb65 0503 	sbc.w	r5, r5, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	46ac      	mov	ip, r5
 8000cb6:	2e00      	cmp	r6, #0
 8000cb8:	d03f      	beq.n	8000d3a <__udivmoddi4+0x16a>
 8000cba:	e886 1010 	stmia.w	r6, {r4, ip}
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	b912      	cbnz	r2, 8000cca <__udivmoddi4+0xfa>
 8000cc4:	2701      	movs	r7, #1
 8000cc6:	fbb7 f7f2 	udiv	r7, r7, r2
 8000cca:	fab7 fe87 	clz	lr, r7
 8000cce:	f1be 0f00 	cmp.w	lr, #0
 8000cd2:	d134      	bne.n	8000d3e <__udivmoddi4+0x16e>
 8000cd4:	1beb      	subs	r3, r5, r7
 8000cd6:	0c3a      	lsrs	r2, r7, #16
 8000cd8:	fa1f fc87 	uxth.w	ip, r7
 8000cdc:	2101      	movs	r1, #1
 8000cde:	fbb3 f8f2 	udiv	r8, r3, r2
 8000ce2:	0c25      	lsrs	r5, r4, #16
 8000ce4:	fb02 3318 	mls	r3, r2, r8, r3
 8000ce8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000cec:	fb0c f308 	mul.w	r3, ip, r8
 8000cf0:	42ab      	cmp	r3, r5
 8000cf2:	d907      	bls.n	8000d04 <__udivmoddi4+0x134>
 8000cf4:	19ed      	adds	r5, r5, r7
 8000cf6:	f108 30ff 	add.w	r0, r8, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x132>
 8000cfc:	42ab      	cmp	r3, r5
 8000cfe:	f200 80d1 	bhi.w	8000ea4 <__udivmoddi4+0x2d4>
 8000d02:	4680      	mov	r8, r0
 8000d04:	1aed      	subs	r5, r5, r3
 8000d06:	b2a3      	uxth	r3, r4
 8000d08:	fbb5 f0f2 	udiv	r0, r5, r2
 8000d0c:	fb02 5510 	mls	r5, r2, r0, r5
 8000d10:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000d14:	fb0c fc00 	mul.w	ip, ip, r0
 8000d18:	45a4      	cmp	ip, r4
 8000d1a:	d907      	bls.n	8000d2c <__udivmoddi4+0x15c>
 8000d1c:	19e4      	adds	r4, r4, r7
 8000d1e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x15a>
 8000d24:	45a4      	cmp	ip, r4
 8000d26:	f200 80b8 	bhi.w	8000e9a <__udivmoddi4+0x2ca>
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	eba4 040c 	sub.w	r4, r4, ip
 8000d30:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d34:	e79d      	b.n	8000c72 <__udivmoddi4+0xa2>
 8000d36:	4631      	mov	r1, r6
 8000d38:	4630      	mov	r0, r6
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	f1ce 0420 	rsb	r4, lr, #32
 8000d42:	fa05 f30e 	lsl.w	r3, r5, lr
 8000d46:	fa07 f70e 	lsl.w	r7, r7, lr
 8000d4a:	fa20 f804 	lsr.w	r8, r0, r4
 8000d4e:	0c3a      	lsrs	r2, r7, #16
 8000d50:	fa25 f404 	lsr.w	r4, r5, r4
 8000d54:	ea48 0803 	orr.w	r8, r8, r3
 8000d58:	fbb4 f1f2 	udiv	r1, r4, r2
 8000d5c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000d60:	fb02 4411 	mls	r4, r2, r1, r4
 8000d64:	fa1f fc87 	uxth.w	ip, r7
 8000d68:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000d6c:	fb01 f30c 	mul.w	r3, r1, ip
 8000d70:	42ab      	cmp	r3, r5
 8000d72:	fa00 f40e 	lsl.w	r4, r0, lr
 8000d76:	d909      	bls.n	8000d8c <__udivmoddi4+0x1bc>
 8000d78:	19ed      	adds	r5, r5, r7
 8000d7a:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d7e:	f080 808a 	bcs.w	8000e96 <__udivmoddi4+0x2c6>
 8000d82:	42ab      	cmp	r3, r5
 8000d84:	f240 8087 	bls.w	8000e96 <__udivmoddi4+0x2c6>
 8000d88:	3902      	subs	r1, #2
 8000d8a:	443d      	add	r5, r7
 8000d8c:	1aeb      	subs	r3, r5, r3
 8000d8e:	fa1f f588 	uxth.w	r5, r8
 8000d92:	fbb3 f0f2 	udiv	r0, r3, r2
 8000d96:	fb02 3310 	mls	r3, r2, r0, r3
 8000d9a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d9e:	fb00 f30c 	mul.w	r3, r0, ip
 8000da2:	42ab      	cmp	r3, r5
 8000da4:	d907      	bls.n	8000db6 <__udivmoddi4+0x1e6>
 8000da6:	19ed      	adds	r5, r5, r7
 8000da8:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dac:	d26f      	bcs.n	8000e8e <__udivmoddi4+0x2be>
 8000dae:	42ab      	cmp	r3, r5
 8000db0:	d96d      	bls.n	8000e8e <__udivmoddi4+0x2be>
 8000db2:	3802      	subs	r0, #2
 8000db4:	443d      	add	r5, r7
 8000db6:	1aeb      	subs	r3, r5, r3
 8000db8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dbc:	e78f      	b.n	8000cde <__udivmoddi4+0x10e>
 8000dbe:	f1c1 0720 	rsb	r7, r1, #32
 8000dc2:	fa22 f807 	lsr.w	r8, r2, r7
 8000dc6:	408b      	lsls	r3, r1
 8000dc8:	fa05 f401 	lsl.w	r4, r5, r1
 8000dcc:	ea48 0303 	orr.w	r3, r8, r3
 8000dd0:	fa20 fe07 	lsr.w	lr, r0, r7
 8000dd4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000dd8:	40fd      	lsrs	r5, r7
 8000dda:	ea4e 0e04 	orr.w	lr, lr, r4
 8000dde:	fbb5 f9fc 	udiv	r9, r5, ip
 8000de2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000de6:	fb0c 5519 	mls	r5, ip, r9, r5
 8000dea:	fa1f f883 	uxth.w	r8, r3
 8000dee:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000df2:	fb09 f408 	mul.w	r4, r9, r8
 8000df6:	42ac      	cmp	r4, r5
 8000df8:	fa02 f201 	lsl.w	r2, r2, r1
 8000dfc:	fa00 fa01 	lsl.w	sl, r0, r1
 8000e00:	d908      	bls.n	8000e14 <__udivmoddi4+0x244>
 8000e02:	18ed      	adds	r5, r5, r3
 8000e04:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e08:	d243      	bcs.n	8000e92 <__udivmoddi4+0x2c2>
 8000e0a:	42ac      	cmp	r4, r5
 8000e0c:	d941      	bls.n	8000e92 <__udivmoddi4+0x2c2>
 8000e0e:	f1a9 0902 	sub.w	r9, r9, #2
 8000e12:	441d      	add	r5, r3
 8000e14:	1b2d      	subs	r5, r5, r4
 8000e16:	fa1f fe8e 	uxth.w	lr, lr
 8000e1a:	fbb5 f0fc 	udiv	r0, r5, ip
 8000e1e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000e22:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000e26:	fb00 f808 	mul.w	r8, r0, r8
 8000e2a:	45a0      	cmp	r8, r4
 8000e2c:	d907      	bls.n	8000e3e <__udivmoddi4+0x26e>
 8000e2e:	18e4      	adds	r4, r4, r3
 8000e30:	f100 35ff 	add.w	r5, r0, #4294967295
 8000e34:	d229      	bcs.n	8000e8a <__udivmoddi4+0x2ba>
 8000e36:	45a0      	cmp	r8, r4
 8000e38:	d927      	bls.n	8000e8a <__udivmoddi4+0x2ba>
 8000e3a:	3802      	subs	r0, #2
 8000e3c:	441c      	add	r4, r3
 8000e3e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e42:	eba4 0408 	sub.w	r4, r4, r8
 8000e46:	fba0 8902 	umull	r8, r9, r0, r2
 8000e4a:	454c      	cmp	r4, r9
 8000e4c:	46c6      	mov	lr, r8
 8000e4e:	464d      	mov	r5, r9
 8000e50:	d315      	bcc.n	8000e7e <__udivmoddi4+0x2ae>
 8000e52:	d012      	beq.n	8000e7a <__udivmoddi4+0x2aa>
 8000e54:	b156      	cbz	r6, 8000e6c <__udivmoddi4+0x29c>
 8000e56:	ebba 030e 	subs.w	r3, sl, lr
 8000e5a:	eb64 0405 	sbc.w	r4, r4, r5
 8000e5e:	fa04 f707 	lsl.w	r7, r4, r7
 8000e62:	40cb      	lsrs	r3, r1
 8000e64:	431f      	orrs	r7, r3
 8000e66:	40cc      	lsrs	r4, r1
 8000e68:	6037      	str	r7, [r6, #0]
 8000e6a:	6074      	str	r4, [r6, #4]
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	4618      	mov	r0, r3
 8000e74:	e6f8      	b.n	8000c68 <__udivmoddi4+0x98>
 8000e76:	4690      	mov	r8, r2
 8000e78:	e6e0      	b.n	8000c3c <__udivmoddi4+0x6c>
 8000e7a:	45c2      	cmp	sl, r8
 8000e7c:	d2ea      	bcs.n	8000e54 <__udivmoddi4+0x284>
 8000e7e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e82:	eb69 0503 	sbc.w	r5, r9, r3
 8000e86:	3801      	subs	r0, #1
 8000e88:	e7e4      	b.n	8000e54 <__udivmoddi4+0x284>
 8000e8a:	4628      	mov	r0, r5
 8000e8c:	e7d7      	b.n	8000e3e <__udivmoddi4+0x26e>
 8000e8e:	4640      	mov	r0, r8
 8000e90:	e791      	b.n	8000db6 <__udivmoddi4+0x1e6>
 8000e92:	4681      	mov	r9, r0
 8000e94:	e7be      	b.n	8000e14 <__udivmoddi4+0x244>
 8000e96:	4601      	mov	r1, r0
 8000e98:	e778      	b.n	8000d8c <__udivmoddi4+0x1bc>
 8000e9a:	3802      	subs	r0, #2
 8000e9c:	443c      	add	r4, r7
 8000e9e:	e745      	b.n	8000d2c <__udivmoddi4+0x15c>
 8000ea0:	4608      	mov	r0, r1
 8000ea2:	e708      	b.n	8000cb6 <__udivmoddi4+0xe6>
 8000ea4:	f1a8 0802 	sub.w	r8, r8, #2
 8000ea8:	443d      	add	r5, r7
 8000eaa:	e72b      	b.n	8000d04 <__udivmoddi4+0x134>

08000eac <__aeabi_idiv0>:
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop

08000eb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eb0:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 8000eb2:	4b08      	ldr	r3, [pc, #32]	; (8000ed4 <HAL_InitTick+0x24>)
{
 8000eb4:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 8000eb6:	6818      	ldr	r0, [r3, #0]
 8000eb8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ebc:	fbb0 f0f3 	udiv	r0, r0, r3
 8000ec0:	f000 fc4e 	bl	8001760 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	4621      	mov	r1, r4
 8000ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ecc:	f000 fc08 	bl	80016e0 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8000ed0:	2000      	movs	r0, #0
 8000ed2:	bd10      	pop	{r4, pc}
 8000ed4:	20000000 	.word	0x20000000

08000ed8 <HAL_Init>:
{
 8000ed8:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eda:	2003      	movs	r0, #3
 8000edc:	f000 fbee 	bl	80016bc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ee0:	2000      	movs	r0, #0
 8000ee2:	f7ff ffe5 	bl	8000eb0 <HAL_InitTick>
  HAL_MspInit();
 8000ee6:	f002 fa23 	bl	8003330 <HAL_MspInit>
}
 8000eea:	2000      	movs	r0, #0
 8000eec:	bd08      	pop	{r3, pc}
	...

08000ef0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000ef0:	4a02      	ldr	r2, [pc, #8]	; (8000efc <HAL_IncTick+0xc>)
 8000ef2:	6813      	ldr	r3, [r2, #0]
 8000ef4:	3301      	adds	r3, #1
 8000ef6:	6013      	str	r3, [r2, #0]
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	200006c8 	.word	0x200006c8

08000f00 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000f00:	4b01      	ldr	r3, [pc, #4]	; (8000f08 <HAL_GetTick+0x8>)
 8000f02:	6818      	ldr	r0, [r3, #0]
}
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	200006c8 	.word	0x200006c8

08000f0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f0c:	b538      	push	{r3, r4, r5, lr}
 8000f0e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000f10:	f7ff fff6 	bl	8000f00 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f14:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8000f16:	4605      	mov	r5, r0
  {
    wait++;
 8000f18:	bf18      	it	ne
 8000f1a:	3401      	addne	r4, #1
  } 

  while((HAL_GetTick() - tickstart) < wait)
 8000f1c:	f7ff fff0 	bl	8000f00 <HAL_GetTick>
 8000f20:	1b40      	subs	r0, r0, r5
 8000f22:	4284      	cmp	r4, r0
 8000f24:	d8fa      	bhi.n	8000f1c <HAL_Delay+0x10>
  {
  }
}
 8000f26:	bd38      	pop	{r3, r4, r5, pc}

08000f28 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000f28:	b570      	push	{r4, r5, r6, lr}
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f2a:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 8000f2e:	fa96 f6a6 	rbit	r6, r6
  
  MODIFY_REG(*preg,
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#else
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8000f32:	fab6 f386 	clz	r3, r6
 8000f36:	f001 7600 	and.w	r6, r1, #33554432	; 0x2000000
 8000f3a:	40de      	lsrs	r6, r3
 8000f3c:	3014      	adds	r0, #20
  
  MODIFY_REG(*preg,
 8000f3e:	f001 71f8 	and.w	r1, r1, #32505856	; 0x1f00000
 8000f42:	f04f 73f8 	mov.w	r3, #32505856	; 0x1f00000
 8000f46:	fa93 f5a3 	rbit	r5, r3
 8000f4a:	fab5 f585 	clz	r5, r5
 8000f4e:	fa93 f3a3 	rbit	r3, r3
 8000f52:	2407      	movs	r4, #7
 8000f54:	fa21 f505 	lsr.w	r5, r1, r5
 8000f58:	fa04 f505 	lsl.w	r5, r4, r5
 8000f5c:	fab3 f383 	clz	r3, r3
 8000f60:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
 8000f64:	40d9      	lsrs	r1, r3
 8000f66:	ea24 0405 	bic.w	r4, r4, r5
 8000f6a:	fa02 f101 	lsl.w	r1, r2, r1
 8000f6e:	4321      	orrs	r1, r4
 8000f70:	f840 1026 	str.w	r1, [r0, r6, lsl #2]
 8000f74:	bd70      	pop	{r4, r5, r6, pc}
	...

08000f78 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f78:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR = 0U;
  __IO uint32_t wait_loop_index = 0;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	9301      	str	r3, [sp, #4]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000f7e:	4604      	mov	r4, r0
 8000f80:	2800      	cmp	r0, #0
 8000f82:	f000 80b2 	beq.w	80010ea <HAL_ADC_Init+0x172>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000f86:	6d85      	ldr	r5, [r0, #88]	; 0x58
 8000f88:	b925      	cbnz	r5, 8000f94 <HAL_ADC_Init+0x1c>
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f8a:	f002 fa17 	bl	80033bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f8e:	65e5      	str	r5, [r4, #92]	; 0x5c
    
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000f90:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
  }
  
  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if(LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0U)
 8000f94:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
  return (uint32_t)(READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD));
 8000f96:	689a      	ldr	r2, [r3, #8]
 8000f98:	0090      	lsls	r0, r2, #2
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000f9a:	bf41      	itttt	mi
 8000f9c:	689a      	ldrmi	r2, [r3, #8]
 8000f9e:	f022 4220 	bicmi.w	r2, r2, #2684354560	; 0xa0000000
 8000fa2:	f022 023f 	bicmi.w	r2, r2, #63	; 0x3f
 8000fa6:	609a      	strmi	r2, [r3, #8]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return (uint32_t)(READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN));
 8000fa8:	689a      	ldr	r2, [r3, #8]
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor 
     re-applied once the ADC voltage regulator is enabled */    
  }
  
  if(LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0U)
 8000faa:	00d1      	lsls	r1, r2, #3
 8000fac:	d574      	bpl.n	8001098 <HAL_ADC_Init+0x120>
 8000fae:	689a      	ldr	r2, [r3, #8]
  }
  
  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if(LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0U)
 8000fb0:	00d2      	lsls	r2, r2, #3
 8000fb2:	f140 8088 	bpl.w	80010c6 <HAL_ADC_Init+0x14e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fb6:	2000      	movs	r0, #0
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if(   (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000fb8:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8000fba:	06d5      	lsls	r5, r2, #27
 8000fbc:	f100 8091 	bmi.w	80010e2 <HAL_ADC_Init+0x16a>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return (uint32_t)(READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART));
 8000fc0:	689a      	ldr	r2, [r3, #8]
     && (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000fc2:	0751      	lsls	r1, r2, #29
 8000fc4:	f100 808d 	bmi.w	80010e2 <HAL_ADC_Init+0x16a>
    )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fc8:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8000fca:	f422 7281 	bic.w	r2, r2, #258	; 0x102
 8000fce:	f042 0202 	orr.w	r2, r2, #2
 8000fd2:	65a2      	str	r2, [r4, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if ((ADC_IS_ENABLE(hadc) == RESET)   &&
 8000fd4:	689a      	ldr	r2, [r3, #8]
 8000fd6:	f002 0203 	and.w	r2, r2, #3
 8000fda:	2a01      	cmp	r2, #1
 8000fdc:	f040 8087 	bne.w	80010ee <HAL_ADC_Init+0x176>
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	07d2      	lsls	r2, r2, #31
 8000fe4:	f140 8083 	bpl.w	80010ee <HAL_ADC_Init+0x176>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                           |
                hadc->Init.DataAlign                                         |
 8000fe8:	68e5      	ldr	r5, [r4, #12]
 8000fea:	6ba2      	ldr	r2, [r4, #56]	; 0x38
                hadc->Init.Resolution                                        |
                ADC_CFGR_REG_DISCONTINUOUS(hadc->Init.DiscontinuousConvMode)  );
 8000fec:	6a61      	ldr	r1, [r4, #36]	; 0x24
                hadc->Init.DataAlign                                         |
 8000fee:	432a      	orrs	r2, r5
 8000ff0:	68a5      	ldr	r5, [r4, #8]
 8000ff2:	432a      	orrs	r2, r5
    tmpCFGR  = (ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode)           |
 8000ff4:	69e5      	ldr	r5, [r4, #28]
    
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000ff6:	2901      	cmp	r1, #1
                hadc->Init.DataAlign                                         |
 8000ff8:	ea42 3245 	orr.w	r2, r2, r5, lsl #13
    tmpCFGR  = (ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode)           |
 8000ffc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001000:	bf02      	ittt	eq
 8001002:	6aa1      	ldreq	r1, [r4, #40]	; 0x28
 8001004:	f101 31ff 	addeq.w	r1, r1, #4294967295
 8001008:	ea42 4241 	orreq.w	r2, r2, r1, lsl #17
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800100c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800100e:	b121      	cbz	r1, 800101a <HAL_ADC_Init+0xa2>
    {
      tmpCFGR |= (  (hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 8001010:	6b25      	ldr	r5, [r4, #48]	; 0x30
      tmpCFGR |= (  (hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001012:	f401 7170 	and.w	r1, r1, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001016:	4329      	orrs	r1, r5
      tmpCFGR |= (  (hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001018:	430a      	orrs	r2, r1
                 );
    }
    
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR); 
 800101a:	68dd      	ldr	r5, [r3, #12]
 800101c:	4938      	ldr	r1, [pc, #224]	; (8001100 <HAL_ADC_Init+0x188>)
 800101e:	4029      	ands	r1, r5
 8001020:	430a      	orrs	r2, r1
 8001022:	60da      	str	r2, [r3, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001024:	689a      	ldr	r2, [r3, #8]
 8001026:	f012 0f0c 	tst.w	r2, #12
 800102a:	d11e      	bne.n	800106a <HAL_ADC_Init+0xf2>
    {
      tmpCFGR = ( ADC_CFGR_DFSDM(hadc)                                 |
                  ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
                  ADC_CFGR_DMACONTREQ(hadc->Init.DMAContinuousRequests) );
      
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);                    
 800102c:	68d9      	ldr	r1, [r3, #12]
                  ADC_CFGR_DMACONTREQ(hadc->Init.DMAContinuousRequests) );
 800102e:	6b62      	ldr	r2, [r4, #52]	; 0x34
                  ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 8001030:	69a5      	ldr	r5, [r4, #24]
                  ADC_CFGR_DMACONTREQ(hadc->Init.DMAContinuousRequests) );
 8001032:	0052      	lsls	r2, r2, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);                    
 8001034:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
      tmpCFGR = ( ADC_CFGR_DFSDM(hadc)                                 |
 8001038:	ea42 3285 	orr.w	r2, r2, r5, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);                    
 800103c:	f021 0102 	bic.w	r1, r1, #2
 8001040:	430a      	orrs	r2, r1
 8001042:	60da      	str	r2, [r3, #12]
      
      if (hadc->Init.OversamplingMode == ENABLE)
 8001044:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001046:	2a01      	cmp	r2, #1
 8001048:	d147      	bne.n	80010da <HAL_ADC_Init+0x162>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800104a:	6c65      	ldr	r5, [r4, #68]	; 0x44
 800104c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800104e:	6919      	ldr	r1, [r3, #16]
 8001050:	432a      	orrs	r2, r5
 8001052:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8001054:	f042 0201 	orr.w	r2, r2, #1
 8001058:	432a      	orrs	r2, r5
 800105a:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 800105c:	f421 61ff 	bic.w	r1, r1, #2040	; 0x7f8
 8001060:	432a      	orrs	r2, r5
 8001062:	f021 0104 	bic.w	r1, r1, #4
 8001066:	430a      	orrs	r2, r1
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001068:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800106a:	6922      	ldr	r2, [r4, #16]
 800106c:	2a01      	cmp	r2, #1
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800106e:	bf05      	ittet	eq
 8001070:	6b19      	ldreq	r1, [r3, #48]	; 0x30
 8001072:	6a22      	ldreq	r2, [r4, #32]
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001074:	6b1a      	ldrne	r2, [r3, #48]	; 0x30
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001076:	f102 32ff 	addeq.w	r2, r2, #4294967295
 800107a:	bf06      	itte	eq
 800107c:	f021 010f 	biceq.w	r1, r1, #15
 8001080:	430a      	orreq	r2, r1
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001082:	f022 020f 	bicne.w	r2, r2, #15
 8001086:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001088:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800108a:	f023 0303 	bic.w	r3, r3, #3
 800108e:	f043 0301 	orr.w	r3, r3, #1
 8001092:	65a3      	str	r3, [r4, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 8001094:	b003      	add	sp, #12
 8001096:	bd30      	pop	{r4, r5, pc}
  MODIFY_REG(ADCx->CR,
 8001098:	689a      	ldr	r2, [r3, #8]
    wait_loop_index = (LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (1000000 * 2)));
 800109a:	491a      	ldr	r1, [pc, #104]	; (8001104 <HAL_ADC_Init+0x18c>)
 800109c:	f022 4210 	bic.w	r2, r2, #2415919104	; 0x90000000
 80010a0:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 80010a4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80010a8:	609a      	str	r2, [r3, #8]
 80010aa:	4a17      	ldr	r2, [pc, #92]	; (8001108 <HAL_ADC_Init+0x190>)
 80010ac:	6812      	ldr	r2, [r2, #0]
 80010ae:	fbb2 f1f1 	udiv	r1, r2, r1
 80010b2:	220a      	movs	r2, #10
 80010b4:	434a      	muls	r2, r1
      wait_loop_index--;
 80010b6:	9201      	str	r2, [sp, #4]
    while(wait_loop_index != 0)
 80010b8:	9a01      	ldr	r2, [sp, #4]
 80010ba:	2a00      	cmp	r2, #0
 80010bc:	f43f af77 	beq.w	8000fae <HAL_ADC_Init+0x36>
      wait_loop_index--;
 80010c0:	9a01      	ldr	r2, [sp, #4]
 80010c2:	3a01      	subs	r2, #1
 80010c4:	e7f7      	b.n	80010b6 <HAL_ADC_Init+0x13e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010c6:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80010c8:	f042 0210 	orr.w	r2, r2, #16
 80010cc:	65a2      	str	r2, [r4, #88]	; 0x58
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010ce:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80010d0:	f042 0201 	orr.w	r2, r2, #1
 80010d4:	65e2      	str	r2, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
 80010d6:	2001      	movs	r0, #1
 80010d8:	e76e      	b.n	8000fb8 <HAL_ADC_Init+0x40>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80010da:	691a      	ldr	r2, [r3, #16]
 80010dc:	f022 0201 	bic.w	r2, r2, #1
 80010e0:	e7c2      	b.n	8001068 <HAL_ADC_Init+0xf0>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010e2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80010e4:	f043 0310 	orr.w	r3, r3, #16
 80010e8:	65a3      	str	r3, [r4, #88]	; 0x58
    return HAL_ERROR;
 80010ea:	2001      	movs	r0, #1
 80010ec:	e7d2      	b.n	8001094 <HAL_ADC_Init+0x11c>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80010ee:	4907      	ldr	r1, [pc, #28]	; (800110c <HAL_ADC_Init+0x194>)
 80010f0:	6865      	ldr	r5, [r4, #4]
 80010f2:	688a      	ldr	r2, [r1, #8]
 80010f4:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 80010f8:	432a      	orrs	r2, r5
 80010fa:	608a      	str	r2, [r1, #8]
 80010fc:	e774      	b.n	8000fe8 <HAL_ADC_Init+0x70>
 80010fe:	bf00      	nop
 8001100:	fff0c007 	.word	0xfff0c007
 8001104:	001e8480 	.word	0x001e8480
 8001108:	20000000 	.word	0x20000000
 800110c:	50040300 	.word	0x50040300

08001110 <HAL_ADC_ConvCpltCallback>:
 8001110:	4770      	bx	lr

08001112 <HAL_ADC_ConvHalfCpltCallback>:
 8001112:	4770      	bx	lr

08001114 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001114:	b508      	push	{r3, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001116:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8001118:	f7ff fffb 	bl	8001112 <HAL_ADC_ConvHalfCpltCallback>
 800111c:	bd08      	pop	{r3, pc}

0800111e <HAL_ADC_ErrorCallback>:
{
 800111e:	4770      	bx	lr

08001120 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001120:	6a83      	ldr	r3, [r0, #40]	; 0x28
  if(HAL_IS_BIT_CLR(hadc->State, (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)))
 8001122:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001124:	f012 0f50 	tst.w	r2, #80	; 0x50
{
 8001128:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800112a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
  if(HAL_IS_BIT_CLR(hadc->State, (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)))
 800112c:	d121      	bne.n	8001172 <ADC_DMAConvCplt+0x52>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800112e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001132:	659a      	str	r2, [r3, #88]	; 0x58
    if(HAL_IS_BIT_SET(hadc->Instance->ISR, ADC_FLAG_EOS))
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	6811      	ldr	r1, [r2, #0]
 8001138:	0708      	lsls	r0, r1, #28
 800113a:	d516      	bpl.n	800116a <ADC_DMAConvCplt+0x4a>
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800113c:	68d1      	ldr	r1, [r2, #12]
 800113e:	f411 6f40 	tst.w	r1, #3072	; 0xc00
 8001142:	d10e      	bne.n	8001162 <ADC_DMAConvCplt+0x42>
        if(READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == RESET)
 8001144:	68d2      	ldr	r2, [r2, #12]
 8001146:	f412 5f00 	tst.w	r2, #8192	; 0x2000
      if(READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == RESET)
 800114a:	d10a      	bne.n	8001162 <ADC_DMAConvCplt+0x42>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800114c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800114e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001152:	659a      	str	r2, [r3, #88]	; 0x58
        if(HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001154:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001156:	04d1      	lsls	r1, r2, #19
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001158:	bf5e      	ittt	pl
 800115a:	6d9a      	ldrpl	r2, [r3, #88]	; 0x58
 800115c:	f042 0201 	orrpl.w	r2, r2, #1
 8001160:	659a      	strpl	r2, [r3, #88]	; 0x58
    HAL_ADC_ConvCpltCallback(hadc);
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff ffd4 	bl	8001110 <HAL_ADC_ConvCpltCallback>
 8001168:	bd10      	pop	{r4, pc}
      if(READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == RESET)
 800116a:	68d2      	ldr	r2, [r2, #12]
 800116c:	f012 0f02 	tst.w	r2, #2
 8001170:	e7eb      	b.n	800114a <ADC_DMAConvCplt+0x2a>
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001172:	06d2      	lsls	r2, r2, #27
 8001174:	d503      	bpl.n	800117e <ADC_DMAConvCplt+0x5e>
      HAL_ADC_ErrorCallback(hadc);
 8001176:	4618      	mov	r0, r3
 8001178:	f7ff ffd1 	bl	800111e <HAL_ADC_ErrorCallback>
 800117c:	bd10      	pop	{r4, pc}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800117e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
 8001180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001184:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001186:	4718      	bx	r3

08001188 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001188:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 800118a:	b508      	push	{r3, lr}
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800118c:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800118e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001192:	6583      	str	r3, [r0, #88]	; 0x58
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001194:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8001196:	f043 0304 	orr.w	r3, r3, #4
 800119a:	65c3      	str	r3, [r0, #92]	; 0x5c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800119c:	f7ff ffbf 	bl	800111e <HAL_ADC_ErrorCallback>
 80011a0:	bd08      	pop	{r3, pc}
	...

080011a4 <HAL_ADC_ConfigChannel>:
{
 80011a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t wait_loop_index = 0;
 80011a6:	2300      	movs	r3, #0
 80011a8:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80011aa:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 80011ae:	2b01      	cmp	r3, #1
{
 80011b0:	4605      	mov	r5, r0
 80011b2:	460c      	mov	r4, r1
  __HAL_LOCK(hadc);
 80011b4:	f000 8176 	beq.w	80014a4 <HAL_ADC_ConfigChannel+0x300>
 80011b8:	2301      	movs	r3, #1
 80011ba:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80011be:	6800      	ldr	r0, [r0, #0]
  return (uint32_t)(READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART));
 80011c0:	6882      	ldr	r2, [r0, #8]
 80011c2:	0751      	lsls	r1, r2, #29
 80011c4:	f100 8168 	bmi.w	8001498 <HAL_ADC_ConfigChannel+0x2f4>
    if (sConfig->Rank <= 5U)
 80011c8:	6863      	ldr	r3, [r4, #4]
 80011ca:	2b05      	cmp	r3, #5
 80011cc:	d808      	bhi.n	80011e0 <HAL_ADC_ConfigChannel+0x3c>
      switch (sConfig->Rank)
 80011ce:	3b02      	subs	r3, #2
 80011d0:	2b03      	cmp	r3, #3
 80011d2:	d866      	bhi.n	80012a2 <HAL_ADC_ConfigChannel+0xfe>
 80011d4:	e8df f003 	tbb	[pc, r3]
 80011d8:	62605e02 	.word	0x62605e02
        case 2U: sConfig->Rank = ADC_REGULAR_RANK_2; break;
 80011dc:	230c      	movs	r3, #12
        default: sConfig->Rank = ADC_REGULAR_RANK_1;
 80011de:	6063      	str	r3, [r4, #4]
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80011e0:	6861      	ldr	r1, [r4, #4]
 80011e2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011e6:	fa93 f3a3 	rbit	r3, r3
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 80011ea:	fab3 f383 	clz	r3, r3
 80011ee:	f401 7640 	and.w	r6, r1, #768	; 0x300
 80011f2:	40de      	lsrs	r6, r3
 80011f4:	f100 0730 	add.w	r7, r0, #48	; 0x30
  MODIFY_REG(*preg,
 80011f8:	f001 011f 	and.w	r1, r1, #31
 80011fc:	231f      	movs	r3, #31
 80011fe:	fa03 f201 	lsl.w	r2, r3, r1
 8001202:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
 8001206:	ea23 0302 	bic.w	r3, r3, r2
 800120a:	6822      	ldr	r2, [r4, #0]
 800120c:	f3c2 6284 	ubfx	r2, r2, #26, #5
 8001210:	408a      	lsls	r2, r1
 8001212:	4313      	orrs	r3, r2
 8001214:	f847 3026 	str.w	r3, [r7, r6, lsl #2]
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001218:	6883      	ldr	r3, [r0, #8]
 800121a:	f013 0f0c 	tst.w	r3, #12
 800121e:	d11e      	bne.n	800125e <HAL_ADC_ConfigChannel+0xba>
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001220:	68a2      	ldr	r2, [r4, #8]
 8001222:	6821      	ldr	r1, [r4, #0]
 8001224:	f7ff fe80 	bl	8000f28 <LL_ADC_SetChannelSamplingTime>
      if(sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001228:	6926      	ldr	r6, [r4, #16]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800122a:	f8d5 e000 	ldr.w	lr, [r5]
 800122e:	6823      	ldr	r3, [r4, #0]
 8001230:	f8de 100c 	ldr.w	r1, [lr, #12]
      if(sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001234:	2e04      	cmp	r6, #4
 8001236:	f10e 0260 	add.w	r2, lr, #96	; 0x60
 800123a:	d034      	beq.n	80012a6 <HAL_ADC_ConfigChannel+0x102>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800123c:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 8001240:	0048      	lsls	r0, r1, #1
 8001242:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(*preg,
 8001244:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
 8001248:	4081      	lsls	r1, r0
 800124a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800124e:	4319      	orrs	r1, r3
 8001250:	f852 0026 	ldr.w	r0, [r2, r6, lsl #2]
 8001254:	4bb8      	ldr	r3, [pc, #736]	; (8001538 <HAL_ADC_ConfigChannel+0x394>)
 8001256:	4003      	ands	r3, r0
 8001258:	4319      	orrs	r1, r3
 800125a:	f842 1026 	str.w	r1, [r2, r6, lsl #2]
    if (ADC_IS_ENABLE(hadc) == RESET)
 800125e:	6828      	ldr	r0, [r5, #0]
 8001260:	6883      	ldr	r3, [r0, #8]
 8001262:	f003 0303 	and.w	r3, r3, #3
 8001266:	2b01      	cmp	r3, #1
 8001268:	f040 811e 	bne.w	80014a8 <HAL_ADC_ConfigChannel+0x304>
 800126c:	6803      	ldr	r3, [r0, #0]
 800126e:	07da      	lsls	r2, r3, #31
 8001270:	f140 811a 	bpl.w	80014a8 <HAL_ADC_ConfigChannel+0x304>
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001274:	6823      	ldr	r3, [r4, #0]
 8001276:	4ab1      	ldr	r2, [pc, #708]	; (800153c <HAL_ADC_ConfigChannel+0x398>)
 8001278:	4293      	cmp	r3, r2
 800127a:	f040 80bd 	bne.w	80013f8 <HAL_ADC_ConfigChannel+0x254>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800127e:	4ab0      	ldr	r2, [pc, #704]	; (8001540 <HAL_ADC_ConfigChannel+0x39c>)
 8001280:	6893      	ldr	r3, [r2, #8]
 8001282:	021b      	lsls	r3, r3, #8
 8001284:	f140 80ea 	bpl.w	800145c <HAL_ADC_ConfigChannel+0x2b8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001288:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 800128a:	2300      	movs	r3, #0
 800128c:	f885 3054 	strb.w	r3, [r5, #84]	; 0x54
}
 8001290:	b003      	add	sp, #12
 8001292:	bdf0      	pop	{r4, r5, r6, r7, pc}
        case 3U: sConfig->Rank = ADC_REGULAR_RANK_3; break;
 8001294:	2312      	movs	r3, #18
 8001296:	e7a2      	b.n	80011de <HAL_ADC_ConfigChannel+0x3a>
        case 4U: sConfig->Rank = ADC_REGULAR_RANK_4; break;
 8001298:	2318      	movs	r3, #24
 800129a:	e7a0      	b.n	80011de <HAL_ADC_ConfigChannel+0x3a>
        case 5U: sConfig->Rank = ADC_REGULAR_RANK_5; break;
 800129c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012a0:	e79d      	b.n	80011de <HAL_ADC_ConfigChannel+0x3a>
        default: sConfig->Rank = ADC_REGULAR_RANK_1;
 80012a2:	2306      	movs	r3, #6
 80012a4:	e79b      	b.n	80011de <HAL_ADC_ConfigChannel+0x3a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80012a6:	f8de 1060 	ldr.w	r1, [lr, #96]	; 0x60
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80012aa:	f3c3 0012 	ubfx	r0, r3, #0, #19
 80012ae:	f3c1 6784 	ubfx	r7, r1, #26, #5
 80012b2:	f10e 0664 	add.w	r6, lr, #100	; 0x64
 80012b6:	2800      	cmp	r0, #0
 80012b8:	d13a      	bne.n	8001330 <HAL_ADC_ConfigChannel+0x18c>
 80012ba:	f3c3 6084 	ubfx	r0, r3, #26, #5
 80012be:	4287      	cmp	r7, r0
 80012c0:	f040 8127 	bne.w	8001512 <HAL_ADC_ConfigChannel+0x36e>
  MODIFY_REG(*preg,
 80012c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80012c8:	f8ce 1060 	str.w	r1, [lr, #96]	; 0x60
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80012cc:	6823      	ldr	r3, [r4, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80012ce:	f8de 1064 	ldr.w	r1, [lr, #100]	; 0x64
 80012d2:	f3c3 0712 	ubfx	r7, r3, #0, #19
 80012d6:	f3c1 6084 	ubfx	r0, r1, #26, #5
 80012da:	bb9f      	cbnz	r7, 8001344 <HAL_ADC_ConfigChannel+0x1a0>
 80012dc:	f3c3 6384 	ubfx	r3, r3, #26, #5
 80012e0:	4283      	cmp	r3, r0
 80012e2:	f040 811b 	bne.w	800151c <HAL_ADC_ConfigChannel+0x378>
  MODIFY_REG(*preg,
 80012e6:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80012ea:	6031      	str	r1, [r6, #0]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80012ec:	6823      	ldr	r3, [r4, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80012ee:	6891      	ldr	r1, [r2, #8]
 80012f0:	f3c3 0712 	ubfx	r7, r3, #0, #19
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012f4:	f102 0608 	add.w	r6, r2, #8
 80012f8:	f3c1 6084 	ubfx	r0, r1, #26, #5
 80012fc:	bb77      	cbnz	r7, 800135c <HAL_ADC_ConfigChannel+0x1b8>
 80012fe:	f3c3 6384 	ubfx	r3, r3, #26, #5
 8001302:	4283      	cmp	r3, r0
 8001304:	f040 8111 	bne.w	800152a <HAL_ADC_ConfigChannel+0x386>
  MODIFY_REG(*preg,
 8001308:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800130c:	6031      	str	r1, [r6, #0]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800130e:	6823      	ldr	r3, [r4, #0]
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001310:	f102 000c 	add.w	r0, r2, #12
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001314:	68d2      	ldr	r2, [r2, #12]
 8001316:	f3c3 0612 	ubfx	r6, r3, #0, #19
 800131a:	f3c2 6184 	ubfx	r1, r2, #26, #5
 800131e:	bb4e      	cbnz	r6, 8001374 <HAL_ADC_ConfigChannel+0x1d0>
 8001320:	f3c3 6384 	ubfx	r3, r3, #26, #5
 8001324:	428b      	cmp	r3, r1
  MODIFY_REG(*preg,
 8001326:	bf04      	itt	eq
 8001328:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 800132c:	6002      	streq	r2, [r0, #0]
 800132e:	e796      	b.n	800125e <HAL_ADC_ConfigChannel+0xba>
 8001330:	fa93 f0a3 	rbit	r0, r3
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001334:	fab0 f080 	clz	r0, r0
 8001338:	4287      	cmp	r7, r0
 800133a:	d0c3      	beq.n	80012c4 <HAL_ADC_ConfigChannel+0x120>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800133c:	f8de 1064 	ldr.w	r1, [lr, #100]	; 0x64
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001340:	f3c1 6084 	ubfx	r0, r1, #26, #5
 8001344:	fa93 f3a3 	rbit	r3, r3
 8001348:	fab3 f383 	clz	r3, r3
 800134c:	4283      	cmp	r3, r0
 800134e:	d0ca      	beq.n	80012e6 <HAL_ADC_ConfigChannel+0x142>
 8001350:	6891      	ldr	r1, [r2, #8]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001352:	6823      	ldr	r3, [r4, #0]
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001354:	f102 0608 	add.w	r6, r2, #8
 8001358:	f3c1 6084 	ubfx	r0, r1, #26, #5
 800135c:	fa93 f3a3 	rbit	r3, r3
 8001360:	fab3 f383 	clz	r3, r3
 8001364:	4283      	cmp	r3, r0
 8001366:	d0cf      	beq.n	8001308 <HAL_ADC_ConfigChannel+0x164>
 8001368:	f102 000c 	add.w	r0, r2, #12
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800136c:	68d2      	ldr	r2, [r2, #12]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800136e:	6823      	ldr	r3, [r4, #0]
 8001370:	f3c2 6184 	ubfx	r1, r2, #26, #5
 8001374:	fa93 f3a3 	rbit	r3, r3
 8001378:	fab3 f383 	clz	r3, r3
 800137c:	e7d2      	b.n	8001324 <HAL_ADC_ConfigChannel+0x180>
 800137e:	fa93 f2a3 	rbit	r2, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance, __LL_ADC_DECIMAL_NB_TO_CHANNEL(__LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel) + 1), sConfig->SamplingTime);
 8001382:	fab2 f282 	clz	r2, r2
 8001386:	3201      	adds	r2, #1
 8001388:	2a09      	cmp	r2, #9
 800138a:	d822      	bhi.n	80013d2 <HAL_ADC_ConfigChannel+0x22e>
 800138c:	fa93 f2a3 	rbit	r2, r3
 8001390:	fab2 f282 	clz	r2, r2
 8001394:	3201      	adds	r2, #1
 8001396:	0692      	lsls	r2, r2, #26
 8001398:	fa93 f1a3 	rbit	r1, r3
 800139c:	fab1 f181 	clz	r1, r1
 80013a0:	1c4e      	adds	r6, r1, #1
 80013a2:	2101      	movs	r1, #1
 80013a4:	40b1      	lsls	r1, r6
 80013a6:	e001      	b.n	80013ac <HAL_ADC_ConfigChannel+0x208>
 80013a8:	fa01 f10e 	lsl.w	r1, r1, lr
 80013ac:	430a      	orrs	r2, r1
 80013ae:	b957      	cbnz	r7, 80013c6 <HAL_ADC_ConfigChannel+0x222>
 80013b0:	f3c3 6384 	ubfx	r3, r3, #26, #5
 80013b4:	1c59      	adds	r1, r3, #1
 80013b6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80013ba:	0509      	lsls	r1, r1, #20
 80013bc:	4311      	orrs	r1, r2
 80013be:	68a2      	ldr	r2, [r4, #8]
 80013c0:	f7ff fdb2 	bl	8000f28 <LL_ADC_SetChannelSamplingTime>
 80013c4:	e756      	b.n	8001274 <HAL_ADC_ConfigChannel+0xd0>
 80013c6:	fa93 f1a3 	rbit	r1, r3
 80013ca:	fab1 f181 	clz	r1, r1
 80013ce:	3101      	adds	r1, #1
 80013d0:	e7f1      	b.n	80013b6 <HAL_ADC_ConfigChannel+0x212>
 80013d2:	fa93 f2a3 	rbit	r2, r3
 80013d6:	fab2 f282 	clz	r2, r2
 80013da:	3201      	adds	r2, #1
 80013dc:	0696      	lsls	r6, r2, #26
 80013de:	fa93 f1a3 	rbit	r1, r3
 80013e2:	fab1 f181 	clz	r1, r1
 80013e6:	1c4a      	adds	r2, r1, #1
 80013e8:	2101      	movs	r1, #1
 80013ea:	4091      	lsls	r1, r2
 80013ec:	e082      	b.n	80014f4 <HAL_ADC_ConfigChannel+0x350>
 80013ee:	fa93 f3a3 	rbit	r3, r3
 80013f2:	fab3 f383 	clz	r3, r3
 80013f6:	e084      	b.n	8001502 <HAL_ADC_ConfigChannel+0x35e>
          ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0U)) ||
 80013f8:	4a52      	ldr	r2, [pc, #328]	; (8001544 <HAL_ADC_ConfigChannel+0x3a0>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d115      	bne.n	800142a <HAL_ADC_ConfigChannel+0x286>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80013fe:	4a50      	ldr	r2, [pc, #320]	; (8001540 <HAL_ADC_ConfigChannel+0x39c>)
 8001400:	6890      	ldr	r0, [r2, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001402:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 8001406:	f47f af3f 	bne.w	8001288 <HAL_ADC_ConfigChannel+0xe4>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800140a:	6829      	ldr	r1, [r5, #0]
 800140c:	4b4e      	ldr	r3, [pc, #312]	; (8001548 <HAL_ADC_ConfigChannel+0x3a4>)
 800140e:	4299      	cmp	r1, r3
 8001410:	f47f af3a 	bne.w	8001288 <HAL_ADC_ConfigChannel+0xe4>
 8001414:	6891      	ldr	r1, [r2, #8]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001416:	6893      	ldr	r3, [r2, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001418:	f001 71e0 	and.w	r1, r1, #29360128	; 0x1c00000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800141c:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8001420:	430b      	orrs	r3, r1
 8001422:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001426:	6093      	str	r3, [r2, #8]
 8001428:	e72f      	b.n	800128a <HAL_ADC_ConfigChannel+0xe6>
          ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_VBAT) == 0U))       ||
 800142a:	4a48      	ldr	r2, [pc, #288]	; (800154c <HAL_ADC_ConfigChannel+0x3a8>)
 800142c:	4293      	cmp	r3, r2
 800142e:	f47f af2b 	bne.w	8001288 <HAL_ADC_ConfigChannel+0xe4>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001432:	4a43      	ldr	r2, [pc, #268]	; (8001540 <HAL_ADC_ConfigChannel+0x39c>)
 8001434:	6890      	ldr	r0, [r2, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001436:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
 800143a:	f47f af25 	bne.w	8001288 <HAL_ADC_ConfigChannel+0xe4>
        if (ADC_VREFINT_INSTANCE(hadc))
 800143e:	6829      	ldr	r1, [r5, #0]
 8001440:	4b41      	ldr	r3, [pc, #260]	; (8001548 <HAL_ADC_ConfigChannel+0x3a4>)
 8001442:	4299      	cmp	r1, r3
 8001444:	f47f af20 	bne.w	8001288 <HAL_ADC_ConfigChannel+0xe4>
 8001448:	6891      	ldr	r1, [r2, #8]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800144a:	6893      	ldr	r3, [r2, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800144c:	f001 71e0 	and.w	r1, r1, #29360128	; 0x1c00000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001450:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8001454:	430b      	orrs	r3, r1
 8001456:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800145a:	e7e4      	b.n	8001426 <HAL_ADC_ConfigChannel+0x282>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc)) 
 800145c:	6829      	ldr	r1, [r5, #0]
 800145e:	4b3a      	ldr	r3, [pc, #232]	; (8001548 <HAL_ADC_ConfigChannel+0x3a4>)
 8001460:	4299      	cmp	r1, r3
 8001462:	f47f af11 	bne.w	8001288 <HAL_ADC_ConfigChannel+0xe4>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001466:	6891      	ldr	r1, [r2, #8]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001468:	6893      	ldr	r3, [r2, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800146a:	f001 71e0 	and.w	r1, r1, #29360128	; 0x1c00000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800146e:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8001472:	430b      	orrs	r3, r1
 8001474:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001478:	6093      	str	r3, [r2, #8]
          wait_loop_index = (LL_ADC_DELAY_TEMPSENSOR_STAB_US * (SystemCoreClock / (1000000 * 2)));
 800147a:	4b35      	ldr	r3, [pc, #212]	; (8001550 <HAL_ADC_ConfigChannel+0x3ac>)
 800147c:	4a35      	ldr	r2, [pc, #212]	; (8001554 <HAL_ADC_ConfigChannel+0x3b0>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	fbb3 f2f2 	udiv	r2, r3, r2
 8001484:	2378      	movs	r3, #120	; 0x78
 8001486:	4353      	muls	r3, r2
            wait_loop_index--;
 8001488:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0)
 800148a:	9b01      	ldr	r3, [sp, #4]
 800148c:	2b00      	cmp	r3, #0
 800148e:	f43f aefb 	beq.w	8001288 <HAL_ADC_ConfigChannel+0xe4>
            wait_loop_index--;
 8001492:	9b01      	ldr	r3, [sp, #4]
 8001494:	3b01      	subs	r3, #1
 8001496:	e7f7      	b.n	8001488 <HAL_ADC_ConfigChannel+0x2e4>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001498:	6daa      	ldr	r2, [r5, #88]	; 0x58
 800149a:	f042 0220 	orr.w	r2, r2, #32
 800149e:	65aa      	str	r2, [r5, #88]	; 0x58
    tmp_hal_status = HAL_ERROR;
 80014a0:	4618      	mov	r0, r3
 80014a2:	e6f2      	b.n	800128a <HAL_ADC_ConfigChannel+0xe6>
  __HAL_LOCK(hadc);
 80014a4:	2002      	movs	r0, #2
 80014a6:	e6f3      	b.n	8001290 <HAL_ADC_ConfigChannel+0xec>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80014a8:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(ADCx->DIFSEL,
 80014aa:	4a2b      	ldr	r2, [pc, #172]	; (8001558 <HAL_ADC_ConfigChannel+0x3b4>)
 80014ac:	f8d0 60b0 	ldr.w	r6, [r0, #176]	; 0xb0
 80014b0:	6823      	ldr	r3, [r4, #0]
 80014b2:	f001 0e20 	and.w	lr, r1, #32
 80014b6:	fa02 f20e 	lsl.w	r2, r2, lr
 80014ba:	f3c3 0712 	ubfx	r7, r3, #0, #19
 80014be:	4072      	eors	r2, r6
 80014c0:	403a      	ands	r2, r7
 80014c2:	4072      	eors	r2, r6
 80014c4:	f8c0 20b0 	str.w	r2, [r0, #176]	; 0xb0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80014c8:	4a24      	ldr	r2, [pc, #144]	; (800155c <HAL_ADC_ConfigChannel+0x3b8>)
 80014ca:	4291      	cmp	r1, r2
 80014cc:	f47f aed2 	bne.w	8001274 <HAL_ADC_ConfigChannel+0xd0>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, __LL_ADC_DECIMAL_NB_TO_CHANNEL(__LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel) + 1), sConfig->SamplingTime);
 80014d0:	2f00      	cmp	r7, #0
 80014d2:	f47f af54 	bne.w	800137e <HAL_ADC_ConfigChannel+0x1da>
 80014d6:	f3c3 6184 	ubfx	r1, r3, #26, #5
 80014da:	f101 0e01 	add.w	lr, r1, #1
 80014de:	f1be 0f09 	cmp.w	lr, #9
 80014e2:	f04f 0101 	mov.w	r1, #1
 80014e6:	ea4f 628e 	mov.w	r2, lr, lsl #26
 80014ea:	f67f af5d 	bls.w	80013a8 <HAL_ADC_ConfigChannel+0x204>
 80014ee:	4616      	mov	r6, r2
 80014f0:	fa01 f10e 	lsl.w	r1, r1, lr
 80014f4:	ea41 0206 	orr.w	r2, r1, r6
 80014f8:	2f00      	cmp	r7, #0
 80014fa:	f47f af78 	bne.w	80013ee <HAL_ADC_ConfigChannel+0x24a>
 80014fe:	f3c3 6384 	ubfx	r3, r3, #26, #5
 8001502:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001506:	f1a3 011b 	sub.w	r1, r3, #27
 800150a:	0509      	lsls	r1, r1, #20
 800150c:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8001510:	e754      	b.n	80013bc <HAL_ADC_ConfigChannel+0x218>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001512:	f8de 1064 	ldr.w	r1, [lr, #100]	; 0x64
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001516:	f3c1 6084 	ubfx	r0, r1, #26, #5
 800151a:	e6df      	b.n	80012dc <HAL_ADC_ConfigChannel+0x138>
 800151c:	6891      	ldr	r1, [r2, #8]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800151e:	6823      	ldr	r3, [r4, #0]
  register uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001520:	f102 0608 	add.w	r6, r2, #8
 8001524:	f3c1 6084 	ubfx	r0, r1, #26, #5
 8001528:	e6e9      	b.n	80012fe <HAL_ADC_ConfigChannel+0x15a>
 800152a:	f102 000c 	add.w	r0, r2, #12
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800152e:	68d2      	ldr	r2, [r2, #12]
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001530:	6823      	ldr	r3, [r4, #0]
 8001532:	f3c2 6184 	ubfx	r1, r2, #26, #5
 8001536:	e6f3      	b.n	8001320 <HAL_ADC_ConfigChannel+0x17c>
 8001538:	03fff000 	.word	0x03fff000
 800153c:	c7520000 	.word	0xc7520000
 8001540:	50040300 	.word	0x50040300
 8001544:	cb840000 	.word	0xcb840000
 8001548:	50040000 	.word	0x50040000
 800154c:	80000001 	.word	0x80000001
 8001550:	20000000 	.word	0x20000000
 8001554:	001e8480 	.word	0x001e8480
 8001558:	0007ffff 	.word	0x0007ffff
 800155c:	407f0000 	.word	0x407f0000

08001560 <ADC_Enable>:
{
 8001560:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0;
 8001562:	2300      	movs	r3, #0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001564:	6802      	ldr	r2, [r0, #0]
  __IO uint32_t wait_loop_index = 0;
 8001566:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001568:	6893      	ldr	r3, [r2, #8]
 800156a:	f003 0303 	and.w	r3, r3, #3
 800156e:	2b01      	cmp	r3, #1
{
 8001570:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001572:	d108      	bne.n	8001586 <ADC_Enable+0x26>
 8001574:	6813      	ldr	r3, [r2, #0]
 8001576:	07d8      	lsls	r0, r3, #31
 8001578:	d505      	bpl.n	8001586 <ADC_Enable+0x26>
  return HAL_OK;
 800157a:	2000      	movs	r0, #0
}
 800157c:	b002      	add	sp, #8
 800157e:	bd70      	pop	{r4, r5, r6, pc}
      wait_loop_index--;
 8001580:	9b01      	ldr	r3, [sp, #4]
 8001582:	3b01      	subs	r3, #1
 8001584:	e012      	b.n	80015ac <ADC_Enable+0x4c>
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001586:	6891      	ldr	r1, [r2, #8]
 8001588:	4b1a      	ldr	r3, [pc, #104]	; (80015f4 <ADC_Enable+0x94>)
 800158a:	4219      	tst	r1, r3
 800158c:	d127      	bne.n	80015de <ADC_Enable+0x7e>
  MODIFY_REG(ADCx->CR,
 800158e:	6893      	ldr	r3, [r2, #8]
 8001590:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001594:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001598:	f043 0301 	orr.w	r3, r3, #1
 800159c:	6093      	str	r3, [r2, #8]
    wait_loop_index = (LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (1000000 * 2)));
 800159e:	4b16      	ldr	r3, [pc, #88]	; (80015f8 <ADC_Enable+0x98>)
 80015a0:	4a16      	ldr	r2, [pc, #88]	; (80015fc <ADC_Enable+0x9c>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	fbb3 f2f2 	udiv	r2, r3, r2
 80015a8:	230a      	movs	r3, #10
 80015aa:	4353      	muls	r3, r2
      wait_loop_index--;
 80015ac:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 80015ae:	9b01      	ldr	r3, [sp, #4]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d1e5      	bne.n	8001580 <ADC_Enable+0x20>
    tickstart = HAL_GetTick();
 80015b4:	f7ff fca4 	bl	8000f00 <HAL_GetTick>
 80015b8:	4e11      	ldr	r6, [pc, #68]	; (8001600 <ADC_Enable+0xa0>)
 80015ba:	4605      	mov	r5, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80015bc:	6822      	ldr	r2, [r4, #0]
 80015be:	6813      	ldr	r3, [r2, #0]
 80015c0:	07db      	lsls	r3, r3, #31
 80015c2:	d4da      	bmi.n	800157a <ADC_Enable+0x1a>
  return (uint32_t)(READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 80015c4:	6893      	ldr	r3, [r2, #8]
      if(LL_ADC_IsEnabled(hadc->Instance) == 0)
 80015c6:	07d9      	lsls	r1, r3, #31
  MODIFY_REG(ADCx->CR,
 80015c8:	bf5f      	itttt	pl
 80015ca:	6893      	ldrpl	r3, [r2, #8]
 80015cc:	4033      	andpl	r3, r6
 80015ce:	f043 0301 	orrpl.w	r3, r3, #1
 80015d2:	6093      	strpl	r3, [r2, #8]
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80015d4:	f7ff fc94 	bl	8000f00 <HAL_GetTick>
 80015d8:	1b40      	subs	r0, r0, r5
 80015da:	2802      	cmp	r0, #2
 80015dc:	d9ee      	bls.n	80015bc <ADC_Enable+0x5c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80015e0:	f043 0310 	orr.w	r3, r3, #16
 80015e4:	65a3      	str	r3, [r4, #88]	; 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015e6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80015e8:	f043 0301 	orr.w	r3, r3, #1
 80015ec:	65e3      	str	r3, [r4, #92]	; 0x5c
        return HAL_ERROR;
 80015ee:	2001      	movs	r0, #1
 80015f0:	e7c4      	b.n	800157c <ADC_Enable+0x1c>
 80015f2:	bf00      	nop
 80015f4:	8000003f 	.word	0x8000003f
 80015f8:	20000000 	.word	0x20000000
 80015fc:	001e8480 	.word	0x001e8480
 8001600:	7fffffc0 	.word	0x7fffffc0

08001604 <HAL_ADC_Start_DMA>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001604:	6803      	ldr	r3, [r0, #0]
{
 8001606:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return (uint32_t)(READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART));
 800160a:	689e      	ldr	r6, [r3, #8]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800160c:	f016 0604 	ands.w	r6, r6, #4
{
 8001610:	4604      	mov	r4, r0
 8001612:	460f      	mov	r7, r1
 8001614:	4690      	mov	r8, r2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001616:	d148      	bne.n	80016aa <HAL_ADC_Start_DMA+0xa6>
    __HAL_LOCK(hadc);
 8001618:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 800161c:	2b01      	cmp	r3, #1
 800161e:	d044      	beq.n	80016aa <HAL_ADC_Start_DMA+0xa6>
 8001620:	2301      	movs	r3, #1
 8001622:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
      tmp_hal_status = ADC_Enable(hadc);
 8001626:	f7ff ff9b 	bl	8001560 <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 800162a:	4605      	mov	r5, r0
 800162c:	2800      	cmp	r0, #0
 800162e:	d139      	bne.n	80016a4 <HAL_ADC_Start_DMA+0xa0>
        ADC_STATE_CLR_SET(hadc->State,
 8001630:	6da0      	ldr	r0, [r4, #88]	; 0x58
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001632:	6821      	ldr	r1, [r4, #0]
        ADC_STATE_CLR_SET(hadc->State,
 8001634:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
 8001638:	f020 0001 	bic.w	r0, r0, #1
 800163c:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 8001640:	65a0      	str	r0, [r4, #88]	; 0x58
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001642:	6da3      	ldr	r3, [r4, #88]	; 0x58
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001644:	6d20      	ldr	r0, [r4, #80]	; 0x50
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001646:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800164a:	65a3      	str	r3, [r4, #88]	; 0x58
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800164c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800164e:	04db      	lsls	r3, r3, #19
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001650:	bf49      	itett	mi
 8001652:	6de3      	ldrmi	r3, [r4, #92]	; 0x5c
          ADC_CLEAR_ERRORCODE(hadc); 
 8001654:	65e5      	strpl	r5, [r4, #92]	; 0x5c
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001656:	f023 0306 	bicmi.w	r3, r3, #6
 800165a:	65e3      	strmi	r3, [r4, #92]	; 0x5c
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800165c:	4b14      	ldr	r3, [pc, #80]	; (80016b0 <HAL_ADC_Start_DMA+0xac>)
 800165e:	62c3      	str	r3, [r0, #44]	; 0x2c
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001660:	4b14      	ldr	r3, [pc, #80]	; (80016b4 <HAL_ADC_Start_DMA+0xb0>)
 8001662:	6303      	str	r3, [r0, #48]	; 0x30
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001664:	4b14      	ldr	r3, [pc, #80]	; (80016b8 <HAL_ADC_Start_DMA+0xb4>)
 8001666:	6343      	str	r3, [r0, #52]	; 0x34
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001668:	231c      	movs	r3, #28
 800166a:	600b      	str	r3, [r1, #0]
        __HAL_UNLOCK(hadc);
 800166c:	2300      	movs	r3, #0
 800166e:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001672:	684b      	ldr	r3, [r1, #4]
 8001674:	f043 0310 	orr.w	r3, r3, #16
 8001678:	604b      	str	r3, [r1, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800167a:	68cb      	ldr	r3, [r1, #12]
 800167c:	f043 0301 	orr.w	r3, r3, #1
 8001680:	60cb      	str	r3, [r1, #12]
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001682:	463a      	mov	r2, r7
 8001684:	4643      	mov	r3, r8
 8001686:	3140      	adds	r1, #64	; 0x40
 8001688:	f000 f8f4 	bl	8001874 <HAL_DMA_Start_IT>
        LL_ADC_REG_StartConversion(hadc->Instance);
 800168c:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 800168e:	6893      	ldr	r3, [r2, #8]
 8001690:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001694:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001698:	f043 0304 	orr.w	r3, r3, #4
 800169c:	6093      	str	r3, [r2, #8]
}
 800169e:	4628      	mov	r0, r5
 80016a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_UNLOCK(hadc);
 80016a4:	f884 6054 	strb.w	r6, [r4, #84]	; 0x54
 80016a8:	e7f9      	b.n	800169e <HAL_ADC_Start_DMA+0x9a>
    tmp_hal_status = HAL_BUSY;
 80016aa:	2502      	movs	r5, #2
 80016ac:	e7f7      	b.n	800169e <HAL_ADC_Start_DMA+0x9a>
 80016ae:	bf00      	nop
 80016b0:	08001121 	.word	0x08001121
 80016b4:	08001115 	.word	0x08001115
 80016b8:	08001189 	.word	0x08001189

080016bc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016bc:	4a07      	ldr	r2, [pc, #28]	; (80016dc <HAL_NVIC_SetPriorityGrouping+0x20>)
 80016be:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016c0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80016c4:	041b      	lsls	r3, r3, #16
 80016c6:	0c1b      	lsrs	r3, r3, #16
 80016c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80016cc:	0200      	lsls	r0, r0, #8
 80016ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016d2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80016d6:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80016d8:	60d3      	str	r3, [r2, #12]
 80016da:	4770      	bx	lr
 80016dc:	e000ed00 	.word	0xe000ed00

080016e0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016e0:	4b17      	ldr	r3, [pc, #92]	; (8001740 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016e2:	b530      	push	{r4, r5, lr}
 80016e4:	68dc      	ldr	r4, [r3, #12]
 80016e6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016ea:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016ee:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016f0:	2b04      	cmp	r3, #4
 80016f2:	bf28      	it	cs
 80016f4:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016f6:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016f8:	f04f 0501 	mov.w	r5, #1
 80016fc:	fa05 f303 	lsl.w	r3, r5, r3
 8001700:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001704:	bf8c      	ite	hi
 8001706:	3c03      	subhi	r4, #3
 8001708:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800170a:	4019      	ands	r1, r3
 800170c:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800170e:	fa05 f404 	lsl.w	r4, r5, r4
 8001712:	3c01      	subs	r4, #1
 8001714:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8001716:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001718:	ea42 0201 	orr.w	r2, r2, r1
 800171c:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001720:	bfaf      	iteee	ge
 8001722:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001726:	f000 000f 	andlt.w	r0, r0, #15
 800172a:	4b06      	ldrlt	r3, [pc, #24]	; (8001744 <HAL_NVIC_SetPriority+0x64>)
 800172c:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800172e:	bfa5      	ittet	ge
 8001730:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8001734:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001736:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001738:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 800173c:	bd30      	pop	{r4, r5, pc}
 800173e:	bf00      	nop
 8001740:	e000ed00 	.word	0xe000ed00
 8001744:	e000ed14 	.word	0xe000ed14

08001748 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001748:	0942      	lsrs	r2, r0, #5
 800174a:	2301      	movs	r3, #1
 800174c:	f000 001f 	and.w	r0, r0, #31
 8001750:	fa03 f000 	lsl.w	r0, r3, r0
 8001754:	4b01      	ldr	r3, [pc, #4]	; (800175c <HAL_NVIC_EnableIRQ+0x14>)
 8001756:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800175a:	4770      	bx	lr
 800175c:	e000e100 	.word	0xe000e100

08001760 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001760:	3801      	subs	r0, #1
 8001762:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001766:	d20a      	bcs.n	800177e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001768:	4b06      	ldr	r3, [pc, #24]	; (8001784 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800176a:	4a07      	ldr	r2, [pc, #28]	; (8001788 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800176c:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800176e:	21f0      	movs	r1, #240	; 0xf0
 8001770:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001774:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001776:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001778:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800177a:	601a      	str	r2, [r3, #0]
 800177c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800177e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001780:	4770      	bx	lr
 8001782:	bf00      	nop
 8001784:	e000e010 	.word	0xe000e010
 8001788:	e000ed00 	.word	0xe000ed00

0800178c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800178c:	4b04      	ldr	r3, [pc, #16]	; (80017a0 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800178e:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001790:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001792:	bf0c      	ite	eq
 8001794:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001798:	f022 0204 	bicne.w	r2, r2, #4
 800179c:	601a      	str	r2, [r3, #0]
 800179e:	4770      	bx	lr
 80017a0:	e000e010 	.word	0xe000e010

080017a4 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80017a4:	4770      	bx	lr

080017a6 <HAL_SYSTICK_IRQHandler>:
{
 80017a6:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80017a8:	f7ff fffc 	bl	80017a4 <HAL_SYSTICK_Callback>
 80017ac:	bd08      	pop	{r3, pc}
	...

080017b0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80017b0:	b530      	push	{r4, r5, lr}
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80017b2:	2800      	cmp	r0, #0
 80017b4:	d04e      	beq.n	8001854 <HAL_DMA_Init+0xa4>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80017b6:	6801      	ldr	r1, [r0, #0]
 80017b8:	4b27      	ldr	r3, [pc, #156]	; (8001858 <HAL_DMA_Init+0xa8>)
 80017ba:	4299      	cmp	r1, r3
 80017bc:	f04f 0414 	mov.w	r4, #20
 80017c0:	d840      	bhi.n	8001844 <HAL_DMA_Init+0x94>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80017c2:	4a26      	ldr	r2, [pc, #152]	; (800185c <HAL_DMA_Init+0xac>)
 80017c4:	440a      	add	r2, r1
 80017c6:	fbb2 f2f4 	udiv	r2, r2, r4
 80017ca:	0092      	lsls	r2, r2, #2
 80017cc:	6442      	str	r2, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80017ce:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
 80017d2:	6403      	str	r3, [r0, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80017d4:	2302      	movs	r3, #2
 80017d6:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80017da:	6884      	ldr	r4, [r0, #8]
 80017dc:	68c3      	ldr	r3, [r0, #12]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017de:	6905      	ldr	r5, [r0, #16]
  tmp = hdma->Instance->CCR;
 80017e0:	680a      	ldr	r2, [r1, #0]
  tmp |=  hdma->Init.Direction        |
 80017e2:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017e4:	432b      	orrs	r3, r5
 80017e6:	6945      	ldr	r5, [r0, #20]
 80017e8:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017ea:	6985      	ldr	r5, [r0, #24]
 80017ec:	432b      	orrs	r3, r5
 80017ee:	69c5      	ldr	r5, [r0, #28]
 80017f0:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 80017f2:	6a05      	ldr	r5, [r0, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80017f4:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 80017f8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 80017fc:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 80017fe:	4313      	orrs	r3, r2
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001800:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
  hdma->Instance->CCR = tmp;
 8001804:	600b      	str	r3, [r1, #0]
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001806:	d014      	beq.n	8001832 <HAL_DMA_Init+0x82>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001808:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800180a:	4b15      	ldr	r3, [pc, #84]	; (8001860 <HAL_DMA_Init+0xb0>)
 800180c:	429a      	cmp	r2, r3
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800180e:	bf0c      	ite	eq
 8001810:	4914      	ldreq	r1, [pc, #80]	; (8001864 <HAL_DMA_Init+0xb4>)
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001812:	4915      	ldrne	r1, [pc, #84]	; (8001868 <HAL_DMA_Init+0xb8>)
 8001814:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001816:	680a      	ldr	r2, [r1, #0]
 8001818:	f003 031c 	and.w	r3, r3, #28
 800181c:	240f      	movs	r4, #15
 800181e:	409c      	lsls	r4, r3
 8001820:	ea22 0204 	bic.w	r2, r2, r4
 8001824:	600a      	str	r2, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8001826:	6842      	ldr	r2, [r0, #4]
 8001828:	680c      	ldr	r4, [r1, #0]
 800182a:	fa02 f303 	lsl.w	r3, r2, r3
 800182e:	4323      	orrs	r3, r4
 8001830:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001832:	2300      	movs	r3, #0

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001834:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001836:	63c3      	str	r3, [r0, #60]	; 0x3c

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001838:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  hdma->State  = HAL_DMA_STATE_READY;
 800183c:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25

  return HAL_OK;
 8001840:	4618      	mov	r0, r3
 8001842:	bd30      	pop	{r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001844:	4b09      	ldr	r3, [pc, #36]	; (800186c <HAL_DMA_Init+0xbc>)
 8001846:	440b      	add	r3, r1
 8001848:	fbb3 f3f4 	udiv	r3, r3, r4
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001850:	4b07      	ldr	r3, [pc, #28]	; (8001870 <HAL_DMA_Init+0xc0>)
 8001852:	e7be      	b.n	80017d2 <HAL_DMA_Init+0x22>
    return HAL_ERROR;
 8001854:	2001      	movs	r0, #1
}
 8001856:	bd30      	pop	{r4, r5, pc}
 8001858:	40020407 	.word	0x40020407
 800185c:	bffdfff8 	.word	0xbffdfff8
 8001860:	40020000 	.word	0x40020000
 8001864:	400200a8 	.word	0x400200a8
 8001868:	400204a8 	.word	0x400204a8
 800186c:	bffdfbf8 	.word	0xbffdfbf8
 8001870:	40020400 	.word	0x40020400

08001874 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001874:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001876:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
 800187a:	2c01      	cmp	r4, #1
 800187c:	d038      	beq.n	80018f0 <HAL_DMA_Start_IT+0x7c>

  if(HAL_DMA_STATE_READY == hdma->State)
 800187e:	f890 5025 	ldrb.w	r5, [r0, #37]	; 0x25
  __HAL_LOCK(hdma);
 8001882:	2401      	movs	r4, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8001884:	b2ed      	uxtb	r5, r5
 8001886:	42a5      	cmp	r5, r4
  __HAL_LOCK(hdma);
 8001888:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
 800188c:	f04f 0600 	mov.w	r6, #0
 8001890:	f04f 0402 	mov.w	r4, #2
  if(HAL_DMA_STATE_READY == hdma->State)
 8001894:	d12a      	bne.n	80018ec <HAL_DMA_Start_IT+0x78>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001896:	f880 4025 	strb.w	r4, [r0, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800189a:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800189c:	63c6      	str	r6, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 800189e:	6826      	ldr	r6, [r4, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80018a0:	6c07      	ldr	r7, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE(hdma);
 80018a2:	f026 0601 	bic.w	r6, r6, #1
 80018a6:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80018a8:	6c46      	ldr	r6, [r0, #68]	; 0x44
 80018aa:	f006 061c 	and.w	r6, r6, #28
 80018ae:	40b5      	lsls	r5, r6
 80018b0:	607d      	str	r5, [r7, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80018b2:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80018b4:	6883      	ldr	r3, [r0, #8]
 80018b6:	6805      	ldr	r5, [r0, #0]
 80018b8:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback )
 80018ba:	6b03      	ldr	r3, [r0, #48]	; 0x30
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80018bc:	bf0b      	itete	eq
 80018be:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80018c0:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 80018c2:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80018c4:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 80018c6:	b14b      	cbz	r3, 80018dc <HAL_DMA_Start_IT+0x68>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018c8:	6823      	ldr	r3, [r4, #0]
 80018ca:	f043 030e 	orr.w	r3, r3, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80018ce:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 80018d0:	682b      	ldr	r3, [r5, #0]
 80018d2:	f043 0301 	orr.w	r3, r3, #1
 80018d6:	602b      	str	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80018d8:	2000      	movs	r0, #0
 80018da:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80018dc:	6823      	ldr	r3, [r4, #0]
 80018de:	f023 0304 	bic.w	r3, r3, #4
 80018e2:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80018e4:	6823      	ldr	r3, [r4, #0]
 80018e6:	f043 030a 	orr.w	r3, r3, #10
 80018ea:	e7f0      	b.n	80018ce <HAL_DMA_Start_IT+0x5a>
    __HAL_UNLOCK(hdma);
 80018ec:	f880 6024 	strb.w	r6, [r0, #36]	; 0x24
  __HAL_LOCK(hdma);
 80018f0:	2002      	movs	r0, #2
}
 80018f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080018f4 <HAL_DMA_IRQHandler>:
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80018f4:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80018f6:	6c42      	ldr	r2, [r0, #68]	; 0x44
  uint32_t source_it = hdma->Instance->CCR;
 80018f8:	6803      	ldr	r3, [r0, #0]
{
 80018fa:	b470      	push	{r4, r5, r6}
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80018fc:	f002 021c 	and.w	r2, r2, #28
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001900:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001902:	681d      	ldr	r5, [r3, #0]
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8001904:	2404      	movs	r4, #4
 8001906:	4094      	lsls	r4, r2
 8001908:	4226      	tst	r6, r4
 800190a:	d00e      	beq.n	800192a <HAL_DMA_IRQHandler+0x36>
 800190c:	f015 0f04 	tst.w	r5, #4
 8001910:	d00b      	beq.n	800192a <HAL_DMA_IRQHandler+0x36>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	0692      	lsls	r2, r2, #26
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001916:	bf5e      	ittt	pl
 8001918:	681a      	ldrpl	r2, [r3, #0]
 800191a:	f022 0204 	bicpl.w	r2, r2, #4
 800191e:	601a      	strpl	r2, [r3, #0]
     if(hdma->XferHalfCpltCallback != NULL)
 8001920:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8001922:	604c      	str	r4, [r1, #4]
    if (hdma->XferErrorCallback != NULL)
 8001924:	b373      	cbz	r3, 8001984 <HAL_DMA_IRQHandler+0x90>
}
 8001926:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8001928:	4718      	bx	r3
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 800192a:	2402      	movs	r4, #2
 800192c:	4094      	lsls	r4, r2
 800192e:	4226      	tst	r6, r4
 8001930:	d012      	beq.n	8001958 <HAL_DMA_IRQHandler+0x64>
 8001932:	f015 0f02 	tst.w	r5, #2
 8001936:	d00f      	beq.n	8001958 <HAL_DMA_IRQHandler+0x64>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	0695      	lsls	r5, r2, #26
 800193c:	d406      	bmi.n	800194c <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	f022 020a 	bic.w	r2, r2, #10
 8001944:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8001946:	2301      	movs	r3, #1
 8001948:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 800194c:	2300      	movs	r3, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800194e:	604c      	str	r4, [r1, #4]
    __HAL_UNLOCK(hdma);
 8001950:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if(hdma->XferCpltCallback != NULL)
 8001954:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001956:	e7e5      	b.n	8001924 <HAL_DMA_IRQHandler+0x30>
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8001958:	2408      	movs	r4, #8
 800195a:	4094      	lsls	r4, r2
 800195c:	4234      	tst	r4, r6
 800195e:	d011      	beq.n	8001984 <HAL_DMA_IRQHandler+0x90>
 8001960:	072c      	lsls	r4, r5, #28
 8001962:	d50f      	bpl.n	8001984 <HAL_DMA_IRQHandler+0x90>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001964:	681c      	ldr	r4, [r3, #0]
 8001966:	f024 040e 	bic.w	r4, r4, #14
 800196a:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800196c:	2301      	movs	r3, #1
 800196e:	fa03 f202 	lsl.w	r2, r3, r2
 8001972:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001974:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8001976:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 800197a:	2300      	movs	r3, #0
 800197c:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 8001980:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001982:	e7cf      	b.n	8001924 <HAL_DMA_IRQHandler+0x30>
}
 8001984:	bc70      	pop	{r4, r5, r6}
 8001986:	4770      	bx	lr

08001988 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800198c:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800198e:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001990:	f8df 8158 	ldr.w	r8, [pc, #344]	; 8001aec <HAL_GPIO_Init+0x164>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001994:	4a53      	ldr	r2, [pc, #332]	; (8001ae4 <HAL_GPIO_Init+0x15c>)
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001996:	9301      	str	r3, [sp, #4]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001998:	f04f 090f 	mov.w	r9, #15
  uint32_t position = 0x00;
 800199c:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 800199e:	9c01      	ldr	r4, [sp, #4]
 80019a0:	40dc      	lsrs	r4, r3
 80019a2:	d102      	bne.n	80019aa <HAL_GPIO_Init+0x22>
      }
    }
    
    position++;
  }
}
 80019a4:	b005      	add	sp, #20
 80019a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80019aa:	2401      	movs	r4, #1
 80019ac:	fa04 fa03 	lsl.w	sl, r4, r3
    if(iocurrent)
 80019b0:	9c01      	ldr	r4, [sp, #4]
 80019b2:	ea14 050a 	ands.w	r5, r4, sl
 80019b6:	f000 808f 	beq.w	8001ad8 <HAL_GPIO_Init+0x150>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019ba:	684c      	ldr	r4, [r1, #4]
 80019bc:	f024 0b10 	bic.w	fp, r4, #16
 80019c0:	f1bb 0f02 	cmp.w	fp, #2
 80019c4:	d111      	bne.n	80019ea <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3];
 80019c6:	08df      	lsrs	r7, r3, #3
 80019c8:	eb00 0787 	add.w	r7, r0, r7, lsl #2
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80019cc:	f003 0e07 	and.w	lr, r3, #7
        temp = GPIOx->AFR[position >> 3];
 80019d0:	6a3e      	ldr	r6, [r7, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80019d2:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80019d6:	fa09 fc0e 	lsl.w	ip, r9, lr
 80019da:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80019de:	690e      	ldr	r6, [r1, #16]
 80019e0:	fa06 f60e 	lsl.w	r6, r6, lr
 80019e4:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3] = temp;
 80019e8:	623e      	str	r6, [r7, #32]
 80019ea:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 80019ee:	2703      	movs	r7, #3
      temp = GPIOx->MODER;
 80019f0:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 80019f2:	fa07 f70c 	lsl.w	r7, r7, ip
 80019f6:	43ff      	mvns	r7, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80019f8:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 80019fc:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80019fe:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a02:	f10b 3bff 	add.w	fp, fp, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001a06:	ea4e 0606 	orr.w	r6, lr, r6
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a0a:	f1bb 0f01 	cmp.w	fp, #1
      GPIOx->MODER = temp;
 8001a0e:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a10:	d811      	bhi.n	8001a36 <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR;
 8001a12:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2));
 8001a14:	ea06 0b07 	and.w	fp, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2));
 8001a18:	68ce      	ldr	r6, [r1, #12]
 8001a1a:	fa06 fe0c 	lsl.w	lr, r6, ip
 8001a1e:	ea4e 060b 	orr.w	r6, lr, fp
        GPIOx->OSPEEDR = temp;
 8001a22:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8001a24:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a26:	ea26 0a0a 	bic.w	sl, r6, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001a2a:	f3c4 1600 	ubfx	r6, r4, #4, #1
 8001a2e:	409e      	lsls	r6, r3
 8001a30:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OTYPER = temp;
 8001a34:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 8001a36:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2));
 8001a38:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001a3a:	688e      	ldr	r6, [r1, #8]
 8001a3c:	fa06 f60c 	lsl.w	r6, r6, ip
 8001a40:	4337      	orrs	r7, r6
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a42:	00e6      	lsls	r6, r4, #3
      GPIOx->PUPDR = temp;
 8001a44:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a46:	d547      	bpl.n	8001ad8 <HAL_GPIO_Init+0x150>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a48:	f8d8 6060 	ldr.w	r6, [r8, #96]	; 0x60
 8001a4c:	f046 0601 	orr.w	r6, r6, #1
 8001a50:	f8c8 6060 	str.w	r6, [r8, #96]	; 0x60
 8001a54:	f8d8 6060 	ldr.w	r6, [r8, #96]	; 0x60
 8001a58:	f023 0703 	bic.w	r7, r3, #3
 8001a5c:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8001a60:	f006 0601 	and.w	r6, r6, #1
 8001a64:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8001a68:	9603      	str	r6, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001a6a:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a6e:	9e03      	ldr	r6, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 8001a70:	68be      	ldr	r6, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001a72:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001a76:	fa09 fc0e 	lsl.w	ip, r9, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8001a7a:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001a7e:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8001a82:	d02b      	beq.n	8001adc <HAL_GPIO_Init+0x154>
 8001a84:	4e18      	ldr	r6, [pc, #96]	; (8001ae8 <HAL_GPIO_Init+0x160>)
 8001a86:	42b0      	cmp	r0, r6
 8001a88:	d02a      	beq.n	8001ae0 <HAL_GPIO_Init+0x158>
 8001a8a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001a8e:	42b0      	cmp	r0, r6
 8001a90:	bf14      	ite	ne
 8001a92:	2607      	movne	r6, #7
 8001a94:	2602      	moveq	r6, #2
 8001a96:	fa06 f60e 	lsl.w	r6, r6, lr
 8001a9a:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 8001a9e:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR1;
 8001aa0:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001aa2:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001aa4:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8001aa8:	bf0c      	ite	eq
 8001aaa:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8001aac:	432e      	orrne	r6, r5
        EXTI->IMR1 = temp;
 8001aae:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR1;
 8001ab0:	6856      	ldr	r6, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ab2:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001ab6:	bf0c      	ite	eq
 8001ab8:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8001aba:	432e      	orrne	r6, r5
        EXTI->EMR1 = temp;
 8001abc:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR1;
 8001abe:	6896      	ldr	r6, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ac0:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8001ac4:	bf0c      	ite	eq
 8001ac6:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8001ac8:	432e      	orrne	r6, r5
        EXTI->RTSR1 = temp;
 8001aca:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR1;
 8001acc:	68d6      	ldr	r6, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ace:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8001ad0:	bf54      	ite	pl
 8001ad2:	403e      	andpl	r6, r7
          temp |= iocurrent;
 8001ad4:	432e      	orrmi	r6, r5
        EXTI->FTSR1 = temp;
 8001ad6:	60d6      	str	r6, [r2, #12]
    position++;
 8001ad8:	3301      	adds	r3, #1
 8001ada:	e760      	b.n	800199e <HAL_GPIO_Init+0x16>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8001adc:	2600      	movs	r6, #0
 8001ade:	e7da      	b.n	8001a96 <HAL_GPIO_Init+0x10e>
 8001ae0:	2601      	movs	r6, #1
 8001ae2:	e7d8      	b.n	8001a96 <HAL_GPIO_Init+0x10e>
 8001ae4:	40010400 	.word	0x40010400
 8001ae8:	48000400 	.word	0x48000400
 8001aec:	40021000 	.word	0x40021000

08001af0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001af0:	b10a      	cbz	r2, 8001af6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001af2:	6181      	str	r1, [r0, #24]
 8001af4:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001af6:	6281      	str	r1, [r0, #40]	; 0x28
 8001af8:	4770      	bx	lr

08001afa <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8001afa:	6943      	ldr	r3, [r0, #20]
 8001afc:	4059      	eors	r1, r3
 8001afe:	6141      	str	r1, [r0, #20]
 8001b00:	4770      	bx	lr
	...

08001b04 <HAL_PWR_EnableBkUpAccess>:
  *        back-up domain.                
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);    
 8001b04:	4a02      	ldr	r2, [pc, #8]	; (8001b10 <HAL_PWR_EnableBkUpAccess+0xc>)
 8001b06:	6813      	ldr	r3, [r2, #0]
 8001b08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b0c:	6013      	str	r3, [r2, #0]
 8001b0e:	4770      	bx	lr
 8001b10:	40007000 	.word	0x40007000

08001b14 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001b14:	4b02      	ldr	r3, [pc, #8]	; (8001b20 <HAL_PWREx_GetVoltageRange+0xc>)
 8001b16:	6818      	ldr	r0, [r3, #0]
#endif  
}
 8001b18:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	40007000 	.word	0x40007000

08001b24 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.                    
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001b24:	4b16      	ldr	r3, [pc, #88]	; (8001b80 <HAL_PWREx_ControlVoltageScaling+0x5c>)
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b26:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b28:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b2c:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b30:	d11a      	bne.n	8001b68 <HAL_PWREx_ControlVoltageScaling+0x44>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b32:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8001b36:	d013      	beq.n	8001b60 <HAL_PWREx_ControlVoltageScaling+0x3c>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b38:	681a      	ldr	r2, [r3, #0]
      
      /* Wait until VOSF is cleared */      
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 8001b3a:	4912      	ldr	r1, [pc, #72]	; (8001b84 <HAL_PWREx_ControlVoltageScaling+0x60>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b3c:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 8001b40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b44:	601a      	str	r2, [r3, #0]
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 8001b46:	4a10      	ldr	r2, [pc, #64]	; (8001b88 <HAL_PWREx_ControlVoltageScaling+0x64>)
 8001b48:	6812      	ldr	r2, [r2, #0]
 8001b4a:	fbb2 f1f1 	udiv	r1, r2, r1
 8001b4e:	2232      	movs	r2, #50	; 0x32
 8001b50:	434a      	muls	r2, r1
      while ((wait_loop_index != 0) && (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)))
 8001b52:	b112      	cbz	r2, 8001b5a <HAL_PWREx_ControlVoltageScaling+0x36>
 8001b54:	6959      	ldr	r1, [r3, #20]
 8001b56:	0549      	lsls	r1, r1, #21
 8001b58:	d404      	bmi.n	8001b64 <HAL_PWREx_ControlVoltageScaling+0x40>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b5a:	695b      	ldr	r3, [r3, #20]
 8001b5c:	055b      	lsls	r3, r3, #21
 8001b5e:	d40d      	bmi.n	8001b7c <HAL_PWREx_ControlVoltageScaling+0x58>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif  
  
  return HAL_OK;
 8001b60:	2000      	movs	r0, #0
 8001b62:	4770      	bx	lr
        wait_loop_index--;
 8001b64:	3a01      	subs	r2, #1
 8001b66:	e7f4      	b.n	8001b52 <HAL_PWREx_ControlVoltageScaling+0x2e>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b68:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b6c:	bf1f      	itttt	ne
 8001b6e:	681a      	ldrne	r2, [r3, #0]
 8001b70:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 8001b74:	f442 6280 	orrne.w	r2, r2, #1024	; 0x400
 8001b78:	601a      	strne	r2, [r3, #0]
 8001b7a:	e7f1      	b.n	8001b60 <HAL_PWREx_ControlVoltageScaling+0x3c>
        return HAL_TIMEOUT;
 8001b7c:	2003      	movs	r0, #3
}  
 8001b7e:	4770      	bx	lr
 8001b80:	40007000 	.word	0x40007000
 8001b84:	000f4240 	.word	0x000f4240
 8001b88:	20000000 	.word	0x20000000

08001b8c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001b8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos = 0;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001b8e:	4d1e      	ldr	r5, [pc, #120]	; (8001c08 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8001b90:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001b92:	00da      	lsls	r2, r3, #3
{
 8001b94:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001b96:	d518      	bpl.n	8001bca <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001b98:	f7ff ffbc 	bl	8001b14 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b9c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8001ba0:	d123      	bne.n	8001bea <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001ba2:	2c80      	cmp	r4, #128	; 0x80
 8001ba4:	d929      	bls.n	8001bfa <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001ba6:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ba8:	bf8c      	ite	hi
 8001baa:	2002      	movhi	r0, #2
 8001bac:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001bae:	4a17      	ldr	r2, [pc, #92]	; (8001c0c <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8001bb0:	6813      	ldr	r3, [r2, #0]
 8001bb2:	f023 0307 	bic.w	r3, r3, #7
 8001bb6:	4303      	orrs	r3, r0
 8001bb8:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001bba:	6813      	ldr	r3, [r2, #0]
 8001bbc:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8001bc0:	1a18      	subs	r0, r3, r0
 8001bc2:	bf18      	it	ne
 8001bc4:	2001      	movne	r0, #1
 8001bc6:	b003      	add	sp, #12
 8001bc8:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8001bca:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001bcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bd0:	65ab      	str	r3, [r5, #88]	; 0x58
 8001bd2:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001bd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bd8:	9301      	str	r3, [sp, #4]
 8001bda:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8001bdc:	f7ff ff9a 	bl	8001b14 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8001be0:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001be2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001be6:	65ab      	str	r3, [r5, #88]	; 0x58
 8001be8:	e7d8      	b.n	8001b9c <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 8001bea:	2c80      	cmp	r4, #128	; 0x80
 8001bec:	d807      	bhi.n	8001bfe <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 8001bee:	d008      	beq.n	8001c02 <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 8001bf0:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8001bf4:	4258      	negs	r0, r3
 8001bf6:	4158      	adcs	r0, r3
 8001bf8:	e7d9      	b.n	8001bae <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001bfa:	2000      	movs	r0, #0
 8001bfc:	e7d7      	b.n	8001bae <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 8001bfe:	2003      	movs	r0, #3
 8001c00:	e7d5      	b.n	8001bae <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 8001c02:	2002      	movs	r0, #2
 8001c04:	e7d3      	b.n	8001bae <RCC_SetFlashLatencyFromMSIRange+0x22>
 8001c06:	bf00      	nop
 8001c08:	40021000 	.word	0x40021000
 8001c0c:	40022000 	.word	0x40022000

08001c10 <HAL_RCC_GetSysClockFreq>:
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8001c10:	4b2f      	ldr	r3, [pc, #188]	; (8001cd0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001c12:	689a      	ldr	r2, [r3, #8]
 8001c14:	f012 0f0c 	tst.w	r2, #12
{
 8001c18:	b510      	push	{r4, lr}
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8001c1a:	d009      	beq.n	8001c30 <HAL_RCC_GetSysClockFreq+0x20>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8001c1c:	689a      	ldr	r2, [r3, #8]
 8001c1e:	f002 020c 	and.w	r2, r2, #12
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 8001c22:	2a0c      	cmp	r2, #12
 8001c24:	d12d      	bne.n	8001c82 <HAL_RCC_GetSysClockFreq+0x72>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 8001c26:	68da      	ldr	r2, [r3, #12]
 8001c28:	f002 0203 	and.w	r2, r2, #3
 8001c2c:	2a01      	cmp	r2, #1
 8001c2e:	d128      	bne.n	8001c82 <HAL_RCC_GetSysClockFreq+0x72>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 8001c30:	681a      	ldr	r2, [r3, #0]
    msirange = MSIRangeTable[msirange];
 8001c32:	4928      	ldr	r1, [pc, #160]	; (8001cd4 <HAL_RCC_GetSysClockFreq+0xc4>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 8001c34:	0712      	lsls	r2, r2, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001c36:	bf55      	itete	pl
 8001c38:	f8d3 2094 	ldrpl.w	r2, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001c3c:	681a      	ldrmi	r2, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001c3e:	f3c2 2203 	ubfxpl	r2, r2, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001c42:	f3c2 1203 	ubfxmi	r2, r2, #4, #4
    msirange = MSIRangeTable[msirange];
 8001c46:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 8001c4a:	6899      	ldr	r1, [r3, #8]
      sysclockfreq = msirange;
 8001c4c:	f011 0f0c 	tst.w	r1, #12
 8001c50:	bf0c      	ite	eq
 8001c52:	4610      	moveq	r0, r2
 8001c54:	2000      	movne	r0, #0
  if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001c56:	6899      	ldr	r1, [r3, #8]
 8001c58:	f001 010c 	and.w	r1, r1, #12
 8001c5c:	290c      	cmp	r1, #12
 8001c5e:	d130      	bne.n	8001cc2 <HAL_RCC_GetSysClockFreq+0xb2>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c60:	68dc      	ldr	r4, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c62:	68d8      	ldr	r0, [r3, #12]
 8001c64:	f3c0 1002 	ubfx	r0, r0, #4, #3
 8001c68:	1c41      	adds	r1, r0, #1
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c6a:	f004 0003 	and.w	r0, r4, #3
    switch (pllsource)
 8001c6e:	2802      	cmp	r0, #2
 8001c70:	d019      	beq.n	8001ca6 <HAL_RCC_GetSysClockFreq+0x96>
 8001c72:	2803      	cmp	r0, #3
 8001c74:	d026      	beq.n	8001cc4 <HAL_RCC_GetSysClockFreq+0xb4>
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c76:	fbb2 f2f1 	udiv	r2, r2, r1
 8001c7a:	68d8      	ldr	r0, [r3, #12]
 8001c7c:	f3c0 2006 	ubfx	r0, r0, #8, #7
 8001c80:	e017      	b.n	8001cb2 <HAL_RCC_GetSysClockFreq+0xa2>
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001c82:	689a      	ldr	r2, [r3, #8]
 8001c84:	f002 020c 	and.w	r2, r2, #12
 8001c88:	2a04      	cmp	r2, #4
 8001c8a:	d007      	beq.n	8001c9c <HAL_RCC_GetSysClockFreq+0x8c>
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001c8c:	689a      	ldr	r2, [r3, #8]
 8001c8e:	f002 020c 	and.w	r2, r2, #12
 8001c92:	2a08      	cmp	r2, #8
 8001c94:	d104      	bne.n	8001ca0 <HAL_RCC_GetSysClockFreq+0x90>
    sysclockfreq = HSE_VALUE;
 8001c96:	4810      	ldr	r0, [pc, #64]	; (8001cd8 <HAL_RCC_GetSysClockFreq+0xc8>)
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8001c98:	2200      	movs	r2, #0
 8001c9a:	e7dc      	b.n	8001c56 <HAL_RCC_GetSysClockFreq+0x46>
    sysclockfreq = HSI_VALUE;
 8001c9c:	480f      	ldr	r0, [pc, #60]	; (8001cdc <HAL_RCC_GetSysClockFreq+0xcc>)
 8001c9e:	e7fb      	b.n	8001c98 <HAL_RCC_GetSysClockFreq+0x88>
  uint32_t sysclockfreq = 0U;
 8001ca0:	2000      	movs	r0, #0
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	e7d7      	b.n	8001c56 <HAL_RCC_GetSysClockFreq+0x46>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ca6:	68da      	ldr	r2, [r3, #12]
 8001ca8:	480c      	ldr	r0, [pc, #48]	; (8001cdc <HAL_RCC_GetSysClockFreq+0xcc>)
 8001caa:	f3c2 2206 	ubfx	r2, r2, #8, #7
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001cae:	fbb0 f0f1 	udiv	r0, r0, r1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8001cb8:	3301      	adds	r3, #1
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001cba:	4350      	muls	r0, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001cbc:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8001cbe:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8001cc2:	bd10      	pop	{r4, pc}
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001cc4:	68da      	ldr	r2, [r3, #12]
 8001cc6:	4804      	ldr	r0, [pc, #16]	; (8001cd8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001cc8:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8001ccc:	e7ef      	b.n	8001cae <HAL_RCC_GetSysClockFreq+0x9e>
 8001cce:	bf00      	nop
 8001cd0:	40021000 	.word	0x40021000
 8001cd4:	080071b4 	.word	0x080071b4
 8001cd8:	007a1200 	.word	0x007a1200
 8001cdc:	00f42400 	.word	0x00f42400

08001ce0 <HAL_RCC_OscConfig>:
{
 8001ce0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(RCC_OscInitStruct == NULL)
 8001ce4:	4605      	mov	r5, r0
 8001ce6:	b908      	cbnz	r0, 8001cec <HAL_RCC_OscConfig+0xc>
      return HAL_ERROR;
 8001ce8:	2001      	movs	r0, #1
 8001cea:	e08d      	b.n	8001e08 <HAL_RCC_OscConfig+0x128>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001cec:	6803      	ldr	r3, [r0, #0]
 8001cee:	06d8      	lsls	r0, r3, #27
 8001cf0:	d538      	bpl.n	8001d64 <HAL_RCC_OscConfig+0x84>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 8001cf2:	4cab      	ldr	r4, [pc, #684]	; (8001fa0 <HAL_RCC_OscConfig+0x2c0>)
 8001cf4:	68a3      	ldr	r3, [r4, #8]
 8001cf6:	f013 0f0c 	tst.w	r3, #12
 8001cfa:	d161      	bne.n	8001dc0 <HAL_RCC_OscConfig+0xe0>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001cfc:	6823      	ldr	r3, [r4, #0]
 8001cfe:	0799      	lsls	r1, r3, #30
 8001d00:	d502      	bpl.n	8001d08 <HAL_RCC_OscConfig+0x28>
 8001d02:	69ab      	ldr	r3, [r5, #24]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d0ef      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001d08:	6823      	ldr	r3, [r4, #0]
 8001d0a:	6a28      	ldr	r0, [r5, #32]
 8001d0c:	071a      	lsls	r2, r3, #28
 8001d0e:	bf56      	itet	pl
 8001d10:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8001d14:	6823      	ldrmi	r3, [r4, #0]
 8001d16:	091b      	lsrpl	r3, r3, #4
 8001d18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d1c:	4283      	cmp	r3, r0
 8001d1e:	d23a      	bcs.n	8001d96 <HAL_RCC_OscConfig+0xb6>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d20:	f7ff ff34 	bl	8001b8c <RCC_SetFlashLatencyFromMSIRange>
 8001d24:	2800      	cmp	r0, #0
 8001d26:	d1df      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d28:	6823      	ldr	r3, [r4, #0]
 8001d2a:	f043 0308 	orr.w	r3, r3, #8
 8001d2e:	6023      	str	r3, [r4, #0]
 8001d30:	6823      	ldr	r3, [r4, #0]
 8001d32:	6a2a      	ldr	r2, [r5, #32]
 8001d34:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d3c:	6863      	ldr	r3, [r4, #4]
 8001d3e:	69ea      	ldr	r2, [r5, #28]
 8001d40:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001d44:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001d48:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d4a:	f7ff ff61 	bl	8001c10 <HAL_RCC_GetSysClockFreq>
 8001d4e:	68a3      	ldr	r3, [r4, #8]
 8001d50:	4a94      	ldr	r2, [pc, #592]	; (8001fa4 <HAL_RCC_OscConfig+0x2c4>)
 8001d52:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001d56:	5cd3      	ldrb	r3, [r2, r3]
 8001d58:	40d8      	lsrs	r0, r3
 8001d5a:	4b93      	ldr	r3, [pc, #588]	; (8001fa8 <HAL_RCC_OscConfig+0x2c8>)
 8001d5c:	6018      	str	r0, [r3, #0]
        HAL_InitTick (TICK_INT_PRIORITY);
 8001d5e:	2000      	movs	r0, #0
 8001d60:	f7ff f8a6 	bl	8000eb0 <HAL_InitTick>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d64:	682b      	ldr	r3, [r5, #0]
 8001d66:	07d8      	lsls	r0, r3, #31
 8001d68:	d461      	bmi.n	8001e2e <HAL_RCC_OscConfig+0x14e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d6a:	682b      	ldr	r3, [r5, #0]
 8001d6c:	0799      	lsls	r1, r3, #30
 8001d6e:	f100 80a9 	bmi.w	8001ec4 <HAL_RCC_OscConfig+0x1e4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d72:	682b      	ldr	r3, [r5, #0]
 8001d74:	071a      	lsls	r2, r3, #28
 8001d76:	f100 80e7 	bmi.w	8001f48 <HAL_RCC_OscConfig+0x268>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d7a:	682b      	ldr	r3, [r5, #0]
 8001d7c:	075b      	lsls	r3, r3, #29
 8001d7e:	f100 8115 	bmi.w	8001fac <HAL_RCC_OscConfig+0x2cc>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001d82:	682b      	ldr	r3, [r5, #0]
 8001d84:	069a      	lsls	r2, r3, #26
 8001d86:	f100 817c 	bmi.w	8002082 <HAL_RCC_OscConfig+0x3a2>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d8a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8001d8c:	2a00      	cmp	r2, #0
 8001d8e:	f040 81a3 	bne.w	80020d8 <HAL_RCC_OscConfig+0x3f8>
  return HAL_OK;
 8001d92:	2000      	movs	r0, #0
 8001d94:	e038      	b.n	8001e08 <HAL_RCC_OscConfig+0x128>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d96:	6823      	ldr	r3, [r4, #0]
 8001d98:	f043 0308 	orr.w	r3, r3, #8
 8001d9c:	6023      	str	r3, [r4, #0]
 8001d9e:	6823      	ldr	r3, [r4, #0]
 8001da0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001da4:	4303      	orrs	r3, r0
 8001da6:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001da8:	6863      	ldr	r3, [r4, #4]
 8001daa:	69ea      	ldr	r2, [r5, #28]
 8001dac:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001db0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001db4:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001db6:	f7ff fee9 	bl	8001b8c <RCC_SetFlashLatencyFromMSIRange>
 8001dba:	2800      	cmp	r0, #0
 8001dbc:	d0c5      	beq.n	8001d4a <HAL_RCC_OscConfig+0x6a>
 8001dbe:	e793      	b.n	8001ce8 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001dc0:	69ab      	ldr	r3, [r5, #24]
 8001dc2:	b323      	cbz	r3, 8001e0e <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_MSI_ENABLE();
 8001dc4:	6823      	ldr	r3, [r4, #0]
 8001dc6:	f043 0301 	orr.w	r3, r3, #1
 8001dca:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001dcc:	f7ff f898 	bl	8000f00 <HAL_GetTick>
 8001dd0:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8001dd2:	6823      	ldr	r3, [r4, #0]
 8001dd4:	079b      	lsls	r3, r3, #30
 8001dd6:	d511      	bpl.n	8001dfc <HAL_RCC_OscConfig+0x11c>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001dd8:	6823      	ldr	r3, [r4, #0]
 8001dda:	f043 0308 	orr.w	r3, r3, #8
 8001dde:	6023      	str	r3, [r4, #0]
 8001de0:	6823      	ldr	r3, [r4, #0]
 8001de2:	6a2a      	ldr	r2, [r5, #32]
 8001de4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001de8:	4313      	orrs	r3, r2
 8001dea:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001dec:	6863      	ldr	r3, [r4, #4]
 8001dee:	69ea      	ldr	r2, [r5, #28]
 8001df0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001df4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001df8:	6063      	str	r3, [r4, #4]
 8001dfa:	e7b3      	b.n	8001d64 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001dfc:	f7ff f880 	bl	8000f00 <HAL_GetTick>
 8001e00:	1b80      	subs	r0, r0, r6
 8001e02:	2802      	cmp	r0, #2
 8001e04:	d9e5      	bls.n	8001dd2 <HAL_RCC_OscConfig+0xf2>
            return HAL_TIMEOUT;
 8001e06:	2003      	movs	r0, #3
}
 8001e08:	b002      	add	sp, #8
 8001e0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_RCC_MSI_DISABLE();
 8001e0e:	6823      	ldr	r3, [r4, #0]
 8001e10:	f023 0301 	bic.w	r3, r3, #1
 8001e14:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001e16:	f7ff f873 	bl	8000f00 <HAL_GetTick>
 8001e1a:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 8001e1c:	6823      	ldr	r3, [r4, #0]
 8001e1e:	079f      	lsls	r7, r3, #30
 8001e20:	d5a0      	bpl.n	8001d64 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e22:	f7ff f86d 	bl	8000f00 <HAL_GetTick>
 8001e26:	1b80      	subs	r0, r0, r6
 8001e28:	2802      	cmp	r0, #2
 8001e2a:	d9f7      	bls.n	8001e1c <HAL_RCC_OscConfig+0x13c>
 8001e2c:	e7eb      	b.n	8001e06 <HAL_RCC_OscConfig+0x126>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||
 8001e2e:	4c5c      	ldr	r4, [pc, #368]	; (8001fa0 <HAL_RCC_OscConfig+0x2c0>)
 8001e30:	68a3      	ldr	r3, [r4, #8]
 8001e32:	f003 030c 	and.w	r3, r3, #12
 8001e36:	2b08      	cmp	r3, #8
 8001e38:	d009      	beq.n	8001e4e <HAL_RCC_OscConfig+0x16e>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e3a:	68a3      	ldr	r3, [r4, #8]
 8001e3c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||
 8001e40:	2b0c      	cmp	r3, #12
 8001e42:	d10b      	bne.n	8001e5c <HAL_RCC_OscConfig+0x17c>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e44:	68e3      	ldr	r3, [r4, #12]
 8001e46:	f003 0303 	and.w	r3, r3, #3
 8001e4a:	2b03      	cmp	r3, #3
 8001e4c:	d106      	bne.n	8001e5c <HAL_RCC_OscConfig+0x17c>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e4e:	6823      	ldr	r3, [r4, #0]
 8001e50:	039a      	lsls	r2, r3, #14
 8001e52:	d58a      	bpl.n	8001d6a <HAL_RCC_OscConfig+0x8a>
 8001e54:	686b      	ldr	r3, [r5, #4]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d187      	bne.n	8001d6a <HAL_RCC_OscConfig+0x8a>
 8001e5a:	e745      	b.n	8001ce8 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e5c:	686b      	ldr	r3, [r5, #4]
 8001e5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e62:	d110      	bne.n	8001e86 <HAL_RCC_OscConfig+0x1a6>
 8001e64:	6823      	ldr	r3, [r4, #0]
 8001e66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e6a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001e6c:	f7ff f848 	bl	8000f00 <HAL_GetTick>
 8001e70:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8001e72:	6823      	ldr	r3, [r4, #0]
 8001e74:	039b      	lsls	r3, r3, #14
 8001e76:	f53f af78 	bmi.w	8001d6a <HAL_RCC_OscConfig+0x8a>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e7a:	f7ff f841 	bl	8000f00 <HAL_GetTick>
 8001e7e:	1b80      	subs	r0, r0, r6
 8001e80:	2864      	cmp	r0, #100	; 0x64
 8001e82:	d9f6      	bls.n	8001e72 <HAL_RCC_OscConfig+0x192>
 8001e84:	e7bf      	b.n	8001e06 <HAL_RCC_OscConfig+0x126>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e86:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e8a:	d104      	bne.n	8001e96 <HAL_RCC_OscConfig+0x1b6>
 8001e8c:	6823      	ldr	r3, [r4, #0]
 8001e8e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e92:	6023      	str	r3, [r4, #0]
 8001e94:	e7e6      	b.n	8001e64 <HAL_RCC_OscConfig+0x184>
 8001e96:	6822      	ldr	r2, [r4, #0]
 8001e98:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001e9c:	6022      	str	r2, [r4, #0]
 8001e9e:	6822      	ldr	r2, [r4, #0]
 8001ea0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001ea4:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d1e0      	bne.n	8001e6c <HAL_RCC_OscConfig+0x18c>
        tickstart = HAL_GetTick();
 8001eaa:	f7ff f829 	bl	8000f00 <HAL_GetTick>
 8001eae:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8001eb0:	6823      	ldr	r3, [r4, #0]
 8001eb2:	039f      	lsls	r7, r3, #14
 8001eb4:	f57f af59 	bpl.w	8001d6a <HAL_RCC_OscConfig+0x8a>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001eb8:	f7ff f822 	bl	8000f00 <HAL_GetTick>
 8001ebc:	1b80      	subs	r0, r0, r6
 8001ebe:	2864      	cmp	r0, #100	; 0x64
 8001ec0:	d9f6      	bls.n	8001eb0 <HAL_RCC_OscConfig+0x1d0>
 8001ec2:	e7a0      	b.n	8001e06 <HAL_RCC_OscConfig+0x126>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8001ec4:	4c36      	ldr	r4, [pc, #216]	; (8001fa0 <HAL_RCC_OscConfig+0x2c0>)
 8001ec6:	68a3      	ldr	r3, [r4, #8]
 8001ec8:	f003 030c 	and.w	r3, r3, #12
 8001ecc:	2b04      	cmp	r3, #4
 8001ece:	d009      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x204>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001ed0:	68a3      	ldr	r3, [r4, #8]
 8001ed2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8001ed6:	2b0c      	cmp	r3, #12
 8001ed8:	d113      	bne.n	8001f02 <HAL_RCC_OscConfig+0x222>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001eda:	68e3      	ldr	r3, [r4, #12]
 8001edc:	f003 0303 	and.w	r3, r3, #3
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d10e      	bne.n	8001f02 <HAL_RCC_OscConfig+0x222>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ee4:	6823      	ldr	r3, [r4, #0]
 8001ee6:	055e      	lsls	r6, r3, #21
 8001ee8:	d503      	bpl.n	8001ef2 <HAL_RCC_OscConfig+0x212>
 8001eea:	68eb      	ldr	r3, [r5, #12]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	f43f aefb 	beq.w	8001ce8 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ef2:	6863      	ldr	r3, [r4, #4]
 8001ef4:	692a      	ldr	r2, [r5, #16]
 8001ef6:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8001efa:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001efe:	6063      	str	r3, [r4, #4]
 8001f00:	e737      	b.n	8001d72 <HAL_RCC_OscConfig+0x92>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f02:	68eb      	ldr	r3, [r5, #12]
 8001f04:	b17b      	cbz	r3, 8001f26 <HAL_RCC_OscConfig+0x246>
        __HAL_RCC_HSI_ENABLE();
 8001f06:	6823      	ldr	r3, [r4, #0]
 8001f08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f0c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001f0e:	f7fe fff7 	bl	8000f00 <HAL_GetTick>
 8001f12:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8001f14:	6823      	ldr	r3, [r4, #0]
 8001f16:	0558      	lsls	r0, r3, #21
 8001f18:	d4eb      	bmi.n	8001ef2 <HAL_RCC_OscConfig+0x212>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f1a:	f7fe fff1 	bl	8000f00 <HAL_GetTick>
 8001f1e:	1b80      	subs	r0, r0, r6
 8001f20:	2802      	cmp	r0, #2
 8001f22:	d9f7      	bls.n	8001f14 <HAL_RCC_OscConfig+0x234>
 8001f24:	e76f      	b.n	8001e06 <HAL_RCC_OscConfig+0x126>
        __HAL_RCC_HSI_DISABLE();
 8001f26:	6823      	ldr	r3, [r4, #0]
 8001f28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f2c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001f2e:	f7fe ffe7 	bl	8000f00 <HAL_GetTick>
 8001f32:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 8001f34:	6823      	ldr	r3, [r4, #0]
 8001f36:	0559      	lsls	r1, r3, #21
 8001f38:	f57f af1b 	bpl.w	8001d72 <HAL_RCC_OscConfig+0x92>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f3c:	f7fe ffe0 	bl	8000f00 <HAL_GetTick>
 8001f40:	1b80      	subs	r0, r0, r6
 8001f42:	2802      	cmp	r0, #2
 8001f44:	d9f6      	bls.n	8001f34 <HAL_RCC_OscConfig+0x254>
 8001f46:	e75e      	b.n	8001e06 <HAL_RCC_OscConfig+0x126>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f48:	696b      	ldr	r3, [r5, #20]
 8001f4a:	4c15      	ldr	r4, [pc, #84]	; (8001fa0 <HAL_RCC_OscConfig+0x2c0>)
 8001f4c:	b19b      	cbz	r3, 8001f76 <HAL_RCC_OscConfig+0x296>
      __HAL_RCC_LSI_ENABLE();
 8001f4e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001f52:	f043 0301 	orr.w	r3, r3, #1
 8001f56:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001f5a:	f7fe ffd1 	bl	8000f00 <HAL_GetTick>
 8001f5e:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 8001f60:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001f64:	079f      	lsls	r7, r3, #30
 8001f66:	f53f af08 	bmi.w	8001d7a <HAL_RCC_OscConfig+0x9a>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f6a:	f7fe ffc9 	bl	8000f00 <HAL_GetTick>
 8001f6e:	1b80      	subs	r0, r0, r6
 8001f70:	2802      	cmp	r0, #2
 8001f72:	d9f5      	bls.n	8001f60 <HAL_RCC_OscConfig+0x280>
 8001f74:	e747      	b.n	8001e06 <HAL_RCC_OscConfig+0x126>
      __HAL_RCC_LSI_DISABLE();
 8001f76:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001f7a:	f023 0301 	bic.w	r3, r3, #1
 8001f7e:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001f82:	f7fe ffbd 	bl	8000f00 <HAL_GetTick>
 8001f86:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 8001f88:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001f8c:	0798      	lsls	r0, r3, #30
 8001f8e:	f57f aef4 	bpl.w	8001d7a <HAL_RCC_OscConfig+0x9a>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f92:	f7fe ffb5 	bl	8000f00 <HAL_GetTick>
 8001f96:	1b80      	subs	r0, r0, r6
 8001f98:	2802      	cmp	r0, #2
 8001f9a:	d9f5      	bls.n	8001f88 <HAL_RCC_OscConfig+0x2a8>
 8001f9c:	e733      	b.n	8001e06 <HAL_RCC_OscConfig+0x126>
 8001f9e:	bf00      	nop
 8001fa0:	40021000 	.word	0x40021000
 8001fa4:	08007199 	.word	0x08007199
 8001fa8:	20000000 	.word	0x20000000
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001fac:	4c79      	ldr	r4, [pc, #484]	; (8002194 <HAL_RCC_OscConfig+0x4b4>)
 8001fae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001fb0:	00d9      	lsls	r1, r3, #3
 8001fb2:	d427      	bmi.n	8002004 <HAL_RCC_OscConfig+0x324>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fb4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001fb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fba:	65a3      	str	r3, [r4, #88]	; 0x58
 8001fbc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001fbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fc2:	9301      	str	r3, [sp, #4]
 8001fc4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001fc6:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fc8:	4e73      	ldr	r6, [pc, #460]	; (8002198 <HAL_RCC_OscConfig+0x4b8>)
 8001fca:	6833      	ldr	r3, [r6, #0]
 8001fcc:	05da      	lsls	r2, r3, #23
 8001fce:	d51b      	bpl.n	8002008 <HAL_RCC_OscConfig+0x328>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fd0:	68ab      	ldr	r3, [r5, #8]
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d129      	bne.n	800202a <HAL_RCC_OscConfig+0x34a>
 8001fd6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001fda:	f043 0301 	orr.w	r3, r3, #1
 8001fde:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8001fe2:	f7fe ff8d 	bl	8000f00 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fe6:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001fea:	4606      	mov	r6, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8001fec:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001ff0:	0798      	lsls	r0, r3, #30
 8001ff2:	d540      	bpl.n	8002076 <HAL_RCC_OscConfig+0x396>
    if(pwrclkchanged == SET)
 8001ff4:	2f00      	cmp	r7, #0
 8001ff6:	f43f aec4 	beq.w	8001d82 <HAL_RCC_OscConfig+0xa2>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ffa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001ffc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002000:	65a3      	str	r3, [r4, #88]	; 0x58
 8002002:	e6be      	b.n	8001d82 <HAL_RCC_OscConfig+0xa2>
    FlagStatus       pwrclkchanged = RESET;
 8002004:	2700      	movs	r7, #0
 8002006:	e7df      	b.n	8001fc8 <HAL_RCC_OscConfig+0x2e8>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002008:	6833      	ldr	r3, [r6, #0]
 800200a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800200e:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002010:	f7fe ff76 	bl	8000f00 <HAL_GetTick>
 8002014:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002016:	6833      	ldr	r3, [r6, #0]
 8002018:	05db      	lsls	r3, r3, #23
 800201a:	d4d9      	bmi.n	8001fd0 <HAL_RCC_OscConfig+0x2f0>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800201c:	f7fe ff70 	bl	8000f00 <HAL_GetTick>
 8002020:	eba0 0008 	sub.w	r0, r0, r8
 8002024:	2802      	cmp	r0, #2
 8002026:	d9f6      	bls.n	8002016 <HAL_RCC_OscConfig+0x336>
 8002028:	e6ed      	b.n	8001e06 <HAL_RCC_OscConfig+0x126>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800202a:	2b05      	cmp	r3, #5
 800202c:	d106      	bne.n	800203c <HAL_RCC_OscConfig+0x35c>
 800202e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002032:	f043 0304 	orr.w	r3, r3, #4
 8002036:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 800203a:	e7cc      	b.n	8001fd6 <HAL_RCC_OscConfig+0x2f6>
 800203c:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8002040:	f022 0201 	bic.w	r2, r2, #1
 8002044:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8002048:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 800204c:	f022 0204 	bic.w	r2, r2, #4
 8002050:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002054:	2b00      	cmp	r3, #0
 8002056:	d1c4      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x302>
      tickstart = HAL_GetTick();
 8002058:	f7fe ff52 	bl	8000f00 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800205c:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002060:	4606      	mov	r6, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 8002062:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002066:	0799      	lsls	r1, r3, #30
 8002068:	d5c4      	bpl.n	8001ff4 <HAL_RCC_OscConfig+0x314>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800206a:	f7fe ff49 	bl	8000f00 <HAL_GetTick>
 800206e:	1b80      	subs	r0, r0, r6
 8002070:	4540      	cmp	r0, r8
 8002072:	d9f6      	bls.n	8002062 <HAL_RCC_OscConfig+0x382>
 8002074:	e6c7      	b.n	8001e06 <HAL_RCC_OscConfig+0x126>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002076:	f7fe ff43 	bl	8000f00 <HAL_GetTick>
 800207a:	1b80      	subs	r0, r0, r6
 800207c:	4540      	cmp	r0, r8
 800207e:	d9b5      	bls.n	8001fec <HAL_RCC_OscConfig+0x30c>
 8002080:	e6c1      	b.n	8001e06 <HAL_RCC_OscConfig+0x126>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002082:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002084:	4c43      	ldr	r4, [pc, #268]	; (8002194 <HAL_RCC_OscConfig+0x4b4>)
 8002086:	b19b      	cbz	r3, 80020b0 <HAL_RCC_OscConfig+0x3d0>
      __HAL_RCC_HSI48_ENABLE();
 8002088:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800208c:	f043 0301 	orr.w	r3, r3, #1
 8002090:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 8002094:	f7fe ff34 	bl	8000f00 <HAL_GetTick>
 8002098:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == RESET)
 800209a:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800209e:	079b      	lsls	r3, r3, #30
 80020a0:	f53f ae73 	bmi.w	8001d8a <HAL_RCC_OscConfig+0xaa>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020a4:	f7fe ff2c 	bl	8000f00 <HAL_GetTick>
 80020a8:	1b80      	subs	r0, r0, r6
 80020aa:	2802      	cmp	r0, #2
 80020ac:	d9f5      	bls.n	800209a <HAL_RCC_OscConfig+0x3ba>
 80020ae:	e6aa      	b.n	8001e06 <HAL_RCC_OscConfig+0x126>
      __HAL_RCC_HSI48_DISABLE();
 80020b0:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80020b4:	f023 0301 	bic.w	r3, r3, #1
 80020b8:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 80020bc:	f7fe ff20 	bl	8000f00 <HAL_GetTick>
 80020c0:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != RESET)
 80020c2:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80020c6:	079f      	lsls	r7, r3, #30
 80020c8:	f57f ae5f 	bpl.w	8001d8a <HAL_RCC_OscConfig+0xaa>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020cc:	f7fe ff18 	bl	8000f00 <HAL_GetTick>
 80020d0:	1b80      	subs	r0, r0, r6
 80020d2:	2802      	cmp	r0, #2
 80020d4:	d9f5      	bls.n	80020c2 <HAL_RCC_OscConfig+0x3e2>
 80020d6:	e696      	b.n	8001e06 <HAL_RCC_OscConfig+0x126>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80020d8:	4c2e      	ldr	r4, [pc, #184]	; (8002194 <HAL_RCC_OscConfig+0x4b4>)
 80020da:	68a3      	ldr	r3, [r4, #8]
 80020dc:	f003 030c 	and.w	r3, r3, #12
 80020e0:	2b0c      	cmp	r3, #12
 80020e2:	f43f ae01 	beq.w	8001ce8 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 80020e6:	6823      	ldr	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80020e8:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80020ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020ee:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80020f0:	d136      	bne.n	8002160 <HAL_RCC_OscConfig+0x480>
        tickstart = HAL_GetTick();
 80020f2:	f7fe ff05 	bl	8000f00 <HAL_GetTick>
 80020f6:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80020f8:	6823      	ldr	r3, [r4, #0]
 80020fa:	0198      	lsls	r0, r3, #6
 80020fc:	d42a      	bmi.n	8002154 <HAL_RCC_OscConfig+0x474>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020fe:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8002100:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8002102:	06db      	lsls	r3, r3, #27
 8002104:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002108:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800210a:	4313      	orrs	r3, r2
 800210c:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800210e:	3a01      	subs	r2, #1
 8002110:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8002114:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8002116:	0852      	lsrs	r2, r2, #1
 8002118:	3a01      	subs	r2, #1
 800211a:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 800211e:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8002120:	0852      	lsrs	r2, r2, #1
 8002122:	3a01      	subs	r2, #1
 8002124:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8002128:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 800212a:	6823      	ldr	r3, [r4, #0]
 800212c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002130:	6023      	str	r3, [r4, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002132:	68e3      	ldr	r3, [r4, #12]
 8002134:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002138:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 800213a:	f7fe fee1 	bl	8000f00 <HAL_GetTick>
 800213e:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8002140:	6823      	ldr	r3, [r4, #0]
 8002142:	0199      	lsls	r1, r3, #6
 8002144:	f53f ae25 	bmi.w	8001d92 <HAL_RCC_OscConfig+0xb2>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002148:	f7fe feda 	bl	8000f00 <HAL_GetTick>
 800214c:	1b40      	subs	r0, r0, r5
 800214e:	2802      	cmp	r0, #2
 8002150:	d9f6      	bls.n	8002140 <HAL_RCC_OscConfig+0x460>
 8002152:	e658      	b.n	8001e06 <HAL_RCC_OscConfig+0x126>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002154:	f7fe fed4 	bl	8000f00 <HAL_GetTick>
 8002158:	1b80      	subs	r0, r0, r6
 800215a:	2802      	cmp	r0, #2
 800215c:	d9cc      	bls.n	80020f8 <HAL_RCC_OscConfig+0x418>
 800215e:	e652      	b.n	8001e06 <HAL_RCC_OscConfig+0x126>
        if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 8002160:	6823      	ldr	r3, [r4, #0]
 8002162:	011a      	lsls	r2, r3, #4
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002164:	bf5e      	ittt	pl
 8002166:	68e3      	ldrpl	r3, [r4, #12]
 8002168:	f023 0303 	bicpl.w	r3, r3, #3
 800216c:	60e3      	strpl	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800216e:	68e3      	ldr	r3, [r4, #12]
 8002170:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002174:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002178:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 800217a:	f7fe fec1 	bl	8000f00 <HAL_GetTick>
 800217e:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8002180:	6823      	ldr	r3, [r4, #0]
 8002182:	019b      	lsls	r3, r3, #6
 8002184:	f57f ae05 	bpl.w	8001d92 <HAL_RCC_OscConfig+0xb2>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002188:	f7fe feba 	bl	8000f00 <HAL_GetTick>
 800218c:	1b40      	subs	r0, r0, r5
 800218e:	2802      	cmp	r0, #2
 8002190:	d9f6      	bls.n	8002180 <HAL_RCC_OscConfig+0x4a0>
 8002192:	e638      	b.n	8001e06 <HAL_RCC_OscConfig+0x126>
 8002194:	40021000 	.word	0x40021000
 8002198:	40007000 	.word	0x40007000

0800219c <HAL_RCC_ClockConfig>:
{
 800219c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80021a0:	460e      	mov	r6, r1
  if(RCC_ClkInitStruct == NULL)
 80021a2:	4604      	mov	r4, r0
 80021a4:	b910      	cbnz	r0, 80021ac <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80021a6:	2001      	movs	r0, #1
 80021a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021ac:	4a40      	ldr	r2, [pc, #256]	; (80022b0 <HAL_RCC_ClockConfig+0x114>)
 80021ae:	6813      	ldr	r3, [r2, #0]
 80021b0:	f003 0307 	and.w	r3, r3, #7
 80021b4:	428b      	cmp	r3, r1
 80021b6:	d328      	bcc.n	800220a <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021b8:	6823      	ldr	r3, [r4, #0]
 80021ba:	07d9      	lsls	r1, r3, #31
 80021bc:	d430      	bmi.n	8002220 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021be:	6821      	ldr	r1, [r4, #0]
 80021c0:	078a      	lsls	r2, r1, #30
 80021c2:	d45a      	bmi.n	800227a <HAL_RCC_ClockConfig+0xde>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021c4:	4a3a      	ldr	r2, [pc, #232]	; (80022b0 <HAL_RCC_ClockConfig+0x114>)
 80021c6:	6813      	ldr	r3, [r2, #0]
 80021c8:	f003 0307 	and.w	r3, r3, #7
 80021cc:	429e      	cmp	r6, r3
 80021ce:	d35c      	bcc.n	800228a <HAL_RCC_ClockConfig+0xee>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021d0:	f011 0f04 	tst.w	r1, #4
 80021d4:	4d37      	ldr	r5, [pc, #220]	; (80022b4 <HAL_RCC_ClockConfig+0x118>)
 80021d6:	d163      	bne.n	80022a0 <HAL_RCC_ClockConfig+0x104>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021d8:	070b      	lsls	r3, r1, #28
 80021da:	d506      	bpl.n	80021ea <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021dc:	68ab      	ldr	r3, [r5, #8]
 80021de:	6922      	ldr	r2, [r4, #16]
 80021e0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80021e4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80021e8:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021ea:	f7ff fd11 	bl	8001c10 <HAL_RCC_GetSysClockFreq>
 80021ee:	68ab      	ldr	r3, [r5, #8]
 80021f0:	4a31      	ldr	r2, [pc, #196]	; (80022b8 <HAL_RCC_ClockConfig+0x11c>)
 80021f2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80021f6:	5cd3      	ldrb	r3, [r2, r3]
 80021f8:	40d8      	lsrs	r0, r3
 80021fa:	4b30      	ldr	r3, [pc, #192]	; (80022bc <HAL_RCC_ClockConfig+0x120>)
 80021fc:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80021fe:	2000      	movs	r0, #0
 8002200:	f7fe fe56 	bl	8000eb0 <HAL_InitTick>
  return HAL_OK;
 8002204:	2000      	movs	r0, #0
 8002206:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800220a:	6813      	ldr	r3, [r2, #0]
 800220c:	f023 0307 	bic.w	r3, r3, #7
 8002210:	430b      	orrs	r3, r1
 8002212:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002214:	6813      	ldr	r3, [r2, #0]
 8002216:	f003 0307 	and.w	r3, r3, #7
 800221a:	4299      	cmp	r1, r3
 800221c:	d1c3      	bne.n	80021a6 <HAL_RCC_ClockConfig+0xa>
 800221e:	e7cb      	b.n	80021b8 <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002220:	6862      	ldr	r2, [r4, #4]
 8002222:	4d24      	ldr	r5, [pc, #144]	; (80022b4 <HAL_RCC_ClockConfig+0x118>)
 8002224:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8002226:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002228:	d11b      	bne.n	8002262 <HAL_RCC_ClockConfig+0xc6>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 800222a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 800222e:	d0ba      	beq.n	80021a6 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002230:	68ab      	ldr	r3, [r5, #8]
 8002232:	f023 0303 	bic.w	r3, r3, #3
 8002236:	4313      	orrs	r3, r2
 8002238:	60ab      	str	r3, [r5, #8]
    tickstart = HAL_GetTick();
 800223a:	f7fe fe61 	bl	8000f00 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800223e:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8002242:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002244:	68ab      	ldr	r3, [r5, #8]
 8002246:	6862      	ldr	r2, [r4, #4]
 8002248:	f003 030c 	and.w	r3, r3, #12
 800224c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002250:	d0b5      	beq.n	80021be <HAL_RCC_ClockConfig+0x22>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002252:	f7fe fe55 	bl	8000f00 <HAL_GetTick>
 8002256:	1bc0      	subs	r0, r0, r7
 8002258:	4540      	cmp	r0, r8
 800225a:	d9f3      	bls.n	8002244 <HAL_RCC_ClockConfig+0xa8>
        return HAL_TIMEOUT;
 800225c:	2003      	movs	r0, #3
}
 800225e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002262:	2a02      	cmp	r2, #2
 8002264:	d102      	bne.n	800226c <HAL_RCC_ClockConfig+0xd0>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8002266:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800226a:	e7e0      	b.n	800222e <HAL_RCC_ClockConfig+0x92>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800226c:	b912      	cbnz	r2, 8002274 <HAL_RCC_ClockConfig+0xd8>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 800226e:	f013 0f02 	tst.w	r3, #2
 8002272:	e7dc      	b.n	800222e <HAL_RCC_ClockConfig+0x92>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8002274:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002278:	e7d9      	b.n	800222e <HAL_RCC_ClockConfig+0x92>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800227a:	4a0e      	ldr	r2, [pc, #56]	; (80022b4 <HAL_RCC_ClockConfig+0x118>)
 800227c:	68a0      	ldr	r0, [r4, #8]
 800227e:	6893      	ldr	r3, [r2, #8]
 8002280:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002284:	4303      	orrs	r3, r0
 8002286:	6093      	str	r3, [r2, #8]
 8002288:	e79c      	b.n	80021c4 <HAL_RCC_ClockConfig+0x28>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800228a:	6813      	ldr	r3, [r2, #0]
 800228c:	f023 0307 	bic.w	r3, r3, #7
 8002290:	4333      	orrs	r3, r6
 8002292:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002294:	6813      	ldr	r3, [r2, #0]
 8002296:	f003 0307 	and.w	r3, r3, #7
 800229a:	429e      	cmp	r6, r3
 800229c:	d183      	bne.n	80021a6 <HAL_RCC_ClockConfig+0xa>
 800229e:	e797      	b.n	80021d0 <HAL_RCC_ClockConfig+0x34>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022a0:	68ab      	ldr	r3, [r5, #8]
 80022a2:	68e2      	ldr	r2, [r4, #12]
 80022a4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80022a8:	4313      	orrs	r3, r2
 80022aa:	60ab      	str	r3, [r5, #8]
 80022ac:	e794      	b.n	80021d8 <HAL_RCC_ClockConfig+0x3c>
 80022ae:	bf00      	nop
 80022b0:	40022000 	.word	0x40022000
 80022b4:	40021000 	.word	0x40021000
 80022b8:	08007199 	.word	0x08007199
 80022bc:	20000000 	.word	0x20000000

080022c0 <HAL_RCC_GetHCLKFreq>:
}
 80022c0:	4b01      	ldr	r3, [pc, #4]	; (80022c8 <HAL_RCC_GetHCLKFreq+0x8>)
 80022c2:	6818      	ldr	r0, [r3, #0]
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	20000000 	.word	0x20000000

080022cc <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80022cc:	4b04      	ldr	r3, [pc, #16]	; (80022e0 <HAL_RCC_GetPCLK1Freq+0x14>)
 80022ce:	4a05      	ldr	r2, [pc, #20]	; (80022e4 <HAL_RCC_GetPCLK1Freq+0x18>)
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80022d6:	5cd3      	ldrb	r3, [r2, r3]
 80022d8:	4a03      	ldr	r2, [pc, #12]	; (80022e8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80022da:	6810      	ldr	r0, [r2, #0]
}
 80022dc:	40d8      	lsrs	r0, r3
 80022de:	4770      	bx	lr
 80022e0:	40021000 	.word	0x40021000
 80022e4:	080071a9 	.word	0x080071a9
 80022e8:	20000000 	.word	0x20000000

080022ec <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80022ec:	4b04      	ldr	r3, [pc, #16]	; (8002300 <HAL_RCC_GetPCLK2Freq+0x14>)
 80022ee:	4a05      	ldr	r2, [pc, #20]	; (8002304 <HAL_RCC_GetPCLK2Freq+0x18>)
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80022f6:	5cd3      	ldrb	r3, [r2, r3]
 80022f8:	4a03      	ldr	r2, [pc, #12]	; (8002308 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80022fa:	6810      	ldr	r0, [r2, #0]
}
 80022fc:	40d8      	lsrs	r0, r3
 80022fe:	4770      	bx	lr
 8002300:	40021000 	.word	0x40021000
 8002304:	080071a9 	.word	0x080071a9
 8002308:	20000000 	.word	0x20000000

0800230c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800230c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800230e:	4b44      	ldr	r3, [pc, #272]	; (8002420 <RCCEx_PLLSAI1_Config+0x114>)
 8002310:	68da      	ldr	r2, [r3, #12]
 8002312:	f012 0f03 	tst.w	r2, #3
{
 8002316:	4605      	mov	r5, r0
 8002318:	460e      	mov	r6, r1
 800231a:	461c      	mov	r4, r3
 800231c:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800231e:	d039      	beq.n	8002394 <RCCEx_PLLSAI1_Config+0x88>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002320:	68da      	ldr	r2, [r3, #12]
 8002322:	f002 0203 	and.w	r2, r2, #3
 8002326:	4282      	cmp	r2, r0
 8002328:	d14b      	bne.n	80023c2 <RCCEx_PLLSAI1_Config+0xb6>
       ||
 800232a:	2a00      	cmp	r2, #0
 800232c:	d049      	beq.n	80023c2 <RCCEx_PLLSAI1_Config+0xb6>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800232e:	68db      	ldr	r3, [r3, #12]
       ||
 8002330:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002332:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002336:	3301      	adds	r3, #1
       ||
 8002338:	4293      	cmp	r3, r2
 800233a:	d142      	bne.n	80023c2 <RCCEx_PLLSAI1_Config+0xb6>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800233c:	6823      	ldr	r3, [r4, #0]
 800233e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002342:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002344:	f7fe fddc 	bl	8000f00 <HAL_GetTick>
 8002348:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != RESET)
 800234a:	6823      	ldr	r3, [r4, #0]
 800234c:	011a      	lsls	r2, r3, #4
 800234e:	d441      	bmi.n	80023d4 <RCCEx_PLLSAI1_Config+0xc8>
 8002350:	68af      	ldr	r7, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002352:	2e00      	cmp	r6, #0
 8002354:	d045      	beq.n	80023e2 <RCCEx_PLLSAI1_Config+0xd6>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002356:	2e01      	cmp	r6, #1
 8002358:	d14f      	bne.n	80023fa <RCCEx_PLLSAI1_Config+0xee>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800235a:	6922      	ldr	r2, [r4, #16]
 800235c:	6928      	ldr	r0, [r5, #16]
 800235e:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8002362:	0840      	lsrs	r0, r0, #1
 8002364:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8002368:	3801      	subs	r0, #1
 800236a:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 800236e:	ea42 5240 	orr.w	r2, r2, r0, lsl #21
 8002372:	6122      	str	r2, [r4, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002374:	6823      	ldr	r3, [r4, #0]
 8002376:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800237a:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800237c:	f7fe fdc0 	bl	8000f00 <HAL_GetTick>
 8002380:	4606      	mov	r6, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 8002382:	6823      	ldr	r3, [r4, #0]
 8002384:	011b      	lsls	r3, r3, #4
 8002386:	d545      	bpl.n	8002414 <RCCEx_PLLSAI1_Config+0x108>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002388:	6923      	ldr	r3, [r4, #16]
 800238a:	69aa      	ldr	r2, [r5, #24]
 800238c:	4313      	orrs	r3, r2
 800238e:	6123      	str	r3, [r4, #16]
 8002390:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 8002392:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PllSai1->PLLSAI1Source)
 8002394:	2802      	cmp	r0, #2
 8002396:	d010      	beq.n	80023ba <RCCEx_PLLSAI1_Config+0xae>
 8002398:	2803      	cmp	r0, #3
 800239a:	d014      	beq.n	80023c6 <RCCEx_PLLSAI1_Config+0xba>
 800239c:	2801      	cmp	r0, #1
 800239e:	d110      	bne.n	80023c2 <RCCEx_PLLSAI1_Config+0xb6>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	079f      	lsls	r7, r3, #30
 80023a4:	d5f5      	bpl.n	8002392 <RCCEx_PLLSAI1_Config+0x86>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80023a6:	68e3      	ldr	r3, [r4, #12]
 80023a8:	686a      	ldr	r2, [r5, #4]
 80023aa:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 80023ae:	3a01      	subs	r2, #1
 80023b0:	4318      	orrs	r0, r3
 80023b2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80023b6:	60e0      	str	r0, [r4, #12]
 80023b8:	e7c0      	b.n	800233c <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f413 6f80 	tst.w	r3, #1024	; 0x400
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY) && HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80023c0:	d1f1      	bne.n	80023a6 <RCCEx_PLLSAI1_Config+0x9a>
 80023c2:	2001      	movs	r0, #1
 80023c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	0391      	lsls	r1, r2, #14
 80023ca:	d4ec      	bmi.n	80023a6 <RCCEx_PLLSAI1_Config+0x9a>
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80023d2:	e7f5      	b.n	80023c0 <RCCEx_PLLSAI1_Config+0xb4>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80023d4:	f7fe fd94 	bl	8000f00 <HAL_GetTick>
 80023d8:	1bc0      	subs	r0, r0, r7
 80023da:	2802      	cmp	r0, #2
 80023dc:	d9b5      	bls.n	800234a <RCCEx_PLLSAI1_Config+0x3e>
        status = HAL_TIMEOUT;
 80023de:	2003      	movs	r0, #3
 80023e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80023e2:	6922      	ldr	r2, [r4, #16]
 80023e4:	68e9      	ldr	r1, [r5, #12]
 80023e6:	f022 4278 	bic.w	r2, r2, #4160749568	; 0xf8000000
 80023ea:	06c9      	lsls	r1, r1, #27
 80023ec:	ea41 2307 	orr.w	r3, r1, r7, lsl #8
 80023f0:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 80023f4:	4313      	orrs	r3, r2
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80023f6:	6123      	str	r3, [r4, #16]
 80023f8:	e7bc      	b.n	8002374 <RCCEx_PLLSAI1_Config+0x68>
 80023fa:	6923      	ldr	r3, [r4, #16]
 80023fc:	6968      	ldr	r0, [r5, #20]
 80023fe:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002402:	0840      	lsrs	r0, r0, #1
 8002404:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002408:	3801      	subs	r0, #1
 800240a:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 800240e:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 8002412:	e7f0      	b.n	80023f6 <RCCEx_PLLSAI1_Config+0xea>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002414:	f7fe fd74 	bl	8000f00 <HAL_GetTick>
 8002418:	1b80      	subs	r0, r0, r6
 800241a:	2802      	cmp	r0, #2
 800241c:	d9b1      	bls.n	8002382 <RCCEx_PLLSAI1_Config+0x76>
 800241e:	e7de      	b.n	80023de <RCCEx_PLLSAI1_Config+0xd2>
 8002420:	40021000 	.word	0x40021000

08002424 <HAL_RCCEx_PeriphCLKConfig>:
{
 8002424:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002428:	6805      	ldr	r5, [r0, #0]
 800242a:	f415 6500 	ands.w	r5, r5, #2048	; 0x800
{
 800242e:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002430:	d00e      	beq.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x2c>
    switch(PeriphClkInit->Sai1ClockSelection)
 8002432:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8002434:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8002438:	d05b      	beq.n	80024f2 <HAL_RCCEx_PeriphCLKConfig+0xce>
 800243a:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 800243e:	d05d      	beq.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8002440:	2900      	cmp	r1, #0
 8002442:	d166      	bne.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0xee>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002444:	3004      	adds	r0, #4
 8002446:	f7ff ff61 	bl	800230c <RCCEx_PLLSAI1_Config>
    if(ret == HAL_OK)
 800244a:	4605      	mov	r5, r0
 800244c:	2800      	cmp	r0, #0
 800244e:	d055      	beq.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0xd8>
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002450:	6823      	ldr	r3, [r4, #0]
 8002452:	039e      	lsls	r6, r3, #14
 8002454:	d56d      	bpl.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x10e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002456:	4e92      	ldr	r6, [pc, #584]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002458:	6db3      	ldr	r3, [r6, #88]	; 0x58
 800245a:	00d8      	lsls	r0, r3, #3
 800245c:	d45b      	bmi.n	8002516 <HAL_RCCEx_PeriphCLKConfig+0xf2>
      __HAL_RCC_PWR_CLK_ENABLE();
 800245e:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8002460:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002464:	65b3      	str	r3, [r6, #88]	; 0x58
 8002466:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8002468:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800246c:	9301      	str	r3, [sp, #4]
 800246e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002470:	2701      	movs	r7, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002472:	f8df 8230 	ldr.w	r8, [pc, #560]	; 80026a4 <HAL_RCCEx_PeriphCLKConfig+0x280>
 8002476:	f8d8 3000 	ldr.w	r3, [r8]
 800247a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800247e:	f8c8 3000 	str.w	r3, [r8]
    tickstart = HAL_GetTick();
 8002482:	f7fe fd3d 	bl	8000f00 <HAL_GetTick>
 8002486:	4681      	mov	r9, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == RESET)
 8002488:	f8d8 3000 	ldr.w	r3, [r8]
 800248c:	05d9      	lsls	r1, r3, #23
 800248e:	d544      	bpl.n	800251a <HAL_RCCEx_PeriphCLKConfig+0xf6>
    if(ret == HAL_OK)
 8002490:	2d00      	cmp	r5, #0
 8002492:	d149      	bne.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x104>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002494:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002498:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800249c:	d014      	beq.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800249e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d011      	beq.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80024a4:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 80024a8:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 80024ac:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80024b0:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80024b4:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80024b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 80024bc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80024c0:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
        RCC->BDCR = tmpregister;
 80024c4:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80024c8:	07da      	lsls	r2, r3, #31
 80024ca:	d509      	bpl.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 80024cc:	f7fe fd18 	bl	8000f00 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024d0:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80024d4:	4680      	mov	r8, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 80024d6:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 80024da:	079b      	lsls	r3, r3, #30
 80024dc:	f140 80c2 	bpl.w	8002664 <HAL_RCCEx_PeriphCLKConfig+0x240>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024e0:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 80024e4:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80024e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024ea:	4313      	orrs	r3, r2
 80024ec:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
 80024f0:	e01a      	b.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x104>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80024f2:	4a6b      	ldr	r2, [pc, #428]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80024f4:	68d3      	ldr	r3, [r2, #12]
 80024f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024fa:	60d3      	str	r3, [r2, #12]
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80024fc:	4a68      	ldr	r2, [pc, #416]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80024fe:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8002500:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002504:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002508:	430b      	orrs	r3, r1
 800250a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 800250e:	2500      	movs	r5, #0
 8002510:	e79e      	b.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      ret = HAL_ERROR;
 8002512:	2501      	movs	r5, #1
 8002514:	e79c      	b.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8002516:	2700      	movs	r7, #0
 8002518:	e7ab      	b.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x4e>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800251a:	f7fe fcf1 	bl	8000f00 <HAL_GetTick>
 800251e:	eba0 0009 	sub.w	r0, r0, r9
 8002522:	2802      	cmp	r0, #2
 8002524:	d9b0      	bls.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x64>
        ret = HAL_TIMEOUT;
 8002526:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 8002528:	b11f      	cbz	r7, 8002532 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      __HAL_RCC_PWR_CLK_DISABLE();
 800252a:	6db3      	ldr	r3, [r6, #88]	; 0x58
 800252c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002530:	65b3      	str	r3, [r6, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002532:	6823      	ldr	r3, [r4, #0]
 8002534:	07df      	lsls	r7, r3, #31
 8002536:	d508      	bpl.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x126>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002538:	4959      	ldr	r1, [pc, #356]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800253a:	6a20      	ldr	r0, [r4, #32]
 800253c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002540:	f022 0203 	bic.w	r2, r2, #3
 8002544:	4302      	orrs	r2, r0
 8002546:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800254a:	079e      	lsls	r6, r3, #30
 800254c:	d508      	bpl.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800254e:	4954      	ldr	r1, [pc, #336]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002550:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002552:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002556:	f022 020c 	bic.w	r2, r2, #12
 800255a:	4302      	orrs	r2, r0
 800255c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002560:	0698      	lsls	r0, r3, #26
 8002562:	d508      	bpl.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0x152>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002564:	494e      	ldr	r1, [pc, #312]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002566:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002568:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800256c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002570:	4302      	orrs	r2, r0
 8002572:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002576:	0599      	lsls	r1, r3, #22
 8002578:	d508      	bpl.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x168>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800257a:	4949      	ldr	r1, [pc, #292]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800257c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800257e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002582:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8002586:	4302      	orrs	r2, r0
 8002588:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800258c:	055a      	lsls	r2, r3, #21
 800258e:	d508      	bpl.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002590:	4943      	ldr	r1, [pc, #268]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002592:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002594:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002598:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800259c:	4302      	orrs	r2, r0
 800259e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025a2:	065f      	lsls	r7, r3, #25
 80025a4:	d508      	bpl.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x194>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025a6:	493e      	ldr	r1, [pc, #248]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80025a8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80025aa:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80025ae:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80025b2:	4302      	orrs	r2, r0
 80025b4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80025b8:	05de      	lsls	r6, r3, #23
 80025ba:	d508      	bpl.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80025bc:	4938      	ldr	r1, [pc, #224]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80025be:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80025c0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80025c4:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80025c8:	4302      	orrs	r2, r0
 80025ca:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80025ce:	0498      	lsls	r0, r3, #18
 80025d0:	d50f      	bpl.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80025d2:	4a33      	ldr	r2, [pc, #204]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80025d4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80025d6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80025da:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80025de:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80025e0:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80025e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80025e8:	d144      	bne.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x250>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025ea:	68d3      	ldr	r3, [r2, #12]
 80025ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025f0:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80025f2:	6823      	ldr	r3, [r4, #0]
 80025f4:	0359      	lsls	r1, r3, #13
 80025f6:	d50f      	bpl.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80025f8:	4a29      	ldr	r2, [pc, #164]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80025fa:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80025fc:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002600:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002604:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002606:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800260a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800260e:	d13c      	bne.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x266>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002610:	68d3      	ldr	r3, [r2, #12]
 8002612:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002616:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002618:	6823      	ldr	r3, [r4, #0]
 800261a:	045a      	lsls	r2, r3, #17
 800261c:	d512      	bpl.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x220>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800261e:	4920      	ldr	r1, [pc, #128]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002620:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8002622:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002626:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800262a:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800262c:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002630:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002634:	d106      	bne.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x220>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002636:	2102      	movs	r1, #2
 8002638:	1d20      	adds	r0, r4, #4
 800263a:	f7ff fe67 	bl	800230c <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 800263e:	2800      	cmp	r0, #0
 8002640:	bf18      	it	ne
 8002642:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002644:	6823      	ldr	r3, [r4, #0]
 8002646:	041b      	lsls	r3, r3, #16
 8002648:	d508      	bpl.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x238>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800264a:	4a15      	ldr	r2, [pc, #84]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800264c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800264e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002652:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002656:	430b      	orrs	r3, r1
 8002658:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 800265c:	4628      	mov	r0, r5
 800265e:	b003      	add	sp, #12
 8002660:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002664:	f7fe fc4c 	bl	8000f00 <HAL_GetTick>
 8002668:	eba0 0008 	sub.w	r0, r0, r8
 800266c:	4548      	cmp	r0, r9
 800266e:	f67f af32 	bls.w	80024d6 <HAL_RCCEx_PeriphCLKConfig+0xb2>
 8002672:	e758      	b.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x102>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002674:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8002678:	d1bb      	bne.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800267a:	2101      	movs	r1, #1
 800267c:	1d20      	adds	r0, r4, #4
 800267e:	f7ff fe45 	bl	800230c <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 8002682:	2800      	cmp	r0, #0
 8002684:	bf18      	it	ne
 8002686:	4605      	movne	r5, r0
 8002688:	e7b3      	b.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800268a:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800268e:	d1c3      	bne.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002690:	2101      	movs	r1, #1
 8002692:	1d20      	adds	r0, r4, #4
 8002694:	f7ff fe3a 	bl	800230c <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002698:	2800      	cmp	r0, #0
 800269a:	bf18      	it	ne
 800269c:	4605      	movne	r5, r0
 800269e:	e7bb      	b.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
 80026a0:	40021000 	.word	0x40021000
 80026a4:	40007000 	.word	0x40007000

080026a8 <HAL_RCCEx_EnableMSIPLLMode>:
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80026a8:	4a02      	ldr	r2, [pc, #8]	; (80026b4 <HAL_RCCEx_EnableMSIPLLMode+0xc>)
 80026aa:	6813      	ldr	r3, [r2, #0]
 80026ac:	f043 0304 	orr.w	r3, r3, #4
 80026b0:	6013      	str	r3, [r2, #0]
 80026b2:	4770      	bx	lr
 80026b4:	40021000 	.word	0x40021000

080026b8 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80026b8:	6803      	ldr	r3, [r0, #0]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(htim))
 80026ba:	480a      	ldr	r0, [pc, #40]	; (80026e4 <HAL_TIM_Base_Start_IT+0x2c>)
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80026bc:	68da      	ldr	r2, [r3, #12]
 80026be:	f042 0201 	orr.w	r2, r2, #1
 80026c2:	60da      	str	r2, [r3, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(htim))
 80026c4:	6899      	ldr	r1, [r3, #8]
 80026c6:	4001      	ands	r1, r0
 80026c8:	2906      	cmp	r1, #6
 80026ca:	d008      	beq.n	80026de <HAL_TIM_Base_Start_IT+0x26>
 80026cc:	689a      	ldr	r2, [r3, #8]
 80026ce:	4002      	ands	r2, r0
 80026d0:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
  {
    __HAL_TIM_ENABLE(htim);
 80026d4:	bf1e      	ittt	ne
 80026d6:	681a      	ldrne	r2, [r3, #0]
 80026d8:	f042 0201 	orrne.w	r2, r2, #1
 80026dc:	601a      	strne	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 80026de:	2000      	movs	r0, #0
 80026e0:	4770      	bx	lr
 80026e2:	bf00      	nop
 80026e4:	00010007 	.word	0x00010007

080026e8 <HAL_TIM_OC_DelayElapsedCallback>:
 80026e8:	4770      	bx	lr

080026ea <HAL_TIM_IC_CaptureCallback>:
 80026ea:	4770      	bx	lr

080026ec <HAL_TIM_PWM_PulseFinishedCallback>:
 80026ec:	4770      	bx	lr

080026ee <HAL_TIM_TriggerCallback>:
 80026ee:	4770      	bx	lr

080026f0 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80026f0:	6803      	ldr	r3, [r0, #0]
 80026f2:	691a      	ldr	r2, [r3, #16]
 80026f4:	0791      	lsls	r1, r2, #30
{
 80026f6:	b510      	push	{r4, lr}
 80026f8:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80026fa:	d50f      	bpl.n	800271c <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80026fc:	68da      	ldr	r2, [r3, #12]
 80026fe:	0792      	lsls	r2, r2, #30
 8002700:	d50c      	bpl.n	800271c <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002702:	f06f 0202 	mvn.w	r2, #2
 8002706:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002708:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800270a:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800270c:	0799      	lsls	r1, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800270e:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002710:	f000 8085 	beq.w	800281e <HAL_TIM_IRQHandler+0x12e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002714:	f7ff ffe9 	bl	80026ea <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002718:	2300      	movs	r3, #0
 800271a:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800271c:	6823      	ldr	r3, [r4, #0]
 800271e:	691a      	ldr	r2, [r3, #16]
 8002720:	0752      	lsls	r2, r2, #29
 8002722:	d510      	bpl.n	8002746 <HAL_TIM_IRQHandler+0x56>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002724:	68da      	ldr	r2, [r3, #12]
 8002726:	0750      	lsls	r0, r2, #29
 8002728:	d50d      	bpl.n	8002746 <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800272a:	f06f 0204 	mvn.w	r2, #4
 800272e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002730:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002732:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002734:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002738:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800273a:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800273c:	d075      	beq.n	800282a <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 800273e:	f7ff ffd4 	bl	80026ea <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002742:	2300      	movs	r3, #0
 8002744:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002746:	6823      	ldr	r3, [r4, #0]
 8002748:	691a      	ldr	r2, [r3, #16]
 800274a:	0711      	lsls	r1, r2, #28
 800274c:	d50f      	bpl.n	800276e <HAL_TIM_IRQHandler+0x7e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800274e:	68da      	ldr	r2, [r3, #12]
 8002750:	0712      	lsls	r2, r2, #28
 8002752:	d50c      	bpl.n	800276e <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002754:	f06f 0208 	mvn.w	r2, #8
 8002758:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800275a:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800275c:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800275e:	079b      	lsls	r3, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002760:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002762:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002764:	d067      	beq.n	8002836 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8002766:	f7ff ffc0 	bl	80026ea <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800276a:	2300      	movs	r3, #0
 800276c:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800276e:	6823      	ldr	r3, [r4, #0]
 8002770:	691a      	ldr	r2, [r3, #16]
 8002772:	06d0      	lsls	r0, r2, #27
 8002774:	d510      	bpl.n	8002798 <HAL_TIM_IRQHandler+0xa8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002776:	68da      	ldr	r2, [r3, #12]
 8002778:	06d1      	lsls	r1, r2, #27
 800277a:	d50d      	bpl.n	8002798 <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800277c:	f06f 0210 	mvn.w	r2, #16
 8002780:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002782:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002784:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002786:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800278a:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800278c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800278e:	d058      	beq.n	8002842 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8002790:	f7ff ffab 	bl	80026ea <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002794:	2300      	movs	r3, #0
 8002796:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002798:	6823      	ldr	r3, [r4, #0]
 800279a:	691a      	ldr	r2, [r3, #16]
 800279c:	07d2      	lsls	r2, r2, #31
 800279e:	d508      	bpl.n	80027b2 <HAL_TIM_IRQHandler+0xc2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80027a0:	68da      	ldr	r2, [r3, #12]
 80027a2:	07d0      	lsls	r0, r2, #31
 80027a4:	d505      	bpl.n	80027b2 <HAL_TIM_IRQHandler+0xc2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80027a6:	f06f 0201 	mvn.w	r2, #1
 80027aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80027ac:	4620      	mov	r0, r4
 80027ae:	f000 fbdf 	bl	8002f70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80027b2:	6823      	ldr	r3, [r4, #0]
 80027b4:	691a      	ldr	r2, [r3, #16]
 80027b6:	0611      	lsls	r1, r2, #24
 80027b8:	d508      	bpl.n	80027cc <HAL_TIM_IRQHandler+0xdc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80027ba:	68da      	ldr	r2, [r3, #12]
 80027bc:	0612      	lsls	r2, r2, #24
 80027be:	d505      	bpl.n	80027cc <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80027c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80027c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80027c6:	4620      	mov	r0, r4
 80027c8:	f000 f96b 	bl	8002aa2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80027cc:	6823      	ldr	r3, [r4, #0]
 80027ce:	691a      	ldr	r2, [r3, #16]
 80027d0:	05d0      	lsls	r0, r2, #23
 80027d2:	d508      	bpl.n	80027e6 <HAL_TIM_IRQHandler+0xf6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80027d4:	68da      	ldr	r2, [r3, #12]
 80027d6:	0611      	lsls	r1, r2, #24
 80027d8:	d505      	bpl.n	80027e6 <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80027da:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80027de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80027e0:	4620      	mov	r0, r4
 80027e2:	f000 f95f 	bl	8002aa4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80027e6:	6823      	ldr	r3, [r4, #0]
 80027e8:	691a      	ldr	r2, [r3, #16]
 80027ea:	0652      	lsls	r2, r2, #25
 80027ec:	d508      	bpl.n	8002800 <HAL_TIM_IRQHandler+0x110>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80027ee:	68da      	ldr	r2, [r3, #12]
 80027f0:	0650      	lsls	r0, r2, #25
 80027f2:	d505      	bpl.n	8002800 <HAL_TIM_IRQHandler+0x110>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80027f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80027f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80027fa:	4620      	mov	r0, r4
 80027fc:	f7ff ff77 	bl	80026ee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002800:	6823      	ldr	r3, [r4, #0]
 8002802:	691a      	ldr	r2, [r3, #16]
 8002804:	0691      	lsls	r1, r2, #26
 8002806:	d522      	bpl.n	800284e <HAL_TIM_IRQHandler+0x15e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002808:	68da      	ldr	r2, [r3, #12]
 800280a:	0692      	lsls	r2, r2, #26
 800280c:	d51f      	bpl.n	800284e <HAL_TIM_IRQHandler+0x15e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800280e:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutationCallback(htim);
 8002812:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002814:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002816:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 800281a:	f000 b941 	b.w	8002aa0 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800281e:	f7ff ff63 	bl	80026e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002822:	4620      	mov	r0, r4
 8002824:	f7ff ff62 	bl	80026ec <HAL_TIM_PWM_PulseFinishedCallback>
 8002828:	e776      	b.n	8002718 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800282a:	f7ff ff5d 	bl	80026e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800282e:	4620      	mov	r0, r4
 8002830:	f7ff ff5c 	bl	80026ec <HAL_TIM_PWM_PulseFinishedCallback>
 8002834:	e785      	b.n	8002742 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002836:	f7ff ff57 	bl	80026e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800283a:	4620      	mov	r0, r4
 800283c:	f7ff ff56 	bl	80026ec <HAL_TIM_PWM_PulseFinishedCallback>
 8002840:	e793      	b.n	800276a <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002842:	f7ff ff51 	bl	80026e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002846:	4620      	mov	r0, r4
 8002848:	f7ff ff50 	bl	80026ec <HAL_TIM_PWM_PulseFinishedCallback>
 800284c:	e7a2      	b.n	8002794 <HAL_TIM_IRQHandler+0xa4>
 800284e:	bd10      	pop	{r4, pc}

08002850 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002850:	4a1a      	ldr	r2, [pc, #104]	; (80028bc <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8002852:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002854:	4290      	cmp	r0, r2
{
 8002856:	b510      	push	{r4, lr}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002858:	d002      	beq.n	8002860 <TIM_Base_SetConfig+0x10>
 800285a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800285e:	d109      	bne.n	8002874 <TIM_Base_SetConfig+0x24>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8002860:	684c      	ldr	r4, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002862:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002866:	4290      	cmp	r0, r2
    tmpcr1 |= Structure->CounterMode;
 8002868:	ea43 0304 	orr.w	r3, r3, r4
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800286c:	d009      	beq.n	8002882 <TIM_Base_SetConfig+0x32>
 800286e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002872:	d006      	beq.n	8002882 <TIM_Base_SetConfig+0x32>
 8002874:	4a12      	ldr	r2, [pc, #72]	; (80028c0 <TIM_Base_SetConfig+0x70>)
 8002876:	4290      	cmp	r0, r2
 8002878:	d003      	beq.n	8002882 <TIM_Base_SetConfig+0x32>
 800287a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800287e:	4290      	cmp	r0, r2
 8002880:	d103      	bne.n	800288a <TIM_Base_SetConfig+0x3a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002882:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002884:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002888:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800288a:	694a      	ldr	r2, [r1, #20]
 800288c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002890:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8002892:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002894:	688b      	ldr	r3, [r1, #8]
 8002896:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002898:	680b      	ldr	r3, [r1, #0]
 800289a:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800289c:	4b07      	ldr	r3, [pc, #28]	; (80028bc <TIM_Base_SetConfig+0x6c>)
 800289e:	4298      	cmp	r0, r3
 80028a0:	d007      	beq.n	80028b2 <TIM_Base_SetConfig+0x62>
 80028a2:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 80028a6:	4298      	cmp	r0, r3
 80028a8:	d003      	beq.n	80028b2 <TIM_Base_SetConfig+0x62>
 80028aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80028ae:	4298      	cmp	r0, r3
 80028b0:	d101      	bne.n	80028b6 <TIM_Base_SetConfig+0x66>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80028b2:	690b      	ldr	r3, [r1, #16]
 80028b4:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80028b6:	2301      	movs	r3, #1
 80028b8:	6143      	str	r3, [r0, #20]
 80028ba:	bd10      	pop	{r4, pc}
 80028bc:	40012c00 	.word	0x40012c00
 80028c0:	40014000 	.word	0x40014000

080028c4 <HAL_TIM_Base_Init>:
{
 80028c4:	b510      	push	{r4, lr}
  if (htim == NULL)
 80028c6:	4604      	mov	r4, r0
 80028c8:	b1a0      	cbz	r0, 80028f4 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 80028ca:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80028ce:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80028d2:	b91b      	cbnz	r3, 80028dc <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80028d4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80028d8:	f000 fdb4 	bl	8003444 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80028dc:	2302      	movs	r3, #2
 80028de:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028e2:	6820      	ldr	r0, [r4, #0]
 80028e4:	1d21      	adds	r1, r4, #4
 80028e6:	f7ff ffb3 	bl	8002850 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80028ea:	2301      	movs	r3, #1
 80028ec:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80028f0:	2000      	movs	r0, #0
 80028f2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80028f4:	2001      	movs	r0, #1
}
 80028f6:	bd10      	pop	{r4, pc}

080028f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80028f8:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80028fa:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80028fc:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028fe:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002902:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8002906:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002908:	6083      	str	r3, [r0, #8]
 800290a:	bd10      	pop	{r4, pc}

0800290c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800290c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002910:	2b01      	cmp	r3, #1
{
 8002912:	b570      	push	{r4, r5, r6, lr}
 8002914:	4604      	mov	r4, r0
 8002916:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 800291a:	d017      	beq.n	800294c <HAL_TIM_ConfigClockSource+0x40>
  htim->State = HAL_TIM_STATE_BUSY;
 800291c:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8002920:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8002922:	2301      	movs	r3, #1
 8002924:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8002928:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800292a:	4b48      	ldr	r3, [pc, #288]	; (8002a4c <HAL_TIM_ConfigClockSource+0x140>)
 800292c:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 800292e:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8002930:	680b      	ldr	r3, [r1, #0]
 8002932:	2b40      	cmp	r3, #64	; 0x40
 8002934:	d072      	beq.n	8002a1c <HAL_TIM_ConfigClockSource+0x110>
 8002936:	d815      	bhi.n	8002964 <HAL_TIM_ConfigClockSource+0x58>
 8002938:	2b10      	cmp	r3, #16
 800293a:	d00c      	beq.n	8002956 <HAL_TIM_ConfigClockSource+0x4a>
 800293c:	d807      	bhi.n	800294e <HAL_TIM_ConfigClockSource+0x42>
 800293e:	b153      	cbz	r3, 8002956 <HAL_TIM_ConfigClockSource+0x4a>
  htim->State = HAL_TIM_STATE_READY;
 8002940:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8002942:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002944:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002948:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800294c:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 800294e:	2b20      	cmp	r3, #32
 8002950:	d001      	beq.n	8002956 <HAL_TIM_ConfigClockSource+0x4a>
 8002952:	2b30      	cmp	r3, #48	; 0x30
 8002954:	d1f4      	bne.n	8002940 <HAL_TIM_ConfigClockSource+0x34>
  tmpsmcr = TIMx->SMCR;
 8002956:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002958:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 800295c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002960:	4313      	orrs	r3, r2
 8002962:	e033      	b.n	80029cc <HAL_TIM_ConfigClockSource+0xc0>
  switch (sClockSourceConfig->ClockSource)
 8002964:	2b70      	cmp	r3, #112	; 0x70
 8002966:	d033      	beq.n	80029d0 <HAL_TIM_ConfigClockSource+0xc4>
 8002968:	d81b      	bhi.n	80029a2 <HAL_TIM_ConfigClockSource+0x96>
 800296a:	2b50      	cmp	r3, #80	; 0x50
 800296c:	d03f      	beq.n	80029ee <HAL_TIM_ConfigClockSource+0xe2>
 800296e:	2b60      	cmp	r3, #96	; 0x60
 8002970:	d1e6      	bne.n	8002940 <HAL_TIM_ConfigClockSource+0x34>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002972:	684d      	ldr	r5, [r1, #4]
 8002974:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002976:	6a01      	ldr	r1, [r0, #32]
 8002978:	f021 0110 	bic.w	r1, r1, #16
 800297c:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800297e:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8002980:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002982:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002986:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800298a:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800298e:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8002992:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002994:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8002996:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002998:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800299c:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 80029a0:	e014      	b.n	80029cc <HAL_TIM_ConfigClockSource+0xc0>
  switch (sClockSourceConfig->ClockSource)
 80029a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029a6:	d00c      	beq.n	80029c2 <HAL_TIM_ConfigClockSource+0xb6>
 80029a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029ac:	d1c8      	bne.n	8002940 <HAL_TIM_ConfigClockSource+0x34>
      TIM_ETR_SetConfig(htim->Instance,
 80029ae:	68cb      	ldr	r3, [r1, #12]
 80029b0:	684a      	ldr	r2, [r1, #4]
 80029b2:	6889      	ldr	r1, [r1, #8]
 80029b4:	f7ff ffa0 	bl	80028f8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80029b8:	6822      	ldr	r2, [r4, #0]
 80029ba:	6893      	ldr	r3, [r2, #8]
 80029bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029c0:	e013      	b.n	80029ea <HAL_TIM_ConfigClockSource+0xde>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80029c2:	6883      	ldr	r3, [r0, #8]
 80029c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029c8:	f023 0307 	bic.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 80029cc:	6083      	str	r3, [r0, #8]
 80029ce:	e7b7      	b.n	8002940 <HAL_TIM_ConfigClockSource+0x34>
      TIM_ETR_SetConfig(htim->Instance,
 80029d0:	68cb      	ldr	r3, [r1, #12]
 80029d2:	684a      	ldr	r2, [r1, #4]
 80029d4:	6889      	ldr	r1, [r1, #8]
 80029d6:	f7ff ff8f 	bl	80028f8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80029da:	6822      	ldr	r2, [r4, #0]
 80029dc:	6893      	ldr	r3, [r2, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80029de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029e2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80029e6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80029ea:	6093      	str	r3, [r2, #8]
      break;
 80029ec:	e7a8      	b.n	8002940 <HAL_TIM_ConfigClockSource+0x34>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80029ee:	684a      	ldr	r2, [r1, #4]
 80029f0:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80029f2:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029f4:	6a05      	ldr	r5, [r0, #32]
 80029f6:	f025 0501 	bic.w	r5, r5, #1
 80029fa:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029fc:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80029fe:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a06:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8002a0a:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8002a0c:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8002a0e:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8002a10:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a16:	f043 0357 	orr.w	r3, r3, #87	; 0x57
 8002a1a:	e7d7      	b.n	80029cc <HAL_TIM_ConfigClockSource+0xc0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a1c:	684a      	ldr	r2, [r1, #4]
 8002a1e:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8002a20:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a22:	6a05      	ldr	r5, [r0, #32]
 8002a24:	f025 0501 	bic.w	r5, r5, #1
 8002a28:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a2a:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a2c:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a30:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a34:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8002a38:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8002a3a:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8002a3c:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8002a3e:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a44:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 8002a48:	e7c0      	b.n	80029cc <HAL_TIM_ConfigClockSource+0xc0>
 8002a4a:	bf00      	nop
 8002a4c:	fffe0088 	.word	0xfffe0088

08002a50 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a50:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002a54:	2b01      	cmp	r3, #1
{
 8002a56:	b530      	push	{r4, r5, lr}
 8002a58:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8002a5c:	d01b      	beq.n	8002a96 <HAL_TIMEx_MasterConfigSynchronization+0x46>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a5e:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002a60:	4d0e      	ldr	r5, [pc, #56]	; (8002a9c <HAL_TIMEx_MasterConfigSynchronization+0x4c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8002a62:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8002a66:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8002a68:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002a6a:	42aa      	cmp	r2, r5
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002a6c:	bf02      	ittt	eq
 8002a6e:	684d      	ldreq	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002a70:	f423 0370 	biceq.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002a74:	432b      	orreq	r3, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a76:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a78:	6889      	ldr	r1, [r1, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a7e:	432b      	orrs	r3, r5
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002a80:	f024 0480 	bic.w	r4, r4, #128	; 0x80

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a84:	6053      	str	r3, [r2, #4]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a86:	4321      	orrs	r1, r4

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a88:	2301      	movs	r3, #1
  htim->Instance->SMCR = tmpsmcr;
 8002a8a:	6091      	str	r1, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8002a8c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a90:	2300      	movs	r3, #0
 8002a92:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8002a96:	4618      	mov	r0, r3

  return HAL_OK;
}
 8002a98:	bd30      	pop	{r4, r5, pc}
 8002a9a:	bf00      	nop
 8002a9c:	40012c00 	.word	0x40012c00

08002aa0 <HAL_TIMEx_CommutationCallback>:
 8002aa0:	4770      	bx	lr

08002aa2 <HAL_TIMEx_BreakCallback>:
 8002aa2:	4770      	bx	lr

08002aa4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002aa4:	4770      	bx	lr
	...

08002aa8 <UART_SetConfig>:
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8002aa8:	6802      	ldr	r2, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002aaa:	69c1      	ldr	r1, [r0, #28]
{
 8002aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002aae:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ab0:	6883      	ldr	r3, [r0, #8]
 8002ab2:	6900      	ldr	r0, [r0, #16]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002ab4:	6815      	ldr	r5, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ab6:	4303      	orrs	r3, r0
 8002ab8:	6960      	ldr	r0, [r4, #20]
 8002aba:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002abc:	4882      	ldr	r0, [pc, #520]	; (8002cc8 <UART_SetConfig+0x220>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002abe:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002ac0:	4028      	ands	r0, r5
 8002ac2:	4303      	orrs	r3, r0
 8002ac4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ac6:	6853      	ldr	r3, [r2, #4]
 8002ac8:	68e0      	ldr	r0, [r4, #12]
 8002aca:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002ace:	4303      	orrs	r3, r0
 8002ad0:	6053      	str	r3, [r2, #4]
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002ad2:	4b7e      	ldr	r3, [pc, #504]	; (8002ccc <UART_SetConfig+0x224>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002ad4:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002ad6:	429a      	cmp	r2, r3
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002ad8:	bf1c      	itt	ne
 8002ada:	6a23      	ldrne	r3, [r4, #32]
 8002adc:	4318      	orrne	r0, r3
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002ade:	6893      	ldr	r3, [r2, #8]
 8002ae0:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002ae4:	4303      	orrs	r3, r0
 8002ae6:	6093      	str	r3, [r2, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ae8:	4b79      	ldr	r3, [pc, #484]	; (8002cd0 <UART_SetConfig+0x228>)
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d114      	bne.n	8002b18 <UART_SetConfig+0x70>
 8002aee:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8002af2:	4a78      	ldr	r2, [pc, #480]	; (8002cd4 <UART_SetConfig+0x22c>)
 8002af4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002af8:	f003 0303 	and.w	r3, r3, #3
        }
      }  /*   if ( (tmpreg < (3 * huart->Init.BaudRate) ) || (tmpreg > (4096 * huart->Init.BaudRate) )) */
    } /* if (tmpreg != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002afc:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002b00:	5cd3      	ldrb	r3, [r2, r3]
 8002b02:	f040 80aa 	bne.w	8002c5a <UART_SetConfig+0x1b2>
  {
    switch (clocksource)
 8002b06:	2b08      	cmp	r3, #8
 8002b08:	d820      	bhi.n	8002b4c <UART_SetConfig+0xa4>
 8002b0a:	e8df f003 	tbb	[pc, r3]
 8002b0e:	8f77      	.short	0x8f77
 8002b10:	1f9b1f92 	.word	0x1f9b1f92
 8002b14:	1f1f      	.short	0x1f1f
 8002b16:	9e          	.byte	0x9e
 8002b17:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b18:	4b6f      	ldr	r3, [pc, #444]	; (8002cd8 <UART_SetConfig+0x230>)
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d107      	bne.n	8002b2e <UART_SetConfig+0x86>
 8002b1e:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8002b22:	4a6e      	ldr	r2, [pc, #440]	; (8002cdc <UART_SetConfig+0x234>)
 8002b24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b28:	f003 030c 	and.w	r3, r3, #12
 8002b2c:	e7e6      	b.n	8002afc <UART_SetConfig+0x54>
 8002b2e:	4b67      	ldr	r3, [pc, #412]	; (8002ccc <UART_SetConfig+0x224>)
 8002b30:	429a      	cmp	r2, r3
 8002b32:	f040 80c2 	bne.w	8002cba <UART_SetConfig+0x212>
 8002b36:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 8002b3a:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 8002b3e:	f405 6540 	and.w	r5, r5, #3072	; 0xc00
 8002b42:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8002b46:	d02a      	beq.n	8002b9e <UART_SetConfig+0xf6>
 8002b48:	d806      	bhi.n	8002b58 <UART_SetConfig+0xb0>
 8002b4a:	b315      	cbz	r5, 8002b92 <UART_SetConfig+0xea>
        ret = HAL_ERROR;
 8002b4c:	2201      	movs	r2, #1
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8002b52:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 8002b54:	4610      	mov	r0, r2
 8002b56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b58:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8002b5c:	d006      	beq.n	8002b6c <UART_SetConfig+0xc4>
 8002b5e:	f5b5 6f40 	cmp.w	r5, #3072	; 0xc00
 8002b62:	d1f3      	bne.n	8002b4c <UART_SetConfig+0xa4>
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8002b64:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b68:	2508      	movs	r5, #8
 8002b6a:	e001      	b.n	8002b70 <UART_SetConfig+0xc8>
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8002b6c:	485c      	ldr	r0, [pc, #368]	; (8002ce0 <UART_SetConfig+0x238>)
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b6e:	2502      	movs	r5, #2
      if ((lpuart_ker_ck_pres < (3 * huart->Init.BaudRate)) ||
 8002b70:	6862      	ldr	r2, [r4, #4]
 8002b72:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8002b76:	4283      	cmp	r3, r0
 8002b78:	d8e8      	bhi.n	8002b4c <UART_SetConfig+0xa4>
 8002b7a:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8002b7e:	d8e5      	bhi.n	8002b4c <UART_SetConfig+0xa4>
        switch (clocksource)
 8002b80:	2d08      	cmp	r5, #8
 8002b82:	d838      	bhi.n	8002bf6 <UART_SetConfig+0x14e>
 8002b84:	e8df f005 	tbb	[pc, r5]
 8002b88:	3726370f 	.word	0x3726370f
 8002b8c:	3737372e 	.word	0x3737372e
 8002b90:	31          	.byte	0x31
 8002b91:	00          	.byte	0x00
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8002b92:	f7ff fb9b 	bl	80022cc <HAL_RCC_GetPCLK1Freq>
    if (lpuart_ker_ck_pres != 0U)
 8002b96:	2800      	cmp	r0, #0
 8002b98:	d1ea      	bne.n	8002b70 <UART_SetConfig+0xc8>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	e7d7      	b.n	8002b4e <UART_SetConfig+0xa6>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8002b9e:	f7ff f837 	bl	8001c10 <HAL_RCC_GetSysClockFreq>
        break;
 8002ba2:	2504      	movs	r5, #4
 8002ba4:	e7f7      	b.n	8002b96 <UART_SetConfig+0xee>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002ba6:	f7ff fb91 	bl	80022cc <HAL_RCC_GetPCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002baa:	6862      	ldr	r2, [r4, #4]
 8002bac:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002bb0:	0856      	lsrs	r6, r2, #1
 8002bb2:	2700      	movs	r7, #0
 8002bb4:	fbe1 6700 	umlal	r6, r7, r1, r0
 8002bb8:	2300      	movs	r3, #0
 8002bba:	4630      	mov	r0, r6
 8002bbc:	4639      	mov	r1, r7
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8002bbe:	f7fd ffef 	bl	8000ba0 <__aeabi_uldivmod>
            break;
 8002bc2:	2200      	movs	r2, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002bc4:	4b47      	ldr	r3, [pc, #284]	; (8002ce4 <UART_SetConfig+0x23c>)
 8002bc6:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8002bca:	4299      	cmp	r1, r3
 8002bcc:	d8be      	bhi.n	8002b4c <UART_SetConfig+0xa4>
          huart->Instance->BRR = usartdiv;
 8002bce:	6823      	ldr	r3, [r4, #0]
 8002bd0:	60d8      	str	r0, [r3, #12]
 8002bd2:	e7bc      	b.n	8002b4e <UART_SetConfig+0xa6>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8002bd4:	4844      	ldr	r0, [pc, #272]	; (8002ce8 <UART_SetConfig+0x240>)
 8002bd6:	0855      	lsrs	r5, r2, #1
 8002bd8:	2300      	movs	r3, #0
 8002bda:	2100      	movs	r1, #0
 8002bdc:	1940      	adds	r0, r0, r5
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8002bde:	f141 0100 	adc.w	r1, r1, #0
 8002be2:	e7ec      	b.n	8002bbe <UART_SetConfig+0x116>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002be4:	f7ff f814 	bl	8001c10 <HAL_RCC_GetSysClockFreq>
 8002be8:	e7df      	b.n	8002baa <UART_SetConfig+0x102>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8002bea:	0850      	lsrs	r0, r2, #1
 8002bec:	2100      	movs	r1, #0
 8002bee:	2300      	movs	r3, #0
 8002bf0:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 8002bf4:	e7f3      	b.n	8002bde <UART_SetConfig+0x136>
            ret = HAL_ERROR;
 8002bf6:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8002bf8:	2000      	movs	r0, #0
 8002bfa:	e7e3      	b.n	8002bc4 <UART_SetConfig+0x11c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002bfc:	f7ff fb66 	bl	80022cc <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002c00:	6861      	ldr	r1, [r4, #4]
 8002c02:	084a      	lsrs	r2, r1, #1
 8002c04:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8002c08:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c0c:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c0e:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c10:	f1a3 0010 	sub.w	r0, r3, #16
 8002c14:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8002c18:	4288      	cmp	r0, r1
 8002c1a:	d897      	bhi.n	8002b4c <UART_SetConfig+0xa4>
      brrtemp = usartdiv & 0xFFF0U;
 8002c1c:	f023 010f 	bic.w	r1, r3, #15
      huart->Instance->BRR = brrtemp;
 8002c20:	6820      	ldr	r0, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002c22:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 8002c26:	430b      	orrs	r3, r1
 8002c28:	60c3      	str	r3, [r0, #12]
 8002c2a:	e790      	b.n	8002b4e <UART_SetConfig+0xa6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002c2c:	f7ff fb5e 	bl	80022ec <HAL_RCC_GetPCLK2Freq>
 8002c30:	e7e6      	b.n	8002c00 <UART_SetConfig+0x158>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002c32:	6860      	ldr	r0, [r4, #4]
 8002c34:	0843      	lsrs	r3, r0, #1
 8002c36:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8002c3a:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002c3e:	fbb3 f3f0 	udiv	r3, r3, r0
 8002c42:	e7e3      	b.n	8002c0c <UART_SetConfig+0x164>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002c44:	f7fe ffe4 	bl	8001c10 <HAL_RCC_GetSysClockFreq>
 8002c48:	e7da      	b.n	8002c00 <UART_SetConfig+0x158>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002c4a:	6860      	ldr	r0, [r4, #4]
 8002c4c:	0843      	lsrs	r3, r0, #1
 8002c4e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8002c52:	e7f4      	b.n	8002c3e <UART_SetConfig+0x196>
        ret = HAL_ERROR;
 8002c54:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8002c56:	2300      	movs	r3, #0
 8002c58:	e7da      	b.n	8002c10 <UART_SetConfig+0x168>
    switch (clocksource)
 8002c5a:	2b08      	cmp	r3, #8
 8002c5c:	d830      	bhi.n	8002cc0 <UART_SetConfig+0x218>
 8002c5e:	e8df f003 	tbb	[pc, r3]
 8002c62:	1805      	.short	0x1805
 8002c64:	2f242f1b 	.word	0x2f242f1b
 8002c68:	2f2f      	.short	0x2f2f
 8002c6a:	27          	.byte	0x27
 8002c6b:	00          	.byte	0x00
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002c6c:	f7ff fb2e 	bl	80022cc <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002c70:	6862      	ldr	r2, [r4, #4]
 8002c72:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8002c76:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c7a:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c7c:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c7e:	f1a3 0010 	sub.w	r0, r3, #16
 8002c82:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8002c86:	4288      	cmp	r0, r1
 8002c88:	f63f af60 	bhi.w	8002b4c <UART_SetConfig+0xa4>
      huart->Instance->BRR = usartdiv;
 8002c8c:	6821      	ldr	r1, [r4, #0]
 8002c8e:	60cb      	str	r3, [r1, #12]
 8002c90:	e75d      	b.n	8002b4e <UART_SetConfig+0xa6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002c92:	f7ff fb2b 	bl	80022ec <HAL_RCC_GetPCLK2Freq>
 8002c96:	e7eb      	b.n	8002c70 <UART_SetConfig+0x1c8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002c98:	6860      	ldr	r0, [r4, #4]
 8002c9a:	0843      	lsrs	r3, r0, #1
 8002c9c:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8002ca0:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002ca4:	fbb3 f3f0 	udiv	r3, r3, r0
 8002ca8:	e7e7      	b.n	8002c7a <UART_SetConfig+0x1d2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002caa:	f7fe ffb1 	bl	8001c10 <HAL_RCC_GetSysClockFreq>
 8002cae:	e7df      	b.n	8002c70 <UART_SetConfig+0x1c8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002cb0:	6860      	ldr	r0, [r4, #4]
 8002cb2:	0843      	lsrs	r3, r0, #1
 8002cb4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002cb8:	e7f4      	b.n	8002ca4 <UART_SetConfig+0x1fc>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002cba:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002cbe:	d0c9      	beq.n	8002c54 <UART_SetConfig+0x1ac>
        ret = HAL_ERROR;
 8002cc0:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	e7db      	b.n	8002c7e <UART_SetConfig+0x1d6>
 8002cc6:	bf00      	nop
 8002cc8:	efff69f3 	.word	0xefff69f3
 8002ccc:	40008000 	.word	0x40008000
 8002cd0:	40013800 	.word	0x40013800
 8002cd4:	08007150 	.word	0x08007150
 8002cd8:	40004400 	.word	0x40004400
 8002cdc:	08007154 	.word	0x08007154
 8002ce0:	00f42400 	.word	0x00f42400
 8002ce4:	000ffcff 	.word	0x000ffcff
 8002ce8:	f4240000 	.word	0xf4240000

08002cec <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002cec:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002cee:	07da      	lsls	r2, r3, #31
{
 8002cf0:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002cf2:	d506      	bpl.n	8002d02 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002cf4:	6801      	ldr	r1, [r0, #0]
 8002cf6:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8002cf8:	684a      	ldr	r2, [r1, #4]
 8002cfa:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002cfe:	4322      	orrs	r2, r4
 8002d00:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002d02:	079c      	lsls	r4, r3, #30
 8002d04:	d506      	bpl.n	8002d14 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002d06:	6801      	ldr	r1, [r0, #0]
 8002d08:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8002d0a:	684a      	ldr	r2, [r1, #4]
 8002d0c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002d10:	4322      	orrs	r2, r4
 8002d12:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002d14:	0759      	lsls	r1, r3, #29
 8002d16:	d506      	bpl.n	8002d26 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002d18:	6801      	ldr	r1, [r0, #0]
 8002d1a:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8002d1c:	684a      	ldr	r2, [r1, #4]
 8002d1e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002d22:	4322      	orrs	r2, r4
 8002d24:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002d26:	071a      	lsls	r2, r3, #28
 8002d28:	d506      	bpl.n	8002d38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002d2a:	6801      	ldr	r1, [r0, #0]
 8002d2c:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8002d2e:	684a      	ldr	r2, [r1, #4]
 8002d30:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d34:	4322      	orrs	r2, r4
 8002d36:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002d38:	06dc      	lsls	r4, r3, #27
 8002d3a:	d506      	bpl.n	8002d4a <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002d3c:	6801      	ldr	r1, [r0, #0]
 8002d3e:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8002d40:	688a      	ldr	r2, [r1, #8]
 8002d42:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002d46:	4322      	orrs	r2, r4
 8002d48:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002d4a:	0699      	lsls	r1, r3, #26
 8002d4c:	d506      	bpl.n	8002d5c <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002d4e:	6801      	ldr	r1, [r0, #0]
 8002d50:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8002d52:	688a      	ldr	r2, [r1, #8]
 8002d54:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d58:	4322      	orrs	r2, r4
 8002d5a:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002d5c:	065a      	lsls	r2, r3, #25
 8002d5e:	d50f      	bpl.n	8002d80 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002d60:	6801      	ldr	r1, [r0, #0]
 8002d62:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002d64:	684a      	ldr	r2, [r1, #4]
 8002d66:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8002d6a:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002d6c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002d70:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002d72:	d105      	bne.n	8002d80 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002d74:	684a      	ldr	r2, [r1, #4]
 8002d76:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002d78:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8002d7c:	4322      	orrs	r2, r4
 8002d7e:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002d80:	061b      	lsls	r3, r3, #24
 8002d82:	d506      	bpl.n	8002d92 <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002d84:	6802      	ldr	r2, [r0, #0]
 8002d86:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002d88:	6853      	ldr	r3, [r2, #4]
 8002d8a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002d8e:	430b      	orrs	r3, r1
 8002d90:	6053      	str	r3, [r2, #4]
 8002d92:	bd10      	pop	{r4, pc}

08002d94 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002d94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d98:	9d06      	ldr	r5, [sp, #24]
 8002d9a:	4604      	mov	r4, r0
 8002d9c:	460f      	mov	r7, r1
 8002d9e:	4616      	mov	r6, r2
 8002da0:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002da2:	6821      	ldr	r1, [r4, #0]
 8002da4:	69ca      	ldr	r2, [r1, #28]
 8002da6:	ea37 0302 	bics.w	r3, r7, r2
 8002daa:	bf0c      	ite	eq
 8002dac:	2201      	moveq	r2, #1
 8002dae:	2200      	movne	r2, #0
 8002db0:	42b2      	cmp	r2, r6
 8002db2:	d002      	beq.n	8002dba <UART_WaitOnFlagUntilTimeout+0x26>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8002db4:	2000      	movs	r0, #0
}
 8002db6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8002dba:	1c6b      	adds	r3, r5, #1
 8002dbc:	d0f2      	beq.n	8002da4 <UART_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002dbe:	b99d      	cbnz	r5, 8002de8 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002dc0:	6823      	ldr	r3, [r4, #0]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002dc8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dca:	689a      	ldr	r2, [r3, #8]
 8002dcc:	f022 0201 	bic.w	r2, r2, #1
 8002dd0:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8002dd2:	2320      	movs	r3, #32
 8002dd4:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
        huart->RxState = HAL_UART_STATE_READY;
 8002dd8:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
        __HAL_UNLOCK(huart);
 8002ddc:	2300      	movs	r3, #0
 8002dde:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
 8002de2:	2003      	movs	r0, #3
 8002de4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002de8:	f7fe f88a 	bl	8000f00 <HAL_GetTick>
 8002dec:	eba0 0008 	sub.w	r0, r0, r8
 8002df0:	4285      	cmp	r5, r0
 8002df2:	d2d6      	bcs.n	8002da2 <UART_WaitOnFlagUntilTimeout+0xe>
 8002df4:	e7e4      	b.n	8002dc0 <UART_WaitOnFlagUntilTimeout+0x2c>

08002df6 <HAL_UART_Transmit>:
{
 8002df6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002dfa:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8002dfc:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 8002e00:	2b20      	cmp	r3, #32
{
 8002e02:	4604      	mov	r4, r0
 8002e04:	460d      	mov	r5, r1
 8002e06:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8002e08:	d14a      	bne.n	8002ea0 <HAL_UART_Transmit+0xaa>
    if ((pData == NULL) || (Size == 0U))
 8002e0a:	2900      	cmp	r1, #0
 8002e0c:	d046      	beq.n	8002e9c <HAL_UART_Transmit+0xa6>
 8002e0e:	2a00      	cmp	r2, #0
 8002e10:	d044      	beq.n	8002e9c <HAL_UART_Transmit+0xa6>
    __HAL_LOCK(huart);
 8002e12:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d042      	beq.n	8002ea0 <HAL_UART_Transmit+0xaa>
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e20:	2300      	movs	r3, #0
 8002e22:	6743      	str	r3, [r0, #116]	; 0x74
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e24:	2321      	movs	r3, #33	; 0x21
 8002e26:	f880 3071 	strb.w	r3, [r0, #113]	; 0x71
    tickstart = HAL_GetTick();
 8002e2a:	f7fe f869 	bl	8000f00 <HAL_GetTick>
    huart->TxXferSize  = Size;
 8002e2e:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    tickstart = HAL_GetTick();
 8002e32:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8002e34:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002e38:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e3c:	9700      	str	r7, [sp, #0]
    while (huart->TxXferCount > 0U)
 8002e3e:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e40:	4633      	mov	r3, r6
    while (huart->TxXferCount > 0U)
 8002e42:	b952      	cbnz	r2, 8002e5a <HAL_UART_Transmit+0x64>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e44:	2140      	movs	r1, #64	; 0x40
 8002e46:	4620      	mov	r0, r4
 8002e48:	f7ff ffa4 	bl	8002d94 <UART_WaitOnFlagUntilTimeout>
 8002e4c:	b958      	cbnz	r0, 8002e66 <HAL_UART_Transmit+0x70>
    huart->gState = HAL_UART_STATE_READY;
 8002e4e:	2320      	movs	r3, #32
 8002e50:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
    __HAL_UNLOCK(huart);
 8002e54:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
    return HAL_OK;
 8002e58:	e006      	b.n	8002e68 <HAL_UART_Transmit+0x72>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	2180      	movs	r1, #128	; 0x80
 8002e5e:	4620      	mov	r0, r4
 8002e60:	f7ff ff98 	bl	8002d94 <UART_WaitOnFlagUntilTimeout>
 8002e64:	b118      	cbz	r0, 8002e6e <HAL_UART_Transmit+0x78>
        return HAL_TIMEOUT;
 8002e66:	2003      	movs	r0, #3
}
 8002e68:	b002      	add	sp, #8
 8002e6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e6e:	68a3      	ldr	r3, [r4, #8]
 8002e70:	6822      	ldr	r2, [r4, #0]
 8002e72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e76:	d10d      	bne.n	8002e94 <HAL_UART_Transmit+0x9e>
 8002e78:	6923      	ldr	r3, [r4, #16]
 8002e7a:	b95b      	cbnz	r3, 8002e94 <HAL_UART_Transmit+0x9e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8002e7c:	f835 3b02 	ldrh.w	r3, [r5], #2
 8002e80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e84:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8002e86:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8002e8a:	3b01      	subs	r3, #1
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8002e92:	e7d1      	b.n	8002e38 <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8002e94:	782b      	ldrb	r3, [r5, #0]
 8002e96:	8513      	strh	r3, [r2, #40]	; 0x28
 8002e98:	3501      	adds	r5, #1
 8002e9a:	e7f4      	b.n	8002e86 <HAL_UART_Transmit+0x90>
      return  HAL_ERROR;
 8002e9c:	2001      	movs	r0, #1
 8002e9e:	e7e3      	b.n	8002e68 <HAL_UART_Transmit+0x72>
    return HAL_BUSY;
 8002ea0:	2002      	movs	r0, #2
 8002ea2:	e7e1      	b.n	8002e68 <HAL_UART_Transmit+0x72>

08002ea4 <UART_CheckIdleState>:
{
 8002ea4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002ea6:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ea8:	2600      	movs	r6, #0
 8002eaa:	6746      	str	r6, [r0, #116]	; 0x74
  tickstart = HAL_GetTick();
 8002eac:	f7fe f828 	bl	8000f00 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002eb0:	6823      	ldr	r3, [r4, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8002eb6:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002eb8:	d417      	bmi.n	8002eea <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002eba:	6823      	ldr	r3, [r4, #0]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	075b      	lsls	r3, r3, #29
 8002ec0:	d50a      	bpl.n	8002ed8 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ec2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002ec6:	9300      	str	r3, [sp, #0]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	462b      	mov	r3, r5
 8002ecc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002ed0:	4620      	mov	r0, r4
 8002ed2:	f7ff ff5f 	bl	8002d94 <UART_WaitOnFlagUntilTimeout>
 8002ed6:	b9a0      	cbnz	r0, 8002f02 <UART_CheckIdleState+0x5e>
  huart->gState = HAL_UART_STATE_READY;
 8002ed8:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8002eda:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8002edc:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UNLOCK(huart);
 8002ee0:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 8002ee4:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
  return HAL_OK;
 8002ee8:	e00c      	b.n	8002f04 <UART_CheckIdleState+0x60>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002eea:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002eee:	9300      	str	r3, [sp, #0]
 8002ef0:	4632      	mov	r2, r6
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002ef8:	4620      	mov	r0, r4
 8002efa:	f7ff ff4b 	bl	8002d94 <UART_WaitOnFlagUntilTimeout>
 8002efe:	2800      	cmp	r0, #0
 8002f00:	d0db      	beq.n	8002eba <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8002f02:	2003      	movs	r0, #3
}
 8002f04:	b002      	add	sp, #8
 8002f06:	bd70      	pop	{r4, r5, r6, pc}

08002f08 <HAL_UART_Init>:
{
 8002f08:	b510      	push	{r4, lr}
  if (huart == NULL)
 8002f0a:	4604      	mov	r4, r0
 8002f0c:	b360      	cbz	r0, 8002f68 <HAL_UART_Init+0x60>
  if (huart->gState == HAL_UART_STATE_RESET)
 8002f0e:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 8002f12:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002f16:	b91b      	cbnz	r3, 8002f20 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002f18:	f880 2070 	strb.w	r2, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8002f1c:	f000 face 	bl	80034bc <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8002f20:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002f22:	2324      	movs	r3, #36	; 0x24
 8002f24:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UART_DISABLE(huart);
 8002f28:	6813      	ldr	r3, [r2, #0]
 8002f2a:	f023 0301 	bic.w	r3, r3, #1
 8002f2e:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f30:	4620      	mov	r0, r4
 8002f32:	f7ff fdb9 	bl	8002aa8 <UART_SetConfig>
 8002f36:	2801      	cmp	r0, #1
 8002f38:	d016      	beq.n	8002f68 <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002f3c:	b113      	cbz	r3, 8002f44 <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 8002f3e:	4620      	mov	r0, r4
 8002f40:	f7ff fed4 	bl	8002cec <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f44:	6823      	ldr	r3, [r4, #0]
 8002f46:	685a      	ldr	r2, [r3, #4]
 8002f48:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f4c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f4e:	689a      	ldr	r2, [r3, #8]
 8002f50:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f54:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8002f5c:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8002f5e:	601a      	str	r2, [r3, #0]
}
 8002f60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8002f64:	f7ff bf9e 	b.w	8002ea4 <UART_CheckIdleState>
}
 8002f68:	2001      	movs	r0, #1
 8002f6a:	bd10      	pop	{r4, pc}
 8002f6c:	0000      	movs	r0, r0
	...

08002f70 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE END PFP */

/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f70:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if(htim->Instance==TIM1) {
 8002f74:	6803      	ldr	r3, [r0, #0]
 8002f76:	4a2c      	ldr	r2, [pc, #176]	; (8003028 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d106      	bne.n	8002f8a <HAL_TIM_PeriodElapsedCallback+0x1a>
			HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8002f7c:	482b      	ldr	r0, [pc, #172]	; (800302c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8002f7e:	2108      	movs	r1, #8
	else if(htim->Instance==TIM2) {
		printf("Data : %10lu,%10.3f,%10.3f\r\n",ADC[0],
				          ((double)ADC[1]/ADC[0])*125-12.5,
						  ((double)ADC[2]/ADC[0])*217.75-66.875);
	}
}
 8002f80:	b003      	add	sp, #12
 8002f82:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
			HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8002f86:	f7fe bdb8 	b.w	8001afa <HAL_GPIO_TogglePin>
	else if(htim->Instance==TIM2) {
 8002f8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f8e:	d13e      	bne.n	800300e <HAL_TIM_PeriodElapsedCallback+0x9e>
		printf("Data : %10lu,%10.3f,%10.3f\r\n",ADC[0],
 8002f90:	4b27      	ldr	r3, [pc, #156]	; (8003030 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8002f92:	681c      	ldr	r4, [r3, #0]
				          ((double)ADC[1]/ADC[0])*125-12.5,
 8002f94:	6858      	ldr	r0, [r3, #4]
 8002f96:	f8d3 9000 	ldr.w	r9, [r3]
						  ((double)ADC[2]/ADC[0])*217.75-66.875);
 8002f9a:	f8d3 8008 	ldr.w	r8, [r3, #8]
 8002f9e:	681d      	ldr	r5, [r3, #0]
				          ((double)ADC[1]/ADC[0])*125-12.5,
 8002fa0:	f7fd fab0 	bl	8000504 <__aeabi_ui2d>
 8002fa4:	4606      	mov	r6, r0
 8002fa6:	4648      	mov	r0, r9
 8002fa8:	460f      	mov	r7, r1
 8002faa:	f7fd faab 	bl	8000504 <__aeabi_ui2d>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	460b      	mov	r3, r1
 8002fb2:	4630      	mov	r0, r6
 8002fb4:	4639      	mov	r1, r7
 8002fb6:	f7fd fc45 	bl	8000844 <__aeabi_ddiv>
 8002fba:	2200      	movs	r2, #0
 8002fbc:	4b1d      	ldr	r3, [pc, #116]	; (8003034 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8002fbe:	f7fd fb17 	bl	80005f0 <__aeabi_dmul>
		printf("Data : %10lu,%10.3f,%10.3f\r\n",ADC[0],
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	4b1c      	ldr	r3, [pc, #112]	; (8003038 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8002fc6:	f7fd f95f 	bl	8000288 <__aeabi_dsub>
 8002fca:	4606      	mov	r6, r0
						  ((double)ADC[2]/ADC[0])*217.75-66.875);
 8002fcc:	4640      	mov	r0, r8
		printf("Data : %10lu,%10.3f,%10.3f\r\n",ADC[0],
 8002fce:	460f      	mov	r7, r1
						  ((double)ADC[2]/ADC[0])*217.75-66.875);
 8002fd0:	f7fd fa98 	bl	8000504 <__aeabi_ui2d>
 8002fd4:	4680      	mov	r8, r0
 8002fd6:	4628      	mov	r0, r5
 8002fd8:	4689      	mov	r9, r1
 8002fda:	f7fd fa93 	bl	8000504 <__aeabi_ui2d>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	460b      	mov	r3, r1
 8002fe2:	4640      	mov	r0, r8
 8002fe4:	4649      	mov	r1, r9
 8002fe6:	f7fd fc2d 	bl	8000844 <__aeabi_ddiv>
 8002fea:	a30b      	add	r3, pc, #44	; (adr r3, 8003018 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8002fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ff0:	f7fd fafe 	bl	80005f0 <__aeabi_dmul>
		printf("Data : %10lu,%10.3f,%10.3f\r\n",ADC[0],
 8002ff4:	a30a      	add	r3, pc, #40	; (adr r3, 8003020 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8002ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ffa:	f7fd f945 	bl	8000288 <__aeabi_dsub>
 8002ffe:	4632      	mov	r2, r6
 8003000:	e9cd 0100 	strd	r0, r1, [sp]
 8003004:	463b      	mov	r3, r7
 8003006:	4621      	mov	r1, r4
 8003008:	480c      	ldr	r0, [pc, #48]	; (800303c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800300a:	f000 fb15 	bl	8003638 <printf>
}
 800300e:	b003      	add	sp, #12
 8003010:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003014:	f3af 8000 	nop.w
 8003018:	00000000 	.word	0x00000000
 800301c:	406b3800 	.word	0x406b3800
 8003020:	00000000 	.word	0x00000000
 8003024:	4050b800 	.word	0x4050b800
 8003028:	40012c00 	.word	0x40012c00
 800302c:	48000400 	.word	0x48000400
 8003030:	200006cc 	.word	0x200006cc
 8003034:	405f4000 	.word	0x405f4000
 8003038:	40290000 	.word	0x40290000
 800303c:	08007161 	.word	0x08007161

08003040 <_write>:
// printf
//**********************************************************************

#ifdef __GNUC__
int _write(int file,uint8_t*ptr,int len)
{
 8003040:	b510      	push	{r4, lr}
	HAL_UART_Transmit(&huart2,ptr,len,1000);
 8003042:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
{
 8003046:	4614      	mov	r4, r2
	HAL_UART_Transmit(&huart2,ptr,len,1000);
 8003048:	4802      	ldr	r0, [pc, #8]	; (8003054 <_write+0x14>)
 800304a:	b292      	uxth	r2, r2
 800304c:	f7ff fed3 	bl	8002df6 <HAL_UART_Transmit>
return len;
}
 8003050:	4620      	mov	r0, r4
 8003052:	bd10      	pop	{r4, pc}
 8003054:	20000808 	.word	0x20000808

08003058 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003058:	b570      	push	{r4, r5, r6, lr}
 800305a:	b0ac      	sub	sp, #176	; 0xb0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Configure LSE Drive Capability 
    */
  HAL_PWR_EnableBkUpAccess();
 800305c:	f7fe fd52 	bl	8001b04 <HAL_PWR_EnableBkUpAccess>

  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8003060:	4a2f      	ldr	r2, [pc, #188]	; (8003120 <SystemClock_Config+0xc8>)
 8003062:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003066:	f023 0318 	bic.w	r3, r3, #24
 800306a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800306e:	2314      	movs	r3, #20
 8003070:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8003072:	2300      	movs	r3, #0
 8003074:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8003076:	2360      	movs	r3, #96	; 0x60
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003078:	2401      	movs	r4, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800307a:	2502      	movs	r5, #2
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800307c:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 40;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800307e:	2607      	movs	r6, #7
  RCC_OscInitStruct.PLL.PLLN = 40;
 8003080:	2328      	movs	r3, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003082:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003084:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8003086:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003088:	9510      	str	r5, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800308a:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 1;
 800308c:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 40;
 800308e:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8003090:	9614      	str	r6, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003092:	9515      	str	r5, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003094:	9516      	str	r5, [sp, #88]	; 0x58
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003096:	f7fe fe23 	bl	8001ce0 <HAL_RCC_OscConfig>
 800309a:	b100      	cbz	r0, 800309e <SystemClock_Config+0x46>
 800309c:	e7fe      	b.n	800309c <SystemClock_Config+0x44>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800309e:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80030a0:	2104      	movs	r1, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80030a2:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80030a4:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80030a6:	2303      	movs	r3, #3
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80030a8:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80030aa:	9005      	str	r0, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80030ac:	eb0d 0001 	add.w	r0, sp, r1
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80030b0:	9302      	str	r3, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80030b2:	f7ff f873 	bl	800219c <HAL_RCC_ClockConfig>
 80030b6:	b100      	cbz	r0, 80030ba <SystemClock_Config+0x62>
 80030b8:	e7fe      	b.n	80030b8 <SystemClock_Config+0x60>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC;
 80030ba:	f244 0302 	movw	r3, #16386	; 0x4002
 80030be:	9317      	str	r3, [sp, #92]	; 0x5c
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80030c0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80030c4:	9329      	str	r3, [sp, #164]	; 0xa4
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
  PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80030c6:	2310      	movs	r3, #16
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80030c8:	9020      	str	r0, [sp, #128]	; 0x80
  PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80030ca:	931a      	str	r3, [sp, #104]	; 0x68
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80030cc:	a817      	add	r0, sp, #92	; 0x5c
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80030ce:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80030d2:	9418      	str	r4, [sp, #96]	; 0x60
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80030d4:	9419      	str	r4, [sp, #100]	; 0x64
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80030d6:	961b      	str	r6, [sp, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80030d8:	951c      	str	r5, [sp, #112]	; 0x70
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80030da:	951d      	str	r5, [sp, #116]	; 0x74
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80030dc:	931e      	str	r3, [sp, #120]	; 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80030de:	f7ff f9a1 	bl	8002424 <HAL_RCCEx_PeriphCLKConfig>
 80030e2:	b100      	cbz	r0, 80030e6 <SystemClock_Config+0x8e>
 80030e4:	e7fe      	b.n	80030e4 <SystemClock_Config+0x8c>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the main internal regulator output voltage 
    */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80030e6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80030ea:	f7fe fd1b 	bl	8001b24 <HAL_PWREx_ControlVoltageScaling>
 80030ee:	4604      	mov	r4, r0
 80030f0:	b100      	cbz	r0, 80030f4 <SystemClock_Config+0x9c>
 80030f2:	e7fe      	b.n	80030f2 <SystemClock_Config+0x9a>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80030f4:	f7ff f8e4 	bl	80022c0 <HAL_RCC_GetHCLKFreq>
 80030f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80030fc:	fbb0 f0f3 	udiv	r0, r0, r3
 8003100:	f7fe fb2e 	bl	8001760 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8003104:	2004      	movs	r0, #4
 8003106:	f7fe fb41 	bl	800178c <HAL_SYSTICK_CLKSourceConfig>

    /**Enable MSI Auto calibration 
    */
  HAL_RCCEx_EnableMSIPLLMode();
 800310a:	f7ff facd 	bl	80026a8 <HAL_RCCEx_EnableMSIPLLMode>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800310e:	4622      	mov	r2, r4
 8003110:	4621      	mov	r1, r4
 8003112:	f04f 30ff 	mov.w	r0, #4294967295
 8003116:	f7fe fae3 	bl	80016e0 <HAL_NVIC_SetPriority>
}
 800311a:	b02c      	add	sp, #176	; 0xb0
 800311c:	bd70      	pop	{r4, r5, r6, pc}
 800311e:	bf00      	nop
 8003120:	40021000 	.word	0x40021000

08003124 <main>:
{
 8003124:	b580      	push	{r7, lr}
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003126:	4c74      	ldr	r4, [pc, #464]	; (80032f8 <main+0x1d4>)
{
 8003128:	b08e      	sub	sp, #56	; 0x38
  HAL_Init();
 800312a:	f7fd fed5 	bl	8000ed8 <HAL_Init>
  SystemClock_Config();
 800312e:	f7ff ff93 	bl	8003058 <SystemClock_Config>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003132:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8003134:	4871      	ldr	r0, [pc, #452]	; (80032fc <main+0x1d8>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003136:	f043 0304 	orr.w	r3, r3, #4
 800313a:	64e3      	str	r3, [r4, #76]	; 0x4c
 800313c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800313e:	f003 0304 	and.w	r3, r3, #4
 8003142:	9302      	str	r3, [sp, #8]
 8003144:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003146:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003148:	f043 0301 	orr.w	r3, r3, #1
 800314c:	64e3      	str	r3, [r4, #76]	; 0x4c
 800314e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003150:	f003 0301 	and.w	r3, r3, #1
 8003154:	9303      	str	r3, [sp, #12]
 8003156:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003158:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800315a:	f043 0302 	orr.w	r3, r3, #2
 800315e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8003160:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003162:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8003166:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003168:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800316a:	2108      	movs	r1, #8

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800316c:	2500      	movs	r5, #0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800316e:	2601      	movs	r6, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003170:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8003172:	f7fe fcbd 	bl	8001af0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = LD3_Pin;
 8003176:	2308      	movs	r3, #8
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8003178:	a908      	add	r1, sp, #32
 800317a:	4860      	ldr	r0, [pc, #384]	; (80032fc <main+0x1d8>)
  GPIO_InitStruct.Pin = LD3_Pin;
 800317c:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800317e:	9609      	str	r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003180:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003182:	950b      	str	r5, [sp, #44]	; 0x2c
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8003184:	f7fe fc00 	bl	8001988 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003188:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800318a:	4333      	orrs	r3, r6
 800318c:	64a3      	str	r3, [r4, #72]	; 0x48
 800318e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003190:	4033      	ands	r3, r6
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003192:	462a      	mov	r2, r5
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003194:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003196:	4629      	mov	r1, r5
 8003198:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 800319a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800319c:	f7fe faa0 	bl	80016e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80031a0:	200b      	movs	r0, #11
 80031a2:	f7fe fad1 	bl	8001748 <HAL_NVIC_EnableIRQ>
  huart2.Instance = USART2;
 80031a6:	4856      	ldr	r0, [pc, #344]	; (8003300 <main+0x1dc>)
  huart2.Init.BaudRate = 115200;
 80031a8:	4a56      	ldr	r2, [pc, #344]	; (8003304 <main+0x1e0>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80031aa:	6085      	str	r5, [r0, #8]
  huart2.Init.BaudRate = 115200;
 80031ac:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart2.Init.Mode = UART_MODE_TX_RX;
 80031b0:	270c      	movs	r7, #12
  huart2.Init.BaudRate = 115200;
 80031b2:	e880 000c 	stmia.w	r0, {r2, r3}
  huart2.Init.StopBits = UART_STOPBITS_1;
 80031b6:	60c5      	str	r5, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80031b8:	6105      	str	r5, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80031ba:	6147      	str	r7, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80031bc:	6185      	str	r5, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80031be:	61c5      	str	r5, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80031c0:	6205      	str	r5, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80031c2:	6245      	str	r5, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80031c4:	f7ff fea0 	bl	8002f08 <HAL_UART_Init>
 80031c8:	b100      	cbz	r0, 80031cc <main+0xa8>
 80031ca:	e7fe      	b.n	80031ca <main+0xa6>
  hadc1.Instance = ADC1;
 80031cc:	4c4e      	ldr	r4, [pc, #312]	; (8003308 <main+0x1e4>)
 80031ce:	4b4f      	ldr	r3, [pc, #316]	; (800330c <main+0x1e8>)
 80031d0:	6023      	str	r3, [r4, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80031d2:	6060      	str	r0, [r4, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80031d4:	60a0      	str	r0, [r4, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80031d6:	60e0      	str	r0, [r4, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80031d8:	2504      	movs	r5, #4
  hadc1.Init.NbrOfConversion = 3;
 80031da:	2303      	movs	r3, #3
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80031dc:	6260      	str	r0, [r4, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80031de:	62e0      	str	r0, [r4, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80031e0:	6320      	str	r0, [r4, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80031e2:	63a0      	str	r0, [r4, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80031e4:	63e0      	str	r0, [r4, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80031e6:	4620      	mov	r0, r4
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80031e8:	6126      	str	r6, [r4, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80031ea:	6165      	str	r5, [r4, #20]
  hadc1.Init.LowPowerAutoWait = ENABLE;
 80031ec:	61a6      	str	r6, [r4, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80031ee:	61e6      	str	r6, [r4, #28]
  hadc1.Init.NbrOfConversion = 3;
 80031f0:	6223      	str	r3, [r4, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 80031f2:	62a6      	str	r6, [r4, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80031f4:	6366      	str	r6, [r4, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80031f6:	f7fd febf 	bl	8000f78 <HAL_ADC_Init>
 80031fa:	b100      	cbz	r0, 80031fe <main+0xda>
 80031fc:	e7fe      	b.n	80031fc <main+0xd8>
  sConfig.Channel = ADC_CHANNEL_8;
 80031fe:	4b44      	ldr	r3, [pc, #272]	; (8003310 <main+0x1ec>)
 8003200:	9308      	str	r3, [sp, #32]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003202:	2306      	movs	r3, #6
 8003204:	9309      	str	r3, [sp, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8003206:	2307      	movs	r3, #7
 8003208:	930a      	str	r3, [sp, #40]	; 0x28
  sConfig.Offset = 0;
 800320a:	900d      	str	r0, [sp, #52]	; 0x34
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800320c:	237f      	movs	r3, #127	; 0x7f
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800320e:	a908      	add	r1, sp, #32
 8003210:	4620      	mov	r0, r4
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003212:	930b      	str	r3, [sp, #44]	; 0x2c
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003214:	950c      	str	r5, [sp, #48]	; 0x30
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003216:	f7fd ffc5 	bl	80011a4 <HAL_ADC_ConfigChannel>
 800321a:	b100      	cbz	r0, 800321e <main+0xfa>
 800321c:	e7fe      	b.n	800321c <main+0xf8>
  sConfig.Channel = ADC_CHANNEL_9;
 800321e:	4b3d      	ldr	r3, [pc, #244]	; (8003314 <main+0x1f0>)
 8003220:	9308      	str	r3, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003222:	a908      	add	r1, sp, #32
 8003224:	4620      	mov	r0, r4
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8003226:	9709      	str	r7, [sp, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003228:	f7fd ffbc 	bl	80011a4 <HAL_ADC_ConfigChannel>
 800322c:	b100      	cbz	r0, 8003230 <main+0x10c>
 800322e:	e7fe      	b.n	800322e <main+0x10a>
  sConfig.Channel = ADC_CHANNEL_10;
 8003230:	4b39      	ldr	r3, [pc, #228]	; (8003318 <main+0x1f4>)
 8003232:	9308      	str	r3, [sp, #32]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003234:	a908      	add	r1, sp, #32
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8003236:	2312      	movs	r3, #18
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003238:	4620      	mov	r0, r4
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800323a:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800323c:	f7fd ffb2 	bl	80011a4 <HAL_ADC_ConfigChannel>
 8003240:	b100      	cbz	r0, 8003244 <main+0x120>
 8003242:	e7fe      	b.n	8003242 <main+0x11e>
  htim1.Instance = TIM1;
 8003244:	4c35      	ldr	r4, [pc, #212]	; (800331c <main+0x1f8>)
  htim1.Init.Prescaler = 7999;
 8003246:	4b36      	ldr	r3, [pc, #216]	; (8003320 <main+0x1fc>)
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003248:	60a0      	str	r0, [r4, #8]
  htim1.Init.Prescaler = 7999;
 800324a:	f641 763f 	movw	r6, #7999	; 0x1f3f
 800324e:	e884 0048 	stmia.w	r4, {r3, r6}
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003252:	6120      	str	r0, [r4, #16]
  htim1.Init.Period = 4999;
 8003254:	f241 3387 	movw	r3, #4999	; 0x1387
  htim1.Init.RepetitionCounter = 0;
 8003258:	6160      	str	r0, [r4, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800325a:	61a0      	str	r0, [r4, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800325c:	4620      	mov	r0, r4
  htim1.Init.Period = 4999;
 800325e:	60e3      	str	r3, [r4, #12]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003260:	f7ff fb30 	bl	80028c4 <HAL_TIM_Base_Init>
 8003264:	b100      	cbz	r0, 8003268 <main+0x144>
 8003266:	e7fe      	b.n	8003266 <main+0x142>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003268:	f44f 5580 	mov.w	r5, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800326c:	a908      	add	r1, sp, #32
 800326e:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003270:	9508      	str	r5, [sp, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003272:	f7ff fb4b 	bl	800290c <HAL_TIM_ConfigClockSource>
 8003276:	b100      	cbz	r0, 800327a <main+0x156>
 8003278:	e7fe      	b.n	8003278 <main+0x154>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800327a:	9005      	str	r0, [sp, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800327c:	9006      	str	r0, [sp, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800327e:	9007      	str	r0, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003280:	a905      	add	r1, sp, #20
 8003282:	4620      	mov	r0, r4
 8003284:	f7ff fbe4 	bl	8002a50 <HAL_TIMEx_MasterConfigSynchronization>
 8003288:	b100      	cbz	r0, 800328c <main+0x168>
 800328a:	e7fe      	b.n	800328a <main+0x166>
  htim2.Instance = TIM2;
 800328c:	4c25      	ldr	r4, [pc, #148]	; (8003324 <main+0x200>)
 800328e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  htim2.Init.Prescaler = 7999;
 8003292:	e884 0048 	stmia.w	r4, {r3, r6}
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003296:	60a0      	str	r0, [r4, #8]
  htim2.Init.Period = 9999;
 8003298:	f242 730f 	movw	r3, #9999	; 0x270f
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800329c:	6120      	str	r0, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800329e:	61a0      	str	r0, [r4, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80032a0:	4620      	mov	r0, r4
  htim2.Init.Period = 9999;
 80032a2:	60e3      	str	r3, [r4, #12]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80032a4:	f7ff fb0e 	bl	80028c4 <HAL_TIM_Base_Init>
 80032a8:	b100      	cbz	r0, 80032ac <main+0x188>
 80032aa:	e7fe      	b.n	80032aa <main+0x186>
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80032ac:	a908      	add	r1, sp, #32
 80032ae:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80032b0:	9508      	str	r5, [sp, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80032b2:	f7ff fb2b 	bl	800290c <HAL_TIM_ConfigClockSource>
 80032b6:	b100      	cbz	r0, 80032ba <main+0x196>
 80032b8:	e7fe      	b.n	80032b8 <main+0x194>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032ba:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80032bc:	a905      	add	r1, sp, #20
 80032be:	4819      	ldr	r0, [pc, #100]	; (8003324 <main+0x200>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032c0:	9305      	str	r3, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032c2:	9307      	str	r3, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80032c4:	f7ff fbc4 	bl	8002a50 <HAL_TIMEx_MasterConfigSynchronization>
 80032c8:	b100      	cbz	r0, 80032cc <main+0x1a8>
 80032ca:	e7fe      	b.n	80032ca <main+0x1a6>
  HAL_ADC_Start_DMA(&hadc1,(uint32_t *)ADC,3);
 80032cc:	2203      	movs	r2, #3
 80032ce:	4916      	ldr	r1, [pc, #88]	; (8003328 <main+0x204>)
 80032d0:	480d      	ldr	r0, [pc, #52]	; (8003308 <main+0x1e4>)
  while(HAL_TIM_Base_Start_IT(&htim1)!=HAL_OK);
 80032d2:	4c12      	ldr	r4, [pc, #72]	; (800331c <main+0x1f8>)
  HAL_ADC_Start_DMA(&hadc1,(uint32_t *)ADC,3);
 80032d4:	f7fe f996 	bl	8001604 <HAL_ADC_Start_DMA>
  HAL_Delay(100);
 80032d8:	2064      	movs	r0, #100	; 0x64
 80032da:	f7fd fe17 	bl	8000f0c <HAL_Delay>
  while(HAL_TIM_Base_Start_IT(&htim1)!=HAL_OK);
 80032de:	4620      	mov	r0, r4
 80032e0:	f7ff f9ea 	bl	80026b8 <HAL_TIM_Base_Start_IT>
 80032e4:	2800      	cmp	r0, #0
 80032e6:	d1fa      	bne.n	80032de <main+0x1ba>
  while(HAL_TIM_Base_Start_IT(&htim2)!=HAL_OK);
 80032e8:	4c0e      	ldr	r4, [pc, #56]	; (8003324 <main+0x200>)
 80032ea:	4620      	mov	r0, r4
 80032ec:	f7ff f9e4 	bl	80026b8 <HAL_TIM_Base_Start_IT>
 80032f0:	2800      	cmp	r0, #0
 80032f2:	d1fa      	bne.n	80032ea <main+0x1c6>
 80032f4:	e7fe      	b.n	80032f4 <main+0x1d0>
 80032f6:	bf00      	nop
 80032f8:	40021000 	.word	0x40021000
 80032fc:	48000400 	.word	0x48000400
 8003300:	20000808 	.word	0x20000808
 8003304:	40004400 	.word	0x40004400
 8003308:	200006d8 	.word	0x200006d8
 800330c:	50040000 	.word	0x50040000
 8003310:	21800100 	.word	0x21800100
 8003314:	25b00200 	.word	0x25b00200
 8003318:	2a000400 	.word	0x2a000400
 800331c:	20000788 	.word	0x20000788
 8003320:	40012c00 	.word	0x40012c00
 8003324:	200007c8 	.word	0x200007c8
 8003328:	200006cc 	.word	0x200006cc

0800332c <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 800332c:	e7fe      	b.n	800332c <_Error_Handler>
	...

08003330 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003330:	4b21      	ldr	r3, [pc, #132]	; (80033b8 <HAL_MspInit+0x88>)
{
 8003332:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003334:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003336:	f042 0201 	orr.w	r2, r2, #1
 800333a:	661a      	str	r2, [r3, #96]	; 0x60
 800333c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800333e:	f002 0201 	and.w	r2, r2, #1
 8003342:	9200      	str	r2, [sp, #0]
 8003344:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003346:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003348:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800334c:	659a      	str	r2, [r3, #88]	; 0x58
 800334e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003350:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003354:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003356:	2003      	movs	r0, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 8003358:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800335a:	f7fe f9af 	bl	80016bc <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800335e:	2200      	movs	r2, #0
 8003360:	4611      	mov	r1, r2
 8003362:	f06f 000b 	mvn.w	r0, #11
 8003366:	f7fe f9bb 	bl	80016e0 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800336a:	2200      	movs	r2, #0
 800336c:	4611      	mov	r1, r2
 800336e:	f06f 000a 	mvn.w	r0, #10
 8003372:	f7fe f9b5 	bl	80016e0 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8003376:	2200      	movs	r2, #0
 8003378:	4611      	mov	r1, r2
 800337a:	f06f 0009 	mvn.w	r0, #9
 800337e:	f7fe f9af 	bl	80016e0 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8003382:	2200      	movs	r2, #0
 8003384:	4611      	mov	r1, r2
 8003386:	f06f 0004 	mvn.w	r0, #4
 800338a:	f7fe f9a9 	bl	80016e0 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800338e:	2200      	movs	r2, #0
 8003390:	4611      	mov	r1, r2
 8003392:	f06f 0003 	mvn.w	r0, #3
 8003396:	f7fe f9a3 	bl	80016e0 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 800339a:	2200      	movs	r2, #0
 800339c:	4611      	mov	r1, r2
 800339e:	f06f 0001 	mvn.w	r0, #1
 80033a2:	f7fe f99d 	bl	80016e0 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80033a6:	2200      	movs	r2, #0
 80033a8:	4611      	mov	r1, r2
 80033aa:	f04f 30ff 	mov.w	r0, #4294967295
 80033ae:	f7fe f997 	bl	80016e0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80033b2:	b003      	add	sp, #12
 80033b4:	f85d fb04 	ldr.w	pc, [sp], #4
 80033b8:	40021000 	.word	0x40021000

080033bc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80033bc:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 80033be:	6802      	ldr	r2, [r0, #0]
 80033c0:	4b1c      	ldr	r3, [pc, #112]	; (8003434 <HAL_ADC_MspInit+0x78>)
 80033c2:	429a      	cmp	r2, r3
{
 80033c4:	b086      	sub	sp, #24
 80033c6:	4606      	mov	r6, r0
  if(hadc->Instance==ADC1)
 80033c8:	d132      	bne.n	8003430 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80033ca:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 80033ce:	f5a3 33f8 	sub.w	r3, r3, #126976	; 0x1f000
    PA4     ------> ADC1_IN9
    PA5     ------> ADC1_IN10 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033d2:	2500      	movs	r5, #0
    __HAL_RCC_ADC_CLK_ENABLE();
 80033d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80033d6:	4c18      	ldr	r4, [pc, #96]	; (8003438 <HAL_ADC_MspInit+0x7c>)
    __HAL_RCC_ADC_CLK_ENABLE();
 80033d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80033dc:	64da      	str	r2, [r3, #76]	; 0x4c
 80033de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033e0:	9503      	str	r5, [sp, #12]
    __HAL_RCC_ADC_CLK_ENABLE();
 80033e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033e6:	9300      	str	r3, [sp, #0]
 80033e8:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80033ea:	2338      	movs	r3, #56	; 0x38
 80033ec:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80033f2:	230b      	movs	r3, #11
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033f4:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80033f6:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033f8:	f7fe fac6 	bl	8001988 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 80033fc:	4b0f      	ldr	r3, [pc, #60]	; (800343c <HAL_ADC_MspInit+0x80>)
    hdma_adc1.Init.Request = DMA_REQUEST_0;
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80033fe:	60a5      	str	r5, [r4, #8]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8003400:	e884 0028 	stmia.w	r4, {r3, r5}
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003404:	2380      	movs	r3, #128	; 0x80
 8003406:	6123      	str	r3, [r4, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003408:	f44f 7300 	mov.w	r3, #512	; 0x200
 800340c:	6163      	str	r3, [r4, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800340e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003412:	61a3      	str	r3, [r4, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003414:	4620      	mov	r0, r4
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003416:	2320      	movs	r3, #32
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003418:	60e5      	str	r5, [r4, #12]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800341a:	61e3      	str	r3, [r4, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800341c:	6225      	str	r5, [r4, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800341e:	f7fe f9c7 	bl	80017b0 <HAL_DMA_Init>
 8003422:	b118      	cbz	r0, 800342c <HAL_ADC_MspInit+0x70>
    {
      _Error_Handler(__FILE__, __LINE__);
 8003424:	2176      	movs	r1, #118	; 0x76
 8003426:	4806      	ldr	r0, [pc, #24]	; (8003440 <HAL_ADC_MspInit+0x84>)
 8003428:	f7ff ff80 	bl	800332c <_Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800342c:	6534      	str	r4, [r6, #80]	; 0x50
 800342e:	62a6      	str	r6, [r4, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003430:	b006      	add	sp, #24
 8003432:	bd70      	pop	{r4, r5, r6, pc}
 8003434:	50040000 	.word	0x50040000
 8003438:	20000740 	.word	0x20000740
 800343c:	40020008 	.word	0x40020008
 8003440:	0800717e 	.word	0x0800717e

08003444 <HAL_TIM_Base_MspInit>:
  }

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003444:	b507      	push	{r0, r1, r2, lr}

  if(htim_base->Instance==TIM1)
 8003446:	6803      	ldr	r3, [r0, #0]
 8003448:	4a1a      	ldr	r2, [pc, #104]	; (80034b4 <HAL_TIM_Base_MspInit+0x70>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d11c      	bne.n	8003488 <HAL_TIM_Base_MspInit+0x44>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800344e:	4b1a      	ldr	r3, [pc, #104]	; (80034b8 <HAL_TIM_Base_MspInit+0x74>)
 8003450:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003452:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003456:	661a      	str	r2, [r3, #96]	; 0x60
 8003458:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800345a:	2200      	movs	r2, #0
    __HAL_RCC_TIM1_CLK_ENABLE();
 800345c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8003460:	4611      	mov	r1, r2
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003462:	9300      	str	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8003464:	2018      	movs	r0, #24
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003466:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8003468:	f7fe f93a 	bl	80016e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800346c:	2018      	movs	r0, #24
 800346e:	f7fe f96b 	bl	8001748 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8003472:	2200      	movs	r2, #0
 8003474:	2019      	movs	r0, #25
 8003476:	4611      	mov	r1, r2
 8003478:	f7fe f932 	bl	80016e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800347c:	2019      	movs	r0, #25
  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800347e:	f7fe f963 	bl	8001748 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003482:	b003      	add	sp, #12
 8003484:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(htim_base->Instance==TIM2)
 8003488:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800348c:	d1f9      	bne.n	8003482 <HAL_TIM_Base_MspInit+0x3e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800348e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003492:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003494:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003496:	f042 0201 	orr.w	r2, r2, #1
 800349a:	659a      	str	r2, [r3, #88]	; 0x58
 800349c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800349e:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 80034a0:	f003 0301 	and.w	r3, r3, #1
 80034a4:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80034a6:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 80034a8:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80034aa:	f7fe f919 	bl	80016e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80034ae:	201c      	movs	r0, #28
 80034b0:	e7e5      	b.n	800347e <HAL_TIM_Base_MspInit+0x3a>
 80034b2:	bf00      	nop
 80034b4:	40012c00 	.word	0x40012c00
 80034b8:	40021000 	.word	0x40021000

080034bc <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80034bc:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 80034be:	6802      	ldr	r2, [r0, #0]
 80034c0:	4b15      	ldr	r3, [pc, #84]	; (8003518 <HAL_UART_MspInit+0x5c>)
 80034c2:	429a      	cmp	r2, r3
{
 80034c4:	b086      	sub	sp, #24
  if(huart->Instance==USART2)
 80034c6:	d125      	bne.n	8003514 <HAL_UART_MspInit+0x58>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80034c8:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    PA15 (JTDI)     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034cc:	2403      	movs	r4, #3
    __HAL_RCC_USART2_CLK_ENABLE();
 80034ce:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80034d0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80034d4:	659a      	str	r2, [r3, #88]	; 0x58
 80034d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034d8:	9404      	str	r4, [sp, #16]
    __HAL_RCC_USART2_CLK_ENABLE();
 80034da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034de:	9300      	str	r3, [sp, #0]
 80034e0:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80034e2:	2304      	movs	r3, #4
 80034e4:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034e6:	2602      	movs	r6, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80034e8:	2307      	movs	r3, #7
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ea:	2500      	movs	r5, #0
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80034ec:	a901      	add	r1, sp, #4
 80034ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80034f2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034f4:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034f6:	9503      	str	r5, [sp, #12]
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80034f8:	f7fe fa46 	bl	8001988 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80034fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8003500:	a901      	add	r1, sp, #4
 8003502:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8003506:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003508:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800350a:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800350c:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 800350e:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8003510:	f7fe fa3a 	bl	8001988 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003514:	b006      	add	sp, #24
 8003516:	bd70      	pop	{r4, r5, r6, pc}
 8003518:	40004400 	.word	0x40004400

0800351c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800351c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800351e:	f7fd fce7 	bl	8000ef0 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003522:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8003526:	f7fe b93e 	b.w	80017a6 <HAL_SYSTICK_IRQHandler>
	...

0800352c <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800352c:	4801      	ldr	r0, [pc, #4]	; (8003534 <DMA1_Channel1_IRQHandler+0x8>)
 800352e:	f7fe b9e1 	b.w	80018f4 <HAL_DMA_IRQHandler>
 8003532:	bf00      	nop
 8003534:	20000740 	.word	0x20000740

08003538 <TIM1_UP_TIM16_IRQHandler>:
void TIM1_UP_TIM16_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003538:	4801      	ldr	r0, [pc, #4]	; (8003540 <TIM1_UP_TIM16_IRQHandler+0x8>)
 800353a:	f7ff b8d9 	b.w	80026f0 <HAL_TIM_IRQHandler>
 800353e:	bf00      	nop
 8003540:	20000788 	.word	0x20000788

08003544 <TIM1_BRK_TIM15_IRQHandler>:
 8003544:	f7ff bff8 	b.w	8003538 <TIM1_UP_TIM16_IRQHandler>

08003548 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003548:	4801      	ldr	r0, [pc, #4]	; (8003550 <TIM2_IRQHandler+0x8>)
 800354a:	f7ff b8d1 	b.w	80026f0 <HAL_TIM_IRQHandler>
 800354e:	bf00      	nop
 8003550:	200007c8 	.word	0x200007c8

08003554 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003554:	490f      	ldr	r1, [pc, #60]	; (8003594 <SystemInit+0x40>)
 8003556:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800355a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800355e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003562:	4b0d      	ldr	r3, [pc, #52]	; (8003598 <SystemInit+0x44>)
 8003564:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8003566:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 8003568:	f042 0201 	orr.w	r2, r2, #1
 800356c:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 800356e:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8003576:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 800357a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800357c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003580:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003588:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800358a:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800358c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003590:	608b      	str	r3, [r1, #8]
 8003592:	4770      	bx	lr
 8003594:	e000ed00 	.word	0xe000ed00
 8003598:	40021000 	.word	0x40021000

0800359c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800359c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80035d4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80035a0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80035a2:	e003      	b.n	80035ac <LoopCopyDataInit>

080035a4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80035a4:	4b0c      	ldr	r3, [pc, #48]	; (80035d8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80035a6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80035a8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80035aa:	3104      	adds	r1, #4

080035ac <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80035ac:	480b      	ldr	r0, [pc, #44]	; (80035dc <LoopForever+0xa>)
	ldr	r3, =_edata
 80035ae:	4b0c      	ldr	r3, [pc, #48]	; (80035e0 <LoopForever+0xe>)
	adds	r2, r0, r1
 80035b0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80035b2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80035b4:	d3f6      	bcc.n	80035a4 <CopyDataInit>
	ldr	r2, =_sbss
 80035b6:	4a0b      	ldr	r2, [pc, #44]	; (80035e4 <LoopForever+0x12>)
	b	LoopFillZerobss
 80035b8:	e002      	b.n	80035c0 <LoopFillZerobss>

080035ba <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80035ba:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80035bc:	f842 3b04 	str.w	r3, [r2], #4

080035c0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80035c0:	4b09      	ldr	r3, [pc, #36]	; (80035e8 <LoopForever+0x16>)
	cmp	r2, r3
 80035c2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80035c4:	d3f9      	bcc.n	80035ba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80035c6:	f7ff ffc5 	bl	8003554 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80035ca:	f000 f811 	bl	80035f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80035ce:	f7ff fda9 	bl	8003124 <main>

080035d2 <LoopForever>:

LoopForever:
    b LoopForever
 80035d2:	e7fe      	b.n	80035d2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80035d4:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 80035d8:	080074c8 	.word	0x080074c8
	ldr	r0, =_sdata
 80035dc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80035e0:	20000674 	.word	0x20000674
	ldr	r2, =_sbss
 80035e4:	20000674 	.word	0x20000674
	ldr	r3, = _ebss
 80035e8:	20000890 	.word	0x20000890

080035ec <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80035ec:	e7fe      	b.n	80035ec <ADC1_IRQHandler>
	...

080035f0 <__libc_init_array>:
 80035f0:	b570      	push	{r4, r5, r6, lr}
 80035f2:	4e0d      	ldr	r6, [pc, #52]	; (8003628 <__libc_init_array+0x38>)
 80035f4:	4c0d      	ldr	r4, [pc, #52]	; (800362c <__libc_init_array+0x3c>)
 80035f6:	1ba4      	subs	r4, r4, r6
 80035f8:	10a4      	asrs	r4, r4, #2
 80035fa:	2500      	movs	r5, #0
 80035fc:	42a5      	cmp	r5, r4
 80035fe:	d109      	bne.n	8003614 <__libc_init_array+0x24>
 8003600:	4e0b      	ldr	r6, [pc, #44]	; (8003630 <__libc_init_array+0x40>)
 8003602:	4c0c      	ldr	r4, [pc, #48]	; (8003634 <__libc_init_array+0x44>)
 8003604:	f003 fd96 	bl	8007134 <_init>
 8003608:	1ba4      	subs	r4, r4, r6
 800360a:	10a4      	asrs	r4, r4, #2
 800360c:	2500      	movs	r5, #0
 800360e:	42a5      	cmp	r5, r4
 8003610:	d105      	bne.n	800361e <__libc_init_array+0x2e>
 8003612:	bd70      	pop	{r4, r5, r6, pc}
 8003614:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003618:	4798      	blx	r3
 800361a:	3501      	adds	r5, #1
 800361c:	e7ee      	b.n	80035fc <__libc_init_array+0xc>
 800361e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003622:	4798      	blx	r3
 8003624:	3501      	adds	r5, #1
 8003626:	e7f2      	b.n	800360e <__libc_init_array+0x1e>
 8003628:	080074c0 	.word	0x080074c0
 800362c:	080074c0 	.word	0x080074c0
 8003630:	080074c0 	.word	0x080074c0
 8003634:	080074c4 	.word	0x080074c4

08003638 <printf>:
 8003638:	b40f      	push	{r0, r1, r2, r3}
 800363a:	4b0a      	ldr	r3, [pc, #40]	; (8003664 <printf+0x2c>)
 800363c:	b513      	push	{r0, r1, r4, lr}
 800363e:	681c      	ldr	r4, [r3, #0]
 8003640:	b124      	cbz	r4, 800364c <printf+0x14>
 8003642:	69a3      	ldr	r3, [r4, #24]
 8003644:	b913      	cbnz	r3, 800364c <printf+0x14>
 8003646:	4620      	mov	r0, r4
 8003648:	f002 f87a 	bl	8005740 <__sinit>
 800364c:	ab05      	add	r3, sp, #20
 800364e:	9a04      	ldr	r2, [sp, #16]
 8003650:	68a1      	ldr	r1, [r4, #8]
 8003652:	9301      	str	r3, [sp, #4]
 8003654:	4620      	mov	r0, r4
 8003656:	f000 f807 	bl	8003668 <_vfprintf_r>
 800365a:	b002      	add	sp, #8
 800365c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003660:	b004      	add	sp, #16
 8003662:	4770      	bx	lr
 8003664:	20000004 	.word	0x20000004

08003668 <_vfprintf_r>:
 8003668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800366c:	b0bd      	sub	sp, #244	; 0xf4
 800366e:	4688      	mov	r8, r1
 8003670:	4615      	mov	r5, r2
 8003672:	461c      	mov	r4, r3
 8003674:	461f      	mov	r7, r3
 8003676:	4683      	mov	fp, r0
 8003678:	f002 fa12 	bl	8005aa0 <_localeconv_r>
 800367c:	6803      	ldr	r3, [r0, #0]
 800367e:	930d      	str	r3, [sp, #52]	; 0x34
 8003680:	4618      	mov	r0, r3
 8003682:	f7fc fdf5 	bl	8000270 <strlen>
 8003686:	9009      	str	r0, [sp, #36]	; 0x24
 8003688:	f1bb 0f00 	cmp.w	fp, #0
 800368c:	d005      	beq.n	800369a <_vfprintf_r+0x32>
 800368e:	f8db 3018 	ldr.w	r3, [fp, #24]
 8003692:	b913      	cbnz	r3, 800369a <_vfprintf_r+0x32>
 8003694:	4658      	mov	r0, fp
 8003696:	f002 f853 	bl	8005740 <__sinit>
 800369a:	4b99      	ldr	r3, [pc, #612]	; (8003900 <_vfprintf_r+0x298>)
 800369c:	4598      	cmp	r8, r3
 800369e:	d137      	bne.n	8003710 <_vfprintf_r+0xa8>
 80036a0:	f8db 8004 	ldr.w	r8, [fp, #4]
 80036a4:	f8d8 3064 	ldr.w	r3, [r8, #100]	; 0x64
 80036a8:	07d8      	lsls	r0, r3, #31
 80036aa:	d407      	bmi.n	80036bc <_vfprintf_r+0x54>
 80036ac:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 80036b0:	0599      	lsls	r1, r3, #22
 80036b2:	d403      	bmi.n	80036bc <_vfprintf_r+0x54>
 80036b4:	f8d8 0058 	ldr.w	r0, [r8, #88]	; 0x58
 80036b8:	f002 fa02 	bl	8005ac0 <__retarget_lock_acquire_recursive>
 80036bc:	f9b8 300c 	ldrsh.w	r3, [r8, #12]
 80036c0:	049a      	lsls	r2, r3, #18
 80036c2:	d409      	bmi.n	80036d8 <_vfprintf_r+0x70>
 80036c4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80036c8:	f8a8 300c 	strh.w	r3, [r8, #12]
 80036cc:	f8d8 3064 	ldr.w	r3, [r8, #100]	; 0x64
 80036d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80036d4:	f8c8 3064 	str.w	r3, [r8, #100]	; 0x64
 80036d8:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 80036dc:	071e      	lsls	r6, r3, #28
 80036de:	d502      	bpl.n	80036e6 <_vfprintf_r+0x7e>
 80036e0:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80036e4:	bb03      	cbnz	r3, 8003728 <_vfprintf_r+0xc0>
 80036e6:	4641      	mov	r1, r8
 80036e8:	4658      	mov	r0, fp
 80036ea:	f001 f839 	bl	8004760 <__swsetup_r>
 80036ee:	b1d8      	cbz	r0, 8003728 <_vfprintf_r+0xc0>
 80036f0:	f8d8 3064 	ldr.w	r3, [r8, #100]	; 0x64
 80036f4:	07dd      	lsls	r5, r3, #31
 80036f6:	d407      	bmi.n	8003708 <_vfprintf_r+0xa0>
 80036f8:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 80036fc:	059c      	lsls	r4, r3, #22
 80036fe:	d403      	bmi.n	8003708 <_vfprintf_r+0xa0>
 8003700:	f8d8 0058 	ldr.w	r0, [r8, #88]	; 0x58
 8003704:	f002 f9dd 	bl	8005ac2 <__retarget_lock_release_recursive>
 8003708:	f04f 33ff 	mov.w	r3, #4294967295
 800370c:	930a      	str	r3, [sp, #40]	; 0x28
 800370e:	e026      	b.n	800375e <_vfprintf_r+0xf6>
 8003710:	4b7c      	ldr	r3, [pc, #496]	; (8003904 <_vfprintf_r+0x29c>)
 8003712:	4598      	cmp	r8, r3
 8003714:	d102      	bne.n	800371c <_vfprintf_r+0xb4>
 8003716:	f8db 8008 	ldr.w	r8, [fp, #8]
 800371a:	e7c3      	b.n	80036a4 <_vfprintf_r+0x3c>
 800371c:	4b7a      	ldr	r3, [pc, #488]	; (8003908 <_vfprintf_r+0x2a0>)
 800371e:	4598      	cmp	r8, r3
 8003720:	bf08      	it	eq
 8003722:	f8db 800c 	ldreq.w	r8, [fp, #12]
 8003726:	e7bd      	b.n	80036a4 <_vfprintf_r+0x3c>
 8003728:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800372c:	f003 021a 	and.w	r2, r3, #26
 8003730:	2a0a      	cmp	r2, #10
 8003732:	d118      	bne.n	8003766 <_vfprintf_r+0xfe>
 8003734:	f9b8 200e 	ldrsh.w	r2, [r8, #14]
 8003738:	2a00      	cmp	r2, #0
 800373a:	db14      	blt.n	8003766 <_vfprintf_r+0xfe>
 800373c:	f8d8 2064 	ldr.w	r2, [r8, #100]	; 0x64
 8003740:	07d0      	lsls	r0, r2, #31
 8003742:	d405      	bmi.n	8003750 <_vfprintf_r+0xe8>
 8003744:	0599      	lsls	r1, r3, #22
 8003746:	d403      	bmi.n	8003750 <_vfprintf_r+0xe8>
 8003748:	f8d8 0058 	ldr.w	r0, [r8, #88]	; 0x58
 800374c:	f002 f9b9 	bl	8005ac2 <__retarget_lock_release_recursive>
 8003750:	4623      	mov	r3, r4
 8003752:	462a      	mov	r2, r5
 8003754:	4641      	mov	r1, r8
 8003756:	4658      	mov	r0, fp
 8003758:	f000 ffc2 	bl	80046e0 <__sbprintf>
 800375c:	900a      	str	r0, [sp, #40]	; 0x28
 800375e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003760:	b03d      	add	sp, #244	; 0xf4
 8003762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003766:	ed9f 7b64 	vldr	d7, [pc, #400]	; 80038f8 <_vfprintf_r+0x290>
 800376a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800376e:	2300      	movs	r3, #0
 8003770:	ac2c      	add	r4, sp, #176	; 0xb0
 8003772:	941f      	str	r4, [sp, #124]	; 0x7c
 8003774:	9321      	str	r3, [sp, #132]	; 0x84
 8003776:	9320      	str	r3, [sp, #128]	; 0x80
 8003778:	9505      	str	r5, [sp, #20]
 800377a:	9303      	str	r3, [sp, #12]
 800377c:	9311      	str	r3, [sp, #68]	; 0x44
 800377e:	9310      	str	r3, [sp, #64]	; 0x40
 8003780:	930a      	str	r3, [sp, #40]	; 0x28
 8003782:	9d05      	ldr	r5, [sp, #20]
 8003784:	462b      	mov	r3, r5
 8003786:	f813 2b01 	ldrb.w	r2, [r3], #1
 800378a:	b112      	cbz	r2, 8003792 <_vfprintf_r+0x12a>
 800378c:	2a25      	cmp	r2, #37	; 0x25
 800378e:	f040 8083 	bne.w	8003898 <_vfprintf_r+0x230>
 8003792:	9b05      	ldr	r3, [sp, #20]
 8003794:	1aee      	subs	r6, r5, r3
 8003796:	d00d      	beq.n	80037b4 <_vfprintf_r+0x14c>
 8003798:	e884 0048 	stmia.w	r4, {r3, r6}
 800379c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800379e:	4433      	add	r3, r6
 80037a0:	9321      	str	r3, [sp, #132]	; 0x84
 80037a2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80037a4:	3301      	adds	r3, #1
 80037a6:	2b07      	cmp	r3, #7
 80037a8:	9320      	str	r3, [sp, #128]	; 0x80
 80037aa:	dc77      	bgt.n	800389c <_vfprintf_r+0x234>
 80037ac:	3408      	adds	r4, #8
 80037ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80037b0:	4433      	add	r3, r6
 80037b2:	930a      	str	r3, [sp, #40]	; 0x28
 80037b4:	782b      	ldrb	r3, [r5, #0]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	f000 8739 	beq.w	800462e <_vfprintf_r+0xfc6>
 80037bc:	2300      	movs	r3, #0
 80037be:	1c69      	adds	r1, r5, #1
 80037c0:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 80037c4:	461a      	mov	r2, r3
 80037c6:	f04f 3aff 	mov.w	sl, #4294967295
 80037ca:	930b      	str	r3, [sp, #44]	; 0x2c
 80037cc:	461d      	mov	r5, r3
 80037ce:	200a      	movs	r0, #10
 80037d0:	1c4e      	adds	r6, r1, #1
 80037d2:	7809      	ldrb	r1, [r1, #0]
 80037d4:	9605      	str	r6, [sp, #20]
 80037d6:	9102      	str	r1, [sp, #8]
 80037d8:	9902      	ldr	r1, [sp, #8]
 80037da:	3920      	subs	r1, #32
 80037dc:	2958      	cmp	r1, #88	; 0x58
 80037de:	f200 841d 	bhi.w	800401c <_vfprintf_r+0x9b4>
 80037e2:	e8df f011 	tbh	[pc, r1, lsl #1]
 80037e6:	00b3      	.short	0x00b3
 80037e8:	041b041b 	.word	0x041b041b
 80037ec:	041b00b8 	.word	0x041b00b8
 80037f0:	041b041b 	.word	0x041b041b
 80037f4:	041b041b 	.word	0x041b041b
 80037f8:	00bb041b 	.word	0x00bb041b
 80037fc:	041b0065 	.word	0x041b0065
 8003800:	00c700c4 	.word	0x00c700c4
 8003804:	00e4041b 	.word	0x00e4041b
 8003808:	00e700e7 	.word	0x00e700e7
 800380c:	00e700e7 	.word	0x00e700e7
 8003810:	00e700e7 	.word	0x00e700e7
 8003814:	00e700e7 	.word	0x00e700e7
 8003818:	041b00e7 	.word	0x041b00e7
 800381c:	041b041b 	.word	0x041b041b
 8003820:	041b041b 	.word	0x041b041b
 8003824:	041b041b 	.word	0x041b041b
 8003828:	041b041b 	.word	0x041b041b
 800382c:	011b041b 	.word	0x011b041b
 8003830:	041b0131 	.word	0x041b0131
 8003834:	041b0131 	.word	0x041b0131
 8003838:	041b041b 	.word	0x041b041b
 800383c:	00fa041b 	.word	0x00fa041b
 8003840:	041b041b 	.word	0x041b041b
 8003844:	041b0346 	.word	0x041b0346
 8003848:	041b041b 	.word	0x041b041b
 800384c:	041b041b 	.word	0x041b041b
 8003850:	041b03ad 	.word	0x041b03ad
 8003854:	0093041b 	.word	0x0093041b
 8003858:	041b041b 	.word	0x041b041b
 800385c:	041b041b 	.word	0x041b041b
 8003860:	041b041b 	.word	0x041b041b
 8003864:	041b041b 	.word	0x041b041b
 8003868:	041b041b 	.word	0x041b041b
 800386c:	006b010d 	.word	0x006b010d
 8003870:	01310131 	.word	0x01310131
 8003874:	00fd0131 	.word	0x00fd0131
 8003878:	041b006b 	.word	0x041b006b
 800387c:	0100041b 	.word	0x0100041b
 8003880:	0328041b 	.word	0x0328041b
 8003884:	037c0348 	.word	0x037c0348
 8003888:	041b0107 	.word	0x041b0107
 800388c:	041b038d 	.word	0x041b038d
 8003890:	041b03af 	.word	0x041b03af
 8003894:	03c7041b 	.word	0x03c7041b
 8003898:	461d      	mov	r5, r3
 800389a:	e773      	b.n	8003784 <_vfprintf_r+0x11c>
 800389c:	aa1f      	add	r2, sp, #124	; 0x7c
 800389e:	4641      	mov	r1, r8
 80038a0:	4658      	mov	r0, fp
 80038a2:	f002 fed4 	bl	800664e <__sprint_r>
 80038a6:	2800      	cmp	r0, #0
 80038a8:	f040 8699 	bne.w	80045de <_vfprintf_r+0xf76>
 80038ac:	ac2c      	add	r4, sp, #176	; 0xb0
 80038ae:	e77e      	b.n	80037ae <_vfprintf_r+0x146>
 80038b0:	2301      	movs	r3, #1
 80038b2:	222b      	movs	r2, #43	; 0x2b
 80038b4:	9905      	ldr	r1, [sp, #20]
 80038b6:	e78b      	b.n	80037d0 <_vfprintf_r+0x168>
 80038b8:	460f      	mov	r7, r1
 80038ba:	e7fb      	b.n	80038b4 <_vfprintf_r+0x24c>
 80038bc:	b10b      	cbz	r3, 80038c2 <_vfprintf_r+0x25a>
 80038be:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80038c2:	06aa      	lsls	r2, r5, #26
 80038c4:	f140 80b0 	bpl.w	8003a28 <_vfprintf_r+0x3c0>
 80038c8:	3707      	adds	r7, #7
 80038ca:	f027 0707 	bic.w	r7, r7, #7
 80038ce:	f107 0308 	add.w	r3, r7, #8
 80038d2:	e9d7 6700 	ldrd	r6, r7, [r7]
 80038d6:	9304      	str	r3, [sp, #16]
 80038d8:	2e00      	cmp	r6, #0
 80038da:	f177 0300 	sbcs.w	r3, r7, #0
 80038de:	da06      	bge.n	80038ee <_vfprintf_r+0x286>
 80038e0:	4276      	negs	r6, r6
 80038e2:	f04f 032d 	mov.w	r3, #45	; 0x2d
 80038e6:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 80038ea:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 80038ee:	2301      	movs	r3, #1
 80038f0:	e2d0      	b.n	8003e94 <_vfprintf_r+0x82c>
 80038f2:	bf00      	nop
 80038f4:	f3af 8000 	nop.w
	...
 8003900:	08007268 	.word	0x08007268
 8003904:	08007288 	.word	0x08007288
 8003908:	08007248 	.word	0x08007248
 800390c:	b10b      	cbz	r3, 8003912 <_vfprintf_r+0x2aa>
 800390e:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8003912:	4ba2      	ldr	r3, [pc, #648]	; (8003b9c <_vfprintf_r+0x534>)
 8003914:	9311      	str	r3, [sp, #68]	; 0x44
 8003916:	06a9      	lsls	r1, r5, #26
 8003918:	f140 8331 	bpl.w	8003f7e <_vfprintf_r+0x916>
 800391c:	3707      	adds	r7, #7
 800391e:	f027 0707 	bic.w	r7, r7, #7
 8003922:	f107 0308 	add.w	r3, r7, #8
 8003926:	e9d7 6700 	ldrd	r6, r7, [r7]
 800392a:	9304      	str	r3, [sp, #16]
 800392c:	07eb      	lsls	r3, r5, #31
 800392e:	d50b      	bpl.n	8003948 <_vfprintf_r+0x2e0>
 8003930:	ea56 0307 	orrs.w	r3, r6, r7
 8003934:	d008      	beq.n	8003948 <_vfprintf_r+0x2e0>
 8003936:	2330      	movs	r3, #48	; 0x30
 8003938:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 800393c:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8003940:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
 8003944:	f045 0502 	orr.w	r5, r5, #2
 8003948:	2302      	movs	r3, #2
 800394a:	e2a0      	b.n	8003e8e <_vfprintf_r+0x826>
 800394c:	2a00      	cmp	r2, #0
 800394e:	d1b1      	bne.n	80038b4 <_vfprintf_r+0x24c>
 8003950:	2301      	movs	r3, #1
 8003952:	2220      	movs	r2, #32
 8003954:	e7ae      	b.n	80038b4 <_vfprintf_r+0x24c>
 8003956:	f045 0501 	orr.w	r5, r5, #1
 800395a:	e7ab      	b.n	80038b4 <_vfprintf_r+0x24c>
 800395c:	683e      	ldr	r6, [r7, #0]
 800395e:	960b      	str	r6, [sp, #44]	; 0x2c
 8003960:	2e00      	cmp	r6, #0
 8003962:	f107 0104 	add.w	r1, r7, #4
 8003966:	daa7      	bge.n	80038b8 <_vfprintf_r+0x250>
 8003968:	4276      	negs	r6, r6
 800396a:	960b      	str	r6, [sp, #44]	; 0x2c
 800396c:	460f      	mov	r7, r1
 800396e:	f045 0504 	orr.w	r5, r5, #4
 8003972:	e79f      	b.n	80038b4 <_vfprintf_r+0x24c>
 8003974:	9905      	ldr	r1, [sp, #20]
 8003976:	1c4e      	adds	r6, r1, #1
 8003978:	7809      	ldrb	r1, [r1, #0]
 800397a:	9102      	str	r1, [sp, #8]
 800397c:	292a      	cmp	r1, #42	; 0x2a
 800397e:	d010      	beq.n	80039a2 <_vfprintf_r+0x33a>
 8003980:	f04f 0a00 	mov.w	sl, #0
 8003984:	9605      	str	r6, [sp, #20]
 8003986:	9902      	ldr	r1, [sp, #8]
 8003988:	3930      	subs	r1, #48	; 0x30
 800398a:	2909      	cmp	r1, #9
 800398c:	f63f af24 	bhi.w	80037d8 <_vfprintf_r+0x170>
 8003990:	fb00 1a0a 	mla	sl, r0, sl, r1
 8003994:	9905      	ldr	r1, [sp, #20]
 8003996:	460e      	mov	r6, r1
 8003998:	f816 1b01 	ldrb.w	r1, [r6], #1
 800399c:	9102      	str	r1, [sp, #8]
 800399e:	9605      	str	r6, [sp, #20]
 80039a0:	e7f1      	b.n	8003986 <_vfprintf_r+0x31e>
 80039a2:	6839      	ldr	r1, [r7, #0]
 80039a4:	9605      	str	r6, [sp, #20]
 80039a6:	ea41 7ae1 	orr.w	sl, r1, r1, asr #31
 80039aa:	3704      	adds	r7, #4
 80039ac:	e782      	b.n	80038b4 <_vfprintf_r+0x24c>
 80039ae:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 80039b2:	e77f      	b.n	80038b4 <_vfprintf_r+0x24c>
 80039b4:	2100      	movs	r1, #0
 80039b6:	910b      	str	r1, [sp, #44]	; 0x2c
 80039b8:	9902      	ldr	r1, [sp, #8]
 80039ba:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80039bc:	3930      	subs	r1, #48	; 0x30
 80039be:	fb00 1106 	mla	r1, r0, r6, r1
 80039c2:	910b      	str	r1, [sp, #44]	; 0x2c
 80039c4:	9905      	ldr	r1, [sp, #20]
 80039c6:	460e      	mov	r6, r1
 80039c8:	f816 1b01 	ldrb.w	r1, [r6], #1
 80039cc:	9102      	str	r1, [sp, #8]
 80039ce:	9902      	ldr	r1, [sp, #8]
 80039d0:	9605      	str	r6, [sp, #20]
 80039d2:	3930      	subs	r1, #48	; 0x30
 80039d4:	2909      	cmp	r1, #9
 80039d6:	d9ef      	bls.n	80039b8 <_vfprintf_r+0x350>
 80039d8:	e6fe      	b.n	80037d8 <_vfprintf_r+0x170>
 80039da:	f045 0508 	orr.w	r5, r5, #8
 80039de:	e769      	b.n	80038b4 <_vfprintf_r+0x24c>
 80039e0:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 80039e4:	e766      	b.n	80038b4 <_vfprintf_r+0x24c>
 80039e6:	9905      	ldr	r1, [sp, #20]
 80039e8:	7809      	ldrb	r1, [r1, #0]
 80039ea:	296c      	cmp	r1, #108	; 0x6c
 80039ec:	d105      	bne.n	80039fa <_vfprintf_r+0x392>
 80039ee:	9905      	ldr	r1, [sp, #20]
 80039f0:	3101      	adds	r1, #1
 80039f2:	9105      	str	r1, [sp, #20]
 80039f4:	f045 0520 	orr.w	r5, r5, #32
 80039f8:	e75c      	b.n	80038b4 <_vfprintf_r+0x24c>
 80039fa:	f045 0510 	orr.w	r5, r5, #16
 80039fe:	e759      	b.n	80038b4 <_vfprintf_r+0x24c>
 8003a00:	1d3b      	adds	r3, r7, #4
 8003a02:	9304      	str	r3, [sp, #16]
 8003a04:	2600      	movs	r6, #0
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 8003a0c:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8003a10:	f04f 0a01 	mov.w	sl, #1
 8003a14:	9608      	str	r6, [sp, #32]
 8003a16:	f10d 0988 	add.w	r9, sp, #136	; 0x88
 8003a1a:	e11e      	b.n	8003c5a <_vfprintf_r+0x5f2>
 8003a1c:	b10b      	cbz	r3, 8003a22 <_vfprintf_r+0x3ba>
 8003a1e:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8003a22:	f045 0510 	orr.w	r5, r5, #16
 8003a26:	e74c      	b.n	80038c2 <_vfprintf_r+0x25a>
 8003a28:	f015 0f10 	tst.w	r5, #16
 8003a2c:	f107 0304 	add.w	r3, r7, #4
 8003a30:	d003      	beq.n	8003a3a <_vfprintf_r+0x3d2>
 8003a32:	683e      	ldr	r6, [r7, #0]
 8003a34:	9304      	str	r3, [sp, #16]
 8003a36:	17f7      	asrs	r7, r6, #31
 8003a38:	e74e      	b.n	80038d8 <_vfprintf_r+0x270>
 8003a3a:	683e      	ldr	r6, [r7, #0]
 8003a3c:	9304      	str	r3, [sp, #16]
 8003a3e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003a42:	bf18      	it	ne
 8003a44:	b236      	sxthne	r6, r6
 8003a46:	e7f6      	b.n	8003a36 <_vfprintf_r+0x3ce>
 8003a48:	b10b      	cbz	r3, 8003a4e <_vfprintf_r+0x3e6>
 8003a4a:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8003a4e:	3707      	adds	r7, #7
 8003a50:	f027 0707 	bic.w	r7, r7, #7
 8003a54:	f107 0308 	add.w	r3, r7, #8
 8003a58:	9304      	str	r3, [sp, #16]
 8003a5a:	ed97 7b00 	vldr	d7, [r7]
 8003a5e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8003a62:	9b06      	ldr	r3, [sp, #24]
 8003a64:	9312      	str	r3, [sp, #72]	; 0x48
 8003a66:	9b07      	ldr	r3, [sp, #28]
 8003a68:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003a6c:	9313      	str	r3, [sp, #76]	; 0x4c
 8003a6e:	f04f 32ff 	mov.w	r2, #4294967295
 8003a72:	4b4b      	ldr	r3, [pc, #300]	; (8003ba0 <_vfprintf_r+0x538>)
 8003a74:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8003a78:	f7fd f854 	bl	8000b24 <__aeabi_dcmpun>
 8003a7c:	2800      	cmp	r0, #0
 8003a7e:	f040 85e3 	bne.w	8004648 <_vfprintf_r+0xfe0>
 8003a82:	f04f 32ff 	mov.w	r2, #4294967295
 8003a86:	4b46      	ldr	r3, [pc, #280]	; (8003ba0 <_vfprintf_r+0x538>)
 8003a88:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8003a8c:	f7fd f82c 	bl	8000ae8 <__aeabi_dcmple>
 8003a90:	2800      	cmp	r0, #0
 8003a92:	f040 85d9 	bne.w	8004648 <_vfprintf_r+0xfe0>
 8003a96:	2200      	movs	r2, #0
 8003a98:	2300      	movs	r3, #0
 8003a9a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003a9e:	f7fd f819 	bl	8000ad4 <__aeabi_dcmplt>
 8003aa2:	b110      	cbz	r0, 8003aaa <_vfprintf_r+0x442>
 8003aa4:	232d      	movs	r3, #45	; 0x2d
 8003aa6:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8003aaa:	4b3e      	ldr	r3, [pc, #248]	; (8003ba4 <_vfprintf_r+0x53c>)
 8003aac:	4a3e      	ldr	r2, [pc, #248]	; (8003ba8 <_vfprintf_r+0x540>)
 8003aae:	9902      	ldr	r1, [sp, #8]
 8003ab0:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 8003ab4:	2947      	cmp	r1, #71	; 0x47
 8003ab6:	bfcc      	ite	gt
 8003ab8:	4691      	movgt	r9, r2
 8003aba:	4699      	movle	r9, r3
 8003abc:	f04f 0a03 	mov.w	sl, #3
 8003ac0:	2600      	movs	r6, #0
 8003ac2:	9608      	str	r6, [sp, #32]
 8003ac4:	e0c9      	b.n	8003c5a <_vfprintf_r+0x5f2>
 8003ac6:	f1ba 3fff 	cmp.w	sl, #4294967295
 8003aca:	d022      	beq.n	8003b12 <_vfprintf_r+0x4aa>
 8003acc:	9b02      	ldr	r3, [sp, #8]
 8003ace:	f023 0320 	bic.w	r3, r3, #32
 8003ad2:	2b47      	cmp	r3, #71	; 0x47
 8003ad4:	d104      	bne.n	8003ae0 <_vfprintf_r+0x478>
 8003ad6:	f1ba 0f00 	cmp.w	sl, #0
 8003ada:	bf08      	it	eq
 8003adc:	f04f 0a01 	moveq.w	sl, #1
 8003ae0:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 8003ae4:	9314      	str	r3, [sp, #80]	; 0x50
 8003ae6:	9b07      	ldr	r3, [sp, #28]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	da15      	bge.n	8003b18 <_vfprintf_r+0x4b0>
 8003aec:	9b06      	ldr	r3, [sp, #24]
 8003aee:	930e      	str	r3, [sp, #56]	; 0x38
 8003af0:	9b07      	ldr	r3, [sp, #28]
 8003af2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003af6:	930f      	str	r3, [sp, #60]	; 0x3c
 8003af8:	232d      	movs	r3, #45	; 0x2d
 8003afa:	930c      	str	r3, [sp, #48]	; 0x30
 8003afc:	9b02      	ldr	r3, [sp, #8]
 8003afe:	f023 0720 	bic.w	r7, r3, #32
 8003b02:	2f46      	cmp	r7, #70	; 0x46
 8003b04:	d00e      	beq.n	8003b24 <_vfprintf_r+0x4bc>
 8003b06:	2f45      	cmp	r7, #69	; 0x45
 8003b08:	d146      	bne.n	8003b98 <_vfprintf_r+0x530>
 8003b0a:	f10a 0601 	add.w	r6, sl, #1
 8003b0e:	2102      	movs	r1, #2
 8003b10:	e00a      	b.n	8003b28 <_vfprintf_r+0x4c0>
 8003b12:	f04f 0a06 	mov.w	sl, #6
 8003b16:	e7e3      	b.n	8003ae0 <_vfprintf_r+0x478>
 8003b18:	ed9d 7b06 	vldr	d7, [sp, #24]
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8003b22:	e7ea      	b.n	8003afa <_vfprintf_r+0x492>
 8003b24:	4656      	mov	r6, sl
 8003b26:	2103      	movs	r1, #3
 8003b28:	ab1d      	add	r3, sp, #116	; 0x74
 8003b2a:	9301      	str	r3, [sp, #4]
 8003b2c:	ab1a      	add	r3, sp, #104	; 0x68
 8003b2e:	9300      	str	r3, [sp, #0]
 8003b30:	4632      	mov	r2, r6
 8003b32:	ab19      	add	r3, sp, #100	; 0x64
 8003b34:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 8003b38:	4658      	mov	r0, fp
 8003b3a:	f000 ff0d 	bl	8004958 <_dtoa_r>
 8003b3e:	2f47      	cmp	r7, #71	; 0x47
 8003b40:	4681      	mov	r9, r0
 8003b42:	d102      	bne.n	8003b4a <_vfprintf_r+0x4e2>
 8003b44:	07eb      	lsls	r3, r5, #31
 8003b46:	f140 858c 	bpl.w	8004662 <_vfprintf_r+0xffa>
 8003b4a:	eb09 0306 	add.w	r3, r9, r6
 8003b4e:	2f46      	cmp	r7, #70	; 0x46
 8003b50:	9303      	str	r3, [sp, #12]
 8003b52:	d111      	bne.n	8003b78 <_vfprintf_r+0x510>
 8003b54:	f899 3000 	ldrb.w	r3, [r9]
 8003b58:	2b30      	cmp	r3, #48	; 0x30
 8003b5a:	d109      	bne.n	8003b70 <_vfprintf_r+0x508>
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	2300      	movs	r3, #0
 8003b60:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8003b64:	f7fc ffac 	bl	8000ac0 <__aeabi_dcmpeq>
 8003b68:	b910      	cbnz	r0, 8003b70 <_vfprintf_r+0x508>
 8003b6a:	f1c6 0601 	rsb	r6, r6, #1
 8003b6e:	9619      	str	r6, [sp, #100]	; 0x64
 8003b70:	9a03      	ldr	r2, [sp, #12]
 8003b72:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003b74:	441a      	add	r2, r3
 8003b76:	9203      	str	r2, [sp, #12]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8003b80:	f7fc ff9e 	bl	8000ac0 <__aeabi_dcmpeq>
 8003b84:	b990      	cbnz	r0, 8003bac <_vfprintf_r+0x544>
 8003b86:	2230      	movs	r2, #48	; 0x30
 8003b88:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003b8a:	9903      	ldr	r1, [sp, #12]
 8003b8c:	4299      	cmp	r1, r3
 8003b8e:	d90f      	bls.n	8003bb0 <_vfprintf_r+0x548>
 8003b90:	1c59      	adds	r1, r3, #1
 8003b92:	911d      	str	r1, [sp, #116]	; 0x74
 8003b94:	701a      	strb	r2, [r3, #0]
 8003b96:	e7f7      	b.n	8003b88 <_vfprintf_r+0x520>
 8003b98:	4656      	mov	r6, sl
 8003b9a:	e7b8      	b.n	8003b0e <_vfprintf_r+0x4a6>
 8003b9c:	080071f4 	.word	0x080071f4
 8003ba0:	7fefffff 	.word	0x7fefffff
 8003ba4:	080071e4 	.word	0x080071e4
 8003ba8:	080071e8 	.word	0x080071e8
 8003bac:	9b03      	ldr	r3, [sp, #12]
 8003bae:	931d      	str	r3, [sp, #116]	; 0x74
 8003bb0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003bb2:	2f47      	cmp	r7, #71	; 0x47
 8003bb4:	eba3 0309 	sub.w	r3, r3, r9
 8003bb8:	9303      	str	r3, [sp, #12]
 8003bba:	f040 80f8 	bne.w	8003dae <_vfprintf_r+0x746>
 8003bbe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003bc0:	1cdf      	adds	r7, r3, #3
 8003bc2:	db02      	blt.n	8003bca <_vfprintf_r+0x562>
 8003bc4:	459a      	cmp	sl, r3
 8003bc6:	f280 811f 	bge.w	8003e08 <_vfprintf_r+0x7a0>
 8003bca:	9b02      	ldr	r3, [sp, #8]
 8003bcc:	3b02      	subs	r3, #2
 8003bce:	9302      	str	r3, [sp, #8]
 8003bd0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8003bd2:	f89d 1008 	ldrb.w	r1, [sp, #8]
 8003bd6:	f88d 106c 	strb.w	r1, [sp, #108]	; 0x6c
 8003bda:	1e53      	subs	r3, r2, #1
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	9319      	str	r3, [sp, #100]	; 0x64
 8003be0:	bfb6      	itet	lt
 8003be2:	f1c2 0301 	rsblt	r3, r2, #1
 8003be6:	222b      	movge	r2, #43	; 0x2b
 8003be8:	222d      	movlt	r2, #45	; 0x2d
 8003bea:	2b09      	cmp	r3, #9
 8003bec:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 8003bf0:	f340 80fa 	ble.w	8003de8 <_vfprintf_r+0x780>
 8003bf4:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 8003bf8:	260a      	movs	r6, #10
 8003bfa:	fb93 f0f6 	sdiv	r0, r3, r6
 8003bfe:	fb06 3310 	mls	r3, r6, r0, r3
 8003c02:	3330      	adds	r3, #48	; 0x30
 8003c04:	2809      	cmp	r0, #9
 8003c06:	f802 3c01 	strb.w	r3, [r2, #-1]
 8003c0a:	f102 31ff 	add.w	r1, r2, #4294967295
 8003c0e:	4603      	mov	r3, r0
 8003c10:	f300 80e3 	bgt.w	8003dda <_vfprintf_r+0x772>
 8003c14:	3330      	adds	r3, #48	; 0x30
 8003c16:	f801 3c01 	strb.w	r3, [r1, #-1]
 8003c1a:	3a02      	subs	r2, #2
 8003c1c:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
 8003c20:	f10d 007b 	add.w	r0, sp, #123	; 0x7b
 8003c24:	4282      	cmp	r2, r0
 8003c26:	4619      	mov	r1, r3
 8003c28:	f0c0 80d9 	bcc.w	8003dde <_vfprintf_r+0x776>
 8003c2c:	9a03      	ldr	r2, [sp, #12]
 8003c2e:	ab1b      	add	r3, sp, #108	; 0x6c
 8003c30:	1acb      	subs	r3, r1, r3
 8003c32:	2a01      	cmp	r2, #1
 8003c34:	9310      	str	r3, [sp, #64]	; 0x40
 8003c36:	eb03 0a02 	add.w	sl, r3, r2
 8003c3a:	dc03      	bgt.n	8003c44 <_vfprintf_r+0x5dc>
 8003c3c:	f015 0301 	ands.w	r3, r5, #1
 8003c40:	9308      	str	r3, [sp, #32]
 8003c42:	d003      	beq.n	8003c4c <_vfprintf_r+0x5e4>
 8003c44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c46:	449a      	add	sl, r3
 8003c48:	2300      	movs	r3, #0
 8003c4a:	9308      	str	r3, [sp, #32]
 8003c4c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003c4e:	b113      	cbz	r3, 8003c56 <_vfprintf_r+0x5ee>
 8003c50:	232d      	movs	r3, #45	; 0x2d
 8003c52:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8003c56:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8003c58:	2600      	movs	r6, #0
 8003c5a:	4556      	cmp	r6, sl
 8003c5c:	4633      	mov	r3, r6
 8003c5e:	bfb8      	it	lt
 8003c60:	4653      	movlt	r3, sl
 8003c62:	930c      	str	r3, [sp, #48]	; 0x30
 8003c64:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 8003c68:	b113      	cbz	r3, 8003c70 <_vfprintf_r+0x608>
 8003c6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003c6c:	3301      	adds	r3, #1
 8003c6e:	930c      	str	r3, [sp, #48]	; 0x30
 8003c70:	f015 0302 	ands.w	r3, r5, #2
 8003c74:	9314      	str	r3, [sp, #80]	; 0x50
 8003c76:	bf1e      	ittt	ne
 8003c78:	9b0c      	ldrne	r3, [sp, #48]	; 0x30
 8003c7a:	3302      	addne	r3, #2
 8003c7c:	930c      	strne	r3, [sp, #48]	; 0x30
 8003c7e:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 8003c82:	9315      	str	r3, [sp, #84]	; 0x54
 8003c84:	d114      	bne.n	8003cb0 <_vfprintf_r+0x648>
 8003c86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003c88:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003c8a:	1a9f      	subs	r7, r3, r2
 8003c8c:	2f00      	cmp	r7, #0
 8003c8e:	dd0f      	ble.n	8003cb0 <_vfprintf_r+0x648>
 8003c90:	4ba8      	ldr	r3, [pc, #672]	; (8003f34 <_vfprintf_r+0x8cc>)
 8003c92:	6023      	str	r3, [r4, #0]
 8003c94:	2f10      	cmp	r7, #16
 8003c96:	f300 81d3 	bgt.w	8004040 <_vfprintf_r+0x9d8>
 8003c9a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003c9c:	6067      	str	r7, [r4, #4]
 8003c9e:	441f      	add	r7, r3
 8003ca0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003ca2:	9721      	str	r7, [sp, #132]	; 0x84
 8003ca4:	3301      	adds	r3, #1
 8003ca6:	2b07      	cmp	r3, #7
 8003ca8:	9320      	str	r3, [sp, #128]	; 0x80
 8003caa:	f300 81e0 	bgt.w	800406e <_vfprintf_r+0xa06>
 8003cae:	3408      	adds	r4, #8
 8003cb0:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 8003cb4:	b173      	cbz	r3, 8003cd4 <_vfprintf_r+0x66c>
 8003cb6:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
 8003cba:	6023      	str	r3, [r4, #0]
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	6063      	str	r3, [r4, #4]
 8003cc0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003cc2:	3301      	adds	r3, #1
 8003cc4:	9321      	str	r3, [sp, #132]	; 0x84
 8003cc6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003cc8:	3301      	adds	r3, #1
 8003cca:	2b07      	cmp	r3, #7
 8003ccc:	9320      	str	r3, [sp, #128]	; 0x80
 8003cce:	f300 81d8 	bgt.w	8004082 <_vfprintf_r+0xa1a>
 8003cd2:	3408      	adds	r4, #8
 8003cd4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003cd6:	b16b      	cbz	r3, 8003cf4 <_vfprintf_r+0x68c>
 8003cd8:	ab18      	add	r3, sp, #96	; 0x60
 8003cda:	6023      	str	r3, [r4, #0]
 8003cdc:	2302      	movs	r3, #2
 8003cde:	6063      	str	r3, [r4, #4]
 8003ce0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003ce2:	3302      	adds	r3, #2
 8003ce4:	9321      	str	r3, [sp, #132]	; 0x84
 8003ce6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003ce8:	3301      	adds	r3, #1
 8003cea:	2b07      	cmp	r3, #7
 8003cec:	9320      	str	r3, [sp, #128]	; 0x80
 8003cee:	f300 81d2 	bgt.w	8004096 <_vfprintf_r+0xa2e>
 8003cf2:	3408      	adds	r4, #8
 8003cf4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003cf6:	2b80      	cmp	r3, #128	; 0x80
 8003cf8:	d114      	bne.n	8003d24 <_vfprintf_r+0x6bc>
 8003cfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003cfc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003cfe:	1a9f      	subs	r7, r3, r2
 8003d00:	2f00      	cmp	r7, #0
 8003d02:	dd0f      	ble.n	8003d24 <_vfprintf_r+0x6bc>
 8003d04:	4b8c      	ldr	r3, [pc, #560]	; (8003f38 <_vfprintf_r+0x8d0>)
 8003d06:	6023      	str	r3, [r4, #0]
 8003d08:	2f10      	cmp	r7, #16
 8003d0a:	f300 81ce 	bgt.w	80040aa <_vfprintf_r+0xa42>
 8003d0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003d10:	6067      	str	r7, [r4, #4]
 8003d12:	441f      	add	r7, r3
 8003d14:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003d16:	9721      	str	r7, [sp, #132]	; 0x84
 8003d18:	3301      	adds	r3, #1
 8003d1a:	2b07      	cmp	r3, #7
 8003d1c:	9320      	str	r3, [sp, #128]	; 0x80
 8003d1e:	f300 81dd 	bgt.w	80040dc <_vfprintf_r+0xa74>
 8003d22:	3408      	adds	r4, #8
 8003d24:	eba6 060a 	sub.w	r6, r6, sl
 8003d28:	2e00      	cmp	r6, #0
 8003d2a:	dd0f      	ble.n	8003d4c <_vfprintf_r+0x6e4>
 8003d2c:	4f82      	ldr	r7, [pc, #520]	; (8003f38 <_vfprintf_r+0x8d0>)
 8003d2e:	6027      	str	r7, [r4, #0]
 8003d30:	2e10      	cmp	r6, #16
 8003d32:	f300 81dd 	bgt.w	80040f0 <_vfprintf_r+0xa88>
 8003d36:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003d38:	9821      	ldr	r0, [sp, #132]	; 0x84
 8003d3a:	6066      	str	r6, [r4, #4]
 8003d3c:	3301      	adds	r3, #1
 8003d3e:	4406      	add	r6, r0
 8003d40:	2b07      	cmp	r3, #7
 8003d42:	9621      	str	r6, [sp, #132]	; 0x84
 8003d44:	9320      	str	r3, [sp, #128]	; 0x80
 8003d46:	f300 81ea 	bgt.w	800411e <_vfprintf_r+0xab6>
 8003d4a:	3408      	adds	r4, #8
 8003d4c:	05e9      	lsls	r1, r5, #23
 8003d4e:	f100 81f0 	bmi.w	8004132 <_vfprintf_r+0xaca>
 8003d52:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003d54:	e884 0600 	stmia.w	r4, {r9, sl}
 8003d58:	4453      	add	r3, sl
 8003d5a:	9321      	str	r3, [sp, #132]	; 0x84
 8003d5c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003d5e:	3301      	adds	r3, #1
 8003d60:	2b07      	cmp	r3, #7
 8003d62:	9320      	str	r3, [sp, #128]	; 0x80
 8003d64:	f340 841b 	ble.w	800459e <_vfprintf_r+0xf36>
 8003d68:	aa1f      	add	r2, sp, #124	; 0x7c
 8003d6a:	4641      	mov	r1, r8
 8003d6c:	4658      	mov	r0, fp
 8003d6e:	f002 fc6e 	bl	800664e <__sprint_r>
 8003d72:	2800      	cmp	r0, #0
 8003d74:	f040 8433 	bne.w	80045de <_vfprintf_r+0xf76>
 8003d78:	ac2c      	add	r4, sp, #176	; 0xb0
 8003d7a:	0768      	lsls	r0, r5, #29
 8003d7c:	f100 8412 	bmi.w	80045a4 <_vfprintf_r+0xf3c>
 8003d80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d82:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003d84:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003d86:	428a      	cmp	r2, r1
 8003d88:	bfac      	ite	ge
 8003d8a:	189b      	addge	r3, r3, r2
 8003d8c:	185b      	addlt	r3, r3, r1
 8003d8e:	930a      	str	r3, [sp, #40]	; 0x28
 8003d90:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003d92:	b13b      	cbz	r3, 8003da4 <_vfprintf_r+0x73c>
 8003d94:	aa1f      	add	r2, sp, #124	; 0x7c
 8003d96:	4641      	mov	r1, r8
 8003d98:	4658      	mov	r0, fp
 8003d9a:	f002 fc58 	bl	800664e <__sprint_r>
 8003d9e:	2800      	cmp	r0, #0
 8003da0:	f040 841d 	bne.w	80045de <_vfprintf_r+0xf76>
 8003da4:	2300      	movs	r3, #0
 8003da6:	9320      	str	r3, [sp, #128]	; 0x80
 8003da8:	9f04      	ldr	r7, [sp, #16]
 8003daa:	ac2c      	add	r4, sp, #176	; 0xb0
 8003dac:	e4e9      	b.n	8003782 <_vfprintf_r+0x11a>
 8003dae:	9b02      	ldr	r3, [sp, #8]
 8003db0:	2b65      	cmp	r3, #101	; 0x65
 8003db2:	f77f af0d 	ble.w	8003bd0 <_vfprintf_r+0x568>
 8003db6:	9b02      	ldr	r3, [sp, #8]
 8003db8:	2b66      	cmp	r3, #102	; 0x66
 8003dba:	d125      	bne.n	8003e08 <_vfprintf_r+0x7a0>
 8003dbc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	dd1a      	ble.n	8003df8 <_vfprintf_r+0x790>
 8003dc2:	f1ba 0f00 	cmp.w	sl, #0
 8003dc6:	d101      	bne.n	8003dcc <_vfprintf_r+0x764>
 8003dc8:	07ee      	lsls	r6, r5, #31
 8003dca:	d502      	bpl.n	8003dd2 <_vfprintf_r+0x76a>
 8003dcc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003dce:	4413      	add	r3, r2
 8003dd0:	4453      	add	r3, sl
 8003dd2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8003dd4:	9208      	str	r2, [sp, #32]
 8003dd6:	469a      	mov	sl, r3
 8003dd8:	e738      	b.n	8003c4c <_vfprintf_r+0x5e4>
 8003dda:	460a      	mov	r2, r1
 8003ddc:	e70d      	b.n	8003bfa <_vfprintf_r+0x592>
 8003dde:	f812 1b01 	ldrb.w	r1, [r2], #1
 8003de2:	f803 1b01 	strb.w	r1, [r3], #1
 8003de6:	e71d      	b.n	8003c24 <_vfprintf_r+0x5bc>
 8003de8:	2230      	movs	r2, #48	; 0x30
 8003dea:	4413      	add	r3, r2
 8003dec:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 8003df0:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8003df4:	a91c      	add	r1, sp, #112	; 0x70
 8003df6:	e719      	b.n	8003c2c <_vfprintf_r+0x5c4>
 8003df8:	f1ba 0f00 	cmp.w	sl, #0
 8003dfc:	d101      	bne.n	8003e02 <_vfprintf_r+0x79a>
 8003dfe:	07ed      	lsls	r5, r5, #31
 8003e00:	d515      	bpl.n	8003e2e <_vfprintf_r+0x7c6>
 8003e02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e04:	3301      	adds	r3, #1
 8003e06:	e7e3      	b.n	8003dd0 <_vfprintf_r+0x768>
 8003e08:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8003e0a:	9b03      	ldr	r3, [sp, #12]
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	db06      	blt.n	8003e1e <_vfprintf_r+0x7b6>
 8003e10:	07e8      	lsls	r0, r5, #31
 8003e12:	d50e      	bpl.n	8003e32 <_vfprintf_r+0x7ca>
 8003e14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e16:	4413      	add	r3, r2
 8003e18:	2267      	movs	r2, #103	; 0x67
 8003e1a:	9202      	str	r2, [sp, #8]
 8003e1c:	e7d9      	b.n	8003dd2 <_vfprintf_r+0x76a>
 8003e1e:	9b03      	ldr	r3, [sp, #12]
 8003e20:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003e22:	2a00      	cmp	r2, #0
 8003e24:	440b      	add	r3, r1
 8003e26:	dcf7      	bgt.n	8003e18 <_vfprintf_r+0x7b0>
 8003e28:	f1c2 0201 	rsb	r2, r2, #1
 8003e2c:	e7f3      	b.n	8003e16 <_vfprintf_r+0x7ae>
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e7cf      	b.n	8003dd2 <_vfprintf_r+0x76a>
 8003e32:	4613      	mov	r3, r2
 8003e34:	e7f0      	b.n	8003e18 <_vfprintf_r+0x7b0>
 8003e36:	b10b      	cbz	r3, 8003e3c <_vfprintf_r+0x7d4>
 8003e38:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8003e3c:	f015 0f20 	tst.w	r5, #32
 8003e40:	f107 0304 	add.w	r3, r7, #4
 8003e44:	d008      	beq.n	8003e58 <_vfprintf_r+0x7f0>
 8003e46:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003e48:	683a      	ldr	r2, [r7, #0]
 8003e4a:	17ce      	asrs	r6, r1, #31
 8003e4c:	4608      	mov	r0, r1
 8003e4e:	4631      	mov	r1, r6
 8003e50:	e9c2 0100 	strd	r0, r1, [r2]
 8003e54:	461f      	mov	r7, r3
 8003e56:	e494      	b.n	8003782 <_vfprintf_r+0x11a>
 8003e58:	06e9      	lsls	r1, r5, #27
 8003e5a:	d503      	bpl.n	8003e64 <_vfprintf_r+0x7fc>
 8003e5c:	683a      	ldr	r2, [r7, #0]
 8003e5e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003e60:	6011      	str	r1, [r2, #0]
 8003e62:	e7f7      	b.n	8003e54 <_vfprintf_r+0x7ec>
 8003e64:	066a      	lsls	r2, r5, #25
 8003e66:	d5f9      	bpl.n	8003e5c <_vfprintf_r+0x7f4>
 8003e68:	683a      	ldr	r2, [r7, #0]
 8003e6a:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 8003e6e:	8011      	strh	r1, [r2, #0]
 8003e70:	e7f0      	b.n	8003e54 <_vfprintf_r+0x7ec>
 8003e72:	f045 0510 	orr.w	r5, r5, #16
 8003e76:	f015 0320 	ands.w	r3, r5, #32
 8003e7a:	d022      	beq.n	8003ec2 <_vfprintf_r+0x85a>
 8003e7c:	3707      	adds	r7, #7
 8003e7e:	f027 0707 	bic.w	r7, r7, #7
 8003e82:	f107 0308 	add.w	r3, r7, #8
 8003e86:	e9d7 6700 	ldrd	r6, r7, [r7]
 8003e8a:	9304      	str	r3, [sp, #16]
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	2200      	movs	r2, #0
 8003e90:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8003e94:	f1ba 3fff 	cmp.w	sl, #4294967295
 8003e98:	f000 83e8 	beq.w	800466c <_vfprintf_r+0x1004>
 8003e9c:	f025 0280 	bic.w	r2, r5, #128	; 0x80
 8003ea0:	9208      	str	r2, [sp, #32]
 8003ea2:	ea56 0207 	orrs.w	r2, r6, r7
 8003ea6:	f040 83e6 	bne.w	8004676 <_vfprintf_r+0x100e>
 8003eaa:	f1ba 0f00 	cmp.w	sl, #0
 8003eae:	f000 80a9 	beq.w	8004004 <_vfprintf_r+0x99c>
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d075      	beq.n	8003fa2 <_vfprintf_r+0x93a>
 8003eb6:	2b02      	cmp	r3, #2
 8003eb8:	f000 8090 	beq.w	8003fdc <_vfprintf_r+0x974>
 8003ebc:	2600      	movs	r6, #0
 8003ebe:	2700      	movs	r7, #0
 8003ec0:	e3df      	b.n	8004682 <_vfprintf_r+0x101a>
 8003ec2:	1d3a      	adds	r2, r7, #4
 8003ec4:	f015 0110 	ands.w	r1, r5, #16
 8003ec8:	9204      	str	r2, [sp, #16]
 8003eca:	d002      	beq.n	8003ed2 <_vfprintf_r+0x86a>
 8003ecc:	683e      	ldr	r6, [r7, #0]
 8003ece:	2700      	movs	r7, #0
 8003ed0:	e7dd      	b.n	8003e8e <_vfprintf_r+0x826>
 8003ed2:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 8003ed6:	d0f9      	beq.n	8003ecc <_vfprintf_r+0x864>
 8003ed8:	883e      	ldrh	r6, [r7, #0]
 8003eda:	2700      	movs	r7, #0
 8003edc:	e7d6      	b.n	8003e8c <_vfprintf_r+0x824>
 8003ede:	1d3b      	adds	r3, r7, #4
 8003ee0:	9304      	str	r3, [sp, #16]
 8003ee2:	2330      	movs	r3, #48	; 0x30
 8003ee4:	2278      	movs	r2, #120	; 0x78
 8003ee6:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8003eea:	4b14      	ldr	r3, [pc, #80]	; (8003f3c <_vfprintf_r+0x8d4>)
 8003eec:	683e      	ldr	r6, [r7, #0]
 8003eee:	9311      	str	r3, [sp, #68]	; 0x44
 8003ef0:	2700      	movs	r7, #0
 8003ef2:	f045 0502 	orr.w	r5, r5, #2
 8003ef6:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
 8003efa:	2302      	movs	r3, #2
 8003efc:	9202      	str	r2, [sp, #8]
 8003efe:	e7c6      	b.n	8003e8e <_vfprintf_r+0x826>
 8003f00:	1d3b      	adds	r3, r7, #4
 8003f02:	2600      	movs	r6, #0
 8003f04:	f1ba 3fff 	cmp.w	sl, #4294967295
 8003f08:	9304      	str	r3, [sp, #16]
 8003f0a:	f8d7 9000 	ldr.w	r9, [r7]
 8003f0e:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8003f12:	d00a      	beq.n	8003f2a <_vfprintf_r+0x8c2>
 8003f14:	4652      	mov	r2, sl
 8003f16:	4631      	mov	r1, r6
 8003f18:	4648      	mov	r0, r9
 8003f1a:	f7fc f959 	bl	80001d0 <memchr>
 8003f1e:	2800      	cmp	r0, #0
 8003f20:	f000 808c 	beq.w	800403c <_vfprintf_r+0x9d4>
 8003f24:	eba0 0a09 	sub.w	sl, r0, r9
 8003f28:	e5cb      	b.n	8003ac2 <_vfprintf_r+0x45a>
 8003f2a:	4648      	mov	r0, r9
 8003f2c:	f7fc f9a0 	bl	8000270 <strlen>
 8003f30:	4682      	mov	sl, r0
 8003f32:	e5c6      	b.n	8003ac2 <_vfprintf_r+0x45a>
 8003f34:	08007218 	.word	0x08007218
 8003f38:	08007228 	.word	0x08007228
 8003f3c:	08007205 	.word	0x08007205
 8003f40:	f045 0510 	orr.w	r5, r5, #16
 8003f44:	06ae      	lsls	r6, r5, #26
 8003f46:	d509      	bpl.n	8003f5c <_vfprintf_r+0x8f4>
 8003f48:	3707      	adds	r7, #7
 8003f4a:	f027 0707 	bic.w	r7, r7, #7
 8003f4e:	f107 0308 	add.w	r3, r7, #8
 8003f52:	e9d7 6700 	ldrd	r6, r7, [r7]
 8003f56:	9304      	str	r3, [sp, #16]
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e798      	b.n	8003e8e <_vfprintf_r+0x826>
 8003f5c:	1d3b      	adds	r3, r7, #4
 8003f5e:	f015 0f10 	tst.w	r5, #16
 8003f62:	9304      	str	r3, [sp, #16]
 8003f64:	d001      	beq.n	8003f6a <_vfprintf_r+0x902>
 8003f66:	683e      	ldr	r6, [r7, #0]
 8003f68:	e002      	b.n	8003f70 <_vfprintf_r+0x908>
 8003f6a:	0668      	lsls	r0, r5, #25
 8003f6c:	d5fb      	bpl.n	8003f66 <_vfprintf_r+0x8fe>
 8003f6e:	883e      	ldrh	r6, [r7, #0]
 8003f70:	2700      	movs	r7, #0
 8003f72:	e7f1      	b.n	8003f58 <_vfprintf_r+0x8f0>
 8003f74:	b10b      	cbz	r3, 8003f7a <_vfprintf_r+0x912>
 8003f76:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8003f7a:	4ba2      	ldr	r3, [pc, #648]	; (8004204 <_vfprintf_r+0xb9c>)
 8003f7c:	e4ca      	b.n	8003914 <_vfprintf_r+0x2ac>
 8003f7e:	1d3b      	adds	r3, r7, #4
 8003f80:	f015 0f10 	tst.w	r5, #16
 8003f84:	9304      	str	r3, [sp, #16]
 8003f86:	d001      	beq.n	8003f8c <_vfprintf_r+0x924>
 8003f88:	683e      	ldr	r6, [r7, #0]
 8003f8a:	e002      	b.n	8003f92 <_vfprintf_r+0x92a>
 8003f8c:	066a      	lsls	r2, r5, #25
 8003f8e:	d5fb      	bpl.n	8003f88 <_vfprintf_r+0x920>
 8003f90:	883e      	ldrh	r6, [r7, #0]
 8003f92:	2700      	movs	r7, #0
 8003f94:	e4ca      	b.n	800392c <_vfprintf_r+0x2c4>
 8003f96:	464b      	mov	r3, r9
 8003f98:	e374      	b.n	8004684 <_vfprintf_r+0x101c>
 8003f9a:	2f00      	cmp	r7, #0
 8003f9c:	bf08      	it	eq
 8003f9e:	2e0a      	cmpeq	r6, #10
 8003fa0:	d205      	bcs.n	8003fae <_vfprintf_r+0x946>
 8003fa2:	f10d 09f0 	add.w	r9, sp, #240	; 0xf0
 8003fa6:	3630      	adds	r6, #48	; 0x30
 8003fa8:	f809 6d41 	strb.w	r6, [r9, #-65]!
 8003fac:	e385      	b.n	80046ba <_vfprintf_r+0x1052>
 8003fae:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 8003fb2:	4630      	mov	r0, r6
 8003fb4:	4639      	mov	r1, r7
 8003fb6:	220a      	movs	r2, #10
 8003fb8:	2300      	movs	r3, #0
 8003fba:	f7fc fdf1 	bl	8000ba0 <__aeabi_uldivmod>
 8003fbe:	3230      	adds	r2, #48	; 0x30
 8003fc0:	f809 2d01 	strb.w	r2, [r9, #-1]!
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	4630      	mov	r0, r6
 8003fc8:	4639      	mov	r1, r7
 8003fca:	220a      	movs	r2, #10
 8003fcc:	f7fc fde8 	bl	8000ba0 <__aeabi_uldivmod>
 8003fd0:	4606      	mov	r6, r0
 8003fd2:	460f      	mov	r7, r1
 8003fd4:	ea56 0307 	orrs.w	r3, r6, r7
 8003fd8:	d1eb      	bne.n	8003fb2 <_vfprintf_r+0x94a>
 8003fda:	e36e      	b.n	80046ba <_vfprintf_r+0x1052>
 8003fdc:	2600      	movs	r6, #0
 8003fde:	2700      	movs	r7, #0
 8003fe0:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 8003fe4:	f006 030f 	and.w	r3, r6, #15
 8003fe8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8003fea:	5cd3      	ldrb	r3, [r2, r3]
 8003fec:	f809 3d01 	strb.w	r3, [r9, #-1]!
 8003ff0:	0933      	lsrs	r3, r6, #4
 8003ff2:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8003ff6:	093a      	lsrs	r2, r7, #4
 8003ff8:	461e      	mov	r6, r3
 8003ffa:	4617      	mov	r7, r2
 8003ffc:	ea56 0307 	orrs.w	r3, r6, r7
 8004000:	d1f0      	bne.n	8003fe4 <_vfprintf_r+0x97c>
 8004002:	e35a      	b.n	80046ba <_vfprintf_r+0x1052>
 8004004:	b93b      	cbnz	r3, 8004016 <_vfprintf_r+0x9ae>
 8004006:	07e8      	lsls	r0, r5, #31
 8004008:	d505      	bpl.n	8004016 <_vfprintf_r+0x9ae>
 800400a:	f10d 09f0 	add.w	r9, sp, #240	; 0xf0
 800400e:	2330      	movs	r3, #48	; 0x30
 8004010:	f809 3d41 	strb.w	r3, [r9, #-65]!
 8004014:	e351      	b.n	80046ba <_vfprintf_r+0x1052>
 8004016:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 800401a:	e34e      	b.n	80046ba <_vfprintf_r+0x1052>
 800401c:	b10b      	cbz	r3, 8004022 <_vfprintf_r+0x9ba>
 800401e:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8004022:	9b02      	ldr	r3, [sp, #8]
 8004024:	2b00      	cmp	r3, #0
 8004026:	f000 8302 	beq.w	800462e <_vfprintf_r+0xfc6>
 800402a:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800402e:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 8004032:	2600      	movs	r6, #0
 8004034:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8004038:	9704      	str	r7, [sp, #16]
 800403a:	e4e9      	b.n	8003a10 <_vfprintf_r+0x3a8>
 800403c:	4606      	mov	r6, r0
 800403e:	e540      	b.n	8003ac2 <_vfprintf_r+0x45a>
 8004040:	2310      	movs	r3, #16
 8004042:	6063      	str	r3, [r4, #4]
 8004044:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004046:	3310      	adds	r3, #16
 8004048:	9321      	str	r3, [sp, #132]	; 0x84
 800404a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800404c:	3301      	adds	r3, #1
 800404e:	2b07      	cmp	r3, #7
 8004050:	9320      	str	r3, [sp, #128]	; 0x80
 8004052:	dc02      	bgt.n	800405a <_vfprintf_r+0x9f2>
 8004054:	3408      	adds	r4, #8
 8004056:	3f10      	subs	r7, #16
 8004058:	e61a      	b.n	8003c90 <_vfprintf_r+0x628>
 800405a:	aa1f      	add	r2, sp, #124	; 0x7c
 800405c:	4641      	mov	r1, r8
 800405e:	4658      	mov	r0, fp
 8004060:	f002 faf5 	bl	800664e <__sprint_r>
 8004064:	2800      	cmp	r0, #0
 8004066:	f040 82ba 	bne.w	80045de <_vfprintf_r+0xf76>
 800406a:	ac2c      	add	r4, sp, #176	; 0xb0
 800406c:	e7f3      	b.n	8004056 <_vfprintf_r+0x9ee>
 800406e:	aa1f      	add	r2, sp, #124	; 0x7c
 8004070:	4641      	mov	r1, r8
 8004072:	4658      	mov	r0, fp
 8004074:	f002 faeb 	bl	800664e <__sprint_r>
 8004078:	2800      	cmp	r0, #0
 800407a:	f040 82b0 	bne.w	80045de <_vfprintf_r+0xf76>
 800407e:	ac2c      	add	r4, sp, #176	; 0xb0
 8004080:	e616      	b.n	8003cb0 <_vfprintf_r+0x648>
 8004082:	aa1f      	add	r2, sp, #124	; 0x7c
 8004084:	4641      	mov	r1, r8
 8004086:	4658      	mov	r0, fp
 8004088:	f002 fae1 	bl	800664e <__sprint_r>
 800408c:	2800      	cmp	r0, #0
 800408e:	f040 82a6 	bne.w	80045de <_vfprintf_r+0xf76>
 8004092:	ac2c      	add	r4, sp, #176	; 0xb0
 8004094:	e61e      	b.n	8003cd4 <_vfprintf_r+0x66c>
 8004096:	aa1f      	add	r2, sp, #124	; 0x7c
 8004098:	4641      	mov	r1, r8
 800409a:	4658      	mov	r0, fp
 800409c:	f002 fad7 	bl	800664e <__sprint_r>
 80040a0:	2800      	cmp	r0, #0
 80040a2:	f040 829c 	bne.w	80045de <_vfprintf_r+0xf76>
 80040a6:	ac2c      	add	r4, sp, #176	; 0xb0
 80040a8:	e624      	b.n	8003cf4 <_vfprintf_r+0x68c>
 80040aa:	2210      	movs	r2, #16
 80040ac:	6062      	str	r2, [r4, #4]
 80040ae:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80040b0:	3210      	adds	r2, #16
 80040b2:	9221      	str	r2, [sp, #132]	; 0x84
 80040b4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80040b6:	3201      	adds	r2, #1
 80040b8:	2a07      	cmp	r2, #7
 80040ba:	9220      	str	r2, [sp, #128]	; 0x80
 80040bc:	dc02      	bgt.n	80040c4 <_vfprintf_r+0xa5c>
 80040be:	3408      	adds	r4, #8
 80040c0:	3f10      	subs	r7, #16
 80040c2:	e620      	b.n	8003d06 <_vfprintf_r+0x69e>
 80040c4:	aa1f      	add	r2, sp, #124	; 0x7c
 80040c6:	4641      	mov	r1, r8
 80040c8:	4658      	mov	r0, fp
 80040ca:	9314      	str	r3, [sp, #80]	; 0x50
 80040cc:	f002 fabf 	bl	800664e <__sprint_r>
 80040d0:	2800      	cmp	r0, #0
 80040d2:	f040 8284 	bne.w	80045de <_vfprintf_r+0xf76>
 80040d6:	ac2c      	add	r4, sp, #176	; 0xb0
 80040d8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80040da:	e7f1      	b.n	80040c0 <_vfprintf_r+0xa58>
 80040dc:	aa1f      	add	r2, sp, #124	; 0x7c
 80040de:	4641      	mov	r1, r8
 80040e0:	4658      	mov	r0, fp
 80040e2:	f002 fab4 	bl	800664e <__sprint_r>
 80040e6:	2800      	cmp	r0, #0
 80040e8:	f040 8279 	bne.w	80045de <_vfprintf_r+0xf76>
 80040ec:	ac2c      	add	r4, sp, #176	; 0xb0
 80040ee:	e619      	b.n	8003d24 <_vfprintf_r+0x6bc>
 80040f0:	2310      	movs	r3, #16
 80040f2:	6063      	str	r3, [r4, #4]
 80040f4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80040f6:	3310      	adds	r3, #16
 80040f8:	9321      	str	r3, [sp, #132]	; 0x84
 80040fa:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80040fc:	3301      	adds	r3, #1
 80040fe:	2b07      	cmp	r3, #7
 8004100:	9320      	str	r3, [sp, #128]	; 0x80
 8004102:	dc02      	bgt.n	800410a <_vfprintf_r+0xaa2>
 8004104:	3408      	adds	r4, #8
 8004106:	3e10      	subs	r6, #16
 8004108:	e611      	b.n	8003d2e <_vfprintf_r+0x6c6>
 800410a:	aa1f      	add	r2, sp, #124	; 0x7c
 800410c:	4641      	mov	r1, r8
 800410e:	4658      	mov	r0, fp
 8004110:	f002 fa9d 	bl	800664e <__sprint_r>
 8004114:	2800      	cmp	r0, #0
 8004116:	f040 8262 	bne.w	80045de <_vfprintf_r+0xf76>
 800411a:	ac2c      	add	r4, sp, #176	; 0xb0
 800411c:	e7f3      	b.n	8004106 <_vfprintf_r+0xa9e>
 800411e:	aa1f      	add	r2, sp, #124	; 0x7c
 8004120:	4641      	mov	r1, r8
 8004122:	4658      	mov	r0, fp
 8004124:	f002 fa93 	bl	800664e <__sprint_r>
 8004128:	2800      	cmp	r0, #0
 800412a:	f040 8258 	bne.w	80045de <_vfprintf_r+0xf76>
 800412e:	ac2c      	add	r4, sp, #176	; 0xb0
 8004130:	e60c      	b.n	8003d4c <_vfprintf_r+0x6e4>
 8004132:	9b02      	ldr	r3, [sp, #8]
 8004134:	2b65      	cmp	r3, #101	; 0x65
 8004136:	f340 81ad 	ble.w	8004494 <_vfprintf_r+0xe2c>
 800413a:	2200      	movs	r2, #0
 800413c:	2300      	movs	r3, #0
 800413e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004142:	f7fc fcbd 	bl	8000ac0 <__aeabi_dcmpeq>
 8004146:	2800      	cmp	r0, #0
 8004148:	d062      	beq.n	8004210 <_vfprintf_r+0xba8>
 800414a:	4b2f      	ldr	r3, [pc, #188]	; (8004208 <_vfprintf_r+0xba0>)
 800414c:	6023      	str	r3, [r4, #0]
 800414e:	2301      	movs	r3, #1
 8004150:	6063      	str	r3, [r4, #4]
 8004152:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004154:	3301      	adds	r3, #1
 8004156:	9321      	str	r3, [sp, #132]	; 0x84
 8004158:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800415a:	3301      	adds	r3, #1
 800415c:	2b07      	cmp	r3, #7
 800415e:	9320      	str	r3, [sp, #128]	; 0x80
 8004160:	dc25      	bgt.n	80041ae <_vfprintf_r+0xb46>
 8004162:	3408      	adds	r4, #8
 8004164:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004166:	9a03      	ldr	r2, [sp, #12]
 8004168:	4293      	cmp	r3, r2
 800416a:	db02      	blt.n	8004172 <_vfprintf_r+0xb0a>
 800416c:	07ea      	lsls	r2, r5, #31
 800416e:	f57f ae04 	bpl.w	8003d7a <_vfprintf_r+0x712>
 8004172:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004174:	6023      	str	r3, [r4, #0]
 8004176:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004178:	6063      	str	r3, [r4, #4]
 800417a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800417c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800417e:	4413      	add	r3, r2
 8004180:	9321      	str	r3, [sp, #132]	; 0x84
 8004182:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004184:	3301      	adds	r3, #1
 8004186:	2b07      	cmp	r3, #7
 8004188:	9320      	str	r3, [sp, #128]	; 0x80
 800418a:	dc1a      	bgt.n	80041c2 <_vfprintf_r+0xb5a>
 800418c:	3408      	adds	r4, #8
 800418e:	9b03      	ldr	r3, [sp, #12]
 8004190:	1e5e      	subs	r6, r3, #1
 8004192:	2e00      	cmp	r6, #0
 8004194:	f77f adf1 	ble.w	8003d7a <_vfprintf_r+0x712>
 8004198:	4f1c      	ldr	r7, [pc, #112]	; (800420c <_vfprintf_r+0xba4>)
 800419a:	f04f 0910 	mov.w	r9, #16
 800419e:	2e10      	cmp	r6, #16
 80041a0:	6027      	str	r7, [r4, #0]
 80041a2:	dc18      	bgt.n	80041d6 <_vfprintf_r+0xb6e>
 80041a4:	6066      	str	r6, [r4, #4]
 80041a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80041a8:	441e      	add	r6, r3
 80041aa:	9621      	str	r6, [sp, #132]	; 0x84
 80041ac:	e5d6      	b.n	8003d5c <_vfprintf_r+0x6f4>
 80041ae:	aa1f      	add	r2, sp, #124	; 0x7c
 80041b0:	4641      	mov	r1, r8
 80041b2:	4658      	mov	r0, fp
 80041b4:	f002 fa4b 	bl	800664e <__sprint_r>
 80041b8:	2800      	cmp	r0, #0
 80041ba:	f040 8210 	bne.w	80045de <_vfprintf_r+0xf76>
 80041be:	ac2c      	add	r4, sp, #176	; 0xb0
 80041c0:	e7d0      	b.n	8004164 <_vfprintf_r+0xafc>
 80041c2:	aa1f      	add	r2, sp, #124	; 0x7c
 80041c4:	4641      	mov	r1, r8
 80041c6:	4658      	mov	r0, fp
 80041c8:	f002 fa41 	bl	800664e <__sprint_r>
 80041cc:	2800      	cmp	r0, #0
 80041ce:	f040 8206 	bne.w	80045de <_vfprintf_r+0xf76>
 80041d2:	ac2c      	add	r4, sp, #176	; 0xb0
 80041d4:	e7db      	b.n	800418e <_vfprintf_r+0xb26>
 80041d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80041d8:	f8c4 9004 	str.w	r9, [r4, #4]
 80041dc:	3310      	adds	r3, #16
 80041de:	9321      	str	r3, [sp, #132]	; 0x84
 80041e0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80041e2:	3301      	adds	r3, #1
 80041e4:	2b07      	cmp	r3, #7
 80041e6:	9320      	str	r3, [sp, #128]	; 0x80
 80041e8:	dc02      	bgt.n	80041f0 <_vfprintf_r+0xb88>
 80041ea:	3408      	adds	r4, #8
 80041ec:	3e10      	subs	r6, #16
 80041ee:	e7d6      	b.n	800419e <_vfprintf_r+0xb36>
 80041f0:	aa1f      	add	r2, sp, #124	; 0x7c
 80041f2:	4641      	mov	r1, r8
 80041f4:	4658      	mov	r0, fp
 80041f6:	f002 fa2a 	bl	800664e <__sprint_r>
 80041fa:	2800      	cmp	r0, #0
 80041fc:	f040 81ef 	bne.w	80045de <_vfprintf_r+0xf76>
 8004200:	ac2c      	add	r4, sp, #176	; 0xb0
 8004202:	e7f3      	b.n	80041ec <_vfprintf_r+0xb84>
 8004204:	08007205 	.word	0x08007205
 8004208:	08007216 	.word	0x08007216
 800420c:	08007228 	.word	0x08007228
 8004210:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004212:	2b00      	cmp	r3, #0
 8004214:	dc7a      	bgt.n	800430c <_vfprintf_r+0xca4>
 8004216:	4b9d      	ldr	r3, [pc, #628]	; (800448c <_vfprintf_r+0xe24>)
 8004218:	6023      	str	r3, [r4, #0]
 800421a:	2301      	movs	r3, #1
 800421c:	6063      	str	r3, [r4, #4]
 800421e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004220:	3301      	adds	r3, #1
 8004222:	9321      	str	r3, [sp, #132]	; 0x84
 8004224:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004226:	3301      	adds	r3, #1
 8004228:	2b07      	cmp	r3, #7
 800422a:	9320      	str	r3, [sp, #128]	; 0x80
 800422c:	dc44      	bgt.n	80042b8 <_vfprintf_r+0xc50>
 800422e:	3408      	adds	r4, #8
 8004230:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004232:	b923      	cbnz	r3, 800423e <_vfprintf_r+0xbd6>
 8004234:	9b03      	ldr	r3, [sp, #12]
 8004236:	b913      	cbnz	r3, 800423e <_vfprintf_r+0xbd6>
 8004238:	07eb      	lsls	r3, r5, #31
 800423a:	f57f ad9e 	bpl.w	8003d7a <_vfprintf_r+0x712>
 800423e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004240:	6023      	str	r3, [r4, #0]
 8004242:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004244:	6063      	str	r3, [r4, #4]
 8004246:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004248:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800424a:	4413      	add	r3, r2
 800424c:	9321      	str	r3, [sp, #132]	; 0x84
 800424e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004250:	3301      	adds	r3, #1
 8004252:	2b07      	cmp	r3, #7
 8004254:	9320      	str	r3, [sp, #128]	; 0x80
 8004256:	dc39      	bgt.n	80042cc <_vfprintf_r+0xc64>
 8004258:	f104 0308 	add.w	r3, r4, #8
 800425c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800425e:	2e00      	cmp	r6, #0
 8004260:	da19      	bge.n	8004296 <_vfprintf_r+0xc2e>
 8004262:	4f8b      	ldr	r7, [pc, #556]	; (8004490 <_vfprintf_r+0xe28>)
 8004264:	4276      	negs	r6, r6
 8004266:	2410      	movs	r4, #16
 8004268:	2e10      	cmp	r6, #16
 800426a:	601f      	str	r7, [r3, #0]
 800426c:	dc38      	bgt.n	80042e0 <_vfprintf_r+0xc78>
 800426e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004270:	605e      	str	r6, [r3, #4]
 8004272:	4416      	add	r6, r2
 8004274:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004276:	9621      	str	r6, [sp, #132]	; 0x84
 8004278:	3201      	adds	r2, #1
 800427a:	2a07      	cmp	r2, #7
 800427c:	f103 0308 	add.w	r3, r3, #8
 8004280:	9220      	str	r2, [sp, #128]	; 0x80
 8004282:	dd08      	ble.n	8004296 <_vfprintf_r+0xc2e>
 8004284:	aa1f      	add	r2, sp, #124	; 0x7c
 8004286:	4641      	mov	r1, r8
 8004288:	4658      	mov	r0, fp
 800428a:	f002 f9e0 	bl	800664e <__sprint_r>
 800428e:	2800      	cmp	r0, #0
 8004290:	f040 81a5 	bne.w	80045de <_vfprintf_r+0xf76>
 8004294:	ab2c      	add	r3, sp, #176	; 0xb0
 8004296:	9a03      	ldr	r2, [sp, #12]
 8004298:	605a      	str	r2, [r3, #4]
 800429a:	9903      	ldr	r1, [sp, #12]
 800429c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800429e:	f8c3 9000 	str.w	r9, [r3]
 80042a2:	440a      	add	r2, r1
 80042a4:	9221      	str	r2, [sp, #132]	; 0x84
 80042a6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80042a8:	3201      	adds	r2, #1
 80042aa:	2a07      	cmp	r2, #7
 80042ac:	9220      	str	r2, [sp, #128]	; 0x80
 80042ae:	f73f ad5b 	bgt.w	8003d68 <_vfprintf_r+0x700>
 80042b2:	f103 0408 	add.w	r4, r3, #8
 80042b6:	e560      	b.n	8003d7a <_vfprintf_r+0x712>
 80042b8:	aa1f      	add	r2, sp, #124	; 0x7c
 80042ba:	4641      	mov	r1, r8
 80042bc:	4658      	mov	r0, fp
 80042be:	f002 f9c6 	bl	800664e <__sprint_r>
 80042c2:	2800      	cmp	r0, #0
 80042c4:	f040 818b 	bne.w	80045de <_vfprintf_r+0xf76>
 80042c8:	ac2c      	add	r4, sp, #176	; 0xb0
 80042ca:	e7b1      	b.n	8004230 <_vfprintf_r+0xbc8>
 80042cc:	aa1f      	add	r2, sp, #124	; 0x7c
 80042ce:	4641      	mov	r1, r8
 80042d0:	4658      	mov	r0, fp
 80042d2:	f002 f9bc 	bl	800664e <__sprint_r>
 80042d6:	2800      	cmp	r0, #0
 80042d8:	f040 8181 	bne.w	80045de <_vfprintf_r+0xf76>
 80042dc:	ab2c      	add	r3, sp, #176	; 0xb0
 80042de:	e7bd      	b.n	800425c <_vfprintf_r+0xbf4>
 80042e0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80042e2:	605c      	str	r4, [r3, #4]
 80042e4:	3210      	adds	r2, #16
 80042e6:	9221      	str	r2, [sp, #132]	; 0x84
 80042e8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80042ea:	3201      	adds	r2, #1
 80042ec:	2a07      	cmp	r2, #7
 80042ee:	9220      	str	r2, [sp, #128]	; 0x80
 80042f0:	dc02      	bgt.n	80042f8 <_vfprintf_r+0xc90>
 80042f2:	3308      	adds	r3, #8
 80042f4:	3e10      	subs	r6, #16
 80042f6:	e7b7      	b.n	8004268 <_vfprintf_r+0xc00>
 80042f8:	aa1f      	add	r2, sp, #124	; 0x7c
 80042fa:	4641      	mov	r1, r8
 80042fc:	4658      	mov	r0, fp
 80042fe:	f002 f9a6 	bl	800664e <__sprint_r>
 8004302:	2800      	cmp	r0, #0
 8004304:	f040 816b 	bne.w	80045de <_vfprintf_r+0xf76>
 8004308:	ab2c      	add	r3, sp, #176	; 0xb0
 800430a:	e7f3      	b.n	80042f4 <_vfprintf_r+0xc8c>
 800430c:	9b08      	ldr	r3, [sp, #32]
 800430e:	9a03      	ldr	r2, [sp, #12]
 8004310:	4293      	cmp	r3, r2
 8004312:	bfa8      	it	ge
 8004314:	4613      	movge	r3, r2
 8004316:	2b00      	cmp	r3, #0
 8004318:	461e      	mov	r6, r3
 800431a:	dd0b      	ble.n	8004334 <_vfprintf_r+0xccc>
 800431c:	6063      	str	r3, [r4, #4]
 800431e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004320:	f8c4 9000 	str.w	r9, [r4]
 8004324:	4433      	add	r3, r6
 8004326:	9321      	str	r3, [sp, #132]	; 0x84
 8004328:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800432a:	3301      	adds	r3, #1
 800432c:	2b07      	cmp	r3, #7
 800432e:	9320      	str	r3, [sp, #128]	; 0x80
 8004330:	dc62      	bgt.n	80043f8 <_vfprintf_r+0xd90>
 8004332:	3408      	adds	r4, #8
 8004334:	9b08      	ldr	r3, [sp, #32]
 8004336:	2e00      	cmp	r6, #0
 8004338:	bfa8      	it	ge
 800433a:	1b9b      	subge	r3, r3, r6
 800433c:	2b00      	cmp	r3, #0
 800433e:	461e      	mov	r6, r3
 8004340:	dd0f      	ble.n	8004362 <_vfprintf_r+0xcfa>
 8004342:	4f53      	ldr	r7, [pc, #332]	; (8004490 <_vfprintf_r+0xe28>)
 8004344:	f04f 0a10 	mov.w	sl, #16
 8004348:	2e10      	cmp	r6, #16
 800434a:	6027      	str	r7, [r4, #0]
 800434c:	dc5e      	bgt.n	800440c <_vfprintf_r+0xda4>
 800434e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004350:	6066      	str	r6, [r4, #4]
 8004352:	441e      	add	r6, r3
 8004354:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004356:	9621      	str	r6, [sp, #132]	; 0x84
 8004358:	3301      	adds	r3, #1
 800435a:	2b07      	cmp	r3, #7
 800435c:	9320      	str	r3, [sp, #128]	; 0x80
 800435e:	dc6c      	bgt.n	800443a <_vfprintf_r+0xdd2>
 8004360:	3408      	adds	r4, #8
 8004362:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004364:	9a03      	ldr	r2, [sp, #12]
 8004366:	4293      	cmp	r3, r2
 8004368:	db01      	blt.n	800436e <_vfprintf_r+0xd06>
 800436a:	07ef      	lsls	r7, r5, #31
 800436c:	d50d      	bpl.n	800438a <_vfprintf_r+0xd22>
 800436e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004370:	6023      	str	r3, [r4, #0]
 8004372:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004374:	6063      	str	r3, [r4, #4]
 8004376:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004378:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800437a:	4413      	add	r3, r2
 800437c:	9321      	str	r3, [sp, #132]	; 0x84
 800437e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004380:	3301      	adds	r3, #1
 8004382:	2b07      	cmp	r3, #7
 8004384:	9320      	str	r3, [sp, #128]	; 0x80
 8004386:	dc62      	bgt.n	800444e <_vfprintf_r+0xde6>
 8004388:	3408      	adds	r4, #8
 800438a:	9b03      	ldr	r3, [sp, #12]
 800438c:	9a08      	ldr	r2, [sp, #32]
 800438e:	1a9e      	subs	r6, r3, r2
 8004390:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004392:	9a03      	ldr	r2, [sp, #12]
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	429e      	cmp	r6, r3
 8004398:	bfa8      	it	ge
 800439a:	461e      	movge	r6, r3
 800439c:	2e00      	cmp	r6, #0
 800439e:	dd0c      	ble.n	80043ba <_vfprintf_r+0xd52>
 80043a0:	9b08      	ldr	r3, [sp, #32]
 80043a2:	444b      	add	r3, r9
 80043a4:	e884 0048 	stmia.w	r4, {r3, r6}
 80043a8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80043aa:	4433      	add	r3, r6
 80043ac:	9321      	str	r3, [sp, #132]	; 0x84
 80043ae:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80043b0:	3301      	adds	r3, #1
 80043b2:	2b07      	cmp	r3, #7
 80043b4:	9320      	str	r3, [sp, #128]	; 0x80
 80043b6:	dc54      	bgt.n	8004462 <_vfprintf_r+0xdfa>
 80043b8:	3408      	adds	r4, #8
 80043ba:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80043bc:	9a03      	ldr	r2, [sp, #12]
 80043be:	2e00      	cmp	r6, #0
 80043c0:	eba2 0303 	sub.w	r3, r2, r3
 80043c4:	bfac      	ite	ge
 80043c6:	1b9e      	subge	r6, r3, r6
 80043c8:	461e      	movlt	r6, r3
 80043ca:	2e00      	cmp	r6, #0
 80043cc:	f77f acd5 	ble.w	8003d7a <_vfprintf_r+0x712>
 80043d0:	4f2f      	ldr	r7, [pc, #188]	; (8004490 <_vfprintf_r+0xe28>)
 80043d2:	f04f 0910 	mov.w	r9, #16
 80043d6:	2e10      	cmp	r6, #16
 80043d8:	6027      	str	r7, [r4, #0]
 80043da:	f77f aee3 	ble.w	80041a4 <_vfprintf_r+0xb3c>
 80043de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80043e0:	f8c4 9004 	str.w	r9, [r4, #4]
 80043e4:	3310      	adds	r3, #16
 80043e6:	9321      	str	r3, [sp, #132]	; 0x84
 80043e8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80043ea:	3301      	adds	r3, #1
 80043ec:	2b07      	cmp	r3, #7
 80043ee:	9320      	str	r3, [sp, #128]	; 0x80
 80043f0:	dc41      	bgt.n	8004476 <_vfprintf_r+0xe0e>
 80043f2:	3408      	adds	r4, #8
 80043f4:	3e10      	subs	r6, #16
 80043f6:	e7ee      	b.n	80043d6 <_vfprintf_r+0xd6e>
 80043f8:	aa1f      	add	r2, sp, #124	; 0x7c
 80043fa:	4641      	mov	r1, r8
 80043fc:	4658      	mov	r0, fp
 80043fe:	f002 f926 	bl	800664e <__sprint_r>
 8004402:	2800      	cmp	r0, #0
 8004404:	f040 80eb 	bne.w	80045de <_vfprintf_r+0xf76>
 8004408:	ac2c      	add	r4, sp, #176	; 0xb0
 800440a:	e793      	b.n	8004334 <_vfprintf_r+0xccc>
 800440c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800440e:	f8c4 a004 	str.w	sl, [r4, #4]
 8004412:	3310      	adds	r3, #16
 8004414:	9321      	str	r3, [sp, #132]	; 0x84
 8004416:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004418:	3301      	adds	r3, #1
 800441a:	2b07      	cmp	r3, #7
 800441c:	9320      	str	r3, [sp, #128]	; 0x80
 800441e:	dc02      	bgt.n	8004426 <_vfprintf_r+0xdbe>
 8004420:	3408      	adds	r4, #8
 8004422:	3e10      	subs	r6, #16
 8004424:	e790      	b.n	8004348 <_vfprintf_r+0xce0>
 8004426:	aa1f      	add	r2, sp, #124	; 0x7c
 8004428:	4641      	mov	r1, r8
 800442a:	4658      	mov	r0, fp
 800442c:	f002 f90f 	bl	800664e <__sprint_r>
 8004430:	2800      	cmp	r0, #0
 8004432:	f040 80d4 	bne.w	80045de <_vfprintf_r+0xf76>
 8004436:	ac2c      	add	r4, sp, #176	; 0xb0
 8004438:	e7f3      	b.n	8004422 <_vfprintf_r+0xdba>
 800443a:	aa1f      	add	r2, sp, #124	; 0x7c
 800443c:	4641      	mov	r1, r8
 800443e:	4658      	mov	r0, fp
 8004440:	f002 f905 	bl	800664e <__sprint_r>
 8004444:	2800      	cmp	r0, #0
 8004446:	f040 80ca 	bne.w	80045de <_vfprintf_r+0xf76>
 800444a:	ac2c      	add	r4, sp, #176	; 0xb0
 800444c:	e789      	b.n	8004362 <_vfprintf_r+0xcfa>
 800444e:	aa1f      	add	r2, sp, #124	; 0x7c
 8004450:	4641      	mov	r1, r8
 8004452:	4658      	mov	r0, fp
 8004454:	f002 f8fb 	bl	800664e <__sprint_r>
 8004458:	2800      	cmp	r0, #0
 800445a:	f040 80c0 	bne.w	80045de <_vfprintf_r+0xf76>
 800445e:	ac2c      	add	r4, sp, #176	; 0xb0
 8004460:	e793      	b.n	800438a <_vfprintf_r+0xd22>
 8004462:	aa1f      	add	r2, sp, #124	; 0x7c
 8004464:	4641      	mov	r1, r8
 8004466:	4658      	mov	r0, fp
 8004468:	f002 f8f1 	bl	800664e <__sprint_r>
 800446c:	2800      	cmp	r0, #0
 800446e:	f040 80b6 	bne.w	80045de <_vfprintf_r+0xf76>
 8004472:	ac2c      	add	r4, sp, #176	; 0xb0
 8004474:	e7a1      	b.n	80043ba <_vfprintf_r+0xd52>
 8004476:	aa1f      	add	r2, sp, #124	; 0x7c
 8004478:	4641      	mov	r1, r8
 800447a:	4658      	mov	r0, fp
 800447c:	f002 f8e7 	bl	800664e <__sprint_r>
 8004480:	2800      	cmp	r0, #0
 8004482:	f040 80ac 	bne.w	80045de <_vfprintf_r+0xf76>
 8004486:	ac2c      	add	r4, sp, #176	; 0xb0
 8004488:	e7b4      	b.n	80043f4 <_vfprintf_r+0xd8c>
 800448a:	bf00      	nop
 800448c:	08007216 	.word	0x08007216
 8004490:	08007228 	.word	0x08007228
 8004494:	9b03      	ldr	r3, [sp, #12]
 8004496:	2b01      	cmp	r3, #1
 8004498:	dc01      	bgt.n	800449e <_vfprintf_r+0xe36>
 800449a:	07ee      	lsls	r6, r5, #31
 800449c:	d576      	bpl.n	800458c <_vfprintf_r+0xf24>
 800449e:	2301      	movs	r3, #1
 80044a0:	6063      	str	r3, [r4, #4]
 80044a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80044a4:	f8c4 9000 	str.w	r9, [r4]
 80044a8:	3301      	adds	r3, #1
 80044aa:	9321      	str	r3, [sp, #132]	; 0x84
 80044ac:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80044ae:	3301      	adds	r3, #1
 80044b0:	2b07      	cmp	r3, #7
 80044b2:	9320      	str	r3, [sp, #128]	; 0x80
 80044b4:	dc36      	bgt.n	8004524 <_vfprintf_r+0xebc>
 80044b6:	3408      	adds	r4, #8
 80044b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80044ba:	6023      	str	r3, [r4, #0]
 80044bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044be:	6063      	str	r3, [r4, #4]
 80044c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80044c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80044c4:	4413      	add	r3, r2
 80044c6:	9321      	str	r3, [sp, #132]	; 0x84
 80044c8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80044ca:	3301      	adds	r3, #1
 80044cc:	2b07      	cmp	r3, #7
 80044ce:	9320      	str	r3, [sp, #128]	; 0x80
 80044d0:	dc31      	bgt.n	8004536 <_vfprintf_r+0xece>
 80044d2:	3408      	adds	r4, #8
 80044d4:	2300      	movs	r3, #0
 80044d6:	2200      	movs	r2, #0
 80044d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80044dc:	f7fc faf0 	bl	8000ac0 <__aeabi_dcmpeq>
 80044e0:	9b03      	ldr	r3, [sp, #12]
 80044e2:	1e5e      	subs	r6, r3, #1
 80044e4:	2800      	cmp	r0, #0
 80044e6:	d12f      	bne.n	8004548 <_vfprintf_r+0xee0>
 80044e8:	f109 0301 	add.w	r3, r9, #1
 80044ec:	e884 0048 	stmia.w	r4, {r3, r6}
 80044f0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80044f2:	9a03      	ldr	r2, [sp, #12]
 80044f4:	3b01      	subs	r3, #1
 80044f6:	4413      	add	r3, r2
 80044f8:	9321      	str	r3, [sp, #132]	; 0x84
 80044fa:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80044fc:	3301      	adds	r3, #1
 80044fe:	2b07      	cmp	r3, #7
 8004500:	9320      	str	r3, [sp, #128]	; 0x80
 8004502:	dd4a      	ble.n	800459a <_vfprintf_r+0xf32>
 8004504:	aa1f      	add	r2, sp, #124	; 0x7c
 8004506:	4641      	mov	r1, r8
 8004508:	4658      	mov	r0, fp
 800450a:	f002 f8a0 	bl	800664e <__sprint_r>
 800450e:	2800      	cmp	r0, #0
 8004510:	d165      	bne.n	80045de <_vfprintf_r+0xf76>
 8004512:	ac2c      	add	r4, sp, #176	; 0xb0
 8004514:	ab1b      	add	r3, sp, #108	; 0x6c
 8004516:	6023      	str	r3, [r4, #0]
 8004518:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800451a:	6063      	str	r3, [r4, #4]
 800451c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800451e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004520:	4413      	add	r3, r2
 8004522:	e41a      	b.n	8003d5a <_vfprintf_r+0x6f2>
 8004524:	aa1f      	add	r2, sp, #124	; 0x7c
 8004526:	4641      	mov	r1, r8
 8004528:	4658      	mov	r0, fp
 800452a:	f002 f890 	bl	800664e <__sprint_r>
 800452e:	2800      	cmp	r0, #0
 8004530:	d155      	bne.n	80045de <_vfprintf_r+0xf76>
 8004532:	ac2c      	add	r4, sp, #176	; 0xb0
 8004534:	e7c0      	b.n	80044b8 <_vfprintf_r+0xe50>
 8004536:	aa1f      	add	r2, sp, #124	; 0x7c
 8004538:	4641      	mov	r1, r8
 800453a:	4658      	mov	r0, fp
 800453c:	f002 f887 	bl	800664e <__sprint_r>
 8004540:	2800      	cmp	r0, #0
 8004542:	d14c      	bne.n	80045de <_vfprintf_r+0xf76>
 8004544:	ac2c      	add	r4, sp, #176	; 0xb0
 8004546:	e7c5      	b.n	80044d4 <_vfprintf_r+0xe6c>
 8004548:	2e00      	cmp	r6, #0
 800454a:	dde3      	ble.n	8004514 <_vfprintf_r+0xeac>
 800454c:	4f60      	ldr	r7, [pc, #384]	; (80046d0 <_vfprintf_r+0x1068>)
 800454e:	f04f 0910 	mov.w	r9, #16
 8004552:	2e10      	cmp	r6, #16
 8004554:	6027      	str	r7, [r4, #0]
 8004556:	dc04      	bgt.n	8004562 <_vfprintf_r+0xefa>
 8004558:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800455a:	6066      	str	r6, [r4, #4]
 800455c:	441e      	add	r6, r3
 800455e:	9621      	str	r6, [sp, #132]	; 0x84
 8004560:	e7cb      	b.n	80044fa <_vfprintf_r+0xe92>
 8004562:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004564:	f8c4 9004 	str.w	r9, [r4, #4]
 8004568:	3310      	adds	r3, #16
 800456a:	9321      	str	r3, [sp, #132]	; 0x84
 800456c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800456e:	3301      	adds	r3, #1
 8004570:	2b07      	cmp	r3, #7
 8004572:	9320      	str	r3, [sp, #128]	; 0x80
 8004574:	dc02      	bgt.n	800457c <_vfprintf_r+0xf14>
 8004576:	3408      	adds	r4, #8
 8004578:	3e10      	subs	r6, #16
 800457a:	e7ea      	b.n	8004552 <_vfprintf_r+0xeea>
 800457c:	aa1f      	add	r2, sp, #124	; 0x7c
 800457e:	4641      	mov	r1, r8
 8004580:	4658      	mov	r0, fp
 8004582:	f002 f864 	bl	800664e <__sprint_r>
 8004586:	bb50      	cbnz	r0, 80045de <_vfprintf_r+0xf76>
 8004588:	ac2c      	add	r4, sp, #176	; 0xb0
 800458a:	e7f5      	b.n	8004578 <_vfprintf_r+0xf10>
 800458c:	2301      	movs	r3, #1
 800458e:	6063      	str	r3, [r4, #4]
 8004590:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004592:	f8c4 9000 	str.w	r9, [r4]
 8004596:	3301      	adds	r3, #1
 8004598:	e7ae      	b.n	80044f8 <_vfprintf_r+0xe90>
 800459a:	3408      	adds	r4, #8
 800459c:	e7ba      	b.n	8004514 <_vfprintf_r+0xeac>
 800459e:	3408      	adds	r4, #8
 80045a0:	f7ff bbeb 	b.w	8003d7a <_vfprintf_r+0x712>
 80045a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80045a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80045a8:	1a9d      	subs	r5, r3, r2
 80045aa:	2d00      	cmp	r5, #0
 80045ac:	f77f abe8 	ble.w	8003d80 <_vfprintf_r+0x718>
 80045b0:	2610      	movs	r6, #16
 80045b2:	4b48      	ldr	r3, [pc, #288]	; (80046d4 <_vfprintf_r+0x106c>)
 80045b4:	6023      	str	r3, [r4, #0]
 80045b6:	2d10      	cmp	r5, #16
 80045b8:	dc24      	bgt.n	8004604 <_vfprintf_r+0xf9c>
 80045ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80045bc:	6065      	str	r5, [r4, #4]
 80045be:	441d      	add	r5, r3
 80045c0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80045c2:	9521      	str	r5, [sp, #132]	; 0x84
 80045c4:	3301      	adds	r3, #1
 80045c6:	2b07      	cmp	r3, #7
 80045c8:	9320      	str	r3, [sp, #128]	; 0x80
 80045ca:	f77f abd9 	ble.w	8003d80 <_vfprintf_r+0x718>
 80045ce:	aa1f      	add	r2, sp, #124	; 0x7c
 80045d0:	4641      	mov	r1, r8
 80045d2:	4658      	mov	r0, fp
 80045d4:	f002 f83b 	bl	800664e <__sprint_r>
 80045d8:	2800      	cmp	r0, #0
 80045da:	f43f abd1 	beq.w	8003d80 <_vfprintf_r+0x718>
 80045de:	f8d8 3064 	ldr.w	r3, [r8, #100]	; 0x64
 80045e2:	07d9      	lsls	r1, r3, #31
 80045e4:	d407      	bmi.n	80045f6 <_vfprintf_r+0xf8e>
 80045e6:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 80045ea:	059a      	lsls	r2, r3, #22
 80045ec:	d403      	bmi.n	80045f6 <_vfprintf_r+0xf8e>
 80045ee:	f8d8 0058 	ldr.w	r0, [r8, #88]	; 0x58
 80045f2:	f001 fa66 	bl	8005ac2 <__retarget_lock_release_recursive>
 80045f6:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 80045fa:	065b      	lsls	r3, r3, #25
 80045fc:	f57f a8af 	bpl.w	800375e <_vfprintf_r+0xf6>
 8004600:	f7ff b882 	b.w	8003708 <_vfprintf_r+0xa0>
 8004604:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004606:	6066      	str	r6, [r4, #4]
 8004608:	3310      	adds	r3, #16
 800460a:	9321      	str	r3, [sp, #132]	; 0x84
 800460c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800460e:	3301      	adds	r3, #1
 8004610:	2b07      	cmp	r3, #7
 8004612:	9320      	str	r3, [sp, #128]	; 0x80
 8004614:	dc02      	bgt.n	800461c <_vfprintf_r+0xfb4>
 8004616:	3408      	adds	r4, #8
 8004618:	3d10      	subs	r5, #16
 800461a:	e7ca      	b.n	80045b2 <_vfprintf_r+0xf4a>
 800461c:	aa1f      	add	r2, sp, #124	; 0x7c
 800461e:	4641      	mov	r1, r8
 8004620:	4658      	mov	r0, fp
 8004622:	f002 f814 	bl	800664e <__sprint_r>
 8004626:	2800      	cmp	r0, #0
 8004628:	d1d9      	bne.n	80045de <_vfprintf_r+0xf76>
 800462a:	ac2c      	add	r4, sp, #176	; 0xb0
 800462c:	e7f4      	b.n	8004618 <_vfprintf_r+0xfb0>
 800462e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004630:	b913      	cbnz	r3, 8004638 <_vfprintf_r+0xfd0>
 8004632:	2300      	movs	r3, #0
 8004634:	9320      	str	r3, [sp, #128]	; 0x80
 8004636:	e7d2      	b.n	80045de <_vfprintf_r+0xf76>
 8004638:	aa1f      	add	r2, sp, #124	; 0x7c
 800463a:	4641      	mov	r1, r8
 800463c:	4658      	mov	r0, fp
 800463e:	f002 f806 	bl	800664e <__sprint_r>
 8004642:	2800      	cmp	r0, #0
 8004644:	d0f5      	beq.n	8004632 <_vfprintf_r+0xfca>
 8004646:	e7ca      	b.n	80045de <_vfprintf_r+0xf76>
 8004648:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800464c:	4610      	mov	r0, r2
 800464e:	4619      	mov	r1, r3
 8004650:	f7fc fa68 	bl	8000b24 <__aeabi_dcmpun>
 8004654:	2800      	cmp	r0, #0
 8004656:	f43f aa36 	beq.w	8003ac6 <_vfprintf_r+0x45e>
 800465a:	4b1f      	ldr	r3, [pc, #124]	; (80046d8 <_vfprintf_r+0x1070>)
 800465c:	4a1f      	ldr	r2, [pc, #124]	; (80046dc <_vfprintf_r+0x1074>)
 800465e:	f7ff ba26 	b.w	8003aae <_vfprintf_r+0x446>
 8004662:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004664:	1a1b      	subs	r3, r3, r0
 8004666:	9303      	str	r3, [sp, #12]
 8004668:	f7ff baa9 	b.w	8003bbe <_vfprintf_r+0x556>
 800466c:	ea56 0207 	orrs.w	r2, r6, r7
 8004670:	9508      	str	r5, [sp, #32]
 8004672:	f43f ac1e 	beq.w	8003eb2 <_vfprintf_r+0x84a>
 8004676:	2b01      	cmp	r3, #1
 8004678:	f43f ac8f 	beq.w	8003f9a <_vfprintf_r+0x932>
 800467c:	2b02      	cmp	r3, #2
 800467e:	f43f acaf 	beq.w	8003fe0 <_vfprintf_r+0x978>
 8004682:	ab2c      	add	r3, sp, #176	; 0xb0
 8004684:	08f1      	lsrs	r1, r6, #3
 8004686:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 800468a:	08f8      	lsrs	r0, r7, #3
 800468c:	f006 0207 	and.w	r2, r6, #7
 8004690:	4607      	mov	r7, r0
 8004692:	460e      	mov	r6, r1
 8004694:	3230      	adds	r2, #48	; 0x30
 8004696:	ea56 0107 	orrs.w	r1, r6, r7
 800469a:	f103 39ff 	add.w	r9, r3, #4294967295
 800469e:	f803 2c01 	strb.w	r2, [r3, #-1]
 80046a2:	f47f ac78 	bne.w	8003f96 <_vfprintf_r+0x92e>
 80046a6:	9908      	ldr	r1, [sp, #32]
 80046a8:	07cd      	lsls	r5, r1, #31
 80046aa:	d506      	bpl.n	80046ba <_vfprintf_r+0x1052>
 80046ac:	2a30      	cmp	r2, #48	; 0x30
 80046ae:	d004      	beq.n	80046ba <_vfprintf_r+0x1052>
 80046b0:	2230      	movs	r2, #48	; 0x30
 80046b2:	f809 2c01 	strb.w	r2, [r9, #-1]
 80046b6:	f1a3 0902 	sub.w	r9, r3, #2
 80046ba:	4656      	mov	r6, sl
 80046bc:	2300      	movs	r3, #0
 80046be:	f10d 0ab0 	add.w	sl, sp, #176	; 0xb0
 80046c2:	9d08      	ldr	r5, [sp, #32]
 80046c4:	9308      	str	r3, [sp, #32]
 80046c6:	ebaa 0a09 	sub.w	sl, sl, r9
 80046ca:	f7ff bac6 	b.w	8003c5a <_vfprintf_r+0x5f2>
 80046ce:	bf00      	nop
 80046d0:	08007228 	.word	0x08007228
 80046d4:	08007218 	.word	0x08007218
 80046d8:	080071ec 	.word	0x080071ec
 80046dc:	080071f0 	.word	0x080071f0

080046e0 <__sbprintf>:
 80046e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046e2:	460c      	mov	r4, r1
 80046e4:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
 80046e8:	461f      	mov	r7, r3
 80046ea:	8989      	ldrh	r1, [r1, #12]
 80046ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80046ee:	9319      	str	r3, [sp, #100]	; 0x64
 80046f0:	89e3      	ldrh	r3, [r4, #14]
 80046f2:	f8ad 300e 	strh.w	r3, [sp, #14]
 80046f6:	f021 0102 	bic.w	r1, r1, #2
 80046fa:	6a23      	ldr	r3, [r4, #32]
 80046fc:	f8ad 100c 	strh.w	r1, [sp, #12]
 8004700:	9308      	str	r3, [sp, #32]
 8004702:	a91a      	add	r1, sp, #104	; 0x68
 8004704:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004706:	930a      	str	r3, [sp, #40]	; 0x28
 8004708:	4615      	mov	r5, r2
 800470a:	2300      	movs	r3, #0
 800470c:	4606      	mov	r6, r0
 800470e:	9100      	str	r1, [sp, #0]
 8004710:	9104      	str	r1, [sp, #16]
 8004712:	a816      	add	r0, sp, #88	; 0x58
 8004714:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004718:	9102      	str	r1, [sp, #8]
 800471a:	9105      	str	r1, [sp, #20]
 800471c:	9306      	str	r3, [sp, #24]
 800471e:	f001 f9cd 	bl	8005abc <__retarget_lock_init_recursive>
 8004722:	462a      	mov	r2, r5
 8004724:	463b      	mov	r3, r7
 8004726:	4669      	mov	r1, sp
 8004728:	4630      	mov	r0, r6
 800472a:	f7fe ff9d 	bl	8003668 <_vfprintf_r>
 800472e:	1e05      	subs	r5, r0, #0
 8004730:	db07      	blt.n	8004742 <__sbprintf+0x62>
 8004732:	4669      	mov	r1, sp
 8004734:	4630      	mov	r0, r6
 8004736:	f000 ff6f 	bl	8005618 <_fflush_r>
 800473a:	2800      	cmp	r0, #0
 800473c:	bf18      	it	ne
 800473e:	f04f 35ff 	movne.w	r5, #4294967295
 8004742:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8004746:	9816      	ldr	r0, [sp, #88]	; 0x58
 8004748:	065b      	lsls	r3, r3, #25
 800474a:	bf42      	ittt	mi
 800474c:	89a3      	ldrhmi	r3, [r4, #12]
 800474e:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 8004752:	81a3      	strhmi	r3, [r4, #12]
 8004754:	f001 f9b3 	bl	8005abe <__retarget_lock_close_recursive>
 8004758:	4628      	mov	r0, r5
 800475a:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
 800475e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004760 <__swsetup_r>:
 8004760:	4b32      	ldr	r3, [pc, #200]	; (800482c <__swsetup_r+0xcc>)
 8004762:	b570      	push	{r4, r5, r6, lr}
 8004764:	681d      	ldr	r5, [r3, #0]
 8004766:	4606      	mov	r6, r0
 8004768:	460c      	mov	r4, r1
 800476a:	b125      	cbz	r5, 8004776 <__swsetup_r+0x16>
 800476c:	69ab      	ldr	r3, [r5, #24]
 800476e:	b913      	cbnz	r3, 8004776 <__swsetup_r+0x16>
 8004770:	4628      	mov	r0, r5
 8004772:	f000 ffe5 	bl	8005740 <__sinit>
 8004776:	4b2e      	ldr	r3, [pc, #184]	; (8004830 <__swsetup_r+0xd0>)
 8004778:	429c      	cmp	r4, r3
 800477a:	d10f      	bne.n	800479c <__swsetup_r+0x3c>
 800477c:	686c      	ldr	r4, [r5, #4]
 800477e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004782:	b29a      	uxth	r2, r3
 8004784:	0715      	lsls	r5, r2, #28
 8004786:	d42c      	bmi.n	80047e2 <__swsetup_r+0x82>
 8004788:	06d0      	lsls	r0, r2, #27
 800478a:	d411      	bmi.n	80047b0 <__swsetup_r+0x50>
 800478c:	2209      	movs	r2, #9
 800478e:	6032      	str	r2, [r6, #0]
 8004790:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004794:	81a3      	strh	r3, [r4, #12]
 8004796:	f04f 30ff 	mov.w	r0, #4294967295
 800479a:	bd70      	pop	{r4, r5, r6, pc}
 800479c:	4b25      	ldr	r3, [pc, #148]	; (8004834 <__swsetup_r+0xd4>)
 800479e:	429c      	cmp	r4, r3
 80047a0:	d101      	bne.n	80047a6 <__swsetup_r+0x46>
 80047a2:	68ac      	ldr	r4, [r5, #8]
 80047a4:	e7eb      	b.n	800477e <__swsetup_r+0x1e>
 80047a6:	4b24      	ldr	r3, [pc, #144]	; (8004838 <__swsetup_r+0xd8>)
 80047a8:	429c      	cmp	r4, r3
 80047aa:	bf08      	it	eq
 80047ac:	68ec      	ldreq	r4, [r5, #12]
 80047ae:	e7e6      	b.n	800477e <__swsetup_r+0x1e>
 80047b0:	0751      	lsls	r1, r2, #29
 80047b2:	d512      	bpl.n	80047da <__swsetup_r+0x7a>
 80047b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80047b6:	b141      	cbz	r1, 80047ca <__swsetup_r+0x6a>
 80047b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80047bc:	4299      	cmp	r1, r3
 80047be:	d002      	beq.n	80047c6 <__swsetup_r+0x66>
 80047c0:	4630      	mov	r0, r6
 80047c2:	f001 f893 	bl	80058ec <_free_r>
 80047c6:	2300      	movs	r3, #0
 80047c8:	6363      	str	r3, [r4, #52]	; 0x34
 80047ca:	89a3      	ldrh	r3, [r4, #12]
 80047cc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80047d0:	81a3      	strh	r3, [r4, #12]
 80047d2:	2300      	movs	r3, #0
 80047d4:	6063      	str	r3, [r4, #4]
 80047d6:	6923      	ldr	r3, [r4, #16]
 80047d8:	6023      	str	r3, [r4, #0]
 80047da:	89a3      	ldrh	r3, [r4, #12]
 80047dc:	f043 0308 	orr.w	r3, r3, #8
 80047e0:	81a3      	strh	r3, [r4, #12]
 80047e2:	6923      	ldr	r3, [r4, #16]
 80047e4:	b94b      	cbnz	r3, 80047fa <__swsetup_r+0x9a>
 80047e6:	89a3      	ldrh	r3, [r4, #12]
 80047e8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80047ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047f0:	d003      	beq.n	80047fa <__swsetup_r+0x9a>
 80047f2:	4621      	mov	r1, r4
 80047f4:	4630      	mov	r0, r6
 80047f6:	f001 f991 	bl	8005b1c <__smakebuf_r>
 80047fa:	89a2      	ldrh	r2, [r4, #12]
 80047fc:	f012 0301 	ands.w	r3, r2, #1
 8004800:	d00c      	beq.n	800481c <__swsetup_r+0xbc>
 8004802:	2300      	movs	r3, #0
 8004804:	60a3      	str	r3, [r4, #8]
 8004806:	6963      	ldr	r3, [r4, #20]
 8004808:	425b      	negs	r3, r3
 800480a:	61a3      	str	r3, [r4, #24]
 800480c:	6923      	ldr	r3, [r4, #16]
 800480e:	b953      	cbnz	r3, 8004826 <__swsetup_r+0xc6>
 8004810:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004814:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004818:	d1ba      	bne.n	8004790 <__swsetup_r+0x30>
 800481a:	bd70      	pop	{r4, r5, r6, pc}
 800481c:	0792      	lsls	r2, r2, #30
 800481e:	bf58      	it	pl
 8004820:	6963      	ldrpl	r3, [r4, #20]
 8004822:	60a3      	str	r3, [r4, #8]
 8004824:	e7f2      	b.n	800480c <__swsetup_r+0xac>
 8004826:	2000      	movs	r0, #0
 8004828:	e7f7      	b.n	800481a <__swsetup_r+0xba>
 800482a:	bf00      	nop
 800482c:	20000004 	.word	0x20000004
 8004830:	08007268 	.word	0x08007268
 8004834:	08007288 	.word	0x08007288
 8004838:	08007248 	.word	0x08007248

0800483c <quorem>:
 800483c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004840:	6903      	ldr	r3, [r0, #16]
 8004842:	690c      	ldr	r4, [r1, #16]
 8004844:	429c      	cmp	r4, r3
 8004846:	4680      	mov	r8, r0
 8004848:	f300 8082 	bgt.w	8004950 <quorem+0x114>
 800484c:	3c01      	subs	r4, #1
 800484e:	f101 0714 	add.w	r7, r1, #20
 8004852:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8004856:	f100 0614 	add.w	r6, r0, #20
 800485a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800485e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8004862:	eb06 030e 	add.w	r3, r6, lr
 8004866:	3501      	adds	r5, #1
 8004868:	eb07 090e 	add.w	r9, r7, lr
 800486c:	9301      	str	r3, [sp, #4]
 800486e:	fbb0 f5f5 	udiv	r5, r0, r5
 8004872:	b395      	cbz	r5, 80048da <quorem+0x9e>
 8004874:	f04f 0a00 	mov.w	sl, #0
 8004878:	4638      	mov	r0, r7
 800487a:	46b4      	mov	ip, r6
 800487c:	46d3      	mov	fp, sl
 800487e:	f850 2b04 	ldr.w	r2, [r0], #4
 8004882:	b293      	uxth	r3, r2
 8004884:	fb05 a303 	mla	r3, r5, r3, sl
 8004888:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800488c:	b29b      	uxth	r3, r3
 800488e:	ebab 0303 	sub.w	r3, fp, r3
 8004892:	0c12      	lsrs	r2, r2, #16
 8004894:	f8bc b000 	ldrh.w	fp, [ip]
 8004898:	fb05 a202 	mla	r2, r5, r2, sl
 800489c:	fa13 f38b 	uxtah	r3, r3, fp
 80048a0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80048a4:	fa1f fb82 	uxth.w	fp, r2
 80048a8:	f8dc 2000 	ldr.w	r2, [ip]
 80048ac:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80048b0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80048ba:	4581      	cmp	r9, r0
 80048bc:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80048c0:	f84c 3b04 	str.w	r3, [ip], #4
 80048c4:	d2db      	bcs.n	800487e <quorem+0x42>
 80048c6:	f856 300e 	ldr.w	r3, [r6, lr]
 80048ca:	b933      	cbnz	r3, 80048da <quorem+0x9e>
 80048cc:	9b01      	ldr	r3, [sp, #4]
 80048ce:	3b04      	subs	r3, #4
 80048d0:	429e      	cmp	r6, r3
 80048d2:	461a      	mov	r2, r3
 80048d4:	d330      	bcc.n	8004938 <quorem+0xfc>
 80048d6:	f8c8 4010 	str.w	r4, [r8, #16]
 80048da:	4640      	mov	r0, r8
 80048dc:	f001 fd9d 	bl	800641a <__mcmp>
 80048e0:	2800      	cmp	r0, #0
 80048e2:	db25      	blt.n	8004930 <quorem+0xf4>
 80048e4:	3501      	adds	r5, #1
 80048e6:	4630      	mov	r0, r6
 80048e8:	f04f 0e00 	mov.w	lr, #0
 80048ec:	f857 2b04 	ldr.w	r2, [r7], #4
 80048f0:	f8d0 c000 	ldr.w	ip, [r0]
 80048f4:	b293      	uxth	r3, r2
 80048f6:	ebae 0303 	sub.w	r3, lr, r3
 80048fa:	0c12      	lsrs	r2, r2, #16
 80048fc:	fa13 f38c 	uxtah	r3, r3, ip
 8004900:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8004904:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004908:	b29b      	uxth	r3, r3
 800490a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800490e:	45b9      	cmp	r9, r7
 8004910:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8004914:	f840 3b04 	str.w	r3, [r0], #4
 8004918:	d2e8      	bcs.n	80048ec <quorem+0xb0>
 800491a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800491e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8004922:	b92a      	cbnz	r2, 8004930 <quorem+0xf4>
 8004924:	3b04      	subs	r3, #4
 8004926:	429e      	cmp	r6, r3
 8004928:	461a      	mov	r2, r3
 800492a:	d30b      	bcc.n	8004944 <quorem+0x108>
 800492c:	f8c8 4010 	str.w	r4, [r8, #16]
 8004930:	4628      	mov	r0, r5
 8004932:	b003      	add	sp, #12
 8004934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004938:	6812      	ldr	r2, [r2, #0]
 800493a:	3b04      	subs	r3, #4
 800493c:	2a00      	cmp	r2, #0
 800493e:	d1ca      	bne.n	80048d6 <quorem+0x9a>
 8004940:	3c01      	subs	r4, #1
 8004942:	e7c5      	b.n	80048d0 <quorem+0x94>
 8004944:	6812      	ldr	r2, [r2, #0]
 8004946:	3b04      	subs	r3, #4
 8004948:	2a00      	cmp	r2, #0
 800494a:	d1ef      	bne.n	800492c <quorem+0xf0>
 800494c:	3c01      	subs	r4, #1
 800494e:	e7ea      	b.n	8004926 <quorem+0xea>
 8004950:	2000      	movs	r0, #0
 8004952:	e7ee      	b.n	8004932 <quorem+0xf6>
 8004954:	0000      	movs	r0, r0
	...

08004958 <_dtoa_r>:
 8004958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800495c:	ec57 6b10 	vmov	r6, r7, d0
 8004960:	b097      	sub	sp, #92	; 0x5c
 8004962:	e9cd 6700 	strd	r6, r7, [sp]
 8004966:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004968:	9107      	str	r1, [sp, #28]
 800496a:	4604      	mov	r4, r0
 800496c:	920a      	str	r2, [sp, #40]	; 0x28
 800496e:	930f      	str	r3, [sp, #60]	; 0x3c
 8004970:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8004972:	b93e      	cbnz	r6, 8004984 <_dtoa_r+0x2c>
 8004974:	2010      	movs	r0, #16
 8004976:	f001 f911 	bl	8005b9c <malloc>
 800497a:	6260      	str	r0, [r4, #36]	; 0x24
 800497c:	6046      	str	r6, [r0, #4]
 800497e:	6086      	str	r6, [r0, #8]
 8004980:	6006      	str	r6, [r0, #0]
 8004982:	60c6      	str	r6, [r0, #12]
 8004984:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004986:	6819      	ldr	r1, [r3, #0]
 8004988:	b151      	cbz	r1, 80049a0 <_dtoa_r+0x48>
 800498a:	685a      	ldr	r2, [r3, #4]
 800498c:	604a      	str	r2, [r1, #4]
 800498e:	2301      	movs	r3, #1
 8004990:	4093      	lsls	r3, r2
 8004992:	608b      	str	r3, [r1, #8]
 8004994:	4620      	mov	r0, r4
 8004996:	f001 fb6b 	bl	8006070 <_Bfree>
 800499a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800499c:	2200      	movs	r2, #0
 800499e:	601a      	str	r2, [r3, #0]
 80049a0:	9b01      	ldr	r3, [sp, #4]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	bfbf      	itttt	lt
 80049a6:	2301      	movlt	r3, #1
 80049a8:	602b      	strlt	r3, [r5, #0]
 80049aa:	9b01      	ldrlt	r3, [sp, #4]
 80049ac:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80049b0:	bfb2      	itee	lt
 80049b2:	9301      	strlt	r3, [sp, #4]
 80049b4:	2300      	movge	r3, #0
 80049b6:	602b      	strge	r3, [r5, #0]
 80049b8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80049bc:	4ba8      	ldr	r3, [pc, #672]	; (8004c60 <_dtoa_r+0x308>)
 80049be:	ea33 0308 	bics.w	r3, r3, r8
 80049c2:	d11b      	bne.n	80049fc <_dtoa_r+0xa4>
 80049c4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80049c6:	f242 730f 	movw	r3, #9999	; 0x270f
 80049ca:	6013      	str	r3, [r2, #0]
 80049cc:	9b00      	ldr	r3, [sp, #0]
 80049ce:	b923      	cbnz	r3, 80049da <_dtoa_r+0x82>
 80049d0:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80049d4:	2800      	cmp	r0, #0
 80049d6:	f000 8578 	beq.w	80054ca <_dtoa_r+0xb72>
 80049da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80049dc:	b953      	cbnz	r3, 80049f4 <_dtoa_r+0x9c>
 80049de:	4ba1      	ldr	r3, [pc, #644]	; (8004c64 <_dtoa_r+0x30c>)
 80049e0:	e021      	b.n	8004a26 <_dtoa_r+0xce>
 80049e2:	4ba1      	ldr	r3, [pc, #644]	; (8004c68 <_dtoa_r+0x310>)
 80049e4:	9302      	str	r3, [sp, #8]
 80049e6:	3308      	adds	r3, #8
 80049e8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80049ea:	6013      	str	r3, [r2, #0]
 80049ec:	9802      	ldr	r0, [sp, #8]
 80049ee:	b017      	add	sp, #92	; 0x5c
 80049f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049f4:	4b9b      	ldr	r3, [pc, #620]	; (8004c64 <_dtoa_r+0x30c>)
 80049f6:	9302      	str	r3, [sp, #8]
 80049f8:	3303      	adds	r3, #3
 80049fa:	e7f5      	b.n	80049e8 <_dtoa_r+0x90>
 80049fc:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004a00:	2200      	movs	r2, #0
 8004a02:	2300      	movs	r3, #0
 8004a04:	4630      	mov	r0, r6
 8004a06:	4639      	mov	r1, r7
 8004a08:	f7fc f85a 	bl	8000ac0 <__aeabi_dcmpeq>
 8004a0c:	4681      	mov	r9, r0
 8004a0e:	b160      	cbz	r0, 8004a2a <_dtoa_r+0xd2>
 8004a10:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004a12:	2301      	movs	r3, #1
 8004a14:	6013      	str	r3, [r2, #0]
 8004a16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	f000 8553 	beq.w	80054c4 <_dtoa_r+0xb6c>
 8004a1e:	4b93      	ldr	r3, [pc, #588]	; (8004c6c <_dtoa_r+0x314>)
 8004a20:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004a22:	6013      	str	r3, [r2, #0]
 8004a24:	3b01      	subs	r3, #1
 8004a26:	9302      	str	r3, [sp, #8]
 8004a28:	e7e0      	b.n	80049ec <_dtoa_r+0x94>
 8004a2a:	aa14      	add	r2, sp, #80	; 0x50
 8004a2c:	a915      	add	r1, sp, #84	; 0x54
 8004a2e:	ec47 6b10 	vmov	d0, r6, r7
 8004a32:	4620      	mov	r0, r4
 8004a34:	f001 fd69 	bl	800650a <__d2b>
 8004a38:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8004a3c:	4682      	mov	sl, r0
 8004a3e:	2d00      	cmp	r5, #0
 8004a40:	d07e      	beq.n	8004b40 <_dtoa_r+0x1e8>
 8004a42:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004a46:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8004a4a:	4630      	mov	r0, r6
 8004a4c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8004a50:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004a54:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 8004a58:	2200      	movs	r2, #0
 8004a5a:	4b85      	ldr	r3, [pc, #532]	; (8004c70 <_dtoa_r+0x318>)
 8004a5c:	f7fb fc14 	bl	8000288 <__aeabi_dsub>
 8004a60:	a379      	add	r3, pc, #484	; (adr r3, 8004c48 <_dtoa_r+0x2f0>)
 8004a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a66:	f7fb fdc3 	bl	80005f0 <__aeabi_dmul>
 8004a6a:	a379      	add	r3, pc, #484	; (adr r3, 8004c50 <_dtoa_r+0x2f8>)
 8004a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a70:	f7fb fc0c 	bl	800028c <__adddf3>
 8004a74:	4606      	mov	r6, r0
 8004a76:	4628      	mov	r0, r5
 8004a78:	460f      	mov	r7, r1
 8004a7a:	f7fb fd53 	bl	8000524 <__aeabi_i2d>
 8004a7e:	a376      	add	r3, pc, #472	; (adr r3, 8004c58 <_dtoa_r+0x300>)
 8004a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a84:	f7fb fdb4 	bl	80005f0 <__aeabi_dmul>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	460b      	mov	r3, r1
 8004a8c:	4630      	mov	r0, r6
 8004a8e:	4639      	mov	r1, r7
 8004a90:	f7fb fbfc 	bl	800028c <__adddf3>
 8004a94:	4606      	mov	r6, r0
 8004a96:	460f      	mov	r7, r1
 8004a98:	f7fc f85a 	bl	8000b50 <__aeabi_d2iz>
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	4683      	mov	fp, r0
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	4630      	mov	r0, r6
 8004aa4:	4639      	mov	r1, r7
 8004aa6:	f7fc f815 	bl	8000ad4 <__aeabi_dcmplt>
 8004aaa:	b158      	cbz	r0, 8004ac4 <_dtoa_r+0x16c>
 8004aac:	4658      	mov	r0, fp
 8004aae:	f7fb fd39 	bl	8000524 <__aeabi_i2d>
 8004ab2:	4602      	mov	r2, r0
 8004ab4:	460b      	mov	r3, r1
 8004ab6:	4630      	mov	r0, r6
 8004ab8:	4639      	mov	r1, r7
 8004aba:	f7fc f801 	bl	8000ac0 <__aeabi_dcmpeq>
 8004abe:	b908      	cbnz	r0, 8004ac4 <_dtoa_r+0x16c>
 8004ac0:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004ac4:	f1bb 0f16 	cmp.w	fp, #22
 8004ac8:	d859      	bhi.n	8004b7e <_dtoa_r+0x226>
 8004aca:	496a      	ldr	r1, [pc, #424]	; (8004c74 <_dtoa_r+0x31c>)
 8004acc:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8004ad0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004ad4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004ad8:	f7fc f81a 	bl	8000b10 <__aeabi_dcmpgt>
 8004adc:	2800      	cmp	r0, #0
 8004ade:	d050      	beq.n	8004b82 <_dtoa_r+0x22a>
 8004ae0:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	930e      	str	r3, [sp, #56]	; 0x38
 8004ae8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004aea:	1b5d      	subs	r5, r3, r5
 8004aec:	1e6b      	subs	r3, r5, #1
 8004aee:	9306      	str	r3, [sp, #24]
 8004af0:	bf45      	ittet	mi
 8004af2:	f1c5 0301 	rsbmi	r3, r5, #1
 8004af6:	9305      	strmi	r3, [sp, #20]
 8004af8:	2300      	movpl	r3, #0
 8004afa:	2300      	movmi	r3, #0
 8004afc:	bf4c      	ite	mi
 8004afe:	9306      	strmi	r3, [sp, #24]
 8004b00:	9305      	strpl	r3, [sp, #20]
 8004b02:	f1bb 0f00 	cmp.w	fp, #0
 8004b06:	db3e      	blt.n	8004b86 <_dtoa_r+0x22e>
 8004b08:	9b06      	ldr	r3, [sp, #24]
 8004b0a:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8004b0e:	445b      	add	r3, fp
 8004b10:	9306      	str	r3, [sp, #24]
 8004b12:	2300      	movs	r3, #0
 8004b14:	9308      	str	r3, [sp, #32]
 8004b16:	9b07      	ldr	r3, [sp, #28]
 8004b18:	2b09      	cmp	r3, #9
 8004b1a:	f200 80af 	bhi.w	8004c7c <_dtoa_r+0x324>
 8004b1e:	2b05      	cmp	r3, #5
 8004b20:	bfc4      	itt	gt
 8004b22:	3b04      	subgt	r3, #4
 8004b24:	9307      	strgt	r3, [sp, #28]
 8004b26:	9b07      	ldr	r3, [sp, #28]
 8004b28:	f1a3 0302 	sub.w	r3, r3, #2
 8004b2c:	bfcc      	ite	gt
 8004b2e:	2600      	movgt	r6, #0
 8004b30:	2601      	movle	r6, #1
 8004b32:	2b03      	cmp	r3, #3
 8004b34:	f200 80ae 	bhi.w	8004c94 <_dtoa_r+0x33c>
 8004b38:	e8df f003 	tbb	[pc, r3]
 8004b3c:	772f8482 	.word	0x772f8482
 8004b40:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004b42:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8004b44:	441d      	add	r5, r3
 8004b46:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8004b4a:	2b20      	cmp	r3, #32
 8004b4c:	dd11      	ble.n	8004b72 <_dtoa_r+0x21a>
 8004b4e:	9a00      	ldr	r2, [sp, #0]
 8004b50:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8004b54:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8004b58:	fa22 f000 	lsr.w	r0, r2, r0
 8004b5c:	fa08 f303 	lsl.w	r3, r8, r3
 8004b60:	4318      	orrs	r0, r3
 8004b62:	f7fb fccf 	bl	8000504 <__aeabi_ui2d>
 8004b66:	2301      	movs	r3, #1
 8004b68:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8004b6c:	3d01      	subs	r5, #1
 8004b6e:	9312      	str	r3, [sp, #72]	; 0x48
 8004b70:	e772      	b.n	8004a58 <_dtoa_r+0x100>
 8004b72:	f1c3 0020 	rsb	r0, r3, #32
 8004b76:	9b00      	ldr	r3, [sp, #0]
 8004b78:	fa03 f000 	lsl.w	r0, r3, r0
 8004b7c:	e7f1      	b.n	8004b62 <_dtoa_r+0x20a>
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e7b1      	b.n	8004ae6 <_dtoa_r+0x18e>
 8004b82:	900e      	str	r0, [sp, #56]	; 0x38
 8004b84:	e7b0      	b.n	8004ae8 <_dtoa_r+0x190>
 8004b86:	9b05      	ldr	r3, [sp, #20]
 8004b88:	eba3 030b 	sub.w	r3, r3, fp
 8004b8c:	9305      	str	r3, [sp, #20]
 8004b8e:	f1cb 0300 	rsb	r3, fp, #0
 8004b92:	9308      	str	r3, [sp, #32]
 8004b94:	2300      	movs	r3, #0
 8004b96:	930b      	str	r3, [sp, #44]	; 0x2c
 8004b98:	e7bd      	b.n	8004b16 <_dtoa_r+0x1be>
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	9309      	str	r3, [sp, #36]	; 0x24
 8004b9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	dd7a      	ble.n	8004c9a <_dtoa_r+0x342>
 8004ba4:	9304      	str	r3, [sp, #16]
 8004ba6:	9303      	str	r3, [sp, #12]
 8004ba8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8004baa:	2200      	movs	r2, #0
 8004bac:	606a      	str	r2, [r5, #4]
 8004bae:	2104      	movs	r1, #4
 8004bb0:	f101 0214 	add.w	r2, r1, #20
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d975      	bls.n	8004ca4 <_dtoa_r+0x34c>
 8004bb8:	6869      	ldr	r1, [r5, #4]
 8004bba:	4620      	mov	r0, r4
 8004bbc:	f001 fa24 	bl	8006008 <_Balloc>
 8004bc0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004bc2:	6028      	str	r0, [r5, #0]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	9302      	str	r3, [sp, #8]
 8004bc8:	9b03      	ldr	r3, [sp, #12]
 8004bca:	2b0e      	cmp	r3, #14
 8004bcc:	f200 80e5 	bhi.w	8004d9a <_dtoa_r+0x442>
 8004bd0:	2e00      	cmp	r6, #0
 8004bd2:	f000 80e2 	beq.w	8004d9a <_dtoa_r+0x442>
 8004bd6:	ed9d 7b00 	vldr	d7, [sp]
 8004bda:	f1bb 0f00 	cmp.w	fp, #0
 8004bde:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8004be2:	dd74      	ble.n	8004cce <_dtoa_r+0x376>
 8004be4:	4a23      	ldr	r2, [pc, #140]	; (8004c74 <_dtoa_r+0x31c>)
 8004be6:	f00b 030f 	and.w	r3, fp, #15
 8004bea:	ea4f 162b 	mov.w	r6, fp, asr #4
 8004bee:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004bf2:	06f0      	lsls	r0, r6, #27
 8004bf4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004bf8:	d559      	bpl.n	8004cae <_dtoa_r+0x356>
 8004bfa:	4b1f      	ldr	r3, [pc, #124]	; (8004c78 <_dtoa_r+0x320>)
 8004bfc:	ec51 0b17 	vmov	r0, r1, d7
 8004c00:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004c04:	f7fb fe1e 	bl	8000844 <__aeabi_ddiv>
 8004c08:	e9cd 0100 	strd	r0, r1, [sp]
 8004c0c:	f006 060f 	and.w	r6, r6, #15
 8004c10:	2503      	movs	r5, #3
 8004c12:	4f19      	ldr	r7, [pc, #100]	; (8004c78 <_dtoa_r+0x320>)
 8004c14:	2e00      	cmp	r6, #0
 8004c16:	d14c      	bne.n	8004cb2 <_dtoa_r+0x35a>
 8004c18:	4642      	mov	r2, r8
 8004c1a:	464b      	mov	r3, r9
 8004c1c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004c20:	f7fb fe10 	bl	8000844 <__aeabi_ddiv>
 8004c24:	e9cd 0100 	strd	r0, r1, [sp]
 8004c28:	e06a      	b.n	8004d00 <_dtoa_r+0x3a8>
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	9309      	str	r3, [sp, #36]	; 0x24
 8004c2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c30:	445b      	add	r3, fp
 8004c32:	9304      	str	r3, [sp, #16]
 8004c34:	3301      	adds	r3, #1
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	9303      	str	r3, [sp, #12]
 8004c3a:	bfb8      	it	lt
 8004c3c:	2301      	movlt	r3, #1
 8004c3e:	e7b3      	b.n	8004ba8 <_dtoa_r+0x250>
 8004c40:	2300      	movs	r3, #0
 8004c42:	e7ab      	b.n	8004b9c <_dtoa_r+0x244>
 8004c44:	2300      	movs	r3, #0
 8004c46:	e7f1      	b.n	8004c2c <_dtoa_r+0x2d4>
 8004c48:	636f4361 	.word	0x636f4361
 8004c4c:	3fd287a7 	.word	0x3fd287a7
 8004c50:	8b60c8b3 	.word	0x8b60c8b3
 8004c54:	3fc68a28 	.word	0x3fc68a28
 8004c58:	509f79fb 	.word	0x509f79fb
 8004c5c:	3fd34413 	.word	0x3fd34413
 8004c60:	7ff00000 	.word	0x7ff00000
 8004c64:	08007241 	.word	0x08007241
 8004c68:	08007238 	.word	0x08007238
 8004c6c:	08007217 	.word	0x08007217
 8004c70:	3ff80000 	.word	0x3ff80000
 8004c74:	080072d8 	.word	0x080072d8
 8004c78:	080072b0 	.word	0x080072b0
 8004c7c:	2601      	movs	r6, #1
 8004c7e:	2300      	movs	r3, #0
 8004c80:	9307      	str	r3, [sp, #28]
 8004c82:	9609      	str	r6, [sp, #36]	; 0x24
 8004c84:	f04f 33ff 	mov.w	r3, #4294967295
 8004c88:	9304      	str	r3, [sp, #16]
 8004c8a:	9303      	str	r3, [sp, #12]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	2312      	movs	r3, #18
 8004c90:	920a      	str	r2, [sp, #40]	; 0x28
 8004c92:	e789      	b.n	8004ba8 <_dtoa_r+0x250>
 8004c94:	2301      	movs	r3, #1
 8004c96:	9309      	str	r3, [sp, #36]	; 0x24
 8004c98:	e7f4      	b.n	8004c84 <_dtoa_r+0x32c>
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	9304      	str	r3, [sp, #16]
 8004c9e:	9303      	str	r3, [sp, #12]
 8004ca0:	461a      	mov	r2, r3
 8004ca2:	e7f5      	b.n	8004c90 <_dtoa_r+0x338>
 8004ca4:	686a      	ldr	r2, [r5, #4]
 8004ca6:	3201      	adds	r2, #1
 8004ca8:	606a      	str	r2, [r5, #4]
 8004caa:	0049      	lsls	r1, r1, #1
 8004cac:	e780      	b.n	8004bb0 <_dtoa_r+0x258>
 8004cae:	2502      	movs	r5, #2
 8004cb0:	e7af      	b.n	8004c12 <_dtoa_r+0x2ba>
 8004cb2:	07f1      	lsls	r1, r6, #31
 8004cb4:	d508      	bpl.n	8004cc8 <_dtoa_r+0x370>
 8004cb6:	4640      	mov	r0, r8
 8004cb8:	4649      	mov	r1, r9
 8004cba:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004cbe:	f7fb fc97 	bl	80005f0 <__aeabi_dmul>
 8004cc2:	3501      	adds	r5, #1
 8004cc4:	4680      	mov	r8, r0
 8004cc6:	4689      	mov	r9, r1
 8004cc8:	1076      	asrs	r6, r6, #1
 8004cca:	3708      	adds	r7, #8
 8004ccc:	e7a2      	b.n	8004c14 <_dtoa_r+0x2bc>
 8004cce:	f000 809d 	beq.w	8004e0c <_dtoa_r+0x4b4>
 8004cd2:	f1cb 0600 	rsb	r6, fp, #0
 8004cd6:	4b9f      	ldr	r3, [pc, #636]	; (8004f54 <_dtoa_r+0x5fc>)
 8004cd8:	4f9f      	ldr	r7, [pc, #636]	; (8004f58 <_dtoa_r+0x600>)
 8004cda:	f006 020f 	and.w	r2, r6, #15
 8004cde:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ce6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004cea:	f7fb fc81 	bl	80005f0 <__aeabi_dmul>
 8004cee:	e9cd 0100 	strd	r0, r1, [sp]
 8004cf2:	1136      	asrs	r6, r6, #4
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	2502      	movs	r5, #2
 8004cf8:	2e00      	cmp	r6, #0
 8004cfa:	d17c      	bne.n	8004df6 <_dtoa_r+0x49e>
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d191      	bne.n	8004c24 <_dtoa_r+0x2cc>
 8004d00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	f000 8084 	beq.w	8004e10 <_dtoa_r+0x4b8>
 8004d08:	e9dd 8900 	ldrd	r8, r9, [sp]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	4b93      	ldr	r3, [pc, #588]	; (8004f5c <_dtoa_r+0x604>)
 8004d10:	4640      	mov	r0, r8
 8004d12:	4649      	mov	r1, r9
 8004d14:	f7fb fede 	bl	8000ad4 <__aeabi_dcmplt>
 8004d18:	2800      	cmp	r0, #0
 8004d1a:	d079      	beq.n	8004e10 <_dtoa_r+0x4b8>
 8004d1c:	9b03      	ldr	r3, [sp, #12]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d076      	beq.n	8004e10 <_dtoa_r+0x4b8>
 8004d22:	9b04      	ldr	r3, [sp, #16]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	dd34      	ble.n	8004d92 <_dtoa_r+0x43a>
 8004d28:	2200      	movs	r2, #0
 8004d2a:	4b8d      	ldr	r3, [pc, #564]	; (8004f60 <_dtoa_r+0x608>)
 8004d2c:	4640      	mov	r0, r8
 8004d2e:	4649      	mov	r1, r9
 8004d30:	f7fb fc5e 	bl	80005f0 <__aeabi_dmul>
 8004d34:	e9cd 0100 	strd	r0, r1, [sp]
 8004d38:	9e04      	ldr	r6, [sp, #16]
 8004d3a:	f10b 37ff 	add.w	r7, fp, #4294967295
 8004d3e:	3501      	adds	r5, #1
 8004d40:	4628      	mov	r0, r5
 8004d42:	f7fb fbef 	bl	8000524 <__aeabi_i2d>
 8004d46:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004d4a:	f7fb fc51 	bl	80005f0 <__aeabi_dmul>
 8004d4e:	2200      	movs	r2, #0
 8004d50:	4b84      	ldr	r3, [pc, #528]	; (8004f64 <_dtoa_r+0x60c>)
 8004d52:	f7fb fa9b 	bl	800028c <__adddf3>
 8004d56:	4680      	mov	r8, r0
 8004d58:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 8004d5c:	2e00      	cmp	r6, #0
 8004d5e:	d15a      	bne.n	8004e16 <_dtoa_r+0x4be>
 8004d60:	2200      	movs	r2, #0
 8004d62:	4b81      	ldr	r3, [pc, #516]	; (8004f68 <_dtoa_r+0x610>)
 8004d64:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004d68:	f7fb fa8e 	bl	8000288 <__aeabi_dsub>
 8004d6c:	4642      	mov	r2, r8
 8004d6e:	464b      	mov	r3, r9
 8004d70:	e9cd 0100 	strd	r0, r1, [sp]
 8004d74:	f7fb fecc 	bl	8000b10 <__aeabi_dcmpgt>
 8004d78:	2800      	cmp	r0, #0
 8004d7a:	f040 829b 	bne.w	80052b4 <_dtoa_r+0x95c>
 8004d7e:	4642      	mov	r2, r8
 8004d80:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8004d84:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004d88:	f7fb fea4 	bl	8000ad4 <__aeabi_dcmplt>
 8004d8c:	2800      	cmp	r0, #0
 8004d8e:	f040 828f 	bne.w	80052b0 <_dtoa_r+0x958>
 8004d92:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004d96:	e9cd 2300 	strd	r2, r3, [sp]
 8004d9a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	f2c0 8150 	blt.w	8005042 <_dtoa_r+0x6ea>
 8004da2:	f1bb 0f0e 	cmp.w	fp, #14
 8004da6:	f300 814c 	bgt.w	8005042 <_dtoa_r+0x6ea>
 8004daa:	4b6a      	ldr	r3, [pc, #424]	; (8004f54 <_dtoa_r+0x5fc>)
 8004dac:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004db0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004db4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	f280 80da 	bge.w	8004f70 <_dtoa_r+0x618>
 8004dbc:	9b03      	ldr	r3, [sp, #12]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	f300 80d6 	bgt.w	8004f70 <_dtoa_r+0x618>
 8004dc4:	f040 8273 	bne.w	80052ae <_dtoa_r+0x956>
 8004dc8:	2200      	movs	r2, #0
 8004dca:	4b67      	ldr	r3, [pc, #412]	; (8004f68 <_dtoa_r+0x610>)
 8004dcc:	4640      	mov	r0, r8
 8004dce:	4649      	mov	r1, r9
 8004dd0:	f7fb fc0e 	bl	80005f0 <__aeabi_dmul>
 8004dd4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004dd8:	f7fb fe90 	bl	8000afc <__aeabi_dcmpge>
 8004ddc:	9e03      	ldr	r6, [sp, #12]
 8004dde:	4637      	mov	r7, r6
 8004de0:	2800      	cmp	r0, #0
 8004de2:	f040 824a 	bne.w	800527a <_dtoa_r+0x922>
 8004de6:	9b02      	ldr	r3, [sp, #8]
 8004de8:	9a02      	ldr	r2, [sp, #8]
 8004dea:	1c5d      	adds	r5, r3, #1
 8004dec:	2331      	movs	r3, #49	; 0x31
 8004dee:	7013      	strb	r3, [r2, #0]
 8004df0:	f10b 0b01 	add.w	fp, fp, #1
 8004df4:	e245      	b.n	8005282 <_dtoa_r+0x92a>
 8004df6:	07f2      	lsls	r2, r6, #31
 8004df8:	d505      	bpl.n	8004e06 <_dtoa_r+0x4ae>
 8004dfa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004dfe:	f7fb fbf7 	bl	80005f0 <__aeabi_dmul>
 8004e02:	3501      	adds	r5, #1
 8004e04:	2301      	movs	r3, #1
 8004e06:	1076      	asrs	r6, r6, #1
 8004e08:	3708      	adds	r7, #8
 8004e0a:	e775      	b.n	8004cf8 <_dtoa_r+0x3a0>
 8004e0c:	2502      	movs	r5, #2
 8004e0e:	e777      	b.n	8004d00 <_dtoa_r+0x3a8>
 8004e10:	465f      	mov	r7, fp
 8004e12:	9e03      	ldr	r6, [sp, #12]
 8004e14:	e794      	b.n	8004d40 <_dtoa_r+0x3e8>
 8004e16:	9a02      	ldr	r2, [sp, #8]
 8004e18:	4b4e      	ldr	r3, [pc, #312]	; (8004f54 <_dtoa_r+0x5fc>)
 8004e1a:	4432      	add	r2, r6
 8004e1c:	9213      	str	r2, [sp, #76]	; 0x4c
 8004e1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004e20:	1e71      	subs	r1, r6, #1
 8004e22:	2a00      	cmp	r2, #0
 8004e24:	d048      	beq.n	8004eb8 <_dtoa_r+0x560>
 8004e26:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8004e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e2e:	2000      	movs	r0, #0
 8004e30:	494e      	ldr	r1, [pc, #312]	; (8004f6c <_dtoa_r+0x614>)
 8004e32:	f7fb fd07 	bl	8000844 <__aeabi_ddiv>
 8004e36:	4642      	mov	r2, r8
 8004e38:	464b      	mov	r3, r9
 8004e3a:	f7fb fa25 	bl	8000288 <__aeabi_dsub>
 8004e3e:	9d02      	ldr	r5, [sp, #8]
 8004e40:	4680      	mov	r8, r0
 8004e42:	4689      	mov	r9, r1
 8004e44:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004e48:	f7fb fe82 	bl	8000b50 <__aeabi_d2iz>
 8004e4c:	4606      	mov	r6, r0
 8004e4e:	f7fb fb69 	bl	8000524 <__aeabi_i2d>
 8004e52:	4602      	mov	r2, r0
 8004e54:	460b      	mov	r3, r1
 8004e56:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004e5a:	f7fb fa15 	bl	8000288 <__aeabi_dsub>
 8004e5e:	3630      	adds	r6, #48	; 0x30
 8004e60:	f805 6b01 	strb.w	r6, [r5], #1
 8004e64:	4642      	mov	r2, r8
 8004e66:	464b      	mov	r3, r9
 8004e68:	e9cd 0100 	strd	r0, r1, [sp]
 8004e6c:	f7fb fe32 	bl	8000ad4 <__aeabi_dcmplt>
 8004e70:	2800      	cmp	r0, #0
 8004e72:	d165      	bne.n	8004f40 <_dtoa_r+0x5e8>
 8004e74:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004e78:	2000      	movs	r0, #0
 8004e7a:	4938      	ldr	r1, [pc, #224]	; (8004f5c <_dtoa_r+0x604>)
 8004e7c:	f7fb fa04 	bl	8000288 <__aeabi_dsub>
 8004e80:	4642      	mov	r2, r8
 8004e82:	464b      	mov	r3, r9
 8004e84:	f7fb fe26 	bl	8000ad4 <__aeabi_dcmplt>
 8004e88:	2800      	cmp	r0, #0
 8004e8a:	f040 80ba 	bne.w	8005002 <_dtoa_r+0x6aa>
 8004e8e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004e90:	429d      	cmp	r5, r3
 8004e92:	f43f af7e 	beq.w	8004d92 <_dtoa_r+0x43a>
 8004e96:	2200      	movs	r2, #0
 8004e98:	4b31      	ldr	r3, [pc, #196]	; (8004f60 <_dtoa_r+0x608>)
 8004e9a:	4640      	mov	r0, r8
 8004e9c:	4649      	mov	r1, r9
 8004e9e:	f7fb fba7 	bl	80005f0 <__aeabi_dmul>
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	4680      	mov	r8, r0
 8004ea6:	4689      	mov	r9, r1
 8004ea8:	4b2d      	ldr	r3, [pc, #180]	; (8004f60 <_dtoa_r+0x608>)
 8004eaa:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004eae:	f7fb fb9f 	bl	80005f0 <__aeabi_dmul>
 8004eb2:	e9cd 0100 	strd	r0, r1, [sp]
 8004eb6:	e7c5      	b.n	8004e44 <_dtoa_r+0x4ec>
 8004eb8:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8004ebc:	4642      	mov	r2, r8
 8004ebe:	464b      	mov	r3, r9
 8004ec0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004ec4:	f7fb fb94 	bl	80005f0 <__aeabi_dmul>
 8004ec8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004ecc:	9d02      	ldr	r5, [sp, #8]
 8004ece:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004ed2:	f7fb fe3d 	bl	8000b50 <__aeabi_d2iz>
 8004ed6:	4606      	mov	r6, r0
 8004ed8:	f7fb fb24 	bl	8000524 <__aeabi_i2d>
 8004edc:	3630      	adds	r6, #48	; 0x30
 8004ede:	4602      	mov	r2, r0
 8004ee0:	460b      	mov	r3, r1
 8004ee2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004ee6:	f7fb f9cf 	bl	8000288 <__aeabi_dsub>
 8004eea:	f805 6b01 	strb.w	r6, [r5], #1
 8004eee:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004ef0:	42ab      	cmp	r3, r5
 8004ef2:	4680      	mov	r8, r0
 8004ef4:	4689      	mov	r9, r1
 8004ef6:	f04f 0200 	mov.w	r2, #0
 8004efa:	d125      	bne.n	8004f48 <_dtoa_r+0x5f0>
 8004efc:	4b1b      	ldr	r3, [pc, #108]	; (8004f6c <_dtoa_r+0x614>)
 8004efe:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004f02:	f7fb f9c3 	bl	800028c <__adddf3>
 8004f06:	4602      	mov	r2, r0
 8004f08:	460b      	mov	r3, r1
 8004f0a:	4640      	mov	r0, r8
 8004f0c:	4649      	mov	r1, r9
 8004f0e:	f7fb fdff 	bl	8000b10 <__aeabi_dcmpgt>
 8004f12:	2800      	cmp	r0, #0
 8004f14:	d175      	bne.n	8005002 <_dtoa_r+0x6aa>
 8004f16:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004f1a:	2000      	movs	r0, #0
 8004f1c:	4913      	ldr	r1, [pc, #76]	; (8004f6c <_dtoa_r+0x614>)
 8004f1e:	f7fb f9b3 	bl	8000288 <__aeabi_dsub>
 8004f22:	4602      	mov	r2, r0
 8004f24:	460b      	mov	r3, r1
 8004f26:	4640      	mov	r0, r8
 8004f28:	4649      	mov	r1, r9
 8004f2a:	f7fb fdd3 	bl	8000ad4 <__aeabi_dcmplt>
 8004f2e:	2800      	cmp	r0, #0
 8004f30:	f43f af2f 	beq.w	8004d92 <_dtoa_r+0x43a>
 8004f34:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004f38:	2b30      	cmp	r3, #48	; 0x30
 8004f3a:	f105 32ff 	add.w	r2, r5, #4294967295
 8004f3e:	d001      	beq.n	8004f44 <_dtoa_r+0x5ec>
 8004f40:	46bb      	mov	fp, r7
 8004f42:	e04d      	b.n	8004fe0 <_dtoa_r+0x688>
 8004f44:	4615      	mov	r5, r2
 8004f46:	e7f5      	b.n	8004f34 <_dtoa_r+0x5dc>
 8004f48:	4b05      	ldr	r3, [pc, #20]	; (8004f60 <_dtoa_r+0x608>)
 8004f4a:	f7fb fb51 	bl	80005f0 <__aeabi_dmul>
 8004f4e:	e9cd 0100 	strd	r0, r1, [sp]
 8004f52:	e7bc      	b.n	8004ece <_dtoa_r+0x576>
 8004f54:	080072d8 	.word	0x080072d8
 8004f58:	080072b0 	.word	0x080072b0
 8004f5c:	3ff00000 	.word	0x3ff00000
 8004f60:	40240000 	.word	0x40240000
 8004f64:	401c0000 	.word	0x401c0000
 8004f68:	40140000 	.word	0x40140000
 8004f6c:	3fe00000 	.word	0x3fe00000
 8004f70:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004f74:	9d02      	ldr	r5, [sp, #8]
 8004f76:	4642      	mov	r2, r8
 8004f78:	464b      	mov	r3, r9
 8004f7a:	4630      	mov	r0, r6
 8004f7c:	4639      	mov	r1, r7
 8004f7e:	f7fb fc61 	bl	8000844 <__aeabi_ddiv>
 8004f82:	f7fb fde5 	bl	8000b50 <__aeabi_d2iz>
 8004f86:	9000      	str	r0, [sp, #0]
 8004f88:	f7fb facc 	bl	8000524 <__aeabi_i2d>
 8004f8c:	4642      	mov	r2, r8
 8004f8e:	464b      	mov	r3, r9
 8004f90:	f7fb fb2e 	bl	80005f0 <__aeabi_dmul>
 8004f94:	4602      	mov	r2, r0
 8004f96:	460b      	mov	r3, r1
 8004f98:	4630      	mov	r0, r6
 8004f9a:	4639      	mov	r1, r7
 8004f9c:	f7fb f974 	bl	8000288 <__aeabi_dsub>
 8004fa0:	9e00      	ldr	r6, [sp, #0]
 8004fa2:	9f03      	ldr	r7, [sp, #12]
 8004fa4:	3630      	adds	r6, #48	; 0x30
 8004fa6:	f805 6b01 	strb.w	r6, [r5], #1
 8004faa:	9e02      	ldr	r6, [sp, #8]
 8004fac:	1bae      	subs	r6, r5, r6
 8004fae:	42b7      	cmp	r7, r6
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	460b      	mov	r3, r1
 8004fb4:	d138      	bne.n	8005028 <_dtoa_r+0x6d0>
 8004fb6:	f7fb f969 	bl	800028c <__adddf3>
 8004fba:	4606      	mov	r6, r0
 8004fbc:	460f      	mov	r7, r1
 8004fbe:	4602      	mov	r2, r0
 8004fc0:	460b      	mov	r3, r1
 8004fc2:	4640      	mov	r0, r8
 8004fc4:	4649      	mov	r1, r9
 8004fc6:	f7fb fd85 	bl	8000ad4 <__aeabi_dcmplt>
 8004fca:	b9c8      	cbnz	r0, 8005000 <_dtoa_r+0x6a8>
 8004fcc:	4632      	mov	r2, r6
 8004fce:	463b      	mov	r3, r7
 8004fd0:	4640      	mov	r0, r8
 8004fd2:	4649      	mov	r1, r9
 8004fd4:	f7fb fd74 	bl	8000ac0 <__aeabi_dcmpeq>
 8004fd8:	b110      	cbz	r0, 8004fe0 <_dtoa_r+0x688>
 8004fda:	9b00      	ldr	r3, [sp, #0]
 8004fdc:	07db      	lsls	r3, r3, #31
 8004fde:	d40f      	bmi.n	8005000 <_dtoa_r+0x6a8>
 8004fe0:	4651      	mov	r1, sl
 8004fe2:	4620      	mov	r0, r4
 8004fe4:	f001 f844 	bl	8006070 <_Bfree>
 8004fe8:	2300      	movs	r3, #0
 8004fea:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004fec:	702b      	strb	r3, [r5, #0]
 8004fee:	f10b 0301 	add.w	r3, fp, #1
 8004ff2:	6013      	str	r3, [r2, #0]
 8004ff4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	f43f acf8 	beq.w	80049ec <_dtoa_r+0x94>
 8004ffc:	601d      	str	r5, [r3, #0]
 8004ffe:	e4f5      	b.n	80049ec <_dtoa_r+0x94>
 8005000:	465f      	mov	r7, fp
 8005002:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005006:	2a39      	cmp	r2, #57	; 0x39
 8005008:	f105 33ff 	add.w	r3, r5, #4294967295
 800500c:	d106      	bne.n	800501c <_dtoa_r+0x6c4>
 800500e:	9a02      	ldr	r2, [sp, #8]
 8005010:	429a      	cmp	r2, r3
 8005012:	d107      	bne.n	8005024 <_dtoa_r+0x6cc>
 8005014:	2330      	movs	r3, #48	; 0x30
 8005016:	7013      	strb	r3, [r2, #0]
 8005018:	3701      	adds	r7, #1
 800501a:	4613      	mov	r3, r2
 800501c:	781a      	ldrb	r2, [r3, #0]
 800501e:	3201      	adds	r2, #1
 8005020:	701a      	strb	r2, [r3, #0]
 8005022:	e78d      	b.n	8004f40 <_dtoa_r+0x5e8>
 8005024:	461d      	mov	r5, r3
 8005026:	e7ec      	b.n	8005002 <_dtoa_r+0x6aa>
 8005028:	2200      	movs	r2, #0
 800502a:	4ba4      	ldr	r3, [pc, #656]	; (80052bc <_dtoa_r+0x964>)
 800502c:	f7fb fae0 	bl	80005f0 <__aeabi_dmul>
 8005030:	2200      	movs	r2, #0
 8005032:	2300      	movs	r3, #0
 8005034:	4606      	mov	r6, r0
 8005036:	460f      	mov	r7, r1
 8005038:	f7fb fd42 	bl	8000ac0 <__aeabi_dcmpeq>
 800503c:	2800      	cmp	r0, #0
 800503e:	d09a      	beq.n	8004f76 <_dtoa_r+0x61e>
 8005040:	e7ce      	b.n	8004fe0 <_dtoa_r+0x688>
 8005042:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005044:	2a00      	cmp	r2, #0
 8005046:	f000 80cd 	beq.w	80051e4 <_dtoa_r+0x88c>
 800504a:	9a07      	ldr	r2, [sp, #28]
 800504c:	2a01      	cmp	r2, #1
 800504e:	f300 80af 	bgt.w	80051b0 <_dtoa_r+0x858>
 8005052:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005054:	2a00      	cmp	r2, #0
 8005056:	f000 80a7 	beq.w	80051a8 <_dtoa_r+0x850>
 800505a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800505e:	9e08      	ldr	r6, [sp, #32]
 8005060:	9d05      	ldr	r5, [sp, #20]
 8005062:	9a05      	ldr	r2, [sp, #20]
 8005064:	441a      	add	r2, r3
 8005066:	9205      	str	r2, [sp, #20]
 8005068:	9a06      	ldr	r2, [sp, #24]
 800506a:	2101      	movs	r1, #1
 800506c:	441a      	add	r2, r3
 800506e:	4620      	mov	r0, r4
 8005070:	9206      	str	r2, [sp, #24]
 8005072:	f001 f89d 	bl	80061b0 <__i2b>
 8005076:	4607      	mov	r7, r0
 8005078:	2d00      	cmp	r5, #0
 800507a:	dd0c      	ble.n	8005096 <_dtoa_r+0x73e>
 800507c:	9b06      	ldr	r3, [sp, #24]
 800507e:	2b00      	cmp	r3, #0
 8005080:	dd09      	ble.n	8005096 <_dtoa_r+0x73e>
 8005082:	42ab      	cmp	r3, r5
 8005084:	9a05      	ldr	r2, [sp, #20]
 8005086:	bfa8      	it	ge
 8005088:	462b      	movge	r3, r5
 800508a:	1ad2      	subs	r2, r2, r3
 800508c:	9205      	str	r2, [sp, #20]
 800508e:	9a06      	ldr	r2, [sp, #24]
 8005090:	1aed      	subs	r5, r5, r3
 8005092:	1ad3      	subs	r3, r2, r3
 8005094:	9306      	str	r3, [sp, #24]
 8005096:	9b08      	ldr	r3, [sp, #32]
 8005098:	b1f3      	cbz	r3, 80050d8 <_dtoa_r+0x780>
 800509a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800509c:	2b00      	cmp	r3, #0
 800509e:	f000 80a5 	beq.w	80051ec <_dtoa_r+0x894>
 80050a2:	2e00      	cmp	r6, #0
 80050a4:	dd10      	ble.n	80050c8 <_dtoa_r+0x770>
 80050a6:	4639      	mov	r1, r7
 80050a8:	4632      	mov	r2, r6
 80050aa:	4620      	mov	r0, r4
 80050ac:	f001 f916 	bl	80062dc <__pow5mult>
 80050b0:	4652      	mov	r2, sl
 80050b2:	4601      	mov	r1, r0
 80050b4:	4607      	mov	r7, r0
 80050b6:	4620      	mov	r0, r4
 80050b8:	f001 f883 	bl	80061c2 <__multiply>
 80050bc:	4651      	mov	r1, sl
 80050be:	4680      	mov	r8, r0
 80050c0:	4620      	mov	r0, r4
 80050c2:	f000 ffd5 	bl	8006070 <_Bfree>
 80050c6:	46c2      	mov	sl, r8
 80050c8:	9b08      	ldr	r3, [sp, #32]
 80050ca:	1b9a      	subs	r2, r3, r6
 80050cc:	d004      	beq.n	80050d8 <_dtoa_r+0x780>
 80050ce:	4651      	mov	r1, sl
 80050d0:	4620      	mov	r0, r4
 80050d2:	f001 f903 	bl	80062dc <__pow5mult>
 80050d6:	4682      	mov	sl, r0
 80050d8:	2101      	movs	r1, #1
 80050da:	4620      	mov	r0, r4
 80050dc:	f001 f868 	bl	80061b0 <__i2b>
 80050e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	4606      	mov	r6, r0
 80050e6:	f340 8083 	ble.w	80051f0 <_dtoa_r+0x898>
 80050ea:	461a      	mov	r2, r3
 80050ec:	4601      	mov	r1, r0
 80050ee:	4620      	mov	r0, r4
 80050f0:	f001 f8f4 	bl	80062dc <__pow5mult>
 80050f4:	9b07      	ldr	r3, [sp, #28]
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	4606      	mov	r6, r0
 80050fa:	dd7c      	ble.n	80051f6 <_dtoa_r+0x89e>
 80050fc:	f04f 0800 	mov.w	r8, #0
 8005100:	6933      	ldr	r3, [r6, #16]
 8005102:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005106:	6918      	ldr	r0, [r3, #16]
 8005108:	f001 f804 	bl	8006114 <__hi0bits>
 800510c:	f1c0 0020 	rsb	r0, r0, #32
 8005110:	9b06      	ldr	r3, [sp, #24]
 8005112:	4418      	add	r0, r3
 8005114:	f010 001f 	ands.w	r0, r0, #31
 8005118:	f000 8096 	beq.w	8005248 <_dtoa_r+0x8f0>
 800511c:	f1c0 0320 	rsb	r3, r0, #32
 8005120:	2b04      	cmp	r3, #4
 8005122:	f340 8087 	ble.w	8005234 <_dtoa_r+0x8dc>
 8005126:	9b05      	ldr	r3, [sp, #20]
 8005128:	f1c0 001c 	rsb	r0, r0, #28
 800512c:	4403      	add	r3, r0
 800512e:	9305      	str	r3, [sp, #20]
 8005130:	9b06      	ldr	r3, [sp, #24]
 8005132:	4405      	add	r5, r0
 8005134:	4403      	add	r3, r0
 8005136:	9306      	str	r3, [sp, #24]
 8005138:	9b05      	ldr	r3, [sp, #20]
 800513a:	2b00      	cmp	r3, #0
 800513c:	dd05      	ble.n	800514a <_dtoa_r+0x7f2>
 800513e:	4651      	mov	r1, sl
 8005140:	461a      	mov	r2, r3
 8005142:	4620      	mov	r0, r4
 8005144:	f001 f918 	bl	8006378 <__lshift>
 8005148:	4682      	mov	sl, r0
 800514a:	9b06      	ldr	r3, [sp, #24]
 800514c:	2b00      	cmp	r3, #0
 800514e:	dd05      	ble.n	800515c <_dtoa_r+0x804>
 8005150:	4631      	mov	r1, r6
 8005152:	461a      	mov	r2, r3
 8005154:	4620      	mov	r0, r4
 8005156:	f001 f90f 	bl	8006378 <__lshift>
 800515a:	4606      	mov	r6, r0
 800515c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800515e:	2b00      	cmp	r3, #0
 8005160:	d074      	beq.n	800524c <_dtoa_r+0x8f4>
 8005162:	4631      	mov	r1, r6
 8005164:	4650      	mov	r0, sl
 8005166:	f001 f958 	bl	800641a <__mcmp>
 800516a:	2800      	cmp	r0, #0
 800516c:	da6e      	bge.n	800524c <_dtoa_r+0x8f4>
 800516e:	2300      	movs	r3, #0
 8005170:	4651      	mov	r1, sl
 8005172:	220a      	movs	r2, #10
 8005174:	4620      	mov	r0, r4
 8005176:	f000 ff92 	bl	800609e <__multadd>
 800517a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800517c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005180:	4682      	mov	sl, r0
 8005182:	2b00      	cmp	r3, #0
 8005184:	f000 81a8 	beq.w	80054d8 <_dtoa_r+0xb80>
 8005188:	2300      	movs	r3, #0
 800518a:	4639      	mov	r1, r7
 800518c:	220a      	movs	r2, #10
 800518e:	4620      	mov	r0, r4
 8005190:	f000 ff85 	bl	800609e <__multadd>
 8005194:	9b04      	ldr	r3, [sp, #16]
 8005196:	2b00      	cmp	r3, #0
 8005198:	4607      	mov	r7, r0
 800519a:	f300 80c8 	bgt.w	800532e <_dtoa_r+0x9d6>
 800519e:	9b07      	ldr	r3, [sp, #28]
 80051a0:	2b02      	cmp	r3, #2
 80051a2:	f340 80c4 	ble.w	800532e <_dtoa_r+0x9d6>
 80051a6:	e059      	b.n	800525c <_dtoa_r+0x904>
 80051a8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80051aa:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80051ae:	e756      	b.n	800505e <_dtoa_r+0x706>
 80051b0:	9b03      	ldr	r3, [sp, #12]
 80051b2:	1e5e      	subs	r6, r3, #1
 80051b4:	9b08      	ldr	r3, [sp, #32]
 80051b6:	42b3      	cmp	r3, r6
 80051b8:	bfbf      	itttt	lt
 80051ba:	9b08      	ldrlt	r3, [sp, #32]
 80051bc:	9608      	strlt	r6, [sp, #32]
 80051be:	1af2      	sublt	r2, r6, r3
 80051c0:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 80051c2:	bfb6      	itet	lt
 80051c4:	189b      	addlt	r3, r3, r2
 80051c6:	1b9e      	subge	r6, r3, r6
 80051c8:	930b      	strlt	r3, [sp, #44]	; 0x2c
 80051ca:	9b03      	ldr	r3, [sp, #12]
 80051cc:	bfb8      	it	lt
 80051ce:	2600      	movlt	r6, #0
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	bfb9      	ittee	lt
 80051d4:	9b05      	ldrlt	r3, [sp, #20]
 80051d6:	9a03      	ldrlt	r2, [sp, #12]
 80051d8:	9d05      	ldrge	r5, [sp, #20]
 80051da:	9b03      	ldrge	r3, [sp, #12]
 80051dc:	bfbc      	itt	lt
 80051de:	1a9d      	sublt	r5, r3, r2
 80051e0:	2300      	movlt	r3, #0
 80051e2:	e73e      	b.n	8005062 <_dtoa_r+0x70a>
 80051e4:	9e08      	ldr	r6, [sp, #32]
 80051e6:	9d05      	ldr	r5, [sp, #20]
 80051e8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80051ea:	e745      	b.n	8005078 <_dtoa_r+0x720>
 80051ec:	9a08      	ldr	r2, [sp, #32]
 80051ee:	e76e      	b.n	80050ce <_dtoa_r+0x776>
 80051f0:	9b07      	ldr	r3, [sp, #28]
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	dc19      	bgt.n	800522a <_dtoa_r+0x8d2>
 80051f6:	9b00      	ldr	r3, [sp, #0]
 80051f8:	b9bb      	cbnz	r3, 800522a <_dtoa_r+0x8d2>
 80051fa:	9b01      	ldr	r3, [sp, #4]
 80051fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005200:	b99b      	cbnz	r3, 800522a <_dtoa_r+0x8d2>
 8005202:	9b01      	ldr	r3, [sp, #4]
 8005204:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005208:	0d1b      	lsrs	r3, r3, #20
 800520a:	051b      	lsls	r3, r3, #20
 800520c:	b183      	cbz	r3, 8005230 <_dtoa_r+0x8d8>
 800520e:	9b05      	ldr	r3, [sp, #20]
 8005210:	3301      	adds	r3, #1
 8005212:	9305      	str	r3, [sp, #20]
 8005214:	9b06      	ldr	r3, [sp, #24]
 8005216:	3301      	adds	r3, #1
 8005218:	9306      	str	r3, [sp, #24]
 800521a:	f04f 0801 	mov.w	r8, #1
 800521e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005220:	2b00      	cmp	r3, #0
 8005222:	f47f af6d 	bne.w	8005100 <_dtoa_r+0x7a8>
 8005226:	2001      	movs	r0, #1
 8005228:	e772      	b.n	8005110 <_dtoa_r+0x7b8>
 800522a:	f04f 0800 	mov.w	r8, #0
 800522e:	e7f6      	b.n	800521e <_dtoa_r+0x8c6>
 8005230:	4698      	mov	r8, r3
 8005232:	e7f4      	b.n	800521e <_dtoa_r+0x8c6>
 8005234:	d080      	beq.n	8005138 <_dtoa_r+0x7e0>
 8005236:	9a05      	ldr	r2, [sp, #20]
 8005238:	331c      	adds	r3, #28
 800523a:	441a      	add	r2, r3
 800523c:	9205      	str	r2, [sp, #20]
 800523e:	9a06      	ldr	r2, [sp, #24]
 8005240:	441a      	add	r2, r3
 8005242:	441d      	add	r5, r3
 8005244:	4613      	mov	r3, r2
 8005246:	e776      	b.n	8005136 <_dtoa_r+0x7de>
 8005248:	4603      	mov	r3, r0
 800524a:	e7f4      	b.n	8005236 <_dtoa_r+0x8de>
 800524c:	9b03      	ldr	r3, [sp, #12]
 800524e:	2b00      	cmp	r3, #0
 8005250:	dc36      	bgt.n	80052c0 <_dtoa_r+0x968>
 8005252:	9b07      	ldr	r3, [sp, #28]
 8005254:	2b02      	cmp	r3, #2
 8005256:	dd33      	ble.n	80052c0 <_dtoa_r+0x968>
 8005258:	9b03      	ldr	r3, [sp, #12]
 800525a:	9304      	str	r3, [sp, #16]
 800525c:	9b04      	ldr	r3, [sp, #16]
 800525e:	b963      	cbnz	r3, 800527a <_dtoa_r+0x922>
 8005260:	4631      	mov	r1, r6
 8005262:	2205      	movs	r2, #5
 8005264:	4620      	mov	r0, r4
 8005266:	f000 ff1a 	bl	800609e <__multadd>
 800526a:	4601      	mov	r1, r0
 800526c:	4606      	mov	r6, r0
 800526e:	4650      	mov	r0, sl
 8005270:	f001 f8d3 	bl	800641a <__mcmp>
 8005274:	2800      	cmp	r0, #0
 8005276:	f73f adb6 	bgt.w	8004de6 <_dtoa_r+0x48e>
 800527a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800527c:	9d02      	ldr	r5, [sp, #8]
 800527e:	ea6f 0b03 	mvn.w	fp, r3
 8005282:	2300      	movs	r3, #0
 8005284:	9303      	str	r3, [sp, #12]
 8005286:	4631      	mov	r1, r6
 8005288:	4620      	mov	r0, r4
 800528a:	f000 fef1 	bl	8006070 <_Bfree>
 800528e:	2f00      	cmp	r7, #0
 8005290:	f43f aea6 	beq.w	8004fe0 <_dtoa_r+0x688>
 8005294:	9b03      	ldr	r3, [sp, #12]
 8005296:	b12b      	cbz	r3, 80052a4 <_dtoa_r+0x94c>
 8005298:	42bb      	cmp	r3, r7
 800529a:	d003      	beq.n	80052a4 <_dtoa_r+0x94c>
 800529c:	4619      	mov	r1, r3
 800529e:	4620      	mov	r0, r4
 80052a0:	f000 fee6 	bl	8006070 <_Bfree>
 80052a4:	4639      	mov	r1, r7
 80052a6:	4620      	mov	r0, r4
 80052a8:	f000 fee2 	bl	8006070 <_Bfree>
 80052ac:	e698      	b.n	8004fe0 <_dtoa_r+0x688>
 80052ae:	2600      	movs	r6, #0
 80052b0:	4637      	mov	r7, r6
 80052b2:	e7e2      	b.n	800527a <_dtoa_r+0x922>
 80052b4:	46bb      	mov	fp, r7
 80052b6:	4637      	mov	r7, r6
 80052b8:	e595      	b.n	8004de6 <_dtoa_r+0x48e>
 80052ba:	bf00      	nop
 80052bc:	40240000 	.word	0x40240000
 80052c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052c2:	bb93      	cbnz	r3, 800532a <_dtoa_r+0x9d2>
 80052c4:	9b03      	ldr	r3, [sp, #12]
 80052c6:	9304      	str	r3, [sp, #16]
 80052c8:	9d02      	ldr	r5, [sp, #8]
 80052ca:	4631      	mov	r1, r6
 80052cc:	4650      	mov	r0, sl
 80052ce:	f7ff fab5 	bl	800483c <quorem>
 80052d2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80052d6:	f805 9b01 	strb.w	r9, [r5], #1
 80052da:	9b02      	ldr	r3, [sp, #8]
 80052dc:	9a04      	ldr	r2, [sp, #16]
 80052de:	1aeb      	subs	r3, r5, r3
 80052e0:	429a      	cmp	r2, r3
 80052e2:	f300 80dc 	bgt.w	800549e <_dtoa_r+0xb46>
 80052e6:	9b02      	ldr	r3, [sp, #8]
 80052e8:	2a01      	cmp	r2, #1
 80052ea:	bfac      	ite	ge
 80052ec:	189b      	addge	r3, r3, r2
 80052ee:	3301      	addlt	r3, #1
 80052f0:	4698      	mov	r8, r3
 80052f2:	2300      	movs	r3, #0
 80052f4:	9303      	str	r3, [sp, #12]
 80052f6:	4651      	mov	r1, sl
 80052f8:	2201      	movs	r2, #1
 80052fa:	4620      	mov	r0, r4
 80052fc:	f001 f83c 	bl	8006378 <__lshift>
 8005300:	4631      	mov	r1, r6
 8005302:	4682      	mov	sl, r0
 8005304:	f001 f889 	bl	800641a <__mcmp>
 8005308:	2800      	cmp	r0, #0
 800530a:	f300 808d 	bgt.w	8005428 <_dtoa_r+0xad0>
 800530e:	d103      	bne.n	8005318 <_dtoa_r+0x9c0>
 8005310:	f019 0f01 	tst.w	r9, #1
 8005314:	f040 8088 	bne.w	8005428 <_dtoa_r+0xad0>
 8005318:	4645      	mov	r5, r8
 800531a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800531e:	2b30      	cmp	r3, #48	; 0x30
 8005320:	f105 32ff 	add.w	r2, r5, #4294967295
 8005324:	d1af      	bne.n	8005286 <_dtoa_r+0x92e>
 8005326:	4615      	mov	r5, r2
 8005328:	e7f7      	b.n	800531a <_dtoa_r+0x9c2>
 800532a:	9b03      	ldr	r3, [sp, #12]
 800532c:	9304      	str	r3, [sp, #16]
 800532e:	2d00      	cmp	r5, #0
 8005330:	dd05      	ble.n	800533e <_dtoa_r+0x9e6>
 8005332:	4639      	mov	r1, r7
 8005334:	462a      	mov	r2, r5
 8005336:	4620      	mov	r0, r4
 8005338:	f001 f81e 	bl	8006378 <__lshift>
 800533c:	4607      	mov	r7, r0
 800533e:	f1b8 0f00 	cmp.w	r8, #0
 8005342:	d04c      	beq.n	80053de <_dtoa_r+0xa86>
 8005344:	6879      	ldr	r1, [r7, #4]
 8005346:	4620      	mov	r0, r4
 8005348:	f000 fe5e 	bl	8006008 <_Balloc>
 800534c:	693a      	ldr	r2, [r7, #16]
 800534e:	3202      	adds	r2, #2
 8005350:	4605      	mov	r5, r0
 8005352:	0092      	lsls	r2, r2, #2
 8005354:	f107 010c 	add.w	r1, r7, #12
 8005358:	300c      	adds	r0, #12
 800535a:	f000 fe35 	bl	8005fc8 <memcpy>
 800535e:	2201      	movs	r2, #1
 8005360:	4629      	mov	r1, r5
 8005362:	4620      	mov	r0, r4
 8005364:	f001 f808 	bl	8006378 <__lshift>
 8005368:	9b00      	ldr	r3, [sp, #0]
 800536a:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800536e:	9703      	str	r7, [sp, #12]
 8005370:	f003 0301 	and.w	r3, r3, #1
 8005374:	4607      	mov	r7, r0
 8005376:	9305      	str	r3, [sp, #20]
 8005378:	4631      	mov	r1, r6
 800537a:	4650      	mov	r0, sl
 800537c:	f7ff fa5e 	bl	800483c <quorem>
 8005380:	9903      	ldr	r1, [sp, #12]
 8005382:	4605      	mov	r5, r0
 8005384:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005388:	4650      	mov	r0, sl
 800538a:	f001 f846 	bl	800641a <__mcmp>
 800538e:	463a      	mov	r2, r7
 8005390:	9000      	str	r0, [sp, #0]
 8005392:	4631      	mov	r1, r6
 8005394:	4620      	mov	r0, r4
 8005396:	f001 f85a 	bl	800644e <__mdiff>
 800539a:	68c3      	ldr	r3, [r0, #12]
 800539c:	4602      	mov	r2, r0
 800539e:	bb03      	cbnz	r3, 80053e2 <_dtoa_r+0xa8a>
 80053a0:	4601      	mov	r1, r0
 80053a2:	9006      	str	r0, [sp, #24]
 80053a4:	4650      	mov	r0, sl
 80053a6:	f001 f838 	bl	800641a <__mcmp>
 80053aa:	9a06      	ldr	r2, [sp, #24]
 80053ac:	4603      	mov	r3, r0
 80053ae:	4611      	mov	r1, r2
 80053b0:	4620      	mov	r0, r4
 80053b2:	9306      	str	r3, [sp, #24]
 80053b4:	f000 fe5c 	bl	8006070 <_Bfree>
 80053b8:	9b06      	ldr	r3, [sp, #24]
 80053ba:	b9a3      	cbnz	r3, 80053e6 <_dtoa_r+0xa8e>
 80053bc:	9a07      	ldr	r2, [sp, #28]
 80053be:	b992      	cbnz	r2, 80053e6 <_dtoa_r+0xa8e>
 80053c0:	9a05      	ldr	r2, [sp, #20]
 80053c2:	b982      	cbnz	r2, 80053e6 <_dtoa_r+0xa8e>
 80053c4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80053c8:	d029      	beq.n	800541e <_dtoa_r+0xac6>
 80053ca:	9b00      	ldr	r3, [sp, #0]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	dd01      	ble.n	80053d4 <_dtoa_r+0xa7c>
 80053d0:	f105 0931 	add.w	r9, r5, #49	; 0x31
 80053d4:	f108 0501 	add.w	r5, r8, #1
 80053d8:	f888 9000 	strb.w	r9, [r8]
 80053dc:	e753      	b.n	8005286 <_dtoa_r+0x92e>
 80053de:	4638      	mov	r0, r7
 80053e0:	e7c2      	b.n	8005368 <_dtoa_r+0xa10>
 80053e2:	2301      	movs	r3, #1
 80053e4:	e7e3      	b.n	80053ae <_dtoa_r+0xa56>
 80053e6:	9a00      	ldr	r2, [sp, #0]
 80053e8:	2a00      	cmp	r2, #0
 80053ea:	db04      	blt.n	80053f6 <_dtoa_r+0xa9e>
 80053ec:	d125      	bne.n	800543a <_dtoa_r+0xae2>
 80053ee:	9a07      	ldr	r2, [sp, #28]
 80053f0:	bb1a      	cbnz	r2, 800543a <_dtoa_r+0xae2>
 80053f2:	9a05      	ldr	r2, [sp, #20]
 80053f4:	bb0a      	cbnz	r2, 800543a <_dtoa_r+0xae2>
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	ddec      	ble.n	80053d4 <_dtoa_r+0xa7c>
 80053fa:	4651      	mov	r1, sl
 80053fc:	2201      	movs	r2, #1
 80053fe:	4620      	mov	r0, r4
 8005400:	f000 ffba 	bl	8006378 <__lshift>
 8005404:	4631      	mov	r1, r6
 8005406:	4682      	mov	sl, r0
 8005408:	f001 f807 	bl	800641a <__mcmp>
 800540c:	2800      	cmp	r0, #0
 800540e:	dc03      	bgt.n	8005418 <_dtoa_r+0xac0>
 8005410:	d1e0      	bne.n	80053d4 <_dtoa_r+0xa7c>
 8005412:	f019 0f01 	tst.w	r9, #1
 8005416:	d0dd      	beq.n	80053d4 <_dtoa_r+0xa7c>
 8005418:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800541c:	d1d8      	bne.n	80053d0 <_dtoa_r+0xa78>
 800541e:	2339      	movs	r3, #57	; 0x39
 8005420:	f888 3000 	strb.w	r3, [r8]
 8005424:	f108 0801 	add.w	r8, r8, #1
 8005428:	4645      	mov	r5, r8
 800542a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800542e:	2b39      	cmp	r3, #57	; 0x39
 8005430:	f105 32ff 	add.w	r2, r5, #4294967295
 8005434:	d03b      	beq.n	80054ae <_dtoa_r+0xb56>
 8005436:	3301      	adds	r3, #1
 8005438:	e040      	b.n	80054bc <_dtoa_r+0xb64>
 800543a:	2b00      	cmp	r3, #0
 800543c:	f108 0501 	add.w	r5, r8, #1
 8005440:	dd05      	ble.n	800544e <_dtoa_r+0xaf6>
 8005442:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005446:	d0ea      	beq.n	800541e <_dtoa_r+0xac6>
 8005448:	f109 0901 	add.w	r9, r9, #1
 800544c:	e7c4      	b.n	80053d8 <_dtoa_r+0xa80>
 800544e:	9b02      	ldr	r3, [sp, #8]
 8005450:	9a04      	ldr	r2, [sp, #16]
 8005452:	f805 9c01 	strb.w	r9, [r5, #-1]
 8005456:	1aeb      	subs	r3, r5, r3
 8005458:	4293      	cmp	r3, r2
 800545a:	46a8      	mov	r8, r5
 800545c:	f43f af4b 	beq.w	80052f6 <_dtoa_r+0x99e>
 8005460:	4651      	mov	r1, sl
 8005462:	2300      	movs	r3, #0
 8005464:	220a      	movs	r2, #10
 8005466:	4620      	mov	r0, r4
 8005468:	f000 fe19 	bl	800609e <__multadd>
 800546c:	9b03      	ldr	r3, [sp, #12]
 800546e:	9903      	ldr	r1, [sp, #12]
 8005470:	42bb      	cmp	r3, r7
 8005472:	4682      	mov	sl, r0
 8005474:	f04f 0300 	mov.w	r3, #0
 8005478:	f04f 020a 	mov.w	r2, #10
 800547c:	4620      	mov	r0, r4
 800547e:	d104      	bne.n	800548a <_dtoa_r+0xb32>
 8005480:	f000 fe0d 	bl	800609e <__multadd>
 8005484:	9003      	str	r0, [sp, #12]
 8005486:	4607      	mov	r7, r0
 8005488:	e776      	b.n	8005378 <_dtoa_r+0xa20>
 800548a:	f000 fe08 	bl	800609e <__multadd>
 800548e:	2300      	movs	r3, #0
 8005490:	9003      	str	r0, [sp, #12]
 8005492:	220a      	movs	r2, #10
 8005494:	4639      	mov	r1, r7
 8005496:	4620      	mov	r0, r4
 8005498:	f000 fe01 	bl	800609e <__multadd>
 800549c:	e7f3      	b.n	8005486 <_dtoa_r+0xb2e>
 800549e:	4651      	mov	r1, sl
 80054a0:	2300      	movs	r3, #0
 80054a2:	220a      	movs	r2, #10
 80054a4:	4620      	mov	r0, r4
 80054a6:	f000 fdfa 	bl	800609e <__multadd>
 80054aa:	4682      	mov	sl, r0
 80054ac:	e70d      	b.n	80052ca <_dtoa_r+0x972>
 80054ae:	9b02      	ldr	r3, [sp, #8]
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d105      	bne.n	80054c0 <_dtoa_r+0xb68>
 80054b4:	9a02      	ldr	r2, [sp, #8]
 80054b6:	f10b 0b01 	add.w	fp, fp, #1
 80054ba:	2331      	movs	r3, #49	; 0x31
 80054bc:	7013      	strb	r3, [r2, #0]
 80054be:	e6e2      	b.n	8005286 <_dtoa_r+0x92e>
 80054c0:	4615      	mov	r5, r2
 80054c2:	e7b2      	b.n	800542a <_dtoa_r+0xad2>
 80054c4:	4b09      	ldr	r3, [pc, #36]	; (80054ec <_dtoa_r+0xb94>)
 80054c6:	f7ff baae 	b.w	8004a26 <_dtoa_r+0xce>
 80054ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	f47f aa88 	bne.w	80049e2 <_dtoa_r+0x8a>
 80054d2:	4b07      	ldr	r3, [pc, #28]	; (80054f0 <_dtoa_r+0xb98>)
 80054d4:	f7ff baa7 	b.w	8004a26 <_dtoa_r+0xce>
 80054d8:	9b04      	ldr	r3, [sp, #16]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	f73f aef4 	bgt.w	80052c8 <_dtoa_r+0x970>
 80054e0:	9b07      	ldr	r3, [sp, #28]
 80054e2:	2b02      	cmp	r3, #2
 80054e4:	f77f aef0 	ble.w	80052c8 <_dtoa_r+0x970>
 80054e8:	e6b8      	b.n	800525c <_dtoa_r+0x904>
 80054ea:	bf00      	nop
 80054ec:	08007216 	.word	0x08007216
 80054f0:	08007238 	.word	0x08007238

080054f4 <__sflush_r>:
 80054f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80054f8:	b293      	uxth	r3, r2
 80054fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054fe:	4605      	mov	r5, r0
 8005500:	0718      	lsls	r0, r3, #28
 8005502:	460c      	mov	r4, r1
 8005504:	d461      	bmi.n	80055ca <__sflush_r+0xd6>
 8005506:	684b      	ldr	r3, [r1, #4]
 8005508:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800550c:	2b00      	cmp	r3, #0
 800550e:	818a      	strh	r2, [r1, #12]
 8005510:	dc05      	bgt.n	800551e <__sflush_r+0x2a>
 8005512:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005514:	2b00      	cmp	r3, #0
 8005516:	dc02      	bgt.n	800551e <__sflush_r+0x2a>
 8005518:	2000      	movs	r0, #0
 800551a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800551e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005520:	2e00      	cmp	r6, #0
 8005522:	d0f9      	beq.n	8005518 <__sflush_r+0x24>
 8005524:	2300      	movs	r3, #0
 8005526:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800552a:	682f      	ldr	r7, [r5, #0]
 800552c:	602b      	str	r3, [r5, #0]
 800552e:	d037      	beq.n	80055a0 <__sflush_r+0xac>
 8005530:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005532:	89a3      	ldrh	r3, [r4, #12]
 8005534:	075a      	lsls	r2, r3, #29
 8005536:	d505      	bpl.n	8005544 <__sflush_r+0x50>
 8005538:	6863      	ldr	r3, [r4, #4]
 800553a:	1ac0      	subs	r0, r0, r3
 800553c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800553e:	b10b      	cbz	r3, 8005544 <__sflush_r+0x50>
 8005540:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005542:	1ac0      	subs	r0, r0, r3
 8005544:	2300      	movs	r3, #0
 8005546:	4602      	mov	r2, r0
 8005548:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800554a:	6a21      	ldr	r1, [r4, #32]
 800554c:	4628      	mov	r0, r5
 800554e:	47b0      	blx	r6
 8005550:	1c43      	adds	r3, r0, #1
 8005552:	89a3      	ldrh	r3, [r4, #12]
 8005554:	d106      	bne.n	8005564 <__sflush_r+0x70>
 8005556:	6829      	ldr	r1, [r5, #0]
 8005558:	291d      	cmp	r1, #29
 800555a:	d84f      	bhi.n	80055fc <__sflush_r+0x108>
 800555c:	4a2d      	ldr	r2, [pc, #180]	; (8005614 <__sflush_r+0x120>)
 800555e:	40ca      	lsrs	r2, r1
 8005560:	07d6      	lsls	r6, r2, #31
 8005562:	d54b      	bpl.n	80055fc <__sflush_r+0x108>
 8005564:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005568:	b21b      	sxth	r3, r3
 800556a:	2200      	movs	r2, #0
 800556c:	6062      	str	r2, [r4, #4]
 800556e:	04d9      	lsls	r1, r3, #19
 8005570:	6922      	ldr	r2, [r4, #16]
 8005572:	81a3      	strh	r3, [r4, #12]
 8005574:	6022      	str	r2, [r4, #0]
 8005576:	d504      	bpl.n	8005582 <__sflush_r+0x8e>
 8005578:	1c42      	adds	r2, r0, #1
 800557a:	d101      	bne.n	8005580 <__sflush_r+0x8c>
 800557c:	682b      	ldr	r3, [r5, #0]
 800557e:	b903      	cbnz	r3, 8005582 <__sflush_r+0x8e>
 8005580:	6560      	str	r0, [r4, #84]	; 0x54
 8005582:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005584:	602f      	str	r7, [r5, #0]
 8005586:	2900      	cmp	r1, #0
 8005588:	d0c6      	beq.n	8005518 <__sflush_r+0x24>
 800558a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800558e:	4299      	cmp	r1, r3
 8005590:	d002      	beq.n	8005598 <__sflush_r+0xa4>
 8005592:	4628      	mov	r0, r5
 8005594:	f000 f9aa 	bl	80058ec <_free_r>
 8005598:	2000      	movs	r0, #0
 800559a:	6360      	str	r0, [r4, #52]	; 0x34
 800559c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055a0:	6a21      	ldr	r1, [r4, #32]
 80055a2:	2301      	movs	r3, #1
 80055a4:	4628      	mov	r0, r5
 80055a6:	47b0      	blx	r6
 80055a8:	1c41      	adds	r1, r0, #1
 80055aa:	d1c2      	bne.n	8005532 <__sflush_r+0x3e>
 80055ac:	682b      	ldr	r3, [r5, #0]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d0bf      	beq.n	8005532 <__sflush_r+0x3e>
 80055b2:	2b1d      	cmp	r3, #29
 80055b4:	d001      	beq.n	80055ba <__sflush_r+0xc6>
 80055b6:	2b16      	cmp	r3, #22
 80055b8:	d101      	bne.n	80055be <__sflush_r+0xca>
 80055ba:	602f      	str	r7, [r5, #0]
 80055bc:	e7ac      	b.n	8005518 <__sflush_r+0x24>
 80055be:	89a3      	ldrh	r3, [r4, #12]
 80055c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055c4:	81a3      	strh	r3, [r4, #12]
 80055c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055ca:	690f      	ldr	r7, [r1, #16]
 80055cc:	2f00      	cmp	r7, #0
 80055ce:	d0a3      	beq.n	8005518 <__sflush_r+0x24>
 80055d0:	079b      	lsls	r3, r3, #30
 80055d2:	680e      	ldr	r6, [r1, #0]
 80055d4:	bf08      	it	eq
 80055d6:	694b      	ldreq	r3, [r1, #20]
 80055d8:	600f      	str	r7, [r1, #0]
 80055da:	bf18      	it	ne
 80055dc:	2300      	movne	r3, #0
 80055de:	eba6 0807 	sub.w	r8, r6, r7
 80055e2:	608b      	str	r3, [r1, #8]
 80055e4:	f1b8 0f00 	cmp.w	r8, #0
 80055e8:	dd96      	ble.n	8005518 <__sflush_r+0x24>
 80055ea:	4643      	mov	r3, r8
 80055ec:	463a      	mov	r2, r7
 80055ee:	6a21      	ldr	r1, [r4, #32]
 80055f0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80055f2:	4628      	mov	r0, r5
 80055f4:	47b0      	blx	r6
 80055f6:	2800      	cmp	r0, #0
 80055f8:	dc07      	bgt.n	800560a <__sflush_r+0x116>
 80055fa:	89a3      	ldrh	r3, [r4, #12]
 80055fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005600:	81a3      	strh	r3, [r4, #12]
 8005602:	f04f 30ff 	mov.w	r0, #4294967295
 8005606:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800560a:	4407      	add	r7, r0
 800560c:	eba8 0800 	sub.w	r8, r8, r0
 8005610:	e7e8      	b.n	80055e4 <__sflush_r+0xf0>
 8005612:	bf00      	nop
 8005614:	20400001 	.word	0x20400001

08005618 <_fflush_r>:
 8005618:	b538      	push	{r3, r4, r5, lr}
 800561a:	690b      	ldr	r3, [r1, #16]
 800561c:	4605      	mov	r5, r0
 800561e:	460c      	mov	r4, r1
 8005620:	b913      	cbnz	r3, 8005628 <_fflush_r+0x10>
 8005622:	2500      	movs	r5, #0
 8005624:	4628      	mov	r0, r5
 8005626:	bd38      	pop	{r3, r4, r5, pc}
 8005628:	b118      	cbz	r0, 8005632 <_fflush_r+0x1a>
 800562a:	6983      	ldr	r3, [r0, #24]
 800562c:	b90b      	cbnz	r3, 8005632 <_fflush_r+0x1a>
 800562e:	f000 f887 	bl	8005740 <__sinit>
 8005632:	4b14      	ldr	r3, [pc, #80]	; (8005684 <_fflush_r+0x6c>)
 8005634:	429c      	cmp	r4, r3
 8005636:	d11b      	bne.n	8005670 <_fflush_r+0x58>
 8005638:	686c      	ldr	r4, [r5, #4]
 800563a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d0ef      	beq.n	8005622 <_fflush_r+0xa>
 8005642:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005644:	07d0      	lsls	r0, r2, #31
 8005646:	d404      	bmi.n	8005652 <_fflush_r+0x3a>
 8005648:	0599      	lsls	r1, r3, #22
 800564a:	d402      	bmi.n	8005652 <_fflush_r+0x3a>
 800564c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800564e:	f000 fa37 	bl	8005ac0 <__retarget_lock_acquire_recursive>
 8005652:	4628      	mov	r0, r5
 8005654:	4621      	mov	r1, r4
 8005656:	f7ff ff4d 	bl	80054f4 <__sflush_r>
 800565a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800565c:	07da      	lsls	r2, r3, #31
 800565e:	4605      	mov	r5, r0
 8005660:	d4e0      	bmi.n	8005624 <_fflush_r+0xc>
 8005662:	89a3      	ldrh	r3, [r4, #12]
 8005664:	059b      	lsls	r3, r3, #22
 8005666:	d4dd      	bmi.n	8005624 <_fflush_r+0xc>
 8005668:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800566a:	f000 fa2a 	bl	8005ac2 <__retarget_lock_release_recursive>
 800566e:	e7d9      	b.n	8005624 <_fflush_r+0xc>
 8005670:	4b05      	ldr	r3, [pc, #20]	; (8005688 <_fflush_r+0x70>)
 8005672:	429c      	cmp	r4, r3
 8005674:	d101      	bne.n	800567a <_fflush_r+0x62>
 8005676:	68ac      	ldr	r4, [r5, #8]
 8005678:	e7df      	b.n	800563a <_fflush_r+0x22>
 800567a:	4b04      	ldr	r3, [pc, #16]	; (800568c <_fflush_r+0x74>)
 800567c:	429c      	cmp	r4, r3
 800567e:	bf08      	it	eq
 8005680:	68ec      	ldreq	r4, [r5, #12]
 8005682:	e7da      	b.n	800563a <_fflush_r+0x22>
 8005684:	08007268 	.word	0x08007268
 8005688:	08007288 	.word	0x08007288
 800568c:	08007248 	.word	0x08007248

08005690 <_cleanup_r>:
 8005690:	4901      	ldr	r1, [pc, #4]	; (8005698 <_cleanup_r+0x8>)
 8005692:	f000 b9e7 	b.w	8005a64 <_fwalk_reent>
 8005696:	bf00      	nop
 8005698:	08006759 	.word	0x08006759

0800569c <std.isra.0>:
 800569c:	2300      	movs	r3, #0
 800569e:	b510      	push	{r4, lr}
 80056a0:	4604      	mov	r4, r0
 80056a2:	6003      	str	r3, [r0, #0]
 80056a4:	6043      	str	r3, [r0, #4]
 80056a6:	6083      	str	r3, [r0, #8]
 80056a8:	8181      	strh	r1, [r0, #12]
 80056aa:	6643      	str	r3, [r0, #100]	; 0x64
 80056ac:	81c2      	strh	r2, [r0, #14]
 80056ae:	6103      	str	r3, [r0, #16]
 80056b0:	6143      	str	r3, [r0, #20]
 80056b2:	6183      	str	r3, [r0, #24]
 80056b4:	4619      	mov	r1, r3
 80056b6:	2208      	movs	r2, #8
 80056b8:	305c      	adds	r0, #92	; 0x5c
 80056ba:	f000 fc90 	bl	8005fde <memset>
 80056be:	4b05      	ldr	r3, [pc, #20]	; (80056d4 <std.isra.0+0x38>)
 80056c0:	6263      	str	r3, [r4, #36]	; 0x24
 80056c2:	4b05      	ldr	r3, [pc, #20]	; (80056d8 <std.isra.0+0x3c>)
 80056c4:	62a3      	str	r3, [r4, #40]	; 0x28
 80056c6:	4b05      	ldr	r3, [pc, #20]	; (80056dc <std.isra.0+0x40>)
 80056c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80056ca:	4b05      	ldr	r3, [pc, #20]	; (80056e0 <std.isra.0+0x44>)
 80056cc:	6224      	str	r4, [r4, #32]
 80056ce:	6323      	str	r3, [r4, #48]	; 0x30
 80056d0:	bd10      	pop	{r4, pc}
 80056d2:	bf00      	nop
 80056d4:	080065c9 	.word	0x080065c9
 80056d8:	080065eb 	.word	0x080065eb
 80056dc:	08006623 	.word	0x08006623
 80056e0:	08006647 	.word	0x08006647

080056e4 <__sfmoreglue>:
 80056e4:	b570      	push	{r4, r5, r6, lr}
 80056e6:	1e4a      	subs	r2, r1, #1
 80056e8:	2568      	movs	r5, #104	; 0x68
 80056ea:	4355      	muls	r5, r2
 80056ec:	460e      	mov	r6, r1
 80056ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80056f2:	f000 fa5b 	bl	8005bac <_malloc_r>
 80056f6:	4604      	mov	r4, r0
 80056f8:	b140      	cbz	r0, 800570c <__sfmoreglue+0x28>
 80056fa:	2100      	movs	r1, #0
 80056fc:	e880 0042 	stmia.w	r0, {r1, r6}
 8005700:	300c      	adds	r0, #12
 8005702:	60a0      	str	r0, [r4, #8]
 8005704:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005708:	f000 fc69 	bl	8005fde <memset>
 800570c:	4620      	mov	r0, r4
 800570e:	bd70      	pop	{r4, r5, r6, pc}

08005710 <__sfp_lock_acquire>:
 8005710:	4801      	ldr	r0, [pc, #4]	; (8005718 <__sfp_lock_acquire+0x8>)
 8005712:	f000 b9d5 	b.w	8005ac0 <__retarget_lock_acquire_recursive>
 8005716:	bf00      	nop
 8005718:	20000888 	.word	0x20000888

0800571c <__sfp_lock_release>:
 800571c:	4801      	ldr	r0, [pc, #4]	; (8005724 <__sfp_lock_release+0x8>)
 800571e:	f000 b9d0 	b.w	8005ac2 <__retarget_lock_release_recursive>
 8005722:	bf00      	nop
 8005724:	20000888 	.word	0x20000888

08005728 <__sinit_lock_acquire>:
 8005728:	4801      	ldr	r0, [pc, #4]	; (8005730 <__sinit_lock_acquire+0x8>)
 800572a:	f000 b9c9 	b.w	8005ac0 <__retarget_lock_acquire_recursive>
 800572e:	bf00      	nop
 8005730:	20000883 	.word	0x20000883

08005734 <__sinit_lock_release>:
 8005734:	4801      	ldr	r0, [pc, #4]	; (800573c <__sinit_lock_release+0x8>)
 8005736:	f000 b9c4 	b.w	8005ac2 <__retarget_lock_release_recursive>
 800573a:	bf00      	nop
 800573c:	20000883 	.word	0x20000883

08005740 <__sinit>:
 8005740:	b510      	push	{r4, lr}
 8005742:	4604      	mov	r4, r0
 8005744:	f7ff fff0 	bl	8005728 <__sinit_lock_acquire>
 8005748:	69a3      	ldr	r3, [r4, #24]
 800574a:	b11b      	cbz	r3, 8005754 <__sinit+0x14>
 800574c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005750:	f7ff bff0 	b.w	8005734 <__sinit_lock_release>
 8005754:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 8005758:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
 800575c:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8005760:	4b12      	ldr	r3, [pc, #72]	; (80057ac <__sinit+0x6c>)
 8005762:	4a13      	ldr	r2, [pc, #76]	; (80057b0 <__sinit+0x70>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	62a2      	str	r2, [r4, #40]	; 0x28
 8005768:	429c      	cmp	r4, r3
 800576a:	bf04      	itt	eq
 800576c:	2301      	moveq	r3, #1
 800576e:	61a3      	streq	r3, [r4, #24]
 8005770:	4620      	mov	r0, r4
 8005772:	f000 f81f 	bl	80057b4 <__sfp>
 8005776:	6060      	str	r0, [r4, #4]
 8005778:	4620      	mov	r0, r4
 800577a:	f000 f81b 	bl	80057b4 <__sfp>
 800577e:	60a0      	str	r0, [r4, #8]
 8005780:	4620      	mov	r0, r4
 8005782:	f000 f817 	bl	80057b4 <__sfp>
 8005786:	2200      	movs	r2, #0
 8005788:	60e0      	str	r0, [r4, #12]
 800578a:	2104      	movs	r1, #4
 800578c:	6860      	ldr	r0, [r4, #4]
 800578e:	f7ff ff85 	bl	800569c <std.isra.0>
 8005792:	2201      	movs	r2, #1
 8005794:	2109      	movs	r1, #9
 8005796:	68a0      	ldr	r0, [r4, #8]
 8005798:	f7ff ff80 	bl	800569c <std.isra.0>
 800579c:	2202      	movs	r2, #2
 800579e:	2112      	movs	r1, #18
 80057a0:	68e0      	ldr	r0, [r4, #12]
 80057a2:	f7ff ff7b 	bl	800569c <std.isra.0>
 80057a6:	2301      	movs	r3, #1
 80057a8:	61a3      	str	r3, [r4, #24]
 80057aa:	e7cf      	b.n	800574c <__sinit+0xc>
 80057ac:	080072a8 	.word	0x080072a8
 80057b0:	08005691 	.word	0x08005691

080057b4 <__sfp>:
 80057b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057b6:	4607      	mov	r7, r0
 80057b8:	f7ff ffaa 	bl	8005710 <__sfp_lock_acquire>
 80057bc:	4b1f      	ldr	r3, [pc, #124]	; (800583c <__sfp+0x88>)
 80057be:	681e      	ldr	r6, [r3, #0]
 80057c0:	69b3      	ldr	r3, [r6, #24]
 80057c2:	b913      	cbnz	r3, 80057ca <__sfp+0x16>
 80057c4:	4630      	mov	r0, r6
 80057c6:	f7ff ffbb 	bl	8005740 <__sinit>
 80057ca:	36d8      	adds	r6, #216	; 0xd8
 80057cc:	68b4      	ldr	r4, [r6, #8]
 80057ce:	6873      	ldr	r3, [r6, #4]
 80057d0:	3b01      	subs	r3, #1
 80057d2:	d503      	bpl.n	80057dc <__sfp+0x28>
 80057d4:	6833      	ldr	r3, [r6, #0]
 80057d6:	b133      	cbz	r3, 80057e6 <__sfp+0x32>
 80057d8:	6836      	ldr	r6, [r6, #0]
 80057da:	e7f7      	b.n	80057cc <__sfp+0x18>
 80057dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80057e0:	b17d      	cbz	r5, 8005802 <__sfp+0x4e>
 80057e2:	3468      	adds	r4, #104	; 0x68
 80057e4:	e7f4      	b.n	80057d0 <__sfp+0x1c>
 80057e6:	2104      	movs	r1, #4
 80057e8:	4638      	mov	r0, r7
 80057ea:	f7ff ff7b 	bl	80056e4 <__sfmoreglue>
 80057ee:	4604      	mov	r4, r0
 80057f0:	6030      	str	r0, [r6, #0]
 80057f2:	2800      	cmp	r0, #0
 80057f4:	d1f0      	bne.n	80057d8 <__sfp+0x24>
 80057f6:	f7ff ff91 	bl	800571c <__sfp_lock_release>
 80057fa:	230c      	movs	r3, #12
 80057fc:	603b      	str	r3, [r7, #0]
 80057fe:	4620      	mov	r0, r4
 8005800:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005802:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005806:	81e3      	strh	r3, [r4, #14]
 8005808:	2301      	movs	r3, #1
 800580a:	81a3      	strh	r3, [r4, #12]
 800580c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005810:	6665      	str	r5, [r4, #100]	; 0x64
 8005812:	f000 f953 	bl	8005abc <__retarget_lock_init_recursive>
 8005816:	f7ff ff81 	bl	800571c <__sfp_lock_release>
 800581a:	6025      	str	r5, [r4, #0]
 800581c:	60a5      	str	r5, [r4, #8]
 800581e:	6065      	str	r5, [r4, #4]
 8005820:	6125      	str	r5, [r4, #16]
 8005822:	6165      	str	r5, [r4, #20]
 8005824:	61a5      	str	r5, [r4, #24]
 8005826:	2208      	movs	r2, #8
 8005828:	4629      	mov	r1, r5
 800582a:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800582e:	f000 fbd6 	bl	8005fde <memset>
 8005832:	6365      	str	r5, [r4, #52]	; 0x34
 8005834:	63a5      	str	r5, [r4, #56]	; 0x38
 8005836:	64a5      	str	r5, [r4, #72]	; 0x48
 8005838:	64e5      	str	r5, [r4, #76]	; 0x4c
 800583a:	e7e0      	b.n	80057fe <__sfp+0x4a>
 800583c:	080072a8 	.word	0x080072a8

08005840 <_malloc_trim_r>:
 8005840:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005844:	4f25      	ldr	r7, [pc, #148]	; (80058dc <_malloc_trim_r+0x9c>)
 8005846:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 80058e8 <_malloc_trim_r+0xa8>
 800584a:	4689      	mov	r9, r1
 800584c:	4606      	mov	r6, r0
 800584e:	f000 fbcf 	bl	8005ff0 <__malloc_lock>
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	685d      	ldr	r5, [r3, #4]
 8005856:	f1a8 0411 	sub.w	r4, r8, #17
 800585a:	f025 0503 	bic.w	r5, r5, #3
 800585e:	eba4 0409 	sub.w	r4, r4, r9
 8005862:	442c      	add	r4, r5
 8005864:	fbb4 f4f8 	udiv	r4, r4, r8
 8005868:	3c01      	subs	r4, #1
 800586a:	fb08 f404 	mul.w	r4, r8, r4
 800586e:	4544      	cmp	r4, r8
 8005870:	da05      	bge.n	800587e <_malloc_trim_r+0x3e>
 8005872:	4630      	mov	r0, r6
 8005874:	f000 fbc2 	bl	8005ffc <__malloc_unlock>
 8005878:	2000      	movs	r0, #0
 800587a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800587e:	2100      	movs	r1, #0
 8005880:	4630      	mov	r0, r6
 8005882:	f000 fe91 	bl	80065a8 <_sbrk_r>
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	442b      	add	r3, r5
 800588a:	4298      	cmp	r0, r3
 800588c:	d1f1      	bne.n	8005872 <_malloc_trim_r+0x32>
 800588e:	4261      	negs	r1, r4
 8005890:	4630      	mov	r0, r6
 8005892:	f000 fe89 	bl	80065a8 <_sbrk_r>
 8005896:	3001      	adds	r0, #1
 8005898:	d110      	bne.n	80058bc <_malloc_trim_r+0x7c>
 800589a:	2100      	movs	r1, #0
 800589c:	4630      	mov	r0, r6
 800589e:	f000 fe83 	bl	80065a8 <_sbrk_r>
 80058a2:	68ba      	ldr	r2, [r7, #8]
 80058a4:	1a83      	subs	r3, r0, r2
 80058a6:	2b0f      	cmp	r3, #15
 80058a8:	dde3      	ble.n	8005872 <_malloc_trim_r+0x32>
 80058aa:	490d      	ldr	r1, [pc, #52]	; (80058e0 <_malloc_trim_r+0xa0>)
 80058ac:	6809      	ldr	r1, [r1, #0]
 80058ae:	1a40      	subs	r0, r0, r1
 80058b0:	490c      	ldr	r1, [pc, #48]	; (80058e4 <_malloc_trim_r+0xa4>)
 80058b2:	f043 0301 	orr.w	r3, r3, #1
 80058b6:	6008      	str	r0, [r1, #0]
 80058b8:	6053      	str	r3, [r2, #4]
 80058ba:	e7da      	b.n	8005872 <_malloc_trim_r+0x32>
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	4a09      	ldr	r2, [pc, #36]	; (80058e4 <_malloc_trim_r+0xa4>)
 80058c0:	1b2d      	subs	r5, r5, r4
 80058c2:	f045 0501 	orr.w	r5, r5, #1
 80058c6:	605d      	str	r5, [r3, #4]
 80058c8:	6813      	ldr	r3, [r2, #0]
 80058ca:	4630      	mov	r0, r6
 80058cc:	1b1c      	subs	r4, r3, r4
 80058ce:	6014      	str	r4, [r2, #0]
 80058d0:	f000 fb94 	bl	8005ffc <__malloc_unlock>
 80058d4:	2001      	movs	r0, #1
 80058d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80058da:	bf00      	nop
 80058dc:	200000f8 	.word	0x200000f8
 80058e0:	20000500 	.word	0x20000500
 80058e4:	20000690 	.word	0x20000690
 80058e8:	00000080 	.word	0x00000080

080058ec <_free_r>:
 80058ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058f0:	4604      	mov	r4, r0
 80058f2:	4688      	mov	r8, r1
 80058f4:	2900      	cmp	r1, #0
 80058f6:	f000 80ab 	beq.w	8005a50 <_free_r+0x164>
 80058fa:	f000 fb79 	bl	8005ff0 <__malloc_lock>
 80058fe:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8005902:	4d54      	ldr	r5, [pc, #336]	; (8005a54 <_free_r+0x168>)
 8005904:	f022 0001 	bic.w	r0, r2, #1
 8005908:	f1a8 0308 	sub.w	r3, r8, #8
 800590c:	181f      	adds	r7, r3, r0
 800590e:	68a9      	ldr	r1, [r5, #8]
 8005910:	687e      	ldr	r6, [r7, #4]
 8005912:	428f      	cmp	r7, r1
 8005914:	f026 0603 	bic.w	r6, r6, #3
 8005918:	f002 0201 	and.w	r2, r2, #1
 800591c:	d11b      	bne.n	8005956 <_free_r+0x6a>
 800591e:	4430      	add	r0, r6
 8005920:	b93a      	cbnz	r2, 8005932 <_free_r+0x46>
 8005922:	f858 2c08 	ldr.w	r2, [r8, #-8]
 8005926:	1a9b      	subs	r3, r3, r2
 8005928:	4410      	add	r0, r2
 800592a:	6899      	ldr	r1, [r3, #8]
 800592c:	68da      	ldr	r2, [r3, #12]
 800592e:	60ca      	str	r2, [r1, #12]
 8005930:	6091      	str	r1, [r2, #8]
 8005932:	f040 0201 	orr.w	r2, r0, #1
 8005936:	605a      	str	r2, [r3, #4]
 8005938:	60ab      	str	r3, [r5, #8]
 800593a:	4b47      	ldr	r3, [pc, #284]	; (8005a58 <_free_r+0x16c>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4298      	cmp	r0, r3
 8005940:	d304      	bcc.n	800594c <_free_r+0x60>
 8005942:	4b46      	ldr	r3, [pc, #280]	; (8005a5c <_free_r+0x170>)
 8005944:	4620      	mov	r0, r4
 8005946:	6819      	ldr	r1, [r3, #0]
 8005948:	f7ff ff7a 	bl	8005840 <_malloc_trim_r>
 800594c:	4620      	mov	r0, r4
 800594e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005952:	f000 bb53 	b.w	8005ffc <__malloc_unlock>
 8005956:	607e      	str	r6, [r7, #4]
 8005958:	2a00      	cmp	r2, #0
 800595a:	d139      	bne.n	80059d0 <_free_r+0xe4>
 800595c:	f858 1c08 	ldr.w	r1, [r8, #-8]
 8005960:	1a5b      	subs	r3, r3, r1
 8005962:	4408      	add	r0, r1
 8005964:	6899      	ldr	r1, [r3, #8]
 8005966:	f105 0e08 	add.w	lr, r5, #8
 800596a:	4571      	cmp	r1, lr
 800596c:	d032      	beq.n	80059d4 <_free_r+0xe8>
 800596e:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8005972:	f8c1 e00c 	str.w	lr, [r1, #12]
 8005976:	f8ce 1008 	str.w	r1, [lr, #8]
 800597a:	19b9      	adds	r1, r7, r6
 800597c:	6849      	ldr	r1, [r1, #4]
 800597e:	07c9      	lsls	r1, r1, #31
 8005980:	d40a      	bmi.n	8005998 <_free_r+0xac>
 8005982:	4430      	add	r0, r6
 8005984:	68b9      	ldr	r1, [r7, #8]
 8005986:	bb3a      	cbnz	r2, 80059d8 <_free_r+0xec>
 8005988:	4e35      	ldr	r6, [pc, #212]	; (8005a60 <_free_r+0x174>)
 800598a:	42b1      	cmp	r1, r6
 800598c:	d124      	bne.n	80059d8 <_free_r+0xec>
 800598e:	616b      	str	r3, [r5, #20]
 8005990:	612b      	str	r3, [r5, #16]
 8005992:	2201      	movs	r2, #1
 8005994:	60d9      	str	r1, [r3, #12]
 8005996:	6099      	str	r1, [r3, #8]
 8005998:	f040 0101 	orr.w	r1, r0, #1
 800599c:	6059      	str	r1, [r3, #4]
 800599e:	5018      	str	r0, [r3, r0]
 80059a0:	2a00      	cmp	r2, #0
 80059a2:	d1d3      	bne.n	800594c <_free_r+0x60>
 80059a4:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80059a8:	d21a      	bcs.n	80059e0 <_free_r+0xf4>
 80059aa:	08c0      	lsrs	r0, r0, #3
 80059ac:	1081      	asrs	r1, r0, #2
 80059ae:	2201      	movs	r2, #1
 80059b0:	408a      	lsls	r2, r1
 80059b2:	6869      	ldr	r1, [r5, #4]
 80059b4:	3001      	adds	r0, #1
 80059b6:	430a      	orrs	r2, r1
 80059b8:	606a      	str	r2, [r5, #4]
 80059ba:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 80059be:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 80059c2:	6099      	str	r1, [r3, #8]
 80059c4:	3a08      	subs	r2, #8
 80059c6:	60da      	str	r2, [r3, #12]
 80059c8:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 80059cc:	60cb      	str	r3, [r1, #12]
 80059ce:	e7bd      	b.n	800594c <_free_r+0x60>
 80059d0:	2200      	movs	r2, #0
 80059d2:	e7d2      	b.n	800597a <_free_r+0x8e>
 80059d4:	2201      	movs	r2, #1
 80059d6:	e7d0      	b.n	800597a <_free_r+0x8e>
 80059d8:	68fe      	ldr	r6, [r7, #12]
 80059da:	60ce      	str	r6, [r1, #12]
 80059dc:	60b1      	str	r1, [r6, #8]
 80059de:	e7db      	b.n	8005998 <_free_r+0xac>
 80059e0:	0a42      	lsrs	r2, r0, #9
 80059e2:	2a04      	cmp	r2, #4
 80059e4:	d813      	bhi.n	8005a0e <_free_r+0x122>
 80059e6:	0982      	lsrs	r2, r0, #6
 80059e8:	3238      	adds	r2, #56	; 0x38
 80059ea:	1c51      	adds	r1, r2, #1
 80059ec:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 80059f0:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 80059f4:	428e      	cmp	r6, r1
 80059f6:	d124      	bne.n	8005a42 <_free_r+0x156>
 80059f8:	2001      	movs	r0, #1
 80059fa:	1092      	asrs	r2, r2, #2
 80059fc:	fa00 f202 	lsl.w	r2, r0, r2
 8005a00:	6868      	ldr	r0, [r5, #4]
 8005a02:	4302      	orrs	r2, r0
 8005a04:	606a      	str	r2, [r5, #4]
 8005a06:	60de      	str	r6, [r3, #12]
 8005a08:	6099      	str	r1, [r3, #8]
 8005a0a:	60b3      	str	r3, [r6, #8]
 8005a0c:	e7de      	b.n	80059cc <_free_r+0xe0>
 8005a0e:	2a14      	cmp	r2, #20
 8005a10:	d801      	bhi.n	8005a16 <_free_r+0x12a>
 8005a12:	325b      	adds	r2, #91	; 0x5b
 8005a14:	e7e9      	b.n	80059ea <_free_r+0xfe>
 8005a16:	2a54      	cmp	r2, #84	; 0x54
 8005a18:	d802      	bhi.n	8005a20 <_free_r+0x134>
 8005a1a:	0b02      	lsrs	r2, r0, #12
 8005a1c:	326e      	adds	r2, #110	; 0x6e
 8005a1e:	e7e4      	b.n	80059ea <_free_r+0xfe>
 8005a20:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8005a24:	d802      	bhi.n	8005a2c <_free_r+0x140>
 8005a26:	0bc2      	lsrs	r2, r0, #15
 8005a28:	3277      	adds	r2, #119	; 0x77
 8005a2a:	e7de      	b.n	80059ea <_free_r+0xfe>
 8005a2c:	f240 5154 	movw	r1, #1364	; 0x554
 8005a30:	428a      	cmp	r2, r1
 8005a32:	bf9a      	itte	ls
 8005a34:	0c82      	lsrls	r2, r0, #18
 8005a36:	327c      	addls	r2, #124	; 0x7c
 8005a38:	227e      	movhi	r2, #126	; 0x7e
 8005a3a:	e7d6      	b.n	80059ea <_free_r+0xfe>
 8005a3c:	6889      	ldr	r1, [r1, #8]
 8005a3e:	428e      	cmp	r6, r1
 8005a40:	d004      	beq.n	8005a4c <_free_r+0x160>
 8005a42:	684a      	ldr	r2, [r1, #4]
 8005a44:	f022 0203 	bic.w	r2, r2, #3
 8005a48:	4290      	cmp	r0, r2
 8005a4a:	d3f7      	bcc.n	8005a3c <_free_r+0x150>
 8005a4c:	68ce      	ldr	r6, [r1, #12]
 8005a4e:	e7da      	b.n	8005a06 <_free_r+0x11a>
 8005a50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a54:	200000f8 	.word	0x200000f8
 8005a58:	20000504 	.word	0x20000504
 8005a5c:	200006c0 	.word	0x200006c0
 8005a60:	20000100 	.word	0x20000100

08005a64 <_fwalk_reent>:
 8005a64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a68:	4680      	mov	r8, r0
 8005a6a:	4689      	mov	r9, r1
 8005a6c:	f100 04d8 	add.w	r4, r0, #216	; 0xd8
 8005a70:	2600      	movs	r6, #0
 8005a72:	b914      	cbnz	r4, 8005a7a <_fwalk_reent+0x16>
 8005a74:	4630      	mov	r0, r6
 8005a76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a7a:	68a5      	ldr	r5, [r4, #8]
 8005a7c:	6867      	ldr	r7, [r4, #4]
 8005a7e:	3f01      	subs	r7, #1
 8005a80:	d501      	bpl.n	8005a86 <_fwalk_reent+0x22>
 8005a82:	6824      	ldr	r4, [r4, #0]
 8005a84:	e7f5      	b.n	8005a72 <_fwalk_reent+0xe>
 8005a86:	89ab      	ldrh	r3, [r5, #12]
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d907      	bls.n	8005a9c <_fwalk_reent+0x38>
 8005a8c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005a90:	3301      	adds	r3, #1
 8005a92:	d003      	beq.n	8005a9c <_fwalk_reent+0x38>
 8005a94:	4629      	mov	r1, r5
 8005a96:	4640      	mov	r0, r8
 8005a98:	47c8      	blx	r9
 8005a9a:	4306      	orrs	r6, r0
 8005a9c:	3568      	adds	r5, #104	; 0x68
 8005a9e:	e7ee      	b.n	8005a7e <_fwalk_reent+0x1a>

08005aa0 <_localeconv_r>:
 8005aa0:	4b04      	ldr	r3, [pc, #16]	; (8005ab4 <_localeconv_r+0x14>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	6a18      	ldr	r0, [r3, #32]
 8005aa6:	4b04      	ldr	r3, [pc, #16]	; (8005ab8 <_localeconv_r+0x18>)
 8005aa8:	2800      	cmp	r0, #0
 8005aaa:	bf08      	it	eq
 8005aac:	4618      	moveq	r0, r3
 8005aae:	30f0      	adds	r0, #240	; 0xf0
 8005ab0:	4770      	bx	lr
 8005ab2:	bf00      	nop
 8005ab4:	20000004 	.word	0x20000004
 8005ab8:	20000508 	.word	0x20000508

08005abc <__retarget_lock_init_recursive>:
 8005abc:	4770      	bx	lr

08005abe <__retarget_lock_close_recursive>:
 8005abe:	4770      	bx	lr

08005ac0 <__retarget_lock_acquire_recursive>:
 8005ac0:	4770      	bx	lr

08005ac2 <__retarget_lock_release_recursive>:
 8005ac2:	4770      	bx	lr

08005ac4 <__swhatbuf_r>:
 8005ac4:	b570      	push	{r4, r5, r6, lr}
 8005ac6:	460e      	mov	r6, r1
 8005ac8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005acc:	2900      	cmp	r1, #0
 8005ace:	b090      	sub	sp, #64	; 0x40
 8005ad0:	4614      	mov	r4, r2
 8005ad2:	461d      	mov	r5, r3
 8005ad4:	da09      	bge.n	8005aea <__swhatbuf_r+0x26>
 8005ad6:	89b3      	ldrh	r3, [r6, #12]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8005ade:	602a      	str	r2, [r5, #0]
 8005ae0:	d116      	bne.n	8005b10 <__swhatbuf_r+0x4c>
 8005ae2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ae6:	6023      	str	r3, [r4, #0]
 8005ae8:	e015      	b.n	8005b16 <__swhatbuf_r+0x52>
 8005aea:	aa01      	add	r2, sp, #4
 8005aec:	f000 ff0a 	bl	8006904 <_fstat_r>
 8005af0:	2800      	cmp	r0, #0
 8005af2:	dbf0      	blt.n	8005ad6 <__swhatbuf_r+0x12>
 8005af4:	9a02      	ldr	r2, [sp, #8]
 8005af6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005afa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005afe:	425a      	negs	r2, r3
 8005b00:	415a      	adcs	r2, r3
 8005b02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b06:	602a      	str	r2, [r5, #0]
 8005b08:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005b0c:	6023      	str	r3, [r4, #0]
 8005b0e:	e002      	b.n	8005b16 <__swhatbuf_r+0x52>
 8005b10:	2340      	movs	r3, #64	; 0x40
 8005b12:	6023      	str	r3, [r4, #0]
 8005b14:	4610      	mov	r0, r2
 8005b16:	b010      	add	sp, #64	; 0x40
 8005b18:	bd70      	pop	{r4, r5, r6, pc}
	...

08005b1c <__smakebuf_r>:
 8005b1c:	898b      	ldrh	r3, [r1, #12]
 8005b1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005b20:	079d      	lsls	r5, r3, #30
 8005b22:	4606      	mov	r6, r0
 8005b24:	460c      	mov	r4, r1
 8005b26:	d507      	bpl.n	8005b38 <__smakebuf_r+0x1c>
 8005b28:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005b2c:	6023      	str	r3, [r4, #0]
 8005b2e:	6123      	str	r3, [r4, #16]
 8005b30:	2301      	movs	r3, #1
 8005b32:	6163      	str	r3, [r4, #20]
 8005b34:	b002      	add	sp, #8
 8005b36:	bd70      	pop	{r4, r5, r6, pc}
 8005b38:	ab01      	add	r3, sp, #4
 8005b3a:	466a      	mov	r2, sp
 8005b3c:	f7ff ffc2 	bl	8005ac4 <__swhatbuf_r>
 8005b40:	9900      	ldr	r1, [sp, #0]
 8005b42:	4605      	mov	r5, r0
 8005b44:	4630      	mov	r0, r6
 8005b46:	f000 f831 	bl	8005bac <_malloc_r>
 8005b4a:	b948      	cbnz	r0, 8005b60 <__smakebuf_r+0x44>
 8005b4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b50:	059a      	lsls	r2, r3, #22
 8005b52:	d4ef      	bmi.n	8005b34 <__smakebuf_r+0x18>
 8005b54:	f023 0303 	bic.w	r3, r3, #3
 8005b58:	f043 0302 	orr.w	r3, r3, #2
 8005b5c:	81a3      	strh	r3, [r4, #12]
 8005b5e:	e7e3      	b.n	8005b28 <__smakebuf_r+0xc>
 8005b60:	4b0d      	ldr	r3, [pc, #52]	; (8005b98 <__smakebuf_r+0x7c>)
 8005b62:	62b3      	str	r3, [r6, #40]	; 0x28
 8005b64:	89a3      	ldrh	r3, [r4, #12]
 8005b66:	6020      	str	r0, [r4, #0]
 8005b68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b6c:	81a3      	strh	r3, [r4, #12]
 8005b6e:	9b00      	ldr	r3, [sp, #0]
 8005b70:	6163      	str	r3, [r4, #20]
 8005b72:	9b01      	ldr	r3, [sp, #4]
 8005b74:	6120      	str	r0, [r4, #16]
 8005b76:	b15b      	cbz	r3, 8005b90 <__smakebuf_r+0x74>
 8005b78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b7c:	4630      	mov	r0, r6
 8005b7e:	f001 f821 	bl	8006bc4 <_isatty_r>
 8005b82:	b128      	cbz	r0, 8005b90 <__smakebuf_r+0x74>
 8005b84:	89a3      	ldrh	r3, [r4, #12]
 8005b86:	f023 0303 	bic.w	r3, r3, #3
 8005b8a:	f043 0301 	orr.w	r3, r3, #1
 8005b8e:	81a3      	strh	r3, [r4, #12]
 8005b90:	89a3      	ldrh	r3, [r4, #12]
 8005b92:	431d      	orrs	r5, r3
 8005b94:	81a5      	strh	r5, [r4, #12]
 8005b96:	e7cd      	b.n	8005b34 <__smakebuf_r+0x18>
 8005b98:	08005691 	.word	0x08005691

08005b9c <malloc>:
 8005b9c:	4b02      	ldr	r3, [pc, #8]	; (8005ba8 <malloc+0xc>)
 8005b9e:	4601      	mov	r1, r0
 8005ba0:	6818      	ldr	r0, [r3, #0]
 8005ba2:	f000 b803 	b.w	8005bac <_malloc_r>
 8005ba6:	bf00      	nop
 8005ba8:	20000004 	.word	0x20000004

08005bac <_malloc_r>:
 8005bac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bb0:	f101 040b 	add.w	r4, r1, #11
 8005bb4:	2c16      	cmp	r4, #22
 8005bb6:	4681      	mov	r9, r0
 8005bb8:	d907      	bls.n	8005bca <_malloc_r+0x1e>
 8005bba:	f034 0407 	bics.w	r4, r4, #7
 8005bbe:	d505      	bpl.n	8005bcc <_malloc_r+0x20>
 8005bc0:	230c      	movs	r3, #12
 8005bc2:	f8c9 3000 	str.w	r3, [r9]
 8005bc6:	2600      	movs	r6, #0
 8005bc8:	e131      	b.n	8005e2e <_malloc_r+0x282>
 8005bca:	2410      	movs	r4, #16
 8005bcc:	428c      	cmp	r4, r1
 8005bce:	d3f7      	bcc.n	8005bc0 <_malloc_r+0x14>
 8005bd0:	4648      	mov	r0, r9
 8005bd2:	f000 fa0d 	bl	8005ff0 <__malloc_lock>
 8005bd6:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 8005bda:	4d9c      	ldr	r5, [pc, #624]	; (8005e4c <_malloc_r+0x2a0>)
 8005bdc:	d236      	bcs.n	8005c4c <_malloc_r+0xa0>
 8005bde:	f104 0208 	add.w	r2, r4, #8
 8005be2:	442a      	add	r2, r5
 8005be4:	f1a2 0108 	sub.w	r1, r2, #8
 8005be8:	6856      	ldr	r6, [r2, #4]
 8005bea:	428e      	cmp	r6, r1
 8005bec:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 8005bf0:	d102      	bne.n	8005bf8 <_malloc_r+0x4c>
 8005bf2:	68d6      	ldr	r6, [r2, #12]
 8005bf4:	42b2      	cmp	r2, r6
 8005bf6:	d010      	beq.n	8005c1a <_malloc_r+0x6e>
 8005bf8:	6873      	ldr	r3, [r6, #4]
 8005bfa:	68f2      	ldr	r2, [r6, #12]
 8005bfc:	68b1      	ldr	r1, [r6, #8]
 8005bfe:	f023 0303 	bic.w	r3, r3, #3
 8005c02:	60ca      	str	r2, [r1, #12]
 8005c04:	4433      	add	r3, r6
 8005c06:	6091      	str	r1, [r2, #8]
 8005c08:	685a      	ldr	r2, [r3, #4]
 8005c0a:	f042 0201 	orr.w	r2, r2, #1
 8005c0e:	605a      	str	r2, [r3, #4]
 8005c10:	4648      	mov	r0, r9
 8005c12:	f000 f9f3 	bl	8005ffc <__malloc_unlock>
 8005c16:	3608      	adds	r6, #8
 8005c18:	e109      	b.n	8005e2e <_malloc_r+0x282>
 8005c1a:	3302      	adds	r3, #2
 8005c1c:	4a8c      	ldr	r2, [pc, #560]	; (8005e50 <_malloc_r+0x2a4>)
 8005c1e:	692e      	ldr	r6, [r5, #16]
 8005c20:	4296      	cmp	r6, r2
 8005c22:	4611      	mov	r1, r2
 8005c24:	d06d      	beq.n	8005d02 <_malloc_r+0x156>
 8005c26:	6870      	ldr	r0, [r6, #4]
 8005c28:	f020 0003 	bic.w	r0, r0, #3
 8005c2c:	1b07      	subs	r7, r0, r4
 8005c2e:	2f0f      	cmp	r7, #15
 8005c30:	dd47      	ble.n	8005cc2 <_malloc_r+0x116>
 8005c32:	1933      	adds	r3, r6, r4
 8005c34:	f044 0401 	orr.w	r4, r4, #1
 8005c38:	6074      	str	r4, [r6, #4]
 8005c3a:	616b      	str	r3, [r5, #20]
 8005c3c:	612b      	str	r3, [r5, #16]
 8005c3e:	60da      	str	r2, [r3, #12]
 8005c40:	609a      	str	r2, [r3, #8]
 8005c42:	f047 0201 	orr.w	r2, r7, #1
 8005c46:	605a      	str	r2, [r3, #4]
 8005c48:	5037      	str	r7, [r6, r0]
 8005c4a:	e7e1      	b.n	8005c10 <_malloc_r+0x64>
 8005c4c:	0a63      	lsrs	r3, r4, #9
 8005c4e:	d02a      	beq.n	8005ca6 <_malloc_r+0xfa>
 8005c50:	2b04      	cmp	r3, #4
 8005c52:	d812      	bhi.n	8005c7a <_malloc_r+0xce>
 8005c54:	09a3      	lsrs	r3, r4, #6
 8005c56:	3338      	adds	r3, #56	; 0x38
 8005c58:	1c5a      	adds	r2, r3, #1
 8005c5a:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8005c5e:	f1a2 0008 	sub.w	r0, r2, #8
 8005c62:	6856      	ldr	r6, [r2, #4]
 8005c64:	4286      	cmp	r6, r0
 8005c66:	d006      	beq.n	8005c76 <_malloc_r+0xca>
 8005c68:	6872      	ldr	r2, [r6, #4]
 8005c6a:	f022 0203 	bic.w	r2, r2, #3
 8005c6e:	1b11      	subs	r1, r2, r4
 8005c70:	290f      	cmp	r1, #15
 8005c72:	dd1c      	ble.n	8005cae <_malloc_r+0x102>
 8005c74:	3b01      	subs	r3, #1
 8005c76:	3301      	adds	r3, #1
 8005c78:	e7d0      	b.n	8005c1c <_malloc_r+0x70>
 8005c7a:	2b14      	cmp	r3, #20
 8005c7c:	d801      	bhi.n	8005c82 <_malloc_r+0xd6>
 8005c7e:	335b      	adds	r3, #91	; 0x5b
 8005c80:	e7ea      	b.n	8005c58 <_malloc_r+0xac>
 8005c82:	2b54      	cmp	r3, #84	; 0x54
 8005c84:	d802      	bhi.n	8005c8c <_malloc_r+0xe0>
 8005c86:	0b23      	lsrs	r3, r4, #12
 8005c88:	336e      	adds	r3, #110	; 0x6e
 8005c8a:	e7e5      	b.n	8005c58 <_malloc_r+0xac>
 8005c8c:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8005c90:	d802      	bhi.n	8005c98 <_malloc_r+0xec>
 8005c92:	0be3      	lsrs	r3, r4, #15
 8005c94:	3377      	adds	r3, #119	; 0x77
 8005c96:	e7df      	b.n	8005c58 <_malloc_r+0xac>
 8005c98:	f240 5254 	movw	r2, #1364	; 0x554
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d804      	bhi.n	8005caa <_malloc_r+0xfe>
 8005ca0:	0ca3      	lsrs	r3, r4, #18
 8005ca2:	337c      	adds	r3, #124	; 0x7c
 8005ca4:	e7d8      	b.n	8005c58 <_malloc_r+0xac>
 8005ca6:	233f      	movs	r3, #63	; 0x3f
 8005ca8:	e7d6      	b.n	8005c58 <_malloc_r+0xac>
 8005caa:	237e      	movs	r3, #126	; 0x7e
 8005cac:	e7d4      	b.n	8005c58 <_malloc_r+0xac>
 8005cae:	2900      	cmp	r1, #0
 8005cb0:	68f1      	ldr	r1, [r6, #12]
 8005cb2:	db04      	blt.n	8005cbe <_malloc_r+0x112>
 8005cb4:	68b3      	ldr	r3, [r6, #8]
 8005cb6:	60d9      	str	r1, [r3, #12]
 8005cb8:	608b      	str	r3, [r1, #8]
 8005cba:	18b3      	adds	r3, r6, r2
 8005cbc:	e7a4      	b.n	8005c08 <_malloc_r+0x5c>
 8005cbe:	460e      	mov	r6, r1
 8005cc0:	e7d0      	b.n	8005c64 <_malloc_r+0xb8>
 8005cc2:	2f00      	cmp	r7, #0
 8005cc4:	616a      	str	r2, [r5, #20]
 8005cc6:	612a      	str	r2, [r5, #16]
 8005cc8:	db05      	blt.n	8005cd6 <_malloc_r+0x12a>
 8005cca:	4430      	add	r0, r6
 8005ccc:	6843      	ldr	r3, [r0, #4]
 8005cce:	f043 0301 	orr.w	r3, r3, #1
 8005cd2:	6043      	str	r3, [r0, #4]
 8005cd4:	e79c      	b.n	8005c10 <_malloc_r+0x64>
 8005cd6:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8005cda:	d244      	bcs.n	8005d66 <_malloc_r+0x1ba>
 8005cdc:	08c0      	lsrs	r0, r0, #3
 8005cde:	1087      	asrs	r7, r0, #2
 8005ce0:	2201      	movs	r2, #1
 8005ce2:	fa02 f707 	lsl.w	r7, r2, r7
 8005ce6:	686a      	ldr	r2, [r5, #4]
 8005ce8:	3001      	adds	r0, #1
 8005cea:	433a      	orrs	r2, r7
 8005cec:	606a      	str	r2, [r5, #4]
 8005cee:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8005cf2:	f855 7030 	ldr.w	r7, [r5, r0, lsl #3]
 8005cf6:	60b7      	str	r7, [r6, #8]
 8005cf8:	3a08      	subs	r2, #8
 8005cfa:	60f2      	str	r2, [r6, #12]
 8005cfc:	f845 6030 	str.w	r6, [r5, r0, lsl #3]
 8005d00:	60fe      	str	r6, [r7, #12]
 8005d02:	2001      	movs	r0, #1
 8005d04:	109a      	asrs	r2, r3, #2
 8005d06:	fa00 f202 	lsl.w	r2, r0, r2
 8005d0a:	6868      	ldr	r0, [r5, #4]
 8005d0c:	4282      	cmp	r2, r0
 8005d0e:	f200 80a1 	bhi.w	8005e54 <_malloc_r+0x2a8>
 8005d12:	4202      	tst	r2, r0
 8005d14:	d106      	bne.n	8005d24 <_malloc_r+0x178>
 8005d16:	f023 0303 	bic.w	r3, r3, #3
 8005d1a:	0052      	lsls	r2, r2, #1
 8005d1c:	4202      	tst	r2, r0
 8005d1e:	f103 0304 	add.w	r3, r3, #4
 8005d22:	d0fa      	beq.n	8005d1a <_malloc_r+0x16e>
 8005d24:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
 8005d28:	46e0      	mov	r8, ip
 8005d2a:	469e      	mov	lr, r3
 8005d2c:	f8d8 600c 	ldr.w	r6, [r8, #12]
 8005d30:	4546      	cmp	r6, r8
 8005d32:	d153      	bne.n	8005ddc <_malloc_r+0x230>
 8005d34:	f10e 0e01 	add.w	lr, lr, #1
 8005d38:	f01e 0f03 	tst.w	lr, #3
 8005d3c:	f108 0808 	add.w	r8, r8, #8
 8005d40:	d1f4      	bne.n	8005d2c <_malloc_r+0x180>
 8005d42:	0798      	lsls	r0, r3, #30
 8005d44:	d179      	bne.n	8005e3a <_malloc_r+0x28e>
 8005d46:	686b      	ldr	r3, [r5, #4]
 8005d48:	ea23 0302 	bic.w	r3, r3, r2
 8005d4c:	606b      	str	r3, [r5, #4]
 8005d4e:	6868      	ldr	r0, [r5, #4]
 8005d50:	0052      	lsls	r2, r2, #1
 8005d52:	4282      	cmp	r2, r0
 8005d54:	d87e      	bhi.n	8005e54 <_malloc_r+0x2a8>
 8005d56:	2a00      	cmp	r2, #0
 8005d58:	d07c      	beq.n	8005e54 <_malloc_r+0x2a8>
 8005d5a:	4673      	mov	r3, lr
 8005d5c:	4202      	tst	r2, r0
 8005d5e:	d1e1      	bne.n	8005d24 <_malloc_r+0x178>
 8005d60:	3304      	adds	r3, #4
 8005d62:	0052      	lsls	r2, r2, #1
 8005d64:	e7fa      	b.n	8005d5c <_malloc_r+0x1b0>
 8005d66:	0a42      	lsrs	r2, r0, #9
 8005d68:	2a04      	cmp	r2, #4
 8005d6a:	d815      	bhi.n	8005d98 <_malloc_r+0x1ec>
 8005d6c:	0982      	lsrs	r2, r0, #6
 8005d6e:	3238      	adds	r2, #56	; 0x38
 8005d70:	1c57      	adds	r7, r2, #1
 8005d72:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 8005d76:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 8005d7a:	45be      	cmp	lr, r7
 8005d7c:	d126      	bne.n	8005dcc <_malloc_r+0x220>
 8005d7e:	2001      	movs	r0, #1
 8005d80:	1092      	asrs	r2, r2, #2
 8005d82:	fa00 f202 	lsl.w	r2, r0, r2
 8005d86:	6868      	ldr	r0, [r5, #4]
 8005d88:	4310      	orrs	r0, r2
 8005d8a:	6068      	str	r0, [r5, #4]
 8005d8c:	f8c6 e00c 	str.w	lr, [r6, #12]
 8005d90:	60b7      	str	r7, [r6, #8]
 8005d92:	f8ce 6008 	str.w	r6, [lr, #8]
 8005d96:	e7b3      	b.n	8005d00 <_malloc_r+0x154>
 8005d98:	2a14      	cmp	r2, #20
 8005d9a:	d801      	bhi.n	8005da0 <_malloc_r+0x1f4>
 8005d9c:	325b      	adds	r2, #91	; 0x5b
 8005d9e:	e7e7      	b.n	8005d70 <_malloc_r+0x1c4>
 8005da0:	2a54      	cmp	r2, #84	; 0x54
 8005da2:	d802      	bhi.n	8005daa <_malloc_r+0x1fe>
 8005da4:	0b02      	lsrs	r2, r0, #12
 8005da6:	326e      	adds	r2, #110	; 0x6e
 8005da8:	e7e2      	b.n	8005d70 <_malloc_r+0x1c4>
 8005daa:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8005dae:	d802      	bhi.n	8005db6 <_malloc_r+0x20a>
 8005db0:	0bc2      	lsrs	r2, r0, #15
 8005db2:	3277      	adds	r2, #119	; 0x77
 8005db4:	e7dc      	b.n	8005d70 <_malloc_r+0x1c4>
 8005db6:	f240 5754 	movw	r7, #1364	; 0x554
 8005dba:	42ba      	cmp	r2, r7
 8005dbc:	bf9a      	itte	ls
 8005dbe:	0c82      	lsrls	r2, r0, #18
 8005dc0:	327c      	addls	r2, #124	; 0x7c
 8005dc2:	227e      	movhi	r2, #126	; 0x7e
 8005dc4:	e7d4      	b.n	8005d70 <_malloc_r+0x1c4>
 8005dc6:	68bf      	ldr	r7, [r7, #8]
 8005dc8:	45be      	cmp	lr, r7
 8005dca:	d004      	beq.n	8005dd6 <_malloc_r+0x22a>
 8005dcc:	687a      	ldr	r2, [r7, #4]
 8005dce:	f022 0203 	bic.w	r2, r2, #3
 8005dd2:	4290      	cmp	r0, r2
 8005dd4:	d3f7      	bcc.n	8005dc6 <_malloc_r+0x21a>
 8005dd6:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 8005dda:	e7d7      	b.n	8005d8c <_malloc_r+0x1e0>
 8005ddc:	6870      	ldr	r0, [r6, #4]
 8005dde:	68f7      	ldr	r7, [r6, #12]
 8005de0:	f020 0003 	bic.w	r0, r0, #3
 8005de4:	eba0 0a04 	sub.w	sl, r0, r4
 8005de8:	f1ba 0f0f 	cmp.w	sl, #15
 8005dec:	dd10      	ble.n	8005e10 <_malloc_r+0x264>
 8005dee:	68b2      	ldr	r2, [r6, #8]
 8005df0:	1933      	adds	r3, r6, r4
 8005df2:	f044 0401 	orr.w	r4, r4, #1
 8005df6:	6074      	str	r4, [r6, #4]
 8005df8:	60d7      	str	r7, [r2, #12]
 8005dfa:	60ba      	str	r2, [r7, #8]
 8005dfc:	f04a 0201 	orr.w	r2, sl, #1
 8005e00:	616b      	str	r3, [r5, #20]
 8005e02:	612b      	str	r3, [r5, #16]
 8005e04:	60d9      	str	r1, [r3, #12]
 8005e06:	6099      	str	r1, [r3, #8]
 8005e08:	605a      	str	r2, [r3, #4]
 8005e0a:	f846 a000 	str.w	sl, [r6, r0]
 8005e0e:	e6ff      	b.n	8005c10 <_malloc_r+0x64>
 8005e10:	f1ba 0f00 	cmp.w	sl, #0
 8005e14:	db0f      	blt.n	8005e36 <_malloc_r+0x28a>
 8005e16:	4430      	add	r0, r6
 8005e18:	6843      	ldr	r3, [r0, #4]
 8005e1a:	f043 0301 	orr.w	r3, r3, #1
 8005e1e:	6043      	str	r3, [r0, #4]
 8005e20:	f856 3f08 	ldr.w	r3, [r6, #8]!
 8005e24:	4648      	mov	r0, r9
 8005e26:	60df      	str	r7, [r3, #12]
 8005e28:	60bb      	str	r3, [r7, #8]
 8005e2a:	f000 f8e7 	bl	8005ffc <__malloc_unlock>
 8005e2e:	4630      	mov	r0, r6
 8005e30:	b003      	add	sp, #12
 8005e32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e36:	463e      	mov	r6, r7
 8005e38:	e77a      	b.n	8005d30 <_malloc_r+0x184>
 8005e3a:	f85c 0908 	ldr.w	r0, [ip], #-8
 8005e3e:	4584      	cmp	ip, r0
 8005e40:	f103 33ff 	add.w	r3, r3, #4294967295
 8005e44:	f43f af7d 	beq.w	8005d42 <_malloc_r+0x196>
 8005e48:	e781      	b.n	8005d4e <_malloc_r+0x1a2>
 8005e4a:	bf00      	nop
 8005e4c:	200000f8 	.word	0x200000f8
 8005e50:	20000100 	.word	0x20000100
 8005e54:	f8d5 b008 	ldr.w	fp, [r5, #8]
 8005e58:	f8db 6004 	ldr.w	r6, [fp, #4]
 8005e5c:	f026 0603 	bic.w	r6, r6, #3
 8005e60:	42b4      	cmp	r4, r6
 8005e62:	d803      	bhi.n	8005e6c <_malloc_r+0x2c0>
 8005e64:	1b33      	subs	r3, r6, r4
 8005e66:	2b0f      	cmp	r3, #15
 8005e68:	f300 8096 	bgt.w	8005f98 <_malloc_r+0x3ec>
 8005e6c:	4a4f      	ldr	r2, [pc, #316]	; (8005fac <_malloc_r+0x400>)
 8005e6e:	6817      	ldr	r7, [r2, #0]
 8005e70:	4a4f      	ldr	r2, [pc, #316]	; (8005fb0 <_malloc_r+0x404>)
 8005e72:	6811      	ldr	r1, [r2, #0]
 8005e74:	3710      	adds	r7, #16
 8005e76:	3101      	adds	r1, #1
 8005e78:	eb0b 0306 	add.w	r3, fp, r6
 8005e7c:	4427      	add	r7, r4
 8005e7e:	d005      	beq.n	8005e8c <_malloc_r+0x2e0>
 8005e80:	494c      	ldr	r1, [pc, #304]	; (8005fb4 <_malloc_r+0x408>)
 8005e82:	3901      	subs	r1, #1
 8005e84:	440f      	add	r7, r1
 8005e86:	3101      	adds	r1, #1
 8005e88:	4249      	negs	r1, r1
 8005e8a:	400f      	ands	r7, r1
 8005e8c:	4639      	mov	r1, r7
 8005e8e:	4648      	mov	r0, r9
 8005e90:	9201      	str	r2, [sp, #4]
 8005e92:	9300      	str	r3, [sp, #0]
 8005e94:	f000 fb88 	bl	80065a8 <_sbrk_r>
 8005e98:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005e9c:	4680      	mov	r8, r0
 8005e9e:	d056      	beq.n	8005f4e <_malloc_r+0x3a2>
 8005ea0:	9b00      	ldr	r3, [sp, #0]
 8005ea2:	9a01      	ldr	r2, [sp, #4]
 8005ea4:	4283      	cmp	r3, r0
 8005ea6:	d901      	bls.n	8005eac <_malloc_r+0x300>
 8005ea8:	45ab      	cmp	fp, r5
 8005eaa:	d150      	bne.n	8005f4e <_malloc_r+0x3a2>
 8005eac:	4842      	ldr	r0, [pc, #264]	; (8005fb8 <_malloc_r+0x40c>)
 8005eae:	6801      	ldr	r1, [r0, #0]
 8005eb0:	4543      	cmp	r3, r8
 8005eb2:	eb07 0e01 	add.w	lr, r7, r1
 8005eb6:	f8c0 e000 	str.w	lr, [r0]
 8005eba:	4940      	ldr	r1, [pc, #256]	; (8005fbc <_malloc_r+0x410>)
 8005ebc:	4682      	mov	sl, r0
 8005ebe:	d113      	bne.n	8005ee8 <_malloc_r+0x33c>
 8005ec0:	420b      	tst	r3, r1
 8005ec2:	d111      	bne.n	8005ee8 <_malloc_r+0x33c>
 8005ec4:	68ab      	ldr	r3, [r5, #8]
 8005ec6:	443e      	add	r6, r7
 8005ec8:	f046 0601 	orr.w	r6, r6, #1
 8005ecc:	605e      	str	r6, [r3, #4]
 8005ece:	4a3c      	ldr	r2, [pc, #240]	; (8005fc0 <_malloc_r+0x414>)
 8005ed0:	f8da 3000 	ldr.w	r3, [sl]
 8005ed4:	6811      	ldr	r1, [r2, #0]
 8005ed6:	428b      	cmp	r3, r1
 8005ed8:	bf88      	it	hi
 8005eda:	6013      	strhi	r3, [r2, #0]
 8005edc:	4a39      	ldr	r2, [pc, #228]	; (8005fc4 <_malloc_r+0x418>)
 8005ede:	6811      	ldr	r1, [r2, #0]
 8005ee0:	428b      	cmp	r3, r1
 8005ee2:	bf88      	it	hi
 8005ee4:	6013      	strhi	r3, [r2, #0]
 8005ee6:	e032      	b.n	8005f4e <_malloc_r+0x3a2>
 8005ee8:	6810      	ldr	r0, [r2, #0]
 8005eea:	3001      	adds	r0, #1
 8005eec:	bf1b      	ittet	ne
 8005eee:	eba8 0303 	subne.w	r3, r8, r3
 8005ef2:	4473      	addne	r3, lr
 8005ef4:	f8c2 8000 	streq.w	r8, [r2]
 8005ef8:	f8ca 3000 	strne.w	r3, [sl]
 8005efc:	f018 0007 	ands.w	r0, r8, #7
 8005f00:	bf1c      	itt	ne
 8005f02:	f1c0 0008 	rsbne	r0, r0, #8
 8005f06:	4480      	addne	r8, r0
 8005f08:	4b2a      	ldr	r3, [pc, #168]	; (8005fb4 <_malloc_r+0x408>)
 8005f0a:	4447      	add	r7, r8
 8005f0c:	4418      	add	r0, r3
 8005f0e:	400f      	ands	r7, r1
 8005f10:	1bc7      	subs	r7, r0, r7
 8005f12:	4639      	mov	r1, r7
 8005f14:	4648      	mov	r0, r9
 8005f16:	f000 fb47 	bl	80065a8 <_sbrk_r>
 8005f1a:	1c43      	adds	r3, r0, #1
 8005f1c:	bf08      	it	eq
 8005f1e:	4640      	moveq	r0, r8
 8005f20:	f8da 3000 	ldr.w	r3, [sl]
 8005f24:	f8c5 8008 	str.w	r8, [r5, #8]
 8005f28:	bf08      	it	eq
 8005f2a:	2700      	moveq	r7, #0
 8005f2c:	eba0 0008 	sub.w	r0, r0, r8
 8005f30:	443b      	add	r3, r7
 8005f32:	4407      	add	r7, r0
 8005f34:	f047 0701 	orr.w	r7, r7, #1
 8005f38:	45ab      	cmp	fp, r5
 8005f3a:	f8ca 3000 	str.w	r3, [sl]
 8005f3e:	f8c8 7004 	str.w	r7, [r8, #4]
 8005f42:	d0c4      	beq.n	8005ece <_malloc_r+0x322>
 8005f44:	2e0f      	cmp	r6, #15
 8005f46:	d810      	bhi.n	8005f6a <_malloc_r+0x3be>
 8005f48:	2301      	movs	r3, #1
 8005f4a:	f8c8 3004 	str.w	r3, [r8, #4]
 8005f4e:	68ab      	ldr	r3, [r5, #8]
 8005f50:	685a      	ldr	r2, [r3, #4]
 8005f52:	f022 0203 	bic.w	r2, r2, #3
 8005f56:	4294      	cmp	r4, r2
 8005f58:	eba2 0304 	sub.w	r3, r2, r4
 8005f5c:	d801      	bhi.n	8005f62 <_malloc_r+0x3b6>
 8005f5e:	2b0f      	cmp	r3, #15
 8005f60:	dc1a      	bgt.n	8005f98 <_malloc_r+0x3ec>
 8005f62:	4648      	mov	r0, r9
 8005f64:	f000 f84a 	bl	8005ffc <__malloc_unlock>
 8005f68:	e62d      	b.n	8005bc6 <_malloc_r+0x1a>
 8005f6a:	f8db 3004 	ldr.w	r3, [fp, #4]
 8005f6e:	3e0c      	subs	r6, #12
 8005f70:	f026 0607 	bic.w	r6, r6, #7
 8005f74:	f003 0301 	and.w	r3, r3, #1
 8005f78:	4333      	orrs	r3, r6
 8005f7a:	f8cb 3004 	str.w	r3, [fp, #4]
 8005f7e:	eb0b 0306 	add.w	r3, fp, r6
 8005f82:	2205      	movs	r2, #5
 8005f84:	2e0f      	cmp	r6, #15
 8005f86:	605a      	str	r2, [r3, #4]
 8005f88:	609a      	str	r2, [r3, #8]
 8005f8a:	d9a0      	bls.n	8005ece <_malloc_r+0x322>
 8005f8c:	f10b 0108 	add.w	r1, fp, #8
 8005f90:	4648      	mov	r0, r9
 8005f92:	f7ff fcab 	bl	80058ec <_free_r>
 8005f96:	e79a      	b.n	8005ece <_malloc_r+0x322>
 8005f98:	68ae      	ldr	r6, [r5, #8]
 8005f9a:	f044 0201 	orr.w	r2, r4, #1
 8005f9e:	4434      	add	r4, r6
 8005fa0:	f043 0301 	orr.w	r3, r3, #1
 8005fa4:	6072      	str	r2, [r6, #4]
 8005fa6:	60ac      	str	r4, [r5, #8]
 8005fa8:	6063      	str	r3, [r4, #4]
 8005faa:	e631      	b.n	8005c10 <_malloc_r+0x64>
 8005fac:	200006c0 	.word	0x200006c0
 8005fb0:	20000500 	.word	0x20000500
 8005fb4:	00000080 	.word	0x00000080
 8005fb8:	20000690 	.word	0x20000690
 8005fbc:	0000007f 	.word	0x0000007f
 8005fc0:	200006b8 	.word	0x200006b8
 8005fc4:	200006bc 	.word	0x200006bc

08005fc8 <memcpy>:
 8005fc8:	b510      	push	{r4, lr}
 8005fca:	1e43      	subs	r3, r0, #1
 8005fcc:	440a      	add	r2, r1
 8005fce:	4291      	cmp	r1, r2
 8005fd0:	d100      	bne.n	8005fd4 <memcpy+0xc>
 8005fd2:	bd10      	pop	{r4, pc}
 8005fd4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005fd8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005fdc:	e7f7      	b.n	8005fce <memcpy+0x6>

08005fde <memset>:
 8005fde:	4402      	add	r2, r0
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d100      	bne.n	8005fe8 <memset+0xa>
 8005fe6:	4770      	bx	lr
 8005fe8:	f803 1b01 	strb.w	r1, [r3], #1
 8005fec:	e7f9      	b.n	8005fe2 <memset+0x4>
	...

08005ff0 <__malloc_lock>:
 8005ff0:	4801      	ldr	r0, [pc, #4]	; (8005ff8 <__malloc_lock+0x8>)
 8005ff2:	f7ff bd65 	b.w	8005ac0 <__retarget_lock_acquire_recursive>
 8005ff6:	bf00      	nop
 8005ff8:	20000884 	.word	0x20000884

08005ffc <__malloc_unlock>:
 8005ffc:	4801      	ldr	r0, [pc, #4]	; (8006004 <__malloc_unlock+0x8>)
 8005ffe:	f7ff bd60 	b.w	8005ac2 <__retarget_lock_release_recursive>
 8006002:	bf00      	nop
 8006004:	20000884 	.word	0x20000884

08006008 <_Balloc>:
 8006008:	b570      	push	{r4, r5, r6, lr}
 800600a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800600c:	4604      	mov	r4, r0
 800600e:	460e      	mov	r6, r1
 8006010:	b93d      	cbnz	r5, 8006022 <_Balloc+0x1a>
 8006012:	2010      	movs	r0, #16
 8006014:	f7ff fdc2 	bl	8005b9c <malloc>
 8006018:	6260      	str	r0, [r4, #36]	; 0x24
 800601a:	6045      	str	r5, [r0, #4]
 800601c:	6085      	str	r5, [r0, #8]
 800601e:	6005      	str	r5, [r0, #0]
 8006020:	60c5      	str	r5, [r0, #12]
 8006022:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006024:	68eb      	ldr	r3, [r5, #12]
 8006026:	b183      	cbz	r3, 800604a <_Balloc+0x42>
 8006028:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800602a:	68db      	ldr	r3, [r3, #12]
 800602c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006030:	b9b8      	cbnz	r0, 8006062 <_Balloc+0x5a>
 8006032:	2101      	movs	r1, #1
 8006034:	fa01 f506 	lsl.w	r5, r1, r6
 8006038:	1d6a      	adds	r2, r5, #5
 800603a:	0092      	lsls	r2, r2, #2
 800603c:	4620      	mov	r0, r4
 800603e:	f000 fb4d 	bl	80066dc <_calloc_r>
 8006042:	b160      	cbz	r0, 800605e <_Balloc+0x56>
 8006044:	6046      	str	r6, [r0, #4]
 8006046:	6085      	str	r5, [r0, #8]
 8006048:	e00e      	b.n	8006068 <_Balloc+0x60>
 800604a:	2221      	movs	r2, #33	; 0x21
 800604c:	2104      	movs	r1, #4
 800604e:	4620      	mov	r0, r4
 8006050:	f000 fb44 	bl	80066dc <_calloc_r>
 8006054:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006056:	60e8      	str	r0, [r5, #12]
 8006058:	68db      	ldr	r3, [r3, #12]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d1e4      	bne.n	8006028 <_Balloc+0x20>
 800605e:	2000      	movs	r0, #0
 8006060:	bd70      	pop	{r4, r5, r6, pc}
 8006062:	6802      	ldr	r2, [r0, #0]
 8006064:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8006068:	2300      	movs	r3, #0
 800606a:	6103      	str	r3, [r0, #16]
 800606c:	60c3      	str	r3, [r0, #12]
 800606e:	bd70      	pop	{r4, r5, r6, pc}

08006070 <_Bfree>:
 8006070:	b570      	push	{r4, r5, r6, lr}
 8006072:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006074:	4606      	mov	r6, r0
 8006076:	460d      	mov	r5, r1
 8006078:	b93c      	cbnz	r4, 800608a <_Bfree+0x1a>
 800607a:	2010      	movs	r0, #16
 800607c:	f7ff fd8e 	bl	8005b9c <malloc>
 8006080:	6270      	str	r0, [r6, #36]	; 0x24
 8006082:	6044      	str	r4, [r0, #4]
 8006084:	6084      	str	r4, [r0, #8]
 8006086:	6004      	str	r4, [r0, #0]
 8006088:	60c4      	str	r4, [r0, #12]
 800608a:	b13d      	cbz	r5, 800609c <_Bfree+0x2c>
 800608c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800608e:	686a      	ldr	r2, [r5, #4]
 8006090:	68db      	ldr	r3, [r3, #12]
 8006092:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006096:	6029      	str	r1, [r5, #0]
 8006098:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800609c:	bd70      	pop	{r4, r5, r6, pc}

0800609e <__multadd>:
 800609e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060a2:	690d      	ldr	r5, [r1, #16]
 80060a4:	461f      	mov	r7, r3
 80060a6:	4606      	mov	r6, r0
 80060a8:	460c      	mov	r4, r1
 80060aa:	f101 0e14 	add.w	lr, r1, #20
 80060ae:	2300      	movs	r3, #0
 80060b0:	f8de 0000 	ldr.w	r0, [lr]
 80060b4:	b281      	uxth	r1, r0
 80060b6:	fb02 7101 	mla	r1, r2, r1, r7
 80060ba:	0c0f      	lsrs	r7, r1, #16
 80060bc:	0c00      	lsrs	r0, r0, #16
 80060be:	fb02 7000 	mla	r0, r2, r0, r7
 80060c2:	b289      	uxth	r1, r1
 80060c4:	3301      	adds	r3, #1
 80060c6:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80060ca:	429d      	cmp	r5, r3
 80060cc:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80060d0:	f84e 1b04 	str.w	r1, [lr], #4
 80060d4:	dcec      	bgt.n	80060b0 <__multadd+0x12>
 80060d6:	b1d7      	cbz	r7, 800610e <__multadd+0x70>
 80060d8:	68a3      	ldr	r3, [r4, #8]
 80060da:	429d      	cmp	r5, r3
 80060dc:	db12      	blt.n	8006104 <__multadd+0x66>
 80060de:	6861      	ldr	r1, [r4, #4]
 80060e0:	4630      	mov	r0, r6
 80060e2:	3101      	adds	r1, #1
 80060e4:	f7ff ff90 	bl	8006008 <_Balloc>
 80060e8:	6922      	ldr	r2, [r4, #16]
 80060ea:	3202      	adds	r2, #2
 80060ec:	f104 010c 	add.w	r1, r4, #12
 80060f0:	4680      	mov	r8, r0
 80060f2:	0092      	lsls	r2, r2, #2
 80060f4:	300c      	adds	r0, #12
 80060f6:	f7ff ff67 	bl	8005fc8 <memcpy>
 80060fa:	4621      	mov	r1, r4
 80060fc:	4630      	mov	r0, r6
 80060fe:	f7ff ffb7 	bl	8006070 <_Bfree>
 8006102:	4644      	mov	r4, r8
 8006104:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006108:	3501      	adds	r5, #1
 800610a:	615f      	str	r7, [r3, #20]
 800610c:	6125      	str	r5, [r4, #16]
 800610e:	4620      	mov	r0, r4
 8006110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006114 <__hi0bits>:
 8006114:	0c02      	lsrs	r2, r0, #16
 8006116:	0412      	lsls	r2, r2, #16
 8006118:	4603      	mov	r3, r0
 800611a:	b9b2      	cbnz	r2, 800614a <__hi0bits+0x36>
 800611c:	0403      	lsls	r3, r0, #16
 800611e:	2010      	movs	r0, #16
 8006120:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006124:	bf04      	itt	eq
 8006126:	021b      	lsleq	r3, r3, #8
 8006128:	3008      	addeq	r0, #8
 800612a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800612e:	bf04      	itt	eq
 8006130:	011b      	lsleq	r3, r3, #4
 8006132:	3004      	addeq	r0, #4
 8006134:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006138:	bf04      	itt	eq
 800613a:	009b      	lsleq	r3, r3, #2
 800613c:	3002      	addeq	r0, #2
 800613e:	2b00      	cmp	r3, #0
 8006140:	db06      	blt.n	8006150 <__hi0bits+0x3c>
 8006142:	005b      	lsls	r3, r3, #1
 8006144:	d503      	bpl.n	800614e <__hi0bits+0x3a>
 8006146:	3001      	adds	r0, #1
 8006148:	4770      	bx	lr
 800614a:	2000      	movs	r0, #0
 800614c:	e7e8      	b.n	8006120 <__hi0bits+0xc>
 800614e:	2020      	movs	r0, #32
 8006150:	4770      	bx	lr

08006152 <__lo0bits>:
 8006152:	6803      	ldr	r3, [r0, #0]
 8006154:	f013 0207 	ands.w	r2, r3, #7
 8006158:	4601      	mov	r1, r0
 800615a:	d00b      	beq.n	8006174 <__lo0bits+0x22>
 800615c:	07da      	lsls	r2, r3, #31
 800615e:	d423      	bmi.n	80061a8 <__lo0bits+0x56>
 8006160:	0798      	lsls	r0, r3, #30
 8006162:	bf49      	itett	mi
 8006164:	085b      	lsrmi	r3, r3, #1
 8006166:	089b      	lsrpl	r3, r3, #2
 8006168:	2001      	movmi	r0, #1
 800616a:	600b      	strmi	r3, [r1, #0]
 800616c:	bf5c      	itt	pl
 800616e:	600b      	strpl	r3, [r1, #0]
 8006170:	2002      	movpl	r0, #2
 8006172:	4770      	bx	lr
 8006174:	b298      	uxth	r0, r3
 8006176:	b9a8      	cbnz	r0, 80061a4 <__lo0bits+0x52>
 8006178:	0c1b      	lsrs	r3, r3, #16
 800617a:	2010      	movs	r0, #16
 800617c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006180:	bf04      	itt	eq
 8006182:	0a1b      	lsreq	r3, r3, #8
 8006184:	3008      	addeq	r0, #8
 8006186:	071a      	lsls	r2, r3, #28
 8006188:	bf04      	itt	eq
 800618a:	091b      	lsreq	r3, r3, #4
 800618c:	3004      	addeq	r0, #4
 800618e:	079a      	lsls	r2, r3, #30
 8006190:	bf04      	itt	eq
 8006192:	089b      	lsreq	r3, r3, #2
 8006194:	3002      	addeq	r0, #2
 8006196:	07da      	lsls	r2, r3, #31
 8006198:	d402      	bmi.n	80061a0 <__lo0bits+0x4e>
 800619a:	085b      	lsrs	r3, r3, #1
 800619c:	d006      	beq.n	80061ac <__lo0bits+0x5a>
 800619e:	3001      	adds	r0, #1
 80061a0:	600b      	str	r3, [r1, #0]
 80061a2:	4770      	bx	lr
 80061a4:	4610      	mov	r0, r2
 80061a6:	e7e9      	b.n	800617c <__lo0bits+0x2a>
 80061a8:	2000      	movs	r0, #0
 80061aa:	4770      	bx	lr
 80061ac:	2020      	movs	r0, #32
 80061ae:	4770      	bx	lr

080061b0 <__i2b>:
 80061b0:	b510      	push	{r4, lr}
 80061b2:	460c      	mov	r4, r1
 80061b4:	2101      	movs	r1, #1
 80061b6:	f7ff ff27 	bl	8006008 <_Balloc>
 80061ba:	2201      	movs	r2, #1
 80061bc:	6144      	str	r4, [r0, #20]
 80061be:	6102      	str	r2, [r0, #16]
 80061c0:	bd10      	pop	{r4, pc}

080061c2 <__multiply>:
 80061c2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061c6:	4614      	mov	r4, r2
 80061c8:	690a      	ldr	r2, [r1, #16]
 80061ca:	6923      	ldr	r3, [r4, #16]
 80061cc:	429a      	cmp	r2, r3
 80061ce:	bfb8      	it	lt
 80061d0:	460b      	movlt	r3, r1
 80061d2:	4689      	mov	r9, r1
 80061d4:	bfbc      	itt	lt
 80061d6:	46a1      	movlt	r9, r4
 80061d8:	461c      	movlt	r4, r3
 80061da:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80061de:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80061e2:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80061e6:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80061ea:	eb07 060a 	add.w	r6, r7, sl
 80061ee:	429e      	cmp	r6, r3
 80061f0:	bfc8      	it	gt
 80061f2:	3101      	addgt	r1, #1
 80061f4:	f7ff ff08 	bl	8006008 <_Balloc>
 80061f8:	f100 0514 	add.w	r5, r0, #20
 80061fc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006200:	462b      	mov	r3, r5
 8006202:	2200      	movs	r2, #0
 8006204:	4543      	cmp	r3, r8
 8006206:	d316      	bcc.n	8006236 <__multiply+0x74>
 8006208:	f104 0214 	add.w	r2, r4, #20
 800620c:	f109 0114 	add.w	r1, r9, #20
 8006210:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 8006214:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8006218:	9301      	str	r3, [sp, #4]
 800621a:	9c01      	ldr	r4, [sp, #4]
 800621c:	4294      	cmp	r4, r2
 800621e:	4613      	mov	r3, r2
 8006220:	d80c      	bhi.n	800623c <__multiply+0x7a>
 8006222:	2e00      	cmp	r6, #0
 8006224:	dd03      	ble.n	800622e <__multiply+0x6c>
 8006226:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800622a:	2b00      	cmp	r3, #0
 800622c:	d054      	beq.n	80062d8 <__multiply+0x116>
 800622e:	6106      	str	r6, [r0, #16]
 8006230:	b003      	add	sp, #12
 8006232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006236:	f843 2b04 	str.w	r2, [r3], #4
 800623a:	e7e3      	b.n	8006204 <__multiply+0x42>
 800623c:	f8b3 a000 	ldrh.w	sl, [r3]
 8006240:	3204      	adds	r2, #4
 8006242:	f1ba 0f00 	cmp.w	sl, #0
 8006246:	d020      	beq.n	800628a <__multiply+0xc8>
 8006248:	46ae      	mov	lr, r5
 800624a:	4689      	mov	r9, r1
 800624c:	f04f 0c00 	mov.w	ip, #0
 8006250:	f859 4b04 	ldr.w	r4, [r9], #4
 8006254:	f8be b000 	ldrh.w	fp, [lr]
 8006258:	b2a3      	uxth	r3, r4
 800625a:	fb0a b303 	mla	r3, sl, r3, fp
 800625e:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 8006262:	f8de 4000 	ldr.w	r4, [lr]
 8006266:	4463      	add	r3, ip
 8006268:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 800626c:	fb0a c40b 	mla	r4, sl, fp, ip
 8006270:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8006274:	b29b      	uxth	r3, r3
 8006276:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800627a:	454f      	cmp	r7, r9
 800627c:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8006280:	f84e 3b04 	str.w	r3, [lr], #4
 8006284:	d8e4      	bhi.n	8006250 <__multiply+0x8e>
 8006286:	f8ce c000 	str.w	ip, [lr]
 800628a:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 800628e:	f1b9 0f00 	cmp.w	r9, #0
 8006292:	d01f      	beq.n	80062d4 <__multiply+0x112>
 8006294:	682b      	ldr	r3, [r5, #0]
 8006296:	46ae      	mov	lr, r5
 8006298:	468c      	mov	ip, r1
 800629a:	f04f 0a00 	mov.w	sl, #0
 800629e:	f8bc 4000 	ldrh.w	r4, [ip]
 80062a2:	f8be b002 	ldrh.w	fp, [lr, #2]
 80062a6:	fb09 b404 	mla	r4, r9, r4, fp
 80062aa:	44a2      	add	sl, r4
 80062ac:	b29b      	uxth	r3, r3
 80062ae:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 80062b2:	f84e 3b04 	str.w	r3, [lr], #4
 80062b6:	f85c 3b04 	ldr.w	r3, [ip], #4
 80062ba:	f8be 4000 	ldrh.w	r4, [lr]
 80062be:	0c1b      	lsrs	r3, r3, #16
 80062c0:	fb09 4303 	mla	r3, r9, r3, r4
 80062c4:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 80062c8:	4567      	cmp	r7, ip
 80062ca:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80062ce:	d8e6      	bhi.n	800629e <__multiply+0xdc>
 80062d0:	f8ce 3000 	str.w	r3, [lr]
 80062d4:	3504      	adds	r5, #4
 80062d6:	e7a0      	b.n	800621a <__multiply+0x58>
 80062d8:	3e01      	subs	r6, #1
 80062da:	e7a2      	b.n	8006222 <__multiply+0x60>

080062dc <__pow5mult>:
 80062dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062e0:	4615      	mov	r5, r2
 80062e2:	f012 0203 	ands.w	r2, r2, #3
 80062e6:	4606      	mov	r6, r0
 80062e8:	460f      	mov	r7, r1
 80062ea:	d007      	beq.n	80062fc <__pow5mult+0x20>
 80062ec:	3a01      	subs	r2, #1
 80062ee:	4c21      	ldr	r4, [pc, #132]	; (8006374 <__pow5mult+0x98>)
 80062f0:	2300      	movs	r3, #0
 80062f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80062f6:	f7ff fed2 	bl	800609e <__multadd>
 80062fa:	4607      	mov	r7, r0
 80062fc:	10ad      	asrs	r5, r5, #2
 80062fe:	d035      	beq.n	800636c <__pow5mult+0x90>
 8006300:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006302:	b93c      	cbnz	r4, 8006314 <__pow5mult+0x38>
 8006304:	2010      	movs	r0, #16
 8006306:	f7ff fc49 	bl	8005b9c <malloc>
 800630a:	6270      	str	r0, [r6, #36]	; 0x24
 800630c:	6044      	str	r4, [r0, #4]
 800630e:	6084      	str	r4, [r0, #8]
 8006310:	6004      	str	r4, [r0, #0]
 8006312:	60c4      	str	r4, [r0, #12]
 8006314:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006318:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800631c:	b94c      	cbnz	r4, 8006332 <__pow5mult+0x56>
 800631e:	f240 2171 	movw	r1, #625	; 0x271
 8006322:	4630      	mov	r0, r6
 8006324:	f7ff ff44 	bl	80061b0 <__i2b>
 8006328:	2300      	movs	r3, #0
 800632a:	f8c8 0008 	str.w	r0, [r8, #8]
 800632e:	4604      	mov	r4, r0
 8006330:	6003      	str	r3, [r0, #0]
 8006332:	f04f 0800 	mov.w	r8, #0
 8006336:	07eb      	lsls	r3, r5, #31
 8006338:	d50a      	bpl.n	8006350 <__pow5mult+0x74>
 800633a:	4639      	mov	r1, r7
 800633c:	4622      	mov	r2, r4
 800633e:	4630      	mov	r0, r6
 8006340:	f7ff ff3f 	bl	80061c2 <__multiply>
 8006344:	4639      	mov	r1, r7
 8006346:	4681      	mov	r9, r0
 8006348:	4630      	mov	r0, r6
 800634a:	f7ff fe91 	bl	8006070 <_Bfree>
 800634e:	464f      	mov	r7, r9
 8006350:	106d      	asrs	r5, r5, #1
 8006352:	d00b      	beq.n	800636c <__pow5mult+0x90>
 8006354:	6820      	ldr	r0, [r4, #0]
 8006356:	b938      	cbnz	r0, 8006368 <__pow5mult+0x8c>
 8006358:	4622      	mov	r2, r4
 800635a:	4621      	mov	r1, r4
 800635c:	4630      	mov	r0, r6
 800635e:	f7ff ff30 	bl	80061c2 <__multiply>
 8006362:	6020      	str	r0, [r4, #0]
 8006364:	f8c0 8000 	str.w	r8, [r0]
 8006368:	4604      	mov	r4, r0
 800636a:	e7e4      	b.n	8006336 <__pow5mult+0x5a>
 800636c:	4638      	mov	r0, r7
 800636e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006372:	bf00      	nop
 8006374:	080073a0 	.word	0x080073a0

08006378 <__lshift>:
 8006378:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800637c:	460c      	mov	r4, r1
 800637e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006382:	6923      	ldr	r3, [r4, #16]
 8006384:	6849      	ldr	r1, [r1, #4]
 8006386:	eb0a 0903 	add.w	r9, sl, r3
 800638a:	68a3      	ldr	r3, [r4, #8]
 800638c:	4607      	mov	r7, r0
 800638e:	4616      	mov	r6, r2
 8006390:	f109 0501 	add.w	r5, r9, #1
 8006394:	42ab      	cmp	r3, r5
 8006396:	db31      	blt.n	80063fc <__lshift+0x84>
 8006398:	4638      	mov	r0, r7
 800639a:	f7ff fe35 	bl	8006008 <_Balloc>
 800639e:	2200      	movs	r2, #0
 80063a0:	4680      	mov	r8, r0
 80063a2:	f100 0314 	add.w	r3, r0, #20
 80063a6:	4611      	mov	r1, r2
 80063a8:	4552      	cmp	r2, sl
 80063aa:	db2a      	blt.n	8006402 <__lshift+0x8a>
 80063ac:	6920      	ldr	r0, [r4, #16]
 80063ae:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80063b2:	f104 0114 	add.w	r1, r4, #20
 80063b6:	f016 021f 	ands.w	r2, r6, #31
 80063ba:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 80063be:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 80063c2:	d022      	beq.n	800640a <__lshift+0x92>
 80063c4:	f1c2 0c20 	rsb	ip, r2, #32
 80063c8:	2000      	movs	r0, #0
 80063ca:	680e      	ldr	r6, [r1, #0]
 80063cc:	4096      	lsls	r6, r2
 80063ce:	4330      	orrs	r0, r6
 80063d0:	f843 0b04 	str.w	r0, [r3], #4
 80063d4:	f851 0b04 	ldr.w	r0, [r1], #4
 80063d8:	458e      	cmp	lr, r1
 80063da:	fa20 f00c 	lsr.w	r0, r0, ip
 80063de:	d8f4      	bhi.n	80063ca <__lshift+0x52>
 80063e0:	6018      	str	r0, [r3, #0]
 80063e2:	b108      	cbz	r0, 80063e8 <__lshift+0x70>
 80063e4:	f109 0502 	add.w	r5, r9, #2
 80063e8:	3d01      	subs	r5, #1
 80063ea:	4638      	mov	r0, r7
 80063ec:	f8c8 5010 	str.w	r5, [r8, #16]
 80063f0:	4621      	mov	r1, r4
 80063f2:	f7ff fe3d 	bl	8006070 <_Bfree>
 80063f6:	4640      	mov	r0, r8
 80063f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063fc:	3101      	adds	r1, #1
 80063fe:	005b      	lsls	r3, r3, #1
 8006400:	e7c8      	b.n	8006394 <__lshift+0x1c>
 8006402:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006406:	3201      	adds	r2, #1
 8006408:	e7ce      	b.n	80063a8 <__lshift+0x30>
 800640a:	3b04      	subs	r3, #4
 800640c:	f851 2b04 	ldr.w	r2, [r1], #4
 8006410:	f843 2f04 	str.w	r2, [r3, #4]!
 8006414:	458e      	cmp	lr, r1
 8006416:	d8f9      	bhi.n	800640c <__lshift+0x94>
 8006418:	e7e6      	b.n	80063e8 <__lshift+0x70>

0800641a <__mcmp>:
 800641a:	6903      	ldr	r3, [r0, #16]
 800641c:	690a      	ldr	r2, [r1, #16]
 800641e:	1a9b      	subs	r3, r3, r2
 8006420:	b530      	push	{r4, r5, lr}
 8006422:	d10c      	bne.n	800643e <__mcmp+0x24>
 8006424:	0092      	lsls	r2, r2, #2
 8006426:	3014      	adds	r0, #20
 8006428:	3114      	adds	r1, #20
 800642a:	1884      	adds	r4, r0, r2
 800642c:	4411      	add	r1, r2
 800642e:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006432:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006436:	4295      	cmp	r5, r2
 8006438:	d003      	beq.n	8006442 <__mcmp+0x28>
 800643a:	d305      	bcc.n	8006448 <__mcmp+0x2e>
 800643c:	2301      	movs	r3, #1
 800643e:	4618      	mov	r0, r3
 8006440:	bd30      	pop	{r4, r5, pc}
 8006442:	42a0      	cmp	r0, r4
 8006444:	d3f3      	bcc.n	800642e <__mcmp+0x14>
 8006446:	e7fa      	b.n	800643e <__mcmp+0x24>
 8006448:	f04f 33ff 	mov.w	r3, #4294967295
 800644c:	e7f7      	b.n	800643e <__mcmp+0x24>

0800644e <__mdiff>:
 800644e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006452:	460d      	mov	r5, r1
 8006454:	4607      	mov	r7, r0
 8006456:	4611      	mov	r1, r2
 8006458:	4628      	mov	r0, r5
 800645a:	4614      	mov	r4, r2
 800645c:	f7ff ffdd 	bl	800641a <__mcmp>
 8006460:	1e06      	subs	r6, r0, #0
 8006462:	d108      	bne.n	8006476 <__mdiff+0x28>
 8006464:	4631      	mov	r1, r6
 8006466:	4638      	mov	r0, r7
 8006468:	f7ff fdce 	bl	8006008 <_Balloc>
 800646c:	2301      	movs	r3, #1
 800646e:	6103      	str	r3, [r0, #16]
 8006470:	6146      	str	r6, [r0, #20]
 8006472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006476:	bfa4      	itt	ge
 8006478:	4623      	movge	r3, r4
 800647a:	462c      	movge	r4, r5
 800647c:	4638      	mov	r0, r7
 800647e:	6861      	ldr	r1, [r4, #4]
 8006480:	bfa6      	itte	ge
 8006482:	461d      	movge	r5, r3
 8006484:	2600      	movge	r6, #0
 8006486:	2601      	movlt	r6, #1
 8006488:	f7ff fdbe 	bl	8006008 <_Balloc>
 800648c:	692b      	ldr	r3, [r5, #16]
 800648e:	60c6      	str	r6, [r0, #12]
 8006490:	6926      	ldr	r6, [r4, #16]
 8006492:	f105 0914 	add.w	r9, r5, #20
 8006496:	f104 0214 	add.w	r2, r4, #20
 800649a:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800649e:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80064a2:	f100 0514 	add.w	r5, r0, #20
 80064a6:	f04f 0c00 	mov.w	ip, #0
 80064aa:	f852 ab04 	ldr.w	sl, [r2], #4
 80064ae:	f859 4b04 	ldr.w	r4, [r9], #4
 80064b2:	fa1c f18a 	uxtah	r1, ip, sl
 80064b6:	b2a3      	uxth	r3, r4
 80064b8:	1ac9      	subs	r1, r1, r3
 80064ba:	0c23      	lsrs	r3, r4, #16
 80064bc:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80064c0:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80064c4:	b289      	uxth	r1, r1
 80064c6:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80064ca:	45c8      	cmp	r8, r9
 80064cc:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80064d0:	4696      	mov	lr, r2
 80064d2:	f845 3b04 	str.w	r3, [r5], #4
 80064d6:	d8e8      	bhi.n	80064aa <__mdiff+0x5c>
 80064d8:	45be      	cmp	lr, r7
 80064da:	d305      	bcc.n	80064e8 <__mdiff+0x9a>
 80064dc:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80064e0:	b18b      	cbz	r3, 8006506 <__mdiff+0xb8>
 80064e2:	6106      	str	r6, [r0, #16]
 80064e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064e8:	f85e 1b04 	ldr.w	r1, [lr], #4
 80064ec:	fa1c f381 	uxtah	r3, ip, r1
 80064f0:	141a      	asrs	r2, r3, #16
 80064f2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80064f6:	b29b      	uxth	r3, r3
 80064f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80064fc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006500:	f845 3b04 	str.w	r3, [r5], #4
 8006504:	e7e8      	b.n	80064d8 <__mdiff+0x8a>
 8006506:	3e01      	subs	r6, #1
 8006508:	e7e8      	b.n	80064dc <__mdiff+0x8e>

0800650a <__d2b>:
 800650a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800650e:	460e      	mov	r6, r1
 8006510:	2101      	movs	r1, #1
 8006512:	ec59 8b10 	vmov	r8, r9, d0
 8006516:	4615      	mov	r5, r2
 8006518:	f7ff fd76 	bl	8006008 <_Balloc>
 800651c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006520:	4607      	mov	r7, r0
 8006522:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006526:	bb34      	cbnz	r4, 8006576 <__d2b+0x6c>
 8006528:	9301      	str	r3, [sp, #4]
 800652a:	f1b8 0f00 	cmp.w	r8, #0
 800652e:	d027      	beq.n	8006580 <__d2b+0x76>
 8006530:	a802      	add	r0, sp, #8
 8006532:	f840 8d08 	str.w	r8, [r0, #-8]!
 8006536:	f7ff fe0c 	bl	8006152 <__lo0bits>
 800653a:	9900      	ldr	r1, [sp, #0]
 800653c:	b1f0      	cbz	r0, 800657c <__d2b+0x72>
 800653e:	9a01      	ldr	r2, [sp, #4]
 8006540:	f1c0 0320 	rsb	r3, r0, #32
 8006544:	fa02 f303 	lsl.w	r3, r2, r3
 8006548:	430b      	orrs	r3, r1
 800654a:	40c2      	lsrs	r2, r0
 800654c:	617b      	str	r3, [r7, #20]
 800654e:	9201      	str	r2, [sp, #4]
 8006550:	9b01      	ldr	r3, [sp, #4]
 8006552:	61bb      	str	r3, [r7, #24]
 8006554:	2b00      	cmp	r3, #0
 8006556:	bf14      	ite	ne
 8006558:	2102      	movne	r1, #2
 800655a:	2101      	moveq	r1, #1
 800655c:	6139      	str	r1, [r7, #16]
 800655e:	b1c4      	cbz	r4, 8006592 <__d2b+0x88>
 8006560:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006564:	4404      	add	r4, r0
 8006566:	6034      	str	r4, [r6, #0]
 8006568:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800656c:	6028      	str	r0, [r5, #0]
 800656e:	4638      	mov	r0, r7
 8006570:	b003      	add	sp, #12
 8006572:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006576:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800657a:	e7d5      	b.n	8006528 <__d2b+0x1e>
 800657c:	6179      	str	r1, [r7, #20]
 800657e:	e7e7      	b.n	8006550 <__d2b+0x46>
 8006580:	a801      	add	r0, sp, #4
 8006582:	f7ff fde6 	bl	8006152 <__lo0bits>
 8006586:	9b01      	ldr	r3, [sp, #4]
 8006588:	617b      	str	r3, [r7, #20]
 800658a:	2101      	movs	r1, #1
 800658c:	6139      	str	r1, [r7, #16]
 800658e:	3020      	adds	r0, #32
 8006590:	e7e5      	b.n	800655e <__d2b+0x54>
 8006592:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8006596:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800659a:	6030      	str	r0, [r6, #0]
 800659c:	6918      	ldr	r0, [r3, #16]
 800659e:	f7ff fdb9 	bl	8006114 <__hi0bits>
 80065a2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80065a6:	e7e1      	b.n	800656c <__d2b+0x62>

080065a8 <_sbrk_r>:
 80065a8:	b538      	push	{r3, r4, r5, lr}
 80065aa:	4c06      	ldr	r4, [pc, #24]	; (80065c4 <_sbrk_r+0x1c>)
 80065ac:	2300      	movs	r3, #0
 80065ae:	4605      	mov	r5, r0
 80065b0:	4608      	mov	r0, r1
 80065b2:	6023      	str	r3, [r4, #0]
 80065b4:	f000 fdb0 	bl	8007118 <_sbrk>
 80065b8:	1c43      	adds	r3, r0, #1
 80065ba:	d102      	bne.n	80065c2 <_sbrk_r+0x1a>
 80065bc:	6823      	ldr	r3, [r4, #0]
 80065be:	b103      	cbz	r3, 80065c2 <_sbrk_r+0x1a>
 80065c0:	602b      	str	r3, [r5, #0]
 80065c2:	bd38      	pop	{r3, r4, r5, pc}
 80065c4:	2000088c 	.word	0x2000088c

080065c8 <__sread>:
 80065c8:	b510      	push	{r4, lr}
 80065ca:	460c      	mov	r4, r1
 80065cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065d0:	f000 fb54 	bl	8006c7c <_read_r>
 80065d4:	2800      	cmp	r0, #0
 80065d6:	bfab      	itete	ge
 80065d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80065da:	89a3      	ldrhlt	r3, [r4, #12]
 80065dc:	181b      	addge	r3, r3, r0
 80065de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80065e2:	bfac      	ite	ge
 80065e4:	6563      	strge	r3, [r4, #84]	; 0x54
 80065e6:	81a3      	strhlt	r3, [r4, #12]
 80065e8:	bd10      	pop	{r4, pc}

080065ea <__swrite>:
 80065ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065ee:	461f      	mov	r7, r3
 80065f0:	898b      	ldrh	r3, [r1, #12]
 80065f2:	05db      	lsls	r3, r3, #23
 80065f4:	4605      	mov	r5, r0
 80065f6:	460c      	mov	r4, r1
 80065f8:	4616      	mov	r6, r2
 80065fa:	d505      	bpl.n	8006608 <__swrite+0x1e>
 80065fc:	2302      	movs	r3, #2
 80065fe:	2200      	movs	r2, #0
 8006600:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006604:	f000 fafc 	bl	8006c00 <_lseek_r>
 8006608:	89a3      	ldrh	r3, [r4, #12]
 800660a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800660e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006612:	81a3      	strh	r3, [r4, #12]
 8006614:	4632      	mov	r2, r6
 8006616:	463b      	mov	r3, r7
 8006618:	4628      	mov	r0, r5
 800661a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800661e:	f000 b84b 	b.w	80066b8 <_write_r>

08006622 <__sseek>:
 8006622:	b510      	push	{r4, lr}
 8006624:	460c      	mov	r4, r1
 8006626:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800662a:	f000 fae9 	bl	8006c00 <_lseek_r>
 800662e:	1c43      	adds	r3, r0, #1
 8006630:	89a3      	ldrh	r3, [r4, #12]
 8006632:	bf15      	itete	ne
 8006634:	6560      	strne	r0, [r4, #84]	; 0x54
 8006636:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800663a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800663e:	81a3      	strheq	r3, [r4, #12]
 8006640:	bf18      	it	ne
 8006642:	81a3      	strhne	r3, [r4, #12]
 8006644:	bd10      	pop	{r4, pc}

08006646 <__sclose>:
 8006646:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800664a:	f000 b875 	b.w	8006738 <_close_r>

0800664e <__sprint_r>:
 800664e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006652:	6893      	ldr	r3, [r2, #8]
 8006654:	4680      	mov	r8, r0
 8006656:	460f      	mov	r7, r1
 8006658:	4614      	mov	r4, r2
 800665a:	b91b      	cbnz	r3, 8006664 <__sprint_r+0x16>
 800665c:	6053      	str	r3, [r2, #4]
 800665e:	4618      	mov	r0, r3
 8006660:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006664:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 8006666:	049d      	lsls	r5, r3, #18
 8006668:	d523      	bpl.n	80066b2 <__sprint_r+0x64>
 800666a:	6815      	ldr	r5, [r2, #0]
 800666c:	68a0      	ldr	r0, [r4, #8]
 800666e:	3508      	adds	r5, #8
 8006670:	b920      	cbnz	r0, 800667c <__sprint_r+0x2e>
 8006672:	2300      	movs	r3, #0
 8006674:	60a3      	str	r3, [r4, #8]
 8006676:	6063      	str	r3, [r4, #4]
 8006678:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800667c:	f855 6c04 	ldr.w	r6, [r5, #-4]
 8006680:	f855 bc08 	ldr.w	fp, [r5, #-8]
 8006684:	ea4f 0a96 	mov.w	sl, r6, lsr #2
 8006688:	f04f 0900 	mov.w	r9, #0
 800668c:	45ca      	cmp	sl, r9
 800668e:	dc05      	bgt.n	800669c <__sprint_r+0x4e>
 8006690:	68a3      	ldr	r3, [r4, #8]
 8006692:	f026 0603 	bic.w	r6, r6, #3
 8006696:	1b9e      	subs	r6, r3, r6
 8006698:	60a6      	str	r6, [r4, #8]
 800669a:	e7e7      	b.n	800666c <__sprint_r+0x1e>
 800669c:	463a      	mov	r2, r7
 800669e:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 80066a2:	4640      	mov	r0, r8
 80066a4:	f000 f905 	bl	80068b2 <_fputwc_r>
 80066a8:	1c43      	adds	r3, r0, #1
 80066aa:	d0e2      	beq.n	8006672 <__sprint_r+0x24>
 80066ac:	f109 0901 	add.w	r9, r9, #1
 80066b0:	e7ec      	b.n	800668c <__sprint_r+0x3e>
 80066b2:	f000 f939 	bl	8006928 <__sfvwrite_r>
 80066b6:	e7dc      	b.n	8006672 <__sprint_r+0x24>

080066b8 <_write_r>:
 80066b8:	b538      	push	{r3, r4, r5, lr}
 80066ba:	4c07      	ldr	r4, [pc, #28]	; (80066d8 <_write_r+0x20>)
 80066bc:	4605      	mov	r5, r0
 80066be:	4608      	mov	r0, r1
 80066c0:	4611      	mov	r1, r2
 80066c2:	2200      	movs	r2, #0
 80066c4:	6022      	str	r2, [r4, #0]
 80066c6:	461a      	mov	r2, r3
 80066c8:	f7fc fcba 	bl	8003040 <_write>
 80066cc:	1c43      	adds	r3, r0, #1
 80066ce:	d102      	bne.n	80066d6 <_write_r+0x1e>
 80066d0:	6823      	ldr	r3, [r4, #0]
 80066d2:	b103      	cbz	r3, 80066d6 <_write_r+0x1e>
 80066d4:	602b      	str	r3, [r5, #0]
 80066d6:	bd38      	pop	{r3, r4, r5, pc}
 80066d8:	2000088c 	.word	0x2000088c

080066dc <_calloc_r>:
 80066dc:	b510      	push	{r4, lr}
 80066de:	4351      	muls	r1, r2
 80066e0:	f7ff fa64 	bl	8005bac <_malloc_r>
 80066e4:	4604      	mov	r4, r0
 80066e6:	b198      	cbz	r0, 8006710 <_calloc_r+0x34>
 80066e8:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80066ec:	f022 0203 	bic.w	r2, r2, #3
 80066f0:	3a04      	subs	r2, #4
 80066f2:	2a24      	cmp	r2, #36	; 0x24
 80066f4:	d81b      	bhi.n	800672e <_calloc_r+0x52>
 80066f6:	2a13      	cmp	r2, #19
 80066f8:	d917      	bls.n	800672a <_calloc_r+0x4e>
 80066fa:	2100      	movs	r1, #0
 80066fc:	2a1b      	cmp	r2, #27
 80066fe:	6001      	str	r1, [r0, #0]
 8006700:	6041      	str	r1, [r0, #4]
 8006702:	d807      	bhi.n	8006714 <_calloc_r+0x38>
 8006704:	f100 0308 	add.w	r3, r0, #8
 8006708:	2200      	movs	r2, #0
 800670a:	601a      	str	r2, [r3, #0]
 800670c:	605a      	str	r2, [r3, #4]
 800670e:	609a      	str	r2, [r3, #8]
 8006710:	4620      	mov	r0, r4
 8006712:	bd10      	pop	{r4, pc}
 8006714:	2a24      	cmp	r2, #36	; 0x24
 8006716:	6081      	str	r1, [r0, #8]
 8006718:	60c1      	str	r1, [r0, #12]
 800671a:	bf11      	iteee	ne
 800671c:	f100 0310 	addne.w	r3, r0, #16
 8006720:	6101      	streq	r1, [r0, #16]
 8006722:	f100 0318 	addeq.w	r3, r0, #24
 8006726:	6141      	streq	r1, [r0, #20]
 8006728:	e7ee      	b.n	8006708 <_calloc_r+0x2c>
 800672a:	4603      	mov	r3, r0
 800672c:	e7ec      	b.n	8006708 <_calloc_r+0x2c>
 800672e:	2100      	movs	r1, #0
 8006730:	f7ff fc55 	bl	8005fde <memset>
 8006734:	e7ec      	b.n	8006710 <_calloc_r+0x34>
	...

08006738 <_close_r>:
 8006738:	b538      	push	{r3, r4, r5, lr}
 800673a:	4c06      	ldr	r4, [pc, #24]	; (8006754 <_close_r+0x1c>)
 800673c:	2300      	movs	r3, #0
 800673e:	4605      	mov	r5, r0
 8006740:	4608      	mov	r0, r1
 8006742:	6023      	str	r3, [r4, #0]
 8006744:	f000 fcc0 	bl	80070c8 <_close>
 8006748:	1c43      	adds	r3, r0, #1
 800674a:	d102      	bne.n	8006752 <_close_r+0x1a>
 800674c:	6823      	ldr	r3, [r4, #0]
 800674e:	b103      	cbz	r3, 8006752 <_close_r+0x1a>
 8006750:	602b      	str	r3, [r5, #0]
 8006752:	bd38      	pop	{r3, r4, r5, pc}
 8006754:	2000088c 	.word	0x2000088c

08006758 <_fclose_r>:
 8006758:	b570      	push	{r4, r5, r6, lr}
 800675a:	4605      	mov	r5, r0
 800675c:	460c      	mov	r4, r1
 800675e:	b911      	cbnz	r1, 8006766 <_fclose_r+0xe>
 8006760:	2600      	movs	r6, #0
 8006762:	4630      	mov	r0, r6
 8006764:	bd70      	pop	{r4, r5, r6, pc}
 8006766:	b118      	cbz	r0, 8006770 <_fclose_r+0x18>
 8006768:	6983      	ldr	r3, [r0, #24]
 800676a:	b90b      	cbnz	r3, 8006770 <_fclose_r+0x18>
 800676c:	f7fe ffe8 	bl	8005740 <__sinit>
 8006770:	4b2c      	ldr	r3, [pc, #176]	; (8006824 <_fclose_r+0xcc>)
 8006772:	429c      	cmp	r4, r3
 8006774:	d114      	bne.n	80067a0 <_fclose_r+0x48>
 8006776:	686c      	ldr	r4, [r5, #4]
 8006778:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800677a:	07d8      	lsls	r0, r3, #31
 800677c:	d405      	bmi.n	800678a <_fclose_r+0x32>
 800677e:	89a3      	ldrh	r3, [r4, #12]
 8006780:	0599      	lsls	r1, r3, #22
 8006782:	d402      	bmi.n	800678a <_fclose_r+0x32>
 8006784:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006786:	f7ff f99b 	bl	8005ac0 <__retarget_lock_acquire_recursive>
 800678a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800678e:	b98b      	cbnz	r3, 80067b4 <_fclose_r+0x5c>
 8006790:	6e66      	ldr	r6, [r4, #100]	; 0x64
 8006792:	f016 0601 	ands.w	r6, r6, #1
 8006796:	d1e3      	bne.n	8006760 <_fclose_r+0x8>
 8006798:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800679a:	f7ff f992 	bl	8005ac2 <__retarget_lock_release_recursive>
 800679e:	e7e0      	b.n	8006762 <_fclose_r+0xa>
 80067a0:	4b21      	ldr	r3, [pc, #132]	; (8006828 <_fclose_r+0xd0>)
 80067a2:	429c      	cmp	r4, r3
 80067a4:	d101      	bne.n	80067aa <_fclose_r+0x52>
 80067a6:	68ac      	ldr	r4, [r5, #8]
 80067a8:	e7e6      	b.n	8006778 <_fclose_r+0x20>
 80067aa:	4b20      	ldr	r3, [pc, #128]	; (800682c <_fclose_r+0xd4>)
 80067ac:	429c      	cmp	r4, r3
 80067ae:	bf08      	it	eq
 80067b0:	68ec      	ldreq	r4, [r5, #12]
 80067b2:	e7e1      	b.n	8006778 <_fclose_r+0x20>
 80067b4:	4621      	mov	r1, r4
 80067b6:	4628      	mov	r0, r5
 80067b8:	f7fe fe9c 	bl	80054f4 <__sflush_r>
 80067bc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80067be:	4606      	mov	r6, r0
 80067c0:	b133      	cbz	r3, 80067d0 <_fclose_r+0x78>
 80067c2:	6a21      	ldr	r1, [r4, #32]
 80067c4:	4628      	mov	r0, r5
 80067c6:	4798      	blx	r3
 80067c8:	2800      	cmp	r0, #0
 80067ca:	bfb8      	it	lt
 80067cc:	f04f 36ff 	movlt.w	r6, #4294967295
 80067d0:	89a3      	ldrh	r3, [r4, #12]
 80067d2:	061a      	lsls	r2, r3, #24
 80067d4:	d503      	bpl.n	80067de <_fclose_r+0x86>
 80067d6:	6921      	ldr	r1, [r4, #16]
 80067d8:	4628      	mov	r0, r5
 80067da:	f7ff f887 	bl	80058ec <_free_r>
 80067de:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80067e0:	b141      	cbz	r1, 80067f4 <_fclose_r+0x9c>
 80067e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80067e6:	4299      	cmp	r1, r3
 80067e8:	d002      	beq.n	80067f0 <_fclose_r+0x98>
 80067ea:	4628      	mov	r0, r5
 80067ec:	f7ff f87e 	bl	80058ec <_free_r>
 80067f0:	2300      	movs	r3, #0
 80067f2:	6363      	str	r3, [r4, #52]	; 0x34
 80067f4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80067f6:	b121      	cbz	r1, 8006802 <_fclose_r+0xaa>
 80067f8:	4628      	mov	r0, r5
 80067fa:	f7ff f877 	bl	80058ec <_free_r>
 80067fe:	2300      	movs	r3, #0
 8006800:	64a3      	str	r3, [r4, #72]	; 0x48
 8006802:	f7fe ff85 	bl	8005710 <__sfp_lock_acquire>
 8006806:	2300      	movs	r3, #0
 8006808:	81a3      	strh	r3, [r4, #12]
 800680a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800680c:	07db      	lsls	r3, r3, #31
 800680e:	d402      	bmi.n	8006816 <_fclose_r+0xbe>
 8006810:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006812:	f7ff f956 	bl	8005ac2 <__retarget_lock_release_recursive>
 8006816:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006818:	f7ff f951 	bl	8005abe <__retarget_lock_close_recursive>
 800681c:	f7fe ff7e 	bl	800571c <__sfp_lock_release>
 8006820:	e79f      	b.n	8006762 <_fclose_r+0xa>
 8006822:	bf00      	nop
 8006824:	08007268 	.word	0x08007268
 8006828:	08007288 	.word	0x08007288
 800682c:	08007248 	.word	0x08007248

08006830 <__fputwc>:
 8006830:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006834:	4680      	mov	r8, r0
 8006836:	460e      	mov	r6, r1
 8006838:	4614      	mov	r4, r2
 800683a:	f000 f9d3 	bl	8006be4 <__locale_mb_cur_max>
 800683e:	2801      	cmp	r0, #1
 8006840:	d11c      	bne.n	800687c <__fputwc+0x4c>
 8006842:	1e73      	subs	r3, r6, #1
 8006844:	2bfe      	cmp	r3, #254	; 0xfe
 8006846:	d819      	bhi.n	800687c <__fputwc+0x4c>
 8006848:	f88d 6004 	strb.w	r6, [sp, #4]
 800684c:	4605      	mov	r5, r0
 800684e:	2700      	movs	r7, #0
 8006850:	f10d 0904 	add.w	r9, sp, #4
 8006854:	42af      	cmp	r7, r5
 8006856:	d020      	beq.n	800689a <__fputwc+0x6a>
 8006858:	68a3      	ldr	r3, [r4, #8]
 800685a:	f817 1009 	ldrb.w	r1, [r7, r9]
 800685e:	3b01      	subs	r3, #1
 8006860:	2b00      	cmp	r3, #0
 8006862:	60a3      	str	r3, [r4, #8]
 8006864:	da04      	bge.n	8006870 <__fputwc+0x40>
 8006866:	69a2      	ldr	r2, [r4, #24]
 8006868:	4293      	cmp	r3, r2
 800686a:	db1a      	blt.n	80068a2 <__fputwc+0x72>
 800686c:	290a      	cmp	r1, #10
 800686e:	d018      	beq.n	80068a2 <__fputwc+0x72>
 8006870:	6823      	ldr	r3, [r4, #0]
 8006872:	1c5a      	adds	r2, r3, #1
 8006874:	6022      	str	r2, [r4, #0]
 8006876:	7019      	strb	r1, [r3, #0]
 8006878:	3701      	adds	r7, #1
 800687a:	e7eb      	b.n	8006854 <__fputwc+0x24>
 800687c:	4632      	mov	r2, r6
 800687e:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 8006882:	a901      	add	r1, sp, #4
 8006884:	4640      	mov	r0, r8
 8006886:	f000 fbe9 	bl	800705c <_wcrtomb_r>
 800688a:	1c42      	adds	r2, r0, #1
 800688c:	4605      	mov	r5, r0
 800688e:	d1de      	bne.n	800684e <__fputwc+0x1e>
 8006890:	89a3      	ldrh	r3, [r4, #12]
 8006892:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006896:	81a3      	strh	r3, [r4, #12]
 8006898:	4606      	mov	r6, r0
 800689a:	4630      	mov	r0, r6
 800689c:	b003      	add	sp, #12
 800689e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80068a2:	4622      	mov	r2, r4
 80068a4:	4640      	mov	r0, r8
 80068a6:	f000 fb7b 	bl	8006fa0 <__swbuf_r>
 80068aa:	1c43      	adds	r3, r0, #1
 80068ac:	d1e4      	bne.n	8006878 <__fputwc+0x48>
 80068ae:	4606      	mov	r6, r0
 80068b0:	e7f3      	b.n	800689a <__fputwc+0x6a>

080068b2 <_fputwc_r>:
 80068b2:	6e53      	ldr	r3, [r2, #100]	; 0x64
 80068b4:	07db      	lsls	r3, r3, #31
 80068b6:	b570      	push	{r4, r5, r6, lr}
 80068b8:	4605      	mov	r5, r0
 80068ba:	460e      	mov	r6, r1
 80068bc:	4614      	mov	r4, r2
 80068be:	d405      	bmi.n	80068cc <_fputwc_r+0x1a>
 80068c0:	8993      	ldrh	r3, [r2, #12]
 80068c2:	0598      	lsls	r0, r3, #22
 80068c4:	d402      	bmi.n	80068cc <_fputwc_r+0x1a>
 80068c6:	6d90      	ldr	r0, [r2, #88]	; 0x58
 80068c8:	f7ff f8fa 	bl	8005ac0 <__retarget_lock_acquire_recursive>
 80068cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068d0:	0499      	lsls	r1, r3, #18
 80068d2:	d406      	bmi.n	80068e2 <_fputwc_r+0x30>
 80068d4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80068d8:	81a3      	strh	r3, [r4, #12]
 80068da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80068dc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80068e0:	6663      	str	r3, [r4, #100]	; 0x64
 80068e2:	4622      	mov	r2, r4
 80068e4:	4628      	mov	r0, r5
 80068e6:	4631      	mov	r1, r6
 80068e8:	f7ff ffa2 	bl	8006830 <__fputwc>
 80068ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80068ee:	07da      	lsls	r2, r3, #31
 80068f0:	4605      	mov	r5, r0
 80068f2:	d405      	bmi.n	8006900 <_fputwc_r+0x4e>
 80068f4:	89a3      	ldrh	r3, [r4, #12]
 80068f6:	059b      	lsls	r3, r3, #22
 80068f8:	d402      	bmi.n	8006900 <_fputwc_r+0x4e>
 80068fa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80068fc:	f7ff f8e1 	bl	8005ac2 <__retarget_lock_release_recursive>
 8006900:	4628      	mov	r0, r5
 8006902:	bd70      	pop	{r4, r5, r6, pc}

08006904 <_fstat_r>:
 8006904:	b538      	push	{r3, r4, r5, lr}
 8006906:	4c07      	ldr	r4, [pc, #28]	; (8006924 <_fstat_r+0x20>)
 8006908:	2300      	movs	r3, #0
 800690a:	4605      	mov	r5, r0
 800690c:	4608      	mov	r0, r1
 800690e:	4611      	mov	r1, r2
 8006910:	6023      	str	r3, [r4, #0]
 8006912:	f000 fbe1 	bl	80070d8 <_fstat>
 8006916:	1c43      	adds	r3, r0, #1
 8006918:	d102      	bne.n	8006920 <_fstat_r+0x1c>
 800691a:	6823      	ldr	r3, [r4, #0]
 800691c:	b103      	cbz	r3, 8006920 <_fstat_r+0x1c>
 800691e:	602b      	str	r3, [r5, #0]
 8006920:	bd38      	pop	{r3, r4, r5, pc}
 8006922:	bf00      	nop
 8006924:	2000088c 	.word	0x2000088c

08006928 <__sfvwrite_r>:
 8006928:	6893      	ldr	r3, [r2, #8]
 800692a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800692e:	4607      	mov	r7, r0
 8006930:	460c      	mov	r4, r1
 8006932:	4690      	mov	r8, r2
 8006934:	b91b      	cbnz	r3, 800693e <__sfvwrite_r+0x16>
 8006936:	2000      	movs	r0, #0
 8006938:	b003      	add	sp, #12
 800693a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800693e:	898b      	ldrh	r3, [r1, #12]
 8006940:	0718      	lsls	r0, r3, #28
 8006942:	d526      	bpl.n	8006992 <__sfvwrite_r+0x6a>
 8006944:	690b      	ldr	r3, [r1, #16]
 8006946:	b323      	cbz	r3, 8006992 <__sfvwrite_r+0x6a>
 8006948:	89a3      	ldrh	r3, [r4, #12]
 800694a:	f8d8 6000 	ldr.w	r6, [r8]
 800694e:	f013 0902 	ands.w	r9, r3, #2
 8006952:	d02d      	beq.n	80069b0 <__sfvwrite_r+0x88>
 8006954:	f04f 0a00 	mov.w	sl, #0
 8006958:	f8df b264 	ldr.w	fp, [pc, #612]	; 8006bc0 <__sfvwrite_r+0x298>
 800695c:	46d1      	mov	r9, sl
 800695e:	f1b9 0f00 	cmp.w	r9, #0
 8006962:	d01f      	beq.n	80069a4 <__sfvwrite_r+0x7c>
 8006964:	45d9      	cmp	r9, fp
 8006966:	464b      	mov	r3, r9
 8006968:	4652      	mov	r2, sl
 800696a:	bf28      	it	cs
 800696c:	465b      	movcs	r3, fp
 800696e:	6a21      	ldr	r1, [r4, #32]
 8006970:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8006972:	4638      	mov	r0, r7
 8006974:	47a8      	blx	r5
 8006976:	2800      	cmp	r0, #0
 8006978:	f340 8089 	ble.w	8006a8e <__sfvwrite_r+0x166>
 800697c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006980:	4482      	add	sl, r0
 8006982:	eba9 0900 	sub.w	r9, r9, r0
 8006986:	1a18      	subs	r0, r3, r0
 8006988:	f8c8 0008 	str.w	r0, [r8, #8]
 800698c:	2800      	cmp	r0, #0
 800698e:	d1e6      	bne.n	800695e <__sfvwrite_r+0x36>
 8006990:	e7d1      	b.n	8006936 <__sfvwrite_r+0xe>
 8006992:	4621      	mov	r1, r4
 8006994:	4638      	mov	r0, r7
 8006996:	f7fd fee3 	bl	8004760 <__swsetup_r>
 800699a:	2800      	cmp	r0, #0
 800699c:	d0d4      	beq.n	8006948 <__sfvwrite_r+0x20>
 800699e:	f04f 30ff 	mov.w	r0, #4294967295
 80069a2:	e7c9      	b.n	8006938 <__sfvwrite_r+0x10>
 80069a4:	f8d6 a000 	ldr.w	sl, [r6]
 80069a8:	f8d6 9004 	ldr.w	r9, [r6, #4]
 80069ac:	3608      	adds	r6, #8
 80069ae:	e7d6      	b.n	800695e <__sfvwrite_r+0x36>
 80069b0:	f013 0301 	ands.w	r3, r3, #1
 80069b4:	d043      	beq.n	8006a3e <__sfvwrite_r+0x116>
 80069b6:	4648      	mov	r0, r9
 80069b8:	46ca      	mov	sl, r9
 80069ba:	46cb      	mov	fp, r9
 80069bc:	f1bb 0f00 	cmp.w	fp, #0
 80069c0:	f000 80d9 	beq.w	8006b76 <__sfvwrite_r+0x24e>
 80069c4:	b950      	cbnz	r0, 80069dc <__sfvwrite_r+0xb4>
 80069c6:	465a      	mov	r2, fp
 80069c8:	210a      	movs	r1, #10
 80069ca:	4650      	mov	r0, sl
 80069cc:	f7f9 fc00 	bl	80001d0 <memchr>
 80069d0:	2800      	cmp	r0, #0
 80069d2:	f000 80d5 	beq.w	8006b80 <__sfvwrite_r+0x258>
 80069d6:	3001      	adds	r0, #1
 80069d8:	eba0 090a 	sub.w	r9, r0, sl
 80069dc:	6820      	ldr	r0, [r4, #0]
 80069de:	6921      	ldr	r1, [r4, #16]
 80069e0:	6962      	ldr	r2, [r4, #20]
 80069e2:	45d9      	cmp	r9, fp
 80069e4:	464b      	mov	r3, r9
 80069e6:	bf28      	it	cs
 80069e8:	465b      	movcs	r3, fp
 80069ea:	4288      	cmp	r0, r1
 80069ec:	f240 80cb 	bls.w	8006b86 <__sfvwrite_r+0x25e>
 80069f0:	68a5      	ldr	r5, [r4, #8]
 80069f2:	4415      	add	r5, r2
 80069f4:	42ab      	cmp	r3, r5
 80069f6:	f340 80c6 	ble.w	8006b86 <__sfvwrite_r+0x25e>
 80069fa:	4651      	mov	r1, sl
 80069fc:	462a      	mov	r2, r5
 80069fe:	f000 f923 	bl	8006c48 <memmove>
 8006a02:	6823      	ldr	r3, [r4, #0]
 8006a04:	442b      	add	r3, r5
 8006a06:	6023      	str	r3, [r4, #0]
 8006a08:	4621      	mov	r1, r4
 8006a0a:	4638      	mov	r0, r7
 8006a0c:	f7fe fe04 	bl	8005618 <_fflush_r>
 8006a10:	2800      	cmp	r0, #0
 8006a12:	d13c      	bne.n	8006a8e <__sfvwrite_r+0x166>
 8006a14:	ebb9 0905 	subs.w	r9, r9, r5
 8006a18:	f040 80cf 	bne.w	8006bba <__sfvwrite_r+0x292>
 8006a1c:	4621      	mov	r1, r4
 8006a1e:	4638      	mov	r0, r7
 8006a20:	f7fe fdfa 	bl	8005618 <_fflush_r>
 8006a24:	2800      	cmp	r0, #0
 8006a26:	d132      	bne.n	8006a8e <__sfvwrite_r+0x166>
 8006a28:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006a2c:	44aa      	add	sl, r5
 8006a2e:	ebab 0b05 	sub.w	fp, fp, r5
 8006a32:	1b5d      	subs	r5, r3, r5
 8006a34:	f8c8 5008 	str.w	r5, [r8, #8]
 8006a38:	2d00      	cmp	r5, #0
 8006a3a:	d1bf      	bne.n	80069bc <__sfvwrite_r+0x94>
 8006a3c:	e77b      	b.n	8006936 <__sfvwrite_r+0xe>
 8006a3e:	4699      	mov	r9, r3
 8006a40:	469a      	mov	sl, r3
 8006a42:	f1ba 0f00 	cmp.w	sl, #0
 8006a46:	d027      	beq.n	8006a98 <__sfvwrite_r+0x170>
 8006a48:	89a2      	ldrh	r2, [r4, #12]
 8006a4a:	68a5      	ldr	r5, [r4, #8]
 8006a4c:	0591      	lsls	r1, r2, #22
 8006a4e:	d565      	bpl.n	8006b1c <__sfvwrite_r+0x1f4>
 8006a50:	45aa      	cmp	sl, r5
 8006a52:	d33b      	bcc.n	8006acc <__sfvwrite_r+0x1a4>
 8006a54:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006a58:	d036      	beq.n	8006ac8 <__sfvwrite_r+0x1a0>
 8006a5a:	6921      	ldr	r1, [r4, #16]
 8006a5c:	6823      	ldr	r3, [r4, #0]
 8006a5e:	1a5b      	subs	r3, r3, r1
 8006a60:	9301      	str	r3, [sp, #4]
 8006a62:	6963      	ldr	r3, [r4, #20]
 8006a64:	2002      	movs	r0, #2
 8006a66:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006a6a:	fb93 fbf0 	sdiv	fp, r3, r0
 8006a6e:	9b01      	ldr	r3, [sp, #4]
 8006a70:	1c58      	adds	r0, r3, #1
 8006a72:	4450      	add	r0, sl
 8006a74:	4583      	cmp	fp, r0
 8006a76:	bf38      	it	cc
 8006a78:	4683      	movcc	fp, r0
 8006a7a:	0553      	lsls	r3, r2, #21
 8006a7c:	d53e      	bpl.n	8006afc <__sfvwrite_r+0x1d4>
 8006a7e:	4659      	mov	r1, fp
 8006a80:	4638      	mov	r0, r7
 8006a82:	f7ff f893 	bl	8005bac <_malloc_r>
 8006a86:	4605      	mov	r5, r0
 8006a88:	b950      	cbnz	r0, 8006aa0 <__sfvwrite_r+0x178>
 8006a8a:	230c      	movs	r3, #12
 8006a8c:	603b      	str	r3, [r7, #0]
 8006a8e:	89a3      	ldrh	r3, [r4, #12]
 8006a90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a94:	81a3      	strh	r3, [r4, #12]
 8006a96:	e782      	b.n	800699e <__sfvwrite_r+0x76>
 8006a98:	e896 0600 	ldmia.w	r6, {r9, sl}
 8006a9c:	3608      	adds	r6, #8
 8006a9e:	e7d0      	b.n	8006a42 <__sfvwrite_r+0x11a>
 8006aa0:	9a01      	ldr	r2, [sp, #4]
 8006aa2:	6921      	ldr	r1, [r4, #16]
 8006aa4:	f7ff fa90 	bl	8005fc8 <memcpy>
 8006aa8:	89a2      	ldrh	r2, [r4, #12]
 8006aaa:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8006aae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006ab2:	81a2      	strh	r2, [r4, #12]
 8006ab4:	9b01      	ldr	r3, [sp, #4]
 8006ab6:	6125      	str	r5, [r4, #16]
 8006ab8:	441d      	add	r5, r3
 8006aba:	ebab 0303 	sub.w	r3, fp, r3
 8006abe:	6025      	str	r5, [r4, #0]
 8006ac0:	f8c4 b014 	str.w	fp, [r4, #20]
 8006ac4:	4655      	mov	r5, sl
 8006ac6:	60a3      	str	r3, [r4, #8]
 8006ac8:	45aa      	cmp	sl, r5
 8006aca:	d200      	bcs.n	8006ace <__sfvwrite_r+0x1a6>
 8006acc:	4655      	mov	r5, sl
 8006ace:	462a      	mov	r2, r5
 8006ad0:	4649      	mov	r1, r9
 8006ad2:	6820      	ldr	r0, [r4, #0]
 8006ad4:	f000 f8b8 	bl	8006c48 <memmove>
 8006ad8:	68a3      	ldr	r3, [r4, #8]
 8006ada:	1b5b      	subs	r3, r3, r5
 8006adc:	60a3      	str	r3, [r4, #8]
 8006ade:	6823      	ldr	r3, [r4, #0]
 8006ae0:	441d      	add	r5, r3
 8006ae2:	6025      	str	r5, [r4, #0]
 8006ae4:	4655      	mov	r5, sl
 8006ae6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006aea:	44a9      	add	r9, r5
 8006aec:	ebaa 0a05 	sub.w	sl, sl, r5
 8006af0:	1b5d      	subs	r5, r3, r5
 8006af2:	f8c8 5008 	str.w	r5, [r8, #8]
 8006af6:	2d00      	cmp	r5, #0
 8006af8:	d1a3      	bne.n	8006a42 <__sfvwrite_r+0x11a>
 8006afa:	e71c      	b.n	8006936 <__sfvwrite_r+0xe>
 8006afc:	465a      	mov	r2, fp
 8006afe:	4638      	mov	r0, r7
 8006b00:	f000 f8ce 	bl	8006ca0 <_realloc_r>
 8006b04:	4605      	mov	r5, r0
 8006b06:	2800      	cmp	r0, #0
 8006b08:	d1d4      	bne.n	8006ab4 <__sfvwrite_r+0x18c>
 8006b0a:	6921      	ldr	r1, [r4, #16]
 8006b0c:	4638      	mov	r0, r7
 8006b0e:	f7fe feed 	bl	80058ec <_free_r>
 8006b12:	89a3      	ldrh	r3, [r4, #12]
 8006b14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b18:	81a3      	strh	r3, [r4, #12]
 8006b1a:	e7b6      	b.n	8006a8a <__sfvwrite_r+0x162>
 8006b1c:	6820      	ldr	r0, [r4, #0]
 8006b1e:	6923      	ldr	r3, [r4, #16]
 8006b20:	4298      	cmp	r0, r3
 8006b22:	d802      	bhi.n	8006b2a <__sfvwrite_r+0x202>
 8006b24:	6962      	ldr	r2, [r4, #20]
 8006b26:	4592      	cmp	sl, r2
 8006b28:	d215      	bcs.n	8006b56 <__sfvwrite_r+0x22e>
 8006b2a:	4555      	cmp	r5, sl
 8006b2c:	bf28      	it	cs
 8006b2e:	4655      	movcs	r5, sl
 8006b30:	462a      	mov	r2, r5
 8006b32:	4649      	mov	r1, r9
 8006b34:	f000 f888 	bl	8006c48 <memmove>
 8006b38:	68a3      	ldr	r3, [r4, #8]
 8006b3a:	6822      	ldr	r2, [r4, #0]
 8006b3c:	1b5b      	subs	r3, r3, r5
 8006b3e:	442a      	add	r2, r5
 8006b40:	60a3      	str	r3, [r4, #8]
 8006b42:	6022      	str	r2, [r4, #0]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d1ce      	bne.n	8006ae6 <__sfvwrite_r+0x1be>
 8006b48:	4621      	mov	r1, r4
 8006b4a:	4638      	mov	r0, r7
 8006b4c:	f7fe fd64 	bl	8005618 <_fflush_r>
 8006b50:	2800      	cmp	r0, #0
 8006b52:	d0c8      	beq.n	8006ae6 <__sfvwrite_r+0x1be>
 8006b54:	e79b      	b.n	8006a8e <__sfvwrite_r+0x166>
 8006b56:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8006b5a:	4553      	cmp	r3, sl
 8006b5c:	bf28      	it	cs
 8006b5e:	4653      	movcs	r3, sl
 8006b60:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8006b62:	fb93 f3f2 	sdiv	r3, r3, r2
 8006b66:	6a21      	ldr	r1, [r4, #32]
 8006b68:	4353      	muls	r3, r2
 8006b6a:	4638      	mov	r0, r7
 8006b6c:	464a      	mov	r2, r9
 8006b6e:	47a8      	blx	r5
 8006b70:	1e05      	subs	r5, r0, #0
 8006b72:	dcb8      	bgt.n	8006ae6 <__sfvwrite_r+0x1be>
 8006b74:	e78b      	b.n	8006a8e <__sfvwrite_r+0x166>
 8006b76:	e896 0c00 	ldmia.w	r6, {sl, fp}
 8006b7a:	2000      	movs	r0, #0
 8006b7c:	3608      	adds	r6, #8
 8006b7e:	e71d      	b.n	80069bc <__sfvwrite_r+0x94>
 8006b80:	f10b 0901 	add.w	r9, fp, #1
 8006b84:	e72a      	b.n	80069dc <__sfvwrite_r+0xb4>
 8006b86:	4293      	cmp	r3, r2
 8006b88:	db09      	blt.n	8006b9e <__sfvwrite_r+0x276>
 8006b8a:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8006b8c:	6a21      	ldr	r1, [r4, #32]
 8006b8e:	4613      	mov	r3, r2
 8006b90:	4638      	mov	r0, r7
 8006b92:	4652      	mov	r2, sl
 8006b94:	47a8      	blx	r5
 8006b96:	1e05      	subs	r5, r0, #0
 8006b98:	f73f af3c 	bgt.w	8006a14 <__sfvwrite_r+0xec>
 8006b9c:	e777      	b.n	8006a8e <__sfvwrite_r+0x166>
 8006b9e:	461a      	mov	r2, r3
 8006ba0:	4651      	mov	r1, sl
 8006ba2:	9301      	str	r3, [sp, #4]
 8006ba4:	f000 f850 	bl	8006c48 <memmove>
 8006ba8:	9b01      	ldr	r3, [sp, #4]
 8006baa:	68a2      	ldr	r2, [r4, #8]
 8006bac:	1ad2      	subs	r2, r2, r3
 8006bae:	60a2      	str	r2, [r4, #8]
 8006bb0:	6822      	ldr	r2, [r4, #0]
 8006bb2:	441a      	add	r2, r3
 8006bb4:	6022      	str	r2, [r4, #0]
 8006bb6:	461d      	mov	r5, r3
 8006bb8:	e72c      	b.n	8006a14 <__sfvwrite_r+0xec>
 8006bba:	2001      	movs	r0, #1
 8006bbc:	e734      	b.n	8006a28 <__sfvwrite_r+0x100>
 8006bbe:	bf00      	nop
 8006bc0:	7ffffc00 	.word	0x7ffffc00

08006bc4 <_isatty_r>:
 8006bc4:	b538      	push	{r3, r4, r5, lr}
 8006bc6:	4c06      	ldr	r4, [pc, #24]	; (8006be0 <_isatty_r+0x1c>)
 8006bc8:	2300      	movs	r3, #0
 8006bca:	4605      	mov	r5, r0
 8006bcc:	4608      	mov	r0, r1
 8006bce:	6023      	str	r3, [r4, #0]
 8006bd0:	f000 fa8a 	bl	80070e8 <_isatty>
 8006bd4:	1c43      	adds	r3, r0, #1
 8006bd6:	d102      	bne.n	8006bde <_isatty_r+0x1a>
 8006bd8:	6823      	ldr	r3, [r4, #0]
 8006bda:	b103      	cbz	r3, 8006bde <_isatty_r+0x1a>
 8006bdc:	602b      	str	r3, [r5, #0]
 8006bde:	bd38      	pop	{r3, r4, r5, pc}
 8006be0:	2000088c 	.word	0x2000088c

08006be4 <__locale_mb_cur_max>:
 8006be4:	4b04      	ldr	r3, [pc, #16]	; (8006bf8 <__locale_mb_cur_max+0x14>)
 8006be6:	4a05      	ldr	r2, [pc, #20]	; (8006bfc <__locale_mb_cur_max+0x18>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	6a1b      	ldr	r3, [r3, #32]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	bf08      	it	eq
 8006bf0:	4613      	moveq	r3, r2
 8006bf2:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 8006bf6:	4770      	bx	lr
 8006bf8:	20000004 	.word	0x20000004
 8006bfc:	20000508 	.word	0x20000508

08006c00 <_lseek_r>:
 8006c00:	b538      	push	{r3, r4, r5, lr}
 8006c02:	4c07      	ldr	r4, [pc, #28]	; (8006c20 <_lseek_r+0x20>)
 8006c04:	4605      	mov	r5, r0
 8006c06:	4608      	mov	r0, r1
 8006c08:	4611      	mov	r1, r2
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	6022      	str	r2, [r4, #0]
 8006c0e:	461a      	mov	r2, r3
 8006c10:	f000 fa72 	bl	80070f8 <_lseek>
 8006c14:	1c43      	adds	r3, r0, #1
 8006c16:	d102      	bne.n	8006c1e <_lseek_r+0x1e>
 8006c18:	6823      	ldr	r3, [r4, #0]
 8006c1a:	b103      	cbz	r3, 8006c1e <_lseek_r+0x1e>
 8006c1c:	602b      	str	r3, [r5, #0]
 8006c1e:	bd38      	pop	{r3, r4, r5, pc}
 8006c20:	2000088c 	.word	0x2000088c

08006c24 <__ascii_mbtowc>:
 8006c24:	b082      	sub	sp, #8
 8006c26:	b901      	cbnz	r1, 8006c2a <__ascii_mbtowc+0x6>
 8006c28:	a901      	add	r1, sp, #4
 8006c2a:	b142      	cbz	r2, 8006c3e <__ascii_mbtowc+0x1a>
 8006c2c:	b14b      	cbz	r3, 8006c42 <__ascii_mbtowc+0x1e>
 8006c2e:	7813      	ldrb	r3, [r2, #0]
 8006c30:	600b      	str	r3, [r1, #0]
 8006c32:	7812      	ldrb	r2, [r2, #0]
 8006c34:	1c10      	adds	r0, r2, #0
 8006c36:	bf18      	it	ne
 8006c38:	2001      	movne	r0, #1
 8006c3a:	b002      	add	sp, #8
 8006c3c:	4770      	bx	lr
 8006c3e:	4610      	mov	r0, r2
 8006c40:	e7fb      	b.n	8006c3a <__ascii_mbtowc+0x16>
 8006c42:	f06f 0001 	mvn.w	r0, #1
 8006c46:	e7f8      	b.n	8006c3a <__ascii_mbtowc+0x16>

08006c48 <memmove>:
 8006c48:	4288      	cmp	r0, r1
 8006c4a:	b510      	push	{r4, lr}
 8006c4c:	eb01 0302 	add.w	r3, r1, r2
 8006c50:	d803      	bhi.n	8006c5a <memmove+0x12>
 8006c52:	1e42      	subs	r2, r0, #1
 8006c54:	4299      	cmp	r1, r3
 8006c56:	d10c      	bne.n	8006c72 <memmove+0x2a>
 8006c58:	bd10      	pop	{r4, pc}
 8006c5a:	4298      	cmp	r0, r3
 8006c5c:	d2f9      	bcs.n	8006c52 <memmove+0xa>
 8006c5e:	1881      	adds	r1, r0, r2
 8006c60:	1ad2      	subs	r2, r2, r3
 8006c62:	42d3      	cmn	r3, r2
 8006c64:	d100      	bne.n	8006c68 <memmove+0x20>
 8006c66:	bd10      	pop	{r4, pc}
 8006c68:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006c6c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006c70:	e7f7      	b.n	8006c62 <memmove+0x1a>
 8006c72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c76:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006c7a:	e7eb      	b.n	8006c54 <memmove+0xc>

08006c7c <_read_r>:
 8006c7c:	b538      	push	{r3, r4, r5, lr}
 8006c7e:	4c07      	ldr	r4, [pc, #28]	; (8006c9c <_read_r+0x20>)
 8006c80:	4605      	mov	r5, r0
 8006c82:	4608      	mov	r0, r1
 8006c84:	4611      	mov	r1, r2
 8006c86:	2200      	movs	r2, #0
 8006c88:	6022      	str	r2, [r4, #0]
 8006c8a:	461a      	mov	r2, r3
 8006c8c:	f000 fa3c 	bl	8007108 <_read>
 8006c90:	1c43      	adds	r3, r0, #1
 8006c92:	d102      	bne.n	8006c9a <_read_r+0x1e>
 8006c94:	6823      	ldr	r3, [r4, #0]
 8006c96:	b103      	cbz	r3, 8006c9a <_read_r+0x1e>
 8006c98:	602b      	str	r3, [r5, #0]
 8006c9a:	bd38      	pop	{r3, r4, r5, pc}
 8006c9c:	2000088c 	.word	0x2000088c

08006ca0 <_realloc_r>:
 8006ca0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ca4:	4682      	mov	sl, r0
 8006ca6:	460c      	mov	r4, r1
 8006ca8:	b929      	cbnz	r1, 8006cb6 <_realloc_r+0x16>
 8006caa:	4611      	mov	r1, r2
 8006cac:	b003      	add	sp, #12
 8006cae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cb2:	f7fe bf7b 	b.w	8005bac <_malloc_r>
 8006cb6:	9201      	str	r2, [sp, #4]
 8006cb8:	f7ff f99a 	bl	8005ff0 <__malloc_lock>
 8006cbc:	9a01      	ldr	r2, [sp, #4]
 8006cbe:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8006cc2:	f102 080b 	add.w	r8, r2, #11
 8006cc6:	f1b8 0f16 	cmp.w	r8, #22
 8006cca:	f1a4 0908 	sub.w	r9, r4, #8
 8006cce:	f025 0603 	bic.w	r6, r5, #3
 8006cd2:	d90a      	bls.n	8006cea <_realloc_r+0x4a>
 8006cd4:	f038 0807 	bics.w	r8, r8, #7
 8006cd8:	d509      	bpl.n	8006cee <_realloc_r+0x4e>
 8006cda:	230c      	movs	r3, #12
 8006cdc:	f8ca 3000 	str.w	r3, [sl]
 8006ce0:	2700      	movs	r7, #0
 8006ce2:	4638      	mov	r0, r7
 8006ce4:	b003      	add	sp, #12
 8006ce6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cea:	f04f 0810 	mov.w	r8, #16
 8006cee:	4590      	cmp	r8, r2
 8006cf0:	d3f3      	bcc.n	8006cda <_realloc_r+0x3a>
 8006cf2:	45b0      	cmp	r8, r6
 8006cf4:	f340 8145 	ble.w	8006f82 <_realloc_r+0x2e2>
 8006cf8:	4ba8      	ldr	r3, [pc, #672]	; (8006f9c <_realloc_r+0x2fc>)
 8006cfa:	f8d3 e008 	ldr.w	lr, [r3, #8]
 8006cfe:	eb09 0106 	add.w	r1, r9, r6
 8006d02:	4571      	cmp	r1, lr
 8006d04:	469b      	mov	fp, r3
 8006d06:	684b      	ldr	r3, [r1, #4]
 8006d08:	d005      	beq.n	8006d16 <_realloc_r+0x76>
 8006d0a:	f023 0001 	bic.w	r0, r3, #1
 8006d0e:	4408      	add	r0, r1
 8006d10:	6840      	ldr	r0, [r0, #4]
 8006d12:	07c7      	lsls	r7, r0, #31
 8006d14:	d447      	bmi.n	8006da6 <_realloc_r+0x106>
 8006d16:	f023 0303 	bic.w	r3, r3, #3
 8006d1a:	4571      	cmp	r1, lr
 8006d1c:	eb06 0703 	add.w	r7, r6, r3
 8006d20:	d119      	bne.n	8006d56 <_realloc_r+0xb6>
 8006d22:	f108 0010 	add.w	r0, r8, #16
 8006d26:	4287      	cmp	r7, r0
 8006d28:	db3f      	blt.n	8006daa <_realloc_r+0x10a>
 8006d2a:	eb09 0308 	add.w	r3, r9, r8
 8006d2e:	eba7 0708 	sub.w	r7, r7, r8
 8006d32:	f047 0701 	orr.w	r7, r7, #1
 8006d36:	f8cb 3008 	str.w	r3, [fp, #8]
 8006d3a:	605f      	str	r7, [r3, #4]
 8006d3c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8006d40:	f003 0301 	and.w	r3, r3, #1
 8006d44:	ea43 0308 	orr.w	r3, r3, r8
 8006d48:	f844 3c04 	str.w	r3, [r4, #-4]
 8006d4c:	4650      	mov	r0, sl
 8006d4e:	f7ff f955 	bl	8005ffc <__malloc_unlock>
 8006d52:	4627      	mov	r7, r4
 8006d54:	e7c5      	b.n	8006ce2 <_realloc_r+0x42>
 8006d56:	45b8      	cmp	r8, r7
 8006d58:	dc27      	bgt.n	8006daa <_realloc_r+0x10a>
 8006d5a:	68cb      	ldr	r3, [r1, #12]
 8006d5c:	688a      	ldr	r2, [r1, #8]
 8006d5e:	60d3      	str	r3, [r2, #12]
 8006d60:	609a      	str	r2, [r3, #8]
 8006d62:	eba7 0008 	sub.w	r0, r7, r8
 8006d66:	280f      	cmp	r0, #15
 8006d68:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8006d6c:	eb09 0207 	add.w	r2, r9, r7
 8006d70:	f240 8109 	bls.w	8006f86 <_realloc_r+0x2e6>
 8006d74:	eb09 0108 	add.w	r1, r9, r8
 8006d78:	f003 0301 	and.w	r3, r3, #1
 8006d7c:	ea43 0308 	orr.w	r3, r3, r8
 8006d80:	f040 0001 	orr.w	r0, r0, #1
 8006d84:	f8c9 3004 	str.w	r3, [r9, #4]
 8006d88:	6048      	str	r0, [r1, #4]
 8006d8a:	6853      	ldr	r3, [r2, #4]
 8006d8c:	f043 0301 	orr.w	r3, r3, #1
 8006d90:	6053      	str	r3, [r2, #4]
 8006d92:	3108      	adds	r1, #8
 8006d94:	4650      	mov	r0, sl
 8006d96:	f7fe fda9 	bl	80058ec <_free_r>
 8006d9a:	4650      	mov	r0, sl
 8006d9c:	f7ff f92e 	bl	8005ffc <__malloc_unlock>
 8006da0:	f109 0708 	add.w	r7, r9, #8
 8006da4:	e79d      	b.n	8006ce2 <_realloc_r+0x42>
 8006da6:	2300      	movs	r3, #0
 8006da8:	4619      	mov	r1, r3
 8006daa:	07e8      	lsls	r0, r5, #31
 8006dac:	f100 8084 	bmi.w	8006eb8 <_realloc_r+0x218>
 8006db0:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8006db4:	eba9 0505 	sub.w	r5, r9, r5
 8006db8:	6868      	ldr	r0, [r5, #4]
 8006dba:	f020 0003 	bic.w	r0, r0, #3
 8006dbe:	4430      	add	r0, r6
 8006dc0:	2900      	cmp	r1, #0
 8006dc2:	d076      	beq.n	8006eb2 <_realloc_r+0x212>
 8006dc4:	4571      	cmp	r1, lr
 8006dc6:	d150      	bne.n	8006e6a <_realloc_r+0x1ca>
 8006dc8:	4403      	add	r3, r0
 8006dca:	f108 0110 	add.w	r1, r8, #16
 8006dce:	428b      	cmp	r3, r1
 8006dd0:	db6f      	blt.n	8006eb2 <_realloc_r+0x212>
 8006dd2:	462f      	mov	r7, r5
 8006dd4:	68ea      	ldr	r2, [r5, #12]
 8006dd6:	f857 1f08 	ldr.w	r1, [r7, #8]!
 8006dda:	60ca      	str	r2, [r1, #12]
 8006ddc:	6091      	str	r1, [r2, #8]
 8006dde:	1f32      	subs	r2, r6, #4
 8006de0:	2a24      	cmp	r2, #36	; 0x24
 8006de2:	d83b      	bhi.n	8006e5c <_realloc_r+0x1bc>
 8006de4:	2a13      	cmp	r2, #19
 8006de6:	d936      	bls.n	8006e56 <_realloc_r+0x1b6>
 8006de8:	6821      	ldr	r1, [r4, #0]
 8006dea:	60a9      	str	r1, [r5, #8]
 8006dec:	6861      	ldr	r1, [r4, #4]
 8006dee:	60e9      	str	r1, [r5, #12]
 8006df0:	2a1b      	cmp	r2, #27
 8006df2:	d81c      	bhi.n	8006e2e <_realloc_r+0x18e>
 8006df4:	f105 0210 	add.w	r2, r5, #16
 8006df8:	f104 0108 	add.w	r1, r4, #8
 8006dfc:	6808      	ldr	r0, [r1, #0]
 8006dfe:	6010      	str	r0, [r2, #0]
 8006e00:	6848      	ldr	r0, [r1, #4]
 8006e02:	6050      	str	r0, [r2, #4]
 8006e04:	6889      	ldr	r1, [r1, #8]
 8006e06:	6091      	str	r1, [r2, #8]
 8006e08:	eb05 0208 	add.w	r2, r5, r8
 8006e0c:	eba3 0308 	sub.w	r3, r3, r8
 8006e10:	f043 0301 	orr.w	r3, r3, #1
 8006e14:	f8cb 2008 	str.w	r2, [fp, #8]
 8006e18:	6053      	str	r3, [r2, #4]
 8006e1a:	686b      	ldr	r3, [r5, #4]
 8006e1c:	f003 0301 	and.w	r3, r3, #1
 8006e20:	ea43 0308 	orr.w	r3, r3, r8
 8006e24:	606b      	str	r3, [r5, #4]
 8006e26:	4650      	mov	r0, sl
 8006e28:	f7ff f8e8 	bl	8005ffc <__malloc_unlock>
 8006e2c:	e759      	b.n	8006ce2 <_realloc_r+0x42>
 8006e2e:	68a1      	ldr	r1, [r4, #8]
 8006e30:	6129      	str	r1, [r5, #16]
 8006e32:	68e1      	ldr	r1, [r4, #12]
 8006e34:	6169      	str	r1, [r5, #20]
 8006e36:	2a24      	cmp	r2, #36	; 0x24
 8006e38:	bf01      	itttt	eq
 8006e3a:	6922      	ldreq	r2, [r4, #16]
 8006e3c:	61aa      	streq	r2, [r5, #24]
 8006e3e:	6960      	ldreq	r0, [r4, #20]
 8006e40:	61e8      	streq	r0, [r5, #28]
 8006e42:	bf19      	ittee	ne
 8006e44:	f105 0218 	addne.w	r2, r5, #24
 8006e48:	f104 0110 	addne.w	r1, r4, #16
 8006e4c:	f105 0220 	addeq.w	r2, r5, #32
 8006e50:	f104 0118 	addeq.w	r1, r4, #24
 8006e54:	e7d2      	b.n	8006dfc <_realloc_r+0x15c>
 8006e56:	463a      	mov	r2, r7
 8006e58:	4621      	mov	r1, r4
 8006e5a:	e7cf      	b.n	8006dfc <_realloc_r+0x15c>
 8006e5c:	4621      	mov	r1, r4
 8006e5e:	4638      	mov	r0, r7
 8006e60:	9301      	str	r3, [sp, #4]
 8006e62:	f7ff fef1 	bl	8006c48 <memmove>
 8006e66:	9b01      	ldr	r3, [sp, #4]
 8006e68:	e7ce      	b.n	8006e08 <_realloc_r+0x168>
 8006e6a:	18c7      	adds	r7, r0, r3
 8006e6c:	45b8      	cmp	r8, r7
 8006e6e:	dc20      	bgt.n	8006eb2 <_realloc_r+0x212>
 8006e70:	68cb      	ldr	r3, [r1, #12]
 8006e72:	688a      	ldr	r2, [r1, #8]
 8006e74:	60d3      	str	r3, [r2, #12]
 8006e76:	609a      	str	r2, [r3, #8]
 8006e78:	4628      	mov	r0, r5
 8006e7a:	68eb      	ldr	r3, [r5, #12]
 8006e7c:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8006e80:	60d3      	str	r3, [r2, #12]
 8006e82:	609a      	str	r2, [r3, #8]
 8006e84:	1f32      	subs	r2, r6, #4
 8006e86:	2a24      	cmp	r2, #36	; 0x24
 8006e88:	d842      	bhi.n	8006f10 <_realloc_r+0x270>
 8006e8a:	2a13      	cmp	r2, #19
 8006e8c:	d93e      	bls.n	8006f0c <_realloc_r+0x26c>
 8006e8e:	6823      	ldr	r3, [r4, #0]
 8006e90:	60ab      	str	r3, [r5, #8]
 8006e92:	6863      	ldr	r3, [r4, #4]
 8006e94:	60eb      	str	r3, [r5, #12]
 8006e96:	2a1b      	cmp	r2, #27
 8006e98:	d824      	bhi.n	8006ee4 <_realloc_r+0x244>
 8006e9a:	f105 0010 	add.w	r0, r5, #16
 8006e9e:	f104 0308 	add.w	r3, r4, #8
 8006ea2:	681a      	ldr	r2, [r3, #0]
 8006ea4:	6002      	str	r2, [r0, #0]
 8006ea6:	685a      	ldr	r2, [r3, #4]
 8006ea8:	6042      	str	r2, [r0, #4]
 8006eaa:	689b      	ldr	r3, [r3, #8]
 8006eac:	6083      	str	r3, [r0, #8]
 8006eae:	46a9      	mov	r9, r5
 8006eb0:	e757      	b.n	8006d62 <_realloc_r+0xc2>
 8006eb2:	4580      	cmp	r8, r0
 8006eb4:	4607      	mov	r7, r0
 8006eb6:	dddf      	ble.n	8006e78 <_realloc_r+0x1d8>
 8006eb8:	4611      	mov	r1, r2
 8006eba:	4650      	mov	r0, sl
 8006ebc:	f7fe fe76 	bl	8005bac <_malloc_r>
 8006ec0:	4607      	mov	r7, r0
 8006ec2:	2800      	cmp	r0, #0
 8006ec4:	d0af      	beq.n	8006e26 <_realloc_r+0x186>
 8006ec6:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8006eca:	f023 0301 	bic.w	r3, r3, #1
 8006ece:	f1a0 0208 	sub.w	r2, r0, #8
 8006ed2:	444b      	add	r3, r9
 8006ed4:	429a      	cmp	r2, r3
 8006ed6:	d11f      	bne.n	8006f18 <_realloc_r+0x278>
 8006ed8:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8006edc:	f027 0703 	bic.w	r7, r7, #3
 8006ee0:	4437      	add	r7, r6
 8006ee2:	e73e      	b.n	8006d62 <_realloc_r+0xc2>
 8006ee4:	68a3      	ldr	r3, [r4, #8]
 8006ee6:	612b      	str	r3, [r5, #16]
 8006ee8:	68e3      	ldr	r3, [r4, #12]
 8006eea:	616b      	str	r3, [r5, #20]
 8006eec:	2a24      	cmp	r2, #36	; 0x24
 8006eee:	bf01      	itttt	eq
 8006ef0:	6923      	ldreq	r3, [r4, #16]
 8006ef2:	61ab      	streq	r3, [r5, #24]
 8006ef4:	6962      	ldreq	r2, [r4, #20]
 8006ef6:	61ea      	streq	r2, [r5, #28]
 8006ef8:	bf19      	ittee	ne
 8006efa:	f105 0018 	addne.w	r0, r5, #24
 8006efe:	f104 0310 	addne.w	r3, r4, #16
 8006f02:	f105 0020 	addeq.w	r0, r5, #32
 8006f06:	f104 0318 	addeq.w	r3, r4, #24
 8006f0a:	e7ca      	b.n	8006ea2 <_realloc_r+0x202>
 8006f0c:	4623      	mov	r3, r4
 8006f0e:	e7c8      	b.n	8006ea2 <_realloc_r+0x202>
 8006f10:	4621      	mov	r1, r4
 8006f12:	f7ff fe99 	bl	8006c48 <memmove>
 8006f16:	e7ca      	b.n	8006eae <_realloc_r+0x20e>
 8006f18:	1f32      	subs	r2, r6, #4
 8006f1a:	2a24      	cmp	r2, #36	; 0x24
 8006f1c:	d82d      	bhi.n	8006f7a <_realloc_r+0x2da>
 8006f1e:	2a13      	cmp	r2, #19
 8006f20:	d928      	bls.n	8006f74 <_realloc_r+0x2d4>
 8006f22:	6823      	ldr	r3, [r4, #0]
 8006f24:	6003      	str	r3, [r0, #0]
 8006f26:	6863      	ldr	r3, [r4, #4]
 8006f28:	6043      	str	r3, [r0, #4]
 8006f2a:	2a1b      	cmp	r2, #27
 8006f2c:	d80e      	bhi.n	8006f4c <_realloc_r+0x2ac>
 8006f2e:	f100 0308 	add.w	r3, r0, #8
 8006f32:	f104 0208 	add.w	r2, r4, #8
 8006f36:	6811      	ldr	r1, [r2, #0]
 8006f38:	6019      	str	r1, [r3, #0]
 8006f3a:	6851      	ldr	r1, [r2, #4]
 8006f3c:	6059      	str	r1, [r3, #4]
 8006f3e:	6892      	ldr	r2, [r2, #8]
 8006f40:	609a      	str	r2, [r3, #8]
 8006f42:	4621      	mov	r1, r4
 8006f44:	4650      	mov	r0, sl
 8006f46:	f7fe fcd1 	bl	80058ec <_free_r>
 8006f4a:	e76c      	b.n	8006e26 <_realloc_r+0x186>
 8006f4c:	68a3      	ldr	r3, [r4, #8]
 8006f4e:	6083      	str	r3, [r0, #8]
 8006f50:	68e3      	ldr	r3, [r4, #12]
 8006f52:	60c3      	str	r3, [r0, #12]
 8006f54:	2a24      	cmp	r2, #36	; 0x24
 8006f56:	bf01      	itttt	eq
 8006f58:	6923      	ldreq	r3, [r4, #16]
 8006f5a:	6103      	streq	r3, [r0, #16]
 8006f5c:	6961      	ldreq	r1, [r4, #20]
 8006f5e:	6141      	streq	r1, [r0, #20]
 8006f60:	bf19      	ittee	ne
 8006f62:	f100 0310 	addne.w	r3, r0, #16
 8006f66:	f104 0210 	addne.w	r2, r4, #16
 8006f6a:	f100 0318 	addeq.w	r3, r0, #24
 8006f6e:	f104 0218 	addeq.w	r2, r4, #24
 8006f72:	e7e0      	b.n	8006f36 <_realloc_r+0x296>
 8006f74:	4603      	mov	r3, r0
 8006f76:	4622      	mov	r2, r4
 8006f78:	e7dd      	b.n	8006f36 <_realloc_r+0x296>
 8006f7a:	4621      	mov	r1, r4
 8006f7c:	f7ff fe64 	bl	8006c48 <memmove>
 8006f80:	e7df      	b.n	8006f42 <_realloc_r+0x2a2>
 8006f82:	4637      	mov	r7, r6
 8006f84:	e6ed      	b.n	8006d62 <_realloc_r+0xc2>
 8006f86:	f003 0301 	and.w	r3, r3, #1
 8006f8a:	431f      	orrs	r7, r3
 8006f8c:	f8c9 7004 	str.w	r7, [r9, #4]
 8006f90:	6853      	ldr	r3, [r2, #4]
 8006f92:	f043 0301 	orr.w	r3, r3, #1
 8006f96:	6053      	str	r3, [r2, #4]
 8006f98:	e6ff      	b.n	8006d9a <_realloc_r+0xfa>
 8006f9a:	bf00      	nop
 8006f9c:	200000f8 	.word	0x200000f8

08006fa0 <__swbuf_r>:
 8006fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fa2:	460e      	mov	r6, r1
 8006fa4:	4614      	mov	r4, r2
 8006fa6:	4605      	mov	r5, r0
 8006fa8:	b118      	cbz	r0, 8006fb2 <__swbuf_r+0x12>
 8006faa:	6983      	ldr	r3, [r0, #24]
 8006fac:	b90b      	cbnz	r3, 8006fb2 <__swbuf_r+0x12>
 8006fae:	f7fe fbc7 	bl	8005740 <__sinit>
 8006fb2:	4b27      	ldr	r3, [pc, #156]	; (8007050 <__swbuf_r+0xb0>)
 8006fb4:	429c      	cmp	r4, r3
 8006fb6:	d12f      	bne.n	8007018 <__swbuf_r+0x78>
 8006fb8:	686c      	ldr	r4, [r5, #4]
 8006fba:	69a3      	ldr	r3, [r4, #24]
 8006fbc:	60a3      	str	r3, [r4, #8]
 8006fbe:	89a3      	ldrh	r3, [r4, #12]
 8006fc0:	0719      	lsls	r1, r3, #28
 8006fc2:	d533      	bpl.n	800702c <__swbuf_r+0x8c>
 8006fc4:	6923      	ldr	r3, [r4, #16]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d030      	beq.n	800702c <__swbuf_r+0x8c>
 8006fca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006fce:	b2f6      	uxtb	r6, r6
 8006fd0:	049a      	lsls	r2, r3, #18
 8006fd2:	4637      	mov	r7, r6
 8006fd4:	d534      	bpl.n	8007040 <__swbuf_r+0xa0>
 8006fd6:	6923      	ldr	r3, [r4, #16]
 8006fd8:	6820      	ldr	r0, [r4, #0]
 8006fda:	1ac0      	subs	r0, r0, r3
 8006fdc:	6963      	ldr	r3, [r4, #20]
 8006fde:	4298      	cmp	r0, r3
 8006fe0:	db04      	blt.n	8006fec <__swbuf_r+0x4c>
 8006fe2:	4621      	mov	r1, r4
 8006fe4:	4628      	mov	r0, r5
 8006fe6:	f7fe fb17 	bl	8005618 <_fflush_r>
 8006fea:	bb28      	cbnz	r0, 8007038 <__swbuf_r+0x98>
 8006fec:	68a3      	ldr	r3, [r4, #8]
 8006fee:	3b01      	subs	r3, #1
 8006ff0:	60a3      	str	r3, [r4, #8]
 8006ff2:	6823      	ldr	r3, [r4, #0]
 8006ff4:	1c5a      	adds	r2, r3, #1
 8006ff6:	6022      	str	r2, [r4, #0]
 8006ff8:	701e      	strb	r6, [r3, #0]
 8006ffa:	6963      	ldr	r3, [r4, #20]
 8006ffc:	3001      	adds	r0, #1
 8006ffe:	4298      	cmp	r0, r3
 8007000:	d004      	beq.n	800700c <__swbuf_r+0x6c>
 8007002:	89a3      	ldrh	r3, [r4, #12]
 8007004:	07db      	lsls	r3, r3, #31
 8007006:	d519      	bpl.n	800703c <__swbuf_r+0x9c>
 8007008:	2e0a      	cmp	r6, #10
 800700a:	d117      	bne.n	800703c <__swbuf_r+0x9c>
 800700c:	4621      	mov	r1, r4
 800700e:	4628      	mov	r0, r5
 8007010:	f7fe fb02 	bl	8005618 <_fflush_r>
 8007014:	b190      	cbz	r0, 800703c <__swbuf_r+0x9c>
 8007016:	e00f      	b.n	8007038 <__swbuf_r+0x98>
 8007018:	4b0e      	ldr	r3, [pc, #56]	; (8007054 <__swbuf_r+0xb4>)
 800701a:	429c      	cmp	r4, r3
 800701c:	d101      	bne.n	8007022 <__swbuf_r+0x82>
 800701e:	68ac      	ldr	r4, [r5, #8]
 8007020:	e7cb      	b.n	8006fba <__swbuf_r+0x1a>
 8007022:	4b0d      	ldr	r3, [pc, #52]	; (8007058 <__swbuf_r+0xb8>)
 8007024:	429c      	cmp	r4, r3
 8007026:	bf08      	it	eq
 8007028:	68ec      	ldreq	r4, [r5, #12]
 800702a:	e7c6      	b.n	8006fba <__swbuf_r+0x1a>
 800702c:	4621      	mov	r1, r4
 800702e:	4628      	mov	r0, r5
 8007030:	f7fd fb96 	bl	8004760 <__swsetup_r>
 8007034:	2800      	cmp	r0, #0
 8007036:	d0c8      	beq.n	8006fca <__swbuf_r+0x2a>
 8007038:	f04f 37ff 	mov.w	r7, #4294967295
 800703c:	4638      	mov	r0, r7
 800703e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007040:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007044:	81a3      	strh	r3, [r4, #12]
 8007046:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007048:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800704c:	6663      	str	r3, [r4, #100]	; 0x64
 800704e:	e7c2      	b.n	8006fd6 <__swbuf_r+0x36>
 8007050:	08007268 	.word	0x08007268
 8007054:	08007288 	.word	0x08007288
 8007058:	08007248 	.word	0x08007248

0800705c <_wcrtomb_r>:
 800705c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800705e:	4605      	mov	r5, r0
 8007060:	b085      	sub	sp, #20
 8007062:	461e      	mov	r6, r3
 8007064:	460f      	mov	r7, r1
 8007066:	4c0f      	ldr	r4, [pc, #60]	; (80070a4 <_wcrtomb_r+0x48>)
 8007068:	b991      	cbnz	r1, 8007090 <_wcrtomb_r+0x34>
 800706a:	6822      	ldr	r2, [r4, #0]
 800706c:	490e      	ldr	r1, [pc, #56]	; (80070a8 <_wcrtomb_r+0x4c>)
 800706e:	6a12      	ldr	r2, [r2, #32]
 8007070:	2a00      	cmp	r2, #0
 8007072:	bf08      	it	eq
 8007074:	460a      	moveq	r2, r1
 8007076:	a901      	add	r1, sp, #4
 8007078:	f8d2 40e0 	ldr.w	r4, [r2, #224]	; 0xe0
 800707c:	463a      	mov	r2, r7
 800707e:	47a0      	blx	r4
 8007080:	1c43      	adds	r3, r0, #1
 8007082:	bf01      	itttt	eq
 8007084:	2300      	moveq	r3, #0
 8007086:	6033      	streq	r3, [r6, #0]
 8007088:	238a      	moveq	r3, #138	; 0x8a
 800708a:	602b      	streq	r3, [r5, #0]
 800708c:	b005      	add	sp, #20
 800708e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007090:	6824      	ldr	r4, [r4, #0]
 8007092:	4f05      	ldr	r7, [pc, #20]	; (80070a8 <_wcrtomb_r+0x4c>)
 8007094:	6a24      	ldr	r4, [r4, #32]
 8007096:	2c00      	cmp	r4, #0
 8007098:	bf08      	it	eq
 800709a:	463c      	moveq	r4, r7
 800709c:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
 80070a0:	e7ed      	b.n	800707e <_wcrtomb_r+0x22>
 80070a2:	bf00      	nop
 80070a4:	20000004 	.word	0x20000004
 80070a8:	20000508 	.word	0x20000508

080070ac <__ascii_wctomb>:
 80070ac:	b149      	cbz	r1, 80070c2 <__ascii_wctomb+0x16>
 80070ae:	2aff      	cmp	r2, #255	; 0xff
 80070b0:	bf85      	ittet	hi
 80070b2:	238a      	movhi	r3, #138	; 0x8a
 80070b4:	6003      	strhi	r3, [r0, #0]
 80070b6:	700a      	strbls	r2, [r1, #0]
 80070b8:	f04f 30ff 	movhi.w	r0, #4294967295
 80070bc:	bf98      	it	ls
 80070be:	2001      	movls	r0, #1
 80070c0:	4770      	bx	lr
 80070c2:	4608      	mov	r0, r1
 80070c4:	4770      	bx	lr
	...

080070c8 <_close>:
 80070c8:	4b02      	ldr	r3, [pc, #8]	; (80070d4 <_close+0xc>)
 80070ca:	2258      	movs	r2, #88	; 0x58
 80070cc:	601a      	str	r2, [r3, #0]
 80070ce:	f04f 30ff 	mov.w	r0, #4294967295
 80070d2:	4770      	bx	lr
 80070d4:	2000088c 	.word	0x2000088c

080070d8 <_fstat>:
 80070d8:	4b02      	ldr	r3, [pc, #8]	; (80070e4 <_fstat+0xc>)
 80070da:	2258      	movs	r2, #88	; 0x58
 80070dc:	601a      	str	r2, [r3, #0]
 80070de:	f04f 30ff 	mov.w	r0, #4294967295
 80070e2:	4770      	bx	lr
 80070e4:	2000088c 	.word	0x2000088c

080070e8 <_isatty>:
 80070e8:	4b02      	ldr	r3, [pc, #8]	; (80070f4 <_isatty+0xc>)
 80070ea:	2258      	movs	r2, #88	; 0x58
 80070ec:	601a      	str	r2, [r3, #0]
 80070ee:	2000      	movs	r0, #0
 80070f0:	4770      	bx	lr
 80070f2:	bf00      	nop
 80070f4:	2000088c 	.word	0x2000088c

080070f8 <_lseek>:
 80070f8:	4b02      	ldr	r3, [pc, #8]	; (8007104 <_lseek+0xc>)
 80070fa:	2258      	movs	r2, #88	; 0x58
 80070fc:	601a      	str	r2, [r3, #0]
 80070fe:	f04f 30ff 	mov.w	r0, #4294967295
 8007102:	4770      	bx	lr
 8007104:	2000088c 	.word	0x2000088c

08007108 <_read>:
 8007108:	4b02      	ldr	r3, [pc, #8]	; (8007114 <_read+0xc>)
 800710a:	2258      	movs	r2, #88	; 0x58
 800710c:	601a      	str	r2, [r3, #0]
 800710e:	f04f 30ff 	mov.w	r0, #4294967295
 8007112:	4770      	bx	lr
 8007114:	2000088c 	.word	0x2000088c

08007118 <_sbrk>:
 8007118:	4b04      	ldr	r3, [pc, #16]	; (800712c <_sbrk+0x14>)
 800711a:	6819      	ldr	r1, [r3, #0]
 800711c:	4602      	mov	r2, r0
 800711e:	b909      	cbnz	r1, 8007124 <_sbrk+0xc>
 8007120:	4903      	ldr	r1, [pc, #12]	; (8007130 <_sbrk+0x18>)
 8007122:	6019      	str	r1, [r3, #0]
 8007124:	6818      	ldr	r0, [r3, #0]
 8007126:	4402      	add	r2, r0
 8007128:	601a      	str	r2, [r3, #0]
 800712a:	4770      	bx	lr
 800712c:	200006c4 	.word	0x200006c4
 8007130:	20000890 	.word	0x20000890

08007134 <_init>:
 8007134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007136:	bf00      	nop
 8007138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800713a:	bc08      	pop	{r3}
 800713c:	469e      	mov	lr, r3
 800713e:	4770      	bx	lr

08007140 <_fini>:
 8007140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007142:	bf00      	nop
 8007144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007146:	bc08      	pop	{r3}
 8007148:	469e      	mov	lr, r3
 800714a:	4770      	bx	lr
