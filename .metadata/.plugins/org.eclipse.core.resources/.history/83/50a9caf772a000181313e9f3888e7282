/******************************************************************************

* File Name          : LTM022A69B.c
* Author             : Librae
* Last Modified Date : 08/12/2010
* Description        : This file provides the 
						LTM022A69B LCD related functions' declaration.

******************************************************************************/

#include "main.h"
#include "stm32f1xx_hal.h"

#include "LTM022A69B.h"
#include "LCD_lib.h"
#include "KOR_FONT.h"
#include "userDelay.h"

extern SPI_HandleTypeDef hspi1;

unsigned char ArrSeq16[16] = {0,8,1,9,2,10,3,11,4,12,5,13,6,14,7,15};
unsigned char ArrSeq24[36] = { 1, 4, 7,10,13,16,19,22,25,28,31,34,
		                       2, 5, 8,11,14,17,20,23,26,29,32,35,
							   3, 6, 9,12,15,18,21,24,27,30,33,36};

void SPI_Write(uint16_t data)
{
	uint8_t dataBuf[2];
	dataBuf[0] = (uint8_t)(data >> 8);
	dataBuf[1] = (uint8_t)(data);
	HAL_SPI_Transmit(&hspi1, dataBuf, 2, 1000);	
}

void LCD_WRITE_REG(uint16_t index)
{
	LCD_RS_L(); LCD_CS_L();	// RS ; 0 , CS ; 0
	SPI_Write(index);
	LCD_CS_H(); LCD_RS_H(); // RS ; 1 , CS ; 1
}

void LCD_SEND_COMMAND(uint16_t index, uint16_t data)
{
	LCD_RS_L(); LCD_CS_L(); // RS ; 0 , CS ; 0
	SPI_Write(index);
	LCD_CS_H();
	
	LCD_RS_H(); LCD_CS_L(); // RS ; 1 , CS ; 0
	SPI_Write(data);
	LCD_CS_H();
}

void LCD_WRITE_COMMAND(uint16_t index, uint16_t data)
{
	LCD_RS_L();	LCD_CS_L();  // RS ; 0 , CS ; 0
	SPI_Write(index);
	// LCD_CS_H();
	LCD_RS_H();              // RS ; 1 , CS ; 0

	// LCD_CS_L();
	SPI_Write(data);
	LCD_CS_H();              // RS ; 1 , CS ; 1
}

void LCD_WRITE_DATA(uint16_t data)
{
	SPI_Write(data);
}

void lcd_clear_screen(uint16_t color_background)
{
	uint16_t i, j;

	LCD_WRITE_COMMAND(0x210,0x0000); // Horizontal 좌표 시작
	LCD_WRITE_COMMAND(0x211,0x00EF); // 0xEF ; 239
	LCD_WRITE_COMMAND(0x212,0x0000); // Vertical 좌표 시작
	LCD_WRITE_COMMAND(0x213,0x013F); // 0x13F ; 319
	LCD_WRITE_COMMAND(0x200,0x0000); // Ram Addr Horizontal
	LCD_WRITE_COMMAND(0x201,0x0000); // Ram Addr Vertical
	
	LCD_WRITE_REG(0x202);	         //RAM Write index - GRAM에 Write
	
	LCD_RS_H();	LCD_CS_L();          // RS ; 1 , CS ; 0
	
	for(i=0;i<LCD_Y_SIZE;i++)
	{
		for(j=0;j<LCD_X_SIZE;j++)  // LCD_X_SIZE
		{
			LCD_WRITE_DATA(color_background);
		}
	}	
	// LCD_RS_L();
	LCD_CS_H();
}

void lcd_init(void)
{
	LCD_CS_H(); LCD_RS_H();             // RS ; 1 , CS ; 1
	
	//  Reset LCD	
	LCD_RST_L(); delay_ms(20);        // RESET TFT LCD
	LCD_RST_H(); delay_ms(20);

	//register reset
	LCD_WRITE_COMMAND(0x0000,0x0001);	// Oschilliation start
	delay_ms(10);

	//oscillator start
//	LCD_WRITE_COMMAND(0x003A,0x0001);	//Oscillator control (0:oscillator stop, 1: oscillator operation)
//	delay_ms(10);

	/* Power settings */  	
	LCD_WRITE_COMMAND( 0x100, 0x0000 ); /*power supply setup*/	
	LCD_WRITE_COMMAND( 0x101, 0x0000 ); 
	LCD_WRITE_COMMAND( 0x102, 0x3110 ); 
	LCD_WRITE_COMMAND( 0x103, 0xe200 ); 
	LCD_WRITE_COMMAND( 0x110, 0x009d ); 
	LCD_WRITE_COMMAND( 0x111, 0x0022 ); 
	LCD_WRITE_COMMAND( 0x100, 0x0120 ); 
	delay_ms(20);

	LCD_WRITE_COMMAND( 0x100, 0x3120 );
	delay_ms(80);

	/* Display control */   
	LCD_WRITE_COMMAND( 0x001, 0x0100 );
	LCD_WRITE_COMMAND( 0x002, 0x0000 );
	LCD_WRITE_COMMAND( 0x003, 0x1238 );
	LCD_WRITE_COMMAND( 0x006, 0x0000 );
	LCD_WRITE_COMMAND( 0x007, 0x0101 );
	LCD_WRITE_COMMAND( 0x008, 0x0808 );
	LCD_WRITE_COMMAND( 0x009, 0x0000 );
	LCD_WRITE_COMMAND( 0x00b, 0x0000 );
	LCD_WRITE_COMMAND( 0x00c, 0x0000 );
	LCD_WRITE_COMMAND( 0x00d, 0x0018 );

	/* LTPS control settings */   
	LCD_WRITE_COMMAND( 0x012, 0x0000 );
	LCD_WRITE_COMMAND( 0x013, 0x0000 );
	LCD_WRITE_COMMAND( 0x018, 0x0000 );
	LCD_WRITE_COMMAND( 0x019, 0x0000 );

	LCD_WRITE_COMMAND( 0x203, 0x0000 );
	LCD_WRITE_COMMAND( 0x204, 0x0000 );

	LCD_WRITE_COMMAND( 0x210, 0x0000 );
	LCD_WRITE_COMMAND( 0x211, 0x00ef );
	LCD_WRITE_COMMAND( 0x212, 0x0000 );
	LCD_WRITE_COMMAND( 0x213, 0x013f );
	LCD_WRITE_COMMAND( 0x214, 0x0000 );
	LCD_WRITE_COMMAND( 0x215, 0x0000 );
	LCD_WRITE_COMMAND( 0x216, 0x0000 );
	LCD_WRITE_COMMAND( 0x217, 0x0000 );

	// Gray scale settings
	LCD_WRITE_COMMAND( 0x300, 0x5343);
	LCD_WRITE_COMMAND( 0x301, 0x1021);
	LCD_WRITE_COMMAND( 0x302, 0x0003);
	LCD_WRITE_COMMAND( 0x303, 0x0011);
	LCD_WRITE_COMMAND( 0x304, 0x050a);
	LCD_WRITE_COMMAND( 0x305, 0x4342);
	LCD_WRITE_COMMAND( 0x306, 0x1100);
	LCD_WRITE_COMMAND( 0x307, 0x0003);
	LCD_WRITE_COMMAND( 0x308, 0x1201);
	LCD_WRITE_COMMAND( 0x309, 0x050a);

	/* RAM access settings */ 
	LCD_WRITE_COMMAND( 0x400, 0x4027 );
	LCD_WRITE_COMMAND( 0x401, 0x0000 );
	LCD_WRITE_COMMAND( 0x402, 0x0000 );	/* First screen drive position (1) */   	
	LCD_WRITE_COMMAND( 0x403, 0x013f );	/* First screen drive position (2) */   	
	LCD_WRITE_COMMAND( 0x404, 0x0000 );

	LCD_WRITE_COMMAND( 0x200, 0x0000 );
	LCD_WRITE_COMMAND( 0x201, 0x0000 );
	
	LCD_WRITE_COMMAND( 0x100, 0x7120 );
	LCD_WRITE_COMMAND( 0x007, 0x0103 );
	delay_ms(10);
	LCD_WRITE_COMMAND( 0x007, 0x0113 );	
}

/******************************************************************************
* Function Name  : lcd_clear_area
* Description    : clear area,fill
* Input          : color_front:draw a rectangle, fill with color_front
                   x:
                   y:
                   width: rectangle width
                   height:rectangle height
* Output         : None
* Return         : None
******************************************************************************/
void lcd_clear_area(uint16_t color_front,
										uint16_t x,
										uint16_t y,
										uint16_t width,
										uint16_t height)
{
	uint16_t i, j;

	LCD_WRITE_COMMAND( 0x210, x ); 	//x start point
	LCD_WRITE_COMMAND( 0x212, y ); 	//y start point
	LCD_WRITE_COMMAND( 0x211, x + width - 1 );	//x end point
	LCD_WRITE_COMMAND( 0x213, y + height - 1 );	//y end point
		
	LCD_WRITE_COMMAND( 0x200, x );
	LCD_WRITE_COMMAND( 0x201, y );

//	LCD_RS_L();
//	LCD_WRITE_REG(0x202);	//RAM Write index
//	LCD_CS_L();

	LCD_WRITE_REG(0x202);	         //RAM Write index - GRAM에 Write
	LCD_RS_H();	LCD_CS_L();          // RS ; 1 , CS ; 0

	for( i = 0; i < height; i++ )
	{
		for( j = 0; j < width; j++ )
		{
			LCD_WRITE_DATA( color_front );
		}
	}
	LCD_CS_H();
}

/******************************************************************************
* Function Name  : lcd_set_cursor
* Description    : Set cursor
* Input          : x, y
* Output         : None
* Return         : None
******************************************************************************/
void lcd_address_window(long xs,long ys, long xe, long ye)
{
	LCD_WRITE_COMMAND( 0x210, xs );
	LCD_WRITE_COMMAND( 0x211, xe );
	LCD_WRITE_COMMAND( 0x212, ys );
	LCD_WRITE_COMMAND( 0x213, ye );
}

void lcd_fill(long color)
{
	uint32_t index = 76800;

	lcd_address_window(0,0,239,319);
	lcd_set_cursor(0,0);

	// TFT_write(a,b););
	LCD_RS_H();	LCD_CS_L();          // RS ; 1 , CS ; 0
	while(index)
	{
		LCD_WRITE_DATA(color);
		index--;
	}
	LCD_CS_H();
}

void lcd_draw_pixel(long x_pos, long y_pos, long colour)
{
    unsigned char i = 2;

    if((x_pos >= LCD_X_SIZE) || (y_pos >= LCD_Y_SIZE) || (x_pos < 0) || (y_pos < 0))
    {
        return;
    }

    lcd_address_window(x_pos, y_pos, (x_pos + 1), (y_pos + 1));
    lcd_set_cursor(x_pos, y_pos);

	LCD_RS_H();	LCD_CS_L();          // RS ; 1 , CS ; 0
    while(i)
    {
    	LCD_WRITE_DATA(colour);
        i--;
    }
	LCD_CS_H();
}

void lcd_draw_line(long x1,  long y1,  long x2,  long y2,uint32_t colour)
{
    long dx = 0x0000;
    long dy = 0x0000;
    long stepx = 0x0000;
    long stepy = 0x0000;
    long fraction = 0x0000;

    dy = (y2 - y1);
    dx = (x2 - x1);

    if(dy < 0)
    {
        dy = -dy;
        stepy = -1;
    }
    else
    {
        stepy = 1;
    }

    if(dx < 0)
    {
        dx = -dx;
        stepx = -1;
    }
    else
    {
        stepx = 1;
    }

    dx <<= 0x01;
    dy <<= 0x01;

    lcd_draw_pixel(x1, y1, colour);

    if(dx > dy)
    {
        fraction = (dy - (dx >> 1));
        while(x1 != x2)
        {
            if(fraction >= 0)
            {
                y1 += stepy;
                fraction -= dx;
            }
            x1 += stepx;
            fraction += dy;

            lcd_draw_pixel(x1, y1, colour);
        }
    }
    else
    {
        fraction = (dx - (dy >> 1));

        while(y1 != y2)
        {
            if (fraction >= 0)
            {
                x1 += stepx;
                fraction -= dy;
            }
            y1 += stepy;
            fraction += dx;
            lcd_draw_pixel(x1, y1, colour);
        }
    }
}

void lcd_draw_v_line( long x1,  long y1,  long y2, uint32_t colour) // x1,y1에서 y2 픽셀길이
{
    if(y1 > y2)
    {
       swap_values(&y1, &y2);
    }

    while(y2 > (y1 - 1))
    {
    	lcd_draw_pixel(x1, y2, colour);
        y2--;
    }
}

void lcd_draw_h_line( long x1,  long x2,  long y1, uint32_t colour )  // x2, y1에서 x1 픽셀길이
{
    if(x1 > x2)
    {
       swap_values(&x1, &x2);
    }

    while(x2 > (x1 - 1))
    {
    	lcd_draw_pixel(x2, y1, colour);
        x2--;
    }
}

void lcd_draw_triangle( long x1,  long y1,  long x2,  long y2,  long x3,  long y3, short fill,  uint32_t colour)
{
    signed long a = 0;
    signed long b = 0;
    signed long sa = 0;
    signed long sb = 0;
    signed long yp = 0;
    signed long last = 0;
    signed long dx12 = 0;
    signed long dx23 = 0;
    signed long dx13 = 0;
    signed long dy12 = 0;
    signed long dy23 = 0;
    signed long dy13 = 0;

    switch(fill)
    {
        case YES:
        {
            if(y1 > y2)
            {
                swap_values(&y1, &y2);
                swap_values(&x1, &x2);
            }
            if(y2 > y3)
            {
                swap_values(&y3, &y2);
                swap_values(&x3, &x2);
            }
            if(y1 > y2)
            {
                swap_values(&y1, &y2);
                swap_values(&x1, &x2);
            }

            if(y1 == y3)
            {
                a = b = x1;

                if(x2 < a)
                {
                    a = x2;
                }
                else if(x2 > b)
                {
                    b = x2;
                }
                if(x2 < a)
                {
                    a = x3;
                }
                else if(x3 > b)
                {
                    b = x3;
                }

                lcd_draw_h_line(a, (a + (b - (a + 1))), y1, colour);
                return;
            }

            dx12 = (x2 - x1);
            dy12 = (y2 - y1);
            dx13 = (x3 - x1);
            dy13 = (y3 - y1);
            dx23 = (x3 - x2);
            dy23 = (y3 - y2);
            sa = 0,
            sb = 0;

            if(y2 == y3)
            {
                last = y2;
            }
            else
            {
                last = (y2 - 1);
            }

            for(yp = y1; yp <= last; yp++)
            {
                a = (x1 + (sa / dy12));
                b = (x1 + (sb / dy13));
                sa += dx12;
                sb += dx13;
                if(a > b)
                {
                    swap_values(&a, &b);
                }
                lcd_draw_h_line(a, (a + (b - (a + 1))), yp, colour);
            }

            sa = (dx23 * (yp - y2));
            sb = (dx13 * (yp - y1));
            for(; yp <= y3; yp++)
            {
                a = (x2 + (sa / dy23));
                b = (x1 + (sb / dy13));
                sa += dx23;
                sb += dx13;

                if(a > b)
                {
                    swap_values(&a, &b);
                }
                lcd_draw_h_line(a, (a + (b - (a + 1))), yp, colour);
            }


            break;
        }
        default:
        {
        	lcd_draw_line(x1, y1, x2, y2, colour);
        	lcd_draw_line(x2, y2, x3, y3, colour);
        	lcd_draw_line(x3, y3, x1, y1, colour);
            break;
        }
    }
}

void lcd_draw_rectangle( long x1,  long y1,  long x2,  long y2, short fill, unsigned char type, uint32_t colour, uint32_t back_colour)
{
     signed long i = 0x0000;
     signed long xmin = 0x0000;
     signed long xmax = 0x0000;
     signed long ymin = 0x0000;
     signed long ymax = 0x0000;

     switch(fill)
     {
         case YES:
         {
             if(x1 < x2)
             {
                xmin = x1;
                xmax = x2;
             }
             else
             {
                xmin = x2;
                xmax = x1;
             }

             if(y1 < y2)
             {
                ymin = y1;
                ymax = y2;
             }
             else
             {
                ymin = y2;
                ymax = y1;
             }

             for(; xmin <= xmax; ++xmin)
             {
                 for(i = ymin; i <= ymax; ++i)
                 {
                	 lcd_draw_pixel(xmin, i, colour);
                 }
             }

             break;
         }
         default:
         {
        	 lcd_draw_v_line(x1, y1, y2, colour);
        	 lcd_draw_v_line(x2, y1, y2, colour);
        	 lcd_draw_h_line(x1, x2, y1, colour);
        	 lcd_draw_h_line(x1, x2, y2, colour);
             break;
         }
     }

     if(type != SQUARE)
     {
    	 lcd_draw_pixel(x1, y1, back_colour);
    	 lcd_draw_pixel(x1, y2, back_colour);
    	 lcd_draw_pixel(x2, y1, back_colour);
    	 lcd_draw_pixel(x2, y2, back_colour);
     }
}

void lcd_draw_circle( long xc,  long yc,  long radius, short fill, uint32_t colour)
{
     signed long a = 0x0000;
     signed long b = 0x0000;
     signed long p = 0x0000;

     b = radius;
     p = (1 - b);

     do
     {
          switch(fill)
          {
              case YES:
              {
            	  lcd_draw_line((xc - a), (yc + b), (xc + a), (yc + b), colour);
            	  lcd_draw_line((xc - a), (yc - b), (xc + a), (yc - b), colour);
            	  lcd_draw_line((xc - b), (yc + a), (xc + b), (yc + a), colour);
            	  lcd_draw_line((xc - b), (yc - a), (xc + b), (yc - a), colour);
                  break;
              }
              default:
              {
            	  lcd_draw_pixel((xc + a), (yc + b), colour);
            	  lcd_draw_pixel((xc + b), (yc + a), colour);
            	  lcd_draw_pixel((xc - a), (yc + b), colour);
            	  lcd_draw_pixel((xc - b), (yc + a), colour);
            	  lcd_draw_pixel((xc + b), (yc - a), colour);
            	  lcd_draw_pixel((xc + a), (yc - b), colour);
            	  lcd_draw_pixel((xc - a), (yc - b), colour);
            	  lcd_draw_pixel((xc - b), (yc - a), colour);
                  break;
              }
          }

          if(p < 0)
          {
              p += (0x03 + (0x02 * a++));
          }
          else
          {
              p += (0x05 + (0x02 * ((a++) - (b--))));
          }
    }while(a <= b);
}

void lcd_draw_font_pixel( long x_pos,  long y_pos, uint32_t colour, unsigned char pixel_size)
{
     unsigned long i = 0x0000;

  	LCD_RS_H();	LCD_CS_L();          // RS ; 1 , CS ; 0
     for(i = 0x0000; i < (pixel_size * pixel_size); i++)
     {
      	LCD_WRITE_DATA(colour);
     }
  	LCD_CS_H();
}

void lcd_print_char( long x_pos,  long y_pos, unsigned char font_size, uint32_t colour, uint32_t back_colour, char ch,uint8_t LP)
{
     unsigned char i = 0x00;
     unsigned char j = 0x00;
     unsigned long value = 0x0000;
     unsigned char J;
     unsigned char E_Font24[36] = {0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
    		 	 	 	 	 	   0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,
								   0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01,0x01};


     if(font_size==16)
     {
    	 if(LP==landscape)
    	 {
    		 // 12a0 ---------------------------------------------------- 가로 출력.
    		 // (x_pos + 15), (y_pos + 8)
    		 lcd_address_window(x_pos, y_pos, (x_pos + 15), (y_pos + 8));
    		 lcd_set_cursor(x_pos, y_pos);
    		 LCD_WRITE_COMMAND( 0x003, 0x12a0 );  // 12a0  */
    	 }
    	 else
    	 {
    		 // 12b8 ---------------------------------------------------- 세로출력.
    		 // (x_pos + 8), (y_pos + 15)
    		 lcd_address_window(x_pos, y_pos, (x_pos + 8), (y_pos + 15));
     	 	 lcd_set_cursor(x_pos, y_pos);
     	 	 LCD_WRITE_COMMAND( 0x003, 0x12b8 );  // 12b8  */
    	 }
     }
     else if(font_size==24)
     {
    	 if(LP==landscape)
    	 {
    		 // 12a0 ---------------------------------------------------- 가로 출력.
    		 // (x_pos + 23), (y_pos + 12)
    		 lcd_address_window(x_pos, y_pos, (x_pos + 23), (y_pos + 12));
    		 lcd_set_cursor(x_pos, y_pos);
    		 LCD_WRITE_COMMAND( 0x003, 0x12a0 );  // 12a0  */
    	 }
    	 else
    	 {
    		 // 12b8 ---------------------------------------------------- 세로출력.
    		 // (x_pos + 12), (y_pos + 23)
    		 lcd_address_window(x_pos, y_pos, (x_pos + 12), (y_pos + 23));
     	 	 lcd_set_cursor(x_pos, y_pos);
     	 	 LCD_WRITE_COMMAND( 0x003, 0x12b8 );  // 12b8  */
    	 }

     }

  	 LCD_WRITE_REG(0x202);	//RAM Write index

 	 LCD_RS_H();	LCD_CS_L();          // RS ; 1 , CS ; 0
     for(i=0;i<36;i++)
     {
         if(font_size==16)       value = ((E_font16[((unsigned char)ch)][ArrSeq16[i]]));
         else if(font_size==24)  value = ((E_font24[((unsigned char)ch)][ArrSeq24[i]]));
         J=font_size/2;
    	 for(j=0;j<8;j++)
    	 {
    		 if((value>>j)&0x01)
    		 {
    			 LCD_WRITE_DATA(colour);
    		 }
    		 else
    		 {
    			 LCD_WRITE_DATA(back_colour);
    		 }
    	 }
     }
     LCD_CS_H();
     /*
     if(x_pos < font_size)
     {
         x_pos = font_size;
     }

     for(i = 0x00; i < 16; i++)
     {
         for(j = 0x00; j < 0x08; j++)
         {
             value = 0x0000;
             value = ((E_font16[((unsigned char)ch)][i]));
             value = tf[0][i];

             if(((value >> j) & 0x01))
             {
            	 lcd_draw_font_pixel(x_pos, y_pos, colour, font_size);
             }
             else
             {
            	 lcd_draw_font_pixel(x_pos, y_pos, back_colour, font_size);
             }

             y_pos += font_size;
          }
          // y_pos -= (font_size << 0x03);
          x_pos++;
      } */

}

void lcd_print_str(unsigned char x_pos, unsigned char y_pos, unsigned char font_size, uint32_t colour, uint32_t back_colour, char *ch,uint8_t LP)
{
	uint16_t y=0;

	if(font_size==16)
	{
		if(LP==landscape) // 16 pixel
		{
			do
			{
				lcd_print_char(x_pos, y_pos+(y++*8), font_size, colour, back_colour, *ch++,LP);
			}while(*ch);
		}
		else
		{
			do
			{
				lcd_print_char(x_pos, y_pos+(y++*16), font_size, colour, back_colour, *ch++,LP);
			}while(*ch);
		}
	}
	else if(font_size==24)
	{
		if(LP==landscape) // 24 pixel
		{
			do
			{
				lcd_print_char(x_pos, y_pos+(y++*12), font_size, colour, back_colour, *ch++,LP);
			}while(*ch);
		}
		else
		{
			do
			{
				lcd_print_char(x_pos, y_pos+(y++*24), font_size, colour, back_colour, *ch++,LP);
			}while(*ch);
		}
	}
}


void swap_values( long *a,  long *b)
{
    long temp = 0x0000;

    temp = *b;
    *b = *a;
    *a = temp;
}




/******************************************************************************
* Function Name  : lcd_set_cursor
* Description    : Set cursor
* Input          : x, y
* Output         : None
* Return         : None
******************************************************************************/
void lcd_set_cursor(uint16_t x, uint16_t y)
{
	/*if( (x > 320) || (y > 240) )
	{
		return;
	}*/
	LCD_WRITE_COMMAND( 0x200, x );
	LCD_WRITE_COMMAND( 0x201, y );

	LCD_WRITE_REG(0x202);
}

/******************************************************************************
* Function Name  : lcd_display_char
* Description    : ch_asc: ascii code of data. position_x, position_y.
					color_front, color_background.
* Input          : None
* Output         : None
* Return         : None
******************************************************************************/
void lcd_display_char(uint16_t ch_asc,
											uint16_t color_front,
											uint16_t color_background,
											uint16_t postion_x,
											uint16_t postion_y)
{
	uint16_t i, j, b;
	const uint8_t *p = 0;
	
	LCD_WRITE_COMMAND(0x210,postion_x * 8); 	//x start point
	LCD_WRITE_COMMAND(0x212,postion_y * 16); 	//y start point
	LCD_WRITE_COMMAND(0x211,postion_x * 8+7);	//x end point
	LCD_WRITE_COMMAND(0x213,postion_y * 16+15);	//y end point

	LCD_WRITE_COMMAND(0x200,postion_x * 8);
	LCD_WRITE_COMMAND(0x201,postion_y * 16);
		
	LCD_RS_L();
	LCD_WRITE_REG(0x202);	//RAM Write index

	LCD_CS_L();

	p = ascii;
	p += ch_asc * 16;

	for(j=0; j<16; j++)
	{
		b = *(p+j);

		for(i=0; i<8; i++) //각 비트를 분리하여 전경,배경으로 설정.
		{
			if(b & 0x01)
			{
				LCD_WRITE_DATA(color_front);
			}
			else
			{
				LCD_WRITE_DATA(color_background);
			}
			b >>= 1;
		}
	}
	LCD_CS_H();
}


/******************************************************************************
* Function Name  : lcd_display_string
* Description    : *str: address of string data. 
					x: the xth row(0~30).
					y: the yth column(0~20).
					color_front, color_background.
* Input          : None
* Output         : None
* Return         : None
******************************************************************************/
void lcd_display_string(char *str, 
												uint16_t color_front, 
												uint16_t color_background, 
												uint16_t x, 
												uint16_t y)
{
	while (*str) 
	{ 
		lcd_display_char( *str, color_front, color_background, x, y);
		if(++x >= 30)
		{
			x=0;
			if(++y >= 20)
			{
				y=0;
			}
		}
		str ++;
	}
}

void lcd_display_GB2312(uint8_t gb, 
												uint16_t color_front, 
												uint16_t color_background, 
												uint16_t postion_x, 
												uint16_t postion_y)
{
	uint16_t i, j, b;
	uint8_t *p=0;
	
	LCD_WRITE_COMMAND(0x210,postion_x*8); 	//x start point
	LCD_WRITE_COMMAND(0x212,postion_y*16); 	//y start point
	LCD_WRITE_COMMAND(0x211,postion_x*8+7);	//x end point
	LCD_WRITE_COMMAND(0x213,postion_y*16+15);	//y end point

	LCD_WRITE_COMMAND(0x200,postion_x*8);	
	LCD_WRITE_COMMAND(0x201,postion_y*16);

	LCD_RS_L();
	LCD_WRITE_REG(0x202);	//RAM Write index

	LCD_CS_L();

	//p = (unsigned char *) GB2312;
	p += gb * 32;
	for(j=0; j<32; j++)
	{
		b = *(p+j);
		for(i=0; i<8; i++)
		{
			if(b&0x80)
			{
				LCD_WRITE_DATA(color_front);
			}
			else
			{
				LCD_WRITE_DATA(color_background);
			}
			b = b << 1;
		}	
	}
	LCD_CS_H();
}

/******************************************************************************
* Function Name  : lcd_display_image
* Description    : Draw image
* Input          : x, y: image start at x, y. width, length, *img.
* Output         : None
* Return         : None
******************************************************************************/
void lcd_display_image(const char *img, 
												uint16_t x, 
												uint16_t y, 
												uint16_t width, 
												uint16_t height)
{
	uint16_t i, j;
	uint16_t data16;

	LCD_WRITE_COMMAND( 0x210, x ); 	//x start point
	LCD_WRITE_COMMAND( 0x212, y ); 	//y start point
	LCD_WRITE_COMMAND( 0x211, x + width - 1 );	//x end point
	LCD_WRITE_COMMAND( 0x213, y + height - 1 );	//y end point
		
	LCD_WRITE_COMMAND( 0x200, x );
	LCD_WRITE_COMMAND( 0x201, y );

	LCD_RS_L();
	LCD_WRITE_REG(0x202);	//RAM Write index

	LCD_CS_L();

	for(i = 0; i < height; i++)
	{
		for(j = 0; j < width; j++)
		{
			//Be carful of MCU type, big endian or little endian
			//little endian
			data16 = ( *(img + 1) << 8 ) | (*img);
			LCD_WRITE_DATA( data16 );
			img += 2;
		}
	}
	LCD_CS_H();
}

void Swap(uint16_t *a, uint16_t *b)	//for BresenhamLine
{
	uint16_t tmp;
	tmp = *a ;
	*a = *b ;
	*b = tmp ;
} 

/******************************************************************************
* Function Name  : lcd_draw_dot
* Description    : draw dot
* Input          : color, x, y
* Output         : None
* Return         : None
******************************************************************************/
void lcd_draw_dot(uint16_t color_front,
                  uint16_t x,
                  uint16_t y)
{

	lcd_set_cursor(x,y);

	LCD_SEND_COMMAND(0x210,x);
	LCD_SEND_COMMAND(0x212,y);
	LCD_SEND_COMMAND(0x211,x+1);
	LCD_SEND_COMMAND(0x213,y+1);	
	
	// LCD_RS_L();
	LCD_WRITE_REG(0x202);	//RAM Write index

	LCD_RS_H(); LCD_CS_L();
	for(int m=0;m<2;m++) LCD_WRITE_DATA(color_front);
	LCD_CS_H();
}

/******************************************************************************
* Function Name  : lcd_draw_bigdot
* Description    : draw big dot,9 pix.
* Input          : color_frong, x, y
* Output         : None
* Return         : None
******************************************************************************/
void lcd_draw_bigdot(uint16_t color_front,
                     uint16_t x,
                     uint16_t y)
{
    lcd_draw_dot(color_front,x,y);
    lcd_draw_dot(color_front,x,y+1);
    lcd_draw_dot(color_front,x,y-1);

    lcd_draw_dot(color_front,x+1,y);
    lcd_draw_dot(color_front,x+1,y+1);
    lcd_draw_dot(color_front,x+1,y-1);
    
    lcd_draw_dot(color_front,x-1,y);    
    lcd_draw_dot(color_front,x-1,y+1);
    lcd_draw_dot(color_front,x-1,y-1);    
}

uint64_t mypow(uint16_t m,uint16_t n)
{
	uint64_t result=1;	 
	while(n--)result*=m;    
	return result;
}

/**********************************************/
void lcd_display_number(uint16_t x,
                        uint16_t y,
                        uint64_t num,
                        uint16_t num_len)
{         	
	uint16_t t, temp;
	uint16_t enshow = 0;
	
	for(t=0;t<num_len;t++)
	{
		temp=(num/mypow(10,num_len-t-1))%10;
		if(enshow==0&&t<(num_len-1))
		{
			if(temp == 0)
			{
        lcd_display_char(' ',BLACK,WHITE,x+t,y);
				continue;
			}
			else
			{
					enshow = 1; 
			}		 	 
		}
    lcd_display_char(temp+'0',BLACK,WHITE,x+t,y); 
	}
}



void lcd_display_kor_char(
											uint8_t* pKorbuf,
											uint16_t color_front,
											uint16_t color_background,
											uint16_t postion_x,
											uint16_t postion_y)
{
	uint16_t i, j, b, b1;
	const uint8_t *p = 0;

	LCD_WRITE_COMMAND(0x210,postion_x * 8); 	//x start point
	LCD_WRITE_COMMAND(0x211,postion_x * 8+15);	//x end point
	LCD_WRITE_COMMAND(0x212,postion_y * 16); 	//y start point
	LCD_WRITE_COMMAND(0x213,postion_y * 16+15);	//y end point

	LCD_WRITE_COMMAND(0x200,postion_x * 8);
	LCD_WRITE_COMMAND(0x201,postion_y * 16);

	LCD_RS_L();
	LCD_WRITE_REG(0x202);	//RAM Write index

	LCD_CS_L();

	p = pKorbuf;

	for(j=0; j<16; j++)
	{
		b = *(p+j);
		for(i=0; i<8; i++)
		{
			if(b & 0x01)
			{
				LCD_WRITE_DATA(color_front);
			}
			else
			{
				LCD_WRITE_DATA(color_background);
			}
			b = b >> 1;
		}

		b1 = *(p+j+16);
		for(i=0; i<8; i++)
		{
			if(b1 & 0x01)
			{
				LCD_WRITE_DATA(color_front);
			}
			else
			{
				LCD_WRITE_DATA(color_background);
			}
			b1 = b1 >> 1;
		}
	}
	LCD_CS_H();
}

void lcd_display_eng_char(
											uint8_t* pEngbuf,
											uint16_t color_front,
											uint16_t color_background,
											uint16_t postion_x,
											uint16_t postion_y)
{
	uint16_t i, j, b, b1;
	const uint8_t *p = 0;

	LCD_WRITE_COMMAND(0x210, postion_x * 8); 	  //x start point
	LCD_WRITE_COMMAND(0x212, postion_y * 8); 	  //y start point
	LCD_WRITE_COMMAND(0x211, postion_x * 8+15);	  //x end point
	LCD_WRITE_COMMAND(0x213, postion_y * 8+7);	  //y end point
//	LCD_WRITE_COMMAND(0x211, postion_x * 8+7);	  //x end point
//	LCD_WRITE_COMMAND(0x213, postion_y * 16+15);  //y end point

	LCD_WRITE_COMMAND(0x200, postion_x * 16);
	LCD_WRITE_COMMAND(0x201, postion_y * 8);
//	LCD_WRITE_COMMAND(0x200, postion_x * 8);
//	LCD_WRITE_COMMAND(0x201, postion_y * 16);

	LCD_RS_L();
	LCD_WRITE_REG(0x202);	//RAM Write index

	LCD_CS_L();

	p = pEngbuf;

	for(j=0; j<8; j++)
	{
		b = *(p+j);
		for(i=0; i<8; i++)
		{
			if(b & 0x01)
			{
				LCD_WRITE_DATA(color_front);
			}
			else
			{
				LCD_WRITE_DATA(color_background);
			}
			b = b >> 1;
		}

		b1 = *(p+j+8);
		for(i=0; i<8; i++)
		{
			if(b1 & 0x01)
			{
				LCD_WRITE_DATA(color_front);
			}
			else
			{
				LCD_WRITE_DATA(color_background);
			}
			b1 = b1 >> 1;
		}
	}

	LCD_CS_H();
}

uint16_t KSCodeConversion(uint16_t KSSM)	/* convert KSSM(완성형) to KS(조합형) */
{
	uint8_t HB, LB;
	uint16_t index, KS;

	HB = KSSM >> 8;
	LB = KSSM & 0x00FF;

	if(KSSM >= 0xB0A1 && KSSM <= 0xC8FE)
	{
		index = (HB - 0xB0)*94 + LB - 0xA1;
		KS  =  KS_Table[index][0] * 256;
		KS |=  KS_Table[index][1];
		return KS;
	}
	return -1;
}

void Korean(uint16_t nRow,
						uint16_t nCol,
						uint16_t code,
						uint16_t color_front,
						uint16_t color_background)			/* write a Korean character */
{
	unsigned char cho_5bit, joong_5bit, jong_5bit;
	unsigned char cho_bul, joong_bul, jong_bul = 0, i, jong_flag;
	unsigned int ch;
	unsigned char Kbuffer[32] = {0};		// 32 byte Korean font buffer
	// unsigned char x;

	cho_5bit   = table_cho[(code >> 10) & 0x001F];	// get 5bit(14-10) of chosung
	joong_5bit = table_joong[(code >> 5) & 0x001F];	// get 5bit(09-05) of joongsung
	jong_5bit  = table_jong[code & 0x001F];					// get 5bit(04-00) of jongsung

	if(jong_5bit == 0)	// if jongsung not exist
	{
		jong_flag = 0;
		cho_bul = bul_cho1[joong_5bit];

		if((cho_5bit == 1) || (cho_5bit == 16)) joong_bul = 0;
		else
			joong_bul = 1;
	}
	else				// if jongsung exist
	{
		jong_flag = 1;
		cho_bul = bul_cho2[joong_5bit];

		if((cho_5bit == 1) || (cho_5bit == 16)) joong_bul = 2;
		else
			joong_bul = 3;

		jong_bul = bul_jong[joong_5bit];
	}

	ch = cho_bul*20 + cho_5bit;			// get chosung font
	for(i = 0; i < 32; i++) Kbuffer[i] = K_font[ch][i];

	ch = 8*20 + joong_bul*22 + joong_5bit;	// OR joongsung font
	for(i = 0; i < 32; i++) Kbuffer[i] |= K_font[ch][i];

	if(jong_flag)					// OR jongsung font
	{
		ch = 8*20 + 4*22 + jong_bul*28 + jong_5bit;
		for(i = 0; i < 32; i++)
			Kbuffer[i] |= K_font[ch][i];
	}

	lcd_display_kor_char(Kbuffer, color_front, color_background, nCol, nRow);
}


void English(	uint16_t nRow,
							uint16_t nCol,
							uint16_t code,
							uint16_t color_front,
							uint16_t color_background)			/* write a English ASCII character */
{
	unsigned char i;
	unsigned char Kbuffer[16] = {0};

	for(i = 0; i < 16; i++)
	{
		Kbuffer[i] = E_font16[code][i];
	}
	lcd_display_eng_char(Kbuffer, color_front, color_background, nCol, nRow);
}


void lcd_string(uint16_t nLow,
								uint16_t nCol,
								char* str,
								uint16_t color_front,
								uint16_t color_background)
{
	uint8_t ch1;
	uint16_t ch2;

	while(*str) {
		ch1 = *str;
		str++;

		if(ch1 < 0x80) // English ASCII character
		{
//			English(nLow, nCol, ch1, color_front, color_background);
			English(nCol, nLow, ch1, color_front, color_background);
			nCol++;
		}
		else // Korean
		{
			ch2 = (ch1 << 8) + (*str);
			str ++;
			ch2 = KSCodeConversion(ch2);	// convert KSSM(완성형) to KS(조합형)
//			Korean(nLow, nCol, ch2, color_front, color_background);
			Korean(nCol, nLow, ch2, color_front, color_background);
			nCol++;
		}
	}
}

/********************************end of file**************************************/


