
STM_746ZGT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000dd0  080001c8  080001c8  000081c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08000f98  08000f98  00008f98  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08000fa8  08000fa8  00008fa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000fac  08000fac  00008fac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08000fb0  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  20000004  08000fb4  00010004  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000024  08000fb4  00010024  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00010004  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000513c  00000000  00000000  00010034  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000109a  00000000  00000000  00015170  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000388  00000000  00000000  00016210  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000498  00000000  00000000  00016598  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00001db4  00000000  00000000  00016a30  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00001787  00000000  00000000  000187e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      00000082  00000000  00000000  00019f6b  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00000718  00000000  00000000  00019ff0  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_loc    00001138  00000000  00000000  0001a708  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000004 	.word	0x20000004
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08000f80 	.word	0x08000f80

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4903      	ldr	r1, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	08000f80 	.word	0x08000f80
 8000204:	20000008 	.word	0x20000008

08000208 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8000208:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800020a:	f000 fe31 	bl	8000e70 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800020e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  HAL_SYSTICK_IRQHandler();
 8000212:	f000 be0c 	b.w	8000e2e <HAL_SYSTICK_IRQHandler>

08000216 <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000216:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000218:	2003      	movs	r0, #3
 800021a:	f000 fda1 	bl	8000d60 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800021e:	2100      	movs	r1, #0
 8000220:	460a      	mov	r2, r1
 8000222:	f06f 000b 	mvn.w	r0, #11
 8000226:	f000 fdad 	bl	8000d84 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800022a:	2100      	movs	r1, #0
 800022c:	460a      	mov	r2, r1
 800022e:	f06f 000a 	mvn.w	r0, #10
 8000232:	f000 fda7 	bl	8000d84 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8000236:	2100      	movs	r1, #0
 8000238:	460a      	mov	r2, r1
 800023a:	f06f 0009 	mvn.w	r0, #9
 800023e:	f000 fda1 	bl	8000d84 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8000242:	2100      	movs	r1, #0
 8000244:	460a      	mov	r2, r1
 8000246:	f06f 0003 	mvn.w	r0, #3
 800024a:	f000 fd9b 	bl	8000d84 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800024e:	2100      	movs	r1, #0
 8000250:	f04f 30ff 	mov.w	r0, #4294967295
 8000254:	460a      	mov	r2, r1

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000256:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800025a:	f000 bd93 	b.w	8000d84 <HAL_NVIC_SetPriority>
	...

08000260 <MathDelay>:

/* USER CODE END PFP */

/* USER CODE BEGIN 0 */
void	MathDelay()
{
 8000260:	b082      	sub	sp, #8
	volatile uint32_t a;
	double	 d1 = 3.141592/180,d2;

	for(a=0;a<1000000;a++)
 8000262:	2300      	movs	r3, #0
 8000264:	9301      	str	r3, [sp, #4]
 8000266:	9a01      	ldr	r2, [sp, #4]
 8000268:	4b04      	ldr	r3, [pc, #16]	; (800027c <MathDelay+0x1c>)
 800026a:	429a      	cmp	r2, r3
 800026c:	d804      	bhi.n	8000278 <MathDelay+0x18>
	{
		// arm_sin_f32(a*d1);
		d2 = sin(a*d1) * cos(a*d1);
 800026e:	9b01      	ldr	r3, [sp, #4]
 8000270:	9b01      	ldr	r3, [sp, #4]
void	MathDelay()
{
	volatile uint32_t a;
	double	 d1 = 3.141592/180,d2;

	for(a=0;a<1000000;a++)
 8000272:	9b01      	ldr	r3, [sp, #4]
 8000274:	3301      	adds	r3, #1
 8000276:	e7f5      	b.n	8000264 <MathDelay+0x4>
	{
		// arm_sin_f32(a*d1);
		d2 = sin(a*d1) * cos(a*d1);
	}
}
 8000278:	b002      	add	sp, #8
 800027a:	4770      	bx	lr
 800027c:	000f423f 	.word	0x000f423f

08000280 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	b094      	sub	sp, #80	; 0x50

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
 8000284:	2400      	movs	r4, #0
 8000286:	4b25      	ldr	r3, [pc, #148]	; (800031c <SystemClock_Config+0x9c>)
 8000288:	9401      	str	r4, [sp, #4]
 800028a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800028c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000290:	641a      	str	r2, [r3, #64]	; 0x40
 8000292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000294:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000298:	9301      	str	r3, [sp, #4]
 800029a:	9b01      	ldr	r3, [sp, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800029c:	4b20      	ldr	r3, [pc, #128]	; (8000320 <SystemClock_Config+0xa0>)
 800029e:	9402      	str	r4, [sp, #8]
 80002a0:	681a      	ldr	r2, [r3, #0]
 80002a2:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80002a6:	601a      	str	r2, [r3, #0]
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80002ae:	9302      	str	r3, [sp, #8]
 80002b0:	9b02      	ldr	r3, [sp, #8]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002b2:	2301      	movs	r3, #1
 80002b4:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002ba:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002bc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002c0:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002c2:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80002c4:	2604      	movs	r6, #4
  RCC_OscInitStruct.PLL.PLLN = 216;
 80002c6:	23d8      	movs	r3, #216	; 0xd8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80002c8:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 216;
 80002ca:	9311      	str	r3, [sp, #68]	; 0x44

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002cc:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
 80002ce:	9610      	str	r6, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80002d0:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80002d2:	9513      	str	r5, [sp, #76]	; 0x4c
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80002d4:	f000 f8fa 	bl	80004cc <HAL_RCC_OscConfig>

  HAL_PWREx_EnableOverDrive();
 80002d8:	f000 fc0c 	bl	8000af4 <HAL_PWREx_EnableOverDrive>

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002dc:	230f      	movs	r3, #15
 80002de:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80002e0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7);
 80002e4:	2107      	movs	r1, #7

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80002e6:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7);
 80002e8:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80002ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80002ee:	9307      	str	r3, [sp, #28]

  HAL_PWREx_EnableOverDrive();

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002f0:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002f2:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7);
 80002f4:	f000 fab6 	bl	8000864 <HAL_RCC_ClockConfig>

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000000);
 80002f8:	f000 fbe2 	bl	8000ac0 <HAL_RCC_GetHCLKFreq>
 80002fc:	4b09      	ldr	r3, [pc, #36]	; (8000324 <SystemClock_Config+0xa4>)
 80002fe:	fbb0 f0f3 	udiv	r0, r0, r3
 8000302:	f000 fd71 	bl	8000de8 <HAL_SYSTICK_Config>

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000306:	4630      	mov	r0, r6
 8000308:	f000 fd84 	bl	8000e14 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800030c:	f04f 30ff 	mov.w	r0, #4294967295
 8000310:	4621      	mov	r1, r4
 8000312:	4622      	mov	r2, r4
 8000314:	f000 fd36 	bl	8000d84 <HAL_NVIC_SetPriority>
}
 8000318:	b014      	add	sp, #80	; 0x50
 800031a:	bd70      	pop	{r4, r5, r6, pc}
 800031c:	40023800 	.word	0x40023800
 8000320:	40007000 	.word	0x40007000
 8000324:	000f4240 	.word	0x000f4240

08000328 <main>:
	}
}
/* USER CODE END 0 */

int main(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b08c      	sub	sp, #48	; 0x30
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800032c:	2400      	movs	r4, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800032e:	f000 fd94 	bl	8000e5a <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8000332:	f7ff ffa5 	bl	8000280 <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000336:	4b5f      	ldr	r3, [pc, #380]	; (80004b4 <main+0x18c>)
 8000338:	9401      	str	r4, [sp, #4]
 800033a:	6b1a      	ldr	r2, [r3, #48]	; 0x30

  /*Configure GPIO pin : User_Blue_Button_Pin */
  GPIO_InitStruct.Pin = User_Blue_Button_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(User_Blue_Button_GPIO_Port, &GPIO_InitStruct);
 800033c:	485e      	ldr	r0, [pc, #376]	; (80004b8 <main+0x190>)
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800033e:	f042 0204 	orr.w	r2, r2, #4
 8000342:	631a      	str	r2, [r3, #48]	; 0x30
 8000344:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000346:	f002 0204 	and.w	r2, r2, #4
 800034a:	9201      	str	r2, [sp, #4]
 800034c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800034e:	9402      	str	r4, [sp, #8]
 8000350:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000352:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000356:	631a      	str	r2, [r3, #48]	; 0x30
 8000358:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800035a:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800035e:	9202      	str	r2, [sp, #8]
 8000360:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000362:	9403      	str	r4, [sp, #12]
 8000364:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000366:	f042 0201 	orr.w	r2, r2, #1
 800036a:	631a      	str	r2, [r3, #48]	; 0x30
 800036c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800036e:	f002 0201 	and.w	r2, r2, #1
 8000372:	9203      	str	r2, [sp, #12]
 8000374:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000376:	9404      	str	r4, [sp, #16]
 8000378:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800037a:	f042 0202 	orr.w	r2, r2, #2
 800037e:	631a      	str	r2, [r3, #48]	; 0x30
 8000380:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000382:	f002 0202 	and.w	r2, r2, #2
 8000386:	9204      	str	r2, [sp, #16]
 8000388:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800038a:	9405      	str	r4, [sp, #20]
 800038c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800038e:	f042 0208 	orr.w	r2, r2, #8
 8000392:	631a      	str	r2, [r3, #48]	; 0x30
 8000394:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000396:	f002 0208 	and.w	r2, r2, #8
 800039a:	9205      	str	r2, [sp, #20]
 800039c:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800039e:	9406      	str	r4, [sp, #24]
 80003a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80003a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80003a6:	631a      	str	r2, [r3, #48]	; 0x30
 80003a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30

  /*Configure GPIO pin : User_Blue_Button_Pin */
  GPIO_InitStruct.Pin = User_Blue_Button_Pin;
 80003aa:	f44f 5800 	mov.w	r8, #8192	; 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80003ae:	f003 0340 	and.w	r3, r3, #64	; 0x40

  /*Configure GPIO pin : User_Blue_Button_Pin */
  GPIO_InitStruct.Pin = User_Blue_Button_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(User_Blue_Button_GPIO_Port, &GPIO_InitStruct);
 80003b2:	a907      	add	r1, sp, #28

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80003b4:	2602      	movs	r6, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80003b6:	2503      	movs	r5, #3
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80003b8:	9306      	str	r3, [sp, #24]
  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80003ba:	270b      	movs	r7, #11
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80003bc:	9b06      	ldr	r3, [sp, #24]

  /*Configure GPIO pin : User_Blue_Button_Pin */
  GPIO_InitStruct.Pin = User_Blue_Button_Pin;
 80003be:	f8cd 801c 	str.w	r8, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003c2:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003c4:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(User_Blue_Button_GPIO_Port, &GPIO_InitStruct);
 80003c6:	f000 fbcf 	bl	8000b68 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80003ca:	2332      	movs	r3, #50	; 0x32
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003cc:	483a      	ldr	r0, [pc, #232]	; (80004b8 <main+0x190>)
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(User_Blue_Button_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80003ce:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003d0:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(User_Blue_Button_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80003d2:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003d4:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80003d6:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80003d8:	970b      	str	r7, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003da:	f000 fbc5 	bl	8000b68 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80003de:	2386      	movs	r3, #134	; 0x86
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003e0:	4836      	ldr	r0, [pc, #216]	; (80004bc <main+0x194>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : RMII_REF_CK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80003e2:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003e4:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : RMII_REF_CK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80003e6:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003e8:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80003ea:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80003ec:	970b      	str	r7, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003ee:	f000 fbbb 	bl	8000b68 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80003f2:	4833      	ldr	r0, [pc, #204]	; (80004c0 <main+0x198>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80003f4:	f8cd 801c 	str.w	r8, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80003f8:	a907      	add	r1, sp, #28

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LD3_Pin|LD2_Pin | GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003fa:	f04f 0901 	mov.w	r9, #1
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80003fe:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000400:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000402:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000404:	970b      	str	r7, [sp, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000406:	f000 fbaf 	bl	8000b68 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LD3_Pin|LD2_Pin | GPIO_PIN_15;
 800040a:	f24c 0381 	movw	r3, #49281	; 0xc081
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800040e:	482c      	ldr	r0, [pc, #176]	; (80004c0 <main+0x198>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LD3_Pin|LD2_Pin | GPIO_PIN_15;
 8000410:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000412:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LD3_Pin|LD2_Pin | GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000414:	f8cd 9020 	str.w	r9, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000418:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800041a:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800041c:	f000 fba4 	bl	8000b68 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000420:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000424:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000426:	4827      	ldr	r0, [pc, #156]	; (80004c4 <main+0x19c>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000428:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800042a:	2307      	movs	r3, #7
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800042c:	a907      	add	r1, sp, #28
  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800042e:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000430:	f04f 0840 	mov.w	r8, #64	; 0x40
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000434:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000436:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000438:	f000 fb96 	bl	8000b68 <HAL_GPIO_Init>
  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800043c:	4822      	ldr	r0, [pc, #136]	; (80004c8 <main+0x1a0>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800043e:	f8cd 801c 	str.w	r8, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000442:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000444:	f8cd 9020 	str.w	r9, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000448:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800044a:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800044c:	f000 fb8c 	bl	8000b68 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000450:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000452:	481d      	ldr	r0, [pc, #116]	; (80004c8 <main+0x1a0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000454:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000456:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000458:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800045a:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800045c:	f000 fb84 	bl	8000b68 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000460:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000464:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000466:	4815      	ldr	r0, [pc, #84]	; (80004bc <main+0x194>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000468:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800046a:	230a      	movs	r3, #10
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800046c:	a907      	add	r1, sp, #28
  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800046e:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000470:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000472:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000474:	f000 fb78 	bl	8000b68 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000478:	f44f 5320 	mov.w	r3, #10240	; 0x2800
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800047c:	4812      	ldr	r0, [pc, #72]	; (80004c8 <main+0x1a0>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800047e:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000480:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000482:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000484:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000486:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000488:	970b      	str	r7, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800048a:	f000 fb6d 	bl	8000b68 <HAL_GPIO_Init>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800048e:	480c      	ldr	r0, [pc, #48]	; (80004c0 <main+0x198>)
 8000490:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000494:	4622      	mov	r2, r4
 8000496:	f000 fc5b 	bl	8000d50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800049a:	480b      	ldr	r0, [pc, #44]	; (80004c8 <main+0x1a0>)
 800049c:	4641      	mov	r1, r8
 800049e:	4622      	mov	r2, r4
 80004a0:	f000 fc56 	bl	8000d50 <HAL_GPIO_WritePin>
  while (1)
  {
  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0 | LD2_Pin | LD3_Pin | GPIO_PIN_15);
 80004a4:	4806      	ldr	r0, [pc, #24]	; (80004c0 <main+0x198>)
 80004a6:	f24c 0181 	movw	r1, #49281	; 0xc081
 80004aa:	f000 fc55 	bl	8000d58 <HAL_GPIO_TogglePin>
		MathDelay();
 80004ae:	f7ff fed7 	bl	8000260 <MathDelay>
 80004b2:	e7f7      	b.n	80004a4 <main+0x17c>
 80004b4:	40023800 	.word	0x40023800
 80004b8:	40020800 	.word	0x40020800
 80004bc:	40020000 	.word	0x40020000
 80004c0:	40020400 	.word	0x40020400
 80004c4:	40020c00 	.word	0x40020c00
 80004c8:	40021800 	.word	0x40021800

080004cc <HAL_RCC_OscConfig>:
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004cc:	6803      	ldr	r3, [r0, #0]
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80004ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80004d0:	4604      	mov	r4, r0
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004d2:	07d8      	lsls	r0, r3, #31
 80004d4:	d403      	bmi.n	80004de <HAL_RCC_OscConfig+0x12>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80004d6:	6823      	ldr	r3, [r4, #0]
 80004d8:	0799      	lsls	r1, r3, #30
 80004da:	d46d      	bmi.n	80005b8 <HAL_RCC_OscConfig+0xec>
 80004dc:	e0b4      	b.n	8000648 <HAL_RCC_OscConfig+0x17c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80004de:	4b9d      	ldr	r3, [pc, #628]	; (8000754 <HAL_RCC_OscConfig+0x288>)
 80004e0:	689a      	ldr	r2, [r3, #8]
 80004e2:	f002 020c 	and.w	r2, r2, #12
 80004e6:	2a04      	cmp	r2, #4
 80004e8:	d007      	beq.n	80004fa <HAL_RCC_OscConfig+0x2e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80004ea:	689a      	ldr	r2, [r3, #8]
 80004ec:	f002 020c 	and.w	r2, r2, #12
 80004f0:	2a08      	cmp	r2, #8
 80004f2:	d10b      	bne.n	800050c <HAL_RCC_OscConfig+0x40>
 80004f4:	685b      	ldr	r3, [r3, #4]
 80004f6:	025a      	lsls	r2, r3, #9
 80004f8:	d508      	bpl.n	800050c <HAL_RCC_OscConfig+0x40>
    {
	  if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80004fa:	4b96      	ldr	r3, [pc, #600]	; (8000754 <HAL_RCC_OscConfig+0x288>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	039b      	lsls	r3, r3, #14
 8000500:	d5e9      	bpl.n	80004d6 <HAL_RCC_OscConfig+0xa>
 8000502:	6863      	ldr	r3, [r4, #4]
 8000504:	2b00      	cmp	r3, #0
 8000506:	d1e6      	bne.n	80004d6 <HAL_RCC_OscConfig+0xa>
      {
        return HAL_ERROR;
 8000508:	2001      	movs	r0, #1
 800050a:	e1a6      	b.n	800085a <HAL_RCC_OscConfig+0x38e>
      }
    }
    else
    {
      /* Reset HSEON and HSEBYP bits before configuring the HSE --------------*/
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 800050c:	4b91      	ldr	r3, [pc, #580]	; (8000754 <HAL_RCC_OscConfig+0x288>)
 800050e:	681a      	ldr	r2, [r3, #0]
 8000510:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000514:	601a      	str	r2, [r3, #0]
 8000516:	681a      	ldr	r2, [r3, #0]
 8000518:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800051c:	601a      	str	r2, [r3, #0]
 800051e:	681a      	ldr	r2, [r3, #0]
 8000520:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000524:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000526:	f000 fcab 	bl	8000e80 <HAL_GetTick>
 800052a:	4605      	mov	r5, r0
      
      /* Wait till HSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800052c:	4b89      	ldr	r3, [pc, #548]	; (8000754 <HAL_RCC_OscConfig+0x288>)
 800052e:	681a      	ldr	r2, [r3, #0]
 8000530:	0397      	lsls	r7, r2, #14
 8000532:	d506      	bpl.n	8000542 <HAL_RCC_OscConfig+0x76>
      {
        if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000534:	f000 fca4 	bl	8000e80 <HAL_GetTick>
 8000538:	1b40      	subs	r0, r0, r5
 800053a:	2864      	cmp	r0, #100	; 0x64
 800053c:	d9f6      	bls.n	800052c <HAL_RCC_OscConfig+0x60>
        {
          return HAL_TIMEOUT;
 800053e:	2003      	movs	r0, #3
 8000540:	e18b      	b.n	800085a <HAL_RCC_OscConfig+0x38e>
        }
      }
      
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000542:	681a      	ldr	r2, [r3, #0]
 8000544:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000548:	601a      	str	r2, [r3, #0]
 800054a:	6862      	ldr	r2, [r4, #4]
 800054c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8000550:	d103      	bne.n	800055a <HAL_RCC_OscConfig+0x8e>
 8000552:	681a      	ldr	r2, [r3, #0]
 8000554:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000558:	e005      	b.n	8000566 <HAL_RCC_OscConfig+0x9a>
 800055a:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 800055e:	d108      	bne.n	8000572 <HAL_RCC_OscConfig+0xa6>
 8000560:	681a      	ldr	r2, [r3, #0]
 8000562:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000566:	601a      	str	r2, [r3, #0]
 8000568:	681a      	ldr	r2, [r3, #0]
 800056a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800056e:	601a      	str	r2, [r3, #0]
 8000570:	e008      	b.n	8000584 <HAL_RCC_OscConfig+0xb8>
 8000572:	6819      	ldr	r1, [r3, #0]
 8000574:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8000578:	6019      	str	r1, [r3, #0]
 800057a:	6819      	ldr	r1, [r3, #0]
 800057c:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8000580:	6019      	str	r1, [r3, #0]
      
      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000582:	b162      	cbz	r2, 800059e <HAL_RCC_OscConfig+0xd2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000584:	f000 fc7c 	bl	8000e80 <HAL_GetTick>
 8000588:	4605      	mov	r5, r0
        
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800058a:	4b72      	ldr	r3, [pc, #456]	; (8000754 <HAL_RCC_OscConfig+0x288>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	039e      	lsls	r6, r3, #14
 8000590:	d4a1      	bmi.n	80004d6 <HAL_RCC_OscConfig+0xa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000592:	f000 fc75 	bl	8000e80 <HAL_GetTick>
 8000596:	1b40      	subs	r0, r0, r5
 8000598:	2864      	cmp	r0, #100	; 0x64
 800059a:	d9f6      	bls.n	800058a <HAL_RCC_OscConfig+0xbe>
 800059c:	e7cf      	b.n	800053e <HAL_RCC_OscConfig+0x72>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800059e:	f000 fc6f 	bl	8000e80 <HAL_GetTick>
 80005a2:	4605      	mov	r5, r0
        
        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80005a4:	4b6b      	ldr	r3, [pc, #428]	; (8000754 <HAL_RCC_OscConfig+0x288>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	0398      	lsls	r0, r3, #14
 80005aa:	d594      	bpl.n	80004d6 <HAL_RCC_OscConfig+0xa>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80005ac:	f000 fc68 	bl	8000e80 <HAL_GetTick>
 80005b0:	1b40      	subs	r0, r0, r5
 80005b2:	2864      	cmp	r0, #100	; 0x64
 80005b4:	d9f6      	bls.n	80005a4 <HAL_RCC_OscConfig+0xd8>
 80005b6:	e7c2      	b.n	800053e <HAL_RCC_OscConfig+0x72>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80005b8:	4b66      	ldr	r3, [pc, #408]	; (8000754 <HAL_RCC_OscConfig+0x288>)
 80005ba:	689a      	ldr	r2, [r3, #8]
 80005bc:	f012 0f0c 	tst.w	r2, #12
 80005c0:	d007      	beq.n	80005d2 <HAL_RCC_OscConfig+0x106>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80005c2:	689a      	ldr	r2, [r3, #8]
 80005c4:	f002 020c 	and.w	r2, r2, #12
 80005c8:	2a08      	cmp	r2, #8
 80005ca:	d10a      	bne.n	80005e2 <HAL_RCC_OscConfig+0x116>
 80005cc:	685b      	ldr	r3, [r3, #4]
 80005ce:	0259      	lsls	r1, r3, #9
 80005d0:	d407      	bmi.n	80005e2 <HAL_RCC_OscConfig+0x116>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80005d2:	4b60      	ldr	r3, [pc, #384]	; (8000754 <HAL_RCC_OscConfig+0x288>)
 80005d4:	681a      	ldr	r2, [r3, #0]
 80005d6:	0792      	lsls	r2, r2, #30
 80005d8:	d517      	bpl.n	800060a <HAL_RCC_OscConfig+0x13e>
 80005da:	68e2      	ldr	r2, [r4, #12]
 80005dc:	2a01      	cmp	r2, #1
 80005de:	d193      	bne.n	8000508 <HAL_RCC_OscConfig+0x3c>
 80005e0:	e013      	b.n	800060a <HAL_RCC_OscConfig+0x13e>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80005e2:	68e2      	ldr	r2, [r4, #12]
 80005e4:	4b5b      	ldr	r3, [pc, #364]	; (8000754 <HAL_RCC_OscConfig+0x288>)
 80005e6:	b1f2      	cbz	r2, 8000626 <HAL_RCC_OscConfig+0x15a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80005e8:	681a      	ldr	r2, [r3, #0]
 80005ea:	f042 0201 	orr.w	r2, r2, #1
 80005ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80005f0:	f000 fc46 	bl	8000e80 <HAL_GetTick>
 80005f4:	4605      	mov	r5, r0

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80005f6:	4b57      	ldr	r3, [pc, #348]	; (8000754 <HAL_RCC_OscConfig+0x288>)
 80005f8:	681a      	ldr	r2, [r3, #0]
 80005fa:	0797      	lsls	r7, r2, #30
 80005fc:	d405      	bmi.n	800060a <HAL_RCC_OscConfig+0x13e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80005fe:	f000 fc3f 	bl	8000e80 <HAL_GetTick>
 8000602:	1b40      	subs	r0, r0, r5
 8000604:	2864      	cmp	r0, #100	; 0x64
 8000606:	d9f6      	bls.n	80005f6 <HAL_RCC_OscConfig+0x12a>
 8000608:	e799      	b.n	800053e <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800060a:	681a      	ldr	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800060c:	21f8      	movs	r1, #248	; 0xf8
 800060e:	fa91 f1a1 	rbit	r1, r1
 8000612:	6923      	ldr	r3, [r4, #16]
 8000614:	fab1 f181 	clz	r1, r1
 8000618:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800061c:	408b      	lsls	r3, r1
 800061e:	4313      	orrs	r3, r2
 8000620:	4a4c      	ldr	r2, [pc, #304]	; (8000754 <HAL_RCC_OscConfig+0x288>)
 8000622:	6013      	str	r3, [r2, #0]
 8000624:	e010      	b.n	8000648 <HAL_RCC_OscConfig+0x17c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000626:	681a      	ldr	r2, [r3, #0]
 8000628:	f022 0201 	bic.w	r2, r2, #1
 800062c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800062e:	f000 fc27 	bl	8000e80 <HAL_GetTick>
 8000632:	4605      	mov	r5, r0
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000634:	4b47      	ldr	r3, [pc, #284]	; (8000754 <HAL_RCC_OscConfig+0x288>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	079e      	lsls	r6, r3, #30
 800063a:	d505      	bpl.n	8000648 <HAL_RCC_OscConfig+0x17c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800063c:	f000 fc20 	bl	8000e80 <HAL_GetTick>
 8000640:	1b40      	subs	r0, r0, r5
 8000642:	2864      	cmp	r0, #100	; 0x64
 8000644:	d9f6      	bls.n	8000634 <HAL_RCC_OscConfig+0x168>
 8000646:	e77a      	b.n	800053e <HAL_RCC_OscConfig+0x72>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000648:	6823      	ldr	r3, [r4, #0]
 800064a:	071d      	lsls	r5, r3, #28
 800064c:	d403      	bmi.n	8000656 <HAL_RCC_OscConfig+0x18a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800064e:	6823      	ldr	r3, [r4, #0]
 8000650:	0758      	lsls	r0, r3, #29
 8000652:	d567      	bpl.n	8000724 <HAL_RCC_OscConfig+0x258>
 8000654:	e024      	b.n	80006a0 <HAL_RCC_OscConfig+0x1d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000656:	6962      	ldr	r2, [r4, #20]
 8000658:	4b3e      	ldr	r3, [pc, #248]	; (8000754 <HAL_RCC_OscConfig+0x288>)
 800065a:	b182      	cbz	r2, 800067e <HAL_RCC_OscConfig+0x1b2>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800065c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800065e:	f042 0201 	orr.w	r2, r2, #1
 8000662:	675a      	str	r2, [r3, #116]	; 0x74
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000664:	f000 fc0c 	bl	8000e80 <HAL_GetTick>
 8000668:	4605      	mov	r5, r0
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800066a:	4b3a      	ldr	r3, [pc, #232]	; (8000754 <HAL_RCC_OscConfig+0x288>)
 800066c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800066e:	0799      	lsls	r1, r3, #30
 8000670:	d4ed      	bmi.n	800064e <HAL_RCC_OscConfig+0x182>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000672:	f000 fc05 	bl	8000e80 <HAL_GetTick>
 8000676:	1b40      	subs	r0, r0, r5
 8000678:	2864      	cmp	r0, #100	; 0x64
 800067a:	d9f6      	bls.n	800066a <HAL_RCC_OscConfig+0x19e>
 800067c:	e75f      	b.n	800053e <HAL_RCC_OscConfig+0x72>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800067e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8000680:	f022 0201 	bic.w	r2, r2, #1
 8000684:	675a      	str	r2, [r3, #116]	; 0x74
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000686:	f000 fbfb 	bl	8000e80 <HAL_GetTick>
 800068a:	4605      	mov	r5, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800068c:	4b31      	ldr	r3, [pc, #196]	; (8000754 <HAL_RCC_OscConfig+0x288>)
 800068e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000690:	079a      	lsls	r2, r3, #30
 8000692:	d5dc      	bpl.n	800064e <HAL_RCC_OscConfig+0x182>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000694:	f000 fbf4 	bl	8000e80 <HAL_GetTick>
 8000698:	1b40      	subs	r0, r0, r5
 800069a:	2864      	cmp	r0, #100	; 0x64
 800069c:	d9f6      	bls.n	800068c <HAL_RCC_OscConfig+0x1c0>
 800069e:	e74e      	b.n	800053e <HAL_RCC_OscConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80006a0:	2300      	movs	r3, #0
 80006a2:	9301      	str	r3, [sp, #4]
 80006a4:	4b2b      	ldr	r3, [pc, #172]	; (8000754 <HAL_RCC_OscConfig+0x288>)
 80006a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80006a8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80006ac:	641a      	str	r2, [r3, #64]	; 0x40
 80006ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006b4:	9301      	str	r3, [sp, #4]
 80006b6:	9b01      	ldr	r3, [sp, #4]
    
    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80006b8:	4b27      	ldr	r3, [pc, #156]	; (8000758 <HAL_RCC_OscConfig+0x28c>)
 80006ba:	681a      	ldr	r2, [r3, #0]
 80006bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80006c0:	601a      	str	r2, [r3, #0]
    
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80006c2:	f000 fbdd 	bl	8000e80 <HAL_GetTick>
 80006c6:	4605      	mov	r5, r0
    
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80006c8:	4b23      	ldr	r3, [pc, #140]	; (8000758 <HAL_RCC_OscConfig+0x28c>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	05db      	lsls	r3, r3, #23
 80006ce:	d52d      	bpl.n	800072c <HAL_RCC_OscConfig+0x260>
        return HAL_TIMEOUT;
      }      
    }
    
    /* Reset LSEON and LSEBYP bits before configuring the LSE ----------------*/
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 80006d0:	4b20      	ldr	r3, [pc, #128]	; (8000754 <HAL_RCC_OscConfig+0x288>)
 80006d2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80006d4:	f022 0201 	bic.w	r2, r2, #1
 80006d8:	671a      	str	r2, [r3, #112]	; 0x70
 80006da:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80006dc:	f022 0204 	bic.w	r2, r2, #4
 80006e0:	671a      	str	r2, [r3, #112]	; 0x70
 80006e2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80006e4:	f022 0201 	bic.w	r2, r2, #1
 80006e8:	671a      	str	r2, [r3, #112]	; 0x70
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80006ea:	f000 fbc9 	bl	8000e80 <HAL_GetTick>
 80006ee:	4605      	mov	r5, r0
    
    /* Wait till LSE is ready */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80006f0:	4b18      	ldr	r3, [pc, #96]	; (8000754 <HAL_RCC_OscConfig+0x288>)
 80006f2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80006f4:	0797      	lsls	r7, r2, #30
 80006f6:	d41f      	bmi.n	8000738 <HAL_RCC_OscConfig+0x26c>
        return HAL_TIMEOUT;
      }    
    } 
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006f8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80006fa:	f022 0201 	bic.w	r2, r2, #1
 80006fe:	671a      	str	r2, [r3, #112]	; 0x70
 8000700:	68a2      	ldr	r2, [r4, #8]
 8000702:	2a01      	cmp	r2, #1
 8000704:	d120      	bne.n	8000748 <HAL_RCC_OscConfig+0x27c>
 8000706:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000708:	f022 0204 	bic.w	r2, r2, #4
 800070c:	671a      	str	r2, [r3, #112]	; 0x70
 800070e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000710:	f042 0201 	orr.w	r2, r2, #1
 8000714:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000716:	f000 fbb3 	bl	8000e80 <HAL_GetTick>
 800071a:	4605      	mov	r5, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800071c:	4b0d      	ldr	r3, [pc, #52]	; (8000754 <HAL_RCC_OscConfig+0x288>)
 800071e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000720:	079e      	lsls	r6, r3, #30
 8000722:	d525      	bpl.n	8000770 <HAL_RCC_OscConfig+0x2a4>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000724:	69a2      	ldr	r2, [r4, #24]
 8000726:	2a00      	cmp	r2, #0
 8000728:	d139      	bne.n	800079e <HAL_RCC_OscConfig+0x2d2>
 800072a:	e07b      	b.n	8000824 <HAL_RCC_OscConfig+0x358>
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
    
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800072c:	f000 fba8 	bl	8000e80 <HAL_GetTick>
 8000730:	1b40      	subs	r0, r0, r5
 8000732:	2864      	cmp	r0, #100	; 0x64
 8000734:	d9c8      	bls.n	80006c8 <HAL_RCC_OscConfig+0x1fc>
 8000736:	e702      	b.n	800053e <HAL_RCC_OscConfig+0x72>
    tickstart = HAL_GetTick();
    
    /* Wait till LSE is ready */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
    {
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000738:	f000 fba2 	bl	8000e80 <HAL_GetTick>
 800073c:	f241 3388 	movw	r3, #5000	; 0x1388
 8000740:	1b40      	subs	r0, r0, r5
 8000742:	4298      	cmp	r0, r3
 8000744:	d9d4      	bls.n	80006f0 <HAL_RCC_OscConfig+0x224>
 8000746:	e6fa      	b.n	800053e <HAL_RCC_OscConfig+0x72>
        return HAL_TIMEOUT;
      }    
    } 
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000748:	2a05      	cmp	r2, #5
 800074a:	d107      	bne.n	800075c <HAL_RCC_OscConfig+0x290>
 800074c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800074e:	f042 0204 	orr.w	r2, r2, #4
 8000752:	e7db      	b.n	800070c <HAL_RCC_OscConfig+0x240>
 8000754:	40023800 	.word	0x40023800
 8000758:	40007000 	.word	0x40007000
 800075c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800075e:	f021 0104 	bic.w	r1, r1, #4
 8000762:	6719      	str	r1, [r3, #112]	; 0x70
 8000764:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8000766:	f021 0101 	bic.w	r1, r1, #1
 800076a:	6719      	str	r1, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800076c:	b142      	cbz	r2, 8000780 <HAL_RCC_OscConfig+0x2b4>
 800076e:	e7d2      	b.n	8000716 <HAL_RCC_OscConfig+0x24a>
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000770:	f000 fb86 	bl	8000e80 <HAL_GetTick>
 8000774:	f241 3388 	movw	r3, #5000	; 0x1388
 8000778:	1b40      	subs	r0, r0, r5
 800077a:	4298      	cmp	r0, r3
 800077c:	d9ce      	bls.n	800071c <HAL_RCC_OscConfig+0x250>
 800077e:	e6de      	b.n	800053e <HAL_RCC_OscConfig+0x72>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000780:	f000 fb7e 	bl	8000e80 <HAL_GetTick>
 8000784:	4605      	mov	r5, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000786:	4b36      	ldr	r3, [pc, #216]	; (8000860 <HAL_RCC_OscConfig+0x394>)
 8000788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800078a:	0798      	lsls	r0, r3, #30
 800078c:	d5ca      	bpl.n	8000724 <HAL_RCC_OscConfig+0x258>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800078e:	f000 fb77 	bl	8000e80 <HAL_GetTick>
 8000792:	f241 3388 	movw	r3, #5000	; 0x1388
 8000796:	1b40      	subs	r0, r0, r5
 8000798:	4298      	cmp	r0, r3
 800079a:	d9f4      	bls.n	8000786 <HAL_RCC_OscConfig+0x2ba>
 800079c:	e6cf      	b.n	800053e <HAL_RCC_OscConfig+0x72>
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800079e:	4b30      	ldr	r3, [pc, #192]	; (8000860 <HAL_RCC_OscConfig+0x394>)
 80007a0:	6899      	ldr	r1, [r3, #8]
 80007a2:	f001 010c 	and.w	r1, r1, #12
 80007a6:	2908      	cmp	r1, #8
 80007a8:	f43f aeae 	beq.w	8000508 <HAL_RCC_OscConfig+0x3c>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80007ac:	2a02      	cmp	r2, #2
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80007ae:	681a      	ldr	r2, [r3, #0]
 80007b0:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80007b4:	601a      	str	r2, [r3, #0]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80007b6:	d143      	bne.n	8000840 <HAL_RCC_OscConfig+0x374>
        
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80007b8:	f000 fb62 	bl	8000e80 <HAL_GetTick>
 80007bc:	4605      	mov	r5, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80007be:	4b28      	ldr	r3, [pc, #160]	; (8000860 <HAL_RCC_OscConfig+0x394>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	0199      	lsls	r1, r3, #6
 80007c4:	d430      	bmi.n	8000828 <HAL_RCC_OscConfig+0x35c>
 80007c6:	f647 77c0 	movw	r7, #32704	; 0x7fc0
 80007ca:	fa97 f7a7 	rbit	r7, r7
 80007ce:	f44f 3640 	mov.w	r6, #196608	; 0x30000
            return HAL_TIMEOUT;
          }
        }
        
        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80007d2:	fab7 f787 	clz	r7, r7
 80007d6:	fa96 f6a6 	rbit	r6, r6
 80007da:	f04f 6570 	mov.w	r5, #251658240	; 0xf000000
 80007de:	fab6 f686 	clz	r6, r6
 80007e2:	fa95 f5a5 	rbit	r5, r5
 80007e6:	6a20      	ldr	r0, [r4, #32]
 80007e8:	69e1      	ldr	r1, [r4, #28]
 80007ea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80007ec:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80007ee:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
 80007f0:	4301      	orrs	r1, r0
 80007f2:	085b      	lsrs	r3, r3, #1
 80007f4:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 80007f8:	40ba      	lsls	r2, r7
 80007fa:	3b01      	subs	r3, #1
 80007fc:	430a      	orrs	r2, r1
 80007fe:	40b3      	lsls	r3, r6
 8000800:	fab5 f585 	clz	r5, r5
 8000804:	431a      	orrs	r2, r3
 8000806:	40ac      	lsls	r4, r5
 8000808:	4b15      	ldr	r3, [pc, #84]	; (8000860 <HAL_RCC_OscConfig+0x394>)
 800080a:	4322      	orrs	r2, r4
 800080c:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PLLM,
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800080e:	681a      	ldr	r2, [r3, #0]
 8000810:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000814:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000816:	f000 fb33 	bl	8000e80 <HAL_GetTick>
 800081a:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800081c:	4b10      	ldr	r3, [pc, #64]	; (8000860 <HAL_RCC_OscConfig+0x394>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	019a      	lsls	r2, r3, #6
 8000822:	d507      	bpl.n	8000834 <HAL_RCC_OscConfig+0x368>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8000824:	2000      	movs	r0, #0
 8000826:	e018      	b.n	800085a <HAL_RCC_OscConfig+0x38e>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000828:	f000 fb2a 	bl	8000e80 <HAL_GetTick>
 800082c:	1b40      	subs	r0, r0, r5
 800082e:	2864      	cmp	r0, #100	; 0x64
 8000830:	d9c5      	bls.n	80007be <HAL_RCC_OscConfig+0x2f2>
 8000832:	e684      	b.n	800053e <HAL_RCC_OscConfig+0x72>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000834:	f000 fb24 	bl	8000e80 <HAL_GetTick>
 8000838:	1b00      	subs	r0, r0, r4
 800083a:	2864      	cmp	r0, #100	; 0x64
 800083c:	d9ee      	bls.n	800081c <HAL_RCC_OscConfig+0x350>
 800083e:	e67e      	b.n	800053e <HAL_RCC_OscConfig+0x72>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000840:	f000 fb1e 	bl	8000e80 <HAL_GetTick>
 8000844:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000846:	4b06      	ldr	r3, [pc, #24]	; (8000860 <HAL_RCC_OscConfig+0x394>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	019b      	lsls	r3, r3, #6
 800084c:	d5ea      	bpl.n	8000824 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800084e:	f000 fb17 	bl	8000e80 <HAL_GetTick>
 8000852:	1b00      	subs	r0, r0, r4
 8000854:	2864      	cmp	r0, #100	; 0x64
 8000856:	d9f6      	bls.n	8000846 <HAL_RCC_OscConfig+0x37a>
 8000858:	e671      	b.n	800053e <HAL_RCC_OscConfig+0x72>
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 800085a:	b003      	add	sp, #12
 800085c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800085e:	bf00      	nop
 8000860:	40023800 	.word	0x40023800

08000864 <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
     must be correctly programmed according to the frequency of the CPU clock 
     (HCLK) and the supply voltage of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000864:	4b71      	ldr	r3, [pc, #452]	; (8000a2c <HAL_RCC_ClockConfig+0x1c8>)
 8000866:	681a      	ldr	r2, [r3, #0]
 8000868:	f002 020f 	and.w	r2, r2, #15
 800086c:	4291      	cmp	r1, r2
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800086e:	b570      	push	{r4, r5, r6, lr}
 8000870:	4604      	mov	r4, r0
 8000872:	460d      	mov	r5, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
     must be correctly programmed according to the frequency of the CPU clock 
     (HCLK) and the supply voltage of the device. */
  
  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000874:	d96b      	bls.n	800094e <HAL_RCC_ClockConfig+0xea>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000876:	681a      	ldr	r2, [r3, #0]
 8000878:	f022 020f 	bic.w	r2, r2, #15
 800087c:	430a      	orrs	r2, r1
 800087e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	f003 030f 	and.w	r3, r3, #15
 8000886:	428b      	cmp	r3, r1
 8000888:	d001      	beq.n	800088e <HAL_RCC_ClockConfig+0x2a>
    {
      return HAL_ERROR;
 800088a:	2001      	movs	r0, #1
 800088c:	bd70      	pop	{r4, r5, r6, pc}
    }

    /*-------------------------- HCLK Configuration --------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800088e:	6803      	ldr	r3, [r0, #0]
 8000890:	079e      	lsls	r6, r3, #30
 8000892:	d506      	bpl.n	80008a2 <HAL_RCC_ClockConfig+0x3e>
    {
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000894:	4a66      	ldr	r2, [pc, #408]	; (8000a30 <HAL_RCC_ClockConfig+0x1cc>)
 8000896:	68a1      	ldr	r1, [r4, #8]
 8000898:	6890      	ldr	r0, [r2, #8]
 800089a:	f020 00f0 	bic.w	r0, r0, #240	; 0xf0
 800089e:	4301      	orrs	r1, r0
 80008a0:	6091      	str	r1, [r2, #8]
    }

    /*------------------------- SYSCLK Configuration ---------------------------*/ 
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80008a2:	07dd      	lsls	r5, r3, #31
 80008a4:	d40b      	bmi.n	80008be <HAL_RCC_ClockConfig+0x5a>
      return HAL_ERROR;
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80008a6:	6823      	ldr	r3, [r4, #0]
 80008a8:	0758      	lsls	r0, r3, #29
 80008aa:	f140 80b0 	bpl.w	8000a0e <HAL_RCC_ClockConfig+0x1aa>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80008ae:	4a60      	ldr	r2, [pc, #384]	; (8000a30 <HAL_RCC_ClockConfig+0x1cc>)
 80008b0:	68e1      	ldr	r1, [r4, #12]
 80008b2:	6890      	ldr	r0, [r2, #8]
 80008b4:	f420 50e0 	bic.w	r0, r0, #7168	; 0x1c00
 80008b8:	4301      	orrs	r1, r0
 80008ba:	6091      	str	r1, [r2, #8]
 80008bc:	e0a7      	b.n	8000a0e <HAL_RCC_ClockConfig+0x1aa>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80008be:	6862      	ldr	r2, [r4, #4]
 80008c0:	4b5b      	ldr	r3, [pc, #364]	; (8000a30 <HAL_RCC_ClockConfig+0x1cc>)
 80008c2:	2a01      	cmp	r2, #1
      {
        /* Check the HSE ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008c4:	6819      	ldr	r1, [r3, #0]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80008c6:	d102      	bne.n	80008ce <HAL_RCC_ClockConfig+0x6a>
      {
        /* Check the HSE ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008c8:	f411 3f00 	tst.w	r1, #131072	; 0x20000
 80008cc:	e006      	b.n	80008dc <HAL_RCC_ClockConfig+0x78>
        {
          return HAL_ERROR;
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80008ce:	2a02      	cmp	r2, #2
 80008d0:	d102      	bne.n	80008d8 <HAL_RCC_ClockConfig+0x74>
      {
        /* Check the PLL ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80008d2:	f011 7f00 	tst.w	r1, #33554432	; 0x2000000
 80008d6:	e001      	b.n	80008dc <HAL_RCC_ClockConfig+0x78>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008d8:	f011 0f02 	tst.w	r1, #2
 80008dc:	d0d5      	beq.n	800088a <HAL_RCC_ClockConfig+0x26>
        {
          return HAL_ERROR;
        }
      }

      __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80008de:	6899      	ldr	r1, [r3, #8]
 80008e0:	f021 0103 	bic.w	r1, r1, #3
 80008e4:	430a      	orrs	r2, r1
 80008e6:	609a      	str	r2, [r3, #8]
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80008e8:	f000 faca 	bl	8000e80 <HAL_GetTick>
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80008ec:	6863      	ldr	r3, [r4, #4]
 80008ee:	2b01      	cmp	r3, #1
        }
      }

      __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80008f0:	4605      	mov	r5, r0
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80008f2:	d10e      	bne.n	8000912 <HAL_RCC_ClockConfig+0xae>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80008f4:	4b4e      	ldr	r3, [pc, #312]	; (8000a30 <HAL_RCC_ClockConfig+0x1cc>)
 80008f6:	689b      	ldr	r3, [r3, #8]
 80008f8:	f003 030c 	and.w	r3, r3, #12
 80008fc:	2b04      	cmp	r3, #4
 80008fe:	d0d2      	beq.n	80008a6 <HAL_RCC_ClockConfig+0x42>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000900:	f000 fabe 	bl	8000e80 <HAL_GetTick>
 8000904:	f241 3388 	movw	r3, #5000	; 0x1388
 8000908:	1b40      	subs	r0, r0, r5
 800090a:	4298      	cmp	r0, r3
 800090c:	d9f2      	bls.n	80008f4 <HAL_RCC_ClockConfig+0x90>
          {
            return HAL_TIMEOUT;
 800090e:	2003      	movs	r0, #3
 8000910:	bd70      	pop	{r4, r5, r6, pc}
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000912:	2b02      	cmp	r3, #2
 8000914:	d00c      	beq.n	8000930 <HAL_RCC_ClockConfig+0xcc>
          }
        }
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000916:	4b46      	ldr	r3, [pc, #280]	; (8000a30 <HAL_RCC_ClockConfig+0x1cc>)
 8000918:	689b      	ldr	r3, [r3, #8]
 800091a:	f013 0f0c 	tst.w	r3, #12
 800091e:	d10e      	bne.n	800093e <HAL_RCC_ClockConfig+0xda>
 8000920:	e7c1      	b.n	80008a6 <HAL_RCC_ClockConfig+0x42>
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000922:	f000 faad 	bl	8000e80 <HAL_GetTick>
 8000926:	f241 3388 	movw	r3, #5000	; 0x1388
 800092a:	1b40      	subs	r0, r0, r5
 800092c:	4298      	cmp	r0, r3
 800092e:	d8ee      	bhi.n	800090e <HAL_RCC_ClockConfig+0xaa>
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000930:	4b3f      	ldr	r3, [pc, #252]	; (8000a30 <HAL_RCC_ClockConfig+0x1cc>)
 8000932:	689b      	ldr	r3, [r3, #8]
 8000934:	f003 030c 	and.w	r3, r3, #12
 8000938:	2b08      	cmp	r3, #8
 800093a:	d1f2      	bne.n	8000922 <HAL_RCC_ClockConfig+0xbe>
 800093c:	e7b3      	b.n	80008a6 <HAL_RCC_ClockConfig+0x42>
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800093e:	f000 fa9f 	bl	8000e80 <HAL_GetTick>
 8000942:	f241 3388 	movw	r3, #5000	; 0x1388
 8000946:	1b40      	subs	r0, r0, r5
 8000948:	4298      	cmp	r0, r3
 800094a:	d9e4      	bls.n	8000916 <HAL_RCC_ClockConfig+0xb2>
 800094c:	e7df      	b.n	800090e <HAL_RCC_ClockConfig+0xaa>
  }
  /* Decreasing the CPU frequency */
  else
  {
    /*-------------------------- HCLK Configuration --------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800094e:	6803      	ldr	r3, [r0, #0]
 8000950:	0799      	lsls	r1, r3, #30
 8000952:	d506      	bpl.n	8000962 <HAL_RCC_ClockConfig+0xfe>
    {
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000954:	4a36      	ldr	r2, [pc, #216]	; (8000a30 <HAL_RCC_ClockConfig+0x1cc>)
 8000956:	68a1      	ldr	r1, [r4, #8]
 8000958:	6890      	ldr	r0, [r2, #8]
 800095a:	f020 00f0 	bic.w	r0, r0, #240	; 0xf0
 800095e:	4301      	orrs	r1, r0
 8000960:	6091      	str	r1, [r2, #8]
    }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000962:	07da      	lsls	r2, r3, #31
 8000964:	d40b      	bmi.n	800097e <HAL_RCC_ClockConfig+0x11a>
        }
      }
    }
    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000966:	4b31      	ldr	r3, [pc, #196]	; (8000a2c <HAL_RCC_ClockConfig+0x1c8>)
 8000968:	681a      	ldr	r2, [r3, #0]
 800096a:	f022 020f 	bic.w	r2, r2, #15
 800096e:	432a      	orrs	r2, r5
 8000970:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	f003 030f 	and.w	r3, r3, #15
 8000978:	42ab      	cmp	r3, r5
 800097a:	d186      	bne.n	800088a <HAL_RCC_ClockConfig+0x26>
 800097c:	e793      	b.n	80008a6 <HAL_RCC_ClockConfig+0x42>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800097e:	6862      	ldr	r2, [r4, #4]
 8000980:	4b2b      	ldr	r3, [pc, #172]	; (8000a30 <HAL_RCC_ClockConfig+0x1cc>)
 8000982:	2a01      	cmp	r2, #1
      {
        /* Check the HSE ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000984:	6819      	ldr	r1, [r3, #0]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
    {    
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
      
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000986:	d102      	bne.n	800098e <HAL_RCC_ClockConfig+0x12a>
      {
        /* Check the HSE ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000988:	f411 3f00 	tst.w	r1, #131072	; 0x20000
 800098c:	e006      	b.n	800099c <HAL_RCC_ClockConfig+0x138>
        {
          return HAL_ERROR;
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800098e:	2a02      	cmp	r2, #2
 8000990:	d102      	bne.n	8000998 <HAL_RCC_ClockConfig+0x134>
      {
        /* Check the PLL ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000992:	f011 7f00 	tst.w	r1, #33554432	; 0x2000000
 8000996:	e001      	b.n	800099c <HAL_RCC_ClockConfig+0x138>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */  
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000998:	f011 0f02 	tst.w	r1, #2
 800099c:	f43f af75 	beq.w	800088a <HAL_RCC_ClockConfig+0x26>
        {
          return HAL_ERROR;
        }
      }
      __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80009a0:	6899      	ldr	r1, [r3, #8]
 80009a2:	f021 0103 	bic.w	r1, r1, #3
 80009a6:	430a      	orrs	r2, r1
 80009a8:	609a      	str	r2, [r3, #8]
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80009aa:	f000 fa69 	bl	8000e80 <HAL_GetTick>
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80009ae:	6863      	ldr	r3, [r4, #4]
 80009b0:	2b01      	cmp	r3, #1
          return HAL_ERROR;
        }
      }
      __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80009b2:	4606      	mov	r6, r0
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80009b4:	d10d      	bne.n	80009d2 <HAL_RCC_ClockConfig+0x16e>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80009b6:	4b1e      	ldr	r3, [pc, #120]	; (8000a30 <HAL_RCC_ClockConfig+0x1cc>)
 80009b8:	689b      	ldr	r3, [r3, #8]
 80009ba:	f003 030c 	and.w	r3, r3, #12
 80009be:	2b04      	cmp	r3, #4
 80009c0:	d0d1      	beq.n	8000966 <HAL_RCC_ClockConfig+0x102>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80009c2:	f000 fa5d 	bl	8000e80 <HAL_GetTick>
 80009c6:	f241 3388 	movw	r3, #5000	; 0x1388
 80009ca:	1b80      	subs	r0, r0, r6
 80009cc:	4298      	cmp	r0, r3
 80009ce:	d9f2      	bls.n	80009b6 <HAL_RCC_ClockConfig+0x152>
 80009d0:	e79d      	b.n	800090e <HAL_RCC_ClockConfig+0xaa>
          {
            return HAL_TIMEOUT;
          } 
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80009d2:	2b02      	cmp	r3, #2
 80009d4:	d00c      	beq.n	80009f0 <HAL_RCC_ClockConfig+0x18c>
          } 
        }
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80009d6:	4b16      	ldr	r3, [pc, #88]	; (8000a30 <HAL_RCC_ClockConfig+0x1cc>)
 80009d8:	689b      	ldr	r3, [r3, #8]
 80009da:	f013 0f0c 	tst.w	r3, #12
 80009de:	d10e      	bne.n	80009fe <HAL_RCC_ClockConfig+0x19a>
 80009e0:	e7c1      	b.n	8000966 <HAL_RCC_ClockConfig+0x102>
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80009e2:	f000 fa4d 	bl	8000e80 <HAL_GetTick>
 80009e6:	f241 3388 	movw	r3, #5000	; 0x1388
 80009ea:	1b80      	subs	r0, r0, r6
 80009ec:	4298      	cmp	r0, r3
 80009ee:	d88e      	bhi.n	800090e <HAL_RCC_ClockConfig+0xaa>
          } 
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80009f0:	4b0f      	ldr	r3, [pc, #60]	; (8000a30 <HAL_RCC_ClockConfig+0x1cc>)
 80009f2:	689b      	ldr	r3, [r3, #8]
 80009f4:	f003 030c 	and.w	r3, r3, #12
 80009f8:	2b08      	cmp	r3, #8
 80009fa:	d1f2      	bne.n	80009e2 <HAL_RCC_ClockConfig+0x17e>
 80009fc:	e7b3      	b.n	8000966 <HAL_RCC_ClockConfig+0x102>
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80009fe:	f000 fa3f 	bl	8000e80 <HAL_GetTick>
 8000a02:	f241 3388 	movw	r3, #5000	; 0x1388
 8000a06:	1b80      	subs	r0, r0, r6
 8000a08:	4298      	cmp	r0, r3
 8000a0a:	d9e4      	bls.n	80009d6 <HAL_RCC_ClockConfig+0x172>
 8000a0c:	e77f      	b.n	800090e <HAL_RCC_ClockConfig+0xaa>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000a0e:	071b      	lsls	r3, r3, #28
 8000a10:	d507      	bpl.n	8000a22 <HAL_RCC_ClockConfig+0x1be>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000a12:	4b07      	ldr	r3, [pc, #28]	; (8000a30 <HAL_RCC_ClockConfig+0x1cc>)
 8000a14:	6921      	ldr	r1, [r4, #16]
 8000a16:	689a      	ldr	r2, [r3, #8]
 8000a18:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000a1c:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8000a20:	609a      	str	r2, [r3, #8]
  }

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8000a22:	2000      	movs	r0, #0
 8000a24:	f000 fa07 	bl	8000e36 <HAL_InitTick>
  
  return HAL_OK;
 8000a28:	2000      	movs	r0, #0
}
 8000a2a:	bd70      	pop	{r4, r5, r6, pc}
 8000a2c:	40023c00 	.word	0x40023c00
 8000a30:	40023800 	.word	0x40023800

08000a34 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000a34:	4b1f      	ldr	r3, [pc, #124]	; (8000ab4 <HAL_RCC_GetSysClockFreq+0x80>)
 8000a36:	689a      	ldr	r2, [r3, #8]
 8000a38:	f002 020c 	and.w	r2, r2, #12
 8000a3c:	2a04      	cmp	r2, #4
  *         
  *               
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000a3e:	b510      	push	{r4, lr}
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000a40:	d036      	beq.n	8000ab0 <HAL_RCC_GetSysClockFreq+0x7c>
 8000a42:	2a08      	cmp	r2, #8
 8000a44:	d001      	beq.n	8000a4a <HAL_RCC_GetSysClockFreq+0x16>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000a46:	481c      	ldr	r0, [pc, #112]	; (8000ab8 <HAL_RCC_GetSysClockFreq+0x84>)
 8000a48:	bd10      	pop	{r4, pc}
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000a4a:	6859      	ldr	r1, [r3, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8000a4c:	685a      	ldr	r2, [r3, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8000a4e:	685c      	ldr	r4, [r3, #4]
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8000a50:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000a54:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8000a58:	f647 72c0 	movw	r2, #32704	; 0x7fc0
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8000a5c:	d00c      	beq.n	8000a78 <HAL_RCC_GetSysClockFreq+0x44>
 8000a5e:	fa92 f2a2 	rbit	r2, r2
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8000a62:	fab2 f382 	clz	r3, r2
 8000a66:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8000a6a:	4022      	ands	r2, r4
 8000a6c:	40da      	lsrs	r2, r3
 8000a6e:	4b13      	ldr	r3, [pc, #76]	; (8000abc <HAL_RCC_GetSysClockFreq+0x88>)
 8000a70:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a74:	4353      	muls	r3, r2
 8000a76:	e00b      	b.n	8000a90 <HAL_RCC_GetSysClockFreq+0x5c>
 8000a78:	fa92 f2a2 	rbit	r2, r2
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8000a7c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000a80:	480d      	ldr	r0, [pc, #52]	; (8000ab8 <HAL_RCC_GetSysClockFreq+0x84>)
 8000a82:	fab2 f282 	clz	r2, r2
 8000a86:	4023      	ands	r3, r4
 8000a88:	40d3      	lsrs	r3, r2
 8000a8a:	fbb0 f1f1 	udiv	r1, r0, r1
 8000a8e:	434b      	muls	r3, r1
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1 ) *2);
 8000a90:	4a08      	ldr	r2, [pc, #32]	; (8000ab4 <HAL_RCC_GetSysClockFreq+0x80>)
 8000a92:	6850      	ldr	r0, [r2, #4]
 8000a94:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000a98:	fa92 f2a2 	rbit	r2, r2
 8000a9c:	fab2 f282 	clz	r2, r2
 8000aa0:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
 8000aa4:	40d0      	lsrs	r0, r2
 8000aa6:	3001      	adds	r0, #1
 8000aa8:	0040      	lsls	r0, r0, #1
      
      sysclockfreq = pllvco/pllp;
 8000aaa:	fbb3 f0f0 	udiv	r0, r3, r0
      break;
 8000aae:	bd10      	pop	{r4, pc}
      sysclockfreq = HSI_VALUE;
       break;
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8000ab0:	4802      	ldr	r0, [pc, #8]	; (8000abc <HAL_RCC_GetSysClockFreq+0x88>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000ab2:	bd10      	pop	{r4, pc}
 8000ab4:	40023800 	.word	0x40023800
 8000ab8:	00f42400 	.word	0x00f42400
 8000abc:	007a1200 	.word	0x007a1200

08000ac0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000ac0:	b508      	push	{r3, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8000ac2:	f7ff ffb7 	bl	8000a34 <HAL_RCC_GetSysClockFreq>
 8000ac6:	4b08      	ldr	r3, [pc, #32]	; (8000ae8 <HAL_RCC_GetHCLKFreq+0x28>)
 8000ac8:	22f0      	movs	r2, #240	; 0xf0
 8000aca:	689b      	ldr	r3, [r3, #8]
 8000acc:	fa92 f2a2 	rbit	r2, r2
 8000ad0:	fab2 f282 	clz	r2, r2
 8000ad4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000ad8:	40d3      	lsrs	r3, r2
 8000ada:	4a04      	ldr	r2, [pc, #16]	; (8000aec <HAL_RCC_GetHCLKFreq+0x2c>)
 8000adc:	5cd3      	ldrb	r3, [r2, r3]
 8000ade:	40d8      	lsrs	r0, r3
 8000ae0:	4b03      	ldr	r3, [pc, #12]	; (8000af0 <HAL_RCC_GetHCLKFreq+0x30>)
 8000ae2:	6018      	str	r0, [r3, #0]
  return SystemCoreClock;
}
 8000ae4:	bd08      	pop	{r3, pc}
 8000ae6:	bf00      	nop
 8000ae8:	40023800 	.word	0x40023800
 8000aec:	08000f98 	.word	0x08000f98
 8000af0:	20000000 	.word	0x20000000

08000af4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8000af4:	b513      	push	{r0, r1, r4, lr}
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	9301      	str	r3, [sp, #4]
 8000afa:	4b19      	ldr	r3, [pc, #100]	; (8000b60 <HAL_PWREx_EnableOverDrive+0x6c>)
 8000afc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000afe:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000b02:	641a      	str	r2, [r3, #64]	; 0x40
 8000b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b0a:	9301      	str	r3, [sp, #4]
 8000b0c:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000b0e:	4b15      	ldr	r3, [pc, #84]	; (8000b64 <HAL_PWREx_EnableOverDrive+0x70>)
 8000b10:	681a      	ldr	r2, [r3, #0]
 8000b12:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000b16:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000b18:	f000 f9b2 	bl	8000e80 <HAL_GetTick>
 8000b1c:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000b1e:	4b11      	ldr	r3, [pc, #68]	; (8000b64 <HAL_PWREx_EnableOverDrive+0x70>)
 8000b20:	685a      	ldr	r2, [r3, #4]
 8000b22:	03d2      	lsls	r2, r2, #15
 8000b24:	d407      	bmi.n	8000b36 <HAL_PWREx_EnableOverDrive+0x42>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000b26:	f000 f9ab 	bl	8000e80 <HAL_GetTick>
 8000b2a:	1b00      	subs	r0, r0, r4
 8000b2c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000b30:	d9f5      	bls.n	8000b1e <HAL_PWREx_EnableOverDrive+0x2a>
    {
      return HAL_TIMEOUT;
 8000b32:	2003      	movs	r0, #3
 8000b34:	e012      	b.n	8000b5c <HAL_PWREx_EnableOverDrive+0x68>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000b36:	681a      	ldr	r2, [r3, #0]
 8000b38:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000b3c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000b3e:	f000 f99f 	bl	8000e80 <HAL_GetTick>
 8000b42:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000b44:	4b07      	ldr	r3, [pc, #28]	; (8000b64 <HAL_PWREx_EnableOverDrive+0x70>)
 8000b46:	685b      	ldr	r3, [r3, #4]
 8000b48:	039b      	lsls	r3, r3, #14
 8000b4a:	d406      	bmi.n	8000b5a <HAL_PWREx_EnableOverDrive+0x66>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000b4c:	f000 f998 	bl	8000e80 <HAL_GetTick>
 8000b50:	1b00      	subs	r0, r0, r4
 8000b52:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000b56:	d9f5      	bls.n	8000b44 <HAL_PWREx_EnableOverDrive+0x50>
 8000b58:	e7eb      	b.n	8000b32 <HAL_PWREx_EnableOverDrive+0x3e>
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8000b5a:	2000      	movs	r0, #0
}
 8000b5c:	b002      	add	sp, #8
 8000b5e:	bd10      	pop	{r4, pc}
 8000b60:	40023800 	.word	0x40023800
 8000b64:	40007000 	.word	0x40007000

08000b68 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b68:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b6c:	680f      	ldr	r7, [r1, #0]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000b6e:	2300      	movs	r3, #0
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000b70:	2201      	movs	r2, #1
 8000b72:	409a      	lsls	r2, r3
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b74:	ea02 0507 	and.w	r5, r2, r7

    if(iocurrent == ioposition)
 8000b78:	4295      	cmp	r5, r2
 8000b7a:	f040 80db 	bne.w	8000d34 <HAL_GPIO_Init+0x1cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b7e:	684c      	ldr	r4, [r1, #4]
 8000b80:	f024 0610 	bic.w	r6, r4, #16
 8000b84:	2e02      	cmp	r6, #2
 8000b86:	d116      	bne.n	8000bb6 <HAL_GPIO_Init+0x4e>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000b88:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 8000b8c:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000b90:	f003 0807 	and.w	r8, r3, #7
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000b94:	f8dc 2020 	ldr.w	r2, [ip, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000b98:	ea4f 0888 	mov.w	r8, r8, lsl #2
 8000b9c:	f04f 090f 	mov.w	r9, #15
 8000ba0:	fa09 f908 	lsl.w	r9, r9, r8
 8000ba4:	ea22 0909 	bic.w	r9, r2, r9
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000ba8:	690a      	ldr	r2, [r1, #16]
 8000baa:	fa02 f808 	lsl.w	r8, r2, r8
 8000bae:	ea49 0208 	orr.w	r2, r9, r8
        GPIOx->AFR[position >> 3] = temp;
 8000bb2:	f8cc 2020 	str.w	r2, [ip, #32]
 8000bb6:	005a      	lsls	r2, r3, #1
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000bb8:	f04f 0c03 	mov.w	ip, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000bbc:	f8d0 9000 	ldr.w	r9, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000bc0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bc4:	ea6f 0c0c 	mvn.w	ip, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000bc8:	f004 0803 	and.w	r8, r4, #3
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000bcc:	ea0c 0909 	and.w	r9, ip, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000bd0:	fa08 f802 	lsl.w	r8, r8, r2
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000bd4:	3e01      	subs	r6, #1
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000bd6:	ea49 0808 	orr.w	r8, r9, r8
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000bda:	2e01      	cmp	r6, #1

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
      GPIOx->MODER = temp;
 8000bdc:	f8c0 8000 	str.w	r8, [r0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000be0:	d810      	bhi.n	8000c04 <HAL_GPIO_Init+0x9c>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000be2:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000be4:	ea0c 0806 	and.w	r8, ip, r6
        temp |= (GPIO_Init->Speed << (position * 2));
 8000be8:	68ce      	ldr	r6, [r1, #12]
 8000bea:	4096      	lsls	r6, r2
 8000bec:	ea48 0606 	orr.w	r6, r8, r6
        GPIOx->OSPEEDR = temp;
 8000bf0:	6086      	str	r6, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bf2:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bf4:	ea26 0805 	bic.w	r8, r6, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000bf8:	f3c4 1600 	ubfx	r6, r4, #4, #1
 8000bfc:	409e      	lsls	r6, r3
 8000bfe:	ea48 0606 	orr.w	r6, r8, r6
        GPIOx->OTYPER = temp;
 8000c02:	6046      	str	r6, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000c04:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000c06:	ea0c 0c06 	and.w	ip, ip, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000c0a:	688e      	ldr	r6, [r1, #8]
 8000c0c:	4096      	lsls	r6, r2
 8000c0e:	ea4c 0206 	orr.w	r2, ip, r6
      GPIOx->PUPDR = temp;
 8000c12:	60c2      	str	r2, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c14:	00e2      	lsls	r2, r4, #3
 8000c16:	f140 808d 	bpl.w	8000d34 <HAL_GPIO_Init+0x1cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c1a:	4e4a      	ldr	r6, [pc, #296]	; (8000d44 <HAL_GPIO_Init+0x1dc>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	9201      	str	r2, [sp, #4]
 8000c20:	f8d6 c044 	ldr.w	ip, [r6, #68]	; 0x44
 8000c24:	f44c 4c80 	orr.w	ip, ip, #16384	; 0x4000
 8000c28:	f8c6 c044 	str.w	ip, [r6, #68]	; 0x44
 8000c2c:	6c76      	ldr	r6, [r6, #68]	; 0x44
 8000c2e:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8000c32:	9601      	str	r6, [sp, #4]
 8000c34:	9e01      	ldr	r6, [sp, #4]
 8000c36:	f023 0603 	bic.w	r6, r3, #3
 8000c3a:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8000c3e:	f506 369c 	add.w	r6, r6, #79872	; 0x13800

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000c42:	f003 0c03 	and.w	ip, r3, #3
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
 8000c46:	f8d6 9008 	ldr.w	r9, [r6, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000c4a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000c4e:	f04f 080f 	mov.w	r8, #15
 8000c52:	fa08 f80c 	lsl.w	r8, r8, ip
 8000c56:	ea29 0808 	bic.w	r8, r9, r8
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000c5a:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 8000d4c <HAL_GPIO_Init+0x1e4>
 8000c5e:	4548      	cmp	r0, r9
 8000c60:	d037      	beq.n	8000cd2 <HAL_GPIO_Init+0x16a>
 8000c62:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8000c66:	f502 3201 	add.w	r2, r2, #132096	; 0x20400
 8000c6a:	4290      	cmp	r0, r2
 8000c6c:	d022      	beq.n	8000cb4 <HAL_GPIO_Init+0x14c>
 8000c6e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000c72:	4290      	cmp	r0, r2
 8000c74:	d020      	beq.n	8000cb8 <HAL_GPIO_Init+0x150>
 8000c76:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000c7a:	4290      	cmp	r0, r2
 8000c7c:	d01e      	beq.n	8000cbc <HAL_GPIO_Init+0x154>
 8000c7e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000c82:	4290      	cmp	r0, r2
 8000c84:	d01c      	beq.n	8000cc0 <HAL_GPIO_Init+0x158>
 8000c86:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000c8a:	4290      	cmp	r0, r2
 8000c8c:	d01a      	beq.n	8000cc4 <HAL_GPIO_Init+0x15c>
 8000c8e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000c92:	4290      	cmp	r0, r2
 8000c94:	d018      	beq.n	8000cc8 <HAL_GPIO_Init+0x160>
 8000c96:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000c9a:	4290      	cmp	r0, r2
 8000c9c:	d016      	beq.n	8000ccc <HAL_GPIO_Init+0x164>
 8000c9e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000ca2:	4290      	cmp	r0, r2
 8000ca4:	d014      	beq.n	8000cd0 <HAL_GPIO_Init+0x168>
 8000ca6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000caa:	4290      	cmp	r0, r2
 8000cac:	bf14      	ite	ne
 8000cae:	220a      	movne	r2, #10
 8000cb0:	2209      	moveq	r2, #9
 8000cb2:	e00e      	b.n	8000cd2 <HAL_GPIO_Init+0x16a>
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	e00c      	b.n	8000cd2 <HAL_GPIO_Init+0x16a>
 8000cb8:	2202      	movs	r2, #2
 8000cba:	e00a      	b.n	8000cd2 <HAL_GPIO_Init+0x16a>
 8000cbc:	2203      	movs	r2, #3
 8000cbe:	e008      	b.n	8000cd2 <HAL_GPIO_Init+0x16a>
 8000cc0:	2204      	movs	r2, #4
 8000cc2:	e006      	b.n	8000cd2 <HAL_GPIO_Init+0x16a>
 8000cc4:	2205      	movs	r2, #5
 8000cc6:	e004      	b.n	8000cd2 <HAL_GPIO_Init+0x16a>
 8000cc8:	2206      	movs	r2, #6
 8000cca:	e002      	b.n	8000cd2 <HAL_GPIO_Init+0x16a>
 8000ccc:	2207      	movs	r2, #7
 8000cce:	e000      	b.n	8000cd2 <HAL_GPIO_Init+0x16a>
 8000cd0:	2208      	movs	r2, #8
 8000cd2:	fa02 f20c 	lsl.w	r2, r2, ip
 8000cd6:	ea42 0208 	orr.w	r2, r2, r8
        SYSCFG->EXTICR[position >> 2] = temp;
 8000cda:	60b2      	str	r2, [r6, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000cdc:	4e1a      	ldr	r6, [pc, #104]	; (8000d48 <HAL_GPIO_Init+0x1e0>)
 8000cde:	f8d6 c000 	ldr.w	ip, [r6]
        temp &= ~((uint32_t)iocurrent);
 8000ce2:	43ea      	mvns	r2, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ce4:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        {
          temp |= iocurrent;
 8000ce8:	bf14      	ite	ne
 8000cea:	ea45 0c0c 	orrne.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
 8000cee:	ea02 0c0c 	andeq.w	ip, r2, ip
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 8000cf2:	f8c6 c000 	str.w	ip, [r6]

        temp = EXTI->EMR;
 8000cf6:	6876      	ldr	r6, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000cf8:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        {
          temp |= iocurrent;
 8000cfc:	bf14      	ite	ne
 8000cfe:	ea45 0c06 	orrne.w	ip, r5, r6
          temp |= iocurrent;
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
 8000d02:	ea02 0c06 	andeq.w	ip, r2, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 8000d06:	4e10      	ldr	r6, [pc, #64]	; (8000d48 <HAL_GPIO_Init+0x1e0>)
 8000d08:	f8c6 c004 	str.w	ip, [r6, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d0c:	f8d6 c008 	ldr.w	ip, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d10:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        {
          temp |= iocurrent;
 8000d14:	bf14      	ite	ne
 8000d16:	ea45 0c0c 	orrne.w	ip, r5, ip
        }
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
 8000d1a:	ea02 0c0c 	andeq.w	ip, r2, ip
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 8000d1e:	f8c6 c008 	str.w	ip, [r6, #8]

        temp = EXTI->FTSR;
 8000d22:	68f6      	ldr	r6, [r6, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d24:	02a4      	lsls	r4, r4, #10
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
 8000d26:	bf58      	it	pl
 8000d28:	ea02 0506 	andpl.w	r5, r2, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 8000d2c:	4a06      	ldr	r2, [pc, #24]	; (8000d48 <HAL_GPIO_Init+0x1e0>)

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          temp |= iocurrent;
 8000d2e:	bf48      	it	mi
 8000d30:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8000d32:	60d5      	str	r5, [r2, #12]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000d34:	3301      	adds	r3, #1
 8000d36:	2b10      	cmp	r3, #16
 8000d38:	f47f af1a 	bne.w	8000b70 <HAL_GPIO_Init+0x8>
        }
        EXTI->FTSR = temp;
      }
    }
  }
}
 8000d3c:	b003      	add	sp, #12
 8000d3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000d42:	bf00      	nop
 8000d44:	40023800 	.word	0x40023800
 8000d48:	40013c00 	.word	0x40013c00
 8000d4c:	40020000 	.word	0x40020000

08000d50 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d50:	b902      	cbnz	r2, 8000d54 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000d52:	0409      	lsls	r1, r1, #16
 8000d54:	6181      	str	r1, [r0, #24]
 8000d56:	4770      	bx	lr

08000d58 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000d58:	6943      	ldr	r3, [r0, #20]
 8000d5a:	4059      	eors	r1, r3
 8000d5c:	6141      	str	r1, [r0, #20]
 8000d5e:	4770      	bx	lr

08000d60 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d60:	4a07      	ldr	r2, [pc, #28]	; (8000d80 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000d62:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d64:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000d68:	041b      	lsls	r3, r3, #16
 8000d6a:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d74:	f000 0007 	and.w	r0, r0, #7

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8000d78:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8000d7c:	60d3      	str	r3, [r2, #12]
 8000d7e:	4770      	bx	lr
 8000d80:	e000ed00 	.word	0xe000ed00

08000d84 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d84:	4b16      	ldr	r3, [pc, #88]	; (8000de0 <HAL_NVIC_SetPriority+0x5c>)
 8000d86:	68db      	ldr	r3, [r3, #12]
 8000d88:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d8c:	b570      	push	{r4, r5, r6, lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d8e:	1d1d      	adds	r5, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d90:	f1c3 0407 	rsb	r4, r3, #7
 8000d94:	2c04      	cmp	r4, #4
 8000d96:	bf28      	it	cs
 8000d98:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d9a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d9c:	f04f 0501 	mov.w	r5, #1
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000da0:	bf8c      	ite	hi
 8000da2:	3b03      	subhi	r3, #3
 8000da4:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da6:	fa05 f404 	lsl.w	r4, r5, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000daa:	fa05 f603 	lsl.w	r6, r5, r3

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dae:	3c01      	subs	r4, #1
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000db0:	3e01      	subs	r6, #1

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db2:	4021      	ands	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000db4:	4032      	ands	r2, r6

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db6:	fa01 f303 	lsl.w	r3, r1, r3
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8000dba:	4313      	orrs	r3, r2
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8000dbc:	2800      	cmp	r0, #0
 8000dbe:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8000dc2:	da05      	bge.n	8000dd0 <HAL_NVIC_SetPriority+0x4c>
  {
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc4:	b2da      	uxtb	r2, r3
 8000dc6:	f000 000f 	and.w	r0, r0, #15
 8000dca:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <HAL_NVIC_SetPriority+0x60>)
 8000dcc:	541a      	strb	r2, [r3, r0]
 8000dce:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd0:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000dd4:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
 8000dde:	bd70      	pop	{r4, r5, r6, pc}
 8000de0:	e000ed00 	.word	0xe000ed00
 8000de4:	e000ed14 	.word	0xe000ed14

08000de8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000de8:	3801      	subs	r0, #1
 8000dea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000dee:	d20a      	bcs.n	8000e06 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000df0:	4b06      	ldr	r3, [pc, #24]	; (8000e0c <HAL_SYSTICK_Config+0x24>)
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df2:	4a07      	ldr	r2, [pc, #28]	; (8000e10 <HAL_SYSTICK_Config+0x28>)
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000df4:	6058      	str	r0, [r3, #4]
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df6:	21f0      	movs	r1, #240	; 0xf0
 8000df8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dfc:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dfe:	2207      	movs	r2, #7
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e00:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	4770      	bx	lr
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e06:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	e000e010 	.word	0xe000e010
 8000e10:	e000ed00 	.word	0xe000ed00

08000e14 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000e14:	4b04      	ldr	r3, [pc, #16]	; (8000e28 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000e16:	681a      	ldr	r2, [r3, #0]
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000e18:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000e1a:	bf0c      	ite	eq
 8000e1c:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000e20:	f022 0204 	bicne.w	r2, r2, #4
 8000e24:	601a      	str	r2, [r3, #0]
 8000e26:	4770      	bx	lr
 8000e28:	e000e010 	.word	0xe000e010

08000e2c <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000e2c:	4770      	bx	lr

08000e2e <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000e2e:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000e30:	f7ff fffc 	bl	8000e2c <HAL_SYSTICK_Callback>
 8000e34:	bd08      	pop	{r3, pc}

08000e36 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e36:	b510      	push	{r4, lr}
 8000e38:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000e3a:	f7ff fe41 	bl	8000ac0 <HAL_RCC_GetHCLKFreq>
 8000e3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e42:	fbb0 f0f3 	udiv	r0, r0, r3
 8000e46:	f7ff ffcf 	bl	8000de8 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8000e4a:	f04f 30ff 	mov.w	r0, #4294967295
 8000e4e:	4621      	mov	r1, r4
 8000e50:	2200      	movs	r2, #0
 8000e52:	f7ff ff97 	bl	8000d84 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8000e56:	2000      	movs	r0, #0
 8000e58:	bd10      	pop	{r4, pc}

08000e5a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e5a:	b508      	push	{r3, lr}
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCLERATOR_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e5c:	2003      	movs	r0, #3
 8000e5e:	f7ff ff7f 	bl	8000d60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e62:	2000      	movs	r0, #0
 8000e64:	f7ff ffe7 	bl	8000e36 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000e68:	f7ff f9d5 	bl	8000216 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 8000e6c:	2000      	movs	r0, #0
 8000e6e:	bd08      	pop	{r3, pc}

08000e70 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000e70:	4b02      	ldr	r3, [pc, #8]	; (8000e7c <HAL_IncTick+0xc>)
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	3201      	adds	r2, #1
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	20000020 	.word	0x20000020

08000e80 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000e80:	4b01      	ldr	r3, [pc, #4]	; (8000e88 <HAL_GetTick+0x8>)
 8000e82:	6818      	ldr	r0, [r3, #0]
}
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	20000020 	.word	0x20000020

08000e8c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e8c:	4a0f      	ldr	r2, [pc, #60]	; (8000ecc <SystemInit+0x40>)
 8000e8e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8000e92:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e96:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000e9a:	4b0d      	ldr	r3, [pc, #52]	; (8000ed0 <SystemInit+0x44>)
 8000e9c:	6819      	ldr	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000e9e:	2000      	movs	r0, #0
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000ea0:	f041 0101 	orr.w	r1, r1, #1
 8000ea4:	6019      	str	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000ea6:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000ea8:	6819      	ldr	r1, [r3, #0]
 8000eaa:	f021 7184 	bic.w	r1, r1, #17301504	; 0x1080000
 8000eae:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8000eb2:	6019      	str	r1, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000eb4:	4907      	ldr	r1, [pc, #28]	; (8000ed4 <SystemInit+0x48>)
 8000eb6:	6059      	str	r1, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000eb8:	6819      	ldr	r1, [r3, #0]
 8000eba:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8000ebe:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000ec0:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ec2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000ec6:	6093      	str	r3, [r2, #8]
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	e000ed00 	.word	0xe000ed00
 8000ed0:	40023800 	.word	0x40023800
 8000ed4:	24003010 	.word	0x24003010

08000ed8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ed8:	f8df d03c 	ldr.w	sp, [pc, #60]	; 8000f18 <LoopFillZerobss+0x16>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000edc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000ede:	f000 b804 	b.w	8000eea <LoopCopyDataInit>

08000ee2 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000ee2:	4b0e      	ldr	r3, [pc, #56]	; (8000f1c <LoopFillZerobss+0x1a>)
  ldr  r3, [r3, r1]
 8000ee4:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000ee6:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000ee8:	3104      	adds	r1, #4

08000eea <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000eea:	480d      	ldr	r0, [pc, #52]	; (8000f20 <LoopFillZerobss+0x1e>)
  ldr  r3, =_edata
 8000eec:	4b0d      	ldr	r3, [pc, #52]	; (8000f24 <LoopFillZerobss+0x22>)
  adds  r2, r0, r1
 8000eee:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000ef0:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000ef2:	f4ff aff6 	bcc.w	8000ee2 <CopyDataInit>
  ldr  r2, =_sbss
 8000ef6:	4a0c      	ldr	r2, [pc, #48]	; (8000f28 <LoopFillZerobss+0x26>)
  b  LoopFillZerobss
 8000ef8:	f000 b803 	b.w	8000f02 <LoopFillZerobss>

08000efc <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000efc:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000efe:	f842 3b04 	str.w	r3, [r2], #4

08000f02 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000f02:	4b0a      	ldr	r3, [pc, #40]	; (8000f2c <LoopFillZerobss+0x2a>)
  cmp  r2, r3
 8000f04:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000f06:	f4ff aff9 	bcc.w	8000efc <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f0a:	f7ff ffbf 	bl	8000e8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f0e:	f000 f811 	bl	8000f34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f12:	f7ff fa09 	bl	8000328 <main>
  bx  lr    
 8000f16:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f18:	20050000 	.word	0x20050000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8000f1c:	08000fb0 	.word	0x08000fb0
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000f20:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000f24:	20000004 	.word	0x20000004
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8000f28:	20000004 	.word	0x20000004
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000f2c:	20000024 	.word	0x20000024

08000f30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f30:	f7ff bffe 	b.w	8000f30 <ADC_IRQHandler>

08000f34 <__libc_init_array>:
 8000f34:	b570      	push	{r4, r5, r6, lr}
 8000f36:	4b0e      	ldr	r3, [pc, #56]	; (8000f70 <__libc_init_array+0x3c>)
 8000f38:	4d0e      	ldr	r5, [pc, #56]	; (8000f74 <__libc_init_array+0x40>)
 8000f3a:	1aed      	subs	r5, r5, r3
 8000f3c:	10ad      	asrs	r5, r5, #2
 8000f3e:	2400      	movs	r4, #0
 8000f40:	461e      	mov	r6, r3
 8000f42:	42ac      	cmp	r4, r5
 8000f44:	d004      	beq.n	8000f50 <__libc_init_array+0x1c>
 8000f46:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8000f4a:	4790      	blx	r2
 8000f4c:	3401      	adds	r4, #1
 8000f4e:	e7f8      	b.n	8000f42 <__libc_init_array+0xe>
 8000f50:	f000 f816 	bl	8000f80 <_init>
 8000f54:	4d08      	ldr	r5, [pc, #32]	; (8000f78 <__libc_init_array+0x44>)
 8000f56:	4b09      	ldr	r3, [pc, #36]	; (8000f7c <__libc_init_array+0x48>)
 8000f58:	1aed      	subs	r5, r5, r3
 8000f5a:	10ad      	asrs	r5, r5, #2
 8000f5c:	2400      	movs	r4, #0
 8000f5e:	461e      	mov	r6, r3
 8000f60:	42ac      	cmp	r4, r5
 8000f62:	d004      	beq.n	8000f6e <__libc_init_array+0x3a>
 8000f64:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8000f68:	4790      	blx	r2
 8000f6a:	3401      	adds	r4, #1
 8000f6c:	e7f8      	b.n	8000f60 <__libc_init_array+0x2c>
 8000f6e:	bd70      	pop	{r4, r5, r6, pc}
 8000f70:	08000fa8 	.word	0x08000fa8
 8000f74:	08000fa8 	.word	0x08000fa8
 8000f78:	08000fac 	.word	0x08000fac
 8000f7c:	08000fa8 	.word	0x08000fa8

08000f80 <_init>:
 8000f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f82:	bf00      	nop
 8000f84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f86:	bc08      	pop	{r3}
 8000f88:	469e      	mov	lr, r3
 8000f8a:	4770      	bx	lr

08000f8c <_fini>:
 8000f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f8e:	bf00      	nop
 8000f90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f92:	bc08      	pop	{r3}
 8000f94:	469e      	mov	lr, r3
 8000f96:	4770      	bx	lr
