
C:\Users\sohae\Desktop\STM32F446RET6_HAL\446_FreeOS\Debug\446_FreeOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001eb4  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08002078  08002078  00012078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080020d0  080020d0  000120d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080020d4  080020d4  000120d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000008  20000000  080020d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00003dec  20000008  080020e0  00020008  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20003df4  080020e0  00023df4  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
  9 .debug_line   00005d32  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00010b5f  00000000  00000000  00025d6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000293e  00000000  00000000  000368c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000b60  00000000  00000000  00039208  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000010d0  00000000  00000000  00039d68  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00008410  00000000  00000000  0003ae38  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000045c7  00000000  00000000  00043248  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007e  00000000  00000000  0004780f  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001fe8  00000000  00000000  00047890  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000008 	.word	0x20000008
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002060 	.word	0x08002060

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	08002060 	.word	0x08002060

08000204 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000204:	f8df d034 	ldr.w	sp, [pc, #52]	; 800023c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000208:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800020a:	e003      	b.n	8000214 <LoopCopyDataInit>

0800020c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800020c:	4b0c      	ldr	r3, [pc, #48]	; (8000240 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800020e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000210:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000212:	3104      	adds	r1, #4

08000214 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000214:	480b      	ldr	r0, [pc, #44]	; (8000244 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000216:	4b0c      	ldr	r3, [pc, #48]	; (8000248 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000218:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800021a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800021c:	d3f6      	bcc.n	800020c <CopyDataInit>
  ldr  r2, =_sbss
 800021e:	4a0b      	ldr	r2, [pc, #44]	; (800024c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000220:	e002      	b.n	8000228 <LoopFillZerobss>

08000222 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000222:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000224:	f842 3b04 	str.w	r3, [r2], #4

08000228 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000228:	4b09      	ldr	r3, [pc, #36]	; (8000250 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800022a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800022c:	d3f9      	bcc.n	8000222 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800022e:	f001 fec3 	bl	8001fb8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000232:	f001 fee7 	bl	8002004 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000236:	f001 fd6b 	bl	8001d10 <main>
  bx  lr    
 800023a:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800023c:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8000240:	080020d8 	.word	0x080020d8
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000244:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000248:	20000008 	.word	0x20000008
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 800024c:	20000008 	.word	0x20000008
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000250:	20003df4 	.word	0x20003df4

08000254 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000254:	e7fe      	b.n	8000254 <ADC_IRQHandler>
	...

08000258 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000258:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800025a:	4b0b      	ldr	r3, [pc, #44]	; (8000288 <HAL_Init+0x30>)
 800025c:	681a      	ldr	r2, [r3, #0]
 800025e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000262:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8000264:	681a      	ldr	r2, [r3, #0]
 8000266:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800026a:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800026c:	681a      	ldr	r2, [r3, #0]
 800026e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000272:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000274:	2003      	movs	r0, #3
 8000276:	f000 f817 	bl	80002a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800027a:	2000      	movs	r0, #0
 800027c:	f001 fe50 	bl	8001f20 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000280:	f001 fe02 	bl	8001e88 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 8000284:	2000      	movs	r0, #0
 8000286:	bd08      	pop	{r3, pc}
 8000288:	40023c00 	.word	0x40023c00

0800028c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 800028c:	4a02      	ldr	r2, [pc, #8]	; (8000298 <HAL_IncTick+0xc>)
 800028e:	6813      	ldr	r3, [r2, #0]
 8000290:	3301      	adds	r3, #1
 8000292:	6013      	str	r3, [r2, #0]
 8000294:	4770      	bx	lr
 8000296:	bf00      	nop
 8000298:	20003d6c 	.word	0x20003d6c

0800029c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800029c:	4b01      	ldr	r3, [pc, #4]	; (80002a4 <HAL_GetTick+0x8>)
 800029e:	6818      	ldr	r0, [r3, #0]
}
 80002a0:	4770      	bx	lr
 80002a2:	bf00      	nop
 80002a4:	20003d6c 	.word	0x20003d6c

080002a8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80002a8:	4a07      	ldr	r2, [pc, #28]	; (80002c8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80002aa:	68d3      	ldr	r3, [r2, #12]
 80002ac:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80002b0:	041b      	lsls	r3, r3, #16
 80002b2:	0c1b      	lsrs	r3, r3, #16
 80002b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 80002b8:	0200      	lsls	r0, r0, #8
 80002ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002be:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 80002c2:	4303      	orrs	r3, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 80002c4:	60d3      	str	r3, [r2, #12]
 80002c6:	4770      	bx	lr
 80002c8:	e000ed00 	.word	0xe000ed00

080002cc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002cc:	4b17      	ldr	r3, [pc, #92]	; (800032c <HAL_NVIC_SetPriority+0x60>)
 80002ce:	68db      	ldr	r3, [r3, #12]
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80002d0:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80002d4:	b530      	push	{r4, r5, lr}
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002d6:	f1c3 0407 	rsb	r4, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002da:	1d1d      	adds	r5, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002dc:	2c04      	cmp	r4, #4
 80002de:	bf28      	it	cs
 80002e0:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002e2:	2d06      	cmp	r5, #6

  return (
 80002e4:	f04f 0501 	mov.w	r5, #1
 80002e8:	fa05 f404 	lsl.w	r4, r5, r4
 80002ec:	f104 34ff 	add.w	r4, r4, #4294967295
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002f0:	bf8c      	ite	hi
 80002f2:	3b03      	subhi	r3, #3
 80002f4:	2300      	movls	r3, #0

  return (
 80002f6:	400c      	ands	r4, r1
 80002f8:	409c      	lsls	r4, r3
 80002fa:	fa05 f303 	lsl.w	r3, r5, r3
 80002fe:	3b01      	subs	r3, #1
 8000300:	401a      	ands	r2, r3
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8000302:	2800      	cmp	r0, #0
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8000304:	ea42 0204 	orr.w	r2, r2, r4
 8000308:	ea4f 1202 	mov.w	r2, r2, lsl #4
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800030c:	bfaf      	iteee	ge
 800030e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000312:	f000 000f 	andlt.w	r0, r0, #15
 8000316:	4b06      	ldrlt	r3, [pc, #24]	; (8000330 <HAL_NVIC_SetPriority+0x64>)
 8000318:	b2d2      	uxtblt	r2, r2
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800031a:	bfa5      	ittet	ge
 800031c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000320:	b2d2      	uxtbge	r2, r2
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000322:	541a      	strblt	r2, [r3, r0]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000324:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	bf00      	nop
 800032c:	e000ed00 	.word	0xe000ed00
 8000330:	e000ed14 	.word	0xe000ed14

08000334 <HAL_NVIC_EnableIRQ>:
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000334:	0942      	lsrs	r2, r0, #5
 8000336:	2301      	movs	r3, #1
 8000338:	f000 001f 	and.w	r0, r0, #31
 800033c:	fa03 f000 	lsl.w	r0, r3, r0
 8000340:	4b01      	ldr	r3, [pc, #4]	; (8000348 <HAL_NVIC_EnableIRQ+0x14>)
 8000342:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000346:	4770      	bx	lr
 8000348:	e000e100 	.word	0xe000e100

0800034c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800034c:	3801      	subs	r0, #1
 800034e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000352:	d20a      	bcs.n	800036a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000354:	4b06      	ldr	r3, [pc, #24]	; (8000370 <HAL_SYSTICK_Config+0x24>)
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000356:	4a07      	ldr	r2, [pc, #28]	; (8000374 <HAL_SYSTICK_Config+0x28>)
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000358:	6058      	str	r0, [r3, #4]
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800035a:	21f0      	movs	r1, #240	; 0xf0
 800035c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000360:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000362:	2207      	movs	r2, #7
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000364:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000366:	601a      	str	r2, [r3, #0]
 8000368:	4770      	bx	lr
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
 800036a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800036c:	4770      	bx	lr
 800036e:	bf00      	nop
 8000370:	e000e010 	.word	0xe000e010
 8000374:	e000ed00 	.word	0xe000ed00

08000378 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000378:	4b04      	ldr	r3, [pc, #16]	; (800038c <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800037a:	681a      	ldr	r2, [r3, #0]
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800037c:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800037e:	bf0c      	ite	eq
 8000380:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000384:	f022 0204 	bicne.w	r2, r2, #4
 8000388:	601a      	str	r2, [r3, #0]
 800038a:	4770      	bx	lr
 800038c:	e000e010 	.word	0xe000e010

08000390 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000394:	4f67      	ldr	r7, [pc, #412]	; (8000534 <HAL_GPIO_Init+0x1a4>)
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000396:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000398:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 800053c <HAL_GPIO_Init+0x1ac>

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800039c:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8000540 <HAL_GPIO_Init+0x1b0>
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80003a0:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80003a2:	2200      	movs	r2, #0
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80003a4:	9301      	str	r3, [sp, #4]
 80003a6:	46be      	mov	lr, r7

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
 80003a8:	2401      	movs	r4, #1
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if(iocurrent == ioposition)
 80003aa:	9b01      	ldr	r3, [sp, #4]

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
 80003ac:	4094      	lsls	r4, r2
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if(iocurrent == ioposition)
 80003ae:	ea34 0303 	bics.w	r3, r4, r3
 80003b2:	f040 80b7 	bne.w	8000524 <HAL_GPIO_Init+0x194>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80003b6:	684d      	ldr	r5, [r1, #4]
 80003b8:	f025 0a10 	bic.w	sl, r5, #16
 80003bc:	f1ba 0f02 	cmp.w	sl, #2
 80003c0:	d114      	bne.n	80003ec <HAL_GPIO_Init+0x5c>
 80003c2:	ea4f 09d2 	mov.w	r9, r2, lsr #3
 80003c6:	eb00 0989 	add.w	r9, r0, r9, lsl #2
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 80003ca:	f002 0b07 	and.w	fp, r2, #7
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80003ce:	f8d9 6020 	ldr.w	r6, [r9, #32]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 80003d2:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80003d6:	230f      	movs	r3, #15
 80003d8:	fa03 f30b 	lsl.w	r3, r3, fp
 80003dc:	ea26 0603 	bic.w	r6, r6, r3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80003e0:	690b      	ldr	r3, [r1, #16]
 80003e2:	fa03 f30b 	lsl.w	r3, r3, fp
 80003e6:	4333      	orrs	r3, r6
        GPIOx->AFR[position >> 3U] = temp;
 80003e8:	f8c9 3020 	str.w	r3, [r9, #32]
 80003ec:	ea4f 0b42 	mov.w	fp, r2, lsl #1
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80003f0:	f04f 0903 	mov.w	r9, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80003f4:	6803      	ldr	r3, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80003f6:	fa09 f90b 	lsl.w	r9, r9, fp
 80003fa:	ea6f 0909 	mvn.w	r9, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80003fe:	f005 0603 	and.w	r6, r5, #3
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000402:	ea03 0309 	and.w	r3, r3, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000406:	fa06 f60b 	lsl.w	r6, r6, fp
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800040a:	f10a 3aff 	add.w	sl, sl, #4294967295
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800040e:	4333      	orrs	r3, r6
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000410:	f1ba 0f01 	cmp.w	sl, #1

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
      GPIOx->MODER = temp;
 8000414:	6003      	str	r3, [r0, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000416:	d80f      	bhi.n	8000438 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000418:	6883      	ldr	r3, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
        temp |= (GPIO_Init->Speed << (position * 2U));
 800041a:	68ce      	ldr	r6, [r1, #12]
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800041c:	ea09 0303 	and.w	r3, r9, r3
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000420:	fa06 f60b 	lsl.w	r6, r6, fp
 8000424:	431e      	orrs	r6, r3
        GPIOx->OSPEEDR = temp;
 8000426:	6086      	str	r6, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000428:	6843      	ldr	r3, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800042a:	f3c5 1600 	ubfx	r6, r5, #4, #1
        temp |= (GPIO_Init->Speed << (position * 2U));
        GPIOx->OSPEEDR = temp;

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800042e:	ea23 0304 	bic.w	r3, r3, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000432:	4096      	lsls	r6, r2
 8000434:	4333      	orrs	r3, r6
        GPIOx->OTYPER = temp;
 8000436:	6043      	str	r3, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000438:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800043a:	ea09 0903 	and.w	r9, r9, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800043e:	688b      	ldr	r3, [r1, #8]
 8000440:	fa03 f30b 	lsl.w	r3, r3, fp
 8000444:	ea43 0309 	orr.w	r3, r3, r9
      GPIOx->PUPDR = temp;
 8000448:	60c3      	str	r3, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800044a:	00eb      	lsls	r3, r5, #3
 800044c:	d56a      	bpl.n	8000524 <HAL_GPIO_Init+0x194>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800044e:	2300      	movs	r3, #0
 8000450:	9303      	str	r3, [sp, #12]
 8000452:	f8dc 6044 	ldr.w	r6, [ip, #68]	; 0x44

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000456:	4b38      	ldr	r3, [pc, #224]	; (8000538 <HAL_GPIO_Init+0x1a8>)
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000458:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 800045c:	f8cc 6044 	str.w	r6, [ip, #68]	; 0x44
 8000460:	f8dc 6044 	ldr.w	r6, [ip, #68]	; 0x44
 8000464:	f022 0903 	bic.w	r9, r2, #3
 8000468:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
 800046c:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8000470:	f509 399c 	add.w	r9, r9, #79872	; 0x13800
 8000474:	9603      	str	r6, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000476:	f002 0a03 	and.w	sl, r2, #3
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800047a:	9e03      	ldr	r6, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800047c:	f8d9 b008 	ldr.w	fp, [r9, #8]
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000480:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8000484:	260f      	movs	r6, #15
 8000486:	fa06 f60a 	lsl.w	r6, r6, sl
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800048a:	4298      	cmp	r0, r3
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 800048c:	ea2b 0606 	bic.w	r6, fp, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000490:	d018      	beq.n	80004c4 <HAL_GPIO_Init+0x134>
 8000492:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000496:	4298      	cmp	r0, r3
 8000498:	d016      	beq.n	80004c8 <HAL_GPIO_Init+0x138>
 800049a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800049e:	4298      	cmp	r0, r3
 80004a0:	d014      	beq.n	80004cc <HAL_GPIO_Init+0x13c>
 80004a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80004a6:	4298      	cmp	r0, r3
 80004a8:	d012      	beq.n	80004d0 <HAL_GPIO_Init+0x140>
 80004aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80004ae:	4298      	cmp	r0, r3
 80004b0:	d010      	beq.n	80004d4 <HAL_GPIO_Init+0x144>
 80004b2:	4540      	cmp	r0, r8
 80004b4:	d010      	beq.n	80004d8 <HAL_GPIO_Init+0x148>
 80004b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80004ba:	4298      	cmp	r0, r3
 80004bc:	bf14      	ite	ne
 80004be:	2307      	movne	r3, #7
 80004c0:	2306      	moveq	r3, #6
 80004c2:	e00a      	b.n	80004da <HAL_GPIO_Init+0x14a>
 80004c4:	2300      	movs	r3, #0
 80004c6:	e008      	b.n	80004da <HAL_GPIO_Init+0x14a>
 80004c8:	2301      	movs	r3, #1
 80004ca:	e006      	b.n	80004da <HAL_GPIO_Init+0x14a>
 80004cc:	2302      	movs	r3, #2
 80004ce:	e004      	b.n	80004da <HAL_GPIO_Init+0x14a>
 80004d0:	2303      	movs	r3, #3
 80004d2:	e002      	b.n	80004da <HAL_GPIO_Init+0x14a>
 80004d4:	2304      	movs	r3, #4
 80004d6:	e000      	b.n	80004da <HAL_GPIO_Init+0x14a>
 80004d8:	2305      	movs	r3, #5
 80004da:	fa03 f30a 	lsl.w	r3, r3, sl
 80004de:	4333      	orrs	r3, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 80004e0:	f8c9 3008 	str.w	r3, [r9, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80004e4:	683b      	ldr	r3, [r7, #0]
        temp &= ~((uint32_t)iocurrent);
 80004e6:	43e6      	mvns	r6, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80004e8:	f415 3f80 	tst.w	r5, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
 80004ec:	bf0c      	ite	eq
 80004ee:	4033      	andeq	r3, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
 80004f0:	4323      	orrne	r3, r4
        }
        EXTI->IMR = temp;
 80004f2:	f8ce 3000 	str.w	r3, [lr]

        temp = EXTI->EMR;
 80004f6:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80004fa:	f415 3f00 	tst.w	r5, #131072	; 0x20000
          temp |= iocurrent;
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
 80004fe:	bf0c      	ite	eq
 8000500:	4033      	andeq	r3, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
 8000502:	4323      	orrne	r3, r4
        }
        EXTI->EMR = temp;
 8000504:	607b      	str	r3, [r7, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000506:	68bb      	ldr	r3, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000508:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        }
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
 800050c:	bf0c      	ite	eq
 800050e:	4033      	andeq	r3, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
 8000510:	4323      	orrne	r3, r4
        }
        EXTI->RTSR = temp;
 8000512:	f8ce 3008 	str.w	r3, [lr, #8]

        temp = EXTI->FTSR;
 8000516:	f8de 300c 	ldr.w	r3, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800051a:	02ad      	lsls	r5, r5, #10
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
 800051c:	bf54      	ite	pl
 800051e:	4033      	andpl	r3, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          temp |= iocurrent;
 8000520:	4323      	orrmi	r3, r4
        }
        EXTI->FTSR = temp;
 8000522:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000524:	3201      	adds	r2, #1
 8000526:	2a10      	cmp	r2, #16
 8000528:	f47f af3e 	bne.w	80003a8 <HAL_GPIO_Init+0x18>
        }
        EXTI->FTSR = temp;
      }
    }
  }
}
 800052c:	b005      	add	sp, #20
 800052e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000532:	bf00      	nop
 8000534:	40013c00 	.word	0x40013c00
 8000538:	40020000 	.word	0x40020000
 800053c:	40023800 	.word	0x40023800
 8000540:	40021400 	.word	0x40021400

08000544 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000544:	b902      	cbnz	r2, 8000548 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000546:	0409      	lsls	r1, r1, #16
 8000548:	6181      	str	r1, [r0, #24]
 800054a:	4770      	bx	lr

0800054c <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 800054c:	6943      	ldr	r3, [r0, #20]
 800054e:	4059      	eors	r1, r3
 8000550:	6141      	str	r1, [r0, #20]
 8000552:	4770      	bx	lr

08000554 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8000554:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 8000556:	2300      	movs	r3, #0
 8000558:	9301      	str	r3, [sp, #4]
 800055a:	4b22      	ldr	r3, [pc, #136]	; (80005e4 <HAL_PWREx_EnableOverDrive+0x90>)
 800055c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800055e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000562:	641a      	str	r2, [r3, #64]	; 0x40
 8000564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000566:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800056a:	9301      	str	r3, [sp, #4]
 800056c:	9b01      	ldr	r3, [sp, #4]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800056e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000572:	fa93 f3a3 	rbit	r3, r3
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000576:	fab3 f383 	clz	r3, r3
 800057a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800057e:	f503 3360 	add.w	r3, r3, #229376	; 0x38000
 8000582:	009b      	lsls	r3, r3, #2
 8000584:	2201      	movs	r2, #1
 8000586:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000588:	f7ff fe88 	bl	800029c <HAL_GetTick>

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800058c:	4c16      	ldr	r4, [pc, #88]	; (80005e8 <HAL_PWREx_EnableOverDrive+0x94>)
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();

  /* Get tick */
  tickstart = HAL_GetTick();
 800058e:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000590:	6863      	ldr	r3, [r4, #4]
 8000592:	03da      	lsls	r2, r3, #15
 8000594:	d407      	bmi.n	80005a6 <HAL_PWREx_EnableOverDrive+0x52>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000596:	f7ff fe81 	bl	800029c <HAL_GetTick>
 800059a:	1b40      	subs	r0, r0, r5
 800059c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80005a0:	d9f6      	bls.n	8000590 <HAL_PWREx_EnableOverDrive+0x3c>
    {
      return HAL_TIMEOUT;
 80005a2:	2003      	movs	r0, #3
 80005a4:	e01b      	b.n	80005de <HAL_PWREx_EnableOverDrive+0x8a>
 80005a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80005aa:	fa93 f3a3 	rbit	r3, r3
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80005ae:	fab3 f383 	clz	r3, r3
 80005b2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80005b6:	f503 3360 	add.w	r3, r3, #229376	; 0x38000
 80005ba:	009b      	lsls	r3, r3, #2
 80005bc:	2201      	movs	r2, #1
 80005be:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80005c0:	f7ff fe6c 	bl	800029c <HAL_GetTick>

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80005c4:	4c08      	ldr	r4, [pc, #32]	; (80005e8 <HAL_PWREx_EnableOverDrive+0x94>)
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();

  /* Get tick */
  tickstart = HAL_GetTick();
 80005c6:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80005c8:	6863      	ldr	r3, [r4, #4]
 80005ca:	039b      	lsls	r3, r3, #14
 80005cc:	d406      	bmi.n	80005dc <HAL_PWREx_EnableOverDrive+0x88>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80005ce:	f7ff fe65 	bl	800029c <HAL_GetTick>
 80005d2:	1b40      	subs	r0, r0, r5
 80005d4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80005d8:	d9f6      	bls.n	80005c8 <HAL_PWREx_EnableOverDrive+0x74>
 80005da:	e7e2      	b.n	80005a2 <HAL_PWREx_EnableOverDrive+0x4e>
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 80005dc:	2000      	movs	r0, #0
}
 80005de:	b003      	add	sp, #12
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	bf00      	nop
 80005e4:	40023800 	.word	0x40023800
 80005e8:	40007000 	.word	0x40007000

080005ec <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80005ec:	4b55      	ldr	r3, [pc, #340]	; (8000744 <HAL_RCC_ClockConfig+0x158>)
 80005ee:	681a      	ldr	r2, [r3, #0]
 80005f0:	f002 020f 	and.w	r2, r2, #15
 80005f4:	428a      	cmp	r2, r1
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80005f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80005fa:	4605      	mov	r5, r0
 80005fc:	460e      	mov	r6, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80005fe:	d30a      	bcc.n	8000616 <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
    }
  }
 
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000600:	6829      	ldr	r1, [r5, #0]
 8000602:	0788      	lsls	r0, r1, #30
 8000604:	d511      	bpl.n	800062a <HAL_RCC_ClockConfig+0x3e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000606:	4850      	ldr	r0, [pc, #320]	; (8000748 <HAL_RCC_ClockConfig+0x15c>)
 8000608:	6883      	ldr	r3, [r0, #8]
 800060a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800060e:	68ab      	ldr	r3, [r5, #8]
 8000610:	4313      	orrs	r3, r2
 8000612:	6083      	str	r3, [r0, #8]
 8000614:	e009      	b.n	800062a <HAL_RCC_ClockConfig+0x3e>
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000616:	b2ca      	uxtb	r2, r1
 8000618:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	f003 030f 	and.w	r3, r3, #15
 8000620:	4299      	cmp	r1, r3
 8000622:	d0ed      	beq.n	8000600 <HAL_RCC_ClockConfig+0x14>
    {
      return HAL_ERROR;
 8000624:	2001      	movs	r0, #1
 8000626:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }
  
  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800062a:	07c9      	lsls	r1, r1, #31
 800062c:	d406      	bmi.n	800063c <HAL_RCC_ClockConfig+0x50>
      }
    }
  }    
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800062e:	4b45      	ldr	r3, [pc, #276]	; (8000744 <HAL_RCC_ClockConfig+0x158>)
 8000630:	681a      	ldr	r2, [r3, #0]
 8000632:	f002 020f 	and.w	r2, r2, #15
 8000636:	4296      	cmp	r6, r2
 8000638:	d351      	bcc.n	80006de <HAL_RCC_ClockConfig+0xf2>
 800063a:	e057      	b.n	80006ec <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800063c:	686b      	ldr	r3, [r5, #4]
 800063e:	4a42      	ldr	r2, [pc, #264]	; (8000748 <HAL_RCC_ClockConfig+0x15c>)
 8000640:	2b01      	cmp	r3, #1
 8000642:	d103      	bne.n	800064c <HAL_RCC_ClockConfig+0x60>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000644:	6812      	ldr	r2, [r2, #0]
 8000646:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800064a:	e008      	b.n	800065e <HAL_RCC_ClockConfig+0x72>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 800064c:	1e99      	subs	r1, r3, #2
 800064e:	2901      	cmp	r1, #1
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000650:	6812      	ldr	r2, [r2, #0]
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8000652:	d802      	bhi.n	800065a <HAL_RCC_ClockConfig+0x6e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000654:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8000658:	e001      	b.n	800065e <HAL_RCC_ClockConfig+0x72>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800065a:	f012 0f02 	tst.w	r2, #2
 800065e:	d0e1      	beq.n	8000624 <HAL_RCC_ClockConfig+0x38>
      {
        return HAL_ERROR;
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000660:	4c39      	ldr	r4, [pc, #228]	; (8000748 <HAL_RCC_ClockConfig+0x15c>)
 8000662:	68a2      	ldr	r2, [r4, #8]
 8000664:	f022 0203 	bic.w	r2, r2, #3
 8000668:	4313      	orrs	r3, r2
 800066a:	60a3      	str	r3, [r4, #8]
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800066c:	f7ff fe16 	bl	800029c <HAL_GetTick>
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000670:	686b      	ldr	r3, [r5, #4]
 8000672:	2b01      	cmp	r3, #1
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8000674:	4607      	mov	r7, r0
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000676:	f241 3888 	movw	r8, #5000	; 0x1388
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800067a:	d10c      	bne.n	8000696 <HAL_RCC_ClockConfig+0xaa>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800067c:	68a3      	ldr	r3, [r4, #8]
 800067e:	f003 030c 	and.w	r3, r3, #12
 8000682:	2b04      	cmp	r3, #4
 8000684:	d0d3      	beq.n	800062e <HAL_RCC_ClockConfig+0x42>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000686:	f7ff fe09 	bl	800029c <HAL_GetTick>
 800068a:	1bc0      	subs	r0, r0, r7
 800068c:	4540      	cmp	r0, r8
 800068e:	d9f5      	bls.n	800067c <HAL_RCC_ClockConfig+0x90>
        {
          return HAL_TIMEOUT;
 8000690:	2003      	movs	r0, #3
 8000692:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000696:	2b02      	cmp	r3, #2
 8000698:	d10a      	bne.n	80006b0 <HAL_RCC_ClockConfig+0xc4>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800069a:	68a3      	ldr	r3, [r4, #8]
 800069c:	f003 030c 	and.w	r3, r3, #12
 80006a0:	2b08      	cmp	r3, #8
 80006a2:	d0c4      	beq.n	800062e <HAL_RCC_ClockConfig+0x42>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80006a4:	f7ff fdfa 	bl	800029c <HAL_GetTick>
 80006a8:	1bc0      	subs	r0, r0, r7
 80006aa:	4540      	cmp	r0, r8
 80006ac:	d9f5      	bls.n	800069a <HAL_RCC_ClockConfig+0xae>
 80006ae:	e7ef      	b.n	8000690 <HAL_RCC_ClockConfig+0xa4>
        {
          return HAL_TIMEOUT;
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 80006b0:	2b03      	cmp	r3, #3
 80006b2:	d10f      	bne.n	80006d4 <HAL_RCC_ClockConfig+0xe8>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 80006b4:	68a3      	ldr	r3, [r4, #8]
 80006b6:	f003 030c 	and.w	r3, r3, #12
 80006ba:	2b0c      	cmp	r3, #12
 80006bc:	d0b7      	beq.n	800062e <HAL_RCC_ClockConfig+0x42>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80006be:	f7ff fded 	bl	800029c <HAL_GetTick>
 80006c2:	1bc0      	subs	r0, r0, r7
 80006c4:	4540      	cmp	r0, r8
 80006c6:	d9f5      	bls.n	80006b4 <HAL_RCC_ClockConfig+0xc8>
 80006c8:	e7e2      	b.n	8000690 <HAL_RCC_ClockConfig+0xa4>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80006ca:	f7ff fde7 	bl	800029c <HAL_GetTick>
 80006ce:	1bc0      	subs	r0, r0, r7
 80006d0:	4540      	cmp	r0, r8
 80006d2:	d8dd      	bhi.n	8000690 <HAL_RCC_ClockConfig+0xa4>
        }
      }
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80006d4:	68a3      	ldr	r3, [r4, #8]
 80006d6:	f013 0f0c 	tst.w	r3, #12
 80006da:	d1f6      	bne.n	80006ca <HAL_RCC_ClockConfig+0xde>
 80006dc:	e7a7      	b.n	800062e <HAL_RCC_ClockConfig+0x42>
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
  { 
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80006de:	b2f2      	uxtb	r2, r6
 80006e0:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	f003 030f 	and.w	r3, r3, #15
 80006e8:	429e      	cmp	r6, r3
 80006ea:	d19b      	bne.n	8000624 <HAL_RCC_ClockConfig+0x38>
      return HAL_ERROR;
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80006ec:	6829      	ldr	r1, [r5, #0]
 80006ee:	074a      	lsls	r2, r1, #29
 80006f0:	d506      	bpl.n	8000700 <HAL_RCC_ClockConfig+0x114>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80006f2:	4815      	ldr	r0, [pc, #84]	; (8000748 <HAL_RCC_ClockConfig+0x15c>)
 80006f4:	6883      	ldr	r3, [r0, #8]
 80006f6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80006fa:	68eb      	ldr	r3, [r5, #12]
 80006fc:	4313      	orrs	r3, r2
 80006fe:	6083      	str	r3, [r0, #8]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000700:	070b      	lsls	r3, r1, #28
 8000702:	d507      	bpl.n	8000714 <HAL_RCC_ClockConfig+0x128>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000704:	4a10      	ldr	r2, [pc, #64]	; (8000748 <HAL_RCC_ClockConfig+0x15c>)
 8000706:	6929      	ldr	r1, [r5, #16]
 8000708:	6893      	ldr	r3, [r2, #8]
 800070a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800070e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000712:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8000714:	f000 fa06 	bl	8000b24 <HAL_RCC_GetSysClockFreq>
 8000718:	4b0b      	ldr	r3, [pc, #44]	; (8000748 <HAL_RCC_ClockConfig+0x15c>)
 800071a:	22f0      	movs	r2, #240	; 0xf0
 800071c:	689b      	ldr	r3, [r3, #8]
 800071e:	fa92 f2a2 	rbit	r2, r2
 8000722:	fab2 f282 	clz	r2, r2
 8000726:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800072a:	40d3      	lsrs	r3, r2
 800072c:	4a07      	ldr	r2, [pc, #28]	; (800074c <HAL_RCC_ClockConfig+0x160>)
 800072e:	5cd3      	ldrb	r3, [r2, r3]
 8000730:	40d8      	lsrs	r0, r3
 8000732:	4b07      	ldr	r3, [pc, #28]	; (8000750 <HAL_RCC_ClockConfig+0x164>)
 8000734:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8000736:	2000      	movs	r0, #0
 8000738:	f001 fbf2 	bl	8001f20 <HAL_InitTick>
  
  return HAL_OK;
 800073c:	2000      	movs	r0, #0
}
 800073e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000742:	bf00      	nop
 8000744:	40023c00 	.word	0x40023c00
 8000748:	40023800 	.word	0x40023800
 800074c:	080020a0 	.word	0x080020a0
 8000750:	20000004 	.word	0x20000004

08000754 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8000754:	4b01      	ldr	r3, [pc, #4]	; (800075c <HAL_RCC_GetHCLKFreq+0x8>)
 8000756:	6818      	ldr	r0, [r3, #0]
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop
 800075c:	20000004 	.word	0x20000004

08000760 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8000760:	4b08      	ldr	r3, [pc, #32]	; (8000784 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000762:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8000766:	689b      	ldr	r3, [r3, #8]
 8000768:	fa92 f2a2 	rbit	r2, r2
 800076c:	fab2 f282 	clz	r2, r2
 8000770:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000774:	40d3      	lsrs	r3, r2
 8000776:	4a04      	ldr	r2, [pc, #16]	; (8000788 <HAL_RCC_GetPCLK2Freq+0x28>)
 8000778:	5cd3      	ldrb	r3, [r2, r3]
 800077a:	4a04      	ldr	r2, [pc, #16]	; (800078c <HAL_RCC_GetPCLK2Freq+0x2c>)
 800077c:	6810      	ldr	r0, [r2, #0]
} 
 800077e:	40d8      	lsrs	r0, r3
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop
 8000784:	40023800 	.word	0x40023800
 8000788:	080020a0 	.word	0x080020a0
 800078c:	20000004 	.word	0x20000004

08000790 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000790:	230f      	movs	r3, #15
 8000792:	6003      	str	r3, [r0, #0]
   
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8000794:	4b0b      	ldr	r3, [pc, #44]	; (80007c4 <HAL_RCC_GetClockConfig+0x34>)
 8000796:	689a      	ldr	r2, [r3, #8]
 8000798:	f002 0203 	and.w	r2, r2, #3
 800079c:	6042      	str	r2, [r0, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 800079e:	689a      	ldr	r2, [r3, #8]
 80007a0:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80007a4:	6082      	str	r2, [r0, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 80007a6:	689a      	ldr	r2, [r3, #8]
 80007a8:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 80007ac:	60c2      	str	r2, [r0, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80007ae:	689b      	ldr	r3, [r3, #8]
 80007b0:	08db      	lsrs	r3, r3, #3
 80007b2:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80007b6:	6103      	str	r3, [r0, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 80007b8:	4b03      	ldr	r3, [pc, #12]	; (80007c8 <HAL_RCC_GetClockConfig+0x38>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	f003 030f 	and.w	r3, r3, #15
 80007c0:	600b      	str	r3, [r1, #0]
 80007c2:	4770      	bx	lr
 80007c4:	40023800 	.word	0x40023800
 80007c8:	40023c00 	.word	0x40023c00

080007cc <HAL_RCC_OscConfig>:
  uint32_t tickstart = 0U;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80007cc:	6803      	ldr	r3, [r0, #0]
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature 
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80007ce:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart = 0U;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80007d2:	07de      	lsls	r6, r3, #31
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature 
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80007d4:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80007d6:	d403      	bmi.n	80007e0 <HAL_RCC_OscConfig+0x14>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80007d8:	6823      	ldr	r3, [r4, #0]
 80007da:	079d      	lsls	r5, r3, #30
 80007dc:	d458      	bmi.n	8000890 <HAL_RCC_OscConfig+0xc4>
 80007de:	e0b1      	b.n	8000944 <HAL_RCC_OscConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80007e0:	4b97      	ldr	r3, [pc, #604]	; (8000a40 <HAL_RCC_OscConfig+0x274>)
 80007e2:	689a      	ldr	r2, [r3, #8]
 80007e4:	f002 020c 	and.w	r2, r2, #12
 80007e8:	2a04      	cmp	r2, #4
 80007ea:	d010      	beq.n	800080e <HAL_RCC_OscConfig+0x42>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80007ec:	689a      	ldr	r2, [r3, #8]
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80007ee:	f002 020c 	and.w	r2, r2, #12
 80007f2:	2a08      	cmp	r2, #8
 80007f4:	d102      	bne.n	80007fc <HAL_RCC_OscConfig+0x30>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80007f6:	685b      	ldr	r3, [r3, #4]
 80007f8:	0258      	lsls	r0, r3, #9
 80007fa:	d408      	bmi.n	800080e <HAL_RCC_OscConfig+0x42>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80007fc:	4b90      	ldr	r3, [pc, #576]	; (8000a40 <HAL_RCC_OscConfig+0x274>)
 80007fe:	689a      	ldr	r2, [r3, #8]
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8000800:	f002 020c 	and.w	r2, r2, #12
 8000804:	2a0c      	cmp	r2, #12
 8000806:	d10b      	bne.n	8000820 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000808:	685a      	ldr	r2, [r3, #4]
 800080a:	0251      	lsls	r1, r2, #9
 800080c:	d508      	bpl.n	8000820 <HAL_RCC_OscConfig+0x54>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800080e:	4b8c      	ldr	r3, [pc, #560]	; (8000a40 <HAL_RCC_OscConfig+0x274>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	039a      	lsls	r2, r3, #14
 8000814:	d5e0      	bpl.n	80007d8 <HAL_RCC_OscConfig+0xc>
 8000816:	6863      	ldr	r3, [r4, #4]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d1dd      	bne.n	80007d8 <HAL_RCC_OscConfig+0xc>
      {
        return HAL_ERROR;
 800081c:	2001      	movs	r0, #1
 800081e:	e17a      	b.n	8000b16 <HAL_RCC_OscConfig+0x34a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000820:	6862      	ldr	r2, [r4, #4]
 8000822:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8000826:	d104      	bne.n	8000832 <HAL_RCC_OscConfig+0x66>
 8000828:	681a      	ldr	r2, [r3, #0]
 800082a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800082e:	601a      	str	r2, [r3, #0]
 8000830:	e014      	b.n	800085c <HAL_RCC_OscConfig+0x90>
 8000832:	4d83      	ldr	r5, [pc, #524]	; (8000a40 <HAL_RCC_OscConfig+0x274>)
 8000834:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8000838:	682b      	ldr	r3, [r5, #0]
 800083a:	d107      	bne.n	800084c <HAL_RCC_OscConfig+0x80>
 800083c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000840:	602b      	str	r3, [r5, #0]
 8000842:	682b      	ldr	r3, [r5, #0]
 8000844:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000848:	602b      	str	r3, [r5, #0]
 800084a:	e007      	b.n	800085c <HAL_RCC_OscConfig+0x90>
 800084c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000850:	602b      	str	r3, [r5, #0]
 8000852:	682b      	ldr	r3, [r5, #0]
 8000854:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000858:	602b      	str	r3, [r5, #0]
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800085a:	b16a      	cbz	r2, 8000878 <HAL_RCC_OscConfig+0xac>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800085c:	f7ff fd1e 	bl	800029c <HAL_GetTick>
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000860:	4d77      	ldr	r5, [pc, #476]	; (8000a40 <HAL_RCC_OscConfig+0x274>)
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000862:	4606      	mov	r6, r0
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000864:	682b      	ldr	r3, [r5, #0]
 8000866:	039b      	lsls	r3, r3, #14
 8000868:	d4b6      	bmi.n	80007d8 <HAL_RCC_OscConfig+0xc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800086a:	f7ff fd17 	bl	800029c <HAL_GetTick>
 800086e:	1b80      	subs	r0, r0, r6
 8000870:	2864      	cmp	r0, #100	; 0x64
 8000872:	d9f7      	bls.n	8000864 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_TIMEOUT;
 8000874:	2003      	movs	r0, #3
 8000876:	e14e      	b.n	8000b16 <HAL_RCC_OscConfig+0x34a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000878:	f7ff fd10 	bl	800029c <HAL_GetTick>
 800087c:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800087e:	682b      	ldr	r3, [r5, #0]
 8000880:	039f      	lsls	r7, r3, #14
 8000882:	d5a9      	bpl.n	80007d8 <HAL_RCC_OscConfig+0xc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000884:	f7ff fd0a 	bl	800029c <HAL_GetTick>
 8000888:	1b80      	subs	r0, r0, r6
 800088a:	2864      	cmp	r0, #100	; 0x64
 800088c:	d9f7      	bls.n	800087e <HAL_RCC_OscConfig+0xb2>
 800088e:	e7f1      	b.n	8000874 <HAL_RCC_OscConfig+0xa8>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8000890:	4b6b      	ldr	r3, [pc, #428]	; (8000a40 <HAL_RCC_OscConfig+0x274>)
 8000892:	689a      	ldr	r2, [r3, #8]
 8000894:	f012 0f0c 	tst.w	r2, #12
 8000898:	d010      	beq.n	80008bc <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800089a:	689a      	ldr	r2, [r3, #8]
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800089c:	f002 020c 	and.w	r2, r2, #12
 80008a0:	2a08      	cmp	r2, #8
 80008a2:	d102      	bne.n	80008aa <HAL_RCC_OscConfig+0xde>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80008a4:	685b      	ldr	r3, [r3, #4]
 80008a6:	0258      	lsls	r0, r3, #9
 80008a8:	d508      	bpl.n	80008bc <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80008aa:	4a65      	ldr	r2, [pc, #404]	; (8000a40 <HAL_RCC_OscConfig+0x274>)
 80008ac:	6893      	ldr	r3, [r2, #8]
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80008ae:	f003 030c 	and.w	r3, r3, #12
 80008b2:	2b0c      	cmp	r3, #12
 80008b4:	d117      	bne.n	80008e6 <HAL_RCC_OscConfig+0x11a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80008b6:	6853      	ldr	r3, [r2, #4]
 80008b8:	0259      	lsls	r1, r3, #9
 80008ba:	d414      	bmi.n	80008e6 <HAL_RCC_OscConfig+0x11a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80008bc:	4b60      	ldr	r3, [pc, #384]	; (8000a40 <HAL_RCC_OscConfig+0x274>)
 80008be:	681a      	ldr	r2, [r3, #0]
 80008c0:	0792      	lsls	r2, r2, #30
 80008c2:	d502      	bpl.n	80008ca <HAL_RCC_OscConfig+0xfe>
 80008c4:	68e2      	ldr	r2, [r4, #12]
 80008c6:	2a01      	cmp	r2, #1
 80008c8:	d1a8      	bne.n	800081c <HAL_RCC_OscConfig+0x50>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80008ca:	681a      	ldr	r2, [r3, #0]
 80008cc:	21f8      	movs	r1, #248	; 0xf8
 80008ce:	fa91 f1a1 	rbit	r1, r1
 80008d2:	6920      	ldr	r0, [r4, #16]
 80008d4:	fab1 f181 	clz	r1, r1
 80008d8:	fa00 f101 	lsl.w	r1, r0, r1
 80008dc:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80008e0:	430a      	orrs	r2, r1
 80008e2:	601a      	str	r2, [r3, #0]
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80008e4:	e02e      	b.n	8000944 <HAL_RCC_OscConfig+0x178>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80008e6:	68e2      	ldr	r2, [r4, #12]
 80008e8:	4b56      	ldr	r3, [pc, #344]	; (8000a44 <HAL_RCC_OscConfig+0x278>)
 80008ea:	b1ea      	cbz	r2, 8000928 <HAL_RCC_OscConfig+0x15c>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80008ec:	2201      	movs	r2, #1
 80008ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80008f0:	f7ff fcd4 	bl	800029c <HAL_GetTick>

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008f4:	4d52      	ldr	r5, [pc, #328]	; (8000a40 <HAL_RCC_OscConfig+0x274>)
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80008f6:	4606      	mov	r6, r0

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008f8:	682b      	ldr	r3, [r5, #0]
 80008fa:	4851      	ldr	r0, [pc, #324]	; (8000a40 <HAL_RCC_OscConfig+0x274>)
 80008fc:	079b      	lsls	r3, r3, #30
 80008fe:	d405      	bmi.n	800090c <HAL_RCC_OscConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000900:	f7ff fccc 	bl	800029c <HAL_GetTick>
 8000904:	1b80      	subs	r0, r0, r6
 8000906:	2802      	cmp	r0, #2
 8000908:	d9f6      	bls.n	80008f8 <HAL_RCC_OscConfig+0x12c>
 800090a:	e7b3      	b.n	8000874 <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
          }       
        } 
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800090c:	6803      	ldr	r3, [r0, #0]
 800090e:	22f8      	movs	r2, #248	; 0xf8
 8000910:	fa92 f2a2 	rbit	r2, r2
 8000914:	6921      	ldr	r1, [r4, #16]
 8000916:	fab2 f282 	clz	r2, r2
 800091a:	fa01 f202 	lsl.w	r2, r1, r2
 800091e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000922:	4313      	orrs	r3, r2
 8000924:	6003      	str	r3, [r0, #0]
 8000926:	e00d      	b.n	8000944 <HAL_RCC_OscConfig+0x178>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000928:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800092a:	f7ff fcb7 	bl	800029c <HAL_GetTick>
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800092e:	4d44      	ldr	r5, [pc, #272]	; (8000a40 <HAL_RCC_OscConfig+0x274>)
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000930:	4606      	mov	r6, r0
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000932:	682b      	ldr	r3, [r5, #0]
 8000934:	079f      	lsls	r7, r3, #30
 8000936:	d505      	bpl.n	8000944 <HAL_RCC_OscConfig+0x178>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000938:	f7ff fcb0 	bl	800029c <HAL_GetTick>
 800093c:	1b80      	subs	r0, r0, r6
 800093e:	2802      	cmp	r0, #2
 8000940:	d9f7      	bls.n	8000932 <HAL_RCC_OscConfig+0x166>
 8000942:	e797      	b.n	8000874 <HAL_RCC_OscConfig+0xa8>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000944:	6823      	ldr	r3, [r4, #0]
 8000946:	071e      	lsls	r6, r3, #28
 8000948:	d403      	bmi.n	8000952 <HAL_RCC_OscConfig+0x186>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800094a:	6823      	ldr	r3, [r4, #0]
 800094c:	075d      	lsls	r5, r3, #29
 800094e:	d548      	bpl.n	80009e2 <HAL_RCC_OscConfig+0x216>
 8000950:	e01f      	b.n	8000992 <HAL_RCC_OscConfig+0x1c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000952:	6962      	ldr	r2, [r4, #20]
 8000954:	4b3c      	ldr	r3, [pc, #240]	; (8000a48 <HAL_RCC_OscConfig+0x27c>)
 8000956:	b172      	cbz	r2, 8000976 <HAL_RCC_OscConfig+0x1aa>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000958:	2201      	movs	r2, #1
 800095a:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800095c:	f7ff fc9e 	bl	800029c <HAL_GetTick>
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000960:	4d37      	ldr	r5, [pc, #220]	; (8000a40 <HAL_RCC_OscConfig+0x274>)
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000962:	4606      	mov	r6, r0
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000964:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000966:	0798      	lsls	r0, r3, #30
 8000968:	d4ef      	bmi.n	800094a <HAL_RCC_OscConfig+0x17e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800096a:	f7ff fc97 	bl	800029c <HAL_GetTick>
 800096e:	1b80      	subs	r0, r0, r6
 8000970:	2802      	cmp	r0, #2
 8000972:	d9f7      	bls.n	8000964 <HAL_RCC_OscConfig+0x198>
 8000974:	e77e      	b.n	8000874 <HAL_RCC_OscConfig+0xa8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000976:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000978:	f7ff fc90 	bl	800029c <HAL_GetTick>
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800097c:	4d30      	ldr	r5, [pc, #192]	; (8000a40 <HAL_RCC_OscConfig+0x274>)
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800097e:	4606      	mov	r6, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000980:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000982:	0799      	lsls	r1, r3, #30
 8000984:	d5e1      	bpl.n	800094a <HAL_RCC_OscConfig+0x17e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000986:	f7ff fc89 	bl	800029c <HAL_GetTick>
 800098a:	1b80      	subs	r0, r0, r6
 800098c:	2802      	cmp	r0, #2
 800098e:	d9f7      	bls.n	8000980 <HAL_RCC_OscConfig+0x1b4>
 8000990:	e770      	b.n	8000874 <HAL_RCC_OscConfig+0xa8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	9301      	str	r3, [sp, #4]
 8000996:	4b2a      	ldr	r3, [pc, #168]	; (8000a40 <HAL_RCC_OscConfig+0x274>)
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8000998:	4d2c      	ldr	r5, [pc, #176]	; (8000a4c <HAL_RCC_OscConfig+0x280>)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800099a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800099c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80009a0:	641a      	str	r2, [r3, #64]	; 0x40
 80009a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009a8:	9301      	str	r3, [sp, #4]
 80009aa:	9b01      	ldr	r3, [sp, #4]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80009ac:	682b      	ldr	r3, [r5, #0]
 80009ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009b2:	602b      	str	r3, [r5, #0]
    
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80009b4:	f7ff fc72 	bl	800029c <HAL_GetTick>
 80009b8:	4606      	mov	r6, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80009ba:	682b      	ldr	r3, [r5, #0]
 80009bc:	05da      	lsls	r2, r3, #23
 80009be:	d513      	bpl.n	80009e8 <HAL_RCC_OscConfig+0x21c>
        return HAL_TIMEOUT;
      }
    }
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80009c0:	68a3      	ldr	r3, [r4, #8]
 80009c2:	4d1f      	ldr	r5, [pc, #124]	; (8000a40 <HAL_RCC_OscConfig+0x274>)
 80009c4:	2b01      	cmp	r3, #1
 80009c6:	d115      	bne.n	80009f4 <HAL_RCC_OscConfig+0x228>
 80009c8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80009ca:	f043 0301 	orr.w	r3, r3, #1
 80009ce:	672b      	str	r3, [r5, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80009d0:	f7ff fc64 	bl	800029c <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80009d4:	4d1a      	ldr	r5, [pc, #104]	; (8000a40 <HAL_RCC_OscConfig+0x274>)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80009d6:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80009d8:	f241 3788 	movw	r7, #5000	; 0x1388
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80009dc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80009de:	079b      	lsls	r3, r3, #30
 80009e0:	d519      	bpl.n	8000a16 <HAL_RCC_OscConfig+0x24a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80009e2:	69a2      	ldr	r2, [r4, #24]
 80009e4:	bba2      	cbnz	r2, 8000a50 <HAL_RCC_OscConfig+0x284>
 80009e6:	e07b      	b.n	8000ae0 <HAL_RCC_OscConfig+0x314>
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80009e8:	f7ff fc58 	bl	800029c <HAL_GetTick>
 80009ec:	1b80      	subs	r0, r0, r6
 80009ee:	2802      	cmp	r0, #2
 80009f0:	d9e3      	bls.n	80009ba <HAL_RCC_OscConfig+0x1ee>
 80009f2:	e73f      	b.n	8000874 <HAL_RCC_OscConfig+0xa8>
        return HAL_TIMEOUT;
      }
    }
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80009f4:	2b05      	cmp	r3, #5
 80009f6:	d104      	bne.n	8000a02 <HAL_RCC_OscConfig+0x236>
 80009f8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80009fa:	f043 0304 	orr.w	r3, r3, #4
 80009fe:	672b      	str	r3, [r5, #112]	; 0x70
 8000a00:	e7e2      	b.n	80009c8 <HAL_RCC_OscConfig+0x1fc>
 8000a02:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000a04:	f022 0201 	bic.w	r2, r2, #1
 8000a08:	672a      	str	r2, [r5, #112]	; 0x70
 8000a0a:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000a0c:	f022 0204 	bic.w	r2, r2, #4
 8000a10:	672a      	str	r2, [r5, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000a12:	b133      	cbz	r3, 8000a22 <HAL_RCC_OscConfig+0x256>
 8000a14:	e7dc      	b.n	80009d0 <HAL_RCC_OscConfig+0x204>
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a16:	f7ff fc41 	bl	800029c <HAL_GetTick>
 8000a1a:	1b80      	subs	r0, r0, r6
 8000a1c:	42b8      	cmp	r0, r7
 8000a1e:	d9dd      	bls.n	80009dc <HAL_RCC_OscConfig+0x210>
 8000a20:	e728      	b.n	8000874 <HAL_RCC_OscConfig+0xa8>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000a22:	f7ff fc3b 	bl	800029c <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a26:	f241 3788 	movw	r7, #5000	; 0x1388
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000a2a:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000a2c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000a2e:	0798      	lsls	r0, r3, #30
 8000a30:	d5d7      	bpl.n	80009e2 <HAL_RCC_OscConfig+0x216>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a32:	f7ff fc33 	bl	800029c <HAL_GetTick>
 8000a36:	1b80      	subs	r0, r0, r6
 8000a38:	42b8      	cmp	r0, r7
 8000a3a:	d9f7      	bls.n	8000a2c <HAL_RCC_OscConfig+0x260>
 8000a3c:	e71a      	b.n	8000874 <HAL_RCC_OscConfig+0xa8>
 8000a3e:	bf00      	nop
 8000a40:	40023800 	.word	0x40023800
 8000a44:	42470000 	.word	0x42470000
 8000a48:	42470e80 	.word	0x42470e80
 8000a4c:	40007000 	.word	0x40007000
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000a50:	4d32      	ldr	r5, [pc, #200]	; (8000b1c <HAL_RCC_OscConfig+0x350>)
 8000a52:	68ab      	ldr	r3, [r5, #8]
 8000a54:	f003 030c 	and.w	r3, r3, #12
 8000a58:	2b08      	cmp	r3, #8
 8000a5a:	f43f aedf 	beq.w	800081c <HAL_RCC_OscConfig+0x50>
 8000a5e:	4e30      	ldr	r6, [pc, #192]	; (8000b20 <HAL_RCC_OscConfig+0x354>)
 8000a60:	2300      	movs	r3, #0
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000a62:	2a02      	cmp	r2, #2
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000a64:	6033      	str	r3, [r6, #0]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000a66:	d14a      	bne.n	8000afe <HAL_RCC_OscConfig+0x332>
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000a68:	f7ff fc18 	bl	800029c <HAL_GetTick>
 8000a6c:	4680      	mov	r8, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000a6e:	682b      	ldr	r3, [r5, #0]
 8000a70:	4f2a      	ldr	r7, [pc, #168]	; (8000b1c <HAL_RCC_OscConfig+0x350>)
 8000a72:	0199      	lsls	r1, r3, #6
 8000a74:	d436      	bmi.n	8000ae4 <HAL_RCC_OscConfig+0x318>
 8000a76:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8000a7a:	fa92 f2a2 	rbit	r2, r2
 8000a7e:	f44f 3340 	mov.w	r3, #196608	; 0x30000
            return HAL_TIMEOUT;
          }
        }        

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000a82:	fab2 fc82 	clz	ip, r2
 8000a86:	fa93 f3a3 	rbit	r3, r3
 8000a8a:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 8000a8e:	fab3 fe83 	clz	lr, r3
 8000a92:	fa91 f1a1 	rbit	r1, r1
 8000a96:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8000a9a:	fab1 f581 	clz	r5, r1
 8000a9e:	fa92 f2a2 	rbit	r2, r2
 8000aa2:	69e3      	ldr	r3, [r4, #28]
 8000aa4:	fab2 f082 	clz	r0, r2
 8000aa8:	6a22      	ldr	r2, [r4, #32]
 8000aaa:	ea43 0102 	orr.w	r1, r3, r2
 8000aae:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000ab0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000ab2:	fa02 f20c 	lsl.w	r2, r2, ip
 8000ab6:	4311      	orrs	r1, r2
 8000ab8:	085a      	lsrs	r2, r3, #1
 8000aba:	3a01      	subs	r2, #1
 8000abc:	fa02 f30e 	lsl.w	r3, r2, lr
 8000ac0:	430b      	orrs	r3, r1
 8000ac2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000ac4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000ac6:	40a9      	lsls	r1, r5
 8000ac8:	430b      	orrs	r3, r1
 8000aca:	4082      	lsls	r2, r0
 8000acc:	4313      	orrs	r3, r2
 8000ace:	607b      	str	r3, [r7, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	6033      	str	r3, [r6, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ad4:	f7ff fbe2 	bl	800029c <HAL_GetTick>
 8000ad8:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	019a      	lsls	r2, r3, #6
 8000ade:	d508      	bpl.n	8000af2 <HAL_RCC_OscConfig+0x326>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8000ae0:	2000      	movs	r0, #0
 8000ae2:	e018      	b.n	8000b16 <HAL_RCC_OscConfig+0x34a>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ae4:	f7ff fbda 	bl	800029c <HAL_GetTick>
 8000ae8:	ebc8 0000 	rsb	r0, r8, r0
 8000aec:	2802      	cmp	r0, #2
 8000aee:	d9be      	bls.n	8000a6e <HAL_RCC_OscConfig+0x2a2>
 8000af0:	e6c0      	b.n	8000874 <HAL_RCC_OscConfig+0xa8>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000af2:	f7ff fbd3 	bl	800029c <HAL_GetTick>
 8000af6:	1b00      	subs	r0, r0, r4
 8000af8:	2802      	cmp	r0, #2
 8000afa:	d9ee      	bls.n	8000ada <HAL_RCC_OscConfig+0x30e>
 8000afc:	e6ba      	b.n	8000874 <HAL_RCC_OscConfig+0xa8>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000afe:	f7ff fbcd 	bl	800029c <HAL_GetTick>
 8000b02:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000b04:	682b      	ldr	r3, [r5, #0]
 8000b06:	019b      	lsls	r3, r3, #6
 8000b08:	d5ea      	bpl.n	8000ae0 <HAL_RCC_OscConfig+0x314>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b0a:	f7ff fbc7 	bl	800029c <HAL_GetTick>
 8000b0e:	1b00      	subs	r0, r0, r4
 8000b10:	2802      	cmp	r0, #2
 8000b12:	d9f7      	bls.n	8000b04 <HAL_RCC_OscConfig+0x338>
 8000b14:	e6ae      	b.n	8000874 <HAL_RCC_OscConfig+0xa8>
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8000b16:	b002      	add	sp, #8
 8000b18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000b1c:	40023800 	.word	0x40023800
 8000b20:	42470060 	.word	0x42470060

08000b24 <HAL_RCC_GetSysClockFreq>:
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000b24:	4930      	ldr	r1, [pc, #192]	; (8000be8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8000b26:	6888      	ldr	r0, [r1, #8]
 8000b28:	f000 000c 	and.w	r0, r0, #12
 8000b2c:	2808      	cmp	r0, #8
 8000b2e:	d008      	beq.n	8000b42 <HAL_RCC_GetSysClockFreq+0x1e>
 8000b30:	280c      	cmp	r0, #12
 8000b32:	d02f      	beq.n	8000b94 <HAL_RCC_GetSysClockFreq+0x70>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000b34:	4a2d      	ldr	r2, [pc, #180]	; (8000bec <HAL_RCC_GetSysClockFreq+0xc8>)
 8000b36:	4b2e      	ldr	r3, [pc, #184]	; (8000bf0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8000b38:	2804      	cmp	r0, #4
 8000b3a:	bf0c      	ite	eq
 8000b3c:	4618      	moveq	r0, r3
 8000b3e:	4610      	movne	r0, r2
 8000b40:	4770      	bx	lr
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000b42:	6848      	ldr	r0, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000b44:	684b      	ldr	r3, [r1, #4]
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000b46:	f000 003f 	and.w	r0, r0, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000b4a:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8000b4e:	f647 72c0 	movw	r2, #32704	; 0x7fc0
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8000b52:	684b      	ldr	r3, [r1, #4]
 8000b54:	fa92 f2a2 	rbit	r2, r2
 8000b58:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8000b5c:	fab2 f282 	clz	r2, r2
 8000b60:	ea01 0103 	and.w	r1, r1, r3
 8000b64:	fa21 f102 	lsr.w	r1, r1, r2
 8000b68:	bf14      	ite	ne
 8000b6a:	4a21      	ldrne	r2, [pc, #132]	; (8000bf0 <HAL_RCC_GetSysClockFreq+0xcc>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8000b6c:	4a1f      	ldreq	r2, [pc, #124]	; (8000bec <HAL_RCC_GetSysClockFreq+0xc8>)
 8000b6e:	fbb2 f0f0 	udiv	r0, r2, r0
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 8000b72:	4a1d      	ldr	r2, [pc, #116]	; (8000be8 <HAL_RCC_GetSysClockFreq+0xc4>)
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8000b74:	fb00 f301 	mul.w	r3, r0, r1
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 8000b78:	6852      	ldr	r2, [r2, #4]
 8000b7a:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8000b7e:	fa90 f0a0 	rbit	r0, r0
 8000b82:	fab0 f080 	clz	r0, r0
      
      sysclockfreq = pllvco/pllp;
 8000b86:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 8000b8a:	fa22 f000 	lsr.w	r0, r2, r0
 8000b8e:	3001      	adds	r0, #1
 8000b90:	0040      	lsls	r0, r0, #1
 8000b92:	e025      	b.n	8000be0 <HAL_RCC_GetSysClockFreq+0xbc>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000b94:	6848      	ldr	r0, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000b96:	684b      	ldr	r3, [r1, #4]
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000b98:	f000 003f 	and.w	r0, r0, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000b9c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8000ba0:	f647 72c0 	movw	r2, #32704	; 0x7fc0
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8000ba4:	684b      	ldr	r3, [r1, #4]
 8000ba6:	fa92 f2a2 	rbit	r2, r2
 8000baa:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8000bae:	fab2 f282 	clz	r2, r2
 8000bb2:	ea01 0103 	and.w	r1, r1, r3
 8000bb6:	fa21 f102 	lsr.w	r1, r1, r2
 8000bba:	bf14      	ite	ne
 8000bbc:	4a0c      	ldrne	r2, [pc, #48]	; (8000bf0 <HAL_RCC_GetSysClockFreq+0xcc>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8000bbe:	4a0b      	ldreq	r2, [pc, #44]	; (8000bec <HAL_RCC_GetSysClockFreq+0xc8>)
 8000bc0:	fbb2 f0f0 	udiv	r0, r2, r0
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> POSITION_VAL(RCC_PLLCFGR_PLLR));
 8000bc4:	4a08      	ldr	r2, [pc, #32]	; (8000be8 <HAL_RCC_GetSysClockFreq+0xc4>)
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8000bc6:	fb00 f301 	mul.w	r3, r0, r1
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> POSITION_VAL(RCC_PLLCFGR_PLLR));
 8000bca:	6852      	ldr	r2, [r2, #4]
 8000bcc:	f04f 40e0 	mov.w	r0, #1879048192	; 0x70000000
 8000bd0:	fa90 f0a0 	rbit	r0, r0
 8000bd4:	fab0 f080 	clz	r0, r0
      
      sysclockfreq = pllvco/pllr;
 8000bd8:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 8000bdc:	fa22 f000 	lsr.w	r0, r2, r0
 8000be0:	fbb3 f0f0 	udiv	r0, r3, r0
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	40023800 	.word	0x40023800
 8000bec:	00f42400 	.word	0x00f42400
 8000bf0:	007a1200 	.word	0x007a1200

08000bf4 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000bf4:	6803      	ldr	r3, [r0, #0]
 8000bf6:	68da      	ldr	r2, [r3, #12]
 8000bf8:	f042 0201 	orr.w	r2, r2, #1
 8000bfc:	60da      	str	r2, [r3, #12]
      
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8000bfe:	681a      	ldr	r2, [r3, #0]
 8000c00:	f042 0201 	orr.w	r2, r2, #1
 8000c04:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
}
 8000c06:	2000      	movs	r0, #0
 8000c08:	4770      	bx	lr

08000c0a <HAL_TIM_ConfigClockSource>:
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
  uint32_t tmpsmcr = 0U;
    
  /* Process Locked */
  __HAL_LOCK(htim);
 8000c0a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8000c0e:	2b01      	cmp	r3, #1
  * @param  sClockSourceConfig: pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral. 
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
 8000c10:	b570      	push	{r4, r5, r6, lr}
 8000c12:	f04f 0302 	mov.w	r3, #2
  uint32_t tmpsmcr = 0U;
    
  /* Process Locked */
  __HAL_LOCK(htim);
 8000c16:	f000 80b0 	beq.w	8000d7a <HAL_TIM_ConfigClockSource+0x170>
  
  htim->State = HAL_TIM_STATE_BUSY;
 8000c1a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
  
  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8000c1e:	6803      	ldr	r3, [r0, #0]
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
  uint32_t tmpsmcr = 0U;
    
  /* Process Locked */
  __HAL_LOCK(htim);
 8000c20:	2201      	movs	r2, #1
 8000c22:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  
  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
  
  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8000c26:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000c28:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8000c2c:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8000c30:	609a      	str	r2, [r3, #8]
  
  switch (sClockSourceConfig->ClockSource)
 8000c32:	680a      	ldr	r2, [r1, #0]
 8000c34:	2a40      	cmp	r2, #64	; 0x40
 8000c36:	d077      	beq.n	8000d28 <HAL_TIM_ConfigClockSource+0x11e>
 8000c38:	d818      	bhi.n	8000c6c <HAL_TIM_ConfigClockSource+0x62>
 8000c3a:	2a10      	cmp	r2, #16
 8000c3c:	f000 808b 	beq.w	8000d56 <HAL_TIM_ConfigClockSource+0x14c>
 8000c40:	d808      	bhi.n	8000c54 <HAL_TIM_ConfigClockSource+0x4a>
 8000c42:	2a00      	cmp	r2, #0
 8000c44:	f040 8093 	bne.w	8000d6e <HAL_TIM_ConfigClockSource+0x164>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0U;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8000c48:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8000c4a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8000c4e:	f042 0207 	orr.w	r2, r2, #7
 8000c52:	e08b      	b.n	8000d6c <HAL_TIM_ConfigClockSource+0x162>
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;
  
  switch (sClockSourceConfig->ClockSource)
 8000c54:	2a20      	cmp	r2, #32
 8000c56:	f000 8084 	beq.w	8000d62 <HAL_TIM_ConfigClockSource+0x158>
 8000c5a:	2a30      	cmp	r2, #48	; 0x30
 8000c5c:	f040 8087 	bne.w	8000d6e <HAL_TIM_ConfigClockSource+0x164>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0U;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8000c60:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8000c62:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8000c66:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 8000c6a:	e07f      	b.n	8000d6c <HAL_TIM_ConfigClockSource+0x162>
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;
  
  switch (sClockSourceConfig->ClockSource)
 8000c6c:	2a70      	cmp	r2, #112	; 0x70
 8000c6e:	d035      	beq.n	8000cdc <HAL_TIM_ConfigClockSource+0xd2>
 8000c70:	d81b      	bhi.n	8000caa <HAL_TIM_ConfigClockSource+0xa0>
 8000c72:	2a50      	cmp	r2, #80	; 0x50
 8000c74:	d041      	beq.n	8000cfa <HAL_TIM_ConfigClockSource+0xf0>
 8000c76:	2a60      	cmp	r2, #96	; 0x60
 8000c78:	d179      	bne.n	8000d6e <HAL_TIM_ConfigClockSource+0x164>
{
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000c7a:	6a1c      	ldr	r4, [r3, #32]

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance, 
 8000c7c:	684d      	ldr	r5, [r1, #4]
 8000c7e:	68ce      	ldr	r6, [r1, #12]
{
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000c80:	f024 0410 	bic.w	r4, r4, #16
 8000c84:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000c86:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8000c88:	6a1a      	ldr	r2, [r3, #32]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8000c8a:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8000c8e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8000c92:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8000c96:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |= (TIM_ICPolarity << 4U);

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8000c9a:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8000c9c:	621a      	str	r2, [r3, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0U;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8000c9e:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8000ca0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8000ca4:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 8000ca8:	e060      	b.n	8000d6c <HAL_TIM_ConfigClockSource+0x162>
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;
  
  switch (sClockSourceConfig->ClockSource)
 8000caa:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8000cae:	d011      	beq.n	8000cd4 <HAL_TIM_ConfigClockSource+0xca>
 8000cb0:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8000cb4:	d15b      	bne.n	8000d6e <HAL_TIM_ConfigClockSource+0x164>
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr = 0U;

  tmpsmcr = TIMx->SMCR;
 8000cb6:	689c      	ldr	r4, [r3, #8]
 8000cb8:	688d      	ldr	r5, [r1, #8]
 8000cba:	684a      	ldr	r2, [r1, #4]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8000cbc:	68c9      	ldr	r1, [r1, #12]
 8000cbe:	432a      	orrs	r2, r5
 8000cc0:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
 8000cc4:	4322      	orrs	r2, r4
 8000cc6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8000cca:	609a      	str	r2, [r3, #8]
      TIM_ETR_SetConfig(htim->Instance, 
                        sClockSourceConfig->ClockPrescaler, 
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8000ccc:	689a      	ldr	r2, [r3, #8]
 8000cce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000cd2:	e04b      	b.n	8000d6c <HAL_TIM_ConfigClockSource+0x162>
    case TIM_CLOCKSOURCE_INTERNAL:
    { 
      assert_param(IS_TIM_INSTANCE(htim->Instance));
      
      /* Disable slave mode to clock the prescaler directly with the internal clock */
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8000cd4:	689a      	ldr	r2, [r3, #8]
 8000cd6:	f022 0207 	bic.w	r2, r2, #7
 8000cda:	e047      	b.n	8000d6c <HAL_TIM_ConfigClockSource+0x162>
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr = 0U;

  tmpsmcr = TIMx->SMCR;
 8000cdc:	689c      	ldr	r4, [r3, #8]
 8000cde:	688d      	ldr	r5, [r1, #8]
 8000ce0:	684a      	ldr	r2, [r1, #4]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8000ce2:	68c9      	ldr	r1, [r1, #12]
 8000ce4:	432a      	orrs	r2, r5
 8000ce6:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
 8000cea:	4322      	orrs	r2, r4
 8000cec:	ea42 2201 	orr.w	r2, r2, r1, lsl #8

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8000cf0:	609a      	str	r2, [r3, #8]
      TIM_ETR_SetConfig(htim->Instance, 
                        sClockSourceConfig->ClockPrescaler, 
                        sClockSourceConfig->ClockPolarity, 
                        sClockSourceConfig->ClockFilter);
      /* Get the TIMx SMCR register value */
      tmpsmcr = htim->Instance->SMCR;
 8000cf2:	689a      	ldr	r2, [r3, #8]
      /* Reset the SMS and TS Bits */
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8000cf4:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 8000cf8:	e038      	b.n	8000d6c <HAL_TIM_ConfigClockSource+0x162>
{
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8000cfa:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000cfc:	6a1c      	ldr	r4, [r3, #32]

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance, 
 8000cfe:	684d      	ldr	r5, [r1, #4]
 8000d00:	68ce      	ldr	r6, [r1, #12]
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000d02:	f024 0401 	bic.w	r4, r4, #1
 8000d06:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8000d08:	6999      	ldr	r1, [r3, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000d0a:	f022 020a 	bic.w	r2, r2, #10
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;    
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000d0e:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;
 8000d12:	432a      	orrs	r2, r5
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;    
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8000d14:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8000d18:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8000d1a:	621a      	str	r2, [r3, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0U;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8000d1c:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8000d1e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8000d22:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 8000d26:	e021      	b.n	8000d6c <HAL_TIM_ConfigClockSource+0x162>
{
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8000d28:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000d2a:	6a1c      	ldr	r4, [r3, #32]

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance, 
 8000d2c:	684d      	ldr	r5, [r1, #4]
 8000d2e:	68ce      	ldr	r6, [r1, #12]
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000d30:	f024 0401 	bic.w	r4, r4, #1
 8000d34:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8000d36:	6999      	ldr	r1, [r3, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000d38:	f022 020a 	bic.w	r2, r2, #10
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;    
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000d3c:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;
 8000d40:	432a      	orrs	r2, r5
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;    
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8000d42:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8000d46:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8000d48:	621a      	str	r2, [r3, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0U;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8000d4a:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8000d4c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8000d50:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 8000d54:	e00a      	b.n	8000d6c <HAL_TIM_ConfigClockSource+0x162>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0U;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8000d56:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8000d58:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8000d5c:	f042 0217 	orr.w	r2, r2, #23
 8000d60:	e004      	b.n	8000d6c <HAL_TIM_ConfigClockSource+0x162>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0U;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8000d62:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8000d64:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8000d68:	f042 0227 	orr.w	r2, r2, #39	; 0x27
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8000d6c:	609a      	str	r2, [r3, #8]
    break;
    
    default:
    break;    
  }
  htim->State = HAL_TIM_STATE_READY;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8000d74:	2300      	movs	r3, #0
 8000d76:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
  uint32_t tmpsmcr = 0U;
    
  /* Process Locked */
  __HAL_LOCK(htim);
 8000d7a:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
  
  __HAL_UNLOCK(htim);
  
  return HAL_OK;
}
 8000d7c:	bd70      	pop	{r4, r5, r6, pc}

08000d7e <HAL_TIM_OC_DelayElapsedCallback>:
 8000d7e:	4770      	bx	lr

08000d80 <HAL_TIM_IC_CaptureCallback>:
 8000d80:	4770      	bx	lr

08000d82 <HAL_TIM_PWM_PulseFinishedCallback>:
 8000d82:	4770      	bx	lr

08000d84 <HAL_TIM_TriggerCallback>:
 8000d84:	4770      	bx	lr

08000d86 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000d86:	6803      	ldr	r3, [r0, #0]
 8000d88:	691a      	ldr	r2, [r3, #16]
 8000d8a:	0791      	lsls	r1, r2, #30
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8000d8c:	b510      	push	{r4, lr}
 8000d8e:	4604      	mov	r4, r0
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000d90:	d514      	bpl.n	8000dbc <HAL_TIM_IRQHandler+0x36>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8000d92:	68da      	ldr	r2, [r3, #12]
 8000d94:	0792      	lsls	r2, r2, #30
 8000d96:	d511      	bpl.n	8000dbc <HAL_TIM_IRQHandler+0x36>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8000d98:	f06f 0202 	mvn.w	r2, #2
 8000d9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000d9e:	699b      	ldr	r3, [r3, #24]
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000da0:	2201      	movs	r2, #1
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000da2:	079b      	lsls	r3, r3, #30
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000da4:	7602      	strb	r2, [r0, #24]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000da6:	d002      	beq.n	8000dae <HAL_TIM_IRQHandler+0x28>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8000da8:	f7ff ffea 	bl	8000d80 <HAL_TIM_IC_CaptureCallback>
 8000dac:	e004      	b.n	8000db8 <HAL_TIM_IRQHandler+0x32>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8000dae:	f7ff ffe6 	bl	8000d7e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000db2:	4620      	mov	r0, r4
 8000db4:	f7ff ffe5 	bl	8000d82 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000db8:	2300      	movs	r3, #0
 8000dba:	7623      	strb	r3, [r4, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8000dbc:	6823      	ldr	r3, [r4, #0]
 8000dbe:	691a      	ldr	r2, [r3, #16]
 8000dc0:	0750      	lsls	r0, r2, #29
 8000dc2:	d516      	bpl.n	8000df2 <HAL_TIM_IRQHandler+0x6c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8000dc4:	68da      	ldr	r2, [r3, #12]
 8000dc6:	0751      	lsls	r1, r2, #29
 8000dc8:	d513      	bpl.n	8000df2 <HAL_TIM_IRQHandler+0x6c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8000dca:	f06f 0204 	mvn.w	r2, #4
 8000dce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000dd0:	699b      	ldr	r3, [r3, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000dd2:	2202      	movs	r2, #2
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000dd4:	f413 7f40 	tst.w	r3, #768	; 0x300
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000dd8:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8000dda:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000ddc:	d002      	beq.n	8000de4 <HAL_TIM_IRQHandler+0x5e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8000dde:	f7ff ffcf 	bl	8000d80 <HAL_TIM_IC_CaptureCallback>
 8000de2:	e004      	b.n	8000dee <HAL_TIM_IRQHandler+0x68>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000de4:	f7ff ffcb 	bl	8000d7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000de8:	4620      	mov	r0, r4
 8000dea:	f7ff ffca 	bl	8000d82 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000dee:	2300      	movs	r3, #0
 8000df0:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8000df2:	6823      	ldr	r3, [r4, #0]
 8000df4:	691a      	ldr	r2, [r3, #16]
 8000df6:	0712      	lsls	r2, r2, #28
 8000df8:	d515      	bpl.n	8000e26 <HAL_TIM_IRQHandler+0xa0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8000dfa:	68da      	ldr	r2, [r3, #12]
 8000dfc:	0710      	lsls	r0, r2, #28
 8000dfe:	d512      	bpl.n	8000e26 <HAL_TIM_IRQHandler+0xa0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8000e00:	f06f 0208 	mvn.w	r2, #8
 8000e04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000e06:	69db      	ldr	r3, [r3, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000e08:	2204      	movs	r2, #4
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000e0a:	0799      	lsls	r1, r3, #30
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000e0c:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8000e0e:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000e10:	d002      	beq.n	8000e18 <HAL_TIM_IRQHandler+0x92>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8000e12:	f7ff ffb5 	bl	8000d80 <HAL_TIM_IC_CaptureCallback>
 8000e16:	e004      	b.n	8000e22 <HAL_TIM_IRQHandler+0x9c>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000e18:	f7ff ffb1 	bl	8000d7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8000e1c:	4620      	mov	r0, r4
 8000e1e:	f7ff ffb0 	bl	8000d82 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000e22:	2300      	movs	r3, #0
 8000e24:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8000e26:	6823      	ldr	r3, [r4, #0]
 8000e28:	691a      	ldr	r2, [r3, #16]
 8000e2a:	06d2      	lsls	r2, r2, #27
 8000e2c:	d516      	bpl.n	8000e5c <HAL_TIM_IRQHandler+0xd6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8000e2e:	68da      	ldr	r2, [r3, #12]
 8000e30:	06d0      	lsls	r0, r2, #27
 8000e32:	d513      	bpl.n	8000e5c <HAL_TIM_IRQHandler+0xd6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8000e34:	f06f 0210 	mvn.w	r2, #16
 8000e38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000e3a:	69db      	ldr	r3, [r3, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000e3c:	2208      	movs	r2, #8
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000e3e:	f413 7f40 	tst.w	r3, #768	; 0x300
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000e42:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8000e44:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000e46:	d002      	beq.n	8000e4e <HAL_TIM_IRQHandler+0xc8>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8000e48:	f7ff ff9a 	bl	8000d80 <HAL_TIM_IC_CaptureCallback>
 8000e4c:	e004      	b.n	8000e58 <HAL_TIM_IRQHandler+0xd2>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000e4e:	f7ff ff96 	bl	8000d7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000e52:	4620      	mov	r0, r4
 8000e54:	f7ff ff95 	bl	8000d82 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	7623      	strb	r3, [r4, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8000e5c:	6823      	ldr	r3, [r4, #0]
 8000e5e:	691a      	ldr	r2, [r3, #16]
 8000e60:	07d1      	lsls	r1, r2, #31
 8000e62:	d508      	bpl.n	8000e76 <HAL_TIM_IRQHandler+0xf0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8000e64:	68da      	ldr	r2, [r3, #12]
 8000e66:	07d2      	lsls	r2, r2, #31
 8000e68:	d505      	bpl.n	8000e76 <HAL_TIM_IRQHandler+0xf0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8000e6a:	f06f 0201 	mvn.w	r2, #1
 8000e6e:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8000e70:	4620      	mov	r0, r4
 8000e72:	f000 fff7 	bl	8001e64 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8000e76:	6823      	ldr	r3, [r4, #0]
 8000e78:	691a      	ldr	r2, [r3, #16]
 8000e7a:	0610      	lsls	r0, r2, #24
 8000e7c:	d508      	bpl.n	8000e90 <HAL_TIM_IRQHandler+0x10a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8000e7e:	68da      	ldr	r2, [r3, #12]
 8000e80:	0611      	lsls	r1, r2, #24
 8000e82:	d505      	bpl.n	8000e90 <HAL_TIM_IRQHandler+0x10a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8000e84:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8000e88:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8000e8a:	4620      	mov	r0, r4
 8000e8c:	f000 f8bf 	bl	800100e <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8000e90:	6823      	ldr	r3, [r4, #0]
 8000e92:	691a      	ldr	r2, [r3, #16]
 8000e94:	0652      	lsls	r2, r2, #25
 8000e96:	d508      	bpl.n	8000eaa <HAL_TIM_IRQHandler+0x124>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8000e98:	68da      	ldr	r2, [r3, #12]
 8000e9a:	0650      	lsls	r0, r2, #25
 8000e9c:	d505      	bpl.n	8000eaa <HAL_TIM_IRQHandler+0x124>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8000e9e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8000ea2:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8000ea4:	4620      	mov	r0, r4
 8000ea6:	f7ff ff6d 	bl	8000d84 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8000eaa:	6823      	ldr	r3, [r4, #0]
 8000eac:	691a      	ldr	r2, [r3, #16]
 8000eae:	0691      	lsls	r1, r2, #26
 8000eb0:	d50a      	bpl.n	8000ec8 <HAL_TIM_IRQHandler+0x142>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8000eb2:	68da      	ldr	r2, [r3, #12]
 8000eb4:	0692      	lsls	r2, r2, #26
 8000eb6:	d507      	bpl.n	8000ec8 <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000eb8:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8000ebc:	4620      	mov	r0, r4
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000ebe:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
    }
  }
}
 8000ec0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
      HAL_TIMEx_CommutationCallback(htim);
 8000ec4:	f000 b8a2 	b.w	800100c <HAL_TIMEx_CommutationCallback>
 8000ec8:	bd10      	pop	{r4, pc}
	...

08000ecc <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8000ecc:	4a2e      	ldr	r2, [pc, #184]	; (8000f88 <TIM_Base_SetConfig+0xbc>)
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
 8000ece:	6803      	ldr	r3, [r0, #0]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8000ed0:	4290      	cmp	r0, r2
 8000ed2:	d012      	beq.n	8000efa <TIM_Base_SetConfig+0x2e>
 8000ed4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000ed8:	d00f      	beq.n	8000efa <TIM_Base_SetConfig+0x2e>
 8000eda:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8000ede:	4290      	cmp	r0, r2
 8000ee0:	d00b      	beq.n	8000efa <TIM_Base_SetConfig+0x2e>
 8000ee2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000ee6:	4290      	cmp	r0, r2
 8000ee8:	d007      	beq.n	8000efa <TIM_Base_SetConfig+0x2e>
 8000eea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000eee:	4290      	cmp	r0, r2
 8000ef0:	d003      	beq.n	8000efa <TIM_Base_SetConfig+0x2e>
 8000ef2:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8000ef6:	4290      	cmp	r0, r2
 8000ef8:	d118      	bne.n	8000f2c <TIM_Base_SetConfig+0x60>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8000efa:	684a      	ldr	r2, [r1, #4]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000efc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8000f00:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8000f02:	4a21      	ldr	r2, [pc, #132]	; (8000f88 <TIM_Base_SetConfig+0xbc>)
 8000f04:	4290      	cmp	r0, r2
 8000f06:	d037      	beq.n	8000f78 <TIM_Base_SetConfig+0xac>
 8000f08:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000f0c:	d034      	beq.n	8000f78 <TIM_Base_SetConfig+0xac>
 8000f0e:	4a1f      	ldr	r2, [pc, #124]	; (8000f8c <TIM_Base_SetConfig+0xc0>)
 8000f10:	4290      	cmp	r0, r2
 8000f12:	d031      	beq.n	8000f78 <TIM_Base_SetConfig+0xac>
 8000f14:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f18:	4290      	cmp	r0, r2
 8000f1a:	d02d      	beq.n	8000f78 <TIM_Base_SetConfig+0xac>
 8000f1c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f20:	4290      	cmp	r0, r2
 8000f22:	d029      	beq.n	8000f78 <TIM_Base_SetConfig+0xac>
 8000f24:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8000f28:	4290      	cmp	r0, r2
 8000f2a:	d025      	beq.n	8000f78 <TIM_Base_SetConfig+0xac>
 8000f2c:	4a18      	ldr	r2, [pc, #96]	; (8000f90 <TIM_Base_SetConfig+0xc4>)
 8000f2e:	4290      	cmp	r0, r2
 8000f30:	d022      	beq.n	8000f78 <TIM_Base_SetConfig+0xac>
 8000f32:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f36:	4290      	cmp	r0, r2
 8000f38:	d01e      	beq.n	8000f78 <TIM_Base_SetConfig+0xac>
 8000f3a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f3e:	4290      	cmp	r0, r2
 8000f40:	d01a      	beq.n	8000f78 <TIM_Base_SetConfig+0xac>
 8000f42:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8000f46:	4290      	cmp	r0, r2
 8000f48:	d016      	beq.n	8000f78 <TIM_Base_SetConfig+0xac>
 8000f4a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f4e:	4290      	cmp	r0, r2
 8000f50:	d012      	beq.n	8000f78 <TIM_Base_SetConfig+0xac>
 8000f52:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000f56:	4290      	cmp	r0, r2
 8000f58:	d00e      	beq.n	8000f78 <TIM_Base_SetConfig+0xac>
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 8000f5a:	6003      	str	r3, [r0, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000f5c:	688b      	ldr	r3, [r1, #8]
 8000f5e:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8000f60:	680b      	ldr	r3, [r1, #0]
 8000f62:	6283      	str	r3, [r0, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8000f64:	4b08      	ldr	r3, [pc, #32]	; (8000f88 <TIM_Base_SetConfig+0xbc>)
 8000f66:	4298      	cmp	r0, r3
 8000f68:	d00b      	beq.n	8000f82 <TIM_Base_SetConfig+0xb6>
 8000f6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000f6e:	4298      	cmp	r0, r3
 8000f70:	d007      	beq.n	8000f82 <TIM_Base_SetConfig+0xb6>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8000f72:	2301      	movs	r3, #1
 8000f74:	6143      	str	r3, [r0, #20]
}
 8000f76:	4770      	bx	lr
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000f78:	68ca      	ldr	r2, [r1, #12]
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8000f7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	e7eb      	b.n	8000f5a <TIM_Base_SetConfig+0x8e>
  TIMx->PSC = (uint32_t)Structure->Prescaler;
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8000f82:	690b      	ldr	r3, [r1, #16]
 8000f84:	6303      	str	r3, [r0, #48]	; 0x30
 8000f86:	e7f4      	b.n	8000f72 <TIM_Base_SetConfig+0xa6>
 8000f88:	40010000 	.word	0x40010000
 8000f8c:	40000400 	.word	0x40000400
 8000f90:	40014000 	.word	0x40014000

08000f94 <HAL_TIM_Base_Init>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 8000f94:	b510      	push	{r4, lr}
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8000f96:	4604      	mov	r4, r0
 8000f98:	b1a0      	cbz	r0, 8000fc4 <HAL_TIM_Base_Init+0x30>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 8000f9a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000f9e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000fa2:	b91b      	cbnz	r3, 8000fac <HAL_TIM_Base_Init+0x18>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8000fa4:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8000fa8:	f000 ff9e 	bl	8001ee8 <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8000fac:	2302      	movs	r3, #2
 8000fae:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8000fb2:	6820      	ldr	r0, [r4, #0]
 8000fb4:	1d21      	adds	r1, r4, #4
 8000fb6:	f7ff ff89 	bl	8000ecc <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  return HAL_OK;
 8000fc0:	2000      	movs	r0, #0
 8000fc2:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 8000fc4:	2001      	movs	r0, #1
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
  
  return HAL_OK;
}
 8000fc6:	bd10      	pop	{r4, pc}

08000fc8 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 8000fc8:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8000fcc:	2b01      	cmp	r3, #1
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8000fce:	b510      	push	{r4, lr}
 8000fd0:	f04f 0302 	mov.w	r3, #2
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 8000fd4:	d018      	beq.n	8001008 <HAL_TIMEx_MasterConfigSynchronization+0x40>
  
  htim->State = HAL_TIM_STATE_BUSY;
 8000fd6:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8000fda:	6803      	ldr	r3, [r0, #0]
 8000fdc:	685a      	ldr	r2, [r3, #4]
 8000fde:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000fe2:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8000fe4:	685c      	ldr	r4, [r3, #4]
 8000fe6:	680a      	ldr	r2, [r1, #0]
 8000fe8:	4322      	orrs	r2, r4
 8000fea:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8000fec:	689a      	ldr	r2, [r3, #8]
 8000fee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000ff2:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8000ff4:	689c      	ldr	r4, [r3, #8]
 8000ff6:	684a      	ldr	r2, [r1, #4]
 8000ff8:	4322      	orrs	r2, r4
 8000ffa:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8001002:	2300      	movs	r3, #0
 8001004:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 8001008:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
  
  __HAL_UNLOCK(htim);
  
  return HAL_OK;
} 
 800100a:	bd10      	pop	{r4, pc}

0800100c <HAL_TIMEx_CommutationCallback>:
 800100c:	4770      	bx	lr

0800100e <HAL_TIMEx_BreakCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800100e:	4770      	bx	lr

08001010 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001010:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8001012:	f000 fbf7 	bl	8001804 <vTaskStartScheduler>
  
  return osOK;
}
 8001016:	2000      	movs	r0, #0
 8001018:	bd08      	pop	{r3, pc}

0800101a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800101a:	b570      	push	{r4, r5, r6, lr}
  TaskHandle_t handle;
  
  
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800101c:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 8001020:	8a02      	ldrh	r2, [r0, #16]
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001022:	460b      	mov	r3, r1
  TaskHandle_t handle;
  
  
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001024:	e890 0042 	ldmia.w	r0, {r1, r6}
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001028:	b086      	sub	sp, #24
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 800102a:	2c84      	cmp	r4, #132	; 0x84
 800102c:	f04f 0500 	mov.w	r5, #0
    fpriority += (priority - osPriorityIdle);
 8001030:	bf14      	ite	ne
 8001032:	3403      	addne	r4, #3
extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001034:	462c      	moveq	r4, r5
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
  TaskHandle_t handle;
  
  
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001036:	a805      	add	r0, sp, #20
 8001038:	9001      	str	r0, [sp, #4]
 800103a:	9503      	str	r5, [sp, #12]
 800103c:	9502      	str	r5, [sp, #8]
 800103e:	9400      	str	r4, [sp, #0]
 8001040:	4630      	mov	r0, r6
 8001042:	f000 fbc1 	bl	80017c8 <xTaskGenericCreate>
 8001046:	2801      	cmp	r0, #1
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              &handle) != pdPASS)  {
    return NULL;
  }
  
  return handle;
 8001048:	bf0c      	ite	eq
 800104a:	9805      	ldreq	r0, [sp, #20]
  
  
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              &handle) != pdPASS)  {
    return NULL;
 800104c:	2000      	movne	r0, #0
  }
  
  return handle;
}
 800104e:	b006      	add	sp, #24
 8001050:	bd70      	pop	{r4, r5, r6, pc}

08001052 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001052:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001054:	2800      	cmp	r0, #0
 8001056:	bf08      	it	eq
 8001058:	2001      	moveq	r0, #1
 800105a:	f000 fd21 	bl	8001aa0 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800105e:	2000      	movs	r0, #0
 8001060:	bd08      	pop	{r3, pc}

08001062 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8001062:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001064:	f000 fdd0 	bl	8001c08 <xTaskGetSchedulerState>
 8001068:	2801      	cmp	r0, #1
 800106a:	d003      	beq.n	8001074 <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 800106c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 8001070:	f000 b8fe 	b.w	8001270 <xPortSysTickHandler>
 8001074:	bd08      	pop	{r3, pc}

08001076 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001076:	f100 0308 	add.w	r3, r0, #8
 800107a:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800107c:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001080:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001082:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001084:	2300      	movs	r3, #0
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001086:	6082      	str	r2, [r0, #8]
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001088:	6003      	str	r3, [r0, #0]
 800108a:	4770      	bx	lr

0800108c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800108c:	2300      	movs	r3, #0
 800108e:	6103      	str	r3, [r0, #16]
 8001090:	4770      	bx	lr

08001092 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8001092:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001094:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001096:	689a      	ldr	r2, [r3, #8]
 8001098:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800109a:	689a      	ldr	r2, [r3, #8]
 800109c:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800109e:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80010a0:	6803      	ldr	r3, [r0, #0]

	pxIndex->pxPrevious->pxNext = pxNewListItem;
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80010a2:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 80010a4:	3301      	adds	r3, #1
 80010a6:	6003      	str	r3, [r0, #0]
 80010a8:	4770      	bx	lr

080010aa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80010aa:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80010ac:	1c53      	adds	r3, r2, #1
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80010ae:	b530      	push	{r4, r5, lr}
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80010b0:	d101      	bne.n	80010b6 <vListInsert+0xc>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80010b2:	6903      	ldr	r3, [r0, #16]
 80010b4:	e007      	b.n	80010c6 <vListInsert+0x1c>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80010b6:	f100 0308 	add.w	r3, r0, #8
 80010ba:	685c      	ldr	r4, [r3, #4]
 80010bc:	6825      	ldr	r5, [r4, #0]
 80010be:	42aa      	cmp	r2, r5
 80010c0:	d301      	bcc.n	80010c6 <vListInsert+0x1c>
 80010c2:	4623      	mov	r3, r4
 80010c4:	e7f9      	b.n	80010ba <vListInsert+0x10>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80010c6:	685a      	ldr	r2, [r3, #4]
 80010c8:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80010ca:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80010cc:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80010ce:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80010d0:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxPrevious = pxIterator;
	pxIterator->pxNext = pxNewListItem;

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80010d2:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 80010d4:	3301      	adds	r3, #1
 80010d6:	6003      	str	r3, [r0, #0]
 80010d8:	bd30      	pop	{r4, r5, pc}

080010da <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80010da:	6841      	ldr	r1, [r0, #4]
 80010dc:	6882      	ldr	r2, [r0, #8]

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80010de:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80010e0:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80010e2:	6882      	ldr	r2, [r0, #8]
 80010e4:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80010e6:	6859      	ldr	r1, [r3, #4]
 80010e8:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80010ea:	bf08      	it	eq
 80010ec:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80010ee:	2200      	movs	r2, #0
 80010f0:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80010f2:	6818      	ldr	r0, [r3, #0]
 80010f4:	3801      	subs	r0, #1
 80010f6:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 80010f8:	4770      	bx	lr
	...

080010fc <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80010fc:	4b0a      	ldr	r3, [pc, #40]	; (8001128 <prvTaskExitError+0x2c>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	3301      	adds	r3, #1
 8001102:	d008      	beq.n	8001116 <prvTaskExitError+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001108:	f383 8811 	msr	BASEPRI, r3
 800110c:	f3bf 8f6f 	isb	sy
 8001110:	f3bf 8f4f 	dsb	sy
 8001114:	e7fe      	b.n	8001114 <prvTaskExitError+0x18>
 8001116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800111a:	f383 8811 	msr	BASEPRI, r3
 800111e:	f3bf 8f6f 	isb	sy
 8001122:	f3bf 8f4f 	dsb	sy
 8001126:	e7fe      	b.n	8001126 <prvTaskExitError+0x2a>
 8001128:	20000000 	.word	0x20000000

0800112c <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800112c:	4806      	ldr	r0, [pc, #24]	; (8001148 <prvPortStartFirstTask+0x1c>)
 800112e:	6800      	ldr	r0, [r0, #0]
 8001130:	6800      	ldr	r0, [r0, #0]
 8001132:	f380 8808 	msr	MSP, r0
 8001136:	b662      	cpsie	i
 8001138:	b661      	cpsie	f
 800113a:	f3bf 8f4f 	dsb	sy
 800113e:	f3bf 8f6f 	isb	sy
 8001142:	df00      	svc	0
 8001144:	bf00      	nop
 8001146:	0000      	.short	0x0000
 8001148:	e000ed08 	.word	0xe000ed08

0800114c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800114c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800115c <vPortEnableVFP+0x10>
 8001150:	6801      	ldr	r1, [r0, #0]
 8001152:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8001156:	6001      	str	r1, [r0, #0]
 8001158:	4770      	bx	lr
 800115a:	0000      	.short	0x0000
 800115c:	e000ed88 	.word	0xe000ed88

08001160 <pxPortInitialiseStack>:

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8001160:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8001164:	e900 000a 	stmdb	r0, {r1, r3}
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8001168:	4b05      	ldr	r3, [pc, #20]	; (8001180 <pxPortInitialiseStack+0x20>)
 800116a:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 800116e:	f06f 0302 	mvn.w	r3, #2
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8001172:	f840 2c20 	str.w	r2, [r0, #-32]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8001176:	f840 3c24 	str.w	r3, [r0, #-36]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
 800117a:	3844      	subs	r0, #68	; 0x44
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	080010fd 	.word	0x080010fd

08001184 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8001184:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <pxCurrentTCBConst2>)
 8001186:	6819      	ldr	r1, [r3, #0]
 8001188:	6808      	ldr	r0, [r1, #0]
 800118a:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800118e:	f380 8809 	msr	PSP, r0
 8001192:	f3bf 8f6f 	isb	sy
 8001196:	f04f 0000 	mov.w	r0, #0
 800119a:	f380 8811 	msr	BASEPRI, r0
 800119e:	4770      	bx	lr

080011a0 <pxCurrentTCBConst2>:
 80011a0:	20003d10 	.word	0x20003d10

080011a4 <vPortEnterCritical>:
 80011a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011a8:	f383 8811 	msr	BASEPRI, r3
 80011ac:	f3bf 8f6f 	isb	sy
 80011b0:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80011b4:	4a0a      	ldr	r2, [pc, #40]	; (80011e0 <vPortEnterCritical+0x3c>)
 80011b6:	6813      	ldr	r3, [r2, #0]
 80011b8:	3301      	adds	r3, #1
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80011ba:	2b01      	cmp	r3, #1
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80011bc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80011be:	d10d      	bne.n	80011dc <vPortEnterCritical+0x38>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80011c0:	4b08      	ldr	r3, [pc, #32]	; (80011e4 <vPortEnterCritical+0x40>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f013 0fff 	tst.w	r3, #255	; 0xff
 80011c8:	d008      	beq.n	80011dc <vPortEnterCritical+0x38>
 80011ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011ce:	f383 8811 	msr	BASEPRI, r3
 80011d2:	f3bf 8f6f 	isb	sy
 80011d6:	f3bf 8f4f 	dsb	sy
 80011da:	e7fe      	b.n	80011da <vPortEnterCritical+0x36>
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	20000000 	.word	0x20000000
 80011e4:	e000ed04 	.word	0xe000ed04

080011e8 <vPortExitCritical>:
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 80011e8:	4a08      	ldr	r2, [pc, #32]	; (800120c <vPortExitCritical+0x24>)
 80011ea:	6813      	ldr	r3, [r2, #0]
 80011ec:	b943      	cbnz	r3, 8001200 <vPortExitCritical+0x18>
 80011ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011f2:	f383 8811 	msr	BASEPRI, r3
 80011f6:	f3bf 8f6f 	isb	sy
 80011fa:	f3bf 8f4f 	dsb	sy
 80011fe:	e7fe      	b.n	80011fe <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8001200:	3b01      	subs	r3, #1
 8001202:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8001204:	b90b      	cbnz	r3, 800120a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001206:	f383 8811 	msr	BASEPRI, r3
 800120a:	4770      	bx	lr
 800120c:	20000000 	.word	0x20000000

08001210 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8001210:	f3ef 8009 	mrs	r0, PSP
 8001214:	f3bf 8f6f 	isb	sy
 8001218:	4b14      	ldr	r3, [pc, #80]	; (800126c <pxCurrentTCBConst>)
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	f01e 0f10 	tst.w	lr, #16
 8001220:	bf08      	it	eq
 8001222:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001226:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800122a:	6010      	str	r0, [r2, #0]
 800122c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8001230:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001234:	f380 8811 	msr	BASEPRI, r0
 8001238:	f3bf 8f4f 	dsb	sy
 800123c:	f3bf 8f6f 	isb	sy
 8001240:	f000 fca8 	bl	8001b94 <vTaskSwitchContext>
 8001244:	f04f 0000 	mov.w	r0, #0
 8001248:	f380 8811 	msr	BASEPRI, r0
 800124c:	bc08      	pop	{r3}
 800124e:	6819      	ldr	r1, [r3, #0]
 8001250:	6808      	ldr	r0, [r1, #0]
 8001252:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001256:	f01e 0f10 	tst.w	lr, #16
 800125a:	bf08      	it	eq
 800125c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001260:	f380 8809 	msr	PSP, r0
 8001264:	f3bf 8f6f 	isb	sy
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop

0800126c <pxCurrentTCBConst>:
 800126c:	20003d10 	.word	0x20003d10

08001270 <xPortSysTickHandler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001270:	b508      	push	{r3, lr}

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001272:	f3ef 8311 	mrs	r3, BASEPRI
 8001276:	f04f 0250 	mov.w	r2, #80	; 0x50
 800127a:	f382 8811 	msr	BASEPRI, r2
 800127e:	f3bf 8f6f 	isb	sy
 8001282:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8001286:	f000 fafd 	bl	8001884 <xTaskIncrementTick>
 800128a:	b118      	cbz	r0, 8001294 <xPortSysTickHandler+0x24>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800128c:	4b03      	ldr	r3, [pc, #12]	; (800129c <xPortSysTickHandler+0x2c>)
 800128e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001292:	601a      	str	r2, [r3, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001294:	2300      	movs	r3, #0
 8001296:	f383 8811 	msr	BASEPRI, r3
 800129a:	bd08      	pop	{r3, pc}
 800129c:	e000ed04 	.word	0xe000ed04

080012a0 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80012a0:	4b06      	ldr	r3, [pc, #24]	; (80012bc <vPortSetupTimerInterrupt+0x1c>)
 80012a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80012ac:	4a04      	ldr	r2, [pc, #16]	; (80012c0 <vPortSetupTimerInterrupt+0x20>)
 80012ae:	3b01      	subs	r3, #1
 80012b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80012b2:	4b04      	ldr	r3, [pc, #16]	; (80012c4 <vPortSetupTimerInterrupt+0x24>)
 80012b4:	2207      	movs	r2, #7
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	20000004 	.word	0x20000004
 80012c0:	e000e014 	.word	0xe000e014
 80012c4:	e000e010 	.word	0xe000e010

080012c8 <xPortStartScheduler>:
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80012c8:	4b31      	ldr	r3, [pc, #196]	; (8001390 <xPortStartScheduler+0xc8>)
 80012ca:	4a32      	ldr	r2, [pc, #200]	; (8001394 <xPortStartScheduler+0xcc>)

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80012cc:	b513      	push	{r0, r1, r4, lr}
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80012ce:	6819      	ldr	r1, [r3, #0]
 80012d0:	4291      	cmp	r1, r2
 80012d2:	d108      	bne.n	80012e6 <xPortStartScheduler+0x1e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80012d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012d8:	f383 8811 	msr	BASEPRI, r3
 80012dc:	f3bf 8f6f 	isb	sy
 80012e0:	f3bf 8f4f 	dsb	sy
 80012e4:	e7fe      	b.n	80012e4 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	4b2b      	ldr	r3, [pc, #172]	; (8001398 <xPortStartScheduler+0xd0>)
 80012ea:	429a      	cmp	r2, r3
 80012ec:	d108      	bne.n	8001300 <xPortStartScheduler+0x38>
 80012ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012f2:	f383 8811 	msr	BASEPRI, r3
 80012f6:	f3bf 8f6f 	isb	sy
 80012fa:	f3bf 8f4f 	dsb	sy
 80012fe:	e7fe      	b.n	80012fe <xPortStartScheduler+0x36>
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8001300:	4b26      	ldr	r3, [pc, #152]	; (800139c <xPortStartScheduler+0xd4>)
 8001302:	781a      	ldrb	r2, [r3, #0]
 8001304:	b2d2      	uxtb	r2, r2
 8001306:	9201      	str	r2, [sp, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001308:	22ff      	movs	r2, #255	; 0xff
 800130a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800130c:	781b      	ldrb	r3, [r3, #0]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800130e:	4a24      	ldr	r2, [pc, #144]	; (80013a0 <xPortStartScheduler+0xd8>)
		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001310:	b2db      	uxtb	r3, r3
 8001312:	f88d 3003 	strb.w	r3, [sp, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001316:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800131a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800131e:	7013      	strb	r3, [r2, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8001320:	4b20      	ldr	r3, [pc, #128]	; (80013a4 <xPortStartScheduler+0xdc>)
 8001322:	2207      	movs	r2, #7
 8001324:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001326:	2100      	movs	r1, #0
 8001328:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800132c:	0600      	lsls	r0, r0, #24
 800132e:	f102 34ff 	add.w	r4, r2, #4294967295
 8001332:	d508      	bpl.n	8001346 <xPortStartScheduler+0x7e>
		{
			ulMaxPRIGROUPValue--;
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8001334:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8001338:	0052      	lsls	r2, r2, #1
 800133a:	b2d2      	uxtb	r2, r2
 800133c:	f88d 2003 	strb.w	r2, [sp, #3]
 8001340:	2101      	movs	r1, #1
 8001342:	4622      	mov	r2, r4
 8001344:	e7f0      	b.n	8001328 <xPortStartScheduler+0x60>
 8001346:	b101      	cbz	r1, 800134a <xPortStartScheduler+0x82>
 8001348:	601a      	str	r2, [r3, #0]
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	0212      	lsls	r2, r2, #8
 800134e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8001352:	601a      	str	r2, [r3, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8001354:	9b01      	ldr	r3, [sp, #4]
 8001356:	4a11      	ldr	r2, [pc, #68]	; (800139c <xPortStartScheduler+0xd4>)
 8001358:	b2db      	uxtb	r3, r3
 800135a:	7013      	strb	r3, [r2, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800135c:	4b12      	ldr	r3, [pc, #72]	; (80013a8 <xPortStartScheduler+0xe0>)
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8001364:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 800136c:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800136e:	f7ff ff97 	bl	80012a0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8001372:	4b0e      	ldr	r3, [pc, #56]	; (80013ac <xPortStartScheduler+0xe4>)
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8001378:	f7ff fee8 	bl	800114c <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800137c:	4a0c      	ldr	r2, [pc, #48]	; (80013b0 <xPortStartScheduler+0xe8>)
 800137e:	6813      	ldr	r3, [r2, #0]
 8001380:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8001384:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8001386:	f7ff fed1 	bl	800112c <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 800138a:	f7ff feb7 	bl	80010fc <prvTaskExitError>
 800138e:	bf00      	nop
 8001390:	e000ed00 	.word	0xe000ed00
 8001394:	410fc271 	.word	0x410fc271
 8001398:	410fc270 	.word	0x410fc270
 800139c:	e000e400 	.word	0xe000e400
 80013a0:	20000024 	.word	0x20000024
 80013a4:	20000028 	.word	0x20000028
 80013a8:	e000ed20 	.word	0xe000ed20
 80013ac:	20000000 	.word	0x20000000
 80013b0:	e000ef34 	.word	0xe000ef34

080013b4 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80013b4:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80013b6:	4b0f      	ldr	r3, [pc, #60]	; (80013f4 <prvInsertBlockIntoFreeList+0x40>)
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	4282      	cmp	r2, r0
 80013bc:	d201      	bcs.n	80013c2 <prvInsertBlockIntoFreeList+0xe>
 80013be:	4613      	mov	r3, r2
 80013c0:	e7fa      	b.n	80013b8 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80013c2:	6859      	ldr	r1, [r3, #4]
 80013c4:	185c      	adds	r4, r3, r1
 80013c6:	42a0      	cmp	r0, r4
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80013c8:	bf01      	itttt	eq
 80013ca:	6840      	ldreq	r0, [r0, #4]
 80013cc:	1809      	addeq	r1, r1, r0
 80013ce:	4618      	moveq	r0, r3
 80013d0:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80013d2:	6841      	ldr	r1, [r0, #4]
 80013d4:	1844      	adds	r4, r0, r1
 80013d6:	42a2      	cmp	r2, r4
 80013d8:	d107      	bne.n	80013ea <prvInsertBlockIntoFreeList+0x36>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80013da:	4c07      	ldr	r4, [pc, #28]	; (80013f8 <prvInsertBlockIntoFreeList+0x44>)
 80013dc:	6824      	ldr	r4, [r4, #0]
 80013de:	42a2      	cmp	r2, r4
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80013e0:	bf1f      	itttt	ne
 80013e2:	6854      	ldrne	r4, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80013e4:	6812      	ldrne	r2, [r2, #0]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80013e6:	1909      	addne	r1, r1, r4
 80013e8:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80013ea:	4298      	cmp	r0, r3
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80013ec:	6002      	str	r2, [r0, #0]
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80013ee:	bf18      	it	ne
 80013f0:	6018      	strne	r0, [r3, #0]
 80013f2:	bd10      	pop	{r4, pc}
 80013f4:	20000034 	.word	0x20000034
 80013f8:	20000030 	.word	0x20000030

080013fc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80013fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001400:	4604      	mov	r4, r0
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
 8001402:	f000 fa37 	bl	8001874 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8001406:	4940      	ldr	r1, [pc, #256]	; (8001508 <pvPortMalloc+0x10c>)
 8001408:	4d40      	ldr	r5, [pc, #256]	; (800150c <pvPortMalloc+0x110>)
 800140a:	680b      	ldr	r3, [r1, #0]
 800140c:	bb0b      	cbnz	r3, 8001452 <pvPortMalloc+0x56>
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800140e:	4a40      	ldr	r2, [pc, #256]	; (8001510 <pvPortMalloc+0x114>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001410:	0756      	lsls	r6, r2, #29
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001412:	bf1f      	itttt	ne
 8001414:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001416:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800141a:	f502 5370 	addne.w	r3, r2, #15360	; 0x3c00
 800141e:	1a1b      	subne	r3, r3, r0
	uxAddress = ( size_t ) ucHeap;

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001420:	bf14      	ite	ne
 8001422:	4602      	movne	r2, r0
static void prvHeapInit( void )
{
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001424:	f44f 5370 	moveq.w	r3, #15360	; 0x3c00
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
	xStart.xBlockSize = ( size_t ) 0;

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001428:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800142a:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800142c:	f023 0307 	bic.w	r3, r3, #7

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001430:	4e38      	ldr	r6, [pc, #224]	; (8001514 <pvPortMalloc+0x118>)
	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
	pxEnd = ( void * ) uxAddress;
 8001432:	600b      	str	r3, [r1, #0]
	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
	xStart.xBlockSize = ( size_t ) 0;
 8001434:	2000      	movs	r0, #0
 8001436:	6070      	str	r0, [r6, #4]

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001438:	6032      	str	r2, [r6, #0]
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
	pxEnd = ( void * ) uxAddress;
	pxEnd->xBlockSize = 0;
 800143a:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800143c:	6018      	str	r0, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800143e:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001440:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001442:	4b35      	ldr	r3, [pc, #212]	; (8001518 <pvPortMalloc+0x11c>)
	pxEnd->pxNextFreeBlock = NULL;

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001444:	6050      	str	r0, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001446:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001448:	4b34      	ldr	r3, [pc, #208]	; (800151c <pvPortMalloc+0x120>)
 800144a:	6018      	str	r0, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800144c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001450:	602b      	str	r3, [r5, #0]

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001452:	682f      	ldr	r7, [r5, #0]
 8001454:	4227      	tst	r7, r4
 8001456:	d146      	bne.n	80014e6 <pvPortMalloc+0xea>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8001458:	2c00      	cmp	r4, #0
 800145a:	d045      	beq.n	80014e8 <pvPortMalloc+0xec>
			{
				xWantedSize += xHeapStructSize;
 800145c:	f104 0308 	add.w	r3, r4, #8

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001460:	0758      	lsls	r0, r3, #29
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001462:	bf1c      	itt	ne
 8001464:	f023 0307 	bicne.w	r3, r3, #7
 8001468:	3308      	addne	r3, #8
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800146a:	2b00      	cmp	r3, #0
 800146c:	d039      	beq.n	80014e2 <pvPortMalloc+0xe6>
 800146e:	4a2b      	ldr	r2, [pc, #172]	; (800151c <pvPortMalloc+0x120>)
 8001470:	6816      	ldr	r6, [r2, #0]
 8001472:	42b3      	cmp	r3, r6
 8001474:	4690      	mov	r8, r2
 8001476:	d836      	bhi.n	80014e6 <pvPortMalloc+0xea>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
 8001478:	4a26      	ldr	r2, [pc, #152]	; (8001514 <pvPortMalloc+0x118>)
 800147a:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800147c:	6868      	ldr	r0, [r5, #4]
 800147e:	4283      	cmp	r3, r0
 8001480:	d803      	bhi.n	800148a <pvPortMalloc+0x8e>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8001482:	6809      	ldr	r1, [r1, #0]
 8001484:	428d      	cmp	r5, r1
 8001486:	d106      	bne.n	8001496 <pvPortMalloc+0x9a>
 8001488:	e02d      	b.n	80014e6 <pvPortMalloc+0xea>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800148a:	682c      	ldr	r4, [r5, #0]
 800148c:	2c00      	cmp	r4, #0
 800148e:	d0f8      	beq.n	8001482 <pvPortMalloc+0x86>
 8001490:	462a      	mov	r2, r5
 8001492:	4625      	mov	r5, r4
 8001494:	e7f2      	b.n	800147c <pvPortMalloc+0x80>
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001496:	6829      	ldr	r1, [r5, #0]
				was	not found. */
				if( pxBlock != pxEnd )
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001498:	6814      	ldr	r4, [r2, #0]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800149a:	6011      	str	r1, [r2, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800149c:	1ac2      	subs	r2, r0, r3
 800149e:	2a10      	cmp	r2, #16
 80014a0:	d90f      	bls.n	80014c2 <pvPortMalloc+0xc6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80014a2:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80014a4:	0741      	lsls	r1, r0, #29
 80014a6:	d008      	beq.n	80014ba <pvPortMalloc+0xbe>
 80014a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014ac:	f383 8811 	msr	BASEPRI, r3
 80014b0:	f3bf 8f6f 	isb	sy
 80014b4:	f3bf 8f4f 	dsb	sy
 80014b8:	e7fe      	b.n	80014b8 <pvPortMalloc+0xbc>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80014ba:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80014bc:	606b      	str	r3, [r5, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80014be:	f7ff ff79 	bl	80013b4 <prvInsertBlockIntoFreeList>
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80014c2:	4915      	ldr	r1, [pc, #84]	; (8001518 <pvPortMalloc+0x11c>)
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80014c4:	686b      	ldr	r3, [r5, #4]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80014c6:	6808      	ldr	r0, [r1, #0]
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80014c8:	1af2      	subs	r2, r6, r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80014ca:	431f      	orrs	r7, r3
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80014cc:	4282      	cmp	r2, r0
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
					pxBlock->pxNextFreeBlock = NULL;
 80014ce:	f04f 0300 	mov.w	r3, #0
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80014d2:	f8c8 2000 	str.w	r2, [r8]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80014d6:	bf38      	it	cc
 80014d8:	600a      	strcc	r2, [r1, #0]
				was	not found. */
				if( pxBlock != pxEnd )
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80014da:	3408      	adds	r4, #8
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80014dc:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80014de:	602b      	str	r3, [r5, #0]
 80014e0:	e002      	b.n	80014e8 <pvPortMalloc+0xec>
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80014e2:	461c      	mov	r4, r3
 80014e4:	e000      	b.n	80014e8 <pvPortMalloc+0xec>
 80014e6:	2400      	movs	r4, #0
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80014e8:	f000 fa64 	bl	80019b4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( uint32_t ) pvReturn ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80014ec:	0763      	lsls	r3, r4, #29
 80014ee:	d008      	beq.n	8001502 <pvPortMalloc+0x106>
 80014f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014f4:	f383 8811 	msr	BASEPRI, r3
 80014f8:	f3bf 8f6f 	isb	sy
 80014fc:	f3bf 8f4f 	dsb	sy
 8001500:	e7fe      	b.n	8001500 <pvPortMalloc+0x104>
	return pvReturn;
}
 8001502:	4620      	mov	r0, r4
 8001504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001508:	20000030 	.word	0x20000030
 800150c:	20003c3c 	.word	0x20003c3c
 8001510:	2000003c 	.word	0x2000003c
 8001514:	20000034 	.word	0x20000034
 8001518:	20003c40 	.word	0x20003c40
 800151c:	2000002c 	.word	0x2000002c

08001520 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8001520:	b510      	push	{r4, lr}
uint8_t *puc = ( uint8_t * ) pv;
BlockLink_t *pxLink;

	if( pv != NULL )
 8001522:	4604      	mov	r4, r0
 8001524:	b370      	cbz	r0, 8001584 <vPortFree+0x64>

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001526:	4a18      	ldr	r2, [pc, #96]	; (8001588 <vPortFree+0x68>)
 8001528:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800152c:	6812      	ldr	r2, [r2, #0]
 800152e:	4213      	tst	r3, r2
 8001530:	d108      	bne.n	8001544 <vPortFree+0x24>
 8001532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001536:	f383 8811 	msr	BASEPRI, r3
 800153a:	f3bf 8f6f 	isb	sy
 800153e:	f3bf 8f4f 	dsb	sy
 8001542:	e7fe      	b.n	8001542 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001544:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8001548:	b141      	cbz	r1, 800155c <vPortFree+0x3c>
 800154a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800154e:	f383 8811 	msr	BASEPRI, r3
 8001552:	f3bf 8f6f 	isb	sy
 8001556:	f3bf 8f4f 	dsb	sy
 800155a:	e7fe      	b.n	800155a <vPortFree+0x3a>
		{
			if( pxLink->pxNextFreeBlock == NULL )
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800155c:	ea23 0302 	bic.w	r3, r3, r2
 8001560:	f840 3c04 	str.w	r3, [r0, #-4]

				vTaskSuspendAll();
 8001564:	f000 f986 	bl	8001874 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001568:	4a08      	ldr	r2, [pc, #32]	; (800158c <vPortFree+0x6c>)
 800156a:	f854 1c04 	ldr.w	r1, [r4, #-4]
 800156e:	6813      	ldr	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001570:	f1a4 0008 	sub.w	r0, r4, #8
				pxLink->xBlockSize &= ~xBlockAllocatedBit;

				vTaskSuspendAll();
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001574:	440b      	add	r3, r1
 8001576:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001578:	f7ff ff1c 	bl	80013b4 <prvInsertBlockIntoFreeList>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800157c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
				}
				( void ) xTaskResumeAll();
 8001580:	f000 ba18 	b.w	80019b4 <xTaskResumeAll>
 8001584:	bd10      	pop	{r4, pc}
 8001586:	bf00      	nop
 8001588:	20003c3c 	.word	0x20003c3c
 800158c:	2000002c 	.word	0x2000002c

08001590 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001590:	4a06      	ldr	r2, [pc, #24]	; (80015ac <prvResetNextTaskUnblockTime+0x1c>)
 8001592:	6813      	ldr	r3, [r2, #0]
 8001594:	6819      	ldr	r1, [r3, #0]
 8001596:	4b06      	ldr	r3, [pc, #24]	; (80015b0 <prvResetNextTaskUnblockTime+0x20>)
 8001598:	b911      	cbnz	r1, 80015a0 <prvResetNextTaskUnblockTime+0x10>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800159a:	f04f 32ff 	mov.w	r2, #4294967295
 800159e:	e003      	b.n	80015a8 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80015a0:	6812      	ldr	r2, [r2, #0]
 80015a2:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 80015a4:	68d2      	ldr	r2, [r2, #12]
 80015a6:	6852      	ldr	r2, [r2, #4]
 80015a8:	601a      	str	r2, [r3, #0]
 80015aa:	4770      	bx	lr
 80015ac:	20003c48 	.word	0x20003c48
 80015b0:	20003d14 	.word	0x20003d14

080015b4 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 80015b4:	4b0e      	ldr	r3, [pc, #56]	; (80015f0 <prvAddCurrentTaskToDelayedList+0x3c>)
 80015b6:	681a      	ldr	r2, [r3, #0]
	#endif /* vTaskDelete */
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
 80015b8:	b510      	push	{r4, lr}
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 80015ba:	6050      	str	r0, [r2, #4]

	if( xTimeToWake < xTickCount )
 80015bc:	4a0d      	ldr	r2, [pc, #52]	; (80015f4 <prvAddCurrentTaskToDelayedList+0x40>)
 80015be:	6812      	ldr	r2, [r2, #0]
 80015c0:	4290      	cmp	r0, r2
	#endif /* vTaskDelete */
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
 80015c2:	4604      	mov	r4, r0
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );

	if( xTimeToWake < xTickCount )
 80015c4:	d207      	bcs.n	80015d6 <prvAddCurrentTaskToDelayedList+0x22>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 80015c6:	4a0c      	ldr	r2, [pc, #48]	; (80015f8 <prvAddCurrentTaskToDelayedList+0x44>)
 80015c8:	6810      	ldr	r0, [r2, #0]
 80015ca:	6819      	ldr	r1, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80015cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );

	if( xTimeToWake < xTickCount )
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 80015d0:	3104      	adds	r1, #4
 80015d2:	f7ff bd6a 	b.w	80010aa <vListInsert>
	}
	else
	{
		/* The wake time has not overflowed, so the current block list is used. */
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 80015d6:	4a09      	ldr	r2, [pc, #36]	; (80015fc <prvAddCurrentTaskToDelayedList+0x48>)
 80015d8:	6810      	ldr	r0, [r2, #0]
 80015da:	6819      	ldr	r1, [r3, #0]
 80015dc:	3104      	adds	r1, #4
 80015de:	f7ff fd64 	bl	80010aa <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
 80015e2:	4b07      	ldr	r3, [pc, #28]	; (8001600 <prvAddCurrentTaskToDelayedList+0x4c>)
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	4294      	cmp	r4, r2
		{
			xNextTaskUnblockTime = xTimeToWake;
 80015e8:	bf38      	it	cc
 80015ea:	601c      	strcc	r4, [r3, #0]
 80015ec:	bd10      	pop	{r4, pc}
 80015ee:	bf00      	nop
 80015f0:	20003d10 	.word	0x20003d10
 80015f4:	20003d18 	.word	0x20003d18
 80015f8:	20003d1c 	.word	0x20003d1c
 80015fc:	20003c48 	.word	0x20003c48
 8001600:	20003d14 	.word	0x20003d14

08001604 <xTaskGenericCreate.part.5>:
	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName );

#endif
/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
 8001604:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001608:	469a      	mov	sl, r3
 800160a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800160c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800160e:	4681      	mov	r9, r0
 8001610:	460e      	mov	r6, r1
 8001612:	4615      	mov	r5, r2
	#else /* portSTACK_GROWTH */
	{
	StackType_t *pxStack;

		/* Allocate space for the stack used by the task being created. */
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001614:	b93b      	cbnz	r3, 8001626 <xTaskGenericCreate.part.5+0x22>
 8001616:	0090      	lsls	r0, r2, #2
 8001618:	f7ff fef0 	bl	80013fc <pvPortMalloc>

		if( pxStack != NULL )
 800161c:	4683      	mov	fp, r0
 800161e:	2800      	cmp	r0, #0
 8001620:	f000 80b2 	beq.w	8001788 <xTaskGenericCreate.part.5+0x184>
 8001624:	e000      	b.n	8001628 <xTaskGenericCreate.part.5+0x24>
	#else /* portSTACK_GROWTH */
	{
	StackType_t *pxStack;

		/* Allocate space for the stack used by the task being created. */
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001626:	469b      	mov	fp, r3

		if( pxStack != NULL )
		{
			/* Allocate space for the TCB.  Where the memory comes from depends
			on the implementation of the port malloc function. */
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 8001628:	205c      	movs	r0, #92	; 0x5c
 800162a:	f7ff fee7 	bl	80013fc <pvPortMalloc>

			if( pxNewTCB != NULL )
 800162e:	4604      	mov	r4, r0
 8001630:	b188      	cbz	r0, 8001656 <xTaskGenericCreate.part.5+0x52>
	{
		/* Avoid dependency on memset() if it is not required. */
		#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
		{
			/* Just to help debugging. */
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 8001632:	00ad      	lsls	r5, r5, #2
 8001634:	462a      	mov	r2, r5
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );

			if( pxNewTCB != NULL )
			{
				/* Store the stack location in the TCB. */
				pxNewTCB->pxStack = pxStack;
 8001636:	f8c0 b030 	str.w	fp, [r0, #48]	; 0x30
	{
		/* Avoid dependency on memset() if it is not required. */
		#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
		{
			/* Just to help debugging. */
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 800163a:	21a5      	movs	r1, #165	; 0xa5
 800163c:	4658      	mov	r0, fp
 800163e:	f000 fd07 	bl	8002050 <memset>
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8001642:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001644:	3d04      	subs	r5, #4
 8001646:	441d      	add	r5, r3
 8001648:	f025 0507 	bic.w	r5, r5, #7
 800164c:	1e73      	subs	r3, r6, #1
 800164e:	f104 0233 	add.w	r2, r4, #51	; 0x33
 8001652:	360f      	adds	r6, #15
 8001654:	e005      	b.n	8001662 <xTaskGenericCreate.part.5+0x5e>
			}
			else
			{
				/* The stack cannot be used as the TCB was not created.  Free it
				again. */
				vPortFree( pxStack );
 8001656:	4658      	mov	r0, fp
 8001658:	f7ff ff62 	bl	8001520 <vPortFree>
 800165c:	e094      	b.n	8001788 <xTaskGenericCreate.part.5+0x184>
static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800165e:	429e      	cmp	r6, r3
 8001660:	d006      	beq.n	8001670 <xTaskGenericCreate.part.5+0x6c>
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 8001662:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8001666:	f802 1f01 	strb.w	r1, [r2, #1]!

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800166a:	7819      	ldrb	r1, [r3, #0]
 800166c:	2900      	cmp	r1, #0
 800166e:	d1f6      	bne.n	800165e <xTaskGenericCreate.part.5+0x5a>
 8001670:	2f06      	cmp	r7, #6
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001672:	f04f 0800 	mov.w	r8, #0
 8001676:	46bb      	mov	fp, r7
		pxTCB->uxBasePriority = uxPriority;
		pxTCB->uxMutexesHeld = 0;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 8001678:	f104 0604 	add.w	r6, r4, #4
 800167c:	bf28      	it	cs
 800167e:	f04f 0b06 	movcs.w	fp, #6
 8001682:	4630      	mov	r0, r6
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001684:	f884 8043 	strb.w	r8, [r4, #67]	; 0x43
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxTCB->uxPriority = uxPriority;
 8001688:	f8c4 b02c 	str.w	fp, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
 800168c:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
		pxTCB->uxMutexesHeld = 0;
 8001690:	f8c4 8050 	str.w	r8, [r4, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 8001694:	f7ff fcfa 	bl	800108c <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 8001698:	f104 0018 	add.w	r0, r4, #24
 800169c:	f7ff fcf6 	bl	800108c <vListInitialiseItem>
	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80016a0:	f1cb 0307 	rsb	r3, fp, #7
 80016a4:	61a3      	str	r3, [r4, #24]
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxTCB->ulNotifiedValue = 0;
 80016a6:	f8c4 8054 	str.w	r8, [r4, #84]	; 0x54
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
	vListInitialiseItem( &( pxTCB->xEventListItem ) );

	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 80016aa:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 80016ac:	6264      	str	r4, [r4, #36]	; 0x24
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxTCB->ulNotifiedValue = 0;
		pxTCB->eNotifyState = eNotWaitingNotification;
 80016ae:	f884 8058 	strb.w	r8, [r4, #88]	; 0x58
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80016b2:	4652      	mov	r2, sl
 80016b4:	4649      	mov	r1, r9
 80016b6:	4628      	mov	r0, r5
 80016b8:	f7ff fd52 	bl	8001160 <pxPortInitialiseStack>
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
 80016bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80016be:	6020      	str	r0, [r4, #0]
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
 80016c0:	b103      	cbz	r3, 80016c4 <xTaskGenericCreate.part.5+0xc0>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80016c2:	601c      	str	r4, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
 80016c4:	f7ff fd6e 	bl	80011a4 <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
 80016c8:	4a31      	ldr	r2, [pc, #196]	; (8001790 <xTaskGenericCreate.part.5+0x18c>)
			if( pxCurrentTCB == NULL )
 80016ca:	4d32      	ldr	r5, [pc, #200]	; (8001794 <xTaskGenericCreate.part.5+0x190>)

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
		{
			uxCurrentNumberOfTasks++;
 80016cc:	6813      	ldr	r3, [r2, #0]
 80016ce:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 80017bc <xTaskGenericCreate.part.5+0x1b8>
 80016d2:	3301      	adds	r3, #1
 80016d4:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
 80016d6:	682b      	ldr	r3, [r5, #0]
 80016d8:	bb3b      	cbnz	r3, 800172a <xTaskGenericCreate.part.5+0x126>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
 80016da:	602c      	str	r4, [r5, #0]

				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80016dc:	6812      	ldr	r2, [r2, #0]
 80016de:	2a01      	cmp	r2, #1
 80016e0:	d12b      	bne.n	800173a <xTaskGenericCreate.part.5+0x136>
 80016e2:	4698      	mov	r8, r3
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80016e4:	eb09 0008 	add.w	r0, r9, r8
 80016e8:	f108 0814 	add.w	r8, r8, #20
 80016ec:	f7ff fcc3 	bl	8001076 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80016f0:	f1b8 0f8c 	cmp.w	r8, #140	; 0x8c
 80016f4:	d1f6      	bne.n	80016e4 <xTaskGenericCreate.part.5+0xe0>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 80016f6:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80017c0 <xTaskGenericCreate.part.5+0x1bc>
	vListInitialise( &xDelayedTaskList2 );
 80016fa:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 80017c4 <xTaskGenericCreate.part.5+0x1c0>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 80016fe:	4650      	mov	r0, sl
 8001700:	f7ff fcb9 	bl	8001076 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8001704:	4640      	mov	r0, r8
 8001706:	f7ff fcb6 	bl	8001076 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800170a:	4823      	ldr	r0, [pc, #140]	; (8001798 <xTaskGenericCreate.part.5+0x194>)
 800170c:	f7ff fcb3 	bl	8001076 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8001710:	4822      	ldr	r0, [pc, #136]	; (800179c <xTaskGenericCreate.part.5+0x198>)
 8001712:	f7ff fcb0 	bl	8001076 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8001716:	4822      	ldr	r0, [pc, #136]	; (80017a0 <xTaskGenericCreate.part.5+0x19c>)
 8001718:	f7ff fcad 	bl	8001076 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800171c:	4b21      	ldr	r3, [pc, #132]	; (80017a4 <xTaskGenericCreate.part.5+0x1a0>)
 800171e:	f8c3 a000 	str.w	sl, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001722:	4b21      	ldr	r3, [pc, #132]	; (80017a8 <xTaskGenericCreate.part.5+0x1a4>)
 8001724:	f8c3 8000 	str.w	r8, [r3]
 8001728:	e007      	b.n	800173a <xTaskGenericCreate.part.5+0x136>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
 800172a:	4b20      	ldr	r3, [pc, #128]	; (80017ac <xTaskGenericCreate.part.5+0x1a8>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	b923      	cbnz	r3, 800173a <xTaskGenericCreate.part.5+0x136>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
 8001730:	682b      	ldr	r3, [r5, #0]
 8001732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001734:	429f      	cmp	r7, r3
					{
						pxCurrentTCB = pxNewTCB;
 8001736:	bf28      	it	cs
 8001738:	602c      	strcs	r4, [r5, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
 800173a:	4a1d      	ldr	r2, [pc, #116]	; (80017b0 <xTaskGenericCreate.part.5+0x1ac>)
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
 800173c:	491d      	ldr	r1, [pc, #116]	; (80017b4 <xTaskGenericCreate.part.5+0x1b0>)
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
 800173e:	6813      	ldr	r3, [r2, #0]
 8001740:	3301      	adds	r3, #1
 8001742:	6013      	str	r3, [r2, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
 8001744:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
			uxTaskNumber++;

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001746:	6463      	str	r3, [r4, #68]	; 0x44
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
 8001748:	680b      	ldr	r3, [r1, #0]
 800174a:	2401      	movs	r4, #1
 800174c:	fa04 f002 	lsl.w	r0, r4, r2
 8001750:	4303      	orrs	r3, r0
 8001752:	2014      	movs	r0, #20
 8001754:	600b      	str	r3, [r1, #0]
 8001756:	fb00 9002 	mla	r0, r0, r2, r9
 800175a:	4631      	mov	r1, r6
 800175c:	f7ff fc99 	bl	8001092 <vListInsertEnd>

			xReturn = pdPASS;
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
 8001760:	f7ff fd42 	bl	80011e8 <vPortExitCritical>
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
 8001764:	4b11      	ldr	r3, [pc, #68]	; (80017ac <xTaskGenericCreate.part.5+0x1a8>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	b15b      	cbz	r3, 8001782 <xTaskGenericCreate.part.5+0x17e>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
 800176a:	682b      	ldr	r3, [r5, #0]
 800176c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800176e:	429f      	cmp	r7, r3
 8001770:	d907      	bls.n	8001782 <xTaskGenericCreate.part.5+0x17e>
			{
				taskYIELD_IF_USING_PREEMPTION();
 8001772:	4b11      	ldr	r3, [pc, #68]	; (80017b8 <xTaskGenericCreate.part.5+0x1b4>)
 8001774:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001778:	601a      	str	r2, [r3, #0]
 800177a:	f3bf 8f4f 	dsb	sy
 800177e:	f3bf 8f6f 	isb	sy
	{
		if( xSchedulerRunning != pdFALSE )
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
 8001782:	4620      	mov	r0, r4
 8001784:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001788:	f04f 30ff 	mov.w	r0, #4294967295
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
}
 800178c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001790:	20003d60 	.word	0x20003d60
 8001794:	20003d10 	.word	0x20003d10
 8001798:	20003d20 	.word	0x20003d20
 800179c:	20003c54 	.word	0x20003c54
 80017a0:	20003c68 	.word	0x20003c68
 80017a4:	20003c48 	.word	0x20003c48
 80017a8:	20003d1c 	.word	0x20003d1c
 80017ac:	20003c4c 	.word	0x20003c4c
 80017b0:	20003d34 	.word	0x20003d34
 80017b4:	20003d64 	.word	0x20003d64
 80017b8:	e000ed04 	.word	0xe000ed04
 80017bc:	20003c80 	.word	0x20003c80
 80017c0:	20003d38 	.word	0x20003d38
 80017c4:	20003d4c 	.word	0x20003d4c

080017c8 <xTaskGenericCreate>:

#endif
/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 80017c8:	b470      	push	{r4, r5, r6}
 80017ca:	ac03      	add	r4, sp, #12
 80017cc:	cc70      	ldmia	r4, {r4, r5, r6}
BaseType_t xReturn;
TCB_t * pxNewTCB;
StackType_t *pxTopOfStack;

	configASSERT( pxTaskCode );
 80017ce:	b940      	cbnz	r0, 80017e2 <xTaskGenericCreate+0x1a>
 80017d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017d4:	f383 8811 	msr	BASEPRI, r3
 80017d8:	f3bf 8f6f 	isb	sy
 80017dc:	f3bf 8f4f 	dsb	sy
 80017e0:	e7fe      	b.n	80017e0 <xTaskGenericCreate+0x18>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
 80017e2:	2c06      	cmp	r4, #6
 80017e4:	d908      	bls.n	80017f8 <xTaskGenericCreate+0x30>
 80017e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017ea:	f383 8811 	msr	BASEPRI, r3
 80017ee:	f3bf 8f6f 	isb	sy
 80017f2:	f3bf 8f4f 	dsb	sy
 80017f6:	e7fe      	b.n	80017f6 <xTaskGenericCreate+0x2e>
 80017f8:	9605      	str	r6, [sp, #20]
 80017fa:	9504      	str	r5, [sp, #16]
 80017fc:	9403      	str	r4, [sp, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
}
 80017fe:	bc70      	pop	{r4, r5, r6}
 8001800:	f7ff bf00 	b.w	8001604 <xTaskGenericCreate.part.5>

08001804 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001804:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001806:	2400      	movs	r4, #0
 8001808:	9402      	str	r4, [sp, #8]
 800180a:	9401      	str	r4, [sp, #4]
 800180c:	9400      	str	r4, [sp, #0]
 800180e:	4623      	mov	r3, r4
 8001810:	2280      	movs	r2, #128	; 0x80
 8001812:	4913      	ldr	r1, [pc, #76]	; (8001860 <vTaskStartScheduler+0x5c>)
 8001814:	4813      	ldr	r0, [pc, #76]	; (8001864 <vTaskStartScheduler+0x60>)
 8001816:	f7ff fef5 	bl	8001604 <xTaskGenericCreate.part.5>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800181a:	2801      	cmp	r0, #1
 800181c:	d114      	bne.n	8001848 <vTaskStartScheduler+0x44>
 800181e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001822:	f383 8811 	msr	BASEPRI, r3
 8001826:	f3bf 8f6f 	isb	sy
 800182a:	f3bf 8f4f 	dsb	sy
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800182e:	4b0e      	ldr	r3, [pc, #56]	; (8001868 <vTaskStartScheduler+0x64>)
 8001830:	f04f 32ff 	mov.w	r2, #4294967295
 8001834:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001836:	4b0d      	ldr	r3, [pc, #52]	; (800186c <vTaskStartScheduler+0x68>)
 8001838:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800183a:	4b0d      	ldr	r3, [pc, #52]	; (8001870 <vTaskStartScheduler+0x6c>)
 800183c:	601c      	str	r4, [r3, #0]
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
	}
}
 800183e:	b004      	add	sp, #16
 8001840:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8001844:	f7ff bd40 	b.w	80012c8 <xPortStartScheduler>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
 8001848:	b940      	cbnz	r0, 800185c <vTaskStartScheduler+0x58>
 800184a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800184e:	f383 8811 	msr	BASEPRI, r3
 8001852:	f3bf 8f6f 	isb	sy
 8001856:	f3bf 8f4f 	dsb	sy
 800185a:	e7fe      	b.n	800185a <vTaskStartScheduler+0x56>
	}
}
 800185c:	b004      	add	sp, #16
 800185e:	bd10      	pop	{r4, pc}
 8001860:	080020b0 	.word	0x080020b0
 8001864:	08001b1d 	.word	0x08001b1d
 8001868:	20003d14 	.word	0x20003d14
 800186c:	20003c4c 	.word	0x20003c4c
 8001870:	20003d18 	.word	0x20003d18

08001874 <vTaskSuspendAll>:
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8001874:	4a02      	ldr	r2, [pc, #8]	; (8001880 <vTaskSuspendAll+0xc>)
 8001876:	6813      	ldr	r3, [r2, #0]
 8001878:	3301      	adds	r3, #1
 800187a:	6013      	str	r3, [r2, #0]
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	20003d0c 	.word	0x20003d0c

08001884 <xTaskIncrementTick>:

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001884:	4b40      	ldr	r3, [pc, #256]	; (8001988 <xTaskIncrementTick+0x104>)
 8001886:	681b      	ldr	r3, [r3, #0]

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001888:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800188c:	2b00      	cmp	r3, #0
 800188e:	d13c      	bne.n	800190a <xTaskIncrementTick+0x86>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
 8001890:	4b3e      	ldr	r3, [pc, #248]	; (800198c <xTaskIncrementTick+0x108>)
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	3201      	adds	r2, #1
 8001896:	601a      	str	r2, [r3, #0]

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8001898:	681d      	ldr	r5, [r3, #0]

			if( xConstTickCount == ( TickType_t ) 0U )
 800189a:	b9bd      	cbnz	r5, 80018cc <xTaskIncrementTick+0x48>
			{
				taskSWITCH_DELAYED_LISTS();
 800189c:	4b3c      	ldr	r3, [pc, #240]	; (8001990 <xTaskIncrementTick+0x10c>)
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	6812      	ldr	r2, [r2, #0]
 80018a2:	b142      	cbz	r2, 80018b6 <xTaskIncrementTick+0x32>
 80018a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018a8:	f383 8811 	msr	BASEPRI, r3
 80018ac:	f3bf 8f6f 	isb	sy
 80018b0:	f3bf 8f4f 	dsb	sy
 80018b4:	e7fe      	b.n	80018b4 <xTaskIncrementTick+0x30>
 80018b6:	4a37      	ldr	r2, [pc, #220]	; (8001994 <xTaskIncrementTick+0x110>)
 80018b8:	6819      	ldr	r1, [r3, #0]
 80018ba:	6810      	ldr	r0, [r2, #0]
 80018bc:	6018      	str	r0, [r3, #0]
 80018be:	6011      	str	r1, [r2, #0]
 80018c0:	4a35      	ldr	r2, [pc, #212]	; (8001998 <xTaskIncrementTick+0x114>)
 80018c2:	6813      	ldr	r3, [r2, #0]
 80018c4:	3301      	adds	r3, #1
 80018c6:	6013      	str	r3, [r2, #0]
 80018c8:	f7ff fe62 	bl	8001590 <prvResetNextTaskUnblockTime>

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
 80018cc:	4c33      	ldr	r4, [pc, #204]	; (800199c <xTaskIncrementTick+0x118>)
 80018ce:	9401      	str	r4, [sp, #4]
 80018d0:	6823      	ldr	r3, [r4, #0]
 80018d2:	4e33      	ldr	r6, [pc, #204]	; (80019a0 <xTaskIncrementTick+0x11c>)
 80018d4:	4f33      	ldr	r7, [pc, #204]	; (80019a4 <xTaskIncrementTick+0x120>)
 80018d6:	429d      	cmp	r5, r3
 80018d8:	f04f 0b00 	mov.w	fp, #0
 80018dc:	d30b      	bcc.n	80018f6 <xTaskIncrementTick+0x72>
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80018de:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8001990 <xTaskIncrementTick+0x10c>
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
 80018e2:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 80019b0 <xTaskIncrementTick+0x12c>
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80018e6:	f8d8 2000 	ldr.w	r2, [r8]
 80018ea:	6812      	ldr	r2, [r2, #0]
 80018ec:	b9a2      	cbnz	r2, 8001918 <xTaskIncrementTick+0x94>
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
 80018ee:	9b01      	ldr	r3, [sp, #4]
 80018f0:	f04f 32ff 	mov.w	r2, #4294967295
 80018f4:	601a      	str	r2, [r3, #0]
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80018f6:	683a      	ldr	r2, [r7, #0]
 80018f8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80018fa:	2214      	movs	r2, #20
 80018fc:	434a      	muls	r2, r1
 80018fe:	58b2      	ldr	r2, [r6, r2]
			{
				xSwitchRequired = pdTRUE;
 8001900:	2a02      	cmp	r2, #2
 8001902:	bf28      	it	cs
 8001904:	f04f 0b01 	movcs.w	fp, #1
 8001908:	e034      	b.n	8001974 <xTaskIncrementTick+0xf0>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800190a:	4a27      	ldr	r2, [pc, #156]	; (80019a8 <xTaskIncrementTick+0x124>)
 800190c:	6813      	ldr	r3, [r2, #0]
 800190e:	3301      	adds	r3, #1
 8001910:	6013      	str	r3, [r2, #0]

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8001912:	f04f 0b00 	mov.w	fp, #0
 8001916:	e02d      	b.n	8001974 <xTaskIncrementTick+0xf0>
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001918:	f8d8 2000 	ldr.w	r2, [r8]
 800191c:	68d2      	ldr	r2, [r2, #12]
 800191e:	68d4      	ldr	r4, [r2, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 8001920:	6861      	ldr	r1, [r4, #4]

						if( xConstTickCount < xItemValue )
 8001922:	428d      	cmp	r5, r1
 8001924:	d202      	bcs.n	800192c <xTaskIncrementTick+0xa8>
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
 8001926:	9b01      	ldr	r3, [sp, #4]
 8001928:	6019      	str	r1, [r3, #0]
							break;
 800192a:	e7e4      	b.n	80018f6 <xTaskIncrementTick+0x72>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 800192c:	f104 0a04 	add.w	sl, r4, #4
 8001930:	4650      	mov	r0, sl
 8001932:	f7ff fbd2 	bl	80010da <uxListRemove>

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001936:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001938:	b119      	cbz	r1, 8001942 <xTaskIncrementTick+0xbe>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800193a:	f104 0018 	add.w	r0, r4, #24
 800193e:	f7ff fbcc 	bl	80010da <uxListRemove>
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
 8001942:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001944:	f8d9 1000 	ldr.w	r1, [r9]
 8001948:	2301      	movs	r3, #1
 800194a:	fa03 fe00 	lsl.w	lr, r3, r0
 800194e:	ea4e 0101 	orr.w	r1, lr, r1
 8001952:	f04f 0e14 	mov.w	lr, #20
 8001956:	f8c9 1000 	str.w	r1, [r9]
 800195a:	fb0e 6000 	mla	r0, lr, r0, r6
 800195e:	4651      	mov	r1, sl
 8001960:	f7ff fb97 	bl	8001092 <vListInsertEnd>
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001964:	6838      	ldr	r0, [r7, #0]
 8001966:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001968:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							{
								xSwitchRequired = pdTRUE;
 800196a:	4291      	cmp	r1, r2
 800196c:	bf28      	it	cs
 800196e:	f04f 0b01 	movcs.w	fp, #1
 8001972:	e7b8      	b.n	80018e6 <xTaskIncrementTick+0x62>
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8001974:	4a0d      	ldr	r2, [pc, #52]	; (80019ac <xTaskIncrementTick+0x128>)
 8001976:	6812      	ldr	r2, [r2, #0]
		{
			xSwitchRequired = pdTRUE;
 8001978:	2a00      	cmp	r2, #0
 800197a:	bf18      	it	ne
 800197c:	f04f 0b01 	movne.w	fp, #1
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
}
 8001980:	4658      	mov	r0, fp
 8001982:	b003      	add	sp, #12
 8001984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001988:	20003d0c 	.word	0x20003d0c
 800198c:	20003d18 	.word	0x20003d18
 8001990:	20003c48 	.word	0x20003c48
 8001994:	20003d1c 	.word	0x20003d1c
 8001998:	20003c44 	.word	0x20003c44
 800199c:	20003d14 	.word	0x20003d14
 80019a0:	20003c80 	.word	0x20003c80
 80019a4:	20003d10 	.word	0x20003d10
 80019a8:	20003c7c 	.word	0x20003c7c
 80019ac:	20003d68 	.word	0x20003d68
 80019b0:	20003d64 	.word	0x20003d64

080019b4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80019b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80019b8:	4c30      	ldr	r4, [pc, #192]	; (8001a7c <xTaskResumeAll+0xc8>)
 80019ba:	6823      	ldr	r3, [r4, #0]
 80019bc:	b943      	cbnz	r3, 80019d0 <xTaskResumeAll+0x1c>
 80019be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019c2:	f383 8811 	msr	BASEPRI, r3
 80019c6:	f3bf 8f6f 	isb	sy
 80019ca:	f3bf 8f4f 	dsb	sy
 80019ce:	e7fe      	b.n	80019ce <xTaskResumeAll+0x1a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80019d0:	f7ff fbe8 	bl	80011a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80019d4:	6823      	ldr	r3, [r4, #0]
 80019d6:	3b01      	subs	r3, #1
 80019d8:	6023      	str	r3, [r4, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80019da:	6823      	ldr	r3, [r4, #0]
 80019dc:	b10b      	cbz	r3, 80019e2 <xTaskResumeAll+0x2e>
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
 80019de:	2400      	movs	r4, #0
 80019e0:	e047      	b.n	8001a72 <xTaskResumeAll+0xbe>
	{
		--uxSchedulerSuspended;

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80019e2:	4b27      	ldr	r3, [pc, #156]	; (8001a80 <xTaskResumeAll+0xcc>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d0f9      	beq.n	80019de <xTaskResumeAll+0x2a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80019ea:	4d26      	ldr	r5, [pc, #152]	; (8001a84 <xTaskResumeAll+0xd0>)
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyList( pxTCB );
 80019ec:	4e26      	ldr	r6, [pc, #152]	; (8001a88 <xTaskResumeAll+0xd4>)
 80019ee:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8001a9c <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80019f2:	682b      	ldr	r3, [r5, #0]
 80019f4:	b303      	cbz	r3, 8001a38 <xTaskResumeAll+0x84>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80019f6:	68eb      	ldr	r3, [r5, #12]
 80019f8:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 80019fa:	f104 0904 	add.w	r9, r4, #4
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80019fe:	f104 0018 	add.w	r0, r4, #24
 8001a02:	f7ff fb6a 	bl	80010da <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8001a06:	4648      	mov	r0, r9
 8001a08:	f7ff fb67 	bl	80010da <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001a0c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001a0e:	6833      	ldr	r3, [r6, #0]
 8001a10:	2701      	movs	r7, #1
 8001a12:	fa07 f102 	lsl.w	r1, r7, r2
 8001a16:	2014      	movs	r0, #20
 8001a18:	430b      	orrs	r3, r1
 8001a1a:	fb00 8002 	mla	r0, r0, r2, r8
 8001a1e:	4649      	mov	r1, r9
 8001a20:	6033      	str	r3, [r6, #0]
 8001a22:	f7ff fb36 	bl	8001092 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001a26:	4b19      	ldr	r3, [pc, #100]	; (8001a8c <xTaskResumeAll+0xd8>)
 8001a28:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d3df      	bcc.n	80019f2 <xTaskResumeAll+0x3e>
					{
						xYieldPending = pdTRUE;
 8001a32:	4b17      	ldr	r3, [pc, #92]	; (8001a90 <xTaskResumeAll+0xdc>)
 8001a34:	601f      	str	r7, [r3, #0]
 8001a36:	e7da      	b.n	80019ee <xTaskResumeAll+0x3a>

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
 8001a38:	4c16      	ldr	r4, [pc, #88]	; (8001a94 <xTaskResumeAll+0xe0>)
 8001a3a:	6823      	ldr	r3, [r4, #0]
 8001a3c:	b963      	cbnz	r3, 8001a58 <xTaskResumeAll+0xa4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
 8001a3e:	4b14      	ldr	r3, [pc, #80]	; (8001a90 <xTaskResumeAll+0xdc>)
 8001a40:	681c      	ldr	r4, [r3, #0]
 8001a42:	2c01      	cmp	r4, #1
 8001a44:	d1cb      	bne.n	80019de <xTaskResumeAll+0x2a>
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8001a46:	4b14      	ldr	r3, [pc, #80]	; (8001a98 <xTaskResumeAll+0xe4>)
 8001a48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001a4c:	601a      	str	r2, [r3, #0]
 8001a4e:	f3bf 8f4f 	dsb	sy
 8001a52:	f3bf 8f6f 	isb	sy
 8001a56:	e00c      	b.n	8001a72 <xTaskResumeAll+0xbe>
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
					{
						if( xTaskIncrementTick() != pdFALSE )
						{
							xYieldPending = pdTRUE;
 8001a58:	4d0d      	ldr	r5, [pc, #52]	; (8001a90 <xTaskResumeAll+0xdc>)
 8001a5a:	2601      	movs	r6, #1
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 8001a5c:	6823      	ldr	r3, [r4, #0]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d0ed      	beq.n	8001a3e <xTaskResumeAll+0x8a>
					{
						if( xTaskIncrementTick() != pdFALSE )
 8001a62:	f7ff ff0f 	bl	8001884 <xTaskIncrementTick>
 8001a66:	b100      	cbz	r0, 8001a6a <xTaskResumeAll+0xb6>
						{
							xYieldPending = pdTRUE;
 8001a68:	602e      	str	r6, [r5, #0]
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
 8001a6a:	6823      	ldr	r3, [r4, #0]
 8001a6c:	3b01      	subs	r3, #1
 8001a6e:	6023      	str	r3, [r4, #0]
 8001a70:	e7f4      	b.n	8001a5c <xTaskResumeAll+0xa8>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8001a72:	f7ff fbb9 	bl	80011e8 <vPortExitCritical>

	return xAlreadyYielded;
}
 8001a76:	4620      	mov	r0, r4
 8001a78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001a7c:	20003d0c 	.word	0x20003d0c
 8001a80:	20003d60 	.word	0x20003d60
 8001a84:	20003d20 	.word	0x20003d20
 8001a88:	20003d64 	.word	0x20003d64
 8001a8c:	20003d10 	.word	0x20003d10
 8001a90:	20003d68 	.word	0x20003d68
 8001a94:	20003c7c 	.word	0x20003c7c
 8001a98:	e000ed04 	.word	0xe000ed04
 8001a9c:	20003c80 	.word	0x20003c80

08001aa0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8001aa0:	b538      	push	{r3, r4, r5, lr}
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded = pdFALSE;


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8001aa2:	b940      	cbnz	r0, 8001ab6 <vTaskDelay+0x16>

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
 8001aa4:	4b18      	ldr	r3, [pc, #96]	; (8001b08 <vTaskDelay+0x68>)
 8001aa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001aaa:	601a      	str	r2, [r3, #0]
 8001aac:	f3bf 8f4f 	dsb	sy
 8001ab0:	f3bf 8f6f 	isb	sy
 8001ab4:	bd38      	pop	{r3, r4, r5, pc}


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8001ab6:	4b15      	ldr	r3, [pc, #84]	; (8001b0c <vTaskDelay+0x6c>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	b143      	cbz	r3, 8001ace <vTaskDelay+0x2e>
 8001abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ac0:	f383 8811 	msr	BASEPRI, r3
 8001ac4:	f3bf 8f6f 	isb	sy
 8001ac8:	f3bf 8f4f 	dsb	sy
 8001acc:	e7fe      	b.n	8001acc <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8001ace:	f7ff fed1 	bl	8001874 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
 8001ad2:	4b0f      	ldr	r3, [pc, #60]	; (8001b10 <vTaskDelay+0x70>)

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8001ad4:	4d0f      	ldr	r5, [pc, #60]	; (8001b14 <vTaskDelay+0x74>)
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	18c4      	adds	r4, r0, r3

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8001ada:	6828      	ldr	r0, [r5, #0]
 8001adc:	3004      	adds	r0, #4
 8001ade:	f7ff fafc 	bl	80010da <uxListRemove>
 8001ae2:	b940      	cbnz	r0, 8001af6 <vTaskDelay+0x56>
				{
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8001ae4:	682b      	ldr	r3, [r5, #0]
 8001ae6:	490c      	ldr	r1, [pc, #48]	; (8001b18 <vTaskDelay+0x78>)
 8001ae8:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001aea:	680a      	ldr	r2, [r1, #0]
 8001aec:	2301      	movs	r3, #1
 8001aee:	4083      	lsls	r3, r0
 8001af0:	ea22 0303 	bic.w	r3, r2, r3
 8001af4:	600b      	str	r3, [r1, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 8001af6:	4620      	mov	r0, r4
 8001af8:	f7ff fd5c 	bl	80015b4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8001afc:	f7ff ff5a 	bl	80019b4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8001b00:	2800      	cmp	r0, #0
 8001b02:	d0cf      	beq.n	8001aa4 <vTaskDelay+0x4>
 8001b04:	bd38      	pop	{r3, r4, r5, pc}
 8001b06:	bf00      	nop
 8001b08:	e000ed04 	.word	0xe000ed04
 8001b0c:	20003d0c 	.word	0x20003d0c
 8001b10:	20003d18 	.word	0x20003d18
 8001b14:	20003d10 	.word	0x20003d10
 8001b18:	20003d64 	.word	0x20003d64

08001b1c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001b1c:	b580      	push	{r7, lr}
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 8001b1e:	4d18      	ldr	r5, [pc, #96]	; (8001b80 <prvIdleTask+0x64>)
 8001b20:	462e      	mov	r6, r5
		{
			vTaskSuspendAll();
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8001b22:	4f18      	ldr	r7, [pc, #96]	; (8001b84 <prvIdleTask+0x68>)
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 8001b24:	682b      	ldr	r3, [r5, #0]
 8001b26:	b1f3      	cbz	r3, 8001b66 <prvIdleTask+0x4a>
		{
			vTaskSuspendAll();
 8001b28:	f7ff fea4 	bl	8001874 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8001b2c:	683c      	ldr	r4, [r7, #0]
			}
			( void ) xTaskResumeAll();
 8001b2e:	f7ff ff41 	bl	80019b4 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 8001b32:	2c00      	cmp	r4, #0
 8001b34:	d0f6      	beq.n	8001b24 <prvIdleTask+0x8>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 8001b36:	f7ff fb35 	bl	80011a4 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8001b3a:	4b12      	ldr	r3, [pc, #72]	; (8001b84 <prvIdleTask+0x68>)
 8001b3c:	68db      	ldr	r3, [r3, #12]
 8001b3e:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8001b40:	1d20      	adds	r0, r4, #4
 8001b42:	f7ff faca 	bl	80010da <uxListRemove>
					--uxCurrentNumberOfTasks;
 8001b46:	4a10      	ldr	r2, [pc, #64]	; (8001b88 <prvIdleTask+0x6c>)
 8001b48:	6813      	ldr	r3, [r2, #0]
 8001b4a:	3b01      	subs	r3, #1
 8001b4c:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
 8001b4e:	6833      	ldr	r3, [r6, #0]
 8001b50:	3b01      	subs	r3, #1
 8001b52:	6033      	str	r3, [r6, #0]
				}
				taskEXIT_CRITICAL();
 8001b54:	f7ff fb48 	bl	80011e8 <vPortExitCritical>
				vPortFreeAligned( pxTCB->pxStack );
			}
		}
		#else
		{
			vPortFreeAligned( pxTCB->pxStack );
 8001b58:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001b5a:	f7ff fce1 	bl	8001520 <vPortFree>
		}
		#endif

		vPortFree( pxTCB );
 8001b5e:	4620      	mov	r0, r4
 8001b60:	f7ff fcde 	bl	8001520 <vPortFree>
 8001b64:	e7de      	b.n	8001b24 <prvIdleTask+0x8>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001b66:	4b09      	ldr	r3, [pc, #36]	; (8001b8c <prvIdleTask+0x70>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d9d9      	bls.n	8001b22 <prvIdleTask+0x6>
			{
				taskYIELD();
 8001b6e:	4b08      	ldr	r3, [pc, #32]	; (8001b90 <prvIdleTask+0x74>)
 8001b70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b74:	601a      	str	r2, [r3, #0]
 8001b76:	f3bf 8f4f 	dsb	sy
 8001b7a:	f3bf 8f6f 	isb	sy
 8001b7e:	e7d0      	b.n	8001b22 <prvIdleTask+0x6>
 8001b80:	20003c50 	.word	0x20003c50
 8001b84:	20003c54 	.word	0x20003c54
 8001b88:	20003d60 	.word	0x20003d60
 8001b8c:	20003c80 	.word	0x20003c80
 8001b90:	e000ed04 	.word	0xe000ed04

08001b94 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001b94:	4b17      	ldr	r3, [pc, #92]	; (8001bf4 <vTaskSwitchContext+0x60>)
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	4b17      	ldr	r3, [pc, #92]	; (8001bf8 <vTaskSwitchContext+0x64>)

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001b9a:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001b9c:	b10a      	cbz	r2, 8001ba2 <vTaskSwitchContext+0xe>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	e025      	b.n	8001bee <vTaskSwitchContext+0x5a>
	}
	else
	{
		xYieldPending = pdFALSE;
 8001ba2:	601a      	str	r2, [r3, #0]
		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8001ba4:	4b15      	ldr	r3, [pc, #84]	; (8001bfc <vTaskSwitchContext+0x68>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8001ba8:	fab3 f383 	clz	r3, r3
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	f1c3 031f 	rsb	r3, r3, #31
 8001bb2:	2214      	movs	r2, #20
 8001bb4:	4912      	ldr	r1, [pc, #72]	; (8001c00 <vTaskSwitchContext+0x6c>)
 8001bb6:	435a      	muls	r2, r3
 8001bb8:	1888      	adds	r0, r1, r2
 8001bba:	588c      	ldr	r4, [r1, r2]
 8001bbc:	b944      	cbnz	r4, 8001bd0 <vTaskSwitchContext+0x3c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bc2:	f383 8811 	msr	BASEPRI, r3
 8001bc6:	f3bf 8f6f 	isb	sy
 8001bca:	f3bf 8f4f 	dsb	sy
 8001bce:	e7fe      	b.n	8001bce <vTaskSwitchContext+0x3a>
 8001bd0:	6844      	ldr	r4, [r0, #4]
 8001bd2:	3208      	adds	r2, #8
 8001bd4:	6864      	ldr	r4, [r4, #4]
 8001bd6:	6044      	str	r4, [r0, #4]
 8001bd8:	440a      	add	r2, r1
 8001bda:	4294      	cmp	r4, r2
 8001bdc:	bf04      	itt	eq
 8001bde:	6862      	ldreq	r2, [r4, #4]
 8001be0:	6042      	streq	r2, [r0, #4]
 8001be2:	2214      	movs	r2, #20
 8001be4:	fb02 1303 	mla	r3, r2, r3, r1
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	68da      	ldr	r2, [r3, #12]
 8001bec:	4b05      	ldr	r3, [pc, #20]	; (8001c04 <vTaskSwitchContext+0x70>)
 8001bee:	601a      	str	r2, [r3, #0]
 8001bf0:	bd10      	pop	{r4, pc}
 8001bf2:	bf00      	nop
 8001bf4:	20003d0c 	.word	0x20003d0c
 8001bf8:	20003d68 	.word	0x20003d68
 8001bfc:	20003d64 	.word	0x20003d64
 8001c00:	20003c80 	.word	0x20003c80
 8001c04:	20003d10 	.word	0x20003d10

08001c08 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8001c08:	4b05      	ldr	r3, [pc, #20]	; (8001c20 <xTaskGetSchedulerState+0x18>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	b133      	cbz	r3, 8001c1c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001c0e:	4b05      	ldr	r3, [pc, #20]	; (8001c24 <xTaskGetSchedulerState+0x1c>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	2b00      	cmp	r3, #0
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8001c14:	bf0c      	ite	eq
 8001c16:	2002      	moveq	r0, #2
 8001c18:	2000      	movne	r0, #0
 8001c1a:	4770      	bx	lr
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8001c1c:	2001      	movs	r0, #1
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
 8001c1e:	4770      	bx	lr
 8001c20:	20003c4c 	.word	0x20003c4c
 8001c24:	20003d0c 	.word	0x20003d0c

08001c28 <StartDefaultTasknew>:

}

/* USER CODE BEGIN 4 */
void StartDefaultTasknew(void const * argument)
{
 8001c28:	b508      	push	{r3, lr}

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8001c2a:	2140      	movs	r1, #64	; 0x40
 8001c2c:	4803      	ldr	r0, [pc, #12]	; (8001c3c <StartDefaultTasknew+0x14>)
 8001c2e:	f7fe fc8d 	bl	800054c <HAL_GPIO_TogglePin>
    osDelay(100);
 8001c32:	2064      	movs	r0, #100	; 0x64
 8001c34:	f7ff fa0d 	bl	8001052 <osDelay>
 8001c38:	e7f7      	b.n	8001c2a <StartDefaultTasknew+0x2>
 8001c3a:	bf00      	nop
 8001c3c:	40020000 	.word	0x40020000

08001c40 <StartDefaultTask>:
}
/* USER CODE END 4 */

/* StartDefaultTask function */
void StartDefaultTask(void const * argument)
{
 8001c40:	b508      	push	{r3, lr}

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    HAL_GPIO_TogglePin(GPIOA, LD2_Pin);
 8001c42:	2120      	movs	r1, #32
 8001c44:	4803      	ldr	r0, [pc, #12]	; (8001c54 <StartDefaultTask+0x14>)
 8001c46:	f7fe fc81 	bl	800054c <HAL_GPIO_TogglePin>
    osDelay(250);
 8001c4a:	20fa      	movs	r0, #250	; 0xfa
 8001c4c:	f7ff fa01 	bl	8001052 <osDelay>
 8001c50:	e7f7      	b.n	8001c42 <StartDefaultTask+0x2>
 8001c52:	bf00      	nop
 8001c54:	40020000 	.word	0x40020000

08001c58 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8001c58:	b570      	push	{r4, r5, r6, lr}
 8001c5a:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c5c:	4b2a      	ldr	r3, [pc, #168]	; (8001d08 <SystemClock_Config+0xb0>)
 8001c5e:	2100      	movs	r1, #0
 8001c60:	9100      	str	r1, [sp, #0]
 8001c62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c64:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001c68:	641a      	str	r2, [r3, #64]	; 0x40
 8001c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c70:	9300      	str	r3, [sp, #0]
 8001c72:	9b00      	ldr	r3, [sp, #0]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c74:	4b25      	ldr	r3, [pc, #148]	; (8001d0c <SystemClock_Config+0xb4>)
 8001c76:	9101      	str	r1, [sp, #4]
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001c7e:	601a      	str	r2, [r3, #0]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c86:	9301      	str	r3, [sp, #4]
 8001c88:	9b01      	ldr	r3, [sp, #4]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c8e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c92:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c94:	f44f 0380 	mov.w	r3, #4194304	; 0x400000

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c98:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c9a:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001c9c:	2604      	movs	r6, #4
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001c9e:	23b4      	movs	r3, #180	; 0xb4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ca0:	a807      	add	r0, sp, #28

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ca2:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001ca4:	960f      	str	r6, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001ca6:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ca8:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001caa:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001cac:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cae:	f7fe fd8d 	bl	80007cc <HAL_RCC_OscConfig>
 8001cb2:	b100      	cbz	r0, 8001cb6 <SystemClock_Config+0x5e>
 8001cb4:	e7fe      	b.n	8001cb4 <SystemClock_Config+0x5c>
    Error_Handler();
  }

    /**Activate the Over-Drive mode 
    */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001cb6:	f7fe fc4d 	bl	8000554 <HAL_PWREx_EnableOverDrive>
 8001cba:	b100      	cbz	r0, 8001cbe <SystemClock_Config+0x66>
 8001cbc:	e7fe      	b.n	8001cbc <SystemClock_Config+0x64>
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001cbe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cc2:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001cc4:	9305      	str	r3, [sp, #20]
    Error_Handler();
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cc6:	250f      	movs	r5, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001cc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001ccc:	2105      	movs	r1, #5
 8001cce:	a802      	add	r0, sp, #8

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cd0:	9403      	str	r4, [sp, #12]
    Error_Handler();
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cd2:	9502      	str	r5, [sp, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001cd4:	9306      	str	r3, [sp, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001cd6:	f7fe fc89 	bl	80005ec <HAL_RCC_ClockConfig>
 8001cda:	4604      	mov	r4, r0
 8001cdc:	b100      	cbz	r0, 8001ce0 <SystemClock_Config+0x88>
 8001cde:	e7fe      	b.n	8001cde <SystemClock_Config+0x86>
    Error_Handler();
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001ce0:	f7fe fd38 	bl	8000754 <HAL_RCC_GetHCLKFreq>
 8001ce4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ce8:	fbb0 f0f3 	udiv	r0, r0, r3
 8001cec:	f7fe fb2e 	bl	800034c <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001cf0:	4630      	mov	r0, r6
 8001cf2:	f7fe fb41 	bl	8000378 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8001cf6:	4622      	mov	r2, r4
 8001cf8:	4629      	mov	r1, r5
 8001cfa:	f04f 30ff 	mov.w	r0, #4294967295
 8001cfe:	f7fe fae5 	bl	80002cc <HAL_NVIC_SetPriority>
}
 8001d02:	b014      	add	sp, #80	; 0x50
 8001d04:	bd70      	pop	{r4, r5, r6, pc}
 8001d06:	bf00      	nop
 8001d08:	40023800 	.word	0x40023800
 8001d0c:	40007000 	.word	0x40007000

08001d10 <main>:
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

int main(void)
{
 8001d10:	b570      	push	{r4, r5, r6, lr}
 8001d12:	b08e      	sub	sp, #56	; 0x38
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d14:	2400      	movs	r4, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d16:	f7fe fa9f 	bl	8000258 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8001d1a:	f7ff ff9d 	bl	8001c58 <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d1e:	4b49      	ldr	r3, [pc, #292]	; (8001e44 <main+0x134>)
 8001d20:	9400      	str	r4, [sp, #0]
 8001d22:	6b1a      	ldr	r2, [r3, #48]	; 0x30

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001d24:	4848      	ldr	r0, [pc, #288]	; (8001e48 <main+0x138>)
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d26:	f042 0204 	orr.w	r2, r2, #4
 8001d2a:	631a      	str	r2, [r3, #48]	; 0x30
 8001d2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d2e:	f002 0204 	and.w	r2, r2, #4
 8001d32:	9200      	str	r2, [sp, #0]
 8001d34:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d36:	9401      	str	r4, [sp, #4]
 8001d38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d3a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001d3e:	631a      	str	r2, [r3, #48]	; 0x30
 8001d40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d42:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001d46:	9201      	str	r2, [sp, #4]
 8001d48:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d4a:	9402      	str	r4, [sp, #8]
 8001d4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d4e:	f042 0201 	orr.w	r2, r2, #1
 8001d52:	631a      	str	r2, [r3, #48]	; 0x30
 8001d54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d56:	f002 0201 	and.w	r2, r2, #1
 8001d5a:	9202      	str	r2, [sp, #8]
 8001d5c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d5e:	9403      	str	r4, [sp, #12]
 8001d60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d62:	f042 0202 	orr.w	r2, r2, #2
 8001d66:	631a      	str	r2, [r3, #48]	; 0x30
 8001d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6a:	940b      	str	r4, [sp, #44]	; 0x2c

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d6c:	f003 0302 	and.w	r3, r3, #2
 8001d70:	9303      	str	r3, [sp, #12]
 8001d72:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001d74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d78:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001d7a:	a909      	add	r1, sp, #36	; 0x24
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001d7c:	4b33      	ldr	r3, [pc, #204]	; (8001e4c <main+0x13c>)
 8001d7e:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001d80:	f7fe fb06 	bl	8000390 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001d84:	230c      	movs	r3, #12
 8001d86:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d88:	2302      	movs	r3, #2
 8001d8a:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d90:	a909      	add	r1, sp, #36	; 0x24
  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d92:	2307      	movs	r3, #7
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d94:	482e      	ldr	r0, [pc, #184]	; (8001e50 <main+0x140>)
  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d96:	930d      	str	r3, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : LD2_Pin PA6 PA7 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6|GPIO_PIN_7;
 8001d98:	25e0      	movs	r5, #224	; 0xe0
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9a:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d9c:	f7fe faf8 	bl	8000390 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA6 PA7 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001da0:	2301      	movs	r3, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001da2:	a909      	add	r1, sp, #36	; 0x24
 8001da4:	482a      	ldr	r0, [pc, #168]	; (8001e50 <main+0x140>)
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : LD2_Pin PA6 PA7 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001da6:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : LD2_Pin PA6 PA7 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6|GPIO_PIN_7;
 8001da8:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001daa:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dac:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dae:	f7fe faef 	bl	8000390 <HAL_GPIO_Init>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8001db2:	4622      	mov	r2, r4
 8001db4:	4629      	mov	r1, r5
 8001db6:	4826      	ldr	r0, [pc, #152]	; (8001e50 <main+0x140>)
{

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim2.Instance = TIM2;
 8001db8:	4d26      	ldr	r5, [pc, #152]	; (8001e54 <main+0x144>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8001dba:	f7fe fbc3 	bl	8000544 <HAL_GPIO_WritePin>

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 8999;
 8001dbe:	f242 3327 	movw	r3, #8999	; 0x2327
 8001dc2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001dc6:	e885 000c 	stmia.w	r5, {r2, r3}
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 4999;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001dca:	4628      	mov	r0, r5
  TIM_MasterConfigTypeDef sMasterConfig;

  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 8999;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 4999;
 8001dcc:	f241 3387 	movw	r3, #4999	; 0x1387
  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 8999;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dd0:	60ac      	str	r4, [r5, #8]
  htim2.Init.Period = 4999;
 8001dd2:	60eb      	str	r3, [r5, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dd4:	612c      	str	r4, [r5, #16]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001dd6:	f7ff f8dd 	bl	8000f94 <HAL_TIM_Base_Init>
 8001dda:	b100      	cbz	r0, 8001dde <main+0xce>
 8001ddc:	e7fe      	b.n	8001ddc <main+0xcc>
  {
    Error_Handler();
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001de2:	a909      	add	r1, sp, #36	; 0x24
 8001de4:	4628      	mov	r0, r5
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001de6:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001de8:	f7fe ff0f 	bl	8000c0a <HAL_TIM_ConfigClockSource>
 8001dec:	b100      	cbz	r0, 8001df0 <main+0xe0>
 8001dee:	e7fe      	b.n	8001dee <main+0xde>
  {
    Error_Handler();
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001df0:	9004      	str	r0, [sp, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001df2:	9005      	str	r0, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001df4:	a904      	add	r1, sp, #16
 8001df6:	4628      	mov	r0, r5
 8001df8:	f7ff f8e6 	bl	8000fc8 <HAL_TIMEx_MasterConfigSynchronization>
 8001dfc:	b100      	cbz	r0, 8001e00 <main+0xf0>
 8001dfe:	e7fe      	b.n	8001dfe <main+0xee>
  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_TIM2_Init();

  /* USER CODE BEGIN 2 */
  while(HAL_TIM_Base_Start_IT(&htim2)!=HAL_OK);
 8001e00:	4814      	ldr	r0, [pc, #80]	; (8001e54 <main+0x144>)
 8001e02:	f7fe fef7 	bl	8000bf4 <HAL_TIM_Base_Start_IT>
 8001e06:	4606      	mov	r6, r0
 8001e08:	2800      	cmp	r0, #0
 8001e0a:	d1f9      	bne.n	8001e00 <main+0xf0>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001e0c:	4c12      	ldr	r4, [pc, #72]	; (8001e58 <main+0x148>)
 8001e0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e10:	ad04      	add	r5, sp, #16
 8001e12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e14:	f854 3b04 	ldr.w	r3, [r4], #4
 8001e18:	602b      	str	r3, [r5, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001e1a:	4631      	mov	r1, r6
 8001e1c:	a804      	add	r0, sp, #16
 8001e1e:	f7ff f8fc 	bl	800101a <osThreadCreate>
 8001e22:	4b0e      	ldr	r3, [pc, #56]	; (8001e5c <main+0x14c>)
 8001e24:	6018      	str	r0, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadDef(defaultTasknew, StartDefaultTasknew, osPriorityNormal, 0, 128);
 8001e26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e28:	ad09      	add	r5, sp, #36	; 0x24
 8001e2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e2c:	6823      	ldr	r3, [r4, #0]
 8001e2e:	602b      	str	r3, [r5, #0]
  defaultTaskHandlenew = osThreadCreate(osThread(defaultTasknew), NULL);
 8001e30:	4631      	mov	r1, r6
 8001e32:	a809      	add	r0, sp, #36	; 0x24
 8001e34:	f7ff f8f1 	bl	800101a <osThreadCreate>
 8001e38:	4b09      	ldr	r3, [pc, #36]	; (8001e60 <main+0x150>)
 8001e3a:	6018      	str	r0, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */
 

  /* Start scheduler */
  osKernelStart();
 8001e3c:	f7ff f8e8 	bl	8001010 <osKernelStart>
 8001e40:	e7fe      	b.n	8001e40 <main+0x130>
 8001e42:	bf00      	nop
 8001e44:	40023800 	.word	0x40023800
 8001e48:	40020800 	.word	0x40020800
 8001e4c:	10120000 	.word	0x10120000
 8001e50:	40020000 	.word	0x40020000
 8001e54:	20003d7c 	.word	0x20003d7c
 8001e58:	08002078 	.word	0x08002078
 8001e5c:	20003d70 	.word	0x20003d70
 8001e60:	20003d74 	.word	0x20003d74

08001e64 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
/* USER CODE BEGIN Callback 0 */

/* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001e64:	6803      	ldr	r3, [r0, #0]
 8001e66:	4a06      	ldr	r2, [pc, #24]	; (8001e80 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d101      	bne.n	8001e70 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8001e6c:	f7fe ba0e 	b.w	800028c <HAL_IncTick>
  }
  else if (htim->Instance == TIM2)
 8001e70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e74:	d103      	bne.n	8001e7e <HAL_TIM_PeriodElapsedCallback+0x1a>
  {
	    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 8001e76:	2180      	movs	r1, #128	; 0x80
 8001e78:	4802      	ldr	r0, [pc, #8]	; (8001e84 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001e7a:	f7fe bb67 	b.w	800054c <HAL_GPIO_TogglePin>
 8001e7e:	4770      	bx	lr
 8001e80:	40010000 	.word	0x40010000
 8001e84:	40020000 	.word	0x40020000

08001e88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e88:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e8a:	2003      	movs	r0, #3
 8001e8c:	f7fe fa0c 	bl	80002a8 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8001e90:	2200      	movs	r2, #0
 8001e92:	4611      	mov	r1, r2
 8001e94:	f06f 000b 	mvn.w	r0, #11
 8001e98:	f7fe fa18 	bl	80002cc <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	4611      	mov	r1, r2
 8001ea0:	f06f 000a 	mvn.w	r0, #10
 8001ea4:	f7fe fa12 	bl	80002cc <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	4611      	mov	r1, r2
 8001eac:	f06f 0009 	mvn.w	r0, #9
 8001eb0:	f7fe fa0c 	bl	80002cc <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	4611      	mov	r1, r2
 8001eb8:	f06f 0004 	mvn.w	r0, #4
 8001ebc:	f7fe fa06 	bl	80002cc <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	4611      	mov	r1, r2
 8001ec4:	f06f 0003 	mvn.w	r0, #3
 8001ec8:	f7fe fa00 	bl	80002cc <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001ecc:	2200      	movs	r2, #0
 8001ece:	210f      	movs	r1, #15
 8001ed0:	f06f 0001 	mvn.w	r0, #1
 8001ed4:	f7fe f9fa 	bl	80002cc <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8001ed8:	2200      	movs	r2, #0
 8001eda:	210f      	movs	r1, #15
 8001edc:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ee0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8001ee4:	f7fe b9f2 	b.w	80002cc <HAL_NVIC_SetPriority>

08001ee8 <HAL_TIM_Base_MspInit>:
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{

  if(htim_base->Instance==TIM2)
 8001ee8:	6803      	ldr	r3, [r0, #0]
 8001eea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000

  /* USER CODE END MspInit 1 */
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001eee:	b507      	push	{r0, r1, r2, lr}

  if(htim_base->Instance==TIM2)
 8001ef0:	d113      	bne.n	8001f1a <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ef2:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	9201      	str	r2, [sp, #4]
 8001efa:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001efc:	f041 0101 	orr.w	r1, r1, #1
 8001f00:	6419      	str	r1, [r3, #64]	; 0x40
 8001f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f04:	f003 0301 	and.w	r3, r3, #1
 8001f08:	9301      	str	r3, [sp, #4]
    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001f0a:	201c      	movs	r0, #28
 8001f0c:	2105      	movs	r1, #5
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f0e:	9b01      	ldr	r3, [sp, #4]
    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8001f10:	f7fe f9dc 	bl	80002cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001f14:	201c      	movs	r0, #28
 8001f16:	f7fe fa0d 	bl	8000334 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001f1a:	b003      	add	sp, #12
 8001f1c:	f85d fb04 	ldr.w	pc, [sp], #4

08001f20 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f20:	b530      	push	{r4, r5, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8001f22:	4601      	mov	r1, r0
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f24:	b089      	sub	sp, #36	; 0x24
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8001f26:	2200      	movs	r2, #0
 8001f28:	2019      	movs	r0, #25
 8001f2a:	f7fe f9cf 	bl	80002cc <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8001f2e:	2019      	movs	r0, #25
 8001f30:	f7fe fa00 	bl	8000334 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001f34:	2500      	movs	r5, #0
 8001f36:	4b15      	ldr	r3, [pc, #84]	; (8001f8c <HAL_InitTick+0x6c>)
 8001f38:	9502      	str	r5, [sp, #8]
 8001f3a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001f3c:	4c14      	ldr	r4, [pc, #80]	; (8001f90 <HAL_InitTick+0x70>)
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001f3e:	f042 0201 	orr.w	r2, r2, #1
 8001f42:	645a      	str	r2, [r3, #68]	; 0x44
 8001f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f46:	f003 0301 	and.w	r3, r3, #1
 8001f4a:	9302      	str	r3, [sp, #8]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001f4c:	a901      	add	r1, sp, #4
 8001f4e:	a803      	add	r0, sp, #12
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001f50:	9b02      	ldr	r3, [sp, #8]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001f52:	f7fe fc1d 	bl	8000790 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001f56:	f7fe fc03 	bl	8000760 <HAL_RCC_GetPCLK2Freq>
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001f5a:	4b0e      	ldr	r3, [pc, #56]	; (8001f94 <HAL_InitTick+0x74>)
 8001f5c:	6023      	str	r3, [r4, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8001f5e:	f240 33e7 	movw	r3, #999	; 0x3e7
 8001f62:	60e3      	str	r3, [r4, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001f64:	0040      	lsls	r0, r0, #1
 8001f66:	4b0c      	ldr	r3, [pc, #48]	; (8001f98 <HAL_InitTick+0x78>)
 8001f68:	fbb0 f0f3 	udiv	r0, r0, r3
 8001f6c:	3801      	subs	r0, #1
 8001f6e:	6060      	str	r0, [r4, #4]
  htim1.Init.ClockDivision = 0;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001f70:	4620      	mov	r0, r4
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
  htim1.Init.Prescaler = uwPrescalerValue;
  htim1.Init.ClockDivision = 0;
 8001f72:	6125      	str	r5, [r4, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f74:	60a5      	str	r5, [r4, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001f76:	f7ff f80d 	bl	8000f94 <HAL_TIM_Base_Init>
 8001f7a:	b918      	cbnz	r0, 8001f84 <HAL_InitTick+0x64>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001f7c:	4620      	mov	r0, r4
 8001f7e:	f7fe fe39 	bl	8000bf4 <HAL_TIM_Base_Start_IT>
 8001f82:	e000      	b.n	8001f86 <HAL_InitTick+0x66>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8001f84:	2001      	movs	r0, #1
}
 8001f86:	b009      	add	sp, #36	; 0x24
 8001f88:	bd30      	pop	{r4, r5, pc}
 8001f8a:	bf00      	nop
 8001f8c:	40023800 	.word	0x40023800
 8001f90:	20003db8 	.word	0x20003db8
 8001f94:	40010000 	.word	0x40010000
 8001f98:	000f4240 	.word	0x000f4240

08001f9c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 8001f9c:	f7ff b861 	b.w	8001062 <osSystickHandler>

08001fa0 <TIM1_UP_TIM10_IRQHandler>:
void TIM1_UP_TIM10_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001fa0:	4801      	ldr	r0, [pc, #4]	; (8001fa8 <TIM1_UP_TIM10_IRQHandler+0x8>)
 8001fa2:	f7fe bef0 	b.w	8000d86 <HAL_TIM_IRQHandler>
 8001fa6:	bf00      	nop
 8001fa8:	20003db8 	.word	0x20003db8

08001fac <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001fac:	4801      	ldr	r0, [pc, #4]	; (8001fb4 <TIM2_IRQHandler+0x8>)
 8001fae:	f7fe beea 	b.w	8000d86 <HAL_TIM_IRQHandler>
 8001fb2:	bf00      	nop
 8001fb4:	20003d7c 	.word	0x20003d7c

08001fb8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fb8:	490f      	ldr	r1, [pc, #60]	; (8001ff8 <SystemInit+0x40>)
 8001fba:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001fbe:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001fc6:	4b0d      	ldr	r3, [pc, #52]	; (8001ffc <SystemInit+0x44>)
 8001fc8:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001fca:	2000      	movs	r0, #0
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001fcc:	f042 0201 	orr.w	r2, r2, #1
 8001fd0:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001fd2:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001fda:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001fde:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001fe0:	4a07      	ldr	r2, [pc, #28]	; (8002000 <SystemInit+0x48>)
 8001fe2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001fea:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001fec:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001fee:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001ff2:	608b      	str	r3, [r1, #8]
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	e000ed00 	.word	0xe000ed00
 8001ffc:	40023800 	.word	0x40023800
 8002000:	24003010 	.word	0x24003010

08002004 <__libc_init_array>:
 8002004:	b570      	push	{r4, r5, r6, lr}
 8002006:	4b0e      	ldr	r3, [pc, #56]	; (8002040 <__libc_init_array+0x3c>)
 8002008:	4c0e      	ldr	r4, [pc, #56]	; (8002044 <__libc_init_array+0x40>)
 800200a:	1ae4      	subs	r4, r4, r3
 800200c:	10a4      	asrs	r4, r4, #2
 800200e:	2500      	movs	r5, #0
 8002010:	461e      	mov	r6, r3
 8002012:	42a5      	cmp	r5, r4
 8002014:	d004      	beq.n	8002020 <__libc_init_array+0x1c>
 8002016:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800201a:	4798      	blx	r3
 800201c:	3501      	adds	r5, #1
 800201e:	e7f8      	b.n	8002012 <__libc_init_array+0xe>
 8002020:	f000 f81e 	bl	8002060 <_init>
 8002024:	4c08      	ldr	r4, [pc, #32]	; (8002048 <__libc_init_array+0x44>)
 8002026:	4b09      	ldr	r3, [pc, #36]	; (800204c <__libc_init_array+0x48>)
 8002028:	1ae4      	subs	r4, r4, r3
 800202a:	10a4      	asrs	r4, r4, #2
 800202c:	2500      	movs	r5, #0
 800202e:	461e      	mov	r6, r3
 8002030:	42a5      	cmp	r5, r4
 8002032:	d004      	beq.n	800203e <__libc_init_array+0x3a>
 8002034:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002038:	4798      	blx	r3
 800203a:	3501      	adds	r5, #1
 800203c:	e7f8      	b.n	8002030 <__libc_init_array+0x2c>
 800203e:	bd70      	pop	{r4, r5, r6, pc}
 8002040:	080020d0 	.word	0x080020d0
 8002044:	080020d0 	.word	0x080020d0
 8002048:	080020d4 	.word	0x080020d4
 800204c:	080020d0 	.word	0x080020d0

08002050 <memset>:
 8002050:	4402      	add	r2, r0
 8002052:	4603      	mov	r3, r0
 8002054:	4293      	cmp	r3, r2
 8002056:	d002      	beq.n	800205e <memset+0xe>
 8002058:	f803 1b01 	strb.w	r1, [r3], #1
 800205c:	e7fa      	b.n	8002054 <memset+0x4>
 800205e:	4770      	bx	lr

08002060 <_init>:
 8002060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002062:	bf00      	nop
 8002064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002066:	bc08      	pop	{r3}
 8002068:	469e      	mov	lr, r3
 800206a:	4770      	bx	lr

0800206c <_fini>:
 800206c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800206e:	bf00      	nop
 8002070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002072:	bc08      	pop	{r3}
 8002074:	469e      	mov	lr, r3
 8002076:	4770      	bx	lr
