
446RE_TIMER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000645c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000370  08006630  08006630  00016630  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080069a0  080069a0  000169a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080069a8  080069a8  000169a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080069ac  080069ac  000169ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000540  20000000  080069b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000154  20000540  08006ef0  00020540  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000694  08006ef0  00020694  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020540  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000cb8f  00000000  00000000  00020570  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001e0b  00000000  00000000  0002d0ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000830  00000000  00000000  0002ef10  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000dd8  00000000  00000000  0002f740  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000047e7  00000000  00000000  00030518  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003123  00000000  00000000  00034cff  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007e  00000000  00000000  00037e22  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002024  00000000  00000000  00037ea0  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc    0000667e  00000000  00000000  00039ec4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000540 	.word	0x20000540
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006614 	.word	0x08006614

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000544 	.word	0x20000544
 800020c:	08006614 	.word	0x08006614

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f092 0f00 	teq	r2, #0
 80005aa:	bf14      	ite	ne
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	4770      	bxeq	lr
 80005b2:	b530      	push	{r4, r5, lr}
 80005b4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c0:	e720      	b.n	8000404 <__adddf3+0x138>
 80005c2:	bf00      	nop

080005c4 <__aeabi_ul2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	e00a      	b.n	80005ea <__aeabi_l2d+0x16>

080005d4 <__aeabi_l2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005e2:	d502      	bpl.n	80005ea <__aeabi_l2d+0x16>
 80005e4:	4240      	negs	r0, r0
 80005e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ea:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ee:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f6:	f43f aedc 	beq.w	80003b2 <__adddf3+0xe6>
 80005fa:	f04f 0203 	mov.w	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000612:	f1c2 0320 	rsb	r3, r2, #32
 8000616:	fa00 fc03 	lsl.w	ip, r0, r3
 800061a:	fa20 f002 	lsr.w	r0, r0, r2
 800061e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000622:	ea40 000e 	orr.w	r0, r0, lr
 8000626:	fa21 f102 	lsr.w	r1, r1, r2
 800062a:	4414      	add	r4, r2
 800062c:	e6c1      	b.n	80003b2 <__adddf3+0xe6>
 800062e:	bf00      	nop

08000630 <__aeabi_dmul>:
 8000630:	b570      	push	{r4, r5, r6, lr}
 8000632:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000636:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800063a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800063e:	bf1d      	ittte	ne
 8000640:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000644:	ea94 0f0c 	teqne	r4, ip
 8000648:	ea95 0f0c 	teqne	r5, ip
 800064c:	f000 f8de 	bleq	800080c <__aeabi_dmul+0x1dc>
 8000650:	442c      	add	r4, r5
 8000652:	ea81 0603 	eor.w	r6, r1, r3
 8000656:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800065a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800065e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000662:	bf18      	it	ne
 8000664:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000668:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800066c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000670:	d038      	beq.n	80006e4 <__aeabi_dmul+0xb4>
 8000672:	fba0 ce02 	umull	ip, lr, r0, r2
 8000676:	f04f 0500 	mov.w	r5, #0
 800067a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800067e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000682:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000686:	f04f 0600 	mov.w	r6, #0
 800068a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800068e:	f09c 0f00 	teq	ip, #0
 8000692:	bf18      	it	ne
 8000694:	f04e 0e01 	orrne.w	lr, lr, #1
 8000698:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800069c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006a4:	d204      	bcs.n	80006b0 <__aeabi_dmul+0x80>
 80006a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006aa:	416d      	adcs	r5, r5
 80006ac:	eb46 0606 	adc.w	r6, r6, r6
 80006b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c8:	bf88      	it	hi
 80006ca:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ce:	d81e      	bhi.n	800070e <__aeabi_dmul+0xde>
 80006d0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006d4:	bf08      	it	eq
 80006d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006da:	f150 0000 	adcs.w	r0, r0, #0
 80006de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e8:	ea46 0101 	orr.w	r1, r6, r1
 80006ec:	ea40 0002 	orr.w	r0, r0, r2
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f8:	bfc2      	ittt	gt
 80006fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000702:	bd70      	popgt	{r4, r5, r6, pc}
 8000704:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000708:	f04f 0e00 	mov.w	lr, #0
 800070c:	3c01      	subs	r4, #1
 800070e:	f300 80ab 	bgt.w	8000868 <__aeabi_dmul+0x238>
 8000712:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000716:	bfde      	ittt	le
 8000718:	2000      	movle	r0, #0
 800071a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd70      	pople	{r4, r5, r6, pc}
 8000720:	f1c4 0400 	rsb	r4, r4, #0
 8000724:	3c20      	subs	r4, #32
 8000726:	da35      	bge.n	8000794 <__aeabi_dmul+0x164>
 8000728:	340c      	adds	r4, #12
 800072a:	dc1b      	bgt.n	8000764 <__aeabi_dmul+0x134>
 800072c:	f104 0414 	add.w	r4, r4, #20
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f305 	lsl.w	r3, r0, r5
 8000738:	fa20 f004 	lsr.w	r0, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000748:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800074c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000750:	fa21 f604 	lsr.w	r6, r1, r4
 8000754:	eb42 0106 	adc.w	r1, r2, r6
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 040c 	rsb	r4, r4, #12
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f304 	lsl.w	r3, r0, r4
 8000770:	fa20 f005 	lsr.w	r0, r0, r5
 8000774:	fa01 f204 	lsl.w	r2, r1, r4
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000784:	f141 0100 	adc.w	r1, r1, #0
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f1c4 0520 	rsb	r5, r4, #32
 8000798:	fa00 f205 	lsl.w	r2, r0, r5
 800079c:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a0:	fa20 f304 	lsr.w	r3, r0, r4
 80007a4:	fa01 f205 	lsl.w	r2, r1, r5
 80007a8:	ea43 0302 	orr.w	r3, r3, r2
 80007ac:	fa21 f004 	lsr.w	r0, r1, r4
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	fa21 f204 	lsr.w	r2, r1, r4
 80007b8:	ea20 0002 	bic.w	r0, r0, r2
 80007bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f094 0f00 	teq	r4, #0
 80007d0:	d10f      	bne.n	80007f2 <__aeabi_dmul+0x1c2>
 80007d2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007d6:	0040      	lsls	r0, r0, #1
 80007d8:	eb41 0101 	adc.w	r1, r1, r1
 80007dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3c01      	subeq	r4, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1a6>
 80007e6:	ea41 0106 	orr.w	r1, r1, r6
 80007ea:	f095 0f00 	teq	r5, #0
 80007ee:	bf18      	it	ne
 80007f0:	4770      	bxne	lr
 80007f2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007f6:	0052      	lsls	r2, r2, #1
 80007f8:	eb43 0303 	adc.w	r3, r3, r3
 80007fc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000800:	bf08      	it	eq
 8000802:	3d01      	subeq	r5, #1
 8000804:	d0f7      	beq.n	80007f6 <__aeabi_dmul+0x1c6>
 8000806:	ea43 0306 	orr.w	r3, r3, r6
 800080a:	4770      	bx	lr
 800080c:	ea94 0f0c 	teq	r4, ip
 8000810:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000814:	bf18      	it	ne
 8000816:	ea95 0f0c 	teqne	r5, ip
 800081a:	d00c      	beq.n	8000836 <__aeabi_dmul+0x206>
 800081c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000820:	bf18      	it	ne
 8000822:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000826:	d1d1      	bne.n	80007cc <__aeabi_dmul+0x19c>
 8000828:	ea81 0103 	eor.w	r1, r1, r3
 800082c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000830:	f04f 0000 	mov.w	r0, #0
 8000834:	bd70      	pop	{r4, r5, r6, pc}
 8000836:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800083a:	bf06      	itte	eq
 800083c:	4610      	moveq	r0, r2
 800083e:	4619      	moveq	r1, r3
 8000840:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000844:	d019      	beq.n	800087a <__aeabi_dmul+0x24a>
 8000846:	ea94 0f0c 	teq	r4, ip
 800084a:	d102      	bne.n	8000852 <__aeabi_dmul+0x222>
 800084c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000850:	d113      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000852:	ea95 0f0c 	teq	r5, ip
 8000856:	d105      	bne.n	8000864 <__aeabi_dmul+0x234>
 8000858:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800085c:	bf1c      	itt	ne
 800085e:	4610      	movne	r0, r2
 8000860:	4619      	movne	r1, r3
 8000862:	d10a      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000864:	ea81 0103 	eor.w	r1, r1, r3
 8000868:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800086c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000870:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	bd70      	pop	{r4, r5, r6, pc}
 800087a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800087e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000882:	bd70      	pop	{r4, r5, r6, pc}

08000884 <__aeabi_ddiv>:
 8000884:	b570      	push	{r4, r5, r6, lr}
 8000886:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800088a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800088e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000892:	bf1d      	ittte	ne
 8000894:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000898:	ea94 0f0c 	teqne	r4, ip
 800089c:	ea95 0f0c 	teqne	r5, ip
 80008a0:	f000 f8a7 	bleq	80009f2 <__aeabi_ddiv+0x16e>
 80008a4:	eba4 0405 	sub.w	r4, r4, r5
 80008a8:	ea81 0e03 	eor.w	lr, r1, r3
 80008ac:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b4:	f000 8088 	beq.w	80009c8 <__aeabi_ddiv+0x144>
 80008b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008bc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008cc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008dc:	429d      	cmp	r5, r3
 80008de:	bf08      	it	eq
 80008e0:	4296      	cmpeq	r6, r2
 80008e2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008e6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ea:	d202      	bcs.n	80008f2 <__aeabi_ddiv+0x6e>
 80008ec:	085b      	lsrs	r3, r3, #1
 80008ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f2:	1ab6      	subs	r6, r6, r2
 80008f4:	eb65 0503 	sbc.w	r5, r5, r3
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000902:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 000c 	orrcs.w	r0, r0, ip
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000960:	ea55 0e06 	orrs.w	lr, r5, r6
 8000964:	d018      	beq.n	8000998 <__aeabi_ddiv+0x114>
 8000966:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800096a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800096e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000972:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000976:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800097a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800097e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000982:	d1c0      	bne.n	8000906 <__aeabi_ddiv+0x82>
 8000984:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000988:	d10b      	bne.n	80009a2 <__aeabi_ddiv+0x11e>
 800098a:	ea41 0100 	orr.w	r1, r1, r0
 800098e:	f04f 0000 	mov.w	r0, #0
 8000992:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000996:	e7b6      	b.n	8000906 <__aeabi_ddiv+0x82>
 8000998:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800099c:	bf04      	itt	eq
 800099e:	4301      	orreq	r1, r0
 80009a0:	2000      	moveq	r0, #0
 80009a2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009a6:	bf88      	it	hi
 80009a8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009ac:	f63f aeaf 	bhi.w	800070e <__aeabi_dmul+0xde>
 80009b0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b4:	bf04      	itt	eq
 80009b6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009be:	f150 0000 	adcs.w	r0, r0, #0
 80009c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	pop	{r4, r5, r6, pc}
 80009c8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009cc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d4:	bfc2      	ittt	gt
 80009d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009de:	bd70      	popgt	{r4, r5, r6, pc}
 80009e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e4:	f04f 0e00 	mov.w	lr, #0
 80009e8:	3c01      	subs	r4, #1
 80009ea:	e690      	b.n	800070e <__aeabi_dmul+0xde>
 80009ec:	ea45 0e06 	orr.w	lr, r5, r6
 80009f0:	e68d      	b.n	800070e <__aeabi_dmul+0xde>
 80009f2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f6:	ea94 0f0c 	teq	r4, ip
 80009fa:	bf08      	it	eq
 80009fc:	ea95 0f0c 	teqeq	r5, ip
 8000a00:	f43f af3b 	beq.w	800087a <__aeabi_dmul+0x24a>
 8000a04:	ea94 0f0c 	teq	r4, ip
 8000a08:	d10a      	bne.n	8000a20 <__aeabi_ddiv+0x19c>
 8000a0a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a0e:	f47f af34 	bne.w	800087a <__aeabi_dmul+0x24a>
 8000a12:	ea95 0f0c 	teq	r5, ip
 8000a16:	f47f af25 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	e72c      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a20:	ea95 0f0c 	teq	r5, ip
 8000a24:	d106      	bne.n	8000a34 <__aeabi_ddiv+0x1b0>
 8000a26:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a2a:	f43f aefd 	beq.w	8000828 <__aeabi_dmul+0x1f8>
 8000a2e:	4610      	mov	r0, r2
 8000a30:	4619      	mov	r1, r3
 8000a32:	e722      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a34:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3e:	f47f aec5 	bne.w	80007cc <__aeabi_dmul+0x19c>
 8000a42:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a46:	f47f af0d 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a4a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a4e:	f47f aeeb 	bne.w	8000828 <__aeabi_dmul+0x1f8>
 8000a52:	e712      	b.n	800087a <__aeabi_dmul+0x24a>

08000a54 <__gedf2>:
 8000a54:	f04f 3cff 	mov.w	ip, #4294967295
 8000a58:	e006      	b.n	8000a68 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__ledf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	e002      	b.n	8000a68 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__cmpdf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a78:	bf18      	it	ne
 8000a7a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a7e:	d01b      	beq.n	8000ab8 <__cmpdf2+0x54>
 8000a80:	b001      	add	sp, #4
 8000a82:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a86:	bf0c      	ite	eq
 8000a88:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a8c:	ea91 0f03 	teqne	r1, r3
 8000a90:	bf02      	ittt	eq
 8000a92:	ea90 0f02 	teqeq	r0, r2
 8000a96:	2000      	moveq	r0, #0
 8000a98:	4770      	bxeq	lr
 8000a9a:	f110 0f00 	cmn.w	r0, #0
 8000a9e:	ea91 0f03 	teq	r1, r3
 8000aa2:	bf58      	it	pl
 8000aa4:	4299      	cmppl	r1, r3
 8000aa6:	bf08      	it	eq
 8000aa8:	4290      	cmpeq	r0, r2
 8000aaa:	bf2c      	ite	cs
 8000aac:	17d8      	asrcs	r0, r3, #31
 8000aae:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ab2:	f040 0001 	orr.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000abc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac0:	d102      	bne.n	8000ac8 <__cmpdf2+0x64>
 8000ac2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac6:	d107      	bne.n	8000ad8 <__cmpdf2+0x74>
 8000ac8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d1d6      	bne.n	8000a80 <__cmpdf2+0x1c>
 8000ad2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad6:	d0d3      	beq.n	8000a80 <__cmpdf2+0x1c>
 8000ad8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop

08000ae0 <__aeabi_cdrcmple>:
 8000ae0:	4684      	mov	ip, r0
 8000ae2:	4610      	mov	r0, r2
 8000ae4:	4662      	mov	r2, ip
 8000ae6:	468c      	mov	ip, r1
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4663      	mov	r3, ip
 8000aec:	e000      	b.n	8000af0 <__aeabi_cdcmpeq>
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdcmpeq>:
 8000af0:	b501      	push	{r0, lr}
 8000af2:	f7ff ffb7 	bl	8000a64 <__cmpdf2>
 8000af6:	2800      	cmp	r0, #0
 8000af8:	bf48      	it	mi
 8000afa:	f110 0f00 	cmnmi.w	r0, #0
 8000afe:	bd01      	pop	{r0, pc}

08000b00 <__aeabi_dcmpeq>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff fff4 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b08:	bf0c      	ite	eq
 8000b0a:	2001      	moveq	r0, #1
 8000b0c:	2000      	movne	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmplt>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffea 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b1c:	bf34      	ite	cc
 8000b1e:	2001      	movcc	r0, #1
 8000b20:	2000      	movcs	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmple>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffe0 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b30:	bf94      	ite	ls
 8000b32:	2001      	movls	r0, #1
 8000b34:	2000      	movhi	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpge>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffce 	bl	8000ae0 <__aeabi_cdrcmple>
 8000b44:	bf94      	ite	ls
 8000b46:	2001      	movls	r0, #1
 8000b48:	2000      	movhi	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmpgt>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffc4 	bl	8000ae0 <__aeabi_cdrcmple>
 8000b58:	bf34      	ite	cc
 8000b5a:	2001      	movcc	r0, #1
 8000b5c:	2000      	movcs	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpun>:
 8000b64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b6c:	d102      	bne.n	8000b74 <__aeabi_dcmpun+0x10>
 8000b6e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b72:	d10a      	bne.n	8000b8a <__aeabi_dcmpun+0x26>
 8000b74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x20>
 8000b7e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b82:	d102      	bne.n	8000b8a <__aeabi_dcmpun+0x26>
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	f04f 0001 	mov.w	r0, #1
 8000b8e:	4770      	bx	lr

08000b90 <__aeabi_d2iz>:
 8000b90:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b94:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b98:	d215      	bcs.n	8000bc6 <__aeabi_d2iz+0x36>
 8000b9a:	d511      	bpl.n	8000bc0 <__aeabi_d2iz+0x30>
 8000b9c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ba4:	d912      	bls.n	8000bcc <__aeabi_d2iz+0x3c>
 8000ba6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000baa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bae:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bb2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bb6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bba:	bf18      	it	ne
 8000bbc:	4240      	negne	r0, r0
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bca:	d105      	bne.n	8000bd8 <__aeabi_d2iz+0x48>
 8000bcc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd0:	bf08      	it	eq
 8000bd2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop

08000be0 <__aeabi_uldivmod>:
 8000be0:	b953      	cbnz	r3, 8000bf8 <__aeabi_uldivmod+0x18>
 8000be2:	b94a      	cbnz	r2, 8000bf8 <__aeabi_uldivmod+0x18>
 8000be4:	2900      	cmp	r1, #0
 8000be6:	bf08      	it	eq
 8000be8:	2800      	cmpeq	r0, #0
 8000bea:	bf1c      	itt	ne
 8000bec:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bf4:	f000 b97e 	b.w	8000ef4 <__aeabi_idiv0>
 8000bf8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bfc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c00:	f000 f806 	bl	8000c10 <__udivmoddi4>
 8000c04:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c0c:	b004      	add	sp, #16
 8000c0e:	4770      	bx	lr

08000c10 <__udivmoddi4>:
 8000c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c14:	468c      	mov	ip, r1
 8000c16:	460e      	mov	r6, r1
 8000c18:	4604      	mov	r4, r0
 8000c1a:	9d08      	ldr	r5, [sp, #32]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d150      	bne.n	8000cc2 <__udivmoddi4+0xb2>
 8000c20:	428a      	cmp	r2, r1
 8000c22:	4617      	mov	r7, r2
 8000c24:	d96c      	bls.n	8000d00 <__udivmoddi4+0xf0>
 8000c26:	fab2 fe82 	clz	lr, r2
 8000c2a:	f1be 0f00 	cmp.w	lr, #0
 8000c2e:	d00b      	beq.n	8000c48 <__udivmoddi4+0x38>
 8000c30:	f1ce 0420 	rsb	r4, lr, #32
 8000c34:	fa20 f404 	lsr.w	r4, r0, r4
 8000c38:	fa01 f60e 	lsl.w	r6, r1, lr
 8000c3c:	ea44 0c06 	orr.w	ip, r4, r6
 8000c40:	fa02 f70e 	lsl.w	r7, r2, lr
 8000c44:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c48:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000c4c:	0c22      	lsrs	r2, r4, #16
 8000c4e:	fbbc f0f9 	udiv	r0, ip, r9
 8000c52:	fa1f f887 	uxth.w	r8, r7
 8000c56:	fb09 c610 	mls	r6, r9, r0, ip
 8000c5a:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 8000c5e:	fb00 f308 	mul.w	r3, r0, r8
 8000c62:	42b3      	cmp	r3, r6
 8000c64:	d909      	bls.n	8000c7a <__udivmoddi4+0x6a>
 8000c66:	19f6      	adds	r6, r6, r7
 8000c68:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c6c:	f080 8122 	bcs.w	8000eb4 <__udivmoddi4+0x2a4>
 8000c70:	42b3      	cmp	r3, r6
 8000c72:	f240 811f 	bls.w	8000eb4 <__udivmoddi4+0x2a4>
 8000c76:	3802      	subs	r0, #2
 8000c78:	443e      	add	r6, r7
 8000c7a:	1af6      	subs	r6, r6, r3
 8000c7c:	b2a2      	uxth	r2, r4
 8000c7e:	fbb6 f3f9 	udiv	r3, r6, r9
 8000c82:	fb09 6613 	mls	r6, r9, r3, r6
 8000c86:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 8000c8a:	fb03 f808 	mul.w	r8, r3, r8
 8000c8e:	45a0      	cmp	r8, r4
 8000c90:	d909      	bls.n	8000ca6 <__udivmoddi4+0x96>
 8000c92:	19e4      	adds	r4, r4, r7
 8000c94:	f103 32ff 	add.w	r2, r3, #4294967295
 8000c98:	f080 810a 	bcs.w	8000eb0 <__udivmoddi4+0x2a0>
 8000c9c:	45a0      	cmp	r8, r4
 8000c9e:	f240 8107 	bls.w	8000eb0 <__udivmoddi4+0x2a0>
 8000ca2:	3b02      	subs	r3, #2
 8000ca4:	443c      	add	r4, r7
 8000ca6:	ebc8 0404 	rsb	r4, r8, r4
 8000caa:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000cae:	2100      	movs	r1, #0
 8000cb0:	2d00      	cmp	r5, #0
 8000cb2:	d062      	beq.n	8000d7a <__udivmoddi4+0x16a>
 8000cb4:	fa24 f40e 	lsr.w	r4, r4, lr
 8000cb8:	2300      	movs	r3, #0
 8000cba:	602c      	str	r4, [r5, #0]
 8000cbc:	606b      	str	r3, [r5, #4]
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d907      	bls.n	8000cd6 <__udivmoddi4+0xc6>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	d055      	beq.n	8000d76 <__udivmoddi4+0x166>
 8000cca:	2100      	movs	r1, #0
 8000ccc:	e885 0041 	stmia.w	r5, {r0, r6}
 8000cd0:	4608      	mov	r0, r1
 8000cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd6:	fab3 f183 	clz	r1, r3
 8000cda:	2900      	cmp	r1, #0
 8000cdc:	f040 8090 	bne.w	8000e00 <__udivmoddi4+0x1f0>
 8000ce0:	42b3      	cmp	r3, r6
 8000ce2:	d302      	bcc.n	8000cea <__udivmoddi4+0xda>
 8000ce4:	4282      	cmp	r2, r0
 8000ce6:	f200 80f8 	bhi.w	8000eda <__udivmoddi4+0x2ca>
 8000cea:	1a84      	subs	r4, r0, r2
 8000cec:	eb66 0603 	sbc.w	r6, r6, r3
 8000cf0:	2001      	movs	r0, #1
 8000cf2:	46b4      	mov	ip, r6
 8000cf4:	2d00      	cmp	r5, #0
 8000cf6:	d040      	beq.n	8000d7a <__udivmoddi4+0x16a>
 8000cf8:	e885 1010 	stmia.w	r5, {r4, ip}
 8000cfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d00:	b912      	cbnz	r2, 8000d08 <__udivmoddi4+0xf8>
 8000d02:	2701      	movs	r7, #1
 8000d04:	fbb7 f7f2 	udiv	r7, r7, r2
 8000d08:	fab7 fe87 	clz	lr, r7
 8000d0c:	f1be 0f00 	cmp.w	lr, #0
 8000d10:	d135      	bne.n	8000d7e <__udivmoddi4+0x16e>
 8000d12:	1bf3      	subs	r3, r6, r7
 8000d14:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d18:	fa1f fc87 	uxth.w	ip, r7
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d22:	0c22      	lsrs	r2, r4, #16
 8000d24:	fb08 3610 	mls	r6, r8, r0, r3
 8000d28:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 8000d2c:	fb0c f300 	mul.w	r3, ip, r0
 8000d30:	42b3      	cmp	r3, r6
 8000d32:	d907      	bls.n	8000d44 <__udivmoddi4+0x134>
 8000d34:	19f6      	adds	r6, r6, r7
 8000d36:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x132>
 8000d3c:	42b3      	cmp	r3, r6
 8000d3e:	f200 80ce 	bhi.w	8000ede <__udivmoddi4+0x2ce>
 8000d42:	4610      	mov	r0, r2
 8000d44:	1af6      	subs	r6, r6, r3
 8000d46:	b2a2      	uxth	r2, r4
 8000d48:	fbb6 f3f8 	udiv	r3, r6, r8
 8000d4c:	fb08 6613 	mls	r6, r8, r3, r6
 8000d50:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 8000d54:	fb0c fc03 	mul.w	ip, ip, r3
 8000d58:	45a4      	cmp	ip, r4
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0x15c>
 8000d5c:	19e4      	adds	r4, r4, r7
 8000d5e:	f103 32ff 	add.w	r2, r3, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0x15a>
 8000d64:	45a4      	cmp	ip, r4
 8000d66:	f200 80b5 	bhi.w	8000ed4 <__udivmoddi4+0x2c4>
 8000d6a:	4613      	mov	r3, r2
 8000d6c:	ebcc 0404 	rsb	r4, ip, r4
 8000d70:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d74:	e79c      	b.n	8000cb0 <__udivmoddi4+0xa0>
 8000d76:	4629      	mov	r1, r5
 8000d78:	4628      	mov	r0, r5
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	f1ce 0120 	rsb	r1, lr, #32
 8000d82:	fa06 f30e 	lsl.w	r3, r6, lr
 8000d86:	fa07 f70e 	lsl.w	r7, r7, lr
 8000d8a:	fa20 f901 	lsr.w	r9, r0, r1
 8000d8e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d92:	40ce      	lsrs	r6, r1
 8000d94:	ea49 0903 	orr.w	r9, r9, r3
 8000d98:	fbb6 faf8 	udiv	sl, r6, r8
 8000d9c:	ea4f 4419 	mov.w	r4, r9, lsr #16
 8000da0:	fb08 661a 	mls	r6, r8, sl, r6
 8000da4:	fa1f fc87 	uxth.w	ip, r7
 8000da8:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
 8000dac:	fb0a f20c 	mul.w	r2, sl, ip
 8000db0:	429a      	cmp	r2, r3
 8000db2:	fa00 f40e 	lsl.w	r4, r0, lr
 8000db6:	d90a      	bls.n	8000dce <__udivmoddi4+0x1be>
 8000db8:	19db      	adds	r3, r3, r7
 8000dba:	f10a 31ff 	add.w	r1, sl, #4294967295
 8000dbe:	f080 8087 	bcs.w	8000ed0 <__udivmoddi4+0x2c0>
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	f240 8084 	bls.w	8000ed0 <__udivmoddi4+0x2c0>
 8000dc8:	f1aa 0a02 	sub.w	sl, sl, #2
 8000dcc:	443b      	add	r3, r7
 8000dce:	1a9b      	subs	r3, r3, r2
 8000dd0:	fa1f f989 	uxth.w	r9, r9
 8000dd4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000dd8:	fb08 3311 	mls	r3, r8, r1, r3
 8000ddc:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
 8000de0:	fb01 f60c 	mul.w	r6, r1, ip
 8000de4:	429e      	cmp	r6, r3
 8000de6:	d907      	bls.n	8000df8 <__udivmoddi4+0x1e8>
 8000de8:	19db      	adds	r3, r3, r7
 8000dea:	f101 32ff 	add.w	r2, r1, #4294967295
 8000dee:	d26b      	bcs.n	8000ec8 <__udivmoddi4+0x2b8>
 8000df0:	429e      	cmp	r6, r3
 8000df2:	d969      	bls.n	8000ec8 <__udivmoddi4+0x2b8>
 8000df4:	3902      	subs	r1, #2
 8000df6:	443b      	add	r3, r7
 8000df8:	1b9b      	subs	r3, r3, r6
 8000dfa:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8000dfe:	e78e      	b.n	8000d1e <__udivmoddi4+0x10e>
 8000e00:	f1c1 0e20 	rsb	lr, r1, #32
 8000e04:	fa22 f40e 	lsr.w	r4, r2, lr
 8000e08:	408b      	lsls	r3, r1
 8000e0a:	4323      	orrs	r3, r4
 8000e0c:	fa20 f70e 	lsr.w	r7, r0, lr
 8000e10:	fa06 f401 	lsl.w	r4, r6, r1
 8000e14:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000e18:	fa26 f60e 	lsr.w	r6, r6, lr
 8000e1c:	433c      	orrs	r4, r7
 8000e1e:	fbb6 f9fc 	udiv	r9, r6, ip
 8000e22:	0c27      	lsrs	r7, r4, #16
 8000e24:	fb0c 6619 	mls	r6, ip, r9, r6
 8000e28:	fa1f f883 	uxth.w	r8, r3
 8000e2c:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
 8000e30:	fb09 f708 	mul.w	r7, r9, r8
 8000e34:	42b7      	cmp	r7, r6
 8000e36:	fa02 f201 	lsl.w	r2, r2, r1
 8000e3a:	fa00 fa01 	lsl.w	sl, r0, r1
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x242>
 8000e40:	18f6      	adds	r6, r6, r3
 8000e42:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e46:	d241      	bcs.n	8000ecc <__udivmoddi4+0x2bc>
 8000e48:	42b7      	cmp	r7, r6
 8000e4a:	d93f      	bls.n	8000ecc <__udivmoddi4+0x2bc>
 8000e4c:	f1a9 0902 	sub.w	r9, r9, #2
 8000e50:	441e      	add	r6, r3
 8000e52:	1bf6      	subs	r6, r6, r7
 8000e54:	b2a0      	uxth	r0, r4
 8000e56:	fbb6 f4fc 	udiv	r4, r6, ip
 8000e5a:	fb0c 6614 	mls	r6, ip, r4, r6
 8000e5e:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
 8000e62:	fb04 f808 	mul.w	r8, r4, r8
 8000e66:	45b8      	cmp	r8, r7
 8000e68:	d907      	bls.n	8000e7a <__udivmoddi4+0x26a>
 8000e6a:	18ff      	adds	r7, r7, r3
 8000e6c:	f104 30ff 	add.w	r0, r4, #4294967295
 8000e70:	d228      	bcs.n	8000ec4 <__udivmoddi4+0x2b4>
 8000e72:	45b8      	cmp	r8, r7
 8000e74:	d926      	bls.n	8000ec4 <__udivmoddi4+0x2b4>
 8000e76:	3c02      	subs	r4, #2
 8000e78:	441f      	add	r7, r3
 8000e7a:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
 8000e7e:	ebc8 0707 	rsb	r7, r8, r7
 8000e82:	fba0 8902 	umull	r8, r9, r0, r2
 8000e86:	454f      	cmp	r7, r9
 8000e88:	4644      	mov	r4, r8
 8000e8a:	464e      	mov	r6, r9
 8000e8c:	d314      	bcc.n	8000eb8 <__udivmoddi4+0x2a8>
 8000e8e:	d029      	beq.n	8000ee4 <__udivmoddi4+0x2d4>
 8000e90:	b365      	cbz	r5, 8000eec <__udivmoddi4+0x2dc>
 8000e92:	ebba 0304 	subs.w	r3, sl, r4
 8000e96:	eb67 0706 	sbc.w	r7, r7, r6
 8000e9a:	fa07 fe0e 	lsl.w	lr, r7, lr
 8000e9e:	40cb      	lsrs	r3, r1
 8000ea0:	40cf      	lsrs	r7, r1
 8000ea2:	ea4e 0303 	orr.w	r3, lr, r3
 8000ea6:	e885 0088 	stmia.w	r5, {r3, r7}
 8000eaa:	2100      	movs	r1, #0
 8000eac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb0:	4613      	mov	r3, r2
 8000eb2:	e6f8      	b.n	8000ca6 <__udivmoddi4+0x96>
 8000eb4:	4610      	mov	r0, r2
 8000eb6:	e6e0      	b.n	8000c7a <__udivmoddi4+0x6a>
 8000eb8:	ebb8 0402 	subs.w	r4, r8, r2
 8000ebc:	eb69 0603 	sbc.w	r6, r9, r3
 8000ec0:	3801      	subs	r0, #1
 8000ec2:	e7e5      	b.n	8000e90 <__udivmoddi4+0x280>
 8000ec4:	4604      	mov	r4, r0
 8000ec6:	e7d8      	b.n	8000e7a <__udivmoddi4+0x26a>
 8000ec8:	4611      	mov	r1, r2
 8000eca:	e795      	b.n	8000df8 <__udivmoddi4+0x1e8>
 8000ecc:	4681      	mov	r9, r0
 8000ece:	e7c0      	b.n	8000e52 <__udivmoddi4+0x242>
 8000ed0:	468a      	mov	sl, r1
 8000ed2:	e77c      	b.n	8000dce <__udivmoddi4+0x1be>
 8000ed4:	3b02      	subs	r3, #2
 8000ed6:	443c      	add	r4, r7
 8000ed8:	e748      	b.n	8000d6c <__udivmoddi4+0x15c>
 8000eda:	4608      	mov	r0, r1
 8000edc:	e70a      	b.n	8000cf4 <__udivmoddi4+0xe4>
 8000ede:	3802      	subs	r0, #2
 8000ee0:	443e      	add	r6, r7
 8000ee2:	e72f      	b.n	8000d44 <__udivmoddi4+0x134>
 8000ee4:	45c2      	cmp	sl, r8
 8000ee6:	d3e7      	bcc.n	8000eb8 <__udivmoddi4+0x2a8>
 8000ee8:	463e      	mov	r6, r7
 8000eea:	e7d1      	b.n	8000e90 <__udivmoddi4+0x280>
 8000eec:	4629      	mov	r1, r5
 8000eee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ef2:	bf00      	nop

08000ef4 <__aeabi_idiv0>:
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop

08000ef8 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8000ef8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000efa:	f001 fbd7 	bl	80026ac <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000efe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  HAL_SYSTICK_IRQHandler();
 8000f02:	f001 bba2 	b.w	800264a <HAL_SYSTICK_IRQHandler>

08000f06 <RCC_IRQHandler>:

/**
* @brief This function handles RCC global interrupt.
*/
void RCC_IRQHandler(void)
{
 8000f06:	4770      	bx	lr

08000f08 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f08:	4801      	ldr	r0, [pc, #4]	; (8000f10 <TIM2_IRQHandler+0x8>)
 8000f0a:	f000 bde8 	b.w	8001ade <HAL_TIM_IRQHandler>
 8000f0e:	bf00      	nop
 8000f10:	2000060c 	.word	0x2000060c

08000f14 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000f14:	4801      	ldr	r0, [pc, #4]	; (8000f1c <TIM3_IRQHandler+0x8>)
 8000f16:	f000 bde2 	b.w	8001ade <HAL_TIM_IRQHandler>
 8000f1a:	bf00      	nop
 8000f1c:	200005d0 	.word	0x200005d0

08000f20 <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000f20:	4801      	ldr	r0, [pc, #4]	; (8000f28 <TIM4_IRQHandler+0x8>)
 8000f22:	f000 bddc 	b.w	8001ade <HAL_TIM_IRQHandler>
 8000f26:	bf00      	nop
 8000f28:	20000594 	.word	0x20000594

08000f2c <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f2c:	4801      	ldr	r0, [pc, #4]	; (8000f34 <USART2_IRQHandler+0x8>)
 8000f2e:	f000 bc1b 	b.w	8001768 <HAL_UART_IRQHandler>
 8000f32:	bf00      	nop
 8000f34:	20000648 	.word	0x20000648

08000f38 <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f38:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000f3a:	2007      	movs	r0, #7
 8000f3c:	f001 fb10 	bl	8002560 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8000f40:	2200      	movs	r2, #0
 8000f42:	4611      	mov	r1, r2
 8000f44:	f06f 000b 	mvn.w	r0, #11
 8000f48:	f001 fb1c 	bl	8002584 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	4611      	mov	r1, r2
 8000f50:	f06f 000a 	mvn.w	r0, #10
 8000f54:	f001 fb16 	bl	8002584 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8000f58:	2200      	movs	r2, #0
 8000f5a:	4611      	mov	r1, r2
 8000f5c:	f06f 0009 	mvn.w	r0, #9
 8000f60:	f001 fb10 	bl	8002584 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8000f64:	2200      	movs	r2, #0
 8000f66:	4611      	mov	r1, r2
 8000f68:	f06f 0003 	mvn.w	r0, #3
 8000f6c:	f001 fb0a 	bl	8002584 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000f70:	2200      	movs	r2, #0
 8000f72:	4611      	mov	r1, r2
 8000f74:	f04f 30ff 	mov.w	r0, #4294967295
 8000f78:	f001 fb04 	bl	8002584 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init*/
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	2005      	movs	r0, #5
 8000f80:	4611      	mov	r1, r2
 8000f82:	f001 faff 	bl	8002584 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000f86:	2005      	movs	r0, #5

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f88:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);

  /* Peripheral interrupt init*/
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000f8c:	f001 bb2e 	b.w	80025ec <HAL_NVIC_EnableIRQ>

08000f90 <HAL_TIM_Base_MspInit>:

  /* USER CODE END MspInit 1 */
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f90:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  if(htim_base->Instance==TIM2)
 8000f92:	6803      	ldr	r3, [r0, #0]
 8000f94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f98:	d112      	bne.n	8000fc0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8000fa0:	9201      	str	r2, [sp, #4]
 8000fa2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8000fa4:	f041 0101 	orr.w	r1, r1, #1
 8000fa8:	6419      	str	r1, [r3, #64]	; 0x40
 8000faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fac:	f003 0301 	and.w	r3, r3, #1
 8000fb0:	9301      	str	r3, [sp, #4]
    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000fb2:	201c      	movs	r0, #28
 8000fb4:	4611      	mov	r1, r2
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fb6:	9b01      	ldr	r3, [sp, #4]
    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000fb8:	f001 fae4 	bl	8002584 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000fbc:	201c      	movs	r0, #28
 8000fbe:	e028      	b.n	8001012 <HAL_TIM_Base_MspInit+0x82>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 8000fc0:	4a16      	ldr	r2, [pc, #88]	; (800101c <HAL_TIM_Base_MspInit+0x8c>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d111      	bne.n	8000fea <HAL_TIM_Base_MspInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	4b15      	ldr	r3, [pc, #84]	; (8001020 <HAL_TIM_Base_MspInit+0x90>)
 8000fca:	9202      	str	r2, [sp, #8]
 8000fcc:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8000fce:	f041 0102 	orr.w	r1, r1, #2
 8000fd2:	6419      	str	r1, [r3, #64]	; 0x40
 8000fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd6:	f003 0302 	and.w	r3, r3, #2
 8000fda:	9302      	str	r3, [sp, #8]
    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000fdc:	201d      	movs	r0, #29
 8000fde:	4611      	mov	r1, r2
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000fe0:	9b02      	ldr	r3, [sp, #8]
    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000fe2:	f001 facf 	bl	8002584 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000fe6:	201d      	movs	r0, #29
 8000fe8:	e013      	b.n	8001012 <HAL_TIM_Base_MspInit+0x82>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM4)
 8000fea:	4a0e      	ldr	r2, [pc, #56]	; (8001024 <HAL_TIM_Base_MspInit+0x94>)
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d112      	bne.n	8001016 <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	4b0b      	ldr	r3, [pc, #44]	; (8001020 <HAL_TIM_Base_MspInit+0x90>)
 8000ff4:	9203      	str	r2, [sp, #12]
 8000ff6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8000ff8:	f041 0104 	orr.w	r1, r1, #4
 8000ffc:	6419      	str	r1, [r3, #64]	; 0x40
 8000ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001000:	f003 0304 	and.w	r3, r3, #4
 8001004:	9303      	str	r3, [sp, #12]
    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001006:	201e      	movs	r0, #30
 8001008:	4611      	mov	r1, r2
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800100a:	9b03      	ldr	r3, [sp, #12]
    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800100c:	f001 faba 	bl	8002584 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001010:	201e      	movs	r0, #30
 8001012:	f001 faeb 	bl	80025ec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001016:	b005      	add	sp, #20
 8001018:	f85d fb04 	ldr.w	pc, [sp], #4
 800101c:	40000400 	.word	0x40000400
 8001020:	40023800 	.word	0x40023800
 8001024:	40000800 	.word	0x40000800

08001028 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001028:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 800102a:	6802      	ldr	r2, [r0, #0]
 800102c:	4b14      	ldr	r3, [pc, #80]	; (8001080 <HAL_UART_MspInit+0x58>)
 800102e:	429a      	cmp	r2, r3
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001030:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 8001032:	d122      	bne.n	800107a <HAL_UART_MspInit+0x52>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001034:	2400      	movs	r4, #0
 8001036:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 800103a:	9400      	str	r4, [sp, #0]
 800103c:	6c19      	ldr	r1, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800103e:	4811      	ldr	r0, [pc, #68]	; (8001084 <HAL_UART_MspInit+0x5c>)
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001040:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8001044:	6419      	str	r1, [r3, #64]	; 0x40
 8001046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001048:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800104c:	9300      	str	r3, [sp, #0]
 800104e:	9b00      	ldr	r3, [sp, #0]
  
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001050:	230c      	movs	r3, #12
 8001052:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001054:	2302      	movs	r3, #2
 8001056:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001058:	2301      	movs	r3, #1
 800105a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800105c:	2303      	movs	r3, #3
 800105e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001060:	a901      	add	r1, sp, #4
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001062:	2307      	movs	r3, #7
 8001064:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001066:	f001 f999 	bl	800239c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800106a:	2026      	movs	r0, #38	; 0x26
 800106c:	4622      	mov	r2, r4
 800106e:	4621      	mov	r1, r4
 8001070:	f001 fa88 	bl	8002584 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001074:	2026      	movs	r0, #38	; 0x26
 8001076:	f001 fab9 	bl	80025ec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800107a:	b006      	add	sp, #24
 800107c:	bd10      	pop	{r4, pc}
 800107e:	bf00      	nop
 8001080:	40004400 	.word	0x40004400
 8001084:	40020000 	.word	0x40020000

08001088 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* USER CODE BEGIN 0 */
void	HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
	if(htim->Instance==TIM2)
 8001088:	6803      	ldr	r3, [r0, #0]
 800108a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800108e:	d101      	bne.n	8001094 <HAL_TIM_PeriodElapsedCallback+0xc>
	{
		HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_5);
 8001090:	2120      	movs	r1, #32
 8001092:	e008      	b.n	80010a6 <HAL_TIM_PeriodElapsedCallback+0x1e>
	}
	else if(htim->Instance==TIM3)
 8001094:	4a06      	ldr	r2, [pc, #24]	; (80010b0 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d101      	bne.n	800109e <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_6);
 800109a:	2140      	movs	r1, #64	; 0x40
 800109c:	e003      	b.n	80010a6 <HAL_TIM_PeriodElapsedCallback+0x1e>
	}
	else if(htim->Instance==TIM4)
 800109e:	4a05      	ldr	r2, [pc, #20]	; (80010b4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d103      	bne.n	80010ac <HAL_TIM_PeriodElapsedCallback+0x24>
	{
		HAL_GPIO_TogglePin(GPIOA,GPIO_PIN_7);
 80010a4:	2180      	movs	r1, #128	; 0x80
 80010a6:	4804      	ldr	r0, [pc, #16]	; (80010b8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80010a8:	f001 ba56 	b.w	8002558 <HAL_GPIO_TogglePin>
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	40000400 	.word	0x40000400
 80010b4:	40000800 	.word	0x40000800
 80010b8:	40020000 	.word	0x40020000

080010bc <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 80010bc:	b570      	push	{r4, r5, r6, lr}
 80010be:	b094      	sub	sp, #80	; 0x50

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
 80010c0:	2500      	movs	r5, #0
 80010c2:	4b25      	ldr	r3, [pc, #148]	; (8001158 <SystemClock_Config+0x9c>)
 80010c4:	9500      	str	r5, [sp, #0]
 80010c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010c8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80010cc:	641a      	str	r2, [r3, #64]	; 0x40
 80010ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010d4:	9300      	str	r3, [sp, #0]
 80010d6:	9b00      	ldr	r3, [sp, #0]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010d8:	4b20      	ldr	r3, [pc, #128]	; (800115c <SystemClock_Config+0xa0>)
 80010da:	9501      	str	r5, [sp, #4]
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010ea:	9301      	str	r3, [sp, #4]
 80010ec:	9b01      	ldr	r3, [sp, #4]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010ee:	2301      	movs	r3, #1
 80010f0:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010f2:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010f4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010f8:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010fa:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80010fc:	2604      	movs	r6, #4
  RCC_OscInitStruct.PLL.PLLN = 180;
 80010fe:	23b4      	movs	r3, #180	; 0xb4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8001100:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001102:	9310      	str	r3, [sp, #64]	; 0x40

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001104:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001106:	960f      	str	r6, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001108:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800110a:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800110c:	9413      	str	r4, [sp, #76]	; 0x4c
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800110e:	f000 fe07 	bl	8001d20 <HAL_RCC_OscConfig>

  HAL_PWREx_EnableOverDrive();
 8001112:	f001 f8f7 	bl	8002304 <HAL_PWREx_EnableOverDrive>

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001116:	230f      	movs	r3, #15
 8001118:	9302      	str	r3, [sp, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800111a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 800111e:	2105      	movs	r1, #5

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001120:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 8001122:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001124:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001128:	9306      	str	r3, [sp, #24]

  HAL_PWREx_EnableOverDrive();

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800112a:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800112c:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 800112e:	f001 f803 	bl	8002138 <HAL_RCC_ClockConfig>

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001132:	f001 f8a1 	bl	8002278 <HAL_RCC_GetHCLKFreq>
 8001136:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800113a:	fbb0 f0f3 	udiv	r0, r0, r3
 800113e:	f001 fa61 	bl	8002604 <HAL_SYSTICK_Config>

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001142:	4630      	mov	r0, r6
 8001144:	f001 fa74 	bl	8002630 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001148:	462a      	mov	r2, r5
 800114a:	4629      	mov	r1, r5
 800114c:	f04f 30ff 	mov.w	r0, #4294967295
 8001150:	f001 fa18 	bl	8002584 <HAL_NVIC_SetPriority>
}
 8001154:	b014      	add	sp, #80	; 0x50
 8001156:	bd70      	pop	{r4, r5, r6, pc}
 8001158:	40023800 	.word	0x40023800
 800115c:	40007000 	.word	0x40007000

08001160 <main>:
}

/* USER CODE END 0 */

int main(void)
{
 8001160:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001162:	b08f      	sub	sp, #60	; 0x3c
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001164:	2400      	movs	r4, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001166:	f001 fa87 	bl	8002678 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 800116a:	f7ff ffa7 	bl	80010bc <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800116e:	4b74      	ldr	r3, [pc, #464]	; (8001340 <main+0x1e0>)
 8001170:	9403      	str	r4, [sp, #12]
 8001172:	6b1a      	ldr	r2, [r3, #48]	; 0x30

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001174:	4873      	ldr	r0, [pc, #460]	; (8001344 <main+0x1e4>)
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001176:	f042 0204 	orr.w	r2, r2, #4
 800117a:	631a      	str	r2, [r3, #48]	; 0x30
 800117c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800117e:	f002 0204 	and.w	r2, r2, #4
 8001182:	9203      	str	r2, [sp, #12]
 8001184:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001186:	9404      	str	r4, [sp, #16]
 8001188:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800118a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800118e:	631a      	str	r2, [r3, #48]	; 0x30
 8001190:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001192:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001196:	9204      	str	r2, [sp, #16]
 8001198:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800119a:	9405      	str	r4, [sp, #20]
 800119c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800119e:	f042 0201 	orr.w	r2, r2, #1
 80011a2:	631a      	str	r2, [r3, #48]	; 0x30
 80011a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011a6:	f002 0201 	and.w	r2, r2, #1
 80011aa:	9205      	str	r2, [sp, #20]
 80011ac:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ae:	9406      	str	r4, [sp, #24]
 80011b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011b2:	f042 0202 	orr.w	r2, r2, #2
 80011b6:	631a      	str	r2, [r3, #48]	; 0x30
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ba:	940b      	str	r4, [sp, #44]	; 0x2c

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011bc:	f003 0302 	and.w	r3, r3, #2
 80011c0:	9306      	str	r3, [sp, #24]
 80011c2:	9b06      	ldr	r3, [sp, #24]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80011c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011c8:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011ca:	a909      	add	r1, sp, #36	; 0x24
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80011cc:	4b5e      	ldr	r3, [pc, #376]	; (8001348 <main+0x1e8>)
 80011ce:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : LD2_Pin PA6 PA7 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6|GPIO_PIN_7;
 80011d0:	25e0      	movs	r5, #224	; 0xe0

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011d2:	f001 f8e3 	bl	800239c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA6 PA7 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d6:	2301      	movs	r3, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d8:	a909      	add	r1, sp, #36	; 0x24
 80011da:	485c      	ldr	r0, [pc, #368]	; (800134c <main+0x1ec>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : LD2_Pin PA6 PA7 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011dc:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : LD2_Pin PA6 PA7 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_6|GPIO_PIN_7;
 80011de:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e0:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e2:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e4:	f001 f8da 	bl	800239c <HAL_GPIO_Init>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80011e8:	4622      	mov	r2, r4
 80011ea:	4629      	mov	r1, r5
 80011ec:	4857      	ldr	r0, [pc, #348]	; (800134c <main+0x1ec>)
{

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim2.Instance = TIM2;
 80011ee:	4d58      	ldr	r5, [pc, #352]	; (8001350 <main+0x1f0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80011f0:	f001 f9ae 	bl	8002550 <HAL_GPIO_WritePin>

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 9000;
 80011f4:	f242 3728 	movw	r7, #9000	; 0x2328
 80011f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011fc:	e885 0088 	stmia.w	r5, {r3, r7}
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 10000;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  HAL_TIM_Base_Init(&htim2);
 8001200:	4628      	mov	r0, r5
  TIM_MasterConfigTypeDef sMasterConfig;

  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 9000;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 10000;
 8001202:	f242 7310 	movw	r3, #10000	; 0x2710
 8001206:	60eb      	str	r3, [r5, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  HAL_TIM_Base_Init(&htim2);

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001208:	f44f 5680 	mov.w	r6, #4096	; 0x1000
  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 9000;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800120c:	60ac      	str	r4, [r5, #8]
  htim2.Init.Period = 10000;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800120e:	612c      	str	r4, [r5, #16]
  HAL_TIM_Base_Init(&htim2);
 8001210:	f000 fd6c 	bl	8001cec <HAL_TIM_Base_Init>

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig);
 8001214:	a909      	add	r1, sp, #36	; 0x24
 8001216:	4628      	mov	r0, r5
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 10000;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  HAL_TIM_Base_Init(&htim2);

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001218:	9609      	str	r6, [sp, #36]	; 0x24
  HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig);
 800121a:	f000 fba2 	bl	8001962 <HAL_TIM_ConfigClockSource>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig);
 800121e:	a907      	add	r1, sp, #28
 8001220:	4628      	mov	r0, r5
  HAL_TIM_Base_Init(&htim2);

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig);

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001222:	9407      	str	r4, [sp, #28]
{

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim3.Instance = TIM3;
 8001224:	4d4b      	ldr	r5, [pc, #300]	; (8001354 <main+0x1f4>)

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig);

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001226:	9408      	str	r4, [sp, #32]
  HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig);
 8001228:	f000 fb6c 	bl	8001904 <HAL_TIMEx_MasterConfigSynchronization>
{

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim3.Instance = TIM3;
 800122c:	4b4a      	ldr	r3, [pc, #296]	; (8001358 <main+0x1f8>)
  htim3.Init.Prescaler = 9000;
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800122e:	60ac      	str	r4, [r5, #8]

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 9000;
 8001230:	e885 0088 	stmia.w	r5, {r3, r7}
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 5000;
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  HAL_TIM_Base_Init(&htim3);
 8001234:	4628      	mov	r0, r5
  TIM_MasterConfigTypeDef sMasterConfig;

  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 9000;
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 5000;
 8001236:	f241 3388 	movw	r3, #5000	; 0x1388
 800123a:	60eb      	str	r3, [r5, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800123c:	612c      	str	r4, [r5, #16]
  HAL_TIM_Base_Init(&htim3);
 800123e:	f000 fd55 	bl	8001cec <HAL_TIM_Base_Init>

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig);
 8001242:	a909      	add	r1, sp, #36	; 0x24
 8001244:	4628      	mov	r0, r5
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 5000;
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  HAL_TIM_Base_Init(&htim3);

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001246:	9609      	str	r6, [sp, #36]	; 0x24
  HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig);
 8001248:	f000 fb8b 	bl	8001962 <HAL_TIM_ConfigClockSource>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig);
 800124c:	a907      	add	r1, sp, #28
 800124e:	4628      	mov	r0, r5
  HAL_TIM_Base_Init(&htim3);

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig);

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001250:	9407      	str	r4, [sp, #28]
{

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim4.Instance = TIM4;
 8001252:	4d42      	ldr	r5, [pc, #264]	; (800135c <main+0x1fc>)

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig);

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001254:	9408      	str	r4, [sp, #32]
  HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig);
 8001256:	f000 fb55 	bl	8001904 <HAL_TIMEx_MasterConfigSynchronization>
{

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim4.Instance = TIM4;
 800125a:	4b41      	ldr	r3, [pc, #260]	; (8001360 <main+0x200>)
  htim4.Init.Prescaler = 9000;
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800125c:	60ac      	str	r4, [r5, #8]

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim4.Instance = TIM4;
  htim4.Init.Prescaler = 9000;
 800125e:	e885 0088 	stmia.w	r5, {r3, r7}
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim4.Init.Period = 3000;
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  HAL_TIM_Base_Init(&htim4);
 8001262:	4628      	mov	r0, r5
  TIM_MasterConfigTypeDef sMasterConfig;

  htim4.Instance = TIM4;
  htim4.Init.Prescaler = 9000;
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim4.Init.Period = 3000;
 8001264:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001268:	60eb      	str	r3, [r5, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800126a:	612c      	str	r4, [r5, #16]
  HAL_TIM_Base_Init(&htim4);
 800126c:	f000 fd3e 	bl	8001cec <HAL_TIM_Base_Init>

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig);
 8001270:	a909      	add	r1, sp, #36	; 0x24
 8001272:	4628      	mov	r0, r5
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim4.Init.Period = 3000;
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  HAL_TIM_Base_Init(&htim4);

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001274:	9609      	str	r6, [sp, #36]	; 0x24
  HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig);
 8001276:	f000 fb74 	bl	8001962 <HAL_TIM_ConfigClockSource>

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig);
 800127a:	a907      	add	r1, sp, #28
 800127c:	4628      	mov	r0, r5
  HAL_TIM_Base_Init(&htim4);

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig);

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800127e:	9407      	str	r4, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001280:	9408      	str	r4, [sp, #32]
  HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig);
 8001282:	f000 fb3f 	bl	8001904 <HAL_TIMEx_MasterConfigSynchronization>

/* USART2 init function */
void MX_USART2_UART_Init(void)
{

  huart2.Instance = USART2;
 8001286:	4837      	ldr	r0, [pc, #220]	; (8001364 <main+0x204>)
  huart2.Init.BaudRate = 115200;
 8001288:	4a37      	ldr	r2, [pc, #220]	; (8001368 <main+0x208>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800128a:	6084      	str	r4, [r0, #8]
/* USART2 init function */
void MX_USART2_UART_Init(void)
{

  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
 800128c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001290:	e880 000c 	stmia.w	r0, {r2, r3}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001294:	230c      	movs	r3, #12
{

  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001296:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001298:	6104      	str	r4, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800129a:	6143      	str	r3, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800129c:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800129e:	61c4      	str	r4, [r0, #28]
  HAL_UART_Init(&huart2);
 80012a0:	f000 f9bc 	bl	800161c <HAL_UART_Init>
  MX_TIM3_Init();
  MX_TIM4_Init();
  MX_USART2_UART_Init();

  /* USER CODE BEGIN 2 */
  while(HAL_TIM_Base_Start_IT(&htim2)!=HAL_OK);
 80012a4:	482a      	ldr	r0, [pc, #168]	; (8001350 <main+0x1f0>)
 80012a6:	f000 fb51 	bl	800194c <HAL_TIM_Base_Start_IT>
 80012aa:	2800      	cmp	r0, #0
 80012ac:	d1fa      	bne.n	80012a4 <main+0x144>
  while(HAL_TIM_Base_Start_IT(&htim3)!=HAL_OK);
 80012ae:	4829      	ldr	r0, [pc, #164]	; (8001354 <main+0x1f4>)
 80012b0:	f000 fb4c 	bl	800194c <HAL_TIM_Base_Start_IT>
 80012b4:	2800      	cmp	r0, #0
 80012b6:	d1fa      	bne.n	80012ae <main+0x14e>
  while(HAL_TIM_Base_Start_IT(&htim4)!=HAL_OK);
 80012b8:	4828      	ldr	r0, [pc, #160]	; (800135c <main+0x1fc>)
 80012ba:	f000 fb47 	bl	800194c <HAL_TIM_Base_Start_IT>
 80012be:	2800      	cmp	r0, #0
 80012c0:	d1fa      	bne.n	80012b8 <main+0x158>

  while(HAL_UART_Receive_IT(&huart2,RX_Data2, 1)!=HAL_OK);
 80012c2:	2201      	movs	r2, #1
 80012c4:	4929      	ldr	r1, [pc, #164]	; (800136c <main+0x20c>)
 80012c6:	4827      	ldr	r0, [pc, #156]	; (8001364 <main+0x204>)
 80012c8:	f000 fa24 	bl	8001714 <HAL_UART_Receive_IT>
 80012cc:	4604      	mov	r4, r0
 80012ce:	2800      	cmp	r0, #0
 80012d0:	d1f7      	bne.n	80012c2 <main+0x162>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_UART_Transmit(&huart2, (uint8_t *)"Start~!!\r\n",10,1000 );
 80012d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012d6:	220a      	movs	r2, #10
 80012d8:	4925      	ldr	r1, [pc, #148]	; (8001370 <main+0x210>)
 80012da:	4822      	ldr	r0, [pc, #136]	; (8001364 <main+0x204>)
 80012dc:	f000 f9cc 	bl	8001678 <HAL_UART_Transmit>
  while (1)
  {
  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */
	  d = sin(n*3.141592/180.0);
 80012e0:	4620      	mov	r0, r4
 80012e2:	f7ff f93f 	bl	8000564 <__aeabi_i2d>
 80012e6:	a314      	add	r3, pc, #80	; (adr r3, 8001338 <main+0x1d8>)
 80012e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ec:	f7ff f9a0 	bl	8000630 <__aeabi_dmul>
 80012f0:	4b20      	ldr	r3, [pc, #128]	; (8001374 <main+0x214>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	f7ff fac6 	bl	8000884 <__aeabi_ddiv>
 80012f8:	ec41 0b10 	vmov	d0, r0, r1
 80012fc:	f004 f92c 	bl	8005558 <sin>
	  sprintf(s,"%04d = %10.5lf\r\n",n,d);
 8001300:	4622      	mov	r2, r4
 8001302:	ed8d 0b00 	vstr	d0, [sp]
 8001306:	491c      	ldr	r1, [pc, #112]	; (8001378 <main+0x218>)
 8001308:	a809      	add	r0, sp, #36	; 0x24
 800130a:	f001 fa61 	bl	80027d0 <sprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t *)s,19,1000 );
	  n++;
 800130e:	3401      	adds	r4, #1
  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */
	  d = sin(n*3.141592/180.0);
	  sprintf(s,"%04d = %10.5lf\r\n",n,d);
	  HAL_UART_Transmit(&huart2, (uint8_t *)s,19,1000 );
 8001310:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001314:	2213      	movs	r2, #19
 8001316:	a909      	add	r1, sp, #36	; 0x24
 8001318:	4812      	ldr	r0, [pc, #72]	; (8001364 <main+0x204>)
 800131a:	f000 f9ad 	bl	8001678 <HAL_UART_Transmit>
	  n++;
 800131e:	b2a4      	uxth	r4, r4
	  if(n>=999) n = 0;
 8001320:	f240 33e6 	movw	r3, #998	; 0x3e6
	  HAL_Delay(100);
 8001324:	2064      	movs	r0, #100	; 0x64
  /* USER CODE BEGIN 3 */
	  d = sin(n*3.141592/180.0);
	  sprintf(s,"%04d = %10.5lf\r\n",n,d);
	  HAL_UART_Transmit(&huart2, (uint8_t *)s,19,1000 );
	  n++;
	  if(n>=999) n = 0;
 8001326:	429c      	cmp	r4, r3
 8001328:	bf88      	it	hi
 800132a:	2400      	movhi	r4, #0
	  HAL_Delay(100);
 800132c:	f001 f9cc 	bl	80026c8 <HAL_Delay>
  }
 8001330:	e7d6      	b.n	80012e0 <main+0x180>
 8001332:	bf00      	nop
 8001334:	f3af 8000 	nop.w
 8001338:	fc8b007a 	.word	0xfc8b007a
 800133c:	400921fa 	.word	0x400921fa
 8001340:	40023800 	.word	0x40023800
 8001344:	40020800 	.word	0x40020800
 8001348:	10120000 	.word	0x10120000
 800134c:	40020000 	.word	0x40020000
 8001350:	2000060c 	.word	0x2000060c
 8001354:	200005d0 	.word	0x200005d0
 8001358:	40000400 	.word	0x40000400
 800135c:	20000594 	.word	0x20000594
 8001360:	40000800 	.word	0x40000800
 8001364:	20000648 	.word	0x20000648
 8001368:	40004400 	.word	0x40004400
 800136c:	20000688 	.word	0x20000688
 8001370:	08006630 	.word	0x08006630
 8001374:	40668000 	.word	0x40668000
 8001378:	0800663b 	.word	0x0800663b

0800137c <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800137c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8001380:	6807      	ldr	r7, [r0, #0]
 8001382:	693b      	ldr	r3, [r7, #16]
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001384:	4604      	mov	r4, r0

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8001386:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 800138a:	68c3      	ldr	r3, [r0, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800138c:	68a1      	ldr	r1, [r4, #8]
 800138e:	69c0      	ldr	r0, [r0, #28]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8001390:	4313      	orrs	r3, r2
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001392:	6922      	ldr	r2, [r4, #16]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
  
  /* Write to USART CR2 */
  huart->Instance->CR2 = (uint32_t)tmpreg;
 8001394:	613b      	str	r3, [r7, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8001396:	68fb      	ldr	r3, [r7, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001398:	4311      	orrs	r1, r2
 800139a:	6962      	ldr	r2, [r4, #20]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 800139c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80013a0:	430a      	orrs	r2, r1
 80013a2:	4302      	orrs	r2, r0

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 80013a4:	f023 030c 	bic.w	r3, r3, #12
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80013a8:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  huart->Instance->CR1 = (uint32_t)tmpreg;
 80013aa:	60fb      	str	r3, [r7, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 80013ac:	697b      	ldr	r3, [r7, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 80013ae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 80013b2:	69a3      	ldr	r3, [r4, #24]
  
  /* Write to USART CR3 */
  huart->Instance->CR3 = (uint32_t)tmpreg;
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80013b4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 80013b8:	ea43 0302 	orr.w	r3, r3, r2
  
  /* Write to USART CR3 */
  huart->Instance->CR3 = (uint32_t)tmpreg;
 80013bc:	617b      	str	r3, [r7, #20]
 80013be:	4b7c      	ldr	r3, [pc, #496]	; (80015b0 <UART_SetConfig+0x234>)
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80013c0:	d17c      	bne.n	80014bc <UART_SetConfig+0x140>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80013c2:	429f      	cmp	r7, r3
 80013c4:	d003      	beq.n	80013ce <UART_SetConfig+0x52>
 80013c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80013ca:	429f      	cmp	r7, r3
 80013cc:	d131      	bne.n	8001432 <UART_SetConfig+0xb6>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80013ce:	f000 ff83 	bl	80022d8 <HAL_RCC_GetPCLK2Freq>
 80013d2:	6863      	ldr	r3, [r4, #4]
 80013d4:	2519      	movs	r5, #25
 80013d6:	ea4f 0843 	mov.w	r8, r3, lsl #1
 80013da:	4368      	muls	r0, r5
 80013dc:	fbb0 f8f8 	udiv	r8, r0, r8
 80013e0:	f000 ff7a 	bl	80022d8 <HAL_RCC_GetPCLK2Freq>
 80013e4:	6866      	ldr	r6, [r4, #4]
 80013e6:	4368      	muls	r0, r5
 80013e8:	0076      	lsls	r6, r6, #1
 80013ea:	fbb0 f6f6 	udiv	r6, r0, r6
 80013ee:	f000 ff73 	bl	80022d8 <HAL_RCC_GetPCLK2Freq>
 80013f2:	6863      	ldr	r3, [r4, #4]
 80013f4:	f04f 0964 	mov.w	r9, #100	; 0x64
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	4368      	muls	r0, r5
 80013fc:	fbb0 f0f3 	udiv	r0, r0, r3
 8001400:	fbb0 f0f9 	udiv	r0, r0, r9
 8001404:	fb09 6610 	mls	r6, r9, r0, r6
 8001408:	f000 ff66 	bl	80022d8 <HAL_RCC_GetPCLK2Freq>
 800140c:	fbb8 f8f9 	udiv	r8, r8, r9
 8001410:	6861      	ldr	r1, [r4, #4]
 8001412:	00f6      	lsls	r6, r6, #3
 8001414:	3632      	adds	r6, #50	; 0x32
 8001416:	fbb6 f6f9 	udiv	r6, r6, r9
 800141a:	0076      	lsls	r6, r6, #1
 800141c:	4368      	muls	r0, r5
 800141e:	0049      	lsls	r1, r1, #1
 8001420:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8001424:	f406 76f8 	and.w	r6, r6, #496	; 0x1f0
 8001428:	fbb0 faf1 	udiv	sl, r0, r1
 800142c:	f000 ff54 	bl	80022d8 <HAL_RCC_GetPCLK2Freq>
 8001430:	e030      	b.n	8001494 <UART_SetConfig+0x118>
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001432:	f000 ff3b 	bl	80022ac <HAL_RCC_GetPCLK1Freq>
 8001436:	6863      	ldr	r3, [r4, #4]
 8001438:	2519      	movs	r5, #25
 800143a:	ea4f 0843 	mov.w	r8, r3, lsl #1
 800143e:	4368      	muls	r0, r5
 8001440:	fbb0 f8f8 	udiv	r8, r0, r8
 8001444:	f000 ff32 	bl	80022ac <HAL_RCC_GetPCLK1Freq>
 8001448:	6866      	ldr	r6, [r4, #4]
 800144a:	4368      	muls	r0, r5
 800144c:	0076      	lsls	r6, r6, #1
 800144e:	fbb0 f6f6 	udiv	r6, r0, r6
 8001452:	f000 ff2b 	bl	80022ac <HAL_RCC_GetPCLK1Freq>
 8001456:	6863      	ldr	r3, [r4, #4]
 8001458:	f04f 0964 	mov.w	r9, #100	; 0x64
 800145c:	005b      	lsls	r3, r3, #1
 800145e:	4368      	muls	r0, r5
 8001460:	fbb0 f0f3 	udiv	r0, r0, r3
 8001464:	fbb0 f0f9 	udiv	r0, r0, r9
 8001468:	fb09 6610 	mls	r6, r9, r0, r6
 800146c:	f000 ff1e 	bl	80022ac <HAL_RCC_GetPCLK1Freq>
 8001470:	fbb8 f8f9 	udiv	r8, r8, r9
 8001474:	00f6      	lsls	r6, r6, #3
 8001476:	6861      	ldr	r1, [r4, #4]
 8001478:	3632      	adds	r6, #50	; 0x32
 800147a:	fbb6 f6f9 	udiv	r6, r6, r9
 800147e:	0076      	lsls	r6, r6, #1
 8001480:	4368      	muls	r0, r5
 8001482:	0049      	lsls	r1, r1, #1
 8001484:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8001488:	f406 76f8 	and.w	r6, r6, #496	; 0x1f0
 800148c:	fbb0 faf1 	udiv	sl, r0, r1
 8001490:	f000 ff0c 	bl	80022ac <HAL_RCC_GetPCLK1Freq>
 8001494:	4345      	muls	r5, r0
 8001496:	6860      	ldr	r0, [r4, #4]
 8001498:	0040      	lsls	r0, r0, #1
 800149a:	fbb5 f0f0 	udiv	r0, r5, r0
 800149e:	fbb0 f0f9 	udiv	r0, r0, r9
 80014a2:	fb09 a210 	mls	r2, r9, r0, sl
 80014a6:	00d2      	lsls	r2, r2, #3
 80014a8:	3232      	adds	r2, #50	; 0x32
 80014aa:	fbb2 f3f9 	udiv	r3, r2, r9
 80014ae:	f003 0307 	and.w	r3, r3, #7
 80014b2:	4443      	add	r3, r8
 80014b4:	441e      	add	r6, r3
 80014b6:	60be      	str	r6, [r7, #8]
 80014b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    }
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80014bc:	429f      	cmp	r7, r3
 80014be:	d002      	beq.n	80014c6 <UART_SetConfig+0x14a>
 80014c0:	4b3c      	ldr	r3, [pc, #240]	; (80015b4 <UART_SetConfig+0x238>)
 80014c2:	429f      	cmp	r7, r3
 80014c4:	d130      	bne.n	8001528 <UART_SetConfig+0x1ac>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80014c6:	f000 ff07 	bl	80022d8 <HAL_RCC_GetPCLK2Freq>
 80014ca:	6863      	ldr	r3, [r4, #4]
 80014cc:	2519      	movs	r5, #25
 80014ce:	ea4f 0883 	mov.w	r8, r3, lsl #2
 80014d2:	4368      	muls	r0, r5
 80014d4:	fbb0 f8f8 	udiv	r8, r0, r8
 80014d8:	f000 fefe 	bl	80022d8 <HAL_RCC_GetPCLK2Freq>
 80014dc:	6866      	ldr	r6, [r4, #4]
 80014de:	4368      	muls	r0, r5
 80014e0:	00b6      	lsls	r6, r6, #2
 80014e2:	fbb0 f6f6 	udiv	r6, r0, r6
 80014e6:	f000 fef7 	bl	80022d8 <HAL_RCC_GetPCLK2Freq>
 80014ea:	6863      	ldr	r3, [r4, #4]
 80014ec:	f04f 0964 	mov.w	r9, #100	; 0x64
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	4368      	muls	r0, r5
 80014f4:	fbb0 f0f3 	udiv	r0, r0, r3
 80014f8:	fbb0 f0f9 	udiv	r0, r0, r9
 80014fc:	fb09 6610 	mls	r6, r9, r0, r6
 8001500:	f000 feea 	bl	80022d8 <HAL_RCC_GetPCLK2Freq>
 8001504:	fbb8 f8f9 	udiv	r8, r8, r9
 8001508:	6861      	ldr	r1, [r4, #4]
 800150a:	0136      	lsls	r6, r6, #4
 800150c:	4368      	muls	r0, r5
 800150e:	0089      	lsls	r1, r1, #2
 8001510:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8001514:	3632      	adds	r6, #50	; 0x32
 8001516:	fbb0 faf1 	udiv	sl, r0, r1
 800151a:	fbb6 f6f9 	udiv	r6, r6, r9
 800151e:	f006 06f0 	and.w	r6, r6, #240	; 0xf0
 8001522:	f000 fed9 	bl	80022d8 <HAL_RCC_GetPCLK2Freq>
 8001526:	e02f      	b.n	8001588 <UART_SetConfig+0x20c>
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001528:	f000 fec0 	bl	80022ac <HAL_RCC_GetPCLK1Freq>
 800152c:	6863      	ldr	r3, [r4, #4]
 800152e:	2519      	movs	r5, #25
 8001530:	ea4f 0883 	mov.w	r8, r3, lsl #2
 8001534:	4368      	muls	r0, r5
 8001536:	fbb0 f8f8 	udiv	r8, r0, r8
 800153a:	f000 feb7 	bl	80022ac <HAL_RCC_GetPCLK1Freq>
 800153e:	6866      	ldr	r6, [r4, #4]
 8001540:	4368      	muls	r0, r5
 8001542:	00b6      	lsls	r6, r6, #2
 8001544:	fbb0 f6f6 	udiv	r6, r0, r6
 8001548:	f000 feb0 	bl	80022ac <HAL_RCC_GetPCLK1Freq>
 800154c:	6863      	ldr	r3, [r4, #4]
 800154e:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	4368      	muls	r0, r5
 8001556:	fbb0 f0f3 	udiv	r0, r0, r3
 800155a:	fbb0 f0f9 	udiv	r0, r0, r9
 800155e:	fb09 6610 	mls	r6, r9, r0, r6
 8001562:	f000 fea3 	bl	80022ac <HAL_RCC_GetPCLK1Freq>
 8001566:	fbb8 f8f9 	udiv	r8, r8, r9
 800156a:	6861      	ldr	r1, [r4, #4]
 800156c:	0136      	lsls	r6, r6, #4
 800156e:	3632      	adds	r6, #50	; 0x32
 8001570:	4368      	muls	r0, r5
 8001572:	fbb6 f6f9 	udiv	r6, r6, r9
 8001576:	0089      	lsls	r1, r1, #2
 8001578:	ea4f 1808 	mov.w	r8, r8, lsl #4
 800157c:	f006 06f0 	and.w	r6, r6, #240	; 0xf0
 8001580:	fbb0 faf1 	udiv	sl, r0, r1
 8001584:	f000 fe92 	bl	80022ac <HAL_RCC_GetPCLK1Freq>
 8001588:	4345      	muls	r5, r0
 800158a:	6860      	ldr	r0, [r4, #4]
 800158c:	0080      	lsls	r0, r0, #2
 800158e:	fbb5 f0f0 	udiv	r0, r5, r0
 8001592:	fbb0 f0f9 	udiv	r0, r0, r9
 8001596:	fb09 a210 	mls	r2, r9, r0, sl
 800159a:	0112      	lsls	r2, r2, #4
 800159c:	3232      	adds	r2, #50	; 0x32
 800159e:	fbb2 f3f9 	udiv	r3, r2, r9
 80015a2:	f003 030f 	and.w	r3, r3, #15
 80015a6:	4433      	add	r3, r6
 80015a8:	4443      	add	r3, r8
 80015aa:	60bb      	str	r3, [r7, #8]
 80015ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80015b0:	40011000 	.word	0x40011000
 80015b4:	40011400 	.word	0x40011400

080015b8 <UART_WaitOnFlagUntilTimeout.constprop.1>:
  * @param  Flag: specifies the UART flag to check.
  * @param  Status: The new Flag status (SET or RESET).
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Timeout)
 80015b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015ba:	4604      	mov	r4, r0
 80015bc:	460e      	mov	r6, r1
 80015be:	4615      	mov	r5, r2
{
  uint32_t tickstart = 0U;

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80015c0:	f001 f87c 	bl	80026bc <HAL_GetTick>
 80015c4:	4607      	mov	r7, r0

  /* Wait until flag is set */
  if(Status == RESET)
  {
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
 80015c6:	6822      	ldr	r2, [r4, #0]
 80015c8:	6813      	ldr	r3, [r2, #0]
 80015ca:	ea36 0303 	bics.w	r3, r6, r3
 80015ce:	d023      	beq.n	8001618 <UART_WaitOnFlagUntilTimeout.constprop.1+0x60>
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80015d0:	1c6b      	adds	r3, r5, #1
 80015d2:	d0f9      	beq.n	80015c8 <UART_WaitOnFlagUntilTimeout.constprop.1+0x10>
      {
        if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80015d4:	b9d5      	cbnz	r5, 800160c <UART_WaitOnFlagUntilTimeout.constprop.1+0x54>
        {
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80015d6:	6823      	ldr	r3, [r4, #0]
 80015d8:	68da      	ldr	r2, [r3, #12]
 80015da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80015de:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80015e0:	68da      	ldr	r2, [r3, #12]
 80015e2:	f022 0220 	bic.w	r2, r2, #32
 80015e6:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80015e8:	68da      	ldr	r2, [r3, #12]
 80015ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80015ee:	60da      	str	r2, [r3, #12]
          __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80015f0:	695a      	ldr	r2, [r3, #20]
 80015f2:	f022 0201 	bic.w	r2, r2, #1
 80015f6:	615a      	str	r2, [r3, #20]

          huart->gState= HAL_UART_STATE_READY;
 80015f8:	2320      	movs	r3, #32
 80015fa:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
	  	  huart->RxState= HAL_UART_STATE_READY;
 80015fe:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001602:	2300      	movs	r3, #0
 8001604:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38

          return HAL_TIMEOUT;
 8001608:	2003      	movs	r0, #3
 800160a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    while(__HAL_UART_GET_FLAG(huart, Flag) == RESET)
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
      {
        if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800160c:	f001 f856 	bl	80026bc <HAL_GetTick>
 8001610:	1bc0      	subs	r0, r0, r7
 8001612:	4285      	cmp	r5, r0
 8001614:	d2d7      	bcs.n	80015c6 <UART_WaitOnFlagUntilTimeout.constprop.1+0xe>
 8001616:	e7de      	b.n	80015d6 <UART_WaitOnFlagUntilTimeout.constprop.1+0x1e>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8001618:	2000      	movs	r0, #0
}
 800161a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800161c <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800161c:	b510      	push	{r4, lr}
  /* Check the UART handle allocation */
  if(huart == NULL)
 800161e:	4604      	mov	r4, r0
 8001620:	b340      	cbz	r0, 8001674 <HAL_UART_Init+0x58>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8001622:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001626:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800162a:	b91b      	cbnz	r3, 8001634 <HAL_UART_Init+0x18>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800162c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8001630:	f7ff fcfa 	bl	8001028 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001634:	6822      	ldr	r2, [r4, #0]
    huart->Lock = HAL_UNLOCKED;
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001636:	2324      	movs	r3, #36	; 0x24
 8001638:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800163c:	68d3      	ldr	r3, [r2, #12]
 800163e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001642:	60d3      	str	r3, [r2, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001644:	4620      	mov	r0, r4
 8001646:	f7ff fe99 	bl	800137c <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  huart->Instance->CR2 &= ~(USART_CR2_LINEN | USART_CR2_CLKEN);
 800164a:	6823      	ldr	r3, [r4, #0]
 800164c:	691a      	ldr	r2, [r3, #16]
 800164e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001652:	611a      	str	r2, [r3, #16]
  huart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 8001654:	695a      	ldr	r2, [r3, #20]
 8001656:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800165a:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800165c:	68da      	ldr	r2, [r3, #12]
 800165e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001662:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001664:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8001666:	2320      	movs	r3, #32
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001668:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 800166a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 800166e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  
  return HAL_OK;
 8001672:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if(huart == NULL)
  {
    return HAL_ERROR;
 8001674:	2001      	movs	r0, #1
  huart->ErrorCode = HAL_UART_ERROR_NONE;
  huart->gState= HAL_UART_STATE_READY;
  huart->RxState= HAL_UART_STATE_READY;
  
  return HAL_OK;
}
 8001676:	bd10      	pop	{r4, pc}

08001678 <HAL_UART_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001678:	b570      	push	{r4, r5, r6, lr}
 800167a:	461e      	mov	r6, r3
  uint16_t* tmp;
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY) 
 800167c:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001680:	2b20      	cmp	r3, #32
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001682:	4604      	mov	r4, r0
 8001684:	460d      	mov	r5, r1
  uint16_t* tmp;
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY) 
 8001686:	d143      	bne.n	8001710 <HAL_UART_Transmit+0x98>
  {
    if((pData == NULL ) || (Size == 0U)) 
 8001688:	2900      	cmp	r1, #0
 800168a:	d03f      	beq.n	800170c <HAL_UART_Transmit+0x94>
 800168c:	2a00      	cmp	r2, #0
 800168e:	d03d      	beq.n	800170c <HAL_UART_Transmit+0x94>
    {
      return  HAL_ERROR;
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 8001690:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001694:	2b01      	cmp	r3, #1
 8001696:	d03b      	beq.n	8001710 <HAL_UART_Transmit+0x98>
 8001698:	2301      	movs	r3, #1
 800169a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800169e:	2300      	movs	r3, #0
 80016a0:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80016a2:	2321      	movs	r3, #33	; 0x21
 80016a4:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

    huart->TxXferSize = Size;
 80016a8:	8482      	strh	r2, [r0, #36]	; 0x24
    huart->TxXferCount = Size;
 80016aa:	84c2      	strh	r2, [r0, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 80016ac:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80016ae:	b302      	cbz	r2, 80016f2 <HAL_UART_Transmit+0x7a>
    {
      huart->TxXferCount--;
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80016b0:	68a3      	ldr	r3, [r4, #8]

    huart->TxXferSize = Size;
    huart->TxXferCount = Size;
    while(huart->TxXferCount > 0U)
    {
      huart->TxXferCount--;
 80016b2:	3a01      	subs	r2, #1
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80016b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000

    huart->TxXferSize = Size;
    huart->TxXferCount = Size;
    while(huart->TxXferCount > 0U)
    {
      huart->TxXferCount--;
 80016b8:	84e2      	strh	r2, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 80016ba:	f04f 0180 	mov.w	r1, #128	; 0x80
 80016be:	4632      	mov	r2, r6
 80016c0:	4620      	mov	r0, r4
    huart->TxXferSize = Size;
    huart->TxXferCount = Size;
    while(huart->TxXferCount > 0U)
    {
      huart->TxXferCount--;
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80016c2:	d10d      	bne.n	80016e0 <HAL_UART_Transmit+0x68>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 80016c4:	f7ff ff78 	bl	80015b8 <UART_WaitOnFlagUntilTimeout.constprop.1>
 80016c8:	b108      	cbz	r0, 80016ce <HAL_UART_Transmit+0x56>
        { 
          return HAL_TIMEOUT;
 80016ca:	2003      	movs	r0, #3
 80016cc:	bd70      	pop	{r4, r5, r6, pc}
        }
        tmp = (uint16_t*) pData;
        huart->Instance->DR = (*tmp & (uint16_t)0x01FFU);
 80016ce:	882b      	ldrh	r3, [r5, #0]
 80016d0:	6822      	ldr	r2, [r4, #0]
 80016d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80016d6:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 80016d8:	6923      	ldr	r3, [r4, #16]
 80016da:	b943      	cbnz	r3, 80016ee <HAL_UART_Transmit+0x76>
        {
          pData +=2U;
 80016dc:	3502      	adds	r5, #2
 80016de:	e7e5      	b.n	80016ac <HAL_UART_Transmit+0x34>
          pData +=1U;
        }
      } 
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, Timeout) != HAL_OK)
 80016e0:	f7ff ff6a 	bl	80015b8 <UART_WaitOnFlagUntilTimeout.constprop.1>
 80016e4:	2800      	cmp	r0, #0
 80016e6:	d1f0      	bne.n	80016ca <HAL_UART_Transmit+0x52>
        {
          return HAL_TIMEOUT;
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFFU);
 80016e8:	6823      	ldr	r3, [r4, #0]
 80016ea:	782a      	ldrb	r2, [r5, #0]
 80016ec:	605a      	str	r2, [r3, #4]
 80016ee:	3501      	adds	r5, #1
 80016f0:	e7dc      	b.n	80016ac <HAL_UART_Transmit+0x34>
      } 
    }
    
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, Timeout) != HAL_OK)
 80016f2:	4632      	mov	r2, r6
 80016f4:	2140      	movs	r1, #64	; 0x40
 80016f6:	4620      	mov	r0, r4
 80016f8:	f7ff ff5e 	bl	80015b8 <UART_WaitOnFlagUntilTimeout.constprop.1>
 80016fc:	2800      	cmp	r0, #0
 80016fe:	d1e4      	bne.n	80016ca <HAL_UART_Transmit+0x52>
    { 
      return HAL_TIMEOUT;
    }
    
    /* At end of Tx process, restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 8001700:	2320      	movs	r3, #32
 8001702:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001706:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    
    return HAL_OK;
 800170a:	bd70      	pop	{r4, r5, r6, pc}
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY) 
  {
    if((pData == NULL ) || (Size == 0U)) 
    {
      return  HAL_ERROR;
 800170c:	2001      	movs	r0, #1
 800170e:	bd70      	pop	{r4, r5, r6, pc}
    
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8001710:	2002      	movs	r0, #2
  }
}
 8001712:	bd70      	pop	{r4, r5, r6, pc}

08001714 <HAL_UART_Receive_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
  /* Check that a Rx process is not already ongoing */ 
  if(huart->RxState == HAL_UART_STATE_READY)
 8001714:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8001718:	2b20      	cmp	r3, #32
 800171a:	d120      	bne.n	800175e <HAL_UART_Receive_IT+0x4a>
  {
    if((pData == NULL ) || (Size == 0U)) 
 800171c:	b1e9      	cbz	r1, 800175a <HAL_UART_Receive_IT+0x46>
 800171e:	b1e2      	cbz	r2, 800175a <HAL_UART_Receive_IT+0x46>
    {
      return HAL_ERROR;
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 8001720:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001724:	2b01      	cmp	r3, #1
 8001726:	d01a      	beq.n	800175e <HAL_UART_Receive_IT+0x4a>
    
    huart->pRxBuffPtr = pData;
    huart->RxXferSize = Size;
 8001728:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->RxXferCount = Size;
 800172a:	85c2      	strh	r2, [r0, #46]	; 0x2e
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800172c:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800172e:	2222      	movs	r2, #34	; 0x22
    
    huart->pRxBuffPtr = pData;
    huart->RxXferSize = Size;
    huart->RxXferCount = Size;
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001730:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001732:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
        
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001736:	6802      	ldr	r2, [r0, #0]
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
    
    huart->pRxBuffPtr = pData;
 8001738:	6281      	str	r1, [r0, #40]	; 0x28
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->RxState = HAL_UART_STATE_BUSY_RX;
        
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800173a:	68d1      	ldr	r1, [r2, #12]
 800173c:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8001740:	60d1      	str	r1, [r2, #12]
    
    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001742:	6951      	ldr	r1, [r2, #20]
 8001744:	f041 0101 	orr.w	r1, r1, #1
 8001748:	6151      	str	r1, [r2, #20]
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
    
    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800174a:	68d1      	ldr	r1, [r2, #12]
    
    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800174c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    
    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001750:	f041 0120 	orr.w	r1, r1, #32
 8001754:	60d1      	str	r1, [r2, #12]
    
    return HAL_OK;
 8001756:	4618      	mov	r0, r3
 8001758:	4770      	bx	lr
  /* Check that a Rx process is not already ongoing */ 
  if(huart->RxState == HAL_UART_STATE_READY)
  {
    if((pData == NULL ) || (Size == 0U)) 
    {
      return HAL_ERROR;
 800175a:	2001      	movs	r0, #1
 800175c:	4770      	bx	lr
    
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY; 
 800175e:	2002      	movs	r0, #2
  }
}
 8001760:	4770      	bx	lr

08001762 <HAL_UART_TxCpltCallback>:
 8001762:	4770      	bx	lr

08001764 <HAL_UART_RxCpltCallback>:
 8001764:	4770      	bx	lr

08001766 <HAL_UART_ErrorCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001766:	4770      	bx	lr

08001768 <HAL_UART_IRQHandler>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001768:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint32_t tmp1 = 0U, tmp2 = 0U;

  tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_PE);
 800176a:	6803      	ldr	r3, [r0, #0]
 800176c:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE);  
 800176e:	68da      	ldr	r2, [r3, #12]
  /* UART parity error interrupt occurred ------------------------------------*/
  if((tmp1 != RESET) && (tmp2 != RESET))
 8001770:	07c9      	lsls	r1, r1, #31
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001772:	4604      	mov	r4, r0
  uint32_t tmp1 = 0U, tmp2 = 0U;

  tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_PE);
  tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE);  
  /* UART parity error interrupt occurred ------------------------------------*/
  if((tmp1 != RESET) && (tmp2 != RESET))
 8001774:	d50c      	bpl.n	8001790 <HAL_UART_IRQHandler+0x28>
 8001776:	05d0      	lsls	r0, r2, #23
 8001778:	d50a      	bpl.n	8001790 <HAL_UART_IRQHandler+0x28>
  { 
    __HAL_UART_CLEAR_PEFLAG(huart);
 800177a:	2200      	movs	r2, #0
 800177c:	9200      	str	r2, [sp, #0]
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	9200      	str	r2, [sp, #0]
 8001782:	685a      	ldr	r2, [r3, #4]
 8001784:	9200      	str	r2, [sp, #0]
 8001786:	9a00      	ldr	r2, [sp, #0]
    
    huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001788:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800178a:	f042 0201 	orr.w	r2, r2, #1
 800178e:	63e2      	str	r2, [r4, #60]	; 0x3c
  }
  
  tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_FE);
 8001790:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR);
 8001792:	695a      	ldr	r2, [r3, #20]
  /* UART frame error interrupt occurred -------------------------------------*/
  if((tmp1 != RESET) && (tmp2 != RESET))
 8001794:	0789      	lsls	r1, r1, #30
 8001796:	d50c      	bpl.n	80017b2 <HAL_UART_IRQHandler+0x4a>
 8001798:	07d0      	lsls	r0, r2, #31
 800179a:	d50a      	bpl.n	80017b2 <HAL_UART_IRQHandler+0x4a>
  { 
    __HAL_UART_CLEAR_FEFLAG(huart);
 800179c:	2200      	movs	r2, #0
 800179e:	9201      	str	r2, [sp, #4]
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	9201      	str	r2, [sp, #4]
 80017a4:	685a      	ldr	r2, [r3, #4]
 80017a6:	9201      	str	r2, [sp, #4]
 80017a8:	9a01      	ldr	r2, [sp, #4]
    
    huart->ErrorCode |= HAL_UART_ERROR_FE;
 80017aa:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80017ac:	f042 0204 	orr.w	r2, r2, #4
 80017b0:	63e2      	str	r2, [r4, #60]	; 0x3c
  }
  
  tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_NE);
 80017b2:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR);
 80017b4:	695a      	ldr	r2, [r3, #20]
  /* UART noise error interrupt occurred -------------------------------------*/
  if((tmp1 != RESET) && (tmp2 != RESET))
 80017b6:	0749      	lsls	r1, r1, #29
 80017b8:	d50c      	bpl.n	80017d4 <HAL_UART_IRQHandler+0x6c>
 80017ba:	07d0      	lsls	r0, r2, #31
 80017bc:	d50a      	bpl.n	80017d4 <HAL_UART_IRQHandler+0x6c>
  { 
    __HAL_UART_CLEAR_NEFLAG(huart);
 80017be:	2200      	movs	r2, #0
 80017c0:	9202      	str	r2, [sp, #8]
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	9202      	str	r2, [sp, #8]
 80017c6:	685a      	ldr	r2, [r3, #4]
 80017c8:	9202      	str	r2, [sp, #8]
 80017ca:	9a02      	ldr	r2, [sp, #8]
    
    huart->ErrorCode |= HAL_UART_ERROR_NE;
 80017cc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80017ce:	f042 0202 	orr.w	r2, r2, #2
 80017d2:	63e2      	str	r2, [r4, #60]	; 0x3c
  }
  
  tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_ORE);
 80017d4:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR);
 80017d6:	695a      	ldr	r2, [r3, #20]
  /* UART Over-Run interrupt occurred ----------------------------------------*/
  if((tmp1 != RESET) && (tmp2 != RESET))
 80017d8:	0709      	lsls	r1, r1, #28
 80017da:	d50c      	bpl.n	80017f6 <HAL_UART_IRQHandler+0x8e>
 80017dc:	07d0      	lsls	r0, r2, #31
 80017de:	d50a      	bpl.n	80017f6 <HAL_UART_IRQHandler+0x8e>
  { 
    __HAL_UART_CLEAR_OREFLAG(huart);
 80017e0:	2200      	movs	r2, #0
 80017e2:	9203      	str	r2, [sp, #12]
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	9203      	str	r2, [sp, #12]
 80017e8:	685a      	ldr	r2, [r3, #4]
 80017ea:	9203      	str	r2, [sp, #12]
 80017ec:	9a03      	ldr	r2, [sp, #12]
    
    huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80017ee:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80017f0:	f042 0208 	orr.w	r2, r2, #8
 80017f4:	63e2      	str	r2, [r4, #60]	; 0x3c
  }
  
  tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE);
 80017f6:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_RXNE);
 80017f8:	68da      	ldr	r2, [r3, #12]
  /* UART in mode Receiver ---------------------------------------------------*/
  if((tmp1 != RESET) && (tmp2 != RESET))
 80017fa:	0689      	lsls	r1, r1, #26
 80017fc:	d53a      	bpl.n	8001874 <HAL_UART_IRQHandler+0x10c>
 80017fe:	0690      	lsls	r0, r2, #26
 8001800:	d538      	bpl.n	8001874 <HAL_UART_IRQHandler+0x10c>
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8001802:	f894 203a 	ldrb.w	r2, [r4, #58]	; 0x3a
 8001806:	2a22      	cmp	r2, #34	; 0x22
 8001808:	d134      	bne.n	8001874 <HAL_UART_IRQHandler+0x10c>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800180a:	68a2      	ldr	r2, [r4, #8]
 800180c:	6921      	ldr	r1, [r4, #16]
 800180e:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001812:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001814:	d10b      	bne.n	800182e <HAL_UART_IRQHandler+0xc6>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
      if(huart->Init.Parity == UART_PARITY_NONE)
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FFU);
 8001816:	685b      	ldr	r3, [r3, #4]
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001818:	b921      	cbnz	r1, 8001824 <HAL_UART_IRQHandler+0xbc>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FFU);
 800181a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800181e:	f822 3b02 	strh.w	r3, [r2], #2
 8001822:	e002      	b.n	800182a <HAL_UART_IRQHandler+0xc2>
        huart->pRxBuffPtr += 2U;
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FFU);
 8001824:	b2db      	uxtb	r3, r3
 8001826:	f822 3b01 	strh.w	r3, [r2], #1
        huart->pRxBuffPtr += 1U;
 800182a:	62a2      	str	r2, [r4, #40]	; 0x28
 800182c:	e00a      	b.n	8001844 <HAL_UART_IRQHandler+0xdc>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 800182e:	b919      	cbnz	r1, 8001838 <HAL_UART_IRQHandler+0xd0>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FFU);
 8001830:	1c51      	adds	r1, r2, #1
 8001832:	62a1      	str	r1, [r4, #40]	; 0x28
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	e004      	b.n	8001842 <HAL_UART_IRQHandler+0xda>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007FU);
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	1c51      	adds	r1, r2, #1
 800183c:	62a1      	str	r1, [r4, #40]	; 0x28
 800183e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001842:	7013      	strb	r3, [r2, #0]
      }
    }

    if(--huart->RxXferCount == 0U)
 8001844:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8001846:	3b01      	subs	r3, #1
 8001848:	b29b      	uxth	r3, r3
 800184a:	85e3      	strh	r3, [r4, #46]	; 0x2e
 800184c:	b993      	cbnz	r3, 8001874 <HAL_UART_IRQHandler+0x10c>
    {
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800184e:	6823      	ldr	r3, [r4, #0]
 8001850:	68da      	ldr	r2, [r3, #12]
 8001852:	f022 0220 	bic.w	r2, r2, #32
 8001856:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001858:	68da      	ldr	r2, [r3, #12]
 800185a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800185e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001860:	695a      	ldr	r2, [r3, #20]
 8001862:	f022 0201 	bic.w	r2, r2, #1
 8001866:	615a      	str	r2, [r3, #20]

	  /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8001868:	2320      	movs	r3, #32
 800186a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
     
      HAL_UART_RxCpltCallback(huart);
 800186e:	4620      	mov	r0, r4
 8001870:	f7ff ff78 	bl	8001764 <HAL_UART_RxCpltCallback>
  if((tmp1 != RESET) && (tmp2 != RESET))
  { 
    UART_Receive_IT(huart);
  }
  
  tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_TXE);
 8001874:	6823      	ldr	r3, [r4, #0]
 8001876:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_TXE);
 8001878:	68da      	ldr	r2, [r3, #12]
  /* UART in mode Transmitter ------------------------------------------------*/
  if((tmp1 != RESET) && (tmp2 != RESET))
 800187a:	0609      	lsls	r1, r1, #24
 800187c:	d526      	bpl.n	80018cc <HAL_UART_IRQHandler+0x164>
 800187e:	0610      	lsls	r0, r2, #24
 8001880:	d524      	bpl.n	80018cc <HAL_UART_IRQHandler+0x164>
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8001882:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8001886:	2a21      	cmp	r2, #33	; 0x21
 8001888:	d120      	bne.n	80018cc <HAL_UART_IRQHandler+0x164>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800188a:	68a2      	ldr	r2, [r4, #8]
 800188c:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001890:	6a22      	ldr	r2, [r4, #32]
 8001892:	d10a      	bne.n	80018aa <HAL_UART_IRQHandler+0x142>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FFU);
 8001894:	8811      	ldrh	r1, [r2, #0]
 8001896:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800189a:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 800189c:	6921      	ldr	r1, [r4, #16]
 800189e:	b909      	cbnz	r1, 80018a4 <HAL_UART_IRQHandler+0x13c>
      {
        huart->pTxBuffPtr += 2U;
 80018a0:	3202      	adds	r2, #2
 80018a2:	e000      	b.n	80018a6 <HAL_UART_IRQHandler+0x13e>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80018a4:	3201      	adds	r2, #1
 80018a6:	6222      	str	r2, [r4, #32]
 80018a8:	e003      	b.n	80018b2 <HAL_UART_IRQHandler+0x14a>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FFU);
 80018aa:	1c51      	adds	r1, r2, #1
 80018ac:	6221      	str	r1, [r4, #32]
 80018ae:	7812      	ldrb	r2, [r2, #0]
 80018b0:	605a      	str	r2, [r3, #4]
    }

    if(--huart->TxXferCount == 0U)
 80018b2:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80018b4:	3a01      	subs	r2, #1
 80018b6:	b292      	uxth	r2, r2
 80018b8:	84e2      	strh	r2, [r4, #38]	; 0x26
 80018ba:	b93a      	cbnz	r2, 80018cc <HAL_UART_IRQHandler+0x164>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80018bc:	68da      	ldr	r2, [r3, #12]
 80018be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80018c2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80018c4:	68da      	ldr	r2, [r3, #12]
 80018c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80018ca:	60da      	str	r2, [r3, #12]
  if((tmp1 != RESET) && (tmp2 != RESET))
  {
    UART_Transmit_IT(huart);
  }
  
  tmp1 = __HAL_UART_GET_FLAG(huart, UART_FLAG_TC);
 80018cc:	6819      	ldr	r1, [r3, #0]
  tmp2 = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_TC);
 80018ce:	68da      	ldr	r2, [r3, #12]
  /* UART in mode Transmitter end --------------------------------------------*/
  if((tmp1 != RESET) && (tmp2 != RESET))
 80018d0:	0649      	lsls	r1, r1, #25
 80018d2:	d50b      	bpl.n	80018ec <HAL_UART_IRQHandler+0x184>
 80018d4:	0652      	lsls	r2, r2, #25
 80018d6:	d509      	bpl.n	80018ec <HAL_UART_IRQHandler+0x184>
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */    
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80018d8:	68da      	ldr	r2, [r3, #12]
 80018da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80018de:	60da      	str	r2, [r3, #12]
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80018e0:	2320      	movs	r3, #32
 80018e2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    
  HAL_UART_TxCpltCallback(huart);
 80018e6:	4620      	mov	r0, r4
 80018e8:	f7ff ff3b 	bl	8001762 <HAL_UART_TxCpltCallback>
  if((tmp1 != RESET) && (tmp2 != RESET))
  {
    UART_EndTransmit_IT(huart);
  }

  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80018ec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80018ee:	b13b      	cbz	r3, 8001900 <HAL_UART_IRQHandler+0x198>
  {
    /* Set the UART state ready to be able to start again the process */
    huart->gState = HAL_UART_STATE_READY;
 80018f0:	2320      	movs	r3, #32
 80018f2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    huart->RxState = HAL_UART_STATE_READY;
    
    HAL_UART_ErrorCallback(huart);
 80018f6:	4620      	mov	r0, r4

  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
  {
    /* Set the UART state ready to be able to start again the process */
    huart->gState = HAL_UART_STATE_READY;
    huart->RxState = HAL_UART_STATE_READY;
 80018f8:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    
    HAL_UART_ErrorCallback(huart);
 80018fc:	f7ff ff33 	bl	8001766 <HAL_UART_ErrorCallback>
  }  
}
 8001900:	b004      	add	sp, #16
 8001902:	bd10      	pop	{r4, pc}

08001904 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 8001904:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001908:	2b01      	cmp	r3, #1
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 800190a:	b510      	push	{r4, lr}
 800190c:	f04f 0302 	mov.w	r3, #2
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 8001910:	d018      	beq.n	8001944 <HAL_TIMEx_MasterConfigSynchronization+0x40>
  
  htim->State = HAL_TIM_STATE_BUSY;
 8001912:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001916:	6803      	ldr	r3, [r0, #0]
 8001918:	685a      	ldr	r2, [r3, #4]
 800191a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800191e:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8001920:	685c      	ldr	r4, [r3, #4]
 8001922:	680a      	ldr	r2, [r1, #0]
 8001924:	4322      	orrs	r2, r4
 8001926:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8001928:	689a      	ldr	r2, [r3, #8]
 800192a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800192e:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001930:	689c      	ldr	r4, [r3, #8]
 8001932:	684a      	ldr	r2, [r1, #4]
 8001934:	4322      	orrs	r2, r4
 8001936:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 8001938:	2301      	movs	r3, #1
 800193a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 800193e:	2300      	movs	r3, #0
 8001940:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 8001944:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
  
  __HAL_UNLOCK(htim);
  
  return HAL_OK;
} 
 8001946:	bd10      	pop	{r4, pc}

08001948 <HAL_TIMEx_CommutationCallback>:
 8001948:	4770      	bx	lr

0800194a <HAL_TIMEx_BreakCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800194a:	4770      	bx	lr

0800194c <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800194c:	6803      	ldr	r3, [r0, #0]
 800194e:	68da      	ldr	r2, [r3, #12]
 8001950:	f042 0201 	orr.w	r2, r2, #1
 8001954:	60da      	str	r2, [r3, #12]
      
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	f042 0201 	orr.w	r2, r2, #1
 800195c:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
}
 800195e:	2000      	movs	r0, #0
 8001960:	4770      	bx	lr

08001962 <HAL_TIM_ConfigClockSource>:
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
  uint32_t tmpsmcr = 0U;
    
  /* Process Locked */
  __HAL_LOCK(htim);
 8001962:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001966:	2b01      	cmp	r3, #1
  * @param  sClockSourceConfig: pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral. 
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
 8001968:	b570      	push	{r4, r5, r6, lr}
 800196a:	f04f 0302 	mov.w	r3, #2
  uint32_t tmpsmcr = 0U;
    
  /* Process Locked */
  __HAL_LOCK(htim);
 800196e:	f000 80b0 	beq.w	8001ad2 <HAL_TIM_ConfigClockSource+0x170>
  
  htim->State = HAL_TIM_STATE_BUSY;
 8001972:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
  
  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001976:	6803      	ldr	r3, [r0, #0]
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
  uint32_t tmpsmcr = 0U;
    
  /* Process Locked */
  __HAL_LOCK(htim);
 8001978:	2201      	movs	r2, #1
 800197a:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  
  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
  
  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800197e:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001980:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8001984:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8001988:	609a      	str	r2, [r3, #8]
  
  switch (sClockSourceConfig->ClockSource)
 800198a:	680a      	ldr	r2, [r1, #0]
 800198c:	2a40      	cmp	r2, #64	; 0x40
 800198e:	d077      	beq.n	8001a80 <HAL_TIM_ConfigClockSource+0x11e>
 8001990:	d818      	bhi.n	80019c4 <HAL_TIM_ConfigClockSource+0x62>
 8001992:	2a10      	cmp	r2, #16
 8001994:	f000 808b 	beq.w	8001aae <HAL_TIM_ConfigClockSource+0x14c>
 8001998:	d808      	bhi.n	80019ac <HAL_TIM_ConfigClockSource+0x4a>
 800199a:	2a00      	cmp	r2, #0
 800199c:	f040 8093 	bne.w	8001ac6 <HAL_TIM_ConfigClockSource+0x164>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0U;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 80019a0:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 80019a2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80019a6:	f042 0207 	orr.w	r2, r2, #7
 80019aa:	e08b      	b.n	8001ac4 <HAL_TIM_ConfigClockSource+0x162>
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;
  
  switch (sClockSourceConfig->ClockSource)
 80019ac:	2a20      	cmp	r2, #32
 80019ae:	f000 8084 	beq.w	8001aba <HAL_TIM_ConfigClockSource+0x158>
 80019b2:	2a30      	cmp	r2, #48	; 0x30
 80019b4:	f040 8087 	bne.w	8001ac6 <HAL_TIM_ConfigClockSource+0x164>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0U;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 80019b8:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 80019ba:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80019be:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 80019c2:	e07f      	b.n	8001ac4 <HAL_TIM_ConfigClockSource+0x162>
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;
  
  switch (sClockSourceConfig->ClockSource)
 80019c4:	2a70      	cmp	r2, #112	; 0x70
 80019c6:	d035      	beq.n	8001a34 <HAL_TIM_ConfigClockSource+0xd2>
 80019c8:	d81b      	bhi.n	8001a02 <HAL_TIM_ConfigClockSource+0xa0>
 80019ca:	2a50      	cmp	r2, #80	; 0x50
 80019cc:	d041      	beq.n	8001a52 <HAL_TIM_ConfigClockSource+0xf0>
 80019ce:	2a60      	cmp	r2, #96	; 0x60
 80019d0:	d179      	bne.n	8001ac6 <HAL_TIM_ConfigClockSource+0x164>
{
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80019d2:	6a1c      	ldr	r4, [r3, #32]

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance, 
 80019d4:	684d      	ldr	r5, [r1, #4]
 80019d6:	68ce      	ldr	r6, [r1, #12]
{
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80019d8:	f024 0410 	bic.w	r4, r4, #16
 80019dc:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80019de:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 80019e0:	6a1a      	ldr	r2, [r3, #32]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80019e2:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80019e6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80019ea:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80019ee:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |= (TIM_ICPolarity << 4U);

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80019f2:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 80019f4:	621a      	str	r2, [r3, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0U;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 80019f6:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 80019f8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80019fc:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 8001a00:	e060      	b.n	8001ac4 <HAL_TIM_ConfigClockSource+0x162>
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;
  
  switch (sClockSourceConfig->ClockSource)
 8001a02:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001a06:	d011      	beq.n	8001a2c <HAL_TIM_ConfigClockSource+0xca>
 8001a08:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001a0c:	d15b      	bne.n	8001ac6 <HAL_TIM_ConfigClockSource+0x164>
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr = 0U;

  tmpsmcr = TIMx->SMCR;
 8001a0e:	689c      	ldr	r4, [r3, #8]
 8001a10:	688d      	ldr	r5, [r1, #8]
 8001a12:	684a      	ldr	r2, [r1, #4]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001a14:	68c9      	ldr	r1, [r1, #12]
 8001a16:	432a      	orrs	r2, r5
 8001a18:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
 8001a1c:	4322      	orrs	r2, r4
 8001a1e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001a22:	609a      	str	r2, [r3, #8]
      TIM_ETR_SetConfig(htim->Instance, 
                        sClockSourceConfig->ClockPrescaler, 
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001a24:	689a      	ldr	r2, [r3, #8]
 8001a26:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001a2a:	e04b      	b.n	8001ac4 <HAL_TIM_ConfigClockSource+0x162>
    case TIM_CLOCKSOURCE_INTERNAL:
    { 
      assert_param(IS_TIM_INSTANCE(htim->Instance));
      
      /* Disable slave mode to clock the prescaler directly with the internal clock */
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001a2c:	689a      	ldr	r2, [r3, #8]
 8001a2e:	f022 0207 	bic.w	r2, r2, #7
 8001a32:	e047      	b.n	8001ac4 <HAL_TIM_ConfigClockSource+0x162>
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr = 0U;

  tmpsmcr = TIMx->SMCR;
 8001a34:	689c      	ldr	r4, [r3, #8]
 8001a36:	688d      	ldr	r5, [r1, #8]
 8001a38:	684a      	ldr	r2, [r1, #4]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001a3a:	68c9      	ldr	r1, [r1, #12]
 8001a3c:	432a      	orrs	r2, r5
 8001a3e:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
 8001a42:	4322      	orrs	r2, r4
 8001a44:	ea42 2201 	orr.w	r2, r2, r1, lsl #8

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001a48:	609a      	str	r2, [r3, #8]
      TIM_ETR_SetConfig(htim->Instance, 
                        sClockSourceConfig->ClockPrescaler, 
                        sClockSourceConfig->ClockPolarity, 
                        sClockSourceConfig->ClockFilter);
      /* Get the TIMx SMCR register value */
      tmpsmcr = htim->Instance->SMCR;
 8001a4a:	689a      	ldr	r2, [r3, #8]
      /* Reset the SMS and TS Bits */
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001a4c:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 8001a50:	e038      	b.n	8001ac4 <HAL_TIM_ConfigClockSource+0x162>
{
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001a52:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001a54:	6a1c      	ldr	r4, [r3, #32]

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance, 
 8001a56:	684d      	ldr	r5, [r1, #4]
 8001a58:	68ce      	ldr	r6, [r1, #12]
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001a5a:	f024 0401 	bic.w	r4, r4, #1
 8001a5e:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8001a60:	6999      	ldr	r1, [r3, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001a62:	f022 020a 	bic.w	r2, r2, #10
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;    
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001a66:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;
 8001a6a:	432a      	orrs	r2, r5
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;    
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001a6c:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001a70:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8001a72:	621a      	str	r2, [r3, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0U;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8001a74:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8001a76:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001a7a:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 8001a7e:	e021      	b.n	8001ac4 <HAL_TIM_ConfigClockSource+0x162>
{
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001a80:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001a82:	6a1c      	ldr	r4, [r3, #32]

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance, 
 8001a84:	684d      	ldr	r5, [r1, #4]
 8001a86:	68ce      	ldr	r6, [r1, #12]
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001a88:	f024 0401 	bic.w	r4, r4, #1
 8001a8c:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8001a8e:	6999      	ldr	r1, [r3, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001a90:	f022 020a 	bic.w	r2, r2, #10
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;    
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001a94:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;
 8001a98:	432a      	orrs	r2, r5
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;    
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001a9a:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001a9e:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8001aa0:	621a      	str	r2, [r3, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0U;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8001aa2:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8001aa4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001aa8:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 8001aac:	e00a      	b.n	8001ac4 <HAL_TIM_ConfigClockSource+0x162>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0U;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8001aae:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8001ab0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001ab4:	f042 0217 	orr.w	r2, r2, #23
 8001ab8:	e004      	b.n	8001ac4 <HAL_TIM_ConfigClockSource+0x162>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t TIM_ITRx)
{
  uint32_t tmpsmcr = 0U;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8001aba:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8001abc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001ac0:	f042 0227 	orr.w	r2, r2, #39	; 0x27
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8001ac4:	609a      	str	r2, [r3, #8]
    break;
    
    default:
    break;    
  }
  htim->State = HAL_TIM_STATE_READY;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8001acc:	2300      	movs	r3, #0
 8001ace:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
  uint32_t tmpsmcr = 0U;
    
  /* Process Locked */
  __HAL_LOCK(htim);
 8001ad2:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
  
  __HAL_UNLOCK(htim);
  
  return HAL_OK;
}
 8001ad4:	bd70      	pop	{r4, r5, r6, pc}

08001ad6 <HAL_TIM_OC_DelayElapsedCallback>:
 8001ad6:	4770      	bx	lr

08001ad8 <HAL_TIM_IC_CaptureCallback>:
 8001ad8:	4770      	bx	lr

08001ada <HAL_TIM_PWM_PulseFinishedCallback>:
 8001ada:	4770      	bx	lr

08001adc <HAL_TIM_TriggerCallback>:
 8001adc:	4770      	bx	lr

08001ade <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ade:	6803      	ldr	r3, [r0, #0]
 8001ae0:	691a      	ldr	r2, [r3, #16]
 8001ae2:	0791      	lsls	r1, r2, #30
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ae4:	b510      	push	{r4, lr}
 8001ae6:	4604      	mov	r4, r0
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ae8:	d514      	bpl.n	8001b14 <HAL_TIM_IRQHandler+0x36>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8001aea:	68da      	ldr	r2, [r3, #12]
 8001aec:	0792      	lsls	r2, r2, #30
 8001aee:	d511      	bpl.n	8001b14 <HAL_TIM_IRQHandler+0x36>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001af0:	f06f 0202 	mvn.w	r2, #2
 8001af4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001af6:	699b      	ldr	r3, [r3, #24]
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001af8:	2201      	movs	r2, #1
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001afa:	079b      	lsls	r3, r3, #30
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001afc:	7602      	strb	r2, [r0, #24]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001afe:	d002      	beq.n	8001b06 <HAL_TIM_IRQHandler+0x28>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8001b00:	f7ff ffea 	bl	8001ad8 <HAL_TIM_IC_CaptureCallback>
 8001b04:	e004      	b.n	8001b10 <HAL_TIM_IRQHandler+0x32>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b06:	f7ff ffe6 	bl	8001ad6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b0a:	4620      	mov	r0, r4
 8001b0c:	f7ff ffe5 	bl	8001ada <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b10:	2300      	movs	r3, #0
 8001b12:	7623      	strb	r3, [r4, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001b14:	6823      	ldr	r3, [r4, #0]
 8001b16:	691a      	ldr	r2, [r3, #16]
 8001b18:	0750      	lsls	r0, r2, #29
 8001b1a:	d516      	bpl.n	8001b4a <HAL_TIM_IRQHandler+0x6c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001b1c:	68da      	ldr	r2, [r3, #12]
 8001b1e:	0751      	lsls	r1, r2, #29
 8001b20:	d513      	bpl.n	8001b4a <HAL_TIM_IRQHandler+0x6c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001b22:	f06f 0204 	mvn.w	r2, #4
 8001b26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b28:	699b      	ldr	r3, [r3, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b2a:	2202      	movs	r2, #2
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b2c:	f413 7f40 	tst.w	r3, #768	; 0x300
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b30:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001b32:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b34:	d002      	beq.n	8001b3c <HAL_TIM_IRQHandler+0x5e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001b36:	f7ff ffcf 	bl	8001ad8 <HAL_TIM_IC_CaptureCallback>
 8001b3a:	e004      	b.n	8001b46 <HAL_TIM_IRQHandler+0x68>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b3c:	f7ff ffcb 	bl	8001ad6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b40:	4620      	mov	r0, r4
 8001b42:	f7ff ffca 	bl	8001ada <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b46:	2300      	movs	r3, #0
 8001b48:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001b4a:	6823      	ldr	r3, [r4, #0]
 8001b4c:	691a      	ldr	r2, [r3, #16]
 8001b4e:	0712      	lsls	r2, r2, #28
 8001b50:	d515      	bpl.n	8001b7e <HAL_TIM_IRQHandler+0xa0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001b52:	68da      	ldr	r2, [r3, #12]
 8001b54:	0710      	lsls	r0, r2, #28
 8001b56:	d512      	bpl.n	8001b7e <HAL_TIM_IRQHandler+0xa0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001b58:	f06f 0208 	mvn.w	r2, #8
 8001b5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b5e:	69db      	ldr	r3, [r3, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b60:	2204      	movs	r2, #4
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b62:	0799      	lsls	r1, r3, #30
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b64:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001b66:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b68:	d002      	beq.n	8001b70 <HAL_TIM_IRQHandler+0x92>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001b6a:	f7ff ffb5 	bl	8001ad8 <HAL_TIM_IC_CaptureCallback>
 8001b6e:	e004      	b.n	8001b7a <HAL_TIM_IRQHandler+0x9c>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b70:	f7ff ffb1 	bl	8001ad6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8001b74:	4620      	mov	r0, r4
 8001b76:	f7ff ffb0 	bl	8001ada <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001b7e:	6823      	ldr	r3, [r4, #0]
 8001b80:	691a      	ldr	r2, [r3, #16]
 8001b82:	06d2      	lsls	r2, r2, #27
 8001b84:	d516      	bpl.n	8001bb4 <HAL_TIM_IRQHandler+0xd6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001b86:	68da      	ldr	r2, [r3, #12]
 8001b88:	06d0      	lsls	r0, r2, #27
 8001b8a:	d513      	bpl.n	8001bb4 <HAL_TIM_IRQHandler+0xd6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001b8c:	f06f 0210 	mvn.w	r2, #16
 8001b90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001b92:	69db      	ldr	r3, [r3, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001b94:	2208      	movs	r2, #8
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001b96:	f413 7f40 	tst.w	r3, #768	; 0x300
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001b9a:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001b9c:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001b9e:	d002      	beq.n	8001ba6 <HAL_TIM_IRQHandler+0xc8>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001ba0:	f7ff ff9a 	bl	8001ad8 <HAL_TIM_IC_CaptureCallback>
 8001ba4:	e004      	b.n	8001bb0 <HAL_TIM_IRQHandler+0xd2>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ba6:	f7ff ff96 	bl	8001ad6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001baa:	4620      	mov	r0, r4
 8001bac:	f7ff ff95 	bl	8001ada <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	7623      	strb	r3, [r4, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001bb4:	6823      	ldr	r3, [r4, #0]
 8001bb6:	691a      	ldr	r2, [r3, #16]
 8001bb8:	07d1      	lsls	r1, r2, #31
 8001bba:	d508      	bpl.n	8001bce <HAL_TIM_IRQHandler+0xf0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001bbc:	68da      	ldr	r2, [r3, #12]
 8001bbe:	07d2      	lsls	r2, r2, #31
 8001bc0:	d505      	bpl.n	8001bce <HAL_TIM_IRQHandler+0xf0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001bc2:	f06f 0201 	mvn.w	r2, #1
 8001bc6:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001bc8:	4620      	mov	r0, r4
 8001bca:	f7ff fa5d 	bl	8001088 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001bce:	6823      	ldr	r3, [r4, #0]
 8001bd0:	691a      	ldr	r2, [r3, #16]
 8001bd2:	0610      	lsls	r0, r2, #24
 8001bd4:	d508      	bpl.n	8001be8 <HAL_TIM_IRQHandler+0x10a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001bd6:	68da      	ldr	r2, [r3, #12]
 8001bd8:	0611      	lsls	r1, r2, #24
 8001bda:	d505      	bpl.n	8001be8 <HAL_TIM_IRQHandler+0x10a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001bdc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001be0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001be2:	4620      	mov	r0, r4
 8001be4:	f7ff feb1 	bl	800194a <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001be8:	6823      	ldr	r3, [r4, #0]
 8001bea:	691a      	ldr	r2, [r3, #16]
 8001bec:	0652      	lsls	r2, r2, #25
 8001bee:	d508      	bpl.n	8001c02 <HAL_TIM_IRQHandler+0x124>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8001bf0:	68da      	ldr	r2, [r3, #12]
 8001bf2:	0650      	lsls	r0, r2, #25
 8001bf4:	d505      	bpl.n	8001c02 <HAL_TIM_IRQHandler+0x124>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001bf6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001bfa:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001bfc:	4620      	mov	r0, r4
 8001bfe:	f7ff ff6d 	bl	8001adc <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001c02:	6823      	ldr	r3, [r4, #0]
 8001c04:	691a      	ldr	r2, [r3, #16]
 8001c06:	0691      	lsls	r1, r2, #26
 8001c08:	d50a      	bpl.n	8001c20 <HAL_TIM_IRQHandler+0x142>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8001c0a:	68da      	ldr	r2, [r3, #12]
 8001c0c:	0692      	lsls	r2, r2, #26
 8001c0e:	d507      	bpl.n	8001c20 <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001c10:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8001c14:	4620      	mov	r0, r4
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001c16:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
    }
  }
}
 8001c18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
      HAL_TIMEx_CommutationCallback(htim);
 8001c1c:	f7ff be94 	b.w	8001948 <HAL_TIMEx_CommutationCallback>
 8001c20:	bd10      	pop	{r4, pc}
	...

08001c24 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8001c24:	4a2e      	ldr	r2, [pc, #184]	; (8001ce0 <TIM_Base_SetConfig+0xbc>)
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
 8001c26:	6803      	ldr	r3, [r0, #0]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8001c28:	4290      	cmp	r0, r2
 8001c2a:	d012      	beq.n	8001c52 <TIM_Base_SetConfig+0x2e>
 8001c2c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001c30:	d00f      	beq.n	8001c52 <TIM_Base_SetConfig+0x2e>
 8001c32:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001c36:	4290      	cmp	r0, r2
 8001c38:	d00b      	beq.n	8001c52 <TIM_Base_SetConfig+0x2e>
 8001c3a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001c3e:	4290      	cmp	r0, r2
 8001c40:	d007      	beq.n	8001c52 <TIM_Base_SetConfig+0x2e>
 8001c42:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001c46:	4290      	cmp	r0, r2
 8001c48:	d003      	beq.n	8001c52 <TIM_Base_SetConfig+0x2e>
 8001c4a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001c4e:	4290      	cmp	r0, r2
 8001c50:	d118      	bne.n	8001c84 <TIM_Base_SetConfig+0x60>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8001c52:	684a      	ldr	r2, [r1, #4]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001c54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001c58:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8001c5a:	4a21      	ldr	r2, [pc, #132]	; (8001ce0 <TIM_Base_SetConfig+0xbc>)
 8001c5c:	4290      	cmp	r0, r2
 8001c5e:	d037      	beq.n	8001cd0 <TIM_Base_SetConfig+0xac>
 8001c60:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001c64:	d034      	beq.n	8001cd0 <TIM_Base_SetConfig+0xac>
 8001c66:	4a1f      	ldr	r2, [pc, #124]	; (8001ce4 <TIM_Base_SetConfig+0xc0>)
 8001c68:	4290      	cmp	r0, r2
 8001c6a:	d031      	beq.n	8001cd0 <TIM_Base_SetConfig+0xac>
 8001c6c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001c70:	4290      	cmp	r0, r2
 8001c72:	d02d      	beq.n	8001cd0 <TIM_Base_SetConfig+0xac>
 8001c74:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001c78:	4290      	cmp	r0, r2
 8001c7a:	d029      	beq.n	8001cd0 <TIM_Base_SetConfig+0xac>
 8001c7c:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001c80:	4290      	cmp	r0, r2
 8001c82:	d025      	beq.n	8001cd0 <TIM_Base_SetConfig+0xac>
 8001c84:	4a18      	ldr	r2, [pc, #96]	; (8001ce8 <TIM_Base_SetConfig+0xc4>)
 8001c86:	4290      	cmp	r0, r2
 8001c88:	d022      	beq.n	8001cd0 <TIM_Base_SetConfig+0xac>
 8001c8a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001c8e:	4290      	cmp	r0, r2
 8001c90:	d01e      	beq.n	8001cd0 <TIM_Base_SetConfig+0xac>
 8001c92:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001c96:	4290      	cmp	r0, r2
 8001c98:	d01a      	beq.n	8001cd0 <TIM_Base_SetConfig+0xac>
 8001c9a:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8001c9e:	4290      	cmp	r0, r2
 8001ca0:	d016      	beq.n	8001cd0 <TIM_Base_SetConfig+0xac>
 8001ca2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001ca6:	4290      	cmp	r0, r2
 8001ca8:	d012      	beq.n	8001cd0 <TIM_Base_SetConfig+0xac>
 8001caa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001cae:	4290      	cmp	r0, r2
 8001cb0:	d00e      	beq.n	8001cd0 <TIM_Base_SetConfig+0xac>
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 8001cb2:	6003      	str	r3, [r0, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001cb4:	688b      	ldr	r3, [r1, #8]
 8001cb6:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001cb8:	680b      	ldr	r3, [r1, #0]
 8001cba:	6283      	str	r3, [r0, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8001cbc:	4b08      	ldr	r3, [pc, #32]	; (8001ce0 <TIM_Base_SetConfig+0xbc>)
 8001cbe:	4298      	cmp	r0, r3
 8001cc0:	d00b      	beq.n	8001cda <TIM_Base_SetConfig+0xb6>
 8001cc2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001cc6:	4298      	cmp	r0, r3
 8001cc8:	d007      	beq.n	8001cda <TIM_Base_SetConfig+0xb6>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	6143      	str	r3, [r0, #20]
}
 8001cce:	4770      	bx	lr
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001cd0:	68ca      	ldr	r2, [r1, #12]
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001cd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	e7eb      	b.n	8001cb2 <TIM_Base_SetConfig+0x8e>
  TIMx->PSC = (uint32_t)Structure->Prescaler;
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001cda:	690b      	ldr	r3, [r1, #16]
 8001cdc:	6303      	str	r3, [r0, #48]	; 0x30
 8001cde:	e7f4      	b.n	8001cca <TIM_Base_SetConfig+0xa6>
 8001ce0:	40010000 	.word	0x40010000
 8001ce4:	40000400 	.word	0x40000400
 8001ce8:	40014000 	.word	0x40014000

08001cec <HAL_TIM_Base_Init>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 8001cec:	b510      	push	{r4, lr}
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8001cee:	4604      	mov	r4, r0
 8001cf0:	b1a0      	cbz	r0, 8001d1c <HAL_TIM_Base_Init+0x30>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 8001cf2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001cf6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001cfa:	b91b      	cbnz	r3, 8001d04 <HAL_TIM_Base_Init+0x18>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001cfc:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d00:	f7ff f946 	bl	8000f90 <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001d04:	2302      	movs	r3, #2
 8001d06:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001d0a:	6820      	ldr	r0, [r4, #0]
 8001d0c:	1d21      	adds	r1, r4, #4
 8001d0e:	f7ff ff89 	bl	8001c24 <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001d12:	2301      	movs	r3, #1
 8001d14:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  return HAL_OK;
 8001d18:	2000      	movs	r0, #0
 8001d1a:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 8001d1c:	2001      	movs	r0, #1
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
  
  return HAL_OK;
}
 8001d1e:	bd10      	pop	{r4, pc}

08001d20 <HAL_RCC_OscConfig>:
  uint32_t tickstart = 0U;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d20:	6803      	ldr	r3, [r0, #0]
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature 
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx devices 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d22:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart = 0U;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d26:	07df      	lsls	r7, r3, #31
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature 
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx devices 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d28:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d2a:	d403      	bmi.n	8001d34 <HAL_RCC_OscConfig+0x14>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d2c:	6823      	ldr	r3, [r4, #0]
 8001d2e:	079e      	lsls	r6, r3, #30
 8001d30:	d44f      	bmi.n	8001dd2 <HAL_RCC_OscConfig+0xb2>
 8001d32:	e0a8      	b.n	8001e86 <HAL_RCC_OscConfig+0x166>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001d34:	4b91      	ldr	r3, [pc, #580]	; (8001f7c <HAL_RCC_OscConfig+0x25c>)
 8001d36:	689a      	ldr	r2, [r3, #8]
 8001d38:	f002 020c 	and.w	r2, r2, #12
 8001d3c:	2a04      	cmp	r2, #4
 8001d3e:	d010      	beq.n	8001d62 <HAL_RCC_OscConfig+0x42>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001d40:	689a      	ldr	r2, [r3, #8]
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001d42:	f002 020c 	and.w	r2, r2, #12
 8001d46:	2a08      	cmp	r2, #8
 8001d48:	d102      	bne.n	8001d50 <HAL_RCC_OscConfig+0x30>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	025d      	lsls	r5, r3, #9
 8001d4e:	d408      	bmi.n	8001d62 <HAL_RCC_OscConfig+0x42>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d50:	4a8a      	ldr	r2, [pc, #552]	; (8001f7c <HAL_RCC_OscConfig+0x25c>)
 8001d52:	6893      	ldr	r3, [r2, #8]
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001d54:	f003 030c 	and.w	r3, r3, #12
 8001d58:	2b0c      	cmp	r3, #12
 8001d5a:	d10b      	bne.n	8001d74 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d5c:	6853      	ldr	r3, [r2, #4]
 8001d5e:	0258      	lsls	r0, r3, #9
 8001d60:	d508      	bpl.n	8001d74 <HAL_RCC_OscConfig+0x54>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d62:	4b86      	ldr	r3, [pc, #536]	; (8001f7c <HAL_RCC_OscConfig+0x25c>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	0399      	lsls	r1, r3, #14
 8001d68:	d5e0      	bpl.n	8001d2c <HAL_RCC_OscConfig+0xc>
 8001d6a:	6863      	ldr	r3, [r4, #4]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d1dd      	bne.n	8001d2c <HAL_RCC_OscConfig+0xc>
      {
        return HAL_ERROR;
 8001d70:	2001      	movs	r0, #1
 8001d72:	e172      	b.n	800205a <HAL_RCC_OscConfig+0x33a>
      }
    }
    else
    {
      /* Reset HSEON and HSEBYP bits before configuring the HSE --------------*/
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 8001d74:	4d82      	ldr	r5, [pc, #520]	; (8001f80 <HAL_RCC_OscConfig+0x260>)
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till HSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d76:	4e81      	ldr	r6, [pc, #516]	; (8001f7c <HAL_RCC_OscConfig+0x25c>)
      }
    }
    else
    {
      /* Reset HSEON and HSEBYP bits before configuring the HSE --------------*/
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 8001d78:	2300      	movs	r3, #0
 8001d7a:	702b      	strb	r3, [r5, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d7c:	f000 fc9e 	bl	80026bc <HAL_GetTick>
 8001d80:	4607      	mov	r7, r0
      
      /* Wait till HSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d82:	6833      	ldr	r3, [r6, #0]
 8001d84:	039a      	lsls	r2, r3, #14
 8001d86:	d506      	bpl.n	8001d96 <HAL_RCC_OscConfig+0x76>
      {
        if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d88:	f000 fc98 	bl	80026bc <HAL_GetTick>
 8001d8c:	1bc0      	subs	r0, r0, r7
 8001d8e:	2864      	cmp	r0, #100	; 0x64
 8001d90:	d9f7      	bls.n	8001d82 <HAL_RCC_OscConfig+0x62>
        {
          return HAL_TIMEOUT;
 8001d92:	2003      	movs	r0, #3
 8001d94:	e161      	b.n	800205a <HAL_RCC_OscConfig+0x33a>
        }       
      }
      
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d96:	7923      	ldrb	r3, [r4, #4]
 8001d98:	702b      	strb	r3, [r5, #0]
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d9a:	6863      	ldr	r3, [r4, #4]
 8001d9c:	b163      	cbz	r3, 8001db8 <HAL_RCC_OscConfig+0x98>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d9e:	f000 fc8d 	bl	80026bc <HAL_GetTick>
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001da2:	4d76      	ldr	r5, [pc, #472]	; (8001f7c <HAL_RCC_OscConfig+0x25c>)
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da4:	4606      	mov	r6, r0
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001da6:	682b      	ldr	r3, [r5, #0]
 8001da8:	039b      	lsls	r3, r3, #14
 8001daa:	d4bf      	bmi.n	8001d2c <HAL_RCC_OscConfig+0xc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dac:	f000 fc86 	bl	80026bc <HAL_GetTick>
 8001db0:	1b80      	subs	r0, r0, r6
 8001db2:	2864      	cmp	r0, #100	; 0x64
 8001db4:	d9f7      	bls.n	8001da6 <HAL_RCC_OscConfig+0x86>
 8001db6:	e7ec      	b.n	8001d92 <HAL_RCC_OscConfig+0x72>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001db8:	f000 fc80 	bl	80026bc <HAL_GetTick>

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dbc:	4d6f      	ldr	r5, [pc, #444]	; (8001f7c <HAL_RCC_OscConfig+0x25c>)
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dbe:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dc0:	682b      	ldr	r3, [r5, #0]
 8001dc2:	039f      	lsls	r7, r3, #14
 8001dc4:	d5b2      	bpl.n	8001d2c <HAL_RCC_OscConfig+0xc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dc6:	f000 fc79 	bl	80026bc <HAL_GetTick>
 8001dca:	1b80      	subs	r0, r0, r6
 8001dcc:	2864      	cmp	r0, #100	; 0x64
 8001dce:	d9f7      	bls.n	8001dc0 <HAL_RCC_OscConfig+0xa0>
 8001dd0:	e7df      	b.n	8001d92 <HAL_RCC_OscConfig+0x72>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001dd2:	4b6a      	ldr	r3, [pc, #424]	; (8001f7c <HAL_RCC_OscConfig+0x25c>)
 8001dd4:	689a      	ldr	r2, [r3, #8]
 8001dd6:	f012 0f0c 	tst.w	r2, #12
 8001dda:	d010      	beq.n	8001dfe <HAL_RCC_OscConfig+0xde>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001ddc:	689a      	ldr	r2, [r3, #8]
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001dde:	f002 020c 	and.w	r2, r2, #12
 8001de2:	2a08      	cmp	r2, #8
 8001de4:	d102      	bne.n	8001dec <HAL_RCC_OscConfig+0xcc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	0258      	lsls	r0, r3, #9
 8001dea:	d508      	bpl.n	8001dfe <HAL_RCC_OscConfig+0xde>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001dec:	4a63      	ldr	r2, [pc, #396]	; (8001f7c <HAL_RCC_OscConfig+0x25c>)
 8001dee:	6893      	ldr	r3, [r2, #8]
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001df0:	f003 030c 	and.w	r3, r3, #12
 8001df4:	2b0c      	cmp	r3, #12
 8001df6:	d117      	bne.n	8001e28 <HAL_RCC_OscConfig+0x108>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001df8:	6853      	ldr	r3, [r2, #4]
 8001dfa:	0259      	lsls	r1, r3, #9
 8001dfc:	d414      	bmi.n	8001e28 <HAL_RCC_OscConfig+0x108>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dfe:	4b5f      	ldr	r3, [pc, #380]	; (8001f7c <HAL_RCC_OscConfig+0x25c>)
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	0792      	lsls	r2, r2, #30
 8001e04:	d502      	bpl.n	8001e0c <HAL_RCC_OscConfig+0xec>
 8001e06:	68e2      	ldr	r2, [r4, #12]
 8001e08:	2a01      	cmp	r2, #1
 8001e0a:	d1b1      	bne.n	8001d70 <HAL_RCC_OscConfig+0x50>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e0c:	681a      	ldr	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e0e:	21f8      	movs	r1, #248	; 0xf8
 8001e10:	fa91 f1a1 	rbit	r1, r1
 8001e14:	6920      	ldr	r0, [r4, #16]
 8001e16:	fab1 f181 	clz	r1, r1
 8001e1a:	fa00 f101 	lsl.w	r1, r0, r1
 8001e1e:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001e22:	430a      	orrs	r2, r1
 8001e24:	601a      	str	r2, [r3, #0]
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e26:	e02e      	b.n	8001e86 <HAL_RCC_OscConfig+0x166>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001e28:	68e2      	ldr	r2, [r4, #12]
 8001e2a:	4b56      	ldr	r3, [pc, #344]	; (8001f84 <HAL_RCC_OscConfig+0x264>)
 8001e2c:	b1ea      	cbz	r2, 8001e6a <HAL_RCC_OscConfig+0x14a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e2e:	2201      	movs	r2, #1
 8001e30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e32:	f000 fc43 	bl	80026bc <HAL_GetTick>

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e36:	4d51      	ldr	r5, [pc, #324]	; (8001f7c <HAL_RCC_OscConfig+0x25c>)
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e38:	4606      	mov	r6, r0

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e3a:	682b      	ldr	r3, [r5, #0]
 8001e3c:	484f      	ldr	r0, [pc, #316]	; (8001f7c <HAL_RCC_OscConfig+0x25c>)
 8001e3e:	079f      	lsls	r7, r3, #30
 8001e40:	d405      	bmi.n	8001e4e <HAL_RCC_OscConfig+0x12e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e42:	f000 fc3b 	bl	80026bc <HAL_GetTick>
 8001e46:	1b80      	subs	r0, r0, r6
 8001e48:	2802      	cmp	r0, #2
 8001e4a:	d9f6      	bls.n	8001e3a <HAL_RCC_OscConfig+0x11a>
 8001e4c:	e7a1      	b.n	8001d92 <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
          }       
        } 
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e4e:	6803      	ldr	r3, [r0, #0]
 8001e50:	22f8      	movs	r2, #248	; 0xf8
 8001e52:	fa92 f2a2 	rbit	r2, r2
 8001e56:	6921      	ldr	r1, [r4, #16]
 8001e58:	fab2 f282 	clz	r2, r2
 8001e5c:	fa01 f202 	lsl.w	r2, r1, r2
 8001e60:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001e64:	4313      	orrs	r3, r2
 8001e66:	6003      	str	r3, [r0, #0]
 8001e68:	e00d      	b.n	8001e86 <HAL_RCC_OscConfig+0x166>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e6c:	f000 fc26 	bl	80026bc <HAL_GetTick>
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e70:	4d42      	ldr	r5, [pc, #264]	; (8001f7c <HAL_RCC_OscConfig+0x25c>)
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e72:	4606      	mov	r6, r0
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e74:	682b      	ldr	r3, [r5, #0]
 8001e76:	0799      	lsls	r1, r3, #30
 8001e78:	d505      	bpl.n	8001e86 <HAL_RCC_OscConfig+0x166>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e7a:	f000 fc1f 	bl	80026bc <HAL_GetTick>
 8001e7e:	1b80      	subs	r0, r0, r6
 8001e80:	2802      	cmp	r0, #2
 8001e82:	d9f7      	bls.n	8001e74 <HAL_RCC_OscConfig+0x154>
 8001e84:	e785      	b.n	8001d92 <HAL_RCC_OscConfig+0x72>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e86:	6823      	ldr	r3, [r4, #0]
 8001e88:	071a      	lsls	r2, r3, #28
 8001e8a:	d403      	bmi.n	8001e94 <HAL_RCC_OscConfig+0x174>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e8c:	6823      	ldr	r3, [r4, #0]
 8001e8e:	075b      	lsls	r3, r3, #29
 8001e90:	d550      	bpl.n	8001f34 <HAL_RCC_OscConfig+0x214>
 8001e92:	e01f      	b.n	8001ed4 <HAL_RCC_OscConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e94:	6962      	ldr	r2, [r4, #20]
 8001e96:	4b3c      	ldr	r3, [pc, #240]	; (8001f88 <HAL_RCC_OscConfig+0x268>)
 8001e98:	b172      	cbz	r2, 8001eb8 <HAL_RCC_OscConfig+0x198>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e9e:	f000 fc0d 	bl	80026bc <HAL_GetTick>
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ea2:	4d36      	ldr	r5, [pc, #216]	; (8001f7c <HAL_RCC_OscConfig+0x25c>)
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ea4:	4606      	mov	r6, r0
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ea6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001ea8:	079f      	lsls	r7, r3, #30
 8001eaa:	d4ef      	bmi.n	8001e8c <HAL_RCC_OscConfig+0x16c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001eac:	f000 fc06 	bl	80026bc <HAL_GetTick>
 8001eb0:	1b80      	subs	r0, r0, r6
 8001eb2:	2802      	cmp	r0, #2
 8001eb4:	d9f7      	bls.n	8001ea6 <HAL_RCC_OscConfig+0x186>
 8001eb6:	e76c      	b.n	8001d92 <HAL_RCC_OscConfig+0x72>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001eb8:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eba:	f000 fbff 	bl	80026bc <HAL_GetTick>
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ebe:	4d2f      	ldr	r5, [pc, #188]	; (8001f7c <HAL_RCC_OscConfig+0x25c>)
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ec0:	4606      	mov	r6, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ec2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001ec4:	0798      	lsls	r0, r3, #30
 8001ec6:	d5e1      	bpl.n	8001e8c <HAL_RCC_OscConfig+0x16c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ec8:	f000 fbf8 	bl	80026bc <HAL_GetTick>
 8001ecc:	1b80      	subs	r0, r0, r6
 8001ece:	2802      	cmp	r0, #2
 8001ed0:	d9f7      	bls.n	8001ec2 <HAL_RCC_OscConfig+0x1a2>
 8001ed2:	e75e      	b.n	8001d92 <HAL_RCC_OscConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	9301      	str	r3, [sp, #4]
 8001ed8:	4b28      	ldr	r3, [pc, #160]	; (8001f7c <HAL_RCC_OscConfig+0x25c>)
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001eda:	4d2c      	ldr	r5, [pc, #176]	; (8001f8c <HAL_RCC_OscConfig+0x26c>)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001edc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ede:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001ee2:	641a      	str	r2, [r3, #64]	; 0x40
 8001ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eea:	9301      	str	r3, [sp, #4]
 8001eec:	9b01      	ldr	r3, [sp, #4]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001eee:	682b      	ldr	r3, [r5, #0]
 8001ef0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ef4:	602b      	str	r3, [r5, #0]
    
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001ef6:	f000 fbe1 	bl	80026bc <HAL_GetTick>
 8001efa:	4606      	mov	r6, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001efc:	682b      	ldr	r3, [r5, #0]
 8001efe:	05d9      	lsls	r1, r3, #23
 8001f00:	d51b      	bpl.n	8001f3a <HAL_RCC_OscConfig+0x21a>
        return HAL_TIMEOUT;
      }      
    }
    
    /* Reset LSEON and LSEBYP bits before configuring the LSE ----------------*/
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 8001f02:	4d23      	ldr	r5, [pc, #140]	; (8001f90 <HAL_RCC_OscConfig+0x270>)
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    
    /* Wait till LSE is ready */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f04:	4e1d      	ldr	r6, [pc, #116]	; (8001f7c <HAL_RCC_OscConfig+0x25c>)
        return HAL_TIMEOUT;
      }      
    }
    
    /* Reset LSEON and LSEBYP bits before configuring the LSE ----------------*/
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 8001f06:	2300      	movs	r3, #0
 8001f08:	702b      	strb	r3, [r5, #0]
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f0a:	f000 fbd7 	bl	80026bc <HAL_GetTick>
    
    /* Wait till LSE is ready */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
    {
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f0e:	f241 3888 	movw	r8, #5000	; 0x1388
    
    /* Reset LSEON and LSEBYP bits before configuring the LSE ----------------*/
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
    
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f12:	4607      	mov	r7, r0
    
    /* Wait till LSE is ready */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f14:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8001f16:	079a      	lsls	r2, r3, #30
 8001f18:	d415      	bmi.n	8001f46 <HAL_RCC_OscConfig+0x226>
        return HAL_TIMEOUT;
      }    
    } 
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f1a:	7a23      	ldrb	r3, [r4, #8]
 8001f1c:	702b      	strb	r3, [r5, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f1e:	68a3      	ldr	r3, [r4, #8]
 8001f20:	b1eb      	cbz	r3, 8001f5e <HAL_RCC_OscConfig+0x23e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f22:	f000 fbcb 	bl	80026bc <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f26:	4d15      	ldr	r5, [pc, #84]	; (8001f7c <HAL_RCC_OscConfig+0x25c>)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f28:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f2a:	f241 3788 	movw	r7, #5000	; 0x1388
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f2e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001f30:	079b      	lsls	r3, r3, #30
 8001f32:	d50e      	bpl.n	8001f52 <HAL_RCC_OscConfig+0x232>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f34:	69a2      	ldr	r2, [r4, #24]
 8001f36:	bb6a      	cbnz	r2, 8001f94 <HAL_RCC_OscConfig+0x274>
 8001f38:	e074      	b.n	8002024 <HAL_RCC_OscConfig+0x304>
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001f3a:	f000 fbbf 	bl	80026bc <HAL_GetTick>
 8001f3e:	1b80      	subs	r0, r0, r6
 8001f40:	2802      	cmp	r0, #2
 8001f42:	d9db      	bls.n	8001efc <HAL_RCC_OscConfig+0x1dc>
 8001f44:	e725      	b.n	8001d92 <HAL_RCC_OscConfig+0x72>
    tickstart = HAL_GetTick();
    
    /* Wait till LSE is ready */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
    {
      if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f46:	f000 fbb9 	bl	80026bc <HAL_GetTick>
 8001f4a:	1bc0      	subs	r0, r0, r7
 8001f4c:	4540      	cmp	r0, r8
 8001f4e:	d9e1      	bls.n	8001f14 <HAL_RCC_OscConfig+0x1f4>
 8001f50:	e71f      	b.n	8001d92 <HAL_RCC_OscConfig+0x72>
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f52:	f000 fbb3 	bl	80026bc <HAL_GetTick>
 8001f56:	1b80      	subs	r0, r0, r6
 8001f58:	42b8      	cmp	r0, r7
 8001f5a:	d9e8      	bls.n	8001f2e <HAL_RCC_OscConfig+0x20e>
 8001f5c:	e719      	b.n	8001d92 <HAL_RCC_OscConfig+0x72>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f5e:	f000 fbad 	bl	80026bc <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f62:	4d06      	ldr	r5, [pc, #24]	; (8001f7c <HAL_RCC_OscConfig+0x25c>)
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f64:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f66:	f241 3788 	movw	r7, #5000	; 0x1388
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f6a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001f6c:	0798      	lsls	r0, r3, #30
 8001f6e:	d5e1      	bpl.n	8001f34 <HAL_RCC_OscConfig+0x214>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f70:	f000 fba4 	bl	80026bc <HAL_GetTick>
 8001f74:	1b80      	subs	r0, r0, r6
 8001f76:	42b8      	cmp	r0, r7
 8001f78:	d9f7      	bls.n	8001f6a <HAL_RCC_OscConfig+0x24a>
 8001f7a:	e70a      	b.n	8001d92 <HAL_RCC_OscConfig+0x72>
 8001f7c:	40023800 	.word	0x40023800
 8001f80:	40023802 	.word	0x40023802
 8001f84:	42470000 	.word	0x42470000
 8001f88:	42470e80 	.word	0x42470e80
 8001f8c:	40007000 	.word	0x40007000
 8001f90:	40023870 	.word	0x40023870
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f94:	4d32      	ldr	r5, [pc, #200]	; (8002060 <HAL_RCC_OscConfig+0x340>)
 8001f96:	68ab      	ldr	r3, [r5, #8]
 8001f98:	f003 030c 	and.w	r3, r3, #12
 8001f9c:	2b08      	cmp	r3, #8
 8001f9e:	f43f aee7 	beq.w	8001d70 <HAL_RCC_OscConfig+0x50>
 8001fa2:	4e30      	ldr	r6, [pc, #192]	; (8002064 <HAL_RCC_OscConfig+0x344>)
 8001fa4:	2300      	movs	r3, #0
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fa6:	2a02      	cmp	r2, #2
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fa8:	6033      	str	r3, [r6, #0]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001faa:	d14a      	bne.n	8002042 <HAL_RCC_OscConfig+0x322>
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fac:	f000 fb86 	bl	80026bc <HAL_GetTick>
 8001fb0:	4680      	mov	r8, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fb2:	682b      	ldr	r3, [r5, #0]
 8001fb4:	4f2a      	ldr	r7, [pc, #168]	; (8002060 <HAL_RCC_OscConfig+0x340>)
 8001fb6:	0199      	lsls	r1, r3, #6
 8001fb8:	d436      	bmi.n	8002028 <HAL_RCC_OscConfig+0x308>
 8001fba:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8001fbe:	fa92 f2a2 	rbit	r2, r2
 8001fc2:	f44f 3340 	mov.w	r3, #196608	; 0x30000
            return HAL_TIMEOUT;
          }
        }        

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fc6:	fab2 fc82 	clz	ip, r2
 8001fca:	fa93 f3a3 	rbit	r3, r3
 8001fce:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 8001fd2:	fab3 fe83 	clz	lr, r3
 8001fd6:	fa91 f1a1 	rbit	r1, r1
 8001fda:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8001fde:	fab1 f581 	clz	r5, r1
 8001fe2:	fa92 f2a2 	rbit	r2, r2
 8001fe6:	69e3      	ldr	r3, [r4, #28]
 8001fe8:	fab2 f082 	clz	r0, r2
 8001fec:	6a22      	ldr	r2, [r4, #32]
 8001fee:	ea43 0102 	orr.w	r1, r3, r2
 8001ff2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001ff4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001ff6:	fa02 f20c 	lsl.w	r2, r2, ip
 8001ffa:	4311      	orrs	r1, r2
 8001ffc:	085a      	lsrs	r2, r3, #1
 8001ffe:	3a01      	subs	r2, #1
 8002000:	fa02 f30e 	lsl.w	r3, r2, lr
 8002004:	430b      	orrs	r3, r1
 8002006:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002008:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800200a:	40a9      	lsls	r1, r5
 800200c:	430b      	orrs	r3, r1
 800200e:	4082      	lsls	r2, r0
 8002010:	4313      	orrs	r3, r2
 8002012:	607b      	str	r3, [r7, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002014:	2301      	movs	r3, #1
 8002016:	6033      	str	r3, [r6, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002018:	f000 fb50 	bl	80026bc <HAL_GetTick>
 800201c:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	019a      	lsls	r2, r3, #6
 8002022:	d508      	bpl.n	8002036 <HAL_RCC_OscConfig+0x316>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8002024:	2000      	movs	r0, #0
 8002026:	e018      	b.n	800205a <HAL_RCC_OscConfig+0x33a>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002028:	f000 fb48 	bl	80026bc <HAL_GetTick>
 800202c:	ebc8 0000 	rsb	r0, r8, r0
 8002030:	2802      	cmp	r0, #2
 8002032:	d9be      	bls.n	8001fb2 <HAL_RCC_OscConfig+0x292>
 8002034:	e6ad      	b.n	8001d92 <HAL_RCC_OscConfig+0x72>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002036:	f000 fb41 	bl	80026bc <HAL_GetTick>
 800203a:	1b00      	subs	r0, r0, r4
 800203c:	2802      	cmp	r0, #2
 800203e:	d9ee      	bls.n	800201e <HAL_RCC_OscConfig+0x2fe>
 8002040:	e6a7      	b.n	8001d92 <HAL_RCC_OscConfig+0x72>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002042:	f000 fb3b 	bl	80026bc <HAL_GetTick>
 8002046:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002048:	682b      	ldr	r3, [r5, #0]
 800204a:	019b      	lsls	r3, r3, #6
 800204c:	d5ea      	bpl.n	8002024 <HAL_RCC_OscConfig+0x304>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800204e:	f000 fb35 	bl	80026bc <HAL_GetTick>
 8002052:	1b00      	subs	r0, r0, r4
 8002054:	2802      	cmp	r0, #2
 8002056:	d9f7      	bls.n	8002048 <HAL_RCC_OscConfig+0x328>
 8002058:	e69b      	b.n	8001d92 <HAL_RCC_OscConfig+0x72>
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 800205a:	b002      	add	sp, #8
 800205c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002060:	40023800 	.word	0x40023800
 8002064:	42470060 	.word	0x42470060

08002068 <HAL_RCC_GetSysClockFreq>:
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002068:	4930      	ldr	r1, [pc, #192]	; (800212c <HAL_RCC_GetSysClockFreq+0xc4>)
 800206a:	6888      	ldr	r0, [r1, #8]
 800206c:	f000 000c 	and.w	r0, r0, #12
 8002070:	2808      	cmp	r0, #8
 8002072:	d008      	beq.n	8002086 <HAL_RCC_GetSysClockFreq+0x1e>
 8002074:	280c      	cmp	r0, #12
 8002076:	d02f      	beq.n	80020d8 <HAL_RCC_GetSysClockFreq+0x70>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002078:	4a2d      	ldr	r2, [pc, #180]	; (8002130 <HAL_RCC_GetSysClockFreq+0xc8>)
 800207a:	4b2e      	ldr	r3, [pc, #184]	; (8002134 <HAL_RCC_GetSysClockFreq+0xcc>)
 800207c:	2804      	cmp	r0, #4
 800207e:	bf0c      	ite	eq
 8002080:	4618      	moveq	r0, r3
 8002082:	4610      	movne	r0, r2
 8002084:	4770      	bx	lr
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002086:	6848      	ldr	r0, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002088:	684b      	ldr	r3, [r1, #4]
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800208a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800208e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002092:	f647 72c0 	movw	r2, #32704	; 0x7fc0
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8002096:	684b      	ldr	r3, [r1, #4]
 8002098:	fa92 f2a2 	rbit	r2, r2
 800209c:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 80020a0:	fab2 f282 	clz	r2, r2
 80020a4:	ea01 0103 	and.w	r1, r1, r3
 80020a8:	fa21 f102 	lsr.w	r1, r1, r2
 80020ac:	bf14      	ite	ne
 80020ae:	4a21      	ldrne	r2, [pc, #132]	; (8002134 <HAL_RCC_GetSysClockFreq+0xcc>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 80020b0:	4a1f      	ldreq	r2, [pc, #124]	; (8002130 <HAL_RCC_GetSysClockFreq+0xc8>)
 80020b2:	fbb2 f0f0 	udiv	r0, r2, r0
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 80020b6:	4a1d      	ldr	r2, [pc, #116]	; (800212c <HAL_RCC_GetSysClockFreq+0xc4>)
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 80020b8:	fb00 f301 	mul.w	r3, r0, r1
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 80020bc:	6852      	ldr	r2, [r2, #4]
 80020be:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 80020c2:	fa90 f0a0 	rbit	r0, r0
 80020c6:	fab0 f080 	clz	r0, r0
      
      sysclockfreq = pllvco/pllp;
 80020ca:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 80020ce:	fa22 f000 	lsr.w	r0, r2, r0
 80020d2:	3001      	adds	r0, #1
 80020d4:	0040      	lsls	r0, r0, #1
 80020d6:	e025      	b.n	8002124 <HAL_RCC_GetSysClockFreq+0xbc>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020d8:	6848      	ldr	r0, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80020da:	684b      	ldr	r3, [r1, #4]
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020dc:	f000 003f 	and.w	r0, r0, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80020e0:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80020e4:	f647 72c0 	movw	r2, #32704	; 0x7fc0
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 80020e8:	684b      	ldr	r3, [r1, #4]
 80020ea:	fa92 f2a2 	rbit	r2, r2
 80020ee:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 80020f2:	fab2 f282 	clz	r2, r2
 80020f6:	ea01 0103 	and.w	r1, r1, r3
 80020fa:	fa21 f102 	lsr.w	r1, r1, r2
 80020fe:	bf14      	ite	ne
 8002100:	4a0c      	ldrne	r2, [pc, #48]	; (8002134 <HAL_RCC_GetSysClockFreq+0xcc>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8002102:	4a0b      	ldreq	r2, [pc, #44]	; (8002130 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002104:	fbb2 f0f0 	udiv	r0, r2, r0
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> POSITION_VAL(RCC_PLLCFGR_PLLR));
 8002108:	4a08      	ldr	r2, [pc, #32]	; (800212c <HAL_RCC_GetSysClockFreq+0xc4>)
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 800210a:	fb00 f301 	mul.w	r3, r0, r1
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> POSITION_VAL(RCC_PLLCFGR_PLLR));
 800210e:	6852      	ldr	r2, [r2, #4]
 8002110:	f04f 40e0 	mov.w	r0, #1879048192	; 0x70000000
 8002114:	fa90 f0a0 	rbit	r0, r0
 8002118:	fab0 f080 	clz	r0, r0
      
      sysclockfreq = pllvco/pllr;
 800211c:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 8002120:	fa22 f000 	lsr.w	r0, r2, r0
 8002124:	fbb3 f0f0 	udiv	r0, r3, r0
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	40023800 	.word	0x40023800
 8002130:	00f42400 	.word	0x00f42400
 8002134:	007a1200 	.word	0x007a1200

08002138 <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002138:	4b4d      	ldr	r3, [pc, #308]	; (8002270 <HAL_RCC_ClockConfig+0x138>)
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	f002 020f 	and.w	r2, r2, #15
 8002140:	428a      	cmp	r2, r1
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002142:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002146:	4605      	mov	r5, r0
 8002148:	460e      	mov	r6, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800214a:	d30a      	bcc.n	8002162 <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
    }
  }
 
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800214c:	6829      	ldr	r1, [r5, #0]
 800214e:	0788      	lsls	r0, r1, #30
 8002150:	d511      	bpl.n	8002176 <HAL_RCC_ClockConfig+0x3e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002152:	4848      	ldr	r0, [pc, #288]	; (8002274 <HAL_RCC_ClockConfig+0x13c>)
 8002154:	6883      	ldr	r3, [r0, #8]
 8002156:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800215a:	68ab      	ldr	r3, [r5, #8]
 800215c:	4313      	orrs	r3, r2
 800215e:	6083      	str	r3, [r0, #8]
 8002160:	e009      	b.n	8002176 <HAL_RCC_ClockConfig+0x3e>
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002162:	b2ca      	uxtb	r2, r1
 8002164:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 030f 	and.w	r3, r3, #15
 800216c:	4299      	cmp	r1, r3
 800216e:	d0ed      	beq.n	800214c <HAL_RCC_ClockConfig+0x14>
    {
      return HAL_ERROR;
 8002170:	2001      	movs	r0, #1
 8002172:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }
  
  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002176:	07c9      	lsls	r1, r1, #31
 8002178:	d406      	bmi.n	8002188 <HAL_RCC_ClockConfig+0x50>
      }
    }
  }    
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800217a:	4b3d      	ldr	r3, [pc, #244]	; (8002270 <HAL_RCC_ClockConfig+0x138>)
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	f002 020f 	and.w	r2, r2, #15
 8002182:	4296      	cmp	r6, r2
 8002184:	d353      	bcc.n	800222e <HAL_RCC_ClockConfig+0xf6>
 8002186:	e059      	b.n	800223c <HAL_RCC_ClockConfig+0x104>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002188:	686b      	ldr	r3, [r5, #4]
 800218a:	4a3a      	ldr	r2, [pc, #232]	; (8002274 <HAL_RCC_ClockConfig+0x13c>)
 800218c:	2b01      	cmp	r3, #1
 800218e:	d103      	bne.n	8002198 <HAL_RCC_ClockConfig+0x60>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002190:	6812      	ldr	r2, [r2, #0]
 8002192:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8002196:	e008      	b.n	80021aa <HAL_RCC_ClockConfig+0x72>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8002198:	1e99      	subs	r1, r3, #2
 800219a:	2901      	cmp	r1, #1
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800219c:	6812      	ldr	r2, [r2, #0]
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 800219e:	d802      	bhi.n	80021a6 <HAL_RCC_ClockConfig+0x6e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021a0:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80021a4:	e001      	b.n	80021aa <HAL_RCC_ClockConfig+0x72>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021a6:	f012 0f02 	tst.w	r2, #2
 80021aa:	d0e1      	beq.n	8002170 <HAL_RCC_ClockConfig+0x38>
      {
        return HAL_ERROR;
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021ac:	4c31      	ldr	r4, [pc, #196]	; (8002274 <HAL_RCC_ClockConfig+0x13c>)
 80021ae:	68a2      	ldr	r2, [r4, #8]
 80021b0:	f022 0203 	bic.w	r2, r2, #3
 80021b4:	4313      	orrs	r3, r2
 80021b6:	60a3      	str	r3, [r4, #8]
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021b8:	f000 fa80 	bl	80026bc <HAL_GetTick>
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021bc:	686b      	ldr	r3, [r5, #4]
 80021be:	2b01      	cmp	r3, #1
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021c0:	4607      	mov	r7, r0
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021c2:	d10e      	bne.n	80021e2 <HAL_RCC_ClockConfig+0xaa>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021c4:	f241 3888 	movw	r8, #5000	; 0x1388
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80021c8:	68a3      	ldr	r3, [r4, #8]
 80021ca:	f003 030c 	and.w	r3, r3, #12
 80021ce:	2b04      	cmp	r3, #4
 80021d0:	d0d3      	beq.n	800217a <HAL_RCC_ClockConfig+0x42>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021d2:	f000 fa73 	bl	80026bc <HAL_GetTick>
 80021d6:	1bc0      	subs	r0, r0, r7
 80021d8:	4540      	cmp	r0, r8
 80021da:	d9f5      	bls.n	80021c8 <HAL_RCC_ClockConfig+0x90>
        {
          return HAL_TIMEOUT;
 80021dc:	2003      	movs	r0, #3
 80021de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d10c      	bne.n	8002200 <HAL_RCC_ClockConfig+0xc8>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021e6:	f241 3888 	movw	r8, #5000	; 0x1388
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021ea:	68a3      	ldr	r3, [r4, #8]
 80021ec:	f003 030c 	and.w	r3, r3, #12
 80021f0:	2b08      	cmp	r3, #8
 80021f2:	d0c2      	beq.n	800217a <HAL_RCC_ClockConfig+0x42>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021f4:	f000 fa62 	bl	80026bc <HAL_GetTick>
 80021f8:	1bc0      	subs	r0, r0, r7
 80021fa:	4540      	cmp	r0, r8
 80021fc:	d9f5      	bls.n	80021ea <HAL_RCC_ClockConfig+0xb2>
 80021fe:	e7ed      	b.n	80021dc <HAL_RCC_ClockConfig+0xa4>
        {
          return HAL_TIMEOUT;
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 8002200:	2b03      	cmp	r3, #3
 8002202:	d108      	bne.n	8002216 <HAL_RCC_ClockConfig+0xde>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002204:	f241 3588 	movw	r5, #5000	; 0x1388
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8002208:	68a3      	ldr	r3, [r4, #8]
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800220a:	f000 fa57 	bl	80026bc <HAL_GetTick>
 800220e:	1bc0      	subs	r0, r0, r7
 8002210:	42a8      	cmp	r0, r5
 8002212:	d9f9      	bls.n	8002208 <HAL_RCC_ClockConfig+0xd0>
 8002214:	e7e2      	b.n	80021dc <HAL_RCC_ClockConfig+0xa4>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002216:	f241 3888 	movw	r8, #5000	; 0x1388
        }
      }
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800221a:	68a3      	ldr	r3, [r4, #8]
 800221c:	f013 0f0c 	tst.w	r3, #12
 8002220:	d0ab      	beq.n	800217a <HAL_RCC_ClockConfig+0x42>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002222:	f000 fa4b 	bl	80026bc <HAL_GetTick>
 8002226:	1bc0      	subs	r0, r0, r7
 8002228:	4540      	cmp	r0, r8
 800222a:	d9f6      	bls.n	800221a <HAL_RCC_ClockConfig+0xe2>
 800222c:	e7d6      	b.n	80021dc <HAL_RCC_ClockConfig+0xa4>
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
  { 
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800222e:	b2f2      	uxtb	r2, r6
 8002230:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 030f 	and.w	r3, r3, #15
 8002238:	429e      	cmp	r6, r3
 800223a:	d199      	bne.n	8002170 <HAL_RCC_ClockConfig+0x38>
      return HAL_ERROR;
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800223c:	6829      	ldr	r1, [r5, #0]
 800223e:	074a      	lsls	r2, r1, #29
 8002240:	d506      	bpl.n	8002250 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002242:	480c      	ldr	r0, [pc, #48]	; (8002274 <HAL_RCC_ClockConfig+0x13c>)
 8002244:	6883      	ldr	r3, [r0, #8]
 8002246:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800224a:	68eb      	ldr	r3, [r5, #12]
 800224c:	4313      	orrs	r3, r2
 800224e:	6083      	str	r3, [r0, #8]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002250:	070b      	lsls	r3, r1, #28
 8002252:	d507      	bpl.n	8002264 <HAL_RCC_ClockConfig+0x12c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002254:	4a07      	ldr	r2, [pc, #28]	; (8002274 <HAL_RCC_ClockConfig+0x13c>)
 8002256:	6929      	ldr	r1, [r5, #16]
 8002258:	6893      	ldr	r3, [r2, #8]
 800225a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800225e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002262:	6093      	str	r3, [r2, #8]
  }

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002264:	2000      	movs	r0, #0
 8002266:	f000 f9f4 	bl	8002652 <HAL_InitTick>
  
  return HAL_OK;
 800226a:	2000      	movs	r0, #0
}
 800226c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002270:	40023c00 	.word	0x40023c00
 8002274:	40023800 	.word	0x40023800

08002278 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002278:	b508      	push	{r3, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 800227a:	f7ff fef5 	bl	8002068 <HAL_RCC_GetSysClockFreq>
 800227e:	4b08      	ldr	r3, [pc, #32]	; (80022a0 <HAL_RCC_GetHCLKFreq+0x28>)
 8002280:	22f0      	movs	r2, #240	; 0xf0
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	fa92 f2a2 	rbit	r2, r2
 8002288:	fab2 f282 	clz	r2, r2
 800228c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002290:	40d3      	lsrs	r3, r2
 8002292:	4a04      	ldr	r2, [pc, #16]	; (80022a4 <HAL_RCC_GetHCLKFreq+0x2c>)
 8002294:	5cd3      	ldrb	r3, [r2, r3]
 8002296:	40d8      	lsrs	r0, r3
 8002298:	4b03      	ldr	r3, [pc, #12]	; (80022a8 <HAL_RCC_GetHCLKFreq+0x30>)
 800229a:	6018      	str	r0, [r3, #0]
  return SystemCoreClock;
}
 800229c:	bd08      	pop	{r3, pc}
 800229e:	bf00      	nop
 80022a0:	40023800 	.word	0x40023800
 80022a4:	0800664c 	.word	0x0800664c
 80022a8:	20000000 	.word	0x20000000

080022ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
 80022ac:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 80022ae:	f7ff ffe3 	bl	8002278 <HAL_RCC_GetHCLKFreq>
 80022b2:	4b07      	ldr	r3, [pc, #28]	; (80022d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80022b4:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	fa92 f2a2 	rbit	r2, r2
 80022be:	fab2 f282 	clz	r2, r2
 80022c2:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80022c6:	40d3      	lsrs	r3, r2
 80022c8:	4a02      	ldr	r2, [pc, #8]	; (80022d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80022ca:	5cd3      	ldrb	r3, [r2, r3]
}
 80022cc:	40d8      	lsrs	r0, r3
 80022ce:	bd08      	pop	{r3, pc}
 80022d0:	40023800 	.word	0x40023800
 80022d4:	0800664c 	.word	0x0800664c

080022d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022d8:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 80022da:	f7ff ffcd 	bl	8002278 <HAL_RCC_GetHCLKFreq>
 80022de:	4b07      	ldr	r3, [pc, #28]	; (80022fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80022e0:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	fa92 f2a2 	rbit	r2, r2
 80022ea:	fab2 f282 	clz	r2, r2
 80022ee:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80022f2:	40d3      	lsrs	r3, r2
 80022f4:	4a02      	ldr	r2, [pc, #8]	; (8002300 <HAL_RCC_GetPCLK2Freq+0x28>)
 80022f6:	5cd3      	ldrb	r3, [r2, r3]
} 
 80022f8:	40d8      	lsrs	r0, r3
 80022fa:	bd08      	pop	{r3, pc}
 80022fc:	40023800 	.word	0x40023800
 8002300:	0800664c 	.word	0x0800664c

08002304 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002304:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 8002306:	2300      	movs	r3, #0
 8002308:	9301      	str	r3, [sp, #4]
 800230a:	4b22      	ldr	r3, [pc, #136]	; (8002394 <HAL_PWREx_EnableOverDrive+0x90>)
 800230c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800230e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002312:	641a      	str	r2, [r3, #64]	; 0x40
 8002314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002316:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800231a:	9301      	str	r3, [sp, #4]
 800231c:	9b01      	ldr	r3, [sp, #4]
 800231e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002322:	fa93 f3a3 	rbit	r3, r3
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002326:	fab3 f383 	clz	r3, r3
 800232a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800232e:	f503 3360 	add.w	r3, r3, #229376	; 0x38000
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	2201      	movs	r2, #1
 8002336:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002338:	f000 f9c0 	bl	80026bc <HAL_GetTick>

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800233c:	4c16      	ldr	r4, [pc, #88]	; (8002398 <HAL_PWREx_EnableOverDrive+0x94>)
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();

  /* Get tick */
  tickstart = HAL_GetTick();
 800233e:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002340:	6863      	ldr	r3, [r4, #4]
 8002342:	03da      	lsls	r2, r3, #15
 8002344:	d407      	bmi.n	8002356 <HAL_PWREx_EnableOverDrive+0x52>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002346:	f000 f9b9 	bl	80026bc <HAL_GetTick>
 800234a:	1b40      	subs	r0, r0, r5
 800234c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002350:	d9f6      	bls.n	8002340 <HAL_PWREx_EnableOverDrive+0x3c>
    {
      return HAL_TIMEOUT;
 8002352:	2003      	movs	r0, #3
 8002354:	e01b      	b.n	800238e <HAL_PWREx_EnableOverDrive+0x8a>
 8002356:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800235a:	fa93 f3a3 	rbit	r3, r3
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800235e:	fab3 f383 	clz	r3, r3
 8002362:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002366:	f503 3360 	add.w	r3, r3, #229376	; 0x38000
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	2201      	movs	r2, #1
 800236e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002370:	f000 f9a4 	bl	80026bc <HAL_GetTick>

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002374:	4c08      	ldr	r4, [pc, #32]	; (8002398 <HAL_PWREx_EnableOverDrive+0x94>)
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();

  /* Get tick */
  tickstart = HAL_GetTick();
 8002376:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002378:	6863      	ldr	r3, [r4, #4]
 800237a:	039b      	lsls	r3, r3, #14
 800237c:	d406      	bmi.n	800238c <HAL_PWREx_EnableOverDrive+0x88>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800237e:	f000 f99d 	bl	80026bc <HAL_GetTick>
 8002382:	1b40      	subs	r0, r0, r5
 8002384:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002388:	d9f6      	bls.n	8002378 <HAL_PWREx_EnableOverDrive+0x74>
 800238a:	e7e2      	b.n	8002352 <HAL_PWREx_EnableOverDrive+0x4e>
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 800238c:	2000      	movs	r0, #0
}
 800238e:	b003      	add	sp, #12
 8002390:	bd30      	pop	{r4, r5, pc}
 8002392:	bf00      	nop
 8002394:	40023800 	.word	0x40023800
 8002398:	40007000 	.word	0x40007000

0800239c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800239c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023a0:	4f67      	ldr	r7, [pc, #412]	; (8002540 <HAL_GPIO_Init+0x1a4>)
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023a2:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023a4:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 8002548 <HAL_GPIO_Init+0x1ac>

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023a8:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800254c <HAL_GPIO_Init+0x1b0>
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023ac:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023ae:	2200      	movs	r2, #0
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023b0:	9301      	str	r3, [sp, #4]
 80023b2:	46be      	mov	lr, r7

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
 80023b4:	2401      	movs	r4, #1
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if(iocurrent == ioposition)
 80023b6:	9b01      	ldr	r3, [sp, #4]

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
 80023b8:	4094      	lsls	r4, r2
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if(iocurrent == ioposition)
 80023ba:	ea34 0303 	bics.w	r3, r4, r3
 80023be:	f040 80b7 	bne.w	8002530 <HAL_GPIO_Init+0x194>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023c2:	684d      	ldr	r5, [r1, #4]
 80023c4:	f025 0a10 	bic.w	sl, r5, #16
 80023c8:	f1ba 0f02 	cmp.w	sl, #2
 80023cc:	d114      	bne.n	80023f8 <HAL_GPIO_Init+0x5c>
 80023ce:	ea4f 09d2 	mov.w	r9, r2, lsr #3
 80023d2:	eb00 0989 	add.w	r9, r0, r9, lsl #2
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 80023d6:	f002 0b07 	and.w	fp, r2, #7
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023da:	f8d9 6020 	ldr.w	r6, [r9, #32]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 80023de:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80023e2:	230f      	movs	r3, #15
 80023e4:	fa03 f30b 	lsl.w	r3, r3, fp
 80023e8:	ea26 0603 	bic.w	r6, r6, r3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80023ec:	690b      	ldr	r3, [r1, #16]
 80023ee:	fa03 f30b 	lsl.w	r3, r3, fp
 80023f2:	4333      	orrs	r3, r6
        GPIOx->AFR[position >> 3U] = temp;
 80023f4:	f8c9 3020 	str.w	r3, [r9, #32]
 80023f8:	ea4f 0b42 	mov.w	fp, r2, lsl #1
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023fc:	f04f 0903 	mov.w	r9, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002400:	6803      	ldr	r3, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002402:	fa09 f90b 	lsl.w	r9, r9, fp
 8002406:	ea6f 0909 	mvn.w	r9, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800240a:	f005 0603 	and.w	r6, r5, #3
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800240e:	ea03 0309 	and.w	r3, r3, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002412:	fa06 f60b 	lsl.w	r6, r6, fp
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002416:	f10a 3aff 	add.w	sl, sl, #4294967295
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800241a:	4333      	orrs	r3, r6
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800241c:	f1ba 0f01 	cmp.w	sl, #1

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
      GPIOx->MODER = temp;
 8002420:	6003      	str	r3, [r0, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002422:	d80f      	bhi.n	8002444 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002424:	6883      	ldr	r3, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002426:	68ce      	ldr	r6, [r1, #12]
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002428:	ea09 0303 	and.w	r3, r9, r3
        temp |= (GPIO_Init->Speed << (position * 2U));
 800242c:	fa06 f60b 	lsl.w	r6, r6, fp
 8002430:	431e      	orrs	r6, r3
        GPIOx->OSPEEDR = temp;
 8002432:	6086      	str	r6, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002434:	6843      	ldr	r3, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002436:	f3c5 1600 	ubfx	r6, r5, #4, #1
        temp |= (GPIO_Init->Speed << (position * 2U));
        GPIOx->OSPEEDR = temp;

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800243a:	ea23 0304 	bic.w	r3, r3, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800243e:	4096      	lsls	r6, r2
 8002440:	4333      	orrs	r3, r6
        GPIOx->OTYPER = temp;
 8002442:	6043      	str	r3, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002444:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002446:	ea09 0903 	and.w	r9, r9, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800244a:	688b      	ldr	r3, [r1, #8]
 800244c:	fa03 f30b 	lsl.w	r3, r3, fp
 8002450:	ea43 0309 	orr.w	r3, r3, r9
      GPIOx->PUPDR = temp;
 8002454:	60c3      	str	r3, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002456:	00eb      	lsls	r3, r5, #3
 8002458:	d56a      	bpl.n	8002530 <HAL_GPIO_Init+0x194>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800245a:	2300      	movs	r3, #0
 800245c:	9303      	str	r3, [sp, #12]
 800245e:	f8dc 6044 	ldr.w	r6, [ip, #68]	; 0x44

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002462:	4b38      	ldr	r3, [pc, #224]	; (8002544 <HAL_GPIO_Init+0x1a8>)
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002464:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8002468:	f8cc 6044 	str.w	r6, [ip, #68]	; 0x44
 800246c:	f8dc 6044 	ldr.w	r6, [ip, #68]	; 0x44
 8002470:	f022 0903 	bic.w	r9, r2, #3
 8002474:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
 8002478:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 800247c:	f509 399c 	add.w	r9, r9, #79872	; 0x13800
 8002480:	9603      	str	r6, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8002482:	f002 0a03 	and.w	sl, r2, #3
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002486:	9e03      	ldr	r6, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002488:	f8d9 b008 	ldr.w	fp, [r9, #8]
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 800248c:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8002490:	260f      	movs	r6, #15
 8002492:	fa06 f60a 	lsl.w	r6, r6, sl
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002496:	4298      	cmp	r0, r3
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8002498:	ea2b 0606 	bic.w	r6, fp, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800249c:	d018      	beq.n	80024d0 <HAL_GPIO_Init+0x134>
 800249e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024a2:	4298      	cmp	r0, r3
 80024a4:	d016      	beq.n	80024d4 <HAL_GPIO_Init+0x138>
 80024a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024aa:	4298      	cmp	r0, r3
 80024ac:	d014      	beq.n	80024d8 <HAL_GPIO_Init+0x13c>
 80024ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024b2:	4298      	cmp	r0, r3
 80024b4:	d012      	beq.n	80024dc <HAL_GPIO_Init+0x140>
 80024b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024ba:	4298      	cmp	r0, r3
 80024bc:	d010      	beq.n	80024e0 <HAL_GPIO_Init+0x144>
 80024be:	4540      	cmp	r0, r8
 80024c0:	d010      	beq.n	80024e4 <HAL_GPIO_Init+0x148>
 80024c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024c6:	4298      	cmp	r0, r3
 80024c8:	bf14      	ite	ne
 80024ca:	2308      	movne	r3, #8
 80024cc:	2306      	moveq	r3, #6
 80024ce:	e00a      	b.n	80024e6 <HAL_GPIO_Init+0x14a>
 80024d0:	2300      	movs	r3, #0
 80024d2:	e008      	b.n	80024e6 <HAL_GPIO_Init+0x14a>
 80024d4:	2301      	movs	r3, #1
 80024d6:	e006      	b.n	80024e6 <HAL_GPIO_Init+0x14a>
 80024d8:	2302      	movs	r3, #2
 80024da:	e004      	b.n	80024e6 <HAL_GPIO_Init+0x14a>
 80024dc:	2303      	movs	r3, #3
 80024de:	e002      	b.n	80024e6 <HAL_GPIO_Init+0x14a>
 80024e0:	2304      	movs	r3, #4
 80024e2:	e000      	b.n	80024e6 <HAL_GPIO_Init+0x14a>
 80024e4:	2305      	movs	r3, #5
 80024e6:	fa03 f30a 	lsl.w	r3, r3, sl
 80024ea:	4333      	orrs	r3, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024ec:	f8c9 3008 	str.w	r3, [r9, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024f0:	683b      	ldr	r3, [r7, #0]
        temp &= ~((uint32_t)iocurrent);
 80024f2:	43e6      	mvns	r6, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024f4:	f415 3f80 	tst.w	r5, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
 80024f8:	bf0c      	ite	eq
 80024fa:	4033      	andeq	r3, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
 80024fc:	4323      	orrne	r3, r4
        }
        EXTI->IMR = temp;
 80024fe:	f8ce 3000 	str.w	r3, [lr]

        temp = EXTI->EMR;
 8002502:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002506:	f415 3f00 	tst.w	r5, #131072	; 0x20000
          temp |= iocurrent;
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
 800250a:	bf0c      	ite	eq
 800250c:	4033      	andeq	r3, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
 800250e:	4323      	orrne	r3, r4
        }
        EXTI->EMR = temp;
 8002510:	607b      	str	r3, [r7, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002512:	68bb      	ldr	r3, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002514:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        }
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
 8002518:	bf0c      	ite	eq
 800251a:	4033      	andeq	r3, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
 800251c:	4323      	orrne	r3, r4
        }
        EXTI->RTSR = temp;
 800251e:	f8ce 3008 	str.w	r3, [lr, #8]

        temp = EXTI->FTSR;
 8002522:	f8de 300c 	ldr.w	r3, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002526:	02ad      	lsls	r5, r5, #10
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
 8002528:	bf54      	ite	pl
 800252a:	4033      	andpl	r3, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          temp |= iocurrent;
 800252c:	4323      	orrmi	r3, r4
        }
        EXTI->FTSR = temp;
 800252e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002530:	3201      	adds	r2, #1
 8002532:	2a10      	cmp	r2, #16
 8002534:	f47f af3e 	bne.w	80023b4 <HAL_GPIO_Init+0x18>
        }
        EXTI->FTSR = temp;
      }
    }
  }
}
 8002538:	b005      	add	sp, #20
 800253a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800253e:	bf00      	nop
 8002540:	40013c00 	.word	0x40013c00
 8002544:	40020000 	.word	0x40020000
 8002548:	40023800 	.word	0x40023800
 800254c:	40021400 	.word	0x40021400

08002550 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002550:	b902      	cbnz	r2, 8002554 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002552:	0409      	lsls	r1, r1, #16
 8002554:	6181      	str	r1, [r0, #24]
 8002556:	4770      	bx	lr

08002558 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8002558:	6943      	ldr	r3, [r0, #20]
 800255a:	4059      	eors	r1, r3
 800255c:	6141      	str	r1, [r0, #20]
 800255e:	4770      	bx	lr

08002560 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002560:	4a07      	ldr	r2, [pc, #28]	; (8002580 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002562:	68d3      	ldr	r3, [r2, #12]
 8002564:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002568:	041b      	lsls	r3, r3, #16
 800256a:	0c1b      	lsrs	r3, r3, #16
 800256c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8002570:	0200      	lsls	r0, r0, #8
 8002572:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002576:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 800257a:	4303      	orrs	r3, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 800257c:	60d3      	str	r3, [r2, #12]
 800257e:	4770      	bx	lr
 8002580:	e000ed00 	.word	0xe000ed00

08002584 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002584:	4b17      	ldr	r3, [pc, #92]	; (80025e4 <HAL_NVIC_SetPriority+0x60>)
 8002586:	68db      	ldr	r3, [r3, #12]
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002588:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800258c:	b530      	push	{r4, r5, lr}
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800258e:	f1c3 0407 	rsb	r4, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002592:	1d1d      	adds	r5, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002594:	2c04      	cmp	r4, #4
 8002596:	bf28      	it	cs
 8002598:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800259a:	2d06      	cmp	r5, #6

  return (
 800259c:	f04f 0501 	mov.w	r5, #1
 80025a0:	fa05 f404 	lsl.w	r4, r5, r4
 80025a4:	f104 34ff 	add.w	r4, r4, #4294967295
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025a8:	bf8c      	ite	hi
 80025aa:	3b03      	subhi	r3, #3
 80025ac:	2300      	movls	r3, #0

  return (
 80025ae:	400c      	ands	r4, r1
 80025b0:	409c      	lsls	r4, r3
 80025b2:	fa05 f303 	lsl.w	r3, r5, r3
 80025b6:	3b01      	subs	r3, #1
 80025b8:	401a      	ands	r2, r3
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 80025ba:	2800      	cmp	r0, #0
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 80025bc:	ea42 0204 	orr.w	r2, r2, r4
 80025c0:	ea4f 1202 	mov.w	r2, r2, lsl #4
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025c4:	bfaf      	iteee	ge
 80025c6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025ca:	f000 000f 	andlt.w	r0, r0, #15
 80025ce:	4b06      	ldrlt	r3, [pc, #24]	; (80025e8 <HAL_NVIC_SetPriority+0x64>)
 80025d0:	b2d2      	uxtblt	r2, r2
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025d2:	bfa5      	ittet	ge
 80025d4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80025d8:	b2d2      	uxtbge	r2, r2
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025da:	541a      	strblt	r2, [r3, r0]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025dc:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80025e0:	bd30      	pop	{r4, r5, pc}
 80025e2:	bf00      	nop
 80025e4:	e000ed00 	.word	0xe000ed00
 80025e8:	e000ed14 	.word	0xe000ed14

080025ec <HAL_NVIC_EnableIRQ>:
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80025ec:	0942      	lsrs	r2, r0, #5
 80025ee:	2301      	movs	r3, #1
 80025f0:	f000 001f 	and.w	r0, r0, #31
 80025f4:	fa03 f000 	lsl.w	r0, r3, r0
 80025f8:	4b01      	ldr	r3, [pc, #4]	; (8002600 <HAL_NVIC_EnableIRQ+0x14>)
 80025fa:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80025fe:	4770      	bx	lr
 8002600:	e000e100 	.word	0xe000e100

08002604 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002604:	3801      	subs	r0, #1
 8002606:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800260a:	d20a      	bcs.n	8002622 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800260c:	4b06      	ldr	r3, [pc, #24]	; (8002628 <HAL_SYSTICK_Config+0x24>)
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800260e:	4a07      	ldr	r2, [pc, #28]	; (800262c <HAL_SYSTICK_Config+0x28>)
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002610:	6058      	str	r0, [r3, #4]
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002612:	21f0      	movs	r1, #240	; 0xf0
 8002614:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002618:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800261a:	2207      	movs	r2, #7
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800261c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800261e:	601a      	str	r2, [r3, #0]
 8002620:	4770      	bx	lr
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
 8002622:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	e000e010 	.word	0xe000e010
 800262c:	e000ed00 	.word	0xe000ed00

08002630 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8002630:	4b04      	ldr	r3, [pc, #16]	; (8002644 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8002632:	681a      	ldr	r2, [r3, #0]
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8002634:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8002636:	bf0c      	ite	eq
 8002638:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800263c:	f022 0204 	bicne.w	r2, r2, #4
 8002640:	601a      	str	r2, [r3, #0]
 8002642:	4770      	bx	lr
 8002644:	e000e010 	.word	0xe000e010

08002648 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8002648:	4770      	bx	lr

0800264a <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800264a:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 800264c:	f7ff fffc 	bl	8002648 <HAL_SYSTICK_Callback>
 8002650:	bd08      	pop	{r3, pc}

08002652 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002652:	b510      	push	{r4, lr}
 8002654:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8002656:	f7ff fe0f 	bl	8002278 <HAL_RCC_GetHCLKFreq>
 800265a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800265e:	fbb0 f0f3 	udiv	r0, r0, r3
 8002662:	f7ff ffcf 	bl	8002604 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8002666:	2200      	movs	r2, #0
 8002668:	4621      	mov	r1, r4
 800266a:	f04f 30ff 	mov.w	r0, #4294967295
 800266e:	f7ff ff89 	bl	8002584 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8002672:	2000      	movs	r0, #0
 8002674:	bd10      	pop	{r4, pc}
	...

08002678 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002678:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800267a:	4b0b      	ldr	r3, [pc, #44]	; (80026a8 <HAL_Init+0x30>)
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002682:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800268a:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002692:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002694:	2003      	movs	r0, #3
 8002696:	f7ff ff63 	bl	8002560 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800269a:	2000      	movs	r0, #0
 800269c:	f7ff ffd9 	bl	8002652 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80026a0:	f7fe fc4a 	bl	8000f38 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 80026a4:	2000      	movs	r0, #0
 80026a6:	bd08      	pop	{r3, pc}
 80026a8:	40023c00 	.word	0x40023c00

080026ac <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80026ac:	4a02      	ldr	r2, [pc, #8]	; (80026b8 <HAL_IncTick+0xc>)
 80026ae:	6813      	ldr	r3, [r2, #0]
 80026b0:	3301      	adds	r3, #1
 80026b2:	6013      	str	r3, [r2, #0]
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	2000068c 	.word	0x2000068c

080026bc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80026bc:	4b01      	ldr	r3, [pc, #4]	; (80026c4 <HAL_GetTick+0x8>)
 80026be:	6818      	ldr	r0, [r3, #0]
}
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	2000068c 	.word	0x2000068c

080026c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80026c8:	b513      	push	{r0, r1, r4, lr}
 80026ca:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0U;
  tickstart = HAL_GetTick();
 80026cc:	f7ff fff6 	bl	80026bc <HAL_GetTick>
 80026d0:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 80026d2:	f7ff fff3 	bl	80026bc <HAL_GetTick>
 80026d6:	9b01      	ldr	r3, [sp, #4]
 80026d8:	1b00      	subs	r0, r0, r4
 80026da:	4298      	cmp	r0, r3
 80026dc:	d3f9      	bcc.n	80026d2 <HAL_Delay+0xa>
  {
  }
}
 80026de:	b002      	add	sp, #8
 80026e0:	bd10      	pop	{r4, pc}
	...

080026e4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80026e4:	490f      	ldr	r1, [pc, #60]	; (8002724 <SystemInit+0x40>)
 80026e6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80026ea:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80026f2:	4b0d      	ldr	r3, [pc, #52]	; (8002728 <SystemInit+0x44>)
 80026f4:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80026f6:	2000      	movs	r0, #0
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80026f8:	f042 0201 	orr.w	r2, r2, #1
 80026fc:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80026fe:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002706:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800270a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800270c:	4a07      	ldr	r2, [pc, #28]	; (800272c <SystemInit+0x48>)
 800270e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002716:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002718:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800271a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800271e:	608b      	str	r3, [r1, #8]
 8002720:	4770      	bx	lr
 8002722:	bf00      	nop
 8002724:	e000ed00 	.word	0xe000ed00
 8002728:	40023800 	.word	0x40023800
 800272c:	24003010 	.word	0x24003010

08002730 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002730:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002768 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002734:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002736:	e003      	b.n	8002740 <LoopCopyDataInit>

08002738 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002738:	4b0c      	ldr	r3, [pc, #48]	; (800276c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800273a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800273c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800273e:	3104      	adds	r1, #4

08002740 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002740:	480b      	ldr	r0, [pc, #44]	; (8002770 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002742:	4b0c      	ldr	r3, [pc, #48]	; (8002774 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002744:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002746:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002748:	d3f6      	bcc.n	8002738 <CopyDataInit>
  ldr  r2, =_sbss
 800274a:	4a0b      	ldr	r2, [pc, #44]	; (8002778 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800274c:	e002      	b.n	8002754 <LoopFillZerobss>

0800274e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800274e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002750:	f842 3b04 	str.w	r3, [r2], #4

08002754 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002754:	4b09      	ldr	r3, [pc, #36]	; (800277c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002756:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002758:	d3f9      	bcc.n	800274e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800275a:	f7ff ffc3 	bl	80026e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800275e:	f000 f811 	bl	8002784 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002762:	f7fe fcfd 	bl	8001160 <main>
  bx  lr    
 8002766:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002768:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 800276c:	080069b0 	.word	0x080069b0
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002770:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002774:	20000540 	.word	0x20000540
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8002778:	20000540 	.word	0x20000540
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800277c:	20000694 	.word	0x20000694

08002780 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002780:	e7fe      	b.n	8002780 <ADC_IRQHandler>
	...

08002784 <__libc_init_array>:
 8002784:	b570      	push	{r4, r5, r6, lr}
 8002786:	4b0e      	ldr	r3, [pc, #56]	; (80027c0 <__libc_init_array+0x3c>)
 8002788:	4c0e      	ldr	r4, [pc, #56]	; (80027c4 <__libc_init_array+0x40>)
 800278a:	1ae4      	subs	r4, r4, r3
 800278c:	10a4      	asrs	r4, r4, #2
 800278e:	2500      	movs	r5, #0
 8002790:	461e      	mov	r6, r3
 8002792:	42a5      	cmp	r5, r4
 8002794:	d004      	beq.n	80027a0 <__libc_init_array+0x1c>
 8002796:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800279a:	4798      	blx	r3
 800279c:	3501      	adds	r5, #1
 800279e:	e7f8      	b.n	8002792 <__libc_init_array+0xe>
 80027a0:	f003 ff38 	bl	8006614 <_init>
 80027a4:	4c08      	ldr	r4, [pc, #32]	; (80027c8 <__libc_init_array+0x44>)
 80027a6:	4b09      	ldr	r3, [pc, #36]	; (80027cc <__libc_init_array+0x48>)
 80027a8:	1ae4      	subs	r4, r4, r3
 80027aa:	10a4      	asrs	r4, r4, #2
 80027ac:	2500      	movs	r5, #0
 80027ae:	461e      	mov	r6, r3
 80027b0:	42a5      	cmp	r5, r4
 80027b2:	d004      	beq.n	80027be <__libc_init_array+0x3a>
 80027b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80027b8:	4798      	blx	r3
 80027ba:	3501      	adds	r5, #1
 80027bc:	e7f8      	b.n	80027b0 <__libc_init_array+0x2c>
 80027be:	bd70      	pop	{r4, r5, r6, pc}
 80027c0:	080069a8 	.word	0x080069a8
 80027c4:	080069a8 	.word	0x080069a8
 80027c8:	080069ac 	.word	0x080069ac
 80027cc:	080069a8 	.word	0x080069a8

080027d0 <sprintf>:
 80027d0:	b40e      	push	{r1, r2, r3}
 80027d2:	b500      	push	{lr}
 80027d4:	b09c      	sub	sp, #112	; 0x70
 80027d6:	f44f 7102 	mov.w	r1, #520	; 0x208
 80027da:	ab1d      	add	r3, sp, #116	; 0x74
 80027dc:	f8ad 1014 	strh.w	r1, [sp, #20]
 80027e0:	9002      	str	r0, [sp, #8]
 80027e2:	9006      	str	r0, [sp, #24]
 80027e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80027e8:	480a      	ldr	r0, [pc, #40]	; (8002814 <sprintf+0x44>)
 80027ea:	9104      	str	r1, [sp, #16]
 80027ec:	9107      	str	r1, [sp, #28]
 80027ee:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80027f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80027f6:	f8ad 1016 	strh.w	r1, [sp, #22]
 80027fa:	6800      	ldr	r0, [r0, #0]
 80027fc:	9301      	str	r3, [sp, #4]
 80027fe:	a902      	add	r1, sp, #8
 8002800:	f000 f80a 	bl	8002818 <_svfprintf_r>
 8002804:	9b02      	ldr	r3, [sp, #8]
 8002806:	2200      	movs	r2, #0
 8002808:	701a      	strb	r2, [r3, #0]
 800280a:	b01c      	add	sp, #112	; 0x70
 800280c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002810:	b003      	add	sp, #12
 8002812:	4770      	bx	lr
 8002814:	200000f4 	.word	0x200000f4

08002818 <_svfprintf_r>:
 8002818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800281c:	b0bd      	sub	sp, #244	; 0xf4
 800281e:	468b      	mov	fp, r1
 8002820:	9205      	str	r2, [sp, #20]
 8002822:	461f      	mov	r7, r3
 8002824:	4682      	mov	sl, r0
 8002826:	f001 fdeb 	bl	8004400 <_localeconv_r>
 800282a:	6803      	ldr	r3, [r0, #0]
 800282c:	930d      	str	r3, [sp, #52]	; 0x34
 800282e:	4618      	mov	r0, r3
 8002830:	f7fd fd3e 	bl	80002b0 <strlen>
 8002834:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8002838:	9008      	str	r0, [sp, #32]
 800283a:	0619      	lsls	r1, r3, #24
 800283c:	d515      	bpl.n	800286a <_svfprintf_r+0x52>
 800283e:	f8db 3010 	ldr.w	r3, [fp, #16]
 8002842:	b993      	cbnz	r3, 800286a <_svfprintf_r+0x52>
 8002844:	2140      	movs	r1, #64	; 0x40
 8002846:	4650      	mov	r0, sl
 8002848:	f001 fde6 	bl	8004418 <_malloc_r>
 800284c:	f8cb 0000 	str.w	r0, [fp]
 8002850:	f8cb 0010 	str.w	r0, [fp, #16]
 8002854:	b930      	cbnz	r0, 8002864 <_svfprintf_r+0x4c>
 8002856:	230c      	movs	r3, #12
 8002858:	f8ca 3000 	str.w	r3, [sl]
 800285c:	f04f 30ff 	mov.w	r0, #4294967295
 8002860:	f000 bf95 	b.w	800378e <_svfprintf_r+0xf76>
 8002864:	2340      	movs	r3, #64	; 0x40
 8002866:	f8cb 3014 	str.w	r3, [fp, #20]
 800286a:	ed9f 7b99 	vldr	d7, [pc, #612]	; 8002ad0 <_svfprintf_r+0x2b8>
 800286e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002872:	2300      	movs	r3, #0
 8002874:	ac2c      	add	r4, sp, #176	; 0xb0
 8002876:	941f      	str	r4, [sp, #124]	; 0x7c
 8002878:	9321      	str	r3, [sp, #132]	; 0x84
 800287a:	9320      	str	r3, [sp, #128]	; 0x80
 800287c:	9304      	str	r3, [sp, #16]
 800287e:	9311      	str	r3, [sp, #68]	; 0x44
 8002880:	9310      	str	r3, [sp, #64]	; 0x40
 8002882:	930a      	str	r3, [sp, #40]	; 0x28
 8002884:	9d05      	ldr	r5, [sp, #20]
 8002886:	462b      	mov	r3, r5
 8002888:	f813 2b01 	ldrb.w	r2, [r3], #1
 800288c:	b11a      	cbz	r2, 8002896 <_svfprintf_r+0x7e>
 800288e:	2a25      	cmp	r2, #37	; 0x25
 8002890:	d001      	beq.n	8002896 <_svfprintf_r+0x7e>
 8002892:	461d      	mov	r5, r3
 8002894:	e7f7      	b.n	8002886 <_svfprintf_r+0x6e>
 8002896:	9b05      	ldr	r3, [sp, #20]
 8002898:	1aee      	subs	r6, r5, r3
 800289a:	d017      	beq.n	80028cc <_svfprintf_r+0xb4>
 800289c:	e884 0048 	stmia.w	r4, {r3, r6}
 80028a0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80028a2:	4433      	add	r3, r6
 80028a4:	9321      	str	r3, [sp, #132]	; 0x84
 80028a6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80028a8:	3301      	adds	r3, #1
 80028aa:	2b07      	cmp	r3, #7
 80028ac:	9320      	str	r3, [sp, #128]	; 0x80
 80028ae:	dc01      	bgt.n	80028b4 <_svfprintf_r+0x9c>
 80028b0:	3408      	adds	r4, #8
 80028b2:	e008      	b.n	80028c6 <_svfprintf_r+0xae>
 80028b4:	aa1f      	add	r2, sp, #124	; 0x7c
 80028b6:	4659      	mov	r1, fp
 80028b8:	4650      	mov	r0, sl
 80028ba:	f002 fac1 	bl	8004e40 <__ssprint_r>
 80028be:	2800      	cmp	r0, #0
 80028c0:	f040 862c 	bne.w	800351c <_svfprintf_r+0xd04>
 80028c4:	ac2c      	add	r4, sp, #176	; 0xb0
 80028c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80028c8:	4433      	add	r3, r6
 80028ca:	930a      	str	r3, [sp, #40]	; 0x28
 80028cc:	782b      	ldrb	r3, [r5, #0]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	f000 861d 	beq.w	800350e <_svfprintf_r+0xcf6>
 80028d4:	2200      	movs	r2, #0
 80028d6:	1c6b      	adds	r3, r5, #1
 80028d8:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80028dc:	4611      	mov	r1, r2
 80028de:	f04f 39ff 	mov.w	r9, #4294967295
 80028e2:	9209      	str	r2, [sp, #36]	; 0x24
 80028e4:	4615      	mov	r5, r2
 80028e6:	200a      	movs	r0, #10
 80028e8:	1c5e      	adds	r6, r3, #1
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	9605      	str	r6, [sp, #20]
 80028ee:	9302      	str	r3, [sp, #8]
 80028f0:	9b02      	ldr	r3, [sp, #8]
 80028f2:	3b20      	subs	r3, #32
 80028f4:	2b58      	cmp	r3, #88	; 0x58
 80028f6:	f200 8263 	bhi.w	8002dc0 <_svfprintf_r+0x5a8>
 80028fa:	e8df f013 	tbh	[pc, r3, lsl #1]
 80028fe:	005c      	.short	0x005c
 8002900:	02610261 	.word	0x02610261
 8002904:	0261006b 	.word	0x0261006b
 8002908:	02610261 	.word	0x02610261
 800290c:	02610261 	.word	0x02610261
 8002910:	006e0261 	.word	0x006e0261
 8002914:	02610059 	.word	0x02610059
 8002918:	007c0079 	.word	0x007c0079
 800291c:	00a30261 	.word	0x00a30261
 8002920:	00a600a6 	.word	0x00a600a6
 8002924:	00a600a6 	.word	0x00a600a6
 8002928:	00a600a6 	.word	0x00a600a6
 800292c:	00a600a6 	.word	0x00a600a6
 8002930:	026100a6 	.word	0x026100a6
 8002934:	02610261 	.word	0x02610261
 8002938:	02610261 	.word	0x02610261
 800293c:	02610261 	.word	0x02610261
 8002940:	02610261 	.word	0x02610261
 8002944:	00d60261 	.word	0x00d60261
 8002948:	0261010b 	.word	0x0261010b
 800294c:	0261010b 	.word	0x0261010b
 8002950:	02610261 	.word	0x02610261
 8002954:	00b90261 	.word	0x00b90261
 8002958:	02610261 	.word	0x02610261
 800295c:	02610152 	.word	0x02610152
 8002960:	02610261 	.word	0x02610261
 8002964:	02610261 	.word	0x02610261
 8002968:	02610199 	.word	0x02610199
 800296c:	00660261 	.word	0x00660261
 8002970:	02610261 	.word	0x02610261
 8002974:	02610261 	.word	0x02610261
 8002978:	02610261 	.word	0x02610261
 800297c:	02610261 	.word	0x02610261
 8002980:	02610261 	.word	0x02610261
 8002984:	006100cd 	.word	0x006100cd
 8002988:	010b010b 	.word	0x010b010b
 800298c:	00bc010b 	.word	0x00bc010b
 8002990:	02610061 	.word	0x02610061
 8002994:	00bf0261 	.word	0x00bf0261
 8002998:	01340261 	.word	0x01340261
 800299c:	016f0154 	.word	0x016f0154
 80029a0:	026100ca 	.word	0x026100ca
 80029a4:	02610180 	.word	0x02610180
 80029a8:	0261019b 	.word	0x0261019b
 80029ac:	01b30261 	.word	0x01b30261
 80029b0:	2201      	movs	r2, #1
 80029b2:	212b      	movs	r1, #43	; 0x2b
 80029b4:	e002      	b.n	80029bc <_svfprintf_r+0x1a4>
 80029b6:	b909      	cbnz	r1, 80029bc <_svfprintf_r+0x1a4>
 80029b8:	2201      	movs	r2, #1
 80029ba:	2120      	movs	r1, #32
 80029bc:	9b05      	ldr	r3, [sp, #20]
 80029be:	e793      	b.n	80028e8 <_svfprintf_r+0xd0>
 80029c0:	2a00      	cmp	r2, #0
 80029c2:	d077      	beq.n	8002ab4 <_svfprintf_r+0x29c>
 80029c4:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 80029c8:	e074      	b.n	8002ab4 <_svfprintf_r+0x29c>
 80029ca:	b10a      	cbz	r2, 80029d0 <_svfprintf_r+0x1b8>
 80029cc:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 80029d0:	4b41      	ldr	r3, [pc, #260]	; (8002ad8 <_svfprintf_r+0x2c0>)
 80029d2:	e14b      	b.n	8002c6c <_svfprintf_r+0x454>
 80029d4:	f045 0501 	orr.w	r5, r5, #1
 80029d8:	e7f0      	b.n	80029bc <_svfprintf_r+0x1a4>
 80029da:	683e      	ldr	r6, [r7, #0]
 80029dc:	9609      	str	r6, [sp, #36]	; 0x24
 80029de:	2e00      	cmp	r6, #0
 80029e0:	f107 0304 	add.w	r3, r7, #4
 80029e4:	db01      	blt.n	80029ea <_svfprintf_r+0x1d2>
 80029e6:	461f      	mov	r7, r3
 80029e8:	e7e8      	b.n	80029bc <_svfprintf_r+0x1a4>
 80029ea:	4276      	negs	r6, r6
 80029ec:	9609      	str	r6, [sp, #36]	; 0x24
 80029ee:	461f      	mov	r7, r3
 80029f0:	f045 0504 	orr.w	r5, r5, #4
 80029f4:	e7e2      	b.n	80029bc <_svfprintf_r+0x1a4>
 80029f6:	9e05      	ldr	r6, [sp, #20]
 80029f8:	9b05      	ldr	r3, [sp, #20]
 80029fa:	7836      	ldrb	r6, [r6, #0]
 80029fc:	9602      	str	r6, [sp, #8]
 80029fe:	2e2a      	cmp	r6, #42	; 0x2a
 8002a00:	f103 0301 	add.w	r3, r3, #1
 8002a04:	d002      	beq.n	8002a0c <_svfprintf_r+0x1f4>
 8002a06:	f04f 0900 	mov.w	r9, #0
 8002a0a:	e00a      	b.n	8002a22 <_svfprintf_r+0x20a>
 8002a0c:	f8d7 9000 	ldr.w	r9, [r7]
 8002a10:	9305      	str	r3, [sp, #20]
 8002a12:	1d3e      	adds	r6, r7, #4
 8002a14:	f1b9 0f00 	cmp.w	r9, #0
 8002a18:	4637      	mov	r7, r6
 8002a1a:	dacf      	bge.n	80029bc <_svfprintf_r+0x1a4>
 8002a1c:	f04f 39ff 	mov.w	r9, #4294967295
 8002a20:	e7cc      	b.n	80029bc <_svfprintf_r+0x1a4>
 8002a22:	9305      	str	r3, [sp, #20]
 8002a24:	9b02      	ldr	r3, [sp, #8]
 8002a26:	3b30      	subs	r3, #48	; 0x30
 8002a28:	2b09      	cmp	r3, #9
 8002a2a:	d808      	bhi.n	8002a3e <_svfprintf_r+0x226>
 8002a2c:	fb00 3909 	mla	r9, r0, r9, r3
 8002a30:	9b05      	ldr	r3, [sp, #20]
 8002a32:	461e      	mov	r6, r3
 8002a34:	f816 3b01 	ldrb.w	r3, [r6], #1
 8002a38:	9302      	str	r3, [sp, #8]
 8002a3a:	4633      	mov	r3, r6
 8002a3c:	e7f1      	b.n	8002a22 <_svfprintf_r+0x20a>
 8002a3e:	ea49 79e9 	orr.w	r9, r9, r9, asr #31
 8002a42:	e755      	b.n	80028f0 <_svfprintf_r+0xd8>
 8002a44:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8002a48:	e7b8      	b.n	80029bc <_svfprintf_r+0x1a4>
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	9309      	str	r3, [sp, #36]	; 0x24
 8002a4e:	9b02      	ldr	r3, [sp, #8]
 8002a50:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8002a52:	3b30      	subs	r3, #48	; 0x30
 8002a54:	fb00 3306 	mla	r3, r0, r6, r3
 8002a58:	9309      	str	r3, [sp, #36]	; 0x24
 8002a5a:	9b05      	ldr	r3, [sp, #20]
 8002a5c:	461e      	mov	r6, r3
 8002a5e:	f816 3b01 	ldrb.w	r3, [r6], #1
 8002a62:	9302      	str	r3, [sp, #8]
 8002a64:	9b02      	ldr	r3, [sp, #8]
 8002a66:	9605      	str	r6, [sp, #20]
 8002a68:	3b30      	subs	r3, #48	; 0x30
 8002a6a:	2b09      	cmp	r3, #9
 8002a6c:	d9ef      	bls.n	8002a4e <_svfprintf_r+0x236>
 8002a6e:	e73f      	b.n	80028f0 <_svfprintf_r+0xd8>
 8002a70:	f045 0508 	orr.w	r5, r5, #8
 8002a74:	e7a2      	b.n	80029bc <_svfprintf_r+0x1a4>
 8002a76:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 8002a7a:	e79f      	b.n	80029bc <_svfprintf_r+0x1a4>
 8002a7c:	9b05      	ldr	r3, [sp, #20]
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	2b6c      	cmp	r3, #108	; 0x6c
 8002a82:	d103      	bne.n	8002a8c <_svfprintf_r+0x274>
 8002a84:	9b05      	ldr	r3, [sp, #20]
 8002a86:	3301      	adds	r3, #1
 8002a88:	9305      	str	r3, [sp, #20]
 8002a8a:	e002      	b.n	8002a92 <_svfprintf_r+0x27a>
 8002a8c:	f045 0510 	orr.w	r5, r5, #16
 8002a90:	e794      	b.n	80029bc <_svfprintf_r+0x1a4>
 8002a92:	f045 0520 	orr.w	r5, r5, #32
 8002a96:	e791      	b.n	80029bc <_svfprintf_r+0x1a4>
 8002a98:	1d3b      	adds	r3, r7, #4
 8002a9a:	9303      	str	r3, [sp, #12]
 8002a9c:	2600      	movs	r6, #0
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 8002aa4:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8002aa8:	e199      	b.n	8002dde <_svfprintf_r+0x5c6>
 8002aaa:	b10a      	cbz	r2, 8002ab0 <_svfprintf_r+0x298>
 8002aac:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8002ab0:	f045 0510 	orr.w	r5, r5, #16
 8002ab4:	06aa      	lsls	r2, r5, #26
 8002ab6:	d511      	bpl.n	8002adc <_svfprintf_r+0x2c4>
 8002ab8:	3707      	adds	r7, #7
 8002aba:	f027 0707 	bic.w	r7, r7, #7
 8002abe:	f107 0308 	add.w	r3, r7, #8
 8002ac2:	9303      	str	r3, [sp, #12]
 8002ac4:	e9d7 6700 	ldrd	r6, r7, [r7]
 8002ac8:	e017      	b.n	8002afa <_svfprintf_r+0x2e2>
 8002aca:	bf00      	nop
 8002acc:	f3af 8000 	nop.w
	...
 8002ad8:	0800667c 	.word	0x0800667c
 8002adc:	f015 0f10 	tst.w	r5, #16
 8002ae0:	f107 0304 	add.w	r3, r7, #4
 8002ae4:	d002      	beq.n	8002aec <_svfprintf_r+0x2d4>
 8002ae6:	9303      	str	r3, [sp, #12]
 8002ae8:	683e      	ldr	r6, [r7, #0]
 8002aea:	e005      	b.n	8002af8 <_svfprintf_r+0x2e0>
 8002aec:	683e      	ldr	r6, [r7, #0]
 8002aee:	9303      	str	r3, [sp, #12]
 8002af0:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002af4:	bf18      	it	ne
 8002af6:	b236      	sxthne	r6, r6
 8002af8:	17f7      	asrs	r7, r6, #31
 8002afa:	2e00      	cmp	r6, #0
 8002afc:	f177 0300 	sbcs.w	r3, r7, #0
 8002b00:	f280 80de 	bge.w	8002cc0 <_svfprintf_r+0x4a8>
 8002b04:	4276      	negs	r6, r6
 8002b06:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8002b0a:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8002b0e:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8002b12:	e0d5      	b.n	8002cc0 <_svfprintf_r+0x4a8>
 8002b14:	b10a      	cbz	r2, 8002b1a <_svfprintf_r+0x302>
 8002b16:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8002b1a:	3707      	adds	r7, #7
 8002b1c:	f027 0707 	bic.w	r7, r7, #7
 8002b20:	f107 0308 	add.w	r3, r7, #8
 8002b24:	9303      	str	r3, [sp, #12]
 8002b26:	ed97 7b00 	vldr	d7, [r7]
 8002b2a:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002b2e:	9b06      	ldr	r3, [sp, #24]
 8002b30:	9312      	str	r3, [sp, #72]	; 0x48
 8002b32:	9b07      	ldr	r3, [sp, #28]
 8002b34:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002b38:	9313      	str	r3, [sp, #76]	; 0x4c
 8002b3a:	f04f 32ff 	mov.w	r2, #4294967295
 8002b3e:	4bab      	ldr	r3, [pc, #684]	; (8002dec <_svfprintf_r+0x5d4>)
 8002b40:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8002b44:	f7fe f80e 	bl	8000b64 <__aeabi_dcmpun>
 8002b48:	2800      	cmp	r0, #0
 8002b4a:	f040 84f1 	bne.w	8003530 <_svfprintf_r+0xd18>
 8002b4e:	f04f 32ff 	mov.w	r2, #4294967295
 8002b52:	4ba6      	ldr	r3, [pc, #664]	; (8002dec <_svfprintf_r+0x5d4>)
 8002b54:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8002b58:	f7fd ffe6 	bl	8000b28 <__aeabi_dcmple>
 8002b5c:	2800      	cmp	r0, #0
 8002b5e:	f040 84e7 	bne.w	8003530 <_svfprintf_r+0xd18>
 8002b62:	f000 bdfd 	b.w	8003760 <_svfprintf_r+0xf48>
 8002b66:	b10a      	cbz	r2, 8002b6c <_svfprintf_r+0x354>
 8002b68:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8002b6c:	f015 0f20 	tst.w	r5, #32
 8002b70:	f107 0304 	add.w	r3, r7, #4
 8002b74:	d007      	beq.n	8002b86 <_svfprintf_r+0x36e>
 8002b76:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002b78:	683a      	ldr	r2, [r7, #0]
 8002b7a:	17ce      	asrs	r6, r1, #31
 8002b7c:	4608      	mov	r0, r1
 8002b7e:	4631      	mov	r1, r6
 8002b80:	e9c2 0100 	strd	r0, r1, [r2]
 8002b84:	e00b      	b.n	8002b9e <_svfprintf_r+0x386>
 8002b86:	06e9      	lsls	r1, r5, #27
 8002b88:	d406      	bmi.n	8002b98 <_svfprintf_r+0x380>
 8002b8a:	066a      	lsls	r2, r5, #25
 8002b8c:	d504      	bpl.n	8002b98 <_svfprintf_r+0x380>
 8002b8e:	683a      	ldr	r2, [r7, #0]
 8002b90:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 8002b94:	8011      	strh	r1, [r2, #0]
 8002b96:	e002      	b.n	8002b9e <_svfprintf_r+0x386>
 8002b98:	683a      	ldr	r2, [r7, #0]
 8002b9a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8002b9c:	6011      	str	r1, [r2, #0]
 8002b9e:	461f      	mov	r7, r3
 8002ba0:	e670      	b.n	8002884 <_svfprintf_r+0x6c>
 8002ba2:	f045 0510 	orr.w	r5, r5, #16
 8002ba6:	f015 0320 	ands.w	r3, r5, #32
 8002baa:	d009      	beq.n	8002bc0 <_svfprintf_r+0x3a8>
 8002bac:	3707      	adds	r7, #7
 8002bae:	f027 0707 	bic.w	r7, r7, #7
 8002bb2:	f107 0308 	add.w	r3, r7, #8
 8002bb6:	e9d7 6700 	ldrd	r6, r7, [r7]
 8002bba:	9303      	str	r3, [sp, #12]
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	e07b      	b.n	8002cb8 <_svfprintf_r+0x4a0>
 8002bc0:	1d3a      	adds	r2, r7, #4
 8002bc2:	f015 0110 	ands.w	r1, r5, #16
 8002bc6:	9203      	str	r2, [sp, #12]
 8002bc8:	d105      	bne.n	8002bd6 <_svfprintf_r+0x3be>
 8002bca:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 8002bce:	d002      	beq.n	8002bd6 <_svfprintf_r+0x3be>
 8002bd0:	883e      	ldrh	r6, [r7, #0]
 8002bd2:	2700      	movs	r7, #0
 8002bd4:	e7f2      	b.n	8002bbc <_svfprintf_r+0x3a4>
 8002bd6:	683e      	ldr	r6, [r7, #0]
 8002bd8:	2700      	movs	r7, #0
 8002bda:	e06d      	b.n	8002cb8 <_svfprintf_r+0x4a0>
 8002bdc:	1d3b      	adds	r3, r7, #4
 8002bde:	9303      	str	r3, [sp, #12]
 8002be0:	2330      	movs	r3, #48	; 0x30
 8002be2:	2278      	movs	r2, #120	; 0x78
 8002be4:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8002be8:	4b81      	ldr	r3, [pc, #516]	; (8002df0 <_svfprintf_r+0x5d8>)
 8002bea:	683e      	ldr	r6, [r7, #0]
 8002bec:	9311      	str	r3, [sp, #68]	; 0x44
 8002bee:	2700      	movs	r7, #0
 8002bf0:	f045 0502 	orr.w	r5, r5, #2
 8002bf4:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
 8002bf8:	2302      	movs	r3, #2
 8002bfa:	9202      	str	r2, [sp, #8]
 8002bfc:	e05c      	b.n	8002cb8 <_svfprintf_r+0x4a0>
 8002bfe:	2600      	movs	r6, #0
 8002c00:	1d3b      	adds	r3, r7, #4
 8002c02:	45b1      	cmp	r9, r6
 8002c04:	9303      	str	r3, [sp, #12]
 8002c06:	f8d7 8000 	ldr.w	r8, [r7]
 8002c0a:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8002c0e:	db0a      	blt.n	8002c26 <_svfprintf_r+0x40e>
 8002c10:	464a      	mov	r2, r9
 8002c12:	4631      	mov	r1, r6
 8002c14:	4640      	mov	r0, r8
 8002c16:	f7fd fafb 	bl	8000210 <memchr>
 8002c1a:	2800      	cmp	r0, #0
 8002c1c:	f000 80ea 	beq.w	8002df4 <_svfprintf_r+0x5dc>
 8002c20:	ebc8 0900 	rsb	r9, r8, r0
 8002c24:	e0e7      	b.n	8002df6 <_svfprintf_r+0x5de>
 8002c26:	4640      	mov	r0, r8
 8002c28:	f7fd fb42 	bl	80002b0 <strlen>
 8002c2c:	4681      	mov	r9, r0
 8002c2e:	e0e2      	b.n	8002df6 <_svfprintf_r+0x5de>
 8002c30:	f045 0510 	orr.w	r5, r5, #16
 8002c34:	06ae      	lsls	r6, r5, #26
 8002c36:	d508      	bpl.n	8002c4a <_svfprintf_r+0x432>
 8002c38:	3707      	adds	r7, #7
 8002c3a:	f027 0707 	bic.w	r7, r7, #7
 8002c3e:	f107 0308 	add.w	r3, r7, #8
 8002c42:	9303      	str	r3, [sp, #12]
 8002c44:	e9d7 6700 	ldrd	r6, r7, [r7]
 8002c48:	e00a      	b.n	8002c60 <_svfprintf_r+0x448>
 8002c4a:	1d3b      	adds	r3, r7, #4
 8002c4c:	f015 0f10 	tst.w	r5, #16
 8002c50:	9303      	str	r3, [sp, #12]
 8002c52:	d103      	bne.n	8002c5c <_svfprintf_r+0x444>
 8002c54:	0668      	lsls	r0, r5, #25
 8002c56:	d501      	bpl.n	8002c5c <_svfprintf_r+0x444>
 8002c58:	883e      	ldrh	r6, [r7, #0]
 8002c5a:	e000      	b.n	8002c5e <_svfprintf_r+0x446>
 8002c5c:	683e      	ldr	r6, [r7, #0]
 8002c5e:	2700      	movs	r7, #0
 8002c60:	2301      	movs	r3, #1
 8002c62:	e029      	b.n	8002cb8 <_svfprintf_r+0x4a0>
 8002c64:	b10a      	cbz	r2, 8002c6a <_svfprintf_r+0x452>
 8002c66:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8002c6a:	4b61      	ldr	r3, [pc, #388]	; (8002df0 <_svfprintf_r+0x5d8>)
 8002c6c:	9311      	str	r3, [sp, #68]	; 0x44
 8002c6e:	06a9      	lsls	r1, r5, #26
 8002c70:	d508      	bpl.n	8002c84 <_svfprintf_r+0x46c>
 8002c72:	3707      	adds	r7, #7
 8002c74:	f027 0707 	bic.w	r7, r7, #7
 8002c78:	f107 0308 	add.w	r3, r7, #8
 8002c7c:	9303      	str	r3, [sp, #12]
 8002c7e:	e9d7 6700 	ldrd	r6, r7, [r7]
 8002c82:	e00a      	b.n	8002c9a <_svfprintf_r+0x482>
 8002c84:	1d3b      	adds	r3, r7, #4
 8002c86:	f015 0f10 	tst.w	r5, #16
 8002c8a:	9303      	str	r3, [sp, #12]
 8002c8c:	d103      	bne.n	8002c96 <_svfprintf_r+0x47e>
 8002c8e:	066a      	lsls	r2, r5, #25
 8002c90:	d501      	bpl.n	8002c96 <_svfprintf_r+0x47e>
 8002c92:	883e      	ldrh	r6, [r7, #0]
 8002c94:	e000      	b.n	8002c98 <_svfprintf_r+0x480>
 8002c96:	683e      	ldr	r6, [r7, #0]
 8002c98:	2700      	movs	r7, #0
 8002c9a:	07eb      	lsls	r3, r5, #31
 8002c9c:	d50b      	bpl.n	8002cb6 <_svfprintf_r+0x49e>
 8002c9e:	ea56 0307 	orrs.w	r3, r6, r7
 8002ca2:	d008      	beq.n	8002cb6 <_svfprintf_r+0x49e>
 8002ca4:	2330      	movs	r3, #48	; 0x30
 8002ca6:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8002caa:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8002cae:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
 8002cb2:	f045 0502 	orr.w	r5, r5, #2
 8002cb6:	2302      	movs	r3, #2
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8002cbe:	e000      	b.n	8002cc2 <_svfprintf_r+0x4aa>
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	f1b9 0f00 	cmp.w	r9, #0
 8002cc6:	f2c0 855c 	blt.w	8003782 <_svfprintf_r+0xf6a>
 8002cca:	ea56 0207 	orrs.w	r2, r6, r7
 8002cce:	f025 0180 	bic.w	r1, r5, #128	; 0x80
 8002cd2:	d103      	bne.n	8002cdc <_svfprintf_r+0x4c4>
 8002cd4:	f1b9 0f00 	cmp.w	r9, #0
 8002cd8:	d05f      	beq.n	8002d9a <_svfprintf_r+0x582>
 8002cda:	e006      	b.n	8002cea <_svfprintf_r+0x4d2>
 8002cdc:	460d      	mov	r5, r1
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d025      	beq.n	8002d2e <_svfprintf_r+0x516>
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d046      	beq.n	8002d74 <_svfprintf_r+0x55c>
 8002ce6:	4629      	mov	r1, r5
 8002ce8:	e007      	b.n	8002cfa <_svfprintf_r+0x4e2>
 8002cea:	460d      	mov	r5, r1
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d022      	beq.n	8002d36 <_svfprintf_r+0x51e>
 8002cf0:	2b02      	cmp	r3, #2
 8002cf2:	d03d      	beq.n	8002d70 <_svfprintf_r+0x558>
 8002cf4:	4629      	mov	r1, r5
 8002cf6:	2600      	movs	r6, #0
 8002cf8:	2700      	movs	r7, #0
 8002cfa:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8002cfe:	08f2      	lsrs	r2, r6, #3
 8002d00:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
 8002d04:	08f8      	lsrs	r0, r7, #3
 8002d06:	f006 0307 	and.w	r3, r6, #7
 8002d0a:	4607      	mov	r7, r0
 8002d0c:	4616      	mov	r6, r2
 8002d0e:	3330      	adds	r3, #48	; 0x30
 8002d10:	ea56 0207 	orrs.w	r2, r6, r7
 8002d14:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8002d18:	d1f1      	bne.n	8002cfe <_svfprintf_r+0x4e6>
 8002d1a:	07e8      	lsls	r0, r5, #31
 8002d1c:	d548      	bpl.n	8002db0 <_svfprintf_r+0x598>
 8002d1e:	2b30      	cmp	r3, #48	; 0x30
 8002d20:	d046      	beq.n	8002db0 <_svfprintf_r+0x598>
 8002d22:	2330      	movs	r3, #48	; 0x30
 8002d24:	f808 3c01 	strb.w	r3, [r8, #-1]
 8002d28:	f108 38ff 	add.w	r8, r8, #4294967295
 8002d2c:	e040      	b.n	8002db0 <_svfprintf_r+0x598>
 8002d2e:	2f00      	cmp	r7, #0
 8002d30:	bf08      	it	eq
 8002d32:	2e0a      	cmpeq	r6, #10
 8002d34:	d205      	bcs.n	8002d42 <_svfprintf_r+0x52a>
 8002d36:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 8002d3a:	3630      	adds	r6, #48	; 0x30
 8002d3c:	f808 6d41 	strb.w	r6, [r8, #-65]!
 8002d40:	e029      	b.n	8002d96 <_svfprintf_r+0x57e>
 8002d42:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8002d46:	4630      	mov	r0, r6
 8002d48:	4639      	mov	r1, r7
 8002d4a:	220a      	movs	r2, #10
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	f7fd ff47 	bl	8000be0 <__aeabi_uldivmod>
 8002d52:	3230      	adds	r2, #48	; 0x30
 8002d54:	f808 2d01 	strb.w	r2, [r8, #-1]!
 8002d58:	2300      	movs	r3, #0
 8002d5a:	4630      	mov	r0, r6
 8002d5c:	4639      	mov	r1, r7
 8002d5e:	220a      	movs	r2, #10
 8002d60:	f7fd ff3e 	bl	8000be0 <__aeabi_uldivmod>
 8002d64:	4606      	mov	r6, r0
 8002d66:	460f      	mov	r7, r1
 8002d68:	ea56 0307 	orrs.w	r3, r6, r7
 8002d6c:	d1eb      	bne.n	8002d46 <_svfprintf_r+0x52e>
 8002d6e:	e012      	b.n	8002d96 <_svfprintf_r+0x57e>
 8002d70:	2600      	movs	r6, #0
 8002d72:	2700      	movs	r7, #0
 8002d74:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8002d78:	f006 030f 	and.w	r3, r6, #15
 8002d7c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8002d7e:	5cd3      	ldrb	r3, [r2, r3]
 8002d80:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8002d84:	0933      	lsrs	r3, r6, #4
 8002d86:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8002d8a:	093a      	lsrs	r2, r7, #4
 8002d8c:	461e      	mov	r6, r3
 8002d8e:	4617      	mov	r7, r2
 8002d90:	ea56 0307 	orrs.w	r3, r6, r7
 8002d94:	d1f0      	bne.n	8002d78 <_svfprintf_r+0x560>
 8002d96:	4629      	mov	r1, r5
 8002d98:	e00a      	b.n	8002db0 <_svfprintf_r+0x598>
 8002d9a:	b93b      	cbnz	r3, 8002dac <_svfprintf_r+0x594>
 8002d9c:	07ea      	lsls	r2, r5, #31
 8002d9e:	d505      	bpl.n	8002dac <_svfprintf_r+0x594>
 8002da0:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 8002da4:	2330      	movs	r3, #48	; 0x30
 8002da6:	f808 3d41 	strb.w	r3, [r8, #-65]!
 8002daa:	e001      	b.n	8002db0 <_svfprintf_r+0x598>
 8002dac:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8002db0:	464e      	mov	r6, r9
 8002db2:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 8002db6:	ebc8 0909 	rsb	r9, r8, r9
 8002dba:	460d      	mov	r5, r1
 8002dbc:	2700      	movs	r7, #0
 8002dbe:	e01b      	b.n	8002df8 <_svfprintf_r+0x5e0>
 8002dc0:	b10a      	cbz	r2, 8002dc6 <_svfprintf_r+0x5ae>
 8002dc2:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8002dc6:	9b02      	ldr	r3, [sp, #8]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	f000 83a0 	beq.w	800350e <_svfprintf_r+0xcf6>
 8002dce:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8002dd2:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 8002dd6:	2600      	movs	r6, #0
 8002dd8:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8002ddc:	9703      	str	r7, [sp, #12]
 8002dde:	f04f 0901 	mov.w	r9, #1
 8002de2:	4637      	mov	r7, r6
 8002de4:	f10d 0888 	add.w	r8, sp, #136	; 0x88
 8002de8:	e006      	b.n	8002df8 <_svfprintf_r+0x5e0>
 8002dea:	bf00      	nop
 8002dec:	7fefffff 	.word	0x7fefffff
 8002df0:	0800668d 	.word	0x0800668d
 8002df4:	4606      	mov	r6, r0
 8002df6:	4637      	mov	r7, r6
 8002df8:	454e      	cmp	r6, r9
 8002dfa:	4633      	mov	r3, r6
 8002dfc:	bfb8      	it	lt
 8002dfe:	464b      	movlt	r3, r9
 8002e00:	930b      	str	r3, [sp, #44]	; 0x2c
 8002e02:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 8002e06:	b113      	cbz	r3, 8002e0e <_svfprintf_r+0x5f6>
 8002e08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	930b      	str	r3, [sp, #44]	; 0x2c
 8002e0e:	f015 0302 	ands.w	r3, r5, #2
 8002e12:	9314      	str	r3, [sp, #80]	; 0x50
 8002e14:	bf1e      	ittt	ne
 8002e16:	9b0b      	ldrne	r3, [sp, #44]	; 0x2c
 8002e18:	3302      	addne	r3, #2
 8002e1a:	930b      	strne	r3, [sp, #44]	; 0x2c
 8002e1c:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 8002e20:	9315      	str	r3, [sp, #84]	; 0x54
 8002e22:	d139      	bne.n	8002e98 <_svfprintf_r+0x680>
 8002e24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002e26:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002e28:	1a9b      	subs	r3, r3, r2
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	930c      	str	r3, [sp, #48]	; 0x30
 8002e2e:	dd33      	ble.n	8002e98 <_svfprintf_r+0x680>
 8002e30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002e32:	2b10      	cmp	r3, #16
 8002e34:	4ba6      	ldr	r3, [pc, #664]	; (80030d0 <_svfprintf_r+0x8b8>)
 8002e36:	6023      	str	r3, [r4, #0]
 8002e38:	dd18      	ble.n	8002e6c <_svfprintf_r+0x654>
 8002e3a:	2310      	movs	r3, #16
 8002e3c:	6063      	str	r3, [r4, #4]
 8002e3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002e40:	3310      	adds	r3, #16
 8002e42:	9321      	str	r3, [sp, #132]	; 0x84
 8002e44:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8002e46:	3301      	adds	r3, #1
 8002e48:	2b07      	cmp	r3, #7
 8002e4a:	9320      	str	r3, [sp, #128]	; 0x80
 8002e4c:	dc01      	bgt.n	8002e52 <_svfprintf_r+0x63a>
 8002e4e:	3408      	adds	r4, #8
 8002e50:	e008      	b.n	8002e64 <_svfprintf_r+0x64c>
 8002e52:	aa1f      	add	r2, sp, #124	; 0x7c
 8002e54:	4659      	mov	r1, fp
 8002e56:	4650      	mov	r0, sl
 8002e58:	f001 fff2 	bl	8004e40 <__ssprint_r>
 8002e5c:	2800      	cmp	r0, #0
 8002e5e:	f040 835d 	bne.w	800351c <_svfprintf_r+0xd04>
 8002e62:	ac2c      	add	r4, sp, #176	; 0xb0
 8002e64:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002e66:	3b10      	subs	r3, #16
 8002e68:	930c      	str	r3, [sp, #48]	; 0x30
 8002e6a:	e7e1      	b.n	8002e30 <_svfprintf_r+0x618>
 8002e6c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002e6e:	6063      	str	r3, [r4, #4]
 8002e70:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002e72:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002e74:	4413      	add	r3, r2
 8002e76:	9321      	str	r3, [sp, #132]	; 0x84
 8002e78:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8002e7a:	3301      	adds	r3, #1
 8002e7c:	2b07      	cmp	r3, #7
 8002e7e:	9320      	str	r3, [sp, #128]	; 0x80
 8002e80:	dc01      	bgt.n	8002e86 <_svfprintf_r+0x66e>
 8002e82:	3408      	adds	r4, #8
 8002e84:	e008      	b.n	8002e98 <_svfprintf_r+0x680>
 8002e86:	aa1f      	add	r2, sp, #124	; 0x7c
 8002e88:	4659      	mov	r1, fp
 8002e8a:	4650      	mov	r0, sl
 8002e8c:	f001 ffd8 	bl	8004e40 <__ssprint_r>
 8002e90:	2800      	cmp	r0, #0
 8002e92:	f040 8343 	bne.w	800351c <_svfprintf_r+0xd04>
 8002e96:	ac2c      	add	r4, sp, #176	; 0xb0
 8002e98:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 8002e9c:	b1bb      	cbz	r3, 8002ece <_svfprintf_r+0x6b6>
 8002e9e:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
 8002ea2:	6023      	str	r3, [r4, #0]
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	6063      	str	r3, [r4, #4]
 8002ea8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002eaa:	3301      	adds	r3, #1
 8002eac:	9321      	str	r3, [sp, #132]	; 0x84
 8002eae:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8002eb0:	3301      	adds	r3, #1
 8002eb2:	2b07      	cmp	r3, #7
 8002eb4:	9320      	str	r3, [sp, #128]	; 0x80
 8002eb6:	dc01      	bgt.n	8002ebc <_svfprintf_r+0x6a4>
 8002eb8:	3408      	adds	r4, #8
 8002eba:	e008      	b.n	8002ece <_svfprintf_r+0x6b6>
 8002ebc:	aa1f      	add	r2, sp, #124	; 0x7c
 8002ebe:	4659      	mov	r1, fp
 8002ec0:	4650      	mov	r0, sl
 8002ec2:	f001 ffbd 	bl	8004e40 <__ssprint_r>
 8002ec6:	2800      	cmp	r0, #0
 8002ec8:	f040 8328 	bne.w	800351c <_svfprintf_r+0xd04>
 8002ecc:	ac2c      	add	r4, sp, #176	; 0xb0
 8002ece:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8002ed0:	b1b3      	cbz	r3, 8002f00 <_svfprintf_r+0x6e8>
 8002ed2:	ab18      	add	r3, sp, #96	; 0x60
 8002ed4:	6023      	str	r3, [r4, #0]
 8002ed6:	2302      	movs	r3, #2
 8002ed8:	6063      	str	r3, [r4, #4]
 8002eda:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002edc:	3302      	adds	r3, #2
 8002ede:	9321      	str	r3, [sp, #132]	; 0x84
 8002ee0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	2b07      	cmp	r3, #7
 8002ee6:	9320      	str	r3, [sp, #128]	; 0x80
 8002ee8:	dc01      	bgt.n	8002eee <_svfprintf_r+0x6d6>
 8002eea:	3408      	adds	r4, #8
 8002eec:	e008      	b.n	8002f00 <_svfprintf_r+0x6e8>
 8002eee:	aa1f      	add	r2, sp, #124	; 0x7c
 8002ef0:	4659      	mov	r1, fp
 8002ef2:	4650      	mov	r0, sl
 8002ef4:	f001 ffa4 	bl	8004e40 <__ssprint_r>
 8002ef8:	2800      	cmp	r0, #0
 8002efa:	f040 830f 	bne.w	800351c <_svfprintf_r+0xd04>
 8002efe:	ac2c      	add	r4, sp, #176	; 0xb0
 8002f00:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8002f02:	2b80      	cmp	r3, #128	; 0x80
 8002f04:	d135      	bne.n	8002f72 <_svfprintf_r+0x75a>
 8002f06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002f08:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002f0a:	1a9b      	subs	r3, r3, r2
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	dd30      	ble.n	8002f72 <_svfprintf_r+0x75a>
 8002f10:	4a70      	ldr	r2, [pc, #448]	; (80030d4 <_svfprintf_r+0x8bc>)
 8002f12:	6022      	str	r2, [r4, #0]
 8002f14:	2b10      	cmp	r3, #16
 8002f16:	dd18      	ble.n	8002f4a <_svfprintf_r+0x732>
 8002f18:	2210      	movs	r2, #16
 8002f1a:	6062      	str	r2, [r4, #4]
 8002f1c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8002f1e:	3210      	adds	r2, #16
 8002f20:	9221      	str	r2, [sp, #132]	; 0x84
 8002f22:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8002f24:	3201      	adds	r2, #1
 8002f26:	2a07      	cmp	r2, #7
 8002f28:	9220      	str	r2, [sp, #128]	; 0x80
 8002f2a:	dc01      	bgt.n	8002f30 <_svfprintf_r+0x718>
 8002f2c:	3408      	adds	r4, #8
 8002f2e:	e00a      	b.n	8002f46 <_svfprintf_r+0x72e>
 8002f30:	aa1f      	add	r2, sp, #124	; 0x7c
 8002f32:	4659      	mov	r1, fp
 8002f34:	4650      	mov	r0, sl
 8002f36:	930c      	str	r3, [sp, #48]	; 0x30
 8002f38:	f001 ff82 	bl	8004e40 <__ssprint_r>
 8002f3c:	2800      	cmp	r0, #0
 8002f3e:	f040 82ed 	bne.w	800351c <_svfprintf_r+0xd04>
 8002f42:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002f44:	ac2c      	add	r4, sp, #176	; 0xb0
 8002f46:	3b10      	subs	r3, #16
 8002f48:	e7e2      	b.n	8002f10 <_svfprintf_r+0x6f8>
 8002f4a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8002f4c:	6063      	str	r3, [r4, #4]
 8002f4e:	4413      	add	r3, r2
 8002f50:	9321      	str	r3, [sp, #132]	; 0x84
 8002f52:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8002f54:	3301      	adds	r3, #1
 8002f56:	2b07      	cmp	r3, #7
 8002f58:	9320      	str	r3, [sp, #128]	; 0x80
 8002f5a:	dc01      	bgt.n	8002f60 <_svfprintf_r+0x748>
 8002f5c:	3408      	adds	r4, #8
 8002f5e:	e008      	b.n	8002f72 <_svfprintf_r+0x75a>
 8002f60:	aa1f      	add	r2, sp, #124	; 0x7c
 8002f62:	4659      	mov	r1, fp
 8002f64:	4650      	mov	r0, sl
 8002f66:	f001 ff6b 	bl	8004e40 <__ssprint_r>
 8002f6a:	2800      	cmp	r0, #0
 8002f6c:	f040 82d6 	bne.w	800351c <_svfprintf_r+0xd04>
 8002f70:	ac2c      	add	r4, sp, #176	; 0xb0
 8002f72:	ebc9 0606 	rsb	r6, r9, r6
 8002f76:	2e00      	cmp	r6, #0
 8002f78:	dd2e      	ble.n	8002fd8 <_svfprintf_r+0x7c0>
 8002f7a:	4b56      	ldr	r3, [pc, #344]	; (80030d4 <_svfprintf_r+0x8bc>)
 8002f7c:	6023      	str	r3, [r4, #0]
 8002f7e:	2e10      	cmp	r6, #16
 8002f80:	dd16      	ble.n	8002fb0 <_svfprintf_r+0x798>
 8002f82:	2310      	movs	r3, #16
 8002f84:	6063      	str	r3, [r4, #4]
 8002f86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002f88:	3310      	adds	r3, #16
 8002f8a:	9321      	str	r3, [sp, #132]	; 0x84
 8002f8c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8002f8e:	3301      	adds	r3, #1
 8002f90:	2b07      	cmp	r3, #7
 8002f92:	9320      	str	r3, [sp, #128]	; 0x80
 8002f94:	dc01      	bgt.n	8002f9a <_svfprintf_r+0x782>
 8002f96:	3408      	adds	r4, #8
 8002f98:	e008      	b.n	8002fac <_svfprintf_r+0x794>
 8002f9a:	aa1f      	add	r2, sp, #124	; 0x7c
 8002f9c:	4659      	mov	r1, fp
 8002f9e:	4650      	mov	r0, sl
 8002fa0:	f001 ff4e 	bl	8004e40 <__ssprint_r>
 8002fa4:	2800      	cmp	r0, #0
 8002fa6:	f040 82b9 	bne.w	800351c <_svfprintf_r+0xd04>
 8002faa:	ac2c      	add	r4, sp, #176	; 0xb0
 8002fac:	3e10      	subs	r6, #16
 8002fae:	e7e4      	b.n	8002f7a <_svfprintf_r+0x762>
 8002fb0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8002fb2:	9821      	ldr	r0, [sp, #132]	; 0x84
 8002fb4:	6066      	str	r6, [r4, #4]
 8002fb6:	3301      	adds	r3, #1
 8002fb8:	4406      	add	r6, r0
 8002fba:	2b07      	cmp	r3, #7
 8002fbc:	9621      	str	r6, [sp, #132]	; 0x84
 8002fbe:	9320      	str	r3, [sp, #128]	; 0x80
 8002fc0:	dc01      	bgt.n	8002fc6 <_svfprintf_r+0x7ae>
 8002fc2:	3408      	adds	r4, #8
 8002fc4:	e008      	b.n	8002fd8 <_svfprintf_r+0x7c0>
 8002fc6:	aa1f      	add	r2, sp, #124	; 0x7c
 8002fc8:	4659      	mov	r1, fp
 8002fca:	4650      	mov	r0, sl
 8002fcc:	f001 ff38 	bl	8004e40 <__ssprint_r>
 8002fd0:	2800      	cmp	r0, #0
 8002fd2:	f040 82a3 	bne.w	800351c <_svfprintf_r+0xd04>
 8002fd6:	ac2c      	add	r4, sp, #176	; 0xb0
 8002fd8:	05eb      	lsls	r3, r5, #23
 8002fda:	d414      	bmi.n	8003006 <_svfprintf_r+0x7ee>
 8002fdc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002fde:	e884 0300 	stmia.w	r4, {r8, r9}
 8002fe2:	444b      	add	r3, r9
 8002fe4:	9321      	str	r3, [sp, #132]	; 0x84
 8002fe6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8002fe8:	3301      	adds	r3, #1
 8002fea:	2b07      	cmp	r3, #7
 8002fec:	9320      	str	r3, [sp, #128]	; 0x80
 8002fee:	f340 8244 	ble.w	800347a <_svfprintf_r+0xc62>
 8002ff2:	aa1f      	add	r2, sp, #124	; 0x7c
 8002ff4:	4659      	mov	r1, fp
 8002ff6:	4650      	mov	r0, sl
 8002ff8:	f001 ff22 	bl	8004e40 <__ssprint_r>
 8002ffc:	2800      	cmp	r0, #0
 8002ffe:	f040 828d 	bne.w	800351c <_svfprintf_r+0xd04>
 8003002:	ac2c      	add	r4, sp, #176	; 0xb0
 8003004:	e23a      	b.n	800347c <_svfprintf_r+0xc64>
 8003006:	9b02      	ldr	r3, [sp, #8]
 8003008:	2b65      	cmp	r3, #101	; 0x65
 800300a:	f340 81ad 	ble.w	8003368 <_svfprintf_r+0xb50>
 800300e:	2200      	movs	r2, #0
 8003010:	2300      	movs	r3, #0
 8003012:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003016:	f7fd fd73 	bl	8000b00 <__aeabi_dcmpeq>
 800301a:	2800      	cmp	r0, #0
 800301c:	d05e      	beq.n	80030dc <_svfprintf_r+0x8c4>
 800301e:	4b2e      	ldr	r3, [pc, #184]	; (80030d8 <_svfprintf_r+0x8c0>)
 8003020:	6023      	str	r3, [r4, #0]
 8003022:	2301      	movs	r3, #1
 8003024:	6063      	str	r3, [r4, #4]
 8003026:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003028:	3301      	adds	r3, #1
 800302a:	9321      	str	r3, [sp, #132]	; 0x84
 800302c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800302e:	3301      	adds	r3, #1
 8003030:	2b07      	cmp	r3, #7
 8003032:	9320      	str	r3, [sp, #128]	; 0x80
 8003034:	dc01      	bgt.n	800303a <_svfprintf_r+0x822>
 8003036:	3408      	adds	r4, #8
 8003038:	e008      	b.n	800304c <_svfprintf_r+0x834>
 800303a:	aa1f      	add	r2, sp, #124	; 0x7c
 800303c:	4659      	mov	r1, fp
 800303e:	4650      	mov	r0, sl
 8003040:	f001 fefe 	bl	8004e40 <__ssprint_r>
 8003044:	2800      	cmp	r0, #0
 8003046:	f040 8269 	bne.w	800351c <_svfprintf_r+0xd04>
 800304a:	ac2c      	add	r4, sp, #176	; 0xb0
 800304c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800304e:	9a04      	ldr	r2, [sp, #16]
 8003050:	4293      	cmp	r3, r2
 8003052:	db02      	blt.n	800305a <_svfprintf_r+0x842>
 8003054:	07ee      	lsls	r6, r5, #31
 8003056:	f140 8211 	bpl.w	800347c <_svfprintf_r+0xc64>
 800305a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800305c:	6023      	str	r3, [r4, #0]
 800305e:	9b08      	ldr	r3, [sp, #32]
 8003060:	6063      	str	r3, [r4, #4]
 8003062:	9a08      	ldr	r2, [sp, #32]
 8003064:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003066:	4413      	add	r3, r2
 8003068:	9321      	str	r3, [sp, #132]	; 0x84
 800306a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800306c:	3301      	adds	r3, #1
 800306e:	2b07      	cmp	r3, #7
 8003070:	9320      	str	r3, [sp, #128]	; 0x80
 8003072:	dc01      	bgt.n	8003078 <_svfprintf_r+0x860>
 8003074:	3408      	adds	r4, #8
 8003076:	e008      	b.n	800308a <_svfprintf_r+0x872>
 8003078:	aa1f      	add	r2, sp, #124	; 0x7c
 800307a:	4659      	mov	r1, fp
 800307c:	4650      	mov	r0, sl
 800307e:	f001 fedf 	bl	8004e40 <__ssprint_r>
 8003082:	2800      	cmp	r0, #0
 8003084:	f040 824a 	bne.w	800351c <_svfprintf_r+0xd04>
 8003088:	ac2c      	add	r4, sp, #176	; 0xb0
 800308a:	9b04      	ldr	r3, [sp, #16]
 800308c:	1e5e      	subs	r6, r3, #1
 800308e:	2e00      	cmp	r6, #0
 8003090:	f340 81f4 	ble.w	800347c <_svfprintf_r+0xc64>
 8003094:	4f0f      	ldr	r7, [pc, #60]	; (80030d4 <_svfprintf_r+0x8bc>)
 8003096:	f04f 0810 	mov.w	r8, #16
 800309a:	2e10      	cmp	r6, #16
 800309c:	f340 8159 	ble.w	8003352 <_svfprintf_r+0xb3a>
 80030a0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80030a2:	3310      	adds	r3, #16
 80030a4:	9321      	str	r3, [sp, #132]	; 0x84
 80030a6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80030a8:	3301      	adds	r3, #1
 80030aa:	2b07      	cmp	r3, #7
 80030ac:	e884 0180 	stmia.w	r4, {r7, r8}
 80030b0:	9320      	str	r3, [sp, #128]	; 0x80
 80030b2:	dc01      	bgt.n	80030b8 <_svfprintf_r+0x8a0>
 80030b4:	3408      	adds	r4, #8
 80030b6:	e008      	b.n	80030ca <_svfprintf_r+0x8b2>
 80030b8:	aa1f      	add	r2, sp, #124	; 0x7c
 80030ba:	4659      	mov	r1, fp
 80030bc:	4650      	mov	r0, sl
 80030be:	f001 febf 	bl	8004e40 <__ssprint_r>
 80030c2:	2800      	cmp	r0, #0
 80030c4:	f040 822a 	bne.w	800351c <_svfprintf_r+0xd04>
 80030c8:	ac2c      	add	r4, sp, #176	; 0xb0
 80030ca:	3e10      	subs	r6, #16
 80030cc:	e7e5      	b.n	800309a <_svfprintf_r+0x882>
 80030ce:	bf00      	nop
 80030d0:	080066a0 	.word	0x080066a0
 80030d4:	0800665c 	.word	0x0800665c
 80030d8:	0800669e 	.word	0x0800669e
 80030dc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80030de:	2b00      	cmp	r3, #0
 80030e0:	dc7c      	bgt.n	80031dc <_svfprintf_r+0x9c4>
 80030e2:	4b9f      	ldr	r3, [pc, #636]	; (8003360 <_svfprintf_r+0xb48>)
 80030e4:	6023      	str	r3, [r4, #0]
 80030e6:	2301      	movs	r3, #1
 80030e8:	6063      	str	r3, [r4, #4]
 80030ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80030ec:	3301      	adds	r3, #1
 80030ee:	9321      	str	r3, [sp, #132]	; 0x84
 80030f0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80030f2:	3301      	adds	r3, #1
 80030f4:	2b07      	cmp	r3, #7
 80030f6:	9320      	str	r3, [sp, #128]	; 0x80
 80030f8:	dc01      	bgt.n	80030fe <_svfprintf_r+0x8e6>
 80030fa:	3408      	adds	r4, #8
 80030fc:	e008      	b.n	8003110 <_svfprintf_r+0x8f8>
 80030fe:	aa1f      	add	r2, sp, #124	; 0x7c
 8003100:	4659      	mov	r1, fp
 8003102:	4650      	mov	r0, sl
 8003104:	f001 fe9c 	bl	8004e40 <__ssprint_r>
 8003108:	2800      	cmp	r0, #0
 800310a:	f040 8207 	bne.w	800351c <_svfprintf_r+0xd04>
 800310e:	ac2c      	add	r4, sp, #176	; 0xb0
 8003110:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003112:	b923      	cbnz	r3, 800311e <_svfprintf_r+0x906>
 8003114:	9b04      	ldr	r3, [sp, #16]
 8003116:	b913      	cbnz	r3, 800311e <_svfprintf_r+0x906>
 8003118:	07e8      	lsls	r0, r5, #31
 800311a:	f140 81af 	bpl.w	800347c <_svfprintf_r+0xc64>
 800311e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003120:	6023      	str	r3, [r4, #0]
 8003122:	9b08      	ldr	r3, [sp, #32]
 8003124:	6063      	str	r3, [r4, #4]
 8003126:	9a08      	ldr	r2, [sp, #32]
 8003128:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800312a:	4413      	add	r3, r2
 800312c:	9321      	str	r3, [sp, #132]	; 0x84
 800312e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003130:	3301      	adds	r3, #1
 8003132:	2b07      	cmp	r3, #7
 8003134:	9320      	str	r3, [sp, #128]	; 0x80
 8003136:	dc02      	bgt.n	800313e <_svfprintf_r+0x926>
 8003138:	f104 0308 	add.w	r3, r4, #8
 800313c:	e008      	b.n	8003150 <_svfprintf_r+0x938>
 800313e:	aa1f      	add	r2, sp, #124	; 0x7c
 8003140:	4659      	mov	r1, fp
 8003142:	4650      	mov	r0, sl
 8003144:	f001 fe7c 	bl	8004e40 <__ssprint_r>
 8003148:	2800      	cmp	r0, #0
 800314a:	f040 81e7 	bne.w	800351c <_svfprintf_r+0xd04>
 800314e:	ab2c      	add	r3, sp, #176	; 0xb0
 8003150:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8003152:	4276      	negs	r6, r6
 8003154:	2e00      	cmp	r6, #0
 8003156:	dd30      	ble.n	80031ba <_svfprintf_r+0x9a2>
 8003158:	4f82      	ldr	r7, [pc, #520]	; (8003364 <_svfprintf_r+0xb4c>)
 800315a:	2410      	movs	r4, #16
 800315c:	2e10      	cmp	r6, #16
 800315e:	dd16      	ble.n	800318e <_svfprintf_r+0x976>
 8003160:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003162:	601f      	str	r7, [r3, #0]
 8003164:	3210      	adds	r2, #16
 8003166:	9221      	str	r2, [sp, #132]	; 0x84
 8003168:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800316a:	605c      	str	r4, [r3, #4]
 800316c:	3201      	adds	r2, #1
 800316e:	2a07      	cmp	r2, #7
 8003170:	9220      	str	r2, [sp, #128]	; 0x80
 8003172:	dc01      	bgt.n	8003178 <_svfprintf_r+0x960>
 8003174:	3308      	adds	r3, #8
 8003176:	e008      	b.n	800318a <_svfprintf_r+0x972>
 8003178:	aa1f      	add	r2, sp, #124	; 0x7c
 800317a:	4659      	mov	r1, fp
 800317c:	4650      	mov	r0, sl
 800317e:	f001 fe5f 	bl	8004e40 <__ssprint_r>
 8003182:	2800      	cmp	r0, #0
 8003184:	f040 81ca 	bne.w	800351c <_svfprintf_r+0xd04>
 8003188:	ab2c      	add	r3, sp, #176	; 0xb0
 800318a:	3e10      	subs	r6, #16
 800318c:	e7e6      	b.n	800315c <_svfprintf_r+0x944>
 800318e:	4a75      	ldr	r2, [pc, #468]	; (8003364 <_svfprintf_r+0xb4c>)
 8003190:	e883 0044 	stmia.w	r3, {r2, r6}
 8003194:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003196:	4416      	add	r6, r2
 8003198:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800319a:	9621      	str	r6, [sp, #132]	; 0x84
 800319c:	3201      	adds	r2, #1
 800319e:	2a07      	cmp	r2, #7
 80031a0:	9220      	str	r2, [sp, #128]	; 0x80
 80031a2:	dc01      	bgt.n	80031a8 <_svfprintf_r+0x990>
 80031a4:	3308      	adds	r3, #8
 80031a6:	e008      	b.n	80031ba <_svfprintf_r+0x9a2>
 80031a8:	aa1f      	add	r2, sp, #124	; 0x7c
 80031aa:	4659      	mov	r1, fp
 80031ac:	4650      	mov	r0, sl
 80031ae:	f001 fe47 	bl	8004e40 <__ssprint_r>
 80031b2:	2800      	cmp	r0, #0
 80031b4:	f040 81b2 	bne.w	800351c <_svfprintf_r+0xd04>
 80031b8:	ab2c      	add	r3, sp, #176	; 0xb0
 80031ba:	9a04      	ldr	r2, [sp, #16]
 80031bc:	605a      	str	r2, [r3, #4]
 80031be:	9904      	ldr	r1, [sp, #16]
 80031c0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80031c2:	f8c3 8000 	str.w	r8, [r3]
 80031c6:	440a      	add	r2, r1
 80031c8:	9221      	str	r2, [sp, #132]	; 0x84
 80031ca:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80031cc:	3201      	adds	r2, #1
 80031ce:	2a07      	cmp	r2, #7
 80031d0:	9220      	str	r2, [sp, #128]	; 0x80
 80031d2:	f73f af0e 	bgt.w	8002ff2 <_svfprintf_r+0x7da>
 80031d6:	f103 0408 	add.w	r4, r3, #8
 80031da:	e14f      	b.n	800347c <_svfprintf_r+0xc64>
 80031dc:	9b04      	ldr	r3, [sp, #16]
 80031de:	42bb      	cmp	r3, r7
 80031e0:	bfa8      	it	ge
 80031e2:	463b      	movge	r3, r7
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	461e      	mov	r6, r3
 80031e8:	dd15      	ble.n	8003216 <_svfprintf_r+0x9fe>
 80031ea:	6063      	str	r3, [r4, #4]
 80031ec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80031ee:	f8c4 8000 	str.w	r8, [r4]
 80031f2:	4433      	add	r3, r6
 80031f4:	9321      	str	r3, [sp, #132]	; 0x84
 80031f6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80031f8:	3301      	adds	r3, #1
 80031fa:	2b07      	cmp	r3, #7
 80031fc:	9320      	str	r3, [sp, #128]	; 0x80
 80031fe:	dc01      	bgt.n	8003204 <_svfprintf_r+0x9ec>
 8003200:	3408      	adds	r4, #8
 8003202:	e008      	b.n	8003216 <_svfprintf_r+0x9fe>
 8003204:	aa1f      	add	r2, sp, #124	; 0x7c
 8003206:	4659      	mov	r1, fp
 8003208:	4650      	mov	r0, sl
 800320a:	f001 fe19 	bl	8004e40 <__ssprint_r>
 800320e:	2800      	cmp	r0, #0
 8003210:	f040 8184 	bne.w	800351c <_svfprintf_r+0xd04>
 8003214:	ac2c      	add	r4, sp, #176	; 0xb0
 8003216:	2e00      	cmp	r6, #0
 8003218:	bfac      	ite	ge
 800321a:	1bbe      	subge	r6, r7, r6
 800321c:	463e      	movlt	r6, r7
 800321e:	2e00      	cmp	r6, #0
 8003220:	dd30      	ble.n	8003284 <_svfprintf_r+0xa6c>
 8003222:	f04f 0910 	mov.w	r9, #16
 8003226:	4b4f      	ldr	r3, [pc, #316]	; (8003364 <_svfprintf_r+0xb4c>)
 8003228:	6023      	str	r3, [r4, #0]
 800322a:	2e10      	cmp	r6, #16
 800322c:	dd16      	ble.n	800325c <_svfprintf_r+0xa44>
 800322e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003230:	f8c4 9004 	str.w	r9, [r4, #4]
 8003234:	3310      	adds	r3, #16
 8003236:	9321      	str	r3, [sp, #132]	; 0x84
 8003238:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800323a:	3301      	adds	r3, #1
 800323c:	2b07      	cmp	r3, #7
 800323e:	9320      	str	r3, [sp, #128]	; 0x80
 8003240:	dc01      	bgt.n	8003246 <_svfprintf_r+0xa2e>
 8003242:	3408      	adds	r4, #8
 8003244:	e008      	b.n	8003258 <_svfprintf_r+0xa40>
 8003246:	aa1f      	add	r2, sp, #124	; 0x7c
 8003248:	4659      	mov	r1, fp
 800324a:	4650      	mov	r0, sl
 800324c:	f001 fdf8 	bl	8004e40 <__ssprint_r>
 8003250:	2800      	cmp	r0, #0
 8003252:	f040 8163 	bne.w	800351c <_svfprintf_r+0xd04>
 8003256:	ac2c      	add	r4, sp, #176	; 0xb0
 8003258:	3e10      	subs	r6, #16
 800325a:	e7e4      	b.n	8003226 <_svfprintf_r+0xa0e>
 800325c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800325e:	6066      	str	r6, [r4, #4]
 8003260:	441e      	add	r6, r3
 8003262:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003264:	9621      	str	r6, [sp, #132]	; 0x84
 8003266:	3301      	adds	r3, #1
 8003268:	2b07      	cmp	r3, #7
 800326a:	9320      	str	r3, [sp, #128]	; 0x80
 800326c:	dc01      	bgt.n	8003272 <_svfprintf_r+0xa5a>
 800326e:	3408      	adds	r4, #8
 8003270:	e008      	b.n	8003284 <_svfprintf_r+0xa6c>
 8003272:	aa1f      	add	r2, sp, #124	; 0x7c
 8003274:	4659      	mov	r1, fp
 8003276:	4650      	mov	r0, sl
 8003278:	f001 fde2 	bl	8004e40 <__ssprint_r>
 800327c:	2800      	cmp	r0, #0
 800327e:	f040 814d 	bne.w	800351c <_svfprintf_r+0xd04>
 8003282:	ac2c      	add	r4, sp, #176	; 0xb0
 8003284:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003286:	9a04      	ldr	r2, [sp, #16]
 8003288:	4293      	cmp	r3, r2
 800328a:	4447      	add	r7, r8
 800328c:	db01      	blt.n	8003292 <_svfprintf_r+0xa7a>
 800328e:	07e9      	lsls	r1, r5, #31
 8003290:	d517      	bpl.n	80032c2 <_svfprintf_r+0xaaa>
 8003292:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003294:	6023      	str	r3, [r4, #0]
 8003296:	9b08      	ldr	r3, [sp, #32]
 8003298:	6063      	str	r3, [r4, #4]
 800329a:	9a08      	ldr	r2, [sp, #32]
 800329c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800329e:	4413      	add	r3, r2
 80032a0:	9321      	str	r3, [sp, #132]	; 0x84
 80032a2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80032a4:	3301      	adds	r3, #1
 80032a6:	2b07      	cmp	r3, #7
 80032a8:	9320      	str	r3, [sp, #128]	; 0x80
 80032aa:	dc01      	bgt.n	80032b0 <_svfprintf_r+0xa98>
 80032ac:	3408      	adds	r4, #8
 80032ae:	e008      	b.n	80032c2 <_svfprintf_r+0xaaa>
 80032b0:	aa1f      	add	r2, sp, #124	; 0x7c
 80032b2:	4659      	mov	r1, fp
 80032b4:	4650      	mov	r0, sl
 80032b6:	f001 fdc3 	bl	8004e40 <__ssprint_r>
 80032ba:	2800      	cmp	r0, #0
 80032bc:	f040 812e 	bne.w	800351c <_svfprintf_r+0xd04>
 80032c0:	ac2c      	add	r4, sp, #176	; 0xb0
 80032c2:	9b04      	ldr	r3, [sp, #16]
 80032c4:	9a04      	ldr	r2, [sp, #16]
 80032c6:	eb08 0603 	add.w	r6, r8, r3
 80032ca:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80032cc:	1bf6      	subs	r6, r6, r7
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	429e      	cmp	r6, r3
 80032d2:	bfa8      	it	ge
 80032d4:	461e      	movge	r6, r3
 80032d6:	2e00      	cmp	r6, #0
 80032d8:	dd14      	ble.n	8003304 <_svfprintf_r+0xaec>
 80032da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80032dc:	6027      	str	r7, [r4, #0]
 80032de:	4433      	add	r3, r6
 80032e0:	9321      	str	r3, [sp, #132]	; 0x84
 80032e2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80032e4:	6066      	str	r6, [r4, #4]
 80032e6:	3301      	adds	r3, #1
 80032e8:	2b07      	cmp	r3, #7
 80032ea:	9320      	str	r3, [sp, #128]	; 0x80
 80032ec:	dc01      	bgt.n	80032f2 <_svfprintf_r+0xada>
 80032ee:	3408      	adds	r4, #8
 80032f0:	e008      	b.n	8003304 <_svfprintf_r+0xaec>
 80032f2:	aa1f      	add	r2, sp, #124	; 0x7c
 80032f4:	4659      	mov	r1, fp
 80032f6:	4650      	mov	r0, sl
 80032f8:	f001 fda2 	bl	8004e40 <__ssprint_r>
 80032fc:	2800      	cmp	r0, #0
 80032fe:	f040 810d 	bne.w	800351c <_svfprintf_r+0xd04>
 8003302:	ac2c      	add	r4, sp, #176	; 0xb0
 8003304:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003306:	9a04      	ldr	r2, [sp, #16]
 8003308:	2e00      	cmp	r6, #0
 800330a:	eba2 0303 	sub.w	r3, r2, r3
 800330e:	bfac      	ite	ge
 8003310:	1b9e      	subge	r6, r3, r6
 8003312:	461e      	movlt	r6, r3
 8003314:	2e00      	cmp	r6, #0
 8003316:	f340 80b1 	ble.w	800347c <_svfprintf_r+0xc64>
 800331a:	4f12      	ldr	r7, [pc, #72]	; (8003364 <_svfprintf_r+0xb4c>)
 800331c:	f04f 0810 	mov.w	r8, #16
 8003320:	2e10      	cmp	r6, #16
 8003322:	dd16      	ble.n	8003352 <_svfprintf_r+0xb3a>
 8003324:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003326:	3310      	adds	r3, #16
 8003328:	9321      	str	r3, [sp, #132]	; 0x84
 800332a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800332c:	3301      	adds	r3, #1
 800332e:	2b07      	cmp	r3, #7
 8003330:	e884 0180 	stmia.w	r4, {r7, r8}
 8003334:	9320      	str	r3, [sp, #128]	; 0x80
 8003336:	dc01      	bgt.n	800333c <_svfprintf_r+0xb24>
 8003338:	3408      	adds	r4, #8
 800333a:	e008      	b.n	800334e <_svfprintf_r+0xb36>
 800333c:	aa1f      	add	r2, sp, #124	; 0x7c
 800333e:	4659      	mov	r1, fp
 8003340:	4650      	mov	r0, sl
 8003342:	f001 fd7d 	bl	8004e40 <__ssprint_r>
 8003346:	2800      	cmp	r0, #0
 8003348:	f040 80e8 	bne.w	800351c <_svfprintf_r+0xd04>
 800334c:	ac2c      	add	r4, sp, #176	; 0xb0
 800334e:	3e10      	subs	r6, #16
 8003350:	e7e6      	b.n	8003320 <_svfprintf_r+0xb08>
 8003352:	4b04      	ldr	r3, [pc, #16]	; (8003364 <_svfprintf_r+0xb4c>)
 8003354:	e884 0048 	stmia.w	r4, {r3, r6}
 8003358:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800335a:	441e      	add	r6, r3
 800335c:	9621      	str	r6, [sp, #132]	; 0x84
 800335e:	e642      	b.n	8002fe6 <_svfprintf_r+0x7ce>
 8003360:	0800669e 	.word	0x0800669e
 8003364:	0800665c 	.word	0x0800665c
 8003368:	9b04      	ldr	r3, [sp, #16]
 800336a:	2b01      	cmp	r3, #1
 800336c:	dc01      	bgt.n	8003372 <_svfprintf_r+0xb5a>
 800336e:	07ea      	lsls	r2, r5, #31
 8003370:	d573      	bpl.n	800345a <_svfprintf_r+0xc42>
 8003372:	2301      	movs	r3, #1
 8003374:	6063      	str	r3, [r4, #4]
 8003376:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003378:	f8c4 8000 	str.w	r8, [r4]
 800337c:	3301      	adds	r3, #1
 800337e:	9321      	str	r3, [sp, #132]	; 0x84
 8003380:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003382:	3301      	adds	r3, #1
 8003384:	2b07      	cmp	r3, #7
 8003386:	9320      	str	r3, [sp, #128]	; 0x80
 8003388:	dc01      	bgt.n	800338e <_svfprintf_r+0xb76>
 800338a:	3408      	adds	r4, #8
 800338c:	e008      	b.n	80033a0 <_svfprintf_r+0xb88>
 800338e:	aa1f      	add	r2, sp, #124	; 0x7c
 8003390:	4659      	mov	r1, fp
 8003392:	4650      	mov	r0, sl
 8003394:	f001 fd54 	bl	8004e40 <__ssprint_r>
 8003398:	2800      	cmp	r0, #0
 800339a:	f040 80bf 	bne.w	800351c <_svfprintf_r+0xd04>
 800339e:	ac2c      	add	r4, sp, #176	; 0xb0
 80033a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80033a2:	6023      	str	r3, [r4, #0]
 80033a4:	9b08      	ldr	r3, [sp, #32]
 80033a6:	6063      	str	r3, [r4, #4]
 80033a8:	9a08      	ldr	r2, [sp, #32]
 80033aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80033ac:	4413      	add	r3, r2
 80033ae:	9321      	str	r3, [sp, #132]	; 0x84
 80033b0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80033b2:	3301      	adds	r3, #1
 80033b4:	2b07      	cmp	r3, #7
 80033b6:	9320      	str	r3, [sp, #128]	; 0x80
 80033b8:	dc01      	bgt.n	80033be <_svfprintf_r+0xba6>
 80033ba:	3408      	adds	r4, #8
 80033bc:	e008      	b.n	80033d0 <_svfprintf_r+0xbb8>
 80033be:	aa1f      	add	r2, sp, #124	; 0x7c
 80033c0:	4659      	mov	r1, fp
 80033c2:	4650      	mov	r0, sl
 80033c4:	f001 fd3c 	bl	8004e40 <__ssprint_r>
 80033c8:	2800      	cmp	r0, #0
 80033ca:	f040 80a7 	bne.w	800351c <_svfprintf_r+0xd04>
 80033ce:	ac2c      	add	r4, sp, #176	; 0xb0
 80033d0:	2300      	movs	r3, #0
 80033d2:	2200      	movs	r2, #0
 80033d4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80033d8:	f7fd fb92 	bl	8000b00 <__aeabi_dcmpeq>
 80033dc:	9b04      	ldr	r3, [sp, #16]
 80033de:	1e5e      	subs	r6, r3, #1
 80033e0:	b9b8      	cbnz	r0, 8003412 <_svfprintf_r+0xbfa>
 80033e2:	f108 0301 	add.w	r3, r8, #1
 80033e6:	e884 0048 	stmia.w	r4, {r3, r6}
 80033ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80033ec:	9a04      	ldr	r2, [sp, #16]
 80033ee:	3b01      	subs	r3, #1
 80033f0:	4413      	add	r3, r2
 80033f2:	9321      	str	r3, [sp, #132]	; 0x84
 80033f4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80033f6:	3301      	adds	r3, #1
 80033f8:	2b07      	cmp	r3, #7
 80033fa:	9320      	str	r3, [sp, #128]	; 0x80
 80033fc:	dd34      	ble.n	8003468 <_svfprintf_r+0xc50>
 80033fe:	aa1f      	add	r2, sp, #124	; 0x7c
 8003400:	4659      	mov	r1, fp
 8003402:	4650      	mov	r0, sl
 8003404:	f001 fd1c 	bl	8004e40 <__ssprint_r>
 8003408:	2800      	cmp	r0, #0
 800340a:	f040 8087 	bne.w	800351c <_svfprintf_r+0xd04>
 800340e:	ac2c      	add	r4, sp, #176	; 0xb0
 8003410:	e02b      	b.n	800346a <_svfprintf_r+0xc52>
 8003412:	2e00      	cmp	r6, #0
 8003414:	dd29      	ble.n	800346a <_svfprintf_r+0xc52>
 8003416:	4fa7      	ldr	r7, [pc, #668]	; (80036b4 <_svfprintf_r+0xe9c>)
 8003418:	f04f 0810 	mov.w	r8, #16
 800341c:	2e10      	cmp	r6, #16
 800341e:	dd15      	ble.n	800344c <_svfprintf_r+0xc34>
 8003420:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003422:	3310      	adds	r3, #16
 8003424:	9321      	str	r3, [sp, #132]	; 0x84
 8003426:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003428:	3301      	adds	r3, #1
 800342a:	2b07      	cmp	r3, #7
 800342c:	e884 0180 	stmia.w	r4, {r7, r8}
 8003430:	9320      	str	r3, [sp, #128]	; 0x80
 8003432:	dc01      	bgt.n	8003438 <_svfprintf_r+0xc20>
 8003434:	3408      	adds	r4, #8
 8003436:	e007      	b.n	8003448 <_svfprintf_r+0xc30>
 8003438:	aa1f      	add	r2, sp, #124	; 0x7c
 800343a:	4659      	mov	r1, fp
 800343c:	4650      	mov	r0, sl
 800343e:	f001 fcff 	bl	8004e40 <__ssprint_r>
 8003442:	2800      	cmp	r0, #0
 8003444:	d16a      	bne.n	800351c <_svfprintf_r+0xd04>
 8003446:	ac2c      	add	r4, sp, #176	; 0xb0
 8003448:	3e10      	subs	r6, #16
 800344a:	e7e7      	b.n	800341c <_svfprintf_r+0xc04>
 800344c:	4b99      	ldr	r3, [pc, #612]	; (80036b4 <_svfprintf_r+0xe9c>)
 800344e:	e884 0048 	stmia.w	r4, {r3, r6}
 8003452:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003454:	441e      	add	r6, r3
 8003456:	9621      	str	r6, [sp, #132]	; 0x84
 8003458:	e7cc      	b.n	80033f4 <_svfprintf_r+0xbdc>
 800345a:	2301      	movs	r3, #1
 800345c:	6063      	str	r3, [r4, #4]
 800345e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003460:	f8c4 8000 	str.w	r8, [r4]
 8003464:	3301      	adds	r3, #1
 8003466:	e7c4      	b.n	80033f2 <_svfprintf_r+0xbda>
 8003468:	3408      	adds	r4, #8
 800346a:	ab1b      	add	r3, sp, #108	; 0x6c
 800346c:	6023      	str	r3, [r4, #0]
 800346e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003470:	6063      	str	r3, [r4, #4]
 8003472:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003474:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003476:	4413      	add	r3, r2
 8003478:	e5b4      	b.n	8002fe4 <_svfprintf_r+0x7cc>
 800347a:	3408      	adds	r4, #8
 800347c:	076b      	lsls	r3, r5, #29
 800347e:	d40b      	bmi.n	8003498 <_svfprintf_r+0xc80>
 8003480:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003482:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003484:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003486:	428a      	cmp	r2, r1
 8003488:	bfac      	ite	ge
 800348a:	189b      	addge	r3, r3, r2
 800348c:	185b      	addlt	r3, r3, r1
 800348e:	930a      	str	r3, [sp, #40]	; 0x28
 8003490:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003492:	2b00      	cmp	r3, #0
 8003494:	d035      	beq.n	8003502 <_svfprintf_r+0xcea>
 8003496:	e02e      	b.n	80034f6 <_svfprintf_r+0xcde>
 8003498:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800349a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800349c:	1a9d      	subs	r5, r3, r2
 800349e:	2d00      	cmp	r5, #0
 80034a0:	ddee      	ble.n	8003480 <_svfprintf_r+0xc68>
 80034a2:	2610      	movs	r6, #16
 80034a4:	4b84      	ldr	r3, [pc, #528]	; (80036b8 <_svfprintf_r+0xea0>)
 80034a6:	6023      	str	r3, [r4, #0]
 80034a8:	2d10      	cmp	r5, #16
 80034aa:	dd13      	ble.n	80034d4 <_svfprintf_r+0xcbc>
 80034ac:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80034ae:	6066      	str	r6, [r4, #4]
 80034b0:	3310      	adds	r3, #16
 80034b2:	9321      	str	r3, [sp, #132]	; 0x84
 80034b4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80034b6:	3301      	adds	r3, #1
 80034b8:	2b07      	cmp	r3, #7
 80034ba:	9320      	str	r3, [sp, #128]	; 0x80
 80034bc:	dc01      	bgt.n	80034c2 <_svfprintf_r+0xcaa>
 80034be:	3408      	adds	r4, #8
 80034c0:	e006      	b.n	80034d0 <_svfprintf_r+0xcb8>
 80034c2:	aa1f      	add	r2, sp, #124	; 0x7c
 80034c4:	4659      	mov	r1, fp
 80034c6:	4650      	mov	r0, sl
 80034c8:	f001 fcba 	bl	8004e40 <__ssprint_r>
 80034cc:	bb30      	cbnz	r0, 800351c <_svfprintf_r+0xd04>
 80034ce:	ac2c      	add	r4, sp, #176	; 0xb0
 80034d0:	3d10      	subs	r5, #16
 80034d2:	e7e7      	b.n	80034a4 <_svfprintf_r+0xc8c>
 80034d4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80034d6:	6065      	str	r5, [r4, #4]
 80034d8:	441d      	add	r5, r3
 80034da:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80034dc:	9521      	str	r5, [sp, #132]	; 0x84
 80034de:	3301      	adds	r3, #1
 80034e0:	2b07      	cmp	r3, #7
 80034e2:	9320      	str	r3, [sp, #128]	; 0x80
 80034e4:	ddcc      	ble.n	8003480 <_svfprintf_r+0xc68>
 80034e6:	aa1f      	add	r2, sp, #124	; 0x7c
 80034e8:	4659      	mov	r1, fp
 80034ea:	4650      	mov	r0, sl
 80034ec:	f001 fca8 	bl	8004e40 <__ssprint_r>
 80034f0:	2800      	cmp	r0, #0
 80034f2:	d0c5      	beq.n	8003480 <_svfprintf_r+0xc68>
 80034f4:	e012      	b.n	800351c <_svfprintf_r+0xd04>
 80034f6:	aa1f      	add	r2, sp, #124	; 0x7c
 80034f8:	4659      	mov	r1, fp
 80034fa:	4650      	mov	r0, sl
 80034fc:	f001 fca0 	bl	8004e40 <__ssprint_r>
 8003500:	b960      	cbnz	r0, 800351c <_svfprintf_r+0xd04>
 8003502:	2300      	movs	r3, #0
 8003504:	9320      	str	r3, [sp, #128]	; 0x80
 8003506:	9f03      	ldr	r7, [sp, #12]
 8003508:	ac2c      	add	r4, sp, #176	; 0xb0
 800350a:	f7ff b9bb 	b.w	8002884 <_svfprintf_r+0x6c>
 800350e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003510:	b123      	cbz	r3, 800351c <_svfprintf_r+0xd04>
 8003512:	aa1f      	add	r2, sp, #124	; 0x7c
 8003514:	4659      	mov	r1, fp
 8003516:	4650      	mov	r0, sl
 8003518:	f001 fc92 	bl	8004e40 <__ssprint_r>
 800351c:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8003520:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003524:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003526:	bf18      	it	ne
 8003528:	f04f 33ff 	movne.w	r3, #4294967295
 800352c:	4618      	mov	r0, r3
 800352e:	e12e      	b.n	800378e <_svfprintf_r+0xf76>
 8003530:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003534:	4610      	mov	r0, r2
 8003536:	4619      	mov	r1, r3
 8003538:	f7fd fb14 	bl	8000b64 <__aeabi_dcmpun>
 800353c:	b160      	cbz	r0, 8003558 <_svfprintf_r+0xd40>
 800353e:	4b5f      	ldr	r3, [pc, #380]	; (80036bc <_svfprintf_r+0xea4>)
 8003540:	4a5f      	ldr	r2, [pc, #380]	; (80036c0 <_svfprintf_r+0xea8>)
 8003542:	9902      	ldr	r1, [sp, #8]
 8003544:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 8003548:	2947      	cmp	r1, #71	; 0x47
 800354a:	bfcc      	ite	gt
 800354c:	4690      	movgt	r8, r2
 800354e:	4698      	movle	r8, r3
 8003550:	f04f 0903 	mov.w	r9, #3
 8003554:	2600      	movs	r6, #0
 8003556:	e44e      	b.n	8002df6 <_svfprintf_r+0x5de>
 8003558:	f1b9 3fff 	cmp.w	r9, #4294967295
 800355c:	d00a      	beq.n	8003574 <_svfprintf_r+0xd5c>
 800355e:	9b02      	ldr	r3, [sp, #8]
 8003560:	f023 0320 	bic.w	r3, r3, #32
 8003564:	2b47      	cmp	r3, #71	; 0x47
 8003566:	d107      	bne.n	8003578 <_svfprintf_r+0xd60>
 8003568:	f1b9 0f00 	cmp.w	r9, #0
 800356c:	bf08      	it	eq
 800356e:	f04f 0901 	moveq.w	r9, #1
 8003572:	e001      	b.n	8003578 <_svfprintf_r+0xd60>
 8003574:	f04f 0906 	mov.w	r9, #6
 8003578:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 800357c:	930c      	str	r3, [sp, #48]	; 0x30
 800357e:	9b07      	ldr	r3, [sp, #28]
 8003580:	2b00      	cmp	r3, #0
 8003582:	da07      	bge.n	8003594 <_svfprintf_r+0xd7c>
 8003584:	9b06      	ldr	r3, [sp, #24]
 8003586:	930e      	str	r3, [sp, #56]	; 0x38
 8003588:	9b07      	ldr	r3, [sp, #28]
 800358a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800358e:	930f      	str	r3, [sp, #60]	; 0x3c
 8003590:	232d      	movs	r3, #45	; 0x2d
 8003592:	e004      	b.n	800359e <_svfprintf_r+0xd86>
 8003594:	ed9d 7b06 	vldr	d7, [sp, #24]
 8003598:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800359c:	2300      	movs	r3, #0
 800359e:	930b      	str	r3, [sp, #44]	; 0x2c
 80035a0:	9b02      	ldr	r3, [sp, #8]
 80035a2:	f023 0720 	bic.w	r7, r3, #32
 80035a6:	2f46      	cmp	r7, #70	; 0x46
 80035a8:	d004      	beq.n	80035b4 <_svfprintf_r+0xd9c>
 80035aa:	2f45      	cmp	r7, #69	; 0x45
 80035ac:	d105      	bne.n	80035ba <_svfprintf_r+0xda2>
 80035ae:	f109 0601 	add.w	r6, r9, #1
 80035b2:	e003      	b.n	80035bc <_svfprintf_r+0xda4>
 80035b4:	464e      	mov	r6, r9
 80035b6:	2103      	movs	r1, #3
 80035b8:	e001      	b.n	80035be <_svfprintf_r+0xda6>
 80035ba:	464e      	mov	r6, r9
 80035bc:	2102      	movs	r1, #2
 80035be:	ab1d      	add	r3, sp, #116	; 0x74
 80035c0:	9301      	str	r3, [sp, #4]
 80035c2:	ab1a      	add	r3, sp, #104	; 0x68
 80035c4:	9300      	str	r3, [sp, #0]
 80035c6:	4632      	mov	r2, r6
 80035c8:	ab19      	add	r3, sp, #100	; 0x64
 80035ca:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 80035ce:	4650      	mov	r0, sl
 80035d0:	f000 f976 	bl	80038c0 <_dtoa_r>
 80035d4:	2f47      	cmp	r7, #71	; 0x47
 80035d6:	4680      	mov	r8, r0
 80035d8:	d102      	bne.n	80035e0 <_svfprintf_r+0xdc8>
 80035da:	07eb      	lsls	r3, r5, #31
 80035dc:	f140 80cd 	bpl.w	800377a <_svfprintf_r+0xf62>
 80035e0:	eb08 0306 	add.w	r3, r8, r6
 80035e4:	2f46      	cmp	r7, #70	; 0x46
 80035e6:	9304      	str	r3, [sp, #16]
 80035e8:	d111      	bne.n	800360e <_svfprintf_r+0xdf6>
 80035ea:	f898 3000 	ldrb.w	r3, [r8]
 80035ee:	2b30      	cmp	r3, #48	; 0x30
 80035f0:	d109      	bne.n	8003606 <_svfprintf_r+0xdee>
 80035f2:	2200      	movs	r2, #0
 80035f4:	2300      	movs	r3, #0
 80035f6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80035fa:	f7fd fa81 	bl	8000b00 <__aeabi_dcmpeq>
 80035fe:	b910      	cbnz	r0, 8003606 <_svfprintf_r+0xdee>
 8003600:	f1c6 0601 	rsb	r6, r6, #1
 8003604:	9619      	str	r6, [sp, #100]	; 0x64
 8003606:	9a04      	ldr	r2, [sp, #16]
 8003608:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800360a:	441a      	add	r2, r3
 800360c:	9204      	str	r2, [sp, #16]
 800360e:	2200      	movs	r2, #0
 8003610:	2300      	movs	r3, #0
 8003612:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8003616:	f7fd fa73 	bl	8000b00 <__aeabi_dcmpeq>
 800361a:	b908      	cbnz	r0, 8003620 <_svfprintf_r+0xe08>
 800361c:	2230      	movs	r2, #48	; 0x30
 800361e:	e002      	b.n	8003626 <_svfprintf_r+0xe0e>
 8003620:	9b04      	ldr	r3, [sp, #16]
 8003622:	931d      	str	r3, [sp, #116]	; 0x74
 8003624:	e007      	b.n	8003636 <_svfprintf_r+0xe1e>
 8003626:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003628:	9904      	ldr	r1, [sp, #16]
 800362a:	4299      	cmp	r1, r3
 800362c:	d903      	bls.n	8003636 <_svfprintf_r+0xe1e>
 800362e:	1c59      	adds	r1, r3, #1
 8003630:	911d      	str	r1, [sp, #116]	; 0x74
 8003632:	701a      	strb	r2, [r3, #0]
 8003634:	e7f7      	b.n	8003626 <_svfprintf_r+0xe0e>
 8003636:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8003638:	2f47      	cmp	r7, #71	; 0x47
 800363a:	ebc8 0303 	rsb	r3, r8, r3
 800363e:	9304      	str	r3, [sp, #16]
 8003640:	d108      	bne.n	8003654 <_svfprintf_r+0xe3c>
 8003642:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003644:	1cdf      	adds	r7, r3, #3
 8003646:	db01      	blt.n	800364c <_svfprintf_r+0xe34>
 8003648:	4599      	cmp	r9, r3
 800364a:	da68      	bge.n	800371e <_svfprintf_r+0xf06>
 800364c:	9b02      	ldr	r3, [sp, #8]
 800364e:	3b02      	subs	r3, #2
 8003650:	9302      	str	r3, [sp, #8]
 8003652:	e002      	b.n	800365a <_svfprintf_r+0xe42>
 8003654:	9b02      	ldr	r3, [sp, #8]
 8003656:	2b65      	cmp	r3, #101	; 0x65
 8003658:	dc4a      	bgt.n	80036f0 <_svfprintf_r+0xed8>
 800365a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800365c:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8003660:	f88d 206c 	strb.w	r2, [sp, #108]	; 0x6c
 8003664:	3b01      	subs	r3, #1
 8003666:	2b00      	cmp	r3, #0
 8003668:	9319      	str	r3, [sp, #100]	; 0x64
 800366a:	bfba      	itte	lt
 800366c:	425b      	neglt	r3, r3
 800366e:	222d      	movlt	r2, #45	; 0x2d
 8003670:	222b      	movge	r2, #43	; 0x2b
 8003672:	2b09      	cmp	r3, #9
 8003674:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 8003678:	dd24      	ble.n	80036c4 <_svfprintf_r+0xeac>
 800367a:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 800367e:	200a      	movs	r0, #10
 8003680:	fb93 f1f0 	sdiv	r1, r3, r0
 8003684:	fb00 3311 	mls	r3, r0, r1, r3
 8003688:	3330      	adds	r3, #48	; 0x30
 800368a:	2909      	cmp	r1, #9
 800368c:	f802 3d01 	strb.w	r3, [r2, #-1]!
 8003690:	460b      	mov	r3, r1
 8003692:	dcf5      	bgt.n	8003680 <_svfprintf_r+0xe68>
 8003694:	3330      	adds	r3, #48	; 0x30
 8003696:	f802 3c01 	strb.w	r3, [r2, #-1]
 800369a:	1e51      	subs	r1, r2, #1
 800369c:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
 80036a0:	f10d 007b 	add.w	r0, sp, #123	; 0x7b
 80036a4:	4281      	cmp	r1, r0
 80036a6:	461a      	mov	r2, r3
 80036a8:	d213      	bcs.n	80036d2 <_svfprintf_r+0xeba>
 80036aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80036ae:	f803 2b01 	strb.w	r2, [r3], #1
 80036b2:	e7f7      	b.n	80036a4 <_svfprintf_r+0xe8c>
 80036b4:	0800665c 	.word	0x0800665c
 80036b8:	080066a0 	.word	0x080066a0
 80036bc:	08006674 	.word	0x08006674
 80036c0:	08006678 	.word	0x08006678
 80036c4:	2230      	movs	r2, #48	; 0x30
 80036c6:	4413      	add	r3, r2
 80036c8:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 80036cc:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 80036d0:	aa1c      	add	r2, sp, #112	; 0x70
 80036d2:	ab1b      	add	r3, sp, #108	; 0x6c
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	9a04      	ldr	r2, [sp, #16]
 80036d8:	9310      	str	r3, [sp, #64]	; 0x40
 80036da:	2a01      	cmp	r2, #1
 80036dc:	eb03 0902 	add.w	r9, r3, r2
 80036e0:	dc02      	bgt.n	80036e8 <_svfprintf_r+0xed0>
 80036e2:	f015 0701 	ands.w	r7, r5, #1
 80036e6:	d032      	beq.n	800374e <_svfprintf_r+0xf36>
 80036e8:	9b08      	ldr	r3, [sp, #32]
 80036ea:	2700      	movs	r7, #0
 80036ec:	4499      	add	r9, r3
 80036ee:	e02e      	b.n	800374e <_svfprintf_r+0xf36>
 80036f0:	9b02      	ldr	r3, [sp, #8]
 80036f2:	2b66      	cmp	r3, #102	; 0x66
 80036f4:	d113      	bne.n	800371e <_svfprintf_r+0xf06>
 80036f6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	dd07      	ble.n	800370c <_svfprintf_r+0xef4>
 80036fc:	f1b9 0f00 	cmp.w	r9, #0
 8003700:	d101      	bne.n	8003706 <_svfprintf_r+0xeee>
 8003702:	07ee      	lsls	r6, r5, #31
 8003704:	d521      	bpl.n	800374a <_svfprintf_r+0xf32>
 8003706:	9a08      	ldr	r2, [sp, #32]
 8003708:	4413      	add	r3, r2
 800370a:	e006      	b.n	800371a <_svfprintf_r+0xf02>
 800370c:	f1b9 0f00 	cmp.w	r9, #0
 8003710:	d101      	bne.n	8003716 <_svfprintf_r+0xefe>
 8003712:	07ed      	lsls	r5, r5, #31
 8003714:	d514      	bpl.n	8003740 <_svfprintf_r+0xf28>
 8003716:	9b08      	ldr	r3, [sp, #32]
 8003718:	3301      	adds	r3, #1
 800371a:	444b      	add	r3, r9
 800371c:	e015      	b.n	800374a <_svfprintf_r+0xf32>
 800371e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8003720:	9a04      	ldr	r2, [sp, #16]
 8003722:	4293      	cmp	r3, r2
 8003724:	db03      	blt.n	800372e <_svfprintf_r+0xf16>
 8003726:	07e8      	lsls	r0, r5, #31
 8003728:	d50d      	bpl.n	8003746 <_svfprintf_r+0xf2e>
 800372a:	9a08      	ldr	r2, [sp, #32]
 800372c:	e006      	b.n	800373c <_svfprintf_r+0xf24>
 800372e:	9a04      	ldr	r2, [sp, #16]
 8003730:	9908      	ldr	r1, [sp, #32]
 8003732:	2b00      	cmp	r3, #0
 8003734:	440a      	add	r2, r1
 8003736:	dc05      	bgt.n	8003744 <_svfprintf_r+0xf2c>
 8003738:	f1c3 0301 	rsb	r3, r3, #1
 800373c:	4413      	add	r3, r2
 800373e:	e002      	b.n	8003746 <_svfprintf_r+0xf2e>
 8003740:	2301      	movs	r3, #1
 8003742:	e002      	b.n	800374a <_svfprintf_r+0xf32>
 8003744:	4613      	mov	r3, r2
 8003746:	2267      	movs	r2, #103	; 0x67
 8003748:	9202      	str	r2, [sp, #8]
 800374a:	9f19      	ldr	r7, [sp, #100]	; 0x64
 800374c:	4699      	mov	r9, r3
 800374e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003750:	b113      	cbz	r3, 8003758 <_svfprintf_r+0xf40>
 8003752:	232d      	movs	r3, #45	; 0x2d
 8003754:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8003758:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800375a:	2600      	movs	r6, #0
 800375c:	f7ff bb4c 	b.w	8002df8 <_svfprintf_r+0x5e0>
 8003760:	2200      	movs	r2, #0
 8003762:	2300      	movs	r3, #0
 8003764:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003768:	f7fd f9d4 	bl	8000b14 <__aeabi_dcmplt>
 800376c:	b110      	cbz	r0, 8003774 <_svfprintf_r+0xf5c>
 800376e:	232d      	movs	r3, #45	; 0x2d
 8003770:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8003774:	4b07      	ldr	r3, [pc, #28]	; (8003794 <_svfprintf_r+0xf7c>)
 8003776:	4a08      	ldr	r2, [pc, #32]	; (8003798 <_svfprintf_r+0xf80>)
 8003778:	e6e3      	b.n	8003542 <_svfprintf_r+0xd2a>
 800377a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800377c:	1a1b      	subs	r3, r3, r0
 800377e:	9304      	str	r3, [sp, #16]
 8003780:	e75f      	b.n	8003642 <_svfprintf_r+0xe2a>
 8003782:	ea56 0207 	orrs.w	r2, r6, r7
 8003786:	f47f aaaa 	bne.w	8002cde <_svfprintf_r+0x4c6>
 800378a:	f7ff baaf 	b.w	8002cec <_svfprintf_r+0x4d4>
 800378e:	b03d      	add	sp, #244	; 0xf4
 8003790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003794:	0800666c 	.word	0x0800666c
 8003798:	08006670 	.word	0x08006670

0800379c <quorem>:
 800379c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037a0:	6903      	ldr	r3, [r0, #16]
 80037a2:	690c      	ldr	r4, [r1, #16]
 80037a4:	429c      	cmp	r4, r3
 80037a6:	4680      	mov	r8, r0
 80037a8:	f300 8083 	bgt.w	80038b2 <quorem+0x116>
 80037ac:	3c01      	subs	r4, #1
 80037ae:	f101 0714 	add.w	r7, r1, #20
 80037b2:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 80037b6:	f100 0614 	add.w	r6, r0, #20
 80037ba:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80037be:	eb06 030e 	add.w	r3, r6, lr
 80037c2:	9301      	str	r3, [sp, #4]
 80037c4:	3501      	adds	r5, #1
 80037c6:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 80037ca:	fbb3 f5f5 	udiv	r5, r3, r5
 80037ce:	eb07 090e 	add.w	r9, r7, lr
 80037d2:	2d00      	cmp	r5, #0
 80037d4:	d039      	beq.n	800384a <quorem+0xae>
 80037d6:	f04f 0a00 	mov.w	sl, #0
 80037da:	4638      	mov	r0, r7
 80037dc:	46b4      	mov	ip, r6
 80037de:	46d3      	mov	fp, sl
 80037e0:	f850 2b04 	ldr.w	r2, [r0], #4
 80037e4:	b293      	uxth	r3, r2
 80037e6:	fb05 a303 	mla	r3, r5, r3, sl
 80037ea:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80037ee:	b29b      	uxth	r3, r3
 80037f0:	ebc3 030b 	rsb	r3, r3, fp
 80037f4:	0c12      	lsrs	r2, r2, #16
 80037f6:	f8bc b000 	ldrh.w	fp, [ip]
 80037fa:	fb05 a202 	mla	r2, r5, r2, sl
 80037fe:	fa13 f38b 	uxtah	r3, r3, fp
 8003802:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8003806:	fa1f fb82 	uxth.w	fp, r2
 800380a:	f8dc 2000 	ldr.w	r2, [ip]
 800380e:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8003812:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003816:	b29b      	uxth	r3, r3
 8003818:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800381c:	4581      	cmp	r9, r0
 800381e:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8003822:	f84c 3b04 	str.w	r3, [ip], #4
 8003826:	d2db      	bcs.n	80037e0 <quorem+0x44>
 8003828:	f856 300e 	ldr.w	r3, [r6, lr]
 800382c:	b96b      	cbnz	r3, 800384a <quorem+0xae>
 800382e:	9b01      	ldr	r3, [sp, #4]
 8003830:	3b04      	subs	r3, #4
 8003832:	429e      	cmp	r6, r3
 8003834:	461a      	mov	r2, r3
 8003836:	d302      	bcc.n	800383e <quorem+0xa2>
 8003838:	f8c8 4010 	str.w	r4, [r8, #16]
 800383c:	e005      	b.n	800384a <quorem+0xae>
 800383e:	6812      	ldr	r2, [r2, #0]
 8003840:	3b04      	subs	r3, #4
 8003842:	2a00      	cmp	r2, #0
 8003844:	d1f8      	bne.n	8003838 <quorem+0x9c>
 8003846:	3c01      	subs	r4, #1
 8003848:	e7f3      	b.n	8003832 <quorem+0x96>
 800384a:	4640      	mov	r0, r8
 800384c:	f001 fa1f 	bl	8004c8e <__mcmp>
 8003850:	2800      	cmp	r0, #0
 8003852:	db2c      	blt.n	80038ae <quorem+0x112>
 8003854:	3501      	adds	r5, #1
 8003856:	4630      	mov	r0, r6
 8003858:	f04f 0e00 	mov.w	lr, #0
 800385c:	f857 1b04 	ldr.w	r1, [r7], #4
 8003860:	f8d0 c000 	ldr.w	ip, [r0]
 8003864:	b28a      	uxth	r2, r1
 8003866:	ebc2 030e 	rsb	r3, r2, lr
 800386a:	0c09      	lsrs	r1, r1, #16
 800386c:	fa13 f38c 	uxtah	r3, r3, ip
 8003870:	ebc1 421c 	rsb	r2, r1, ip, lsr #16
 8003874:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003878:	b29b      	uxth	r3, r3
 800387a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800387e:	45b9      	cmp	r9, r7
 8003880:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8003884:	f840 3b04 	str.w	r3, [r0], #4
 8003888:	d2e8      	bcs.n	800385c <quorem+0xc0>
 800388a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800388e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8003892:	b962      	cbnz	r2, 80038ae <quorem+0x112>
 8003894:	3b04      	subs	r3, #4
 8003896:	429e      	cmp	r6, r3
 8003898:	461a      	mov	r2, r3
 800389a:	d302      	bcc.n	80038a2 <quorem+0x106>
 800389c:	f8c8 4010 	str.w	r4, [r8, #16]
 80038a0:	e005      	b.n	80038ae <quorem+0x112>
 80038a2:	6812      	ldr	r2, [r2, #0]
 80038a4:	3b04      	subs	r3, #4
 80038a6:	2a00      	cmp	r2, #0
 80038a8:	d1f8      	bne.n	800389c <quorem+0x100>
 80038aa:	3c01      	subs	r4, #1
 80038ac:	e7f3      	b.n	8003896 <quorem+0xfa>
 80038ae:	4628      	mov	r0, r5
 80038b0:	e000      	b.n	80038b4 <quorem+0x118>
 80038b2:	2000      	movs	r0, #0
 80038b4:	b003      	add	sp, #12
 80038b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038ba:	0000      	movs	r0, r0
 80038bc:	0000      	movs	r0, r0
	...

080038c0 <_dtoa_r>:
 80038c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038c4:	ec59 8b10 	vmov	r8, r9, d0
 80038c8:	b097      	sub	sp, #92	; 0x5c
 80038ca:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80038cc:	9106      	str	r1, [sp, #24]
 80038ce:	4682      	mov	sl, r0
 80038d0:	9209      	str	r2, [sp, #36]	; 0x24
 80038d2:	9310      	str	r3, [sp, #64]	; 0x40
 80038d4:	9c20      	ldr	r4, [sp, #128]	; 0x80
 80038d6:	e9cd 8900 	strd	r8, r9, [sp]
 80038da:	b945      	cbnz	r5, 80038ee <_dtoa_r+0x2e>
 80038dc:	2010      	movs	r0, #16
 80038de:	f000 fd93 	bl	8004408 <malloc>
 80038e2:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
 80038e6:	6045      	str	r5, [r0, #4]
 80038e8:	6085      	str	r5, [r0, #8]
 80038ea:	6005      	str	r5, [r0, #0]
 80038ec:	60c5      	str	r5, [r0, #12]
 80038ee:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 80038f2:	6819      	ldr	r1, [r3, #0]
 80038f4:	b159      	cbz	r1, 800390e <_dtoa_r+0x4e>
 80038f6:	685a      	ldr	r2, [r3, #4]
 80038f8:	604a      	str	r2, [r1, #4]
 80038fa:	2301      	movs	r3, #1
 80038fc:	4093      	lsls	r3, r2
 80038fe:	608b      	str	r3, [r1, #8]
 8003900:	4650      	mov	r0, sl
 8003902:	f000 ffeb 	bl	80048dc <_Bfree>
 8003906:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 800390a:	2200      	movs	r2, #0
 800390c:	601a      	str	r2, [r3, #0]
 800390e:	9b01      	ldr	r3, [sp, #4]
 8003910:	4a9f      	ldr	r2, [pc, #636]	; (8003b90 <_dtoa_r+0x2d0>)
 8003912:	2b00      	cmp	r3, #0
 8003914:	bfbf      	itttt	lt
 8003916:	2301      	movlt	r3, #1
 8003918:	6023      	strlt	r3, [r4, #0]
 800391a:	9b01      	ldrlt	r3, [sp, #4]
 800391c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003920:	bfb8      	it	lt
 8003922:	9301      	strlt	r3, [sp, #4]
 8003924:	9f01      	ldr	r7, [sp, #4]
 8003926:	bfa4      	itt	ge
 8003928:	2300      	movge	r3, #0
 800392a:	6023      	strge	r3, [r4, #0]
 800392c:	f027 4300 	bic.w	r3, r7, #2147483648	; 0x80000000
 8003930:	0d1b      	lsrs	r3, r3, #20
 8003932:	051b      	lsls	r3, r3, #20
 8003934:	4293      	cmp	r3, r2
 8003936:	d11d      	bne.n	8003974 <_dtoa_r+0xb4>
 8003938:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800393a:	f242 730f 	movw	r3, #9999	; 0x270f
 800393e:	6013      	str	r3, [r2, #0]
 8003940:	9b00      	ldr	r3, [sp, #0]
 8003942:	b943      	cbnz	r3, 8003956 <_dtoa_r+0x96>
 8003944:	4a93      	ldr	r2, [pc, #588]	; (8003b94 <_dtoa_r+0x2d4>)
 8003946:	4b94      	ldr	r3, [pc, #592]	; (8003b98 <_dtoa_r+0x2d8>)
 8003948:	f3c7 0013 	ubfx	r0, r7, #0, #20
 800394c:	2800      	cmp	r0, #0
 800394e:	bf14      	ite	ne
 8003950:	4618      	movne	r0, r3
 8003952:	4610      	moveq	r0, r2
 8003954:	e000      	b.n	8003958 <_dtoa_r+0x98>
 8003956:	4890      	ldr	r0, [pc, #576]	; (8003b98 <_dtoa_r+0x2d8>)
 8003958:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800395a:	2b00      	cmp	r3, #0
 800395c:	f000 854a 	beq.w	80043f4 <_dtoa_r+0xb34>
 8003960:	78c3      	ldrb	r3, [r0, #3]
 8003962:	b113      	cbz	r3, 800396a <_dtoa_r+0xaa>
 8003964:	f100 0308 	add.w	r3, r0, #8
 8003968:	e000      	b.n	800396c <_dtoa_r+0xac>
 800396a:	1cc3      	adds	r3, r0, #3
 800396c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800396e:	6013      	str	r3, [r2, #0]
 8003970:	f000 bd40 	b.w	80043f4 <_dtoa_r+0xb34>
 8003974:	e9dd 4500 	ldrd	r4, r5, [sp]
 8003978:	2200      	movs	r2, #0
 800397a:	2300      	movs	r3, #0
 800397c:	4620      	mov	r0, r4
 800397e:	4629      	mov	r1, r5
 8003980:	f7fd f8be 	bl	8000b00 <__aeabi_dcmpeq>
 8003984:	4680      	mov	r8, r0
 8003986:	b158      	cbz	r0, 80039a0 <_dtoa_r+0xe0>
 8003988:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800398a:	2301      	movs	r3, #1
 800398c:	6013      	str	r3, [r2, #0]
 800398e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003990:	2b00      	cmp	r3, #0
 8003992:	f000 8522 	beq.w	80043da <_dtoa_r+0xb1a>
 8003996:	4881      	ldr	r0, [pc, #516]	; (8003b9c <_dtoa_r+0x2dc>)
 8003998:	6018      	str	r0, [r3, #0]
 800399a:	3801      	subs	r0, #1
 800399c:	f000 bd2a 	b.w	80043f4 <_dtoa_r+0xb34>
 80039a0:	aa14      	add	r2, sp, #80	; 0x50
 80039a2:	a915      	add	r1, sp, #84	; 0x54
 80039a4:	ec45 4b10 	vmov	d0, r4, r5
 80039a8:	4650      	mov	r0, sl
 80039aa:	f001 f9eb 	bl	8004d84 <__d2b>
 80039ae:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80039b2:	9002      	str	r0, [sp, #8]
 80039b4:	b15e      	cbz	r6, 80039ce <_dtoa_r+0x10e>
 80039b6:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80039ba:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80039be:	4620      	mov	r0, r4
 80039c0:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80039c4:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
 80039c8:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
 80039cc:	e01d      	b.n	8003a0a <_dtoa_r+0x14a>
 80039ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80039d0:	9e14      	ldr	r6, [sp, #80]	; 0x50
 80039d2:	441e      	add	r6, r3
 80039d4:	f206 4332 	addw	r3, r6, #1074	; 0x432
 80039d8:	2b20      	cmp	r3, #32
 80039da:	dd0a      	ble.n	80039f2 <_dtoa_r+0x132>
 80039dc:	9a00      	ldr	r2, [sp, #0]
 80039de:	f206 4012 	addw	r0, r6, #1042	; 0x412
 80039e2:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80039e6:	fa22 f000 	lsr.w	r0, r2, r0
 80039ea:	fa07 f303 	lsl.w	r3, r7, r3
 80039ee:	4318      	orrs	r0, r3
 80039f0:	e004      	b.n	80039fc <_dtoa_r+0x13c>
 80039f2:	f1c3 0020 	rsb	r0, r3, #32
 80039f6:	9b00      	ldr	r3, [sp, #0]
 80039f8:	fa03 f000 	lsl.w	r0, r3, r0
 80039fc:	f7fc fda2 	bl	8000544 <__aeabi_ui2d>
 8003a00:	2301      	movs	r3, #1
 8003a02:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8003a06:	3e01      	subs	r6, #1
 8003a08:	9311      	str	r3, [sp, #68]	; 0x44
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	4b64      	ldr	r3, [pc, #400]	; (8003ba0 <_dtoa_r+0x2e0>)
 8003a0e:	f7fc fc5b 	bl	80002c8 <__aeabi_dsub>
 8003a12:	a359      	add	r3, pc, #356	; (adr r3, 8003b78 <_dtoa_r+0x2b8>)
 8003a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a18:	f7fc fe0a 	bl	8000630 <__aeabi_dmul>
 8003a1c:	a358      	add	r3, pc, #352	; (adr r3, 8003b80 <_dtoa_r+0x2c0>)
 8003a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a22:	f7fc fc53 	bl	80002cc <__adddf3>
 8003a26:	4604      	mov	r4, r0
 8003a28:	4630      	mov	r0, r6
 8003a2a:	460d      	mov	r5, r1
 8003a2c:	f7fc fd9a 	bl	8000564 <__aeabi_i2d>
 8003a30:	a355      	add	r3, pc, #340	; (adr r3, 8003b88 <_dtoa_r+0x2c8>)
 8003a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a36:	f7fc fdfb 	bl	8000630 <__aeabi_dmul>
 8003a3a:	4602      	mov	r2, r0
 8003a3c:	460b      	mov	r3, r1
 8003a3e:	4620      	mov	r0, r4
 8003a40:	4629      	mov	r1, r5
 8003a42:	f7fc fc43 	bl	80002cc <__adddf3>
 8003a46:	4604      	mov	r4, r0
 8003a48:	460d      	mov	r5, r1
 8003a4a:	f7fd f8a1 	bl	8000b90 <__aeabi_d2iz>
 8003a4e:	2200      	movs	r2, #0
 8003a50:	4683      	mov	fp, r0
 8003a52:	2300      	movs	r3, #0
 8003a54:	4620      	mov	r0, r4
 8003a56:	4629      	mov	r1, r5
 8003a58:	f7fd f85c 	bl	8000b14 <__aeabi_dcmplt>
 8003a5c:	b158      	cbz	r0, 8003a76 <_dtoa_r+0x1b6>
 8003a5e:	4658      	mov	r0, fp
 8003a60:	f7fc fd80 	bl	8000564 <__aeabi_i2d>
 8003a64:	4602      	mov	r2, r0
 8003a66:	460b      	mov	r3, r1
 8003a68:	4620      	mov	r0, r4
 8003a6a:	4629      	mov	r1, r5
 8003a6c:	f7fd f848 	bl	8000b00 <__aeabi_dcmpeq>
 8003a70:	b908      	cbnz	r0, 8003a76 <_dtoa_r+0x1b6>
 8003a72:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003a76:	f1bb 0f16 	cmp.w	fp, #22
 8003a7a:	d80d      	bhi.n	8003a98 <_dtoa_r+0x1d8>
 8003a7c:	4949      	ldr	r1, [pc, #292]	; (8003ba4 <_dtoa_r+0x2e4>)
 8003a7e:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8003a82:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003a86:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003a8a:	f7fd f861 	bl	8000b50 <__aeabi_dcmpgt>
 8003a8e:	b130      	cbz	r0, 8003a9e <_dtoa_r+0x1de>
 8003a90:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003a94:	2300      	movs	r3, #0
 8003a96:	e000      	b.n	8003a9a <_dtoa_r+0x1da>
 8003a98:	2301      	movs	r3, #1
 8003a9a:	930d      	str	r3, [sp, #52]	; 0x34
 8003a9c:	e000      	b.n	8003aa0 <_dtoa_r+0x1e0>
 8003a9e:	900d      	str	r0, [sp, #52]	; 0x34
 8003aa0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003aa2:	1b9e      	subs	r6, r3, r6
 8003aa4:	1e73      	subs	r3, r6, #1
 8003aa6:	9305      	str	r3, [sp, #20]
 8003aa8:	bf43      	ittte	mi
 8003aaa:	f1c3 0900 	rsbmi	r9, r3, #0
 8003aae:	2300      	movmi	r3, #0
 8003ab0:	9305      	strmi	r3, [sp, #20]
 8003ab2:	f04f 0900 	movpl.w	r9, #0
 8003ab6:	f1bb 0f00 	cmp.w	fp, #0
 8003aba:	db07      	blt.n	8003acc <_dtoa_r+0x20c>
 8003abc:	9b05      	ldr	r3, [sp, #20]
 8003abe:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 8003ac2:	445b      	add	r3, fp
 8003ac4:	9305      	str	r3, [sp, #20]
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	9307      	str	r3, [sp, #28]
 8003aca:	e006      	b.n	8003ada <_dtoa_r+0x21a>
 8003acc:	f1cb 0300 	rsb	r3, fp, #0
 8003ad0:	9307      	str	r3, [sp, #28]
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	ebcb 0909 	rsb	r9, fp, r9
 8003ad8:	930c      	str	r3, [sp, #48]	; 0x30
 8003ada:	9b06      	ldr	r3, [sp, #24]
 8003adc:	2b09      	cmp	r3, #9
 8003ade:	d827      	bhi.n	8003b30 <_dtoa_r+0x270>
 8003ae0:	2b05      	cmp	r3, #5
 8003ae2:	bfc4      	itt	gt
 8003ae4:	3b04      	subgt	r3, #4
 8003ae6:	9306      	strgt	r3, [sp, #24]
 8003ae8:	9b06      	ldr	r3, [sp, #24]
 8003aea:	f1a3 0302 	sub.w	r3, r3, #2
 8003aee:	bfcc      	ite	gt
 8003af0:	2500      	movgt	r5, #0
 8003af2:	2501      	movle	r5, #1
 8003af4:	2b03      	cmp	r3, #3
 8003af6:	d820      	bhi.n	8003b3a <_dtoa_r+0x27a>
 8003af8:	e8df f003 	tbb	[pc, r3]
 8003afc:	04020e06 	.word	0x04020e06
 8003b00:	2301      	movs	r3, #1
 8003b02:	e002      	b.n	8003b0a <_dtoa_r+0x24a>
 8003b04:	2301      	movs	r3, #1
 8003b06:	e008      	b.n	8003b1a <_dtoa_r+0x25a>
 8003b08:	2300      	movs	r3, #0
 8003b0a:	9308      	str	r3, [sp, #32]
 8003b0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	dd1c      	ble.n	8003b4c <_dtoa_r+0x28c>
 8003b12:	9303      	str	r3, [sp, #12]
 8003b14:	4698      	mov	r8, r3
 8003b16:	e01e      	b.n	8003b56 <_dtoa_r+0x296>
 8003b18:	2300      	movs	r3, #0
 8003b1a:	9308      	str	r3, [sp, #32]
 8003b1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b1e:	445b      	add	r3, fp
 8003b20:	f103 0801 	add.w	r8, r3, #1
 8003b24:	9303      	str	r3, [sp, #12]
 8003b26:	4643      	mov	r3, r8
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	bfb8      	it	lt
 8003b2c:	2301      	movlt	r3, #1
 8003b2e:	e012      	b.n	8003b56 <_dtoa_r+0x296>
 8003b30:	2501      	movs	r5, #1
 8003b32:	2300      	movs	r3, #0
 8003b34:	9306      	str	r3, [sp, #24]
 8003b36:	9508      	str	r5, [sp, #32]
 8003b38:	e001      	b.n	8003b3e <_dtoa_r+0x27e>
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	9308      	str	r3, [sp, #32]
 8003b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8003b42:	9303      	str	r3, [sp, #12]
 8003b44:	4698      	mov	r8, r3
 8003b46:	2200      	movs	r2, #0
 8003b48:	2312      	movs	r3, #18
 8003b4a:	e003      	b.n	8003b54 <_dtoa_r+0x294>
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	9303      	str	r3, [sp, #12]
 8003b50:	4698      	mov	r8, r3
 8003b52:	461a      	mov	r2, r3
 8003b54:	9209      	str	r2, [sp, #36]	; 0x24
 8003b56:	f8da 4024 	ldr.w	r4, [sl, #36]	; 0x24
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	6062      	str	r2, [r4, #4]
 8003b5e:	2104      	movs	r1, #4
 8003b60:	f101 0214 	add.w	r2, r1, #20
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d81f      	bhi.n	8003ba8 <_dtoa_r+0x2e8>
 8003b68:	6862      	ldr	r2, [r4, #4]
 8003b6a:	3201      	adds	r2, #1
 8003b6c:	6062      	str	r2, [r4, #4]
 8003b6e:	0049      	lsls	r1, r1, #1
 8003b70:	e7f6      	b.n	8003b60 <_dtoa_r+0x2a0>
 8003b72:	bf00      	nop
 8003b74:	f3af 8000 	nop.w
 8003b78:	636f4361 	.word	0x636f4361
 8003b7c:	3fd287a7 	.word	0x3fd287a7
 8003b80:	8b60c8b3 	.word	0x8b60c8b3
 8003b84:	3fc68a28 	.word	0x3fc68a28
 8003b88:	509f79fb 	.word	0x509f79fb
 8003b8c:	3fd34413 	.word	0x3fd34413
 8003b90:	7ff00000 	.word	0x7ff00000
 8003b94:	080066b0 	.word	0x080066b0
 8003b98:	080066b9 	.word	0x080066b9
 8003b9c:	0800669f 	.word	0x0800669f
 8003ba0:	3ff80000 	.word	0x3ff80000
 8003ba4:	080066c8 	.word	0x080066c8
 8003ba8:	6861      	ldr	r1, [r4, #4]
 8003baa:	4650      	mov	r0, sl
 8003bac:	f000 fe61 	bl	8004872 <_Balloc>
 8003bb0:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 8003bb4:	6020      	str	r0, [r4, #0]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	9304      	str	r3, [sp, #16]
 8003bba:	f1b8 0f0e 	cmp.w	r8, #14
 8003bbe:	f200 815d 	bhi.w	8003e7c <_dtoa_r+0x5bc>
 8003bc2:	2d00      	cmp	r5, #0
 8003bc4:	f000 815a 	beq.w	8003e7c <_dtoa_r+0x5bc>
 8003bc8:	ed9d 7b00 	vldr	d7, [sp]
 8003bcc:	f1bb 0f00 	cmp.w	fp, #0
 8003bd0:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8003bd4:	dd31      	ble.n	8003c3a <_dtoa_r+0x37a>
 8003bd6:	4aa0      	ldr	r2, [pc, #640]	; (8003e58 <_dtoa_r+0x598>)
 8003bd8:	f00b 030f 	and.w	r3, fp, #15
 8003bdc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003be0:	ed93 7b00 	vldr	d7, [r3]
 8003be4:	ea4f 142b 	mov.w	r4, fp, asr #4
 8003be8:	06e2      	lsls	r2, r4, #27
 8003bea:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8003bee:	d50c      	bpl.n	8003c0a <_dtoa_r+0x34a>
 8003bf0:	4b9a      	ldr	r3, [pc, #616]	; (8003e5c <_dtoa_r+0x59c>)
 8003bf2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8003bf6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003bfa:	f7fc fe43 	bl	8000884 <__aeabi_ddiv>
 8003bfe:	f004 040f 	and.w	r4, r4, #15
 8003c02:	e9cd 0100 	strd	r0, r1, [sp]
 8003c06:	2603      	movs	r6, #3
 8003c08:	e000      	b.n	8003c0c <_dtoa_r+0x34c>
 8003c0a:	2602      	movs	r6, #2
 8003c0c:	4d93      	ldr	r5, [pc, #588]	; (8003e5c <_dtoa_r+0x59c>)
 8003c0e:	b16c      	cbz	r4, 8003c2c <_dtoa_r+0x36c>
 8003c10:	07e3      	lsls	r3, r4, #31
 8003c12:	d508      	bpl.n	8003c26 <_dtoa_r+0x366>
 8003c14:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003c18:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003c1c:	f7fc fd08 	bl	8000630 <__aeabi_dmul>
 8003c20:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003c24:	3601      	adds	r6, #1
 8003c26:	1064      	asrs	r4, r4, #1
 8003c28:	3508      	adds	r5, #8
 8003c2a:	e7f0      	b.n	8003c0e <_dtoa_r+0x34e>
 8003c2c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003c30:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003c34:	f7fc fe26 	bl	8000884 <__aeabi_ddiv>
 8003c38:	e020      	b.n	8003c7c <_dtoa_r+0x3bc>
 8003c3a:	f1cb 0400 	rsb	r4, fp, #0
 8003c3e:	b304      	cbz	r4, 8003c82 <_dtoa_r+0x3c2>
 8003c40:	4b85      	ldr	r3, [pc, #532]	; (8003e58 <_dtoa_r+0x598>)
 8003c42:	4d86      	ldr	r5, [pc, #536]	; (8003e5c <_dtoa_r+0x59c>)
 8003c44:	f004 020f 	and.w	r2, r4, #15
 8003c48:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c50:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8003c54:	f7fc fcec 	bl	8000630 <__aeabi_dmul>
 8003c58:	e9cd 0100 	strd	r0, r1, [sp]
 8003c5c:	1124      	asrs	r4, r4, #4
 8003c5e:	2300      	movs	r3, #0
 8003c60:	2602      	movs	r6, #2
 8003c62:	b154      	cbz	r4, 8003c7a <_dtoa_r+0x3ba>
 8003c64:	07e7      	lsls	r7, r4, #31
 8003c66:	d505      	bpl.n	8003c74 <_dtoa_r+0x3b4>
 8003c68:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003c6c:	f7fc fce0 	bl	8000630 <__aeabi_dmul>
 8003c70:	3601      	adds	r6, #1
 8003c72:	2301      	movs	r3, #1
 8003c74:	1064      	asrs	r4, r4, #1
 8003c76:	3508      	adds	r5, #8
 8003c78:	e7f3      	b.n	8003c62 <_dtoa_r+0x3a2>
 8003c7a:	b11b      	cbz	r3, 8003c84 <_dtoa_r+0x3c4>
 8003c7c:	e9cd 0100 	strd	r0, r1, [sp]
 8003c80:	e000      	b.n	8003c84 <_dtoa_r+0x3c4>
 8003c82:	2602      	movs	r6, #2
 8003c84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003c86:	b1eb      	cbz	r3, 8003cc4 <_dtoa_r+0x404>
 8003c88:	e9dd 4500 	ldrd	r4, r5, [sp]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	4b74      	ldr	r3, [pc, #464]	; (8003e60 <_dtoa_r+0x5a0>)
 8003c90:	4620      	mov	r0, r4
 8003c92:	4629      	mov	r1, r5
 8003c94:	f7fc ff3e 	bl	8000b14 <__aeabi_dcmplt>
 8003c98:	b1a0      	cbz	r0, 8003cc4 <_dtoa_r+0x404>
 8003c9a:	f1b8 0f00 	cmp.w	r8, #0
 8003c9e:	d011      	beq.n	8003cc4 <_dtoa_r+0x404>
 8003ca0:	9b03      	ldr	r3, [sp, #12]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	f340 80e6 	ble.w	8003e74 <_dtoa_r+0x5b4>
 8003ca8:	f10b 33ff 	add.w	r3, fp, #4294967295
 8003cac:	930a      	str	r3, [sp, #40]	; 0x28
 8003cae:	2200      	movs	r2, #0
 8003cb0:	4b6c      	ldr	r3, [pc, #432]	; (8003e64 <_dtoa_r+0x5a4>)
 8003cb2:	4620      	mov	r0, r4
 8003cb4:	4629      	mov	r1, r5
 8003cb6:	f7fc fcbb 	bl	8000630 <__aeabi_dmul>
 8003cba:	3601      	adds	r6, #1
 8003cbc:	e9cd 0100 	strd	r0, r1, [sp]
 8003cc0:	9f03      	ldr	r7, [sp, #12]
 8003cc2:	e002      	b.n	8003cca <_dtoa_r+0x40a>
 8003cc4:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8003cc8:	4647      	mov	r7, r8
 8003cca:	4630      	mov	r0, r6
 8003ccc:	f7fc fc4a 	bl	8000564 <__aeabi_i2d>
 8003cd0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003cd4:	f7fc fcac 	bl	8000630 <__aeabi_dmul>
 8003cd8:	2200      	movs	r2, #0
 8003cda:	4b63      	ldr	r3, [pc, #396]	; (8003e68 <_dtoa_r+0x5a8>)
 8003cdc:	f7fc faf6 	bl	80002cc <__adddf3>
 8003ce0:	4604      	mov	r4, r0
 8003ce2:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8003ce6:	b9cf      	cbnz	r7, 8003d1c <_dtoa_r+0x45c>
 8003ce8:	2200      	movs	r2, #0
 8003cea:	4b60      	ldr	r3, [pc, #384]	; (8003e6c <_dtoa_r+0x5ac>)
 8003cec:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003cf0:	f7fc faea 	bl	80002c8 <__aeabi_dsub>
 8003cf4:	4622      	mov	r2, r4
 8003cf6:	462b      	mov	r3, r5
 8003cf8:	e9cd 0100 	strd	r0, r1, [sp]
 8003cfc:	f7fc ff28 	bl	8000b50 <__aeabi_dcmpgt>
 8003d00:	2800      	cmp	r0, #0
 8003d02:	f040 8241 	bne.w	8004188 <_dtoa_r+0x8c8>
 8003d06:	4622      	mov	r2, r4
 8003d08:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8003d0c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003d10:	f7fc ff00 	bl	8000b14 <__aeabi_dcmplt>
 8003d14:	2800      	cmp	r0, #0
 8003d16:	f040 822e 	bne.w	8004176 <_dtoa_r+0x8b6>
 8003d1a:	e0ab      	b.n	8003e74 <_dtoa_r+0x5b4>
 8003d1c:	9a08      	ldr	r2, [sp, #32]
 8003d1e:	4b4e      	ldr	r3, [pc, #312]	; (8003e58 <_dtoa_r+0x598>)
 8003d20:	1e79      	subs	r1, r7, #1
 8003d22:	2a00      	cmp	r2, #0
 8003d24:	d04a      	beq.n	8003dbc <_dtoa_r+0x4fc>
 8003d26:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8003d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d2e:	2000      	movs	r0, #0
 8003d30:	494f      	ldr	r1, [pc, #316]	; (8003e70 <_dtoa_r+0x5b0>)
 8003d32:	f7fc fda7 	bl	8000884 <__aeabi_ddiv>
 8003d36:	4622      	mov	r2, r4
 8003d38:	462b      	mov	r3, r5
 8003d3a:	f7fc fac5 	bl	80002c8 <__aeabi_dsub>
 8003d3e:	9c04      	ldr	r4, [sp, #16]
 8003d40:	4605      	mov	r5, r0
 8003d42:	460e      	mov	r6, r1
 8003d44:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003d48:	f7fc ff22 	bl	8000b90 <__aeabi_d2iz>
 8003d4c:	9012      	str	r0, [sp, #72]	; 0x48
 8003d4e:	f7fc fc09 	bl	8000564 <__aeabi_i2d>
 8003d52:	4602      	mov	r2, r0
 8003d54:	460b      	mov	r3, r1
 8003d56:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003d5a:	f7fc fab5 	bl	80002c8 <__aeabi_dsub>
 8003d5e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003d60:	3330      	adds	r3, #48	; 0x30
 8003d62:	f804 3b01 	strb.w	r3, [r4], #1
 8003d66:	462a      	mov	r2, r5
 8003d68:	4633      	mov	r3, r6
 8003d6a:	e9cd 0100 	strd	r0, r1, [sp]
 8003d6e:	f7fc fed1 	bl	8000b14 <__aeabi_dcmplt>
 8003d72:	2800      	cmp	r0, #0
 8003d74:	f040 8321 	bne.w	80043ba <_dtoa_r+0xafa>
 8003d78:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003d7c:	2000      	movs	r0, #0
 8003d7e:	4938      	ldr	r1, [pc, #224]	; (8003e60 <_dtoa_r+0x5a0>)
 8003d80:	f7fc faa2 	bl	80002c8 <__aeabi_dsub>
 8003d84:	462a      	mov	r2, r5
 8003d86:	4633      	mov	r3, r6
 8003d88:	f7fc fec4 	bl	8000b14 <__aeabi_dcmplt>
 8003d8c:	2800      	cmp	r0, #0
 8003d8e:	f040 80d2 	bne.w	8003f36 <_dtoa_r+0x676>
 8003d92:	9b04      	ldr	r3, [sp, #16]
 8003d94:	1ae3      	subs	r3, r4, r3
 8003d96:	42bb      	cmp	r3, r7
 8003d98:	da6c      	bge.n	8003e74 <_dtoa_r+0x5b4>
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	4b31      	ldr	r3, [pc, #196]	; (8003e64 <_dtoa_r+0x5a4>)
 8003d9e:	4628      	mov	r0, r5
 8003da0:	4631      	mov	r1, r6
 8003da2:	f7fc fc45 	bl	8000630 <__aeabi_dmul>
 8003da6:	2200      	movs	r2, #0
 8003da8:	4605      	mov	r5, r0
 8003daa:	460e      	mov	r6, r1
 8003dac:	4b2d      	ldr	r3, [pc, #180]	; (8003e64 <_dtoa_r+0x5a4>)
 8003dae:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003db2:	f7fc fc3d 	bl	8000630 <__aeabi_dmul>
 8003db6:	e9cd 0100 	strd	r0, r1, [sp]
 8003dba:	e7c3      	b.n	8003d44 <_dtoa_r+0x484>
 8003dbc:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8003dc0:	4622      	mov	r2, r4
 8003dc2:	462b      	mov	r3, r5
 8003dc4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003dc8:	f7fc fc32 	bl	8000630 <__aeabi_dmul>
 8003dcc:	9b04      	ldr	r3, [sp, #16]
 8003dce:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8003dd2:	19dc      	adds	r4, r3, r7
 8003dd4:	461d      	mov	r5, r3
 8003dd6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003dda:	f7fc fed9 	bl	8000b90 <__aeabi_d2iz>
 8003dde:	4606      	mov	r6, r0
 8003de0:	f7fc fbc0 	bl	8000564 <__aeabi_i2d>
 8003de4:	3630      	adds	r6, #48	; 0x30
 8003de6:	4602      	mov	r2, r0
 8003de8:	460b      	mov	r3, r1
 8003dea:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003dee:	f7fc fa6b 	bl	80002c8 <__aeabi_dsub>
 8003df2:	f805 6b01 	strb.w	r6, [r5], #1
 8003df6:	42ac      	cmp	r4, r5
 8003df8:	e9cd 0100 	strd	r0, r1, [sp]
 8003dfc:	f04f 0200 	mov.w	r2, #0
 8003e00:	d123      	bne.n	8003e4a <_dtoa_r+0x58a>
 8003e02:	4b1b      	ldr	r3, [pc, #108]	; (8003e70 <_dtoa_r+0x5b0>)
 8003e04:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8003e08:	f7fc fa60 	bl	80002cc <__adddf3>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	460b      	mov	r3, r1
 8003e10:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003e14:	f7fc fe9c 	bl	8000b50 <__aeabi_dcmpgt>
 8003e18:	2800      	cmp	r0, #0
 8003e1a:	f040 808c 	bne.w	8003f36 <_dtoa_r+0x676>
 8003e1e:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8003e22:	2000      	movs	r0, #0
 8003e24:	4912      	ldr	r1, [pc, #72]	; (8003e70 <_dtoa_r+0x5b0>)
 8003e26:	f7fc fa4f 	bl	80002c8 <__aeabi_dsub>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	460b      	mov	r3, r1
 8003e2e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003e32:	f7fc fe6f 	bl	8000b14 <__aeabi_dcmplt>
 8003e36:	b1e8      	cbz	r0, 8003e74 <_dtoa_r+0x5b4>
 8003e38:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 8003e3c:	2b30      	cmp	r3, #48	; 0x30
 8003e3e:	f104 32ff 	add.w	r2, r4, #4294967295
 8003e42:	f040 82ba 	bne.w	80043ba <_dtoa_r+0xafa>
 8003e46:	4614      	mov	r4, r2
 8003e48:	e7f6      	b.n	8003e38 <_dtoa_r+0x578>
 8003e4a:	4b06      	ldr	r3, [pc, #24]	; (8003e64 <_dtoa_r+0x5a4>)
 8003e4c:	f7fc fbf0 	bl	8000630 <__aeabi_dmul>
 8003e50:	e9cd 0100 	strd	r0, r1, [sp]
 8003e54:	e7bf      	b.n	8003dd6 <_dtoa_r+0x516>
 8003e56:	bf00      	nop
 8003e58:	080066c8 	.word	0x080066c8
 8003e5c:	08006790 	.word	0x08006790
 8003e60:	3ff00000 	.word	0x3ff00000
 8003e64:	40240000 	.word	0x40240000
 8003e68:	401c0000 	.word	0x401c0000
 8003e6c:	40140000 	.word	0x40140000
 8003e70:	3fe00000 	.word	0x3fe00000
 8003e74:	e9dd 340e 	ldrd	r3, r4, [sp, #56]	; 0x38
 8003e78:	e88d 0018 	stmia.w	sp, {r3, r4}
 8003e7c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	db7c      	blt.n	8003f7c <_dtoa_r+0x6bc>
 8003e82:	f1bb 0f0e 	cmp.w	fp, #14
 8003e86:	dc79      	bgt.n	8003f7c <_dtoa_r+0x6bc>
 8003e88:	4b8f      	ldr	r3, [pc, #572]	; (80040c8 <_dtoa_r+0x808>)
 8003e8a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8003e8e:	e9d3 6700 	ldrd	r6, r7, [r3]
 8003e92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	da14      	bge.n	8003ec2 <_dtoa_r+0x602>
 8003e98:	f1b8 0f00 	cmp.w	r8, #0
 8003e9c:	dc11      	bgt.n	8003ec2 <_dtoa_r+0x602>
 8003e9e:	f040 816c 	bne.w	800417a <_dtoa_r+0x8ba>
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	4b89      	ldr	r3, [pc, #548]	; (80040cc <_dtoa_r+0x80c>)
 8003ea6:	4630      	mov	r0, r6
 8003ea8:	4639      	mov	r1, r7
 8003eaa:	f7fc fbc1 	bl	8000630 <__aeabi_dmul>
 8003eae:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003eb2:	f7fc fe43 	bl	8000b3c <__aeabi_dcmpge>
 8003eb6:	4645      	mov	r5, r8
 8003eb8:	4646      	mov	r6, r8
 8003eba:	2800      	cmp	r0, #0
 8003ebc:	f040 815f 	bne.w	800417e <_dtoa_r+0x8be>
 8003ec0:	e166      	b.n	8004190 <_dtoa_r+0x8d0>
 8003ec2:	9c04      	ldr	r4, [sp, #16]
 8003ec4:	4632      	mov	r2, r6
 8003ec6:	463b      	mov	r3, r7
 8003ec8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003ecc:	f7fc fcda 	bl	8000884 <__aeabi_ddiv>
 8003ed0:	f7fc fe5e 	bl	8000b90 <__aeabi_d2iz>
 8003ed4:	4605      	mov	r5, r0
 8003ed6:	f7fc fb45 	bl	8000564 <__aeabi_i2d>
 8003eda:	4632      	mov	r2, r6
 8003edc:	463b      	mov	r3, r7
 8003ede:	f7fc fba7 	bl	8000630 <__aeabi_dmul>
 8003ee2:	460b      	mov	r3, r1
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003eea:	f7fc f9ed 	bl	80002c8 <__aeabi_dsub>
 8003eee:	f105 0e30 	add.w	lr, r5, #48	; 0x30
 8003ef2:	f804 eb01 	strb.w	lr, [r4], #1
 8003ef6:	9b04      	ldr	r3, [sp, #16]
 8003ef8:	ebc3 0e04 	rsb	lr, r3, r4
 8003efc:	45f0      	cmp	r8, lr
 8003efe:	e9cd 0100 	strd	r0, r1, [sp]
 8003f02:	d12e      	bne.n	8003f62 <_dtoa_r+0x6a2>
 8003f04:	4602      	mov	r2, r0
 8003f06:	460b      	mov	r3, r1
 8003f08:	f7fc f9e0 	bl	80002cc <__adddf3>
 8003f0c:	4680      	mov	r8, r0
 8003f0e:	4689      	mov	r9, r1
 8003f10:	4602      	mov	r2, r0
 8003f12:	460b      	mov	r3, r1
 8003f14:	4630      	mov	r0, r6
 8003f16:	4639      	mov	r1, r7
 8003f18:	f7fc fdfc 	bl	8000b14 <__aeabi_dcmplt>
 8003f1c:	b978      	cbnz	r0, 8003f3e <_dtoa_r+0x67e>
 8003f1e:	4642      	mov	r2, r8
 8003f20:	464b      	mov	r3, r9
 8003f22:	4630      	mov	r0, r6
 8003f24:	4639      	mov	r1, r7
 8003f26:	f7fc fdeb 	bl	8000b00 <__aeabi_dcmpeq>
 8003f2a:	2800      	cmp	r0, #0
 8003f2c:	f000 8247 	beq.w	80043be <_dtoa_r+0xafe>
 8003f30:	07e9      	lsls	r1, r5, #31
 8003f32:	d404      	bmi.n	8003f3e <_dtoa_r+0x67e>
 8003f34:	e243      	b.n	80043be <_dtoa_r+0xafe>
 8003f36:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 8003f3a:	e000      	b.n	8003f3e <_dtoa_r+0x67e>
 8003f3c:	461c      	mov	r4, r3
 8003f3e:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 8003f42:	2a39      	cmp	r2, #57	; 0x39
 8003f44:	f104 33ff 	add.w	r3, r4, #4294967295
 8003f48:	d107      	bne.n	8003f5a <_dtoa_r+0x69a>
 8003f4a:	9a04      	ldr	r2, [sp, #16]
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d1f5      	bne.n	8003f3c <_dtoa_r+0x67c>
 8003f50:	9904      	ldr	r1, [sp, #16]
 8003f52:	2230      	movs	r2, #48	; 0x30
 8003f54:	f10b 0b01 	add.w	fp, fp, #1
 8003f58:	700a      	strb	r2, [r1, #0]
 8003f5a:	781a      	ldrb	r2, [r3, #0]
 8003f5c:	3201      	adds	r2, #1
 8003f5e:	701a      	strb	r2, [r3, #0]
 8003f60:	e22d      	b.n	80043be <_dtoa_r+0xafe>
 8003f62:	2200      	movs	r2, #0
 8003f64:	4b5a      	ldr	r3, [pc, #360]	; (80040d0 <_dtoa_r+0x810>)
 8003f66:	f7fc fb63 	bl	8000630 <__aeabi_dmul>
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	e9cd 0100 	strd	r0, r1, [sp]
 8003f72:	f7fc fdc5 	bl	8000b00 <__aeabi_dcmpeq>
 8003f76:	2800      	cmp	r0, #0
 8003f78:	d0a4      	beq.n	8003ec4 <_dtoa_r+0x604>
 8003f7a:	e220      	b.n	80043be <_dtoa_r+0xafe>
 8003f7c:	9a08      	ldr	r2, [sp, #32]
 8003f7e:	2a00      	cmp	r2, #0
 8003f80:	d02d      	beq.n	8003fde <_dtoa_r+0x71e>
 8003f82:	9a06      	ldr	r2, [sp, #24]
 8003f84:	2a01      	cmp	r2, #1
 8003f86:	dc0a      	bgt.n	8003f9e <_dtoa_r+0x6de>
 8003f88:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8003f8a:	b112      	cbz	r2, 8003f92 <_dtoa_r+0x6d2>
 8003f8c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8003f90:	e002      	b.n	8003f98 <_dtoa_r+0x6d8>
 8003f92:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003f94:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8003f98:	9d07      	ldr	r5, [sp, #28]
 8003f9a:	464c      	mov	r4, r9
 8003f9c:	e015      	b.n	8003fca <_dtoa_r+0x70a>
 8003f9e:	9b07      	ldr	r3, [sp, #28]
 8003fa0:	f108 35ff 	add.w	r5, r8, #4294967295
 8003fa4:	42ab      	cmp	r3, r5
 8003fa6:	bfbf      	itttt	lt
 8003fa8:	9b07      	ldrlt	r3, [sp, #28]
 8003faa:	9507      	strlt	r5, [sp, #28]
 8003fac:	1aea      	sublt	r2, r5, r3
 8003fae:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8003fb0:	bfb7      	itett	lt
 8003fb2:	189b      	addlt	r3, r3, r2
 8003fb4:	1b5d      	subge	r5, r3, r5
 8003fb6:	930c      	strlt	r3, [sp, #48]	; 0x30
 8003fb8:	2500      	movlt	r5, #0
 8003fba:	f1b8 0f00 	cmp.w	r8, #0
 8003fbe:	bfb9      	ittee	lt
 8003fc0:	ebc8 0409 	rsblt	r4, r8, r9
 8003fc4:	2300      	movlt	r3, #0
 8003fc6:	464c      	movge	r4, r9
 8003fc8:	4643      	movge	r3, r8
 8003fca:	9a05      	ldr	r2, [sp, #20]
 8003fcc:	2101      	movs	r1, #1
 8003fce:	441a      	add	r2, r3
 8003fd0:	4650      	mov	r0, sl
 8003fd2:	4499      	add	r9, r3
 8003fd4:	9205      	str	r2, [sp, #20]
 8003fd6:	f000 fd20 	bl	8004a1a <__i2b>
 8003fda:	4606      	mov	r6, r0
 8003fdc:	e002      	b.n	8003fe4 <_dtoa_r+0x724>
 8003fde:	9d07      	ldr	r5, [sp, #28]
 8003fe0:	9e08      	ldr	r6, [sp, #32]
 8003fe2:	464c      	mov	r4, r9
 8003fe4:	b15c      	cbz	r4, 8003ffe <_dtoa_r+0x73e>
 8003fe6:	9b05      	ldr	r3, [sp, #20]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	dd08      	ble.n	8003ffe <_dtoa_r+0x73e>
 8003fec:	42a3      	cmp	r3, r4
 8003fee:	9a05      	ldr	r2, [sp, #20]
 8003ff0:	bfa8      	it	ge
 8003ff2:	4623      	movge	r3, r4
 8003ff4:	ebc3 0909 	rsb	r9, r3, r9
 8003ff8:	1ae4      	subs	r4, r4, r3
 8003ffa:	1ad3      	subs	r3, r2, r3
 8003ffc:	9305      	str	r3, [sp, #20]
 8003ffe:	9b07      	ldr	r3, [sp, #28]
 8004000:	2b00      	cmp	r3, #0
 8004002:	dd1d      	ble.n	8004040 <_dtoa_r+0x780>
 8004004:	9b08      	ldr	r3, [sp, #32]
 8004006:	b1ab      	cbz	r3, 8004034 <_dtoa_r+0x774>
 8004008:	b185      	cbz	r5, 800402c <_dtoa_r+0x76c>
 800400a:	4631      	mov	r1, r6
 800400c:	462a      	mov	r2, r5
 800400e:	4650      	mov	r0, sl
 8004010:	f000 fd9e 	bl	8004b50 <__pow5mult>
 8004014:	9a02      	ldr	r2, [sp, #8]
 8004016:	4601      	mov	r1, r0
 8004018:	4606      	mov	r6, r0
 800401a:	4650      	mov	r0, sl
 800401c:	f000 fd06 	bl	8004a2c <__multiply>
 8004020:	9902      	ldr	r1, [sp, #8]
 8004022:	4607      	mov	r7, r0
 8004024:	4650      	mov	r0, sl
 8004026:	f000 fc59 	bl	80048dc <_Bfree>
 800402a:	9702      	str	r7, [sp, #8]
 800402c:	9b07      	ldr	r3, [sp, #28]
 800402e:	1b5a      	subs	r2, r3, r5
 8004030:	d006      	beq.n	8004040 <_dtoa_r+0x780>
 8004032:	e000      	b.n	8004036 <_dtoa_r+0x776>
 8004034:	9a07      	ldr	r2, [sp, #28]
 8004036:	9902      	ldr	r1, [sp, #8]
 8004038:	4650      	mov	r0, sl
 800403a:	f000 fd89 	bl	8004b50 <__pow5mult>
 800403e:	9002      	str	r0, [sp, #8]
 8004040:	2101      	movs	r1, #1
 8004042:	4650      	mov	r0, sl
 8004044:	f000 fce9 	bl	8004a1a <__i2b>
 8004048:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800404a:	4605      	mov	r5, r0
 800404c:	b35b      	cbz	r3, 80040a6 <_dtoa_r+0x7e6>
 800404e:	461a      	mov	r2, r3
 8004050:	4601      	mov	r1, r0
 8004052:	4650      	mov	r0, sl
 8004054:	f000 fd7c 	bl	8004b50 <__pow5mult>
 8004058:	9b06      	ldr	r3, [sp, #24]
 800405a:	2b01      	cmp	r3, #1
 800405c:	4605      	mov	r5, r0
 800405e:	dc18      	bgt.n	8004092 <_dtoa_r+0x7d2>
 8004060:	9b00      	ldr	r3, [sp, #0]
 8004062:	b983      	cbnz	r3, 8004086 <_dtoa_r+0x7c6>
 8004064:	9b01      	ldr	r3, [sp, #4]
 8004066:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800406a:	b973      	cbnz	r3, 800408a <_dtoa_r+0x7ca>
 800406c:	9b01      	ldr	r3, [sp, #4]
 800406e:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
 8004072:	0d3f      	lsrs	r7, r7, #20
 8004074:	053f      	lsls	r7, r7, #20
 8004076:	b14f      	cbz	r7, 800408c <_dtoa_r+0x7cc>
 8004078:	9b05      	ldr	r3, [sp, #20]
 800407a:	3301      	adds	r3, #1
 800407c:	f109 0901 	add.w	r9, r9, #1
 8004080:	9305      	str	r3, [sp, #20]
 8004082:	2701      	movs	r7, #1
 8004084:	e002      	b.n	800408c <_dtoa_r+0x7cc>
 8004086:	2700      	movs	r7, #0
 8004088:	e000      	b.n	800408c <_dtoa_r+0x7cc>
 800408a:	9f00      	ldr	r7, [sp, #0]
 800408c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800408e:	b173      	cbz	r3, 80040ae <_dtoa_r+0x7ee>
 8004090:	e000      	b.n	8004094 <_dtoa_r+0x7d4>
 8004092:	2700      	movs	r7, #0
 8004094:	692b      	ldr	r3, [r5, #16]
 8004096:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800409a:	6918      	ldr	r0, [r3, #16]
 800409c:	f000 fc70 	bl	8004980 <__hi0bits>
 80040a0:	f1c0 0020 	rsb	r0, r0, #32
 80040a4:	e004      	b.n	80040b0 <_dtoa_r+0x7f0>
 80040a6:	9b06      	ldr	r3, [sp, #24]
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	ddd9      	ble.n	8004060 <_dtoa_r+0x7a0>
 80040ac:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 80040ae:	2001      	movs	r0, #1
 80040b0:	9b05      	ldr	r3, [sp, #20]
 80040b2:	4418      	add	r0, r3
 80040b4:	f010 001f 	ands.w	r0, r0, #31
 80040b8:	d00e      	beq.n	80040d8 <_dtoa_r+0x818>
 80040ba:	f1c0 0320 	rsb	r3, r0, #32
 80040be:	2b04      	cmp	r3, #4
 80040c0:	dd08      	ble.n	80040d4 <_dtoa_r+0x814>
 80040c2:	f1c0 001c 	rsb	r0, r0, #28
 80040c6:	e008      	b.n	80040da <_dtoa_r+0x81a>
 80040c8:	080066c8 	.word	0x080066c8
 80040cc:	40140000 	.word	0x40140000
 80040d0:	40240000 	.word	0x40240000
 80040d4:	d006      	beq.n	80040e4 <_dtoa_r+0x824>
 80040d6:	4618      	mov	r0, r3
 80040d8:	301c      	adds	r0, #28
 80040da:	9b05      	ldr	r3, [sp, #20]
 80040dc:	4403      	add	r3, r0
 80040de:	4481      	add	r9, r0
 80040e0:	4404      	add	r4, r0
 80040e2:	9305      	str	r3, [sp, #20]
 80040e4:	f1b9 0f00 	cmp.w	r9, #0
 80040e8:	dd05      	ble.n	80040f6 <_dtoa_r+0x836>
 80040ea:	464a      	mov	r2, r9
 80040ec:	9902      	ldr	r1, [sp, #8]
 80040ee:	4650      	mov	r0, sl
 80040f0:	f000 fd7c 	bl	8004bec <__lshift>
 80040f4:	9002      	str	r0, [sp, #8]
 80040f6:	9b05      	ldr	r3, [sp, #20]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	dd05      	ble.n	8004108 <_dtoa_r+0x848>
 80040fc:	4629      	mov	r1, r5
 80040fe:	461a      	mov	r2, r3
 8004100:	4650      	mov	r0, sl
 8004102:	f000 fd73 	bl	8004bec <__lshift>
 8004106:	4605      	mov	r5, r0
 8004108:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800410a:	b1eb      	cbz	r3, 8004148 <_dtoa_r+0x888>
 800410c:	4629      	mov	r1, r5
 800410e:	9802      	ldr	r0, [sp, #8]
 8004110:	f000 fdbd 	bl	8004c8e <__mcmp>
 8004114:	2800      	cmp	r0, #0
 8004116:	da17      	bge.n	8004148 <_dtoa_r+0x888>
 8004118:	2300      	movs	r3, #0
 800411a:	220a      	movs	r2, #10
 800411c:	9902      	ldr	r1, [sp, #8]
 800411e:	4650      	mov	r0, sl
 8004120:	f000 fbf3 	bl	800490a <__multadd>
 8004124:	9b08      	ldr	r3, [sp, #32]
 8004126:	9002      	str	r0, [sp, #8]
 8004128:	f10b 3bff 	add.w	fp, fp, #4294967295
 800412c:	2b00      	cmp	r3, #0
 800412e:	f000 8158 	beq.w	80043e2 <_dtoa_r+0xb22>
 8004132:	2300      	movs	r3, #0
 8004134:	4631      	mov	r1, r6
 8004136:	220a      	movs	r2, #10
 8004138:	4650      	mov	r0, sl
 800413a:	f000 fbe6 	bl	800490a <__multadd>
 800413e:	9b03      	ldr	r3, [sp, #12]
 8004140:	2b00      	cmp	r3, #0
 8004142:	4606      	mov	r6, r0
 8004144:	dc37      	bgt.n	80041b6 <_dtoa_r+0x8f6>
 8004146:	e033      	b.n	80041b0 <_dtoa_r+0x8f0>
 8004148:	f1b8 0f00 	cmp.w	r8, #0
 800414c:	dc2a      	bgt.n	80041a4 <_dtoa_r+0x8e4>
 800414e:	9b06      	ldr	r3, [sp, #24]
 8004150:	2b02      	cmp	r3, #2
 8004152:	dd27      	ble.n	80041a4 <_dtoa_r+0x8e4>
 8004154:	f8cd 800c 	str.w	r8, [sp, #12]
 8004158:	9b03      	ldr	r3, [sp, #12]
 800415a:	b983      	cbnz	r3, 800417e <_dtoa_r+0x8be>
 800415c:	4629      	mov	r1, r5
 800415e:	2205      	movs	r2, #5
 8004160:	4650      	mov	r0, sl
 8004162:	f000 fbd2 	bl	800490a <__multadd>
 8004166:	4601      	mov	r1, r0
 8004168:	4605      	mov	r5, r0
 800416a:	9802      	ldr	r0, [sp, #8]
 800416c:	f000 fd8f 	bl	8004c8e <__mcmp>
 8004170:	2800      	cmp	r0, #0
 8004172:	dc0d      	bgt.n	8004190 <_dtoa_r+0x8d0>
 8004174:	e003      	b.n	800417e <_dtoa_r+0x8be>
 8004176:	463d      	mov	r5, r7
 8004178:	e000      	b.n	800417c <_dtoa_r+0x8bc>
 800417a:	2500      	movs	r5, #0
 800417c:	462e      	mov	r6, r5
 800417e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004180:	9c04      	ldr	r4, [sp, #16]
 8004182:	ea6f 0b03 	mvn.w	fp, r3
 8004186:	e00a      	b.n	800419e <_dtoa_r+0x8de>
 8004188:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800418c:	463d      	mov	r5, r7
 800418e:	463e      	mov	r6, r7
 8004190:	9b04      	ldr	r3, [sp, #16]
 8004192:	9a04      	ldr	r2, [sp, #16]
 8004194:	1c5c      	adds	r4, r3, #1
 8004196:	2331      	movs	r3, #49	; 0x31
 8004198:	7013      	strb	r3, [r2, #0]
 800419a:	f10b 0b01 	add.w	fp, fp, #1
 800419e:	46b0      	mov	r8, r6
 80041a0:	2600      	movs	r6, #0
 80041a2:	e0f7      	b.n	8004394 <_dtoa_r+0xad4>
 80041a4:	9b08      	ldr	r3, [sp, #32]
 80041a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80041aa:	b923      	cbnz	r3, 80041b6 <_dtoa_r+0x8f6>
 80041ac:	9c04      	ldr	r4, [sp, #16]
 80041ae:	e0b1      	b.n	8004314 <_dtoa_r+0xa54>
 80041b0:	9b06      	ldr	r3, [sp, #24]
 80041b2:	2b02      	cmp	r3, #2
 80041b4:	dcd0      	bgt.n	8004158 <_dtoa_r+0x898>
 80041b6:	2c00      	cmp	r4, #0
 80041b8:	dd05      	ble.n	80041c6 <_dtoa_r+0x906>
 80041ba:	4631      	mov	r1, r6
 80041bc:	4622      	mov	r2, r4
 80041be:	4650      	mov	r0, sl
 80041c0:	f000 fd14 	bl	8004bec <__lshift>
 80041c4:	4606      	mov	r6, r0
 80041c6:	b19f      	cbz	r7, 80041f0 <_dtoa_r+0x930>
 80041c8:	6871      	ldr	r1, [r6, #4]
 80041ca:	4650      	mov	r0, sl
 80041cc:	f000 fb51 	bl	8004872 <_Balloc>
 80041d0:	6932      	ldr	r2, [r6, #16]
 80041d2:	3202      	adds	r2, #2
 80041d4:	4604      	mov	r4, r0
 80041d6:	0092      	lsls	r2, r2, #2
 80041d8:	f106 010c 	add.w	r1, r6, #12
 80041dc:	300c      	adds	r0, #12
 80041de:	f000 fb3b 	bl	8004858 <memcpy>
 80041e2:	2201      	movs	r2, #1
 80041e4:	4621      	mov	r1, r4
 80041e6:	4650      	mov	r0, sl
 80041e8:	f000 fd00 	bl	8004bec <__lshift>
 80041ec:	4680      	mov	r8, r0
 80041ee:	e000      	b.n	80041f2 <_dtoa_r+0x932>
 80041f0:	46b0      	mov	r8, r6
 80041f2:	9b00      	ldr	r3, [sp, #0]
 80041f4:	f8dd 9010 	ldr.w	r9, [sp, #16]
 80041f8:	f003 0301 	and.w	r3, r3, #1
 80041fc:	9305      	str	r3, [sp, #20]
 80041fe:	4629      	mov	r1, r5
 8004200:	9802      	ldr	r0, [sp, #8]
 8004202:	f7ff facb 	bl	800379c <quorem>
 8004206:	4631      	mov	r1, r6
 8004208:	4604      	mov	r4, r0
 800420a:	f100 0730 	add.w	r7, r0, #48	; 0x30
 800420e:	9802      	ldr	r0, [sp, #8]
 8004210:	f000 fd3d 	bl	8004c8e <__mcmp>
 8004214:	4642      	mov	r2, r8
 8004216:	9000      	str	r0, [sp, #0]
 8004218:	4629      	mov	r1, r5
 800421a:	4650      	mov	r0, sl
 800421c:	f000 fd53 	bl	8004cc6 <__mdiff>
 8004220:	68c3      	ldr	r3, [r0, #12]
 8004222:	4602      	mov	r2, r0
 8004224:	b93b      	cbnz	r3, 8004236 <_dtoa_r+0x976>
 8004226:	4601      	mov	r1, r0
 8004228:	9007      	str	r0, [sp, #28]
 800422a:	9802      	ldr	r0, [sp, #8]
 800422c:	f000 fd2f 	bl	8004c8e <__mcmp>
 8004230:	9a07      	ldr	r2, [sp, #28]
 8004232:	4603      	mov	r3, r0
 8004234:	e000      	b.n	8004238 <_dtoa_r+0x978>
 8004236:	2301      	movs	r3, #1
 8004238:	4611      	mov	r1, r2
 800423a:	4650      	mov	r0, sl
 800423c:	9307      	str	r3, [sp, #28]
 800423e:	f000 fb4d 	bl	80048dc <_Bfree>
 8004242:	9b07      	ldr	r3, [sp, #28]
 8004244:	b94b      	cbnz	r3, 800425a <_dtoa_r+0x99a>
 8004246:	9a06      	ldr	r2, [sp, #24]
 8004248:	b93a      	cbnz	r2, 800425a <_dtoa_r+0x99a>
 800424a:	9a05      	ldr	r2, [sp, #20]
 800424c:	b92a      	cbnz	r2, 800425a <_dtoa_r+0x99a>
 800424e:	2f39      	cmp	r7, #57	; 0x39
 8004250:	d028      	beq.n	80042a4 <_dtoa_r+0x9e4>
 8004252:	9b00      	ldr	r3, [sp, #0]
 8004254:	2b00      	cmp	r3, #0
 8004256:	dc1a      	bgt.n	800428e <_dtoa_r+0x9ce>
 8004258:	e01b      	b.n	8004292 <_dtoa_r+0x9d2>
 800425a:	9a00      	ldr	r2, [sp, #0]
 800425c:	2a00      	cmp	r2, #0
 800425e:	db04      	blt.n	800426a <_dtoa_r+0x9aa>
 8004260:	d11a      	bne.n	8004298 <_dtoa_r+0x9d8>
 8004262:	9a06      	ldr	r2, [sp, #24]
 8004264:	b9c2      	cbnz	r2, 8004298 <_dtoa_r+0x9d8>
 8004266:	9a05      	ldr	r2, [sp, #20]
 8004268:	b9b2      	cbnz	r2, 8004298 <_dtoa_r+0x9d8>
 800426a:	2b00      	cmp	r3, #0
 800426c:	dd11      	ble.n	8004292 <_dtoa_r+0x9d2>
 800426e:	2201      	movs	r2, #1
 8004270:	9902      	ldr	r1, [sp, #8]
 8004272:	4650      	mov	r0, sl
 8004274:	f000 fcba 	bl	8004bec <__lshift>
 8004278:	4629      	mov	r1, r5
 800427a:	9002      	str	r0, [sp, #8]
 800427c:	f000 fd07 	bl	8004c8e <__mcmp>
 8004280:	2800      	cmp	r0, #0
 8004282:	dc02      	bgt.n	800428a <_dtoa_r+0x9ca>
 8004284:	d105      	bne.n	8004292 <_dtoa_r+0x9d2>
 8004286:	07fa      	lsls	r2, r7, #31
 8004288:	d503      	bpl.n	8004292 <_dtoa_r+0x9d2>
 800428a:	2f39      	cmp	r7, #57	; 0x39
 800428c:	d00a      	beq.n	80042a4 <_dtoa_r+0x9e4>
 800428e:	f104 0731 	add.w	r7, r4, #49	; 0x31
 8004292:	f109 0401 	add.w	r4, r9, #1
 8004296:	e00c      	b.n	80042b2 <_dtoa_r+0x9f2>
 8004298:	2b00      	cmp	r3, #0
 800429a:	f109 0401 	add.w	r4, r9, #1
 800429e:	dd0b      	ble.n	80042b8 <_dtoa_r+0x9f8>
 80042a0:	2f39      	cmp	r7, #57	; 0x39
 80042a2:	d105      	bne.n	80042b0 <_dtoa_r+0x9f0>
 80042a4:	2339      	movs	r3, #57	; 0x39
 80042a6:	f889 3000 	strb.w	r3, [r9]
 80042aa:	f109 0901 	add.w	r9, r9, #1
 80042ae:	e054      	b.n	800435a <_dtoa_r+0xa9a>
 80042b0:	3701      	adds	r7, #1
 80042b2:	f889 7000 	strb.w	r7, [r9]
 80042b6:	e06d      	b.n	8004394 <_dtoa_r+0xad4>
 80042b8:	9b04      	ldr	r3, [sp, #16]
 80042ba:	9a03      	ldr	r2, [sp, #12]
 80042bc:	f804 7c01 	strb.w	r7, [r4, #-1]
 80042c0:	1ae3      	subs	r3, r4, r3
 80042c2:	4293      	cmp	r3, r2
 80042c4:	46a1      	mov	r9, r4
 80042c6:	d03a      	beq.n	800433e <_dtoa_r+0xa7e>
 80042c8:	2300      	movs	r3, #0
 80042ca:	220a      	movs	r2, #10
 80042cc:	9902      	ldr	r1, [sp, #8]
 80042ce:	4650      	mov	r0, sl
 80042d0:	f000 fb1b 	bl	800490a <__multadd>
 80042d4:	4546      	cmp	r6, r8
 80042d6:	9002      	str	r0, [sp, #8]
 80042d8:	f04f 0300 	mov.w	r3, #0
 80042dc:	f04f 020a 	mov.w	r2, #10
 80042e0:	4631      	mov	r1, r6
 80042e2:	4650      	mov	r0, sl
 80042e4:	d104      	bne.n	80042f0 <_dtoa_r+0xa30>
 80042e6:	f000 fb10 	bl	800490a <__multadd>
 80042ea:	4606      	mov	r6, r0
 80042ec:	4680      	mov	r8, r0
 80042ee:	e786      	b.n	80041fe <_dtoa_r+0x93e>
 80042f0:	f000 fb0b 	bl	800490a <__multadd>
 80042f4:	4641      	mov	r1, r8
 80042f6:	4606      	mov	r6, r0
 80042f8:	2300      	movs	r3, #0
 80042fa:	220a      	movs	r2, #10
 80042fc:	4650      	mov	r0, sl
 80042fe:	f000 fb04 	bl	800490a <__multadd>
 8004302:	4680      	mov	r8, r0
 8004304:	e77b      	b.n	80041fe <_dtoa_r+0x93e>
 8004306:	2300      	movs	r3, #0
 8004308:	220a      	movs	r2, #10
 800430a:	9902      	ldr	r1, [sp, #8]
 800430c:	4650      	mov	r0, sl
 800430e:	f000 fafc 	bl	800490a <__multadd>
 8004312:	9002      	str	r0, [sp, #8]
 8004314:	4629      	mov	r1, r5
 8004316:	9802      	ldr	r0, [sp, #8]
 8004318:	f7ff fa40 	bl	800379c <quorem>
 800431c:	f100 0730 	add.w	r7, r0, #48	; 0x30
 8004320:	f804 7b01 	strb.w	r7, [r4], #1
 8004324:	9b04      	ldr	r3, [sp, #16]
 8004326:	9a03      	ldr	r2, [sp, #12]
 8004328:	1ae3      	subs	r3, r4, r3
 800432a:	4293      	cmp	r3, r2
 800432c:	dbeb      	blt.n	8004306 <_dtoa_r+0xa46>
 800432e:	9b04      	ldr	r3, [sp, #16]
 8004330:	2a01      	cmp	r2, #1
 8004332:	bfac      	ite	ge
 8004334:	189b      	addge	r3, r3, r2
 8004336:	3301      	addlt	r3, #1
 8004338:	46b0      	mov	r8, r6
 800433a:	4699      	mov	r9, r3
 800433c:	2600      	movs	r6, #0
 800433e:	2201      	movs	r2, #1
 8004340:	9902      	ldr	r1, [sp, #8]
 8004342:	4650      	mov	r0, sl
 8004344:	f000 fc52 	bl	8004bec <__lshift>
 8004348:	4629      	mov	r1, r5
 800434a:	9002      	str	r0, [sp, #8]
 800434c:	f000 fc9f 	bl	8004c8e <__mcmp>
 8004350:	2800      	cmp	r0, #0
 8004352:	dc02      	bgt.n	800435a <_dtoa_r+0xa9a>
 8004354:	d115      	bne.n	8004382 <_dtoa_r+0xac2>
 8004356:	07fb      	lsls	r3, r7, #31
 8004358:	d513      	bpl.n	8004382 <_dtoa_r+0xac2>
 800435a:	464c      	mov	r4, r9
 800435c:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 8004360:	2b39      	cmp	r3, #57	; 0x39
 8004362:	f104 32ff 	add.w	r2, r4, #4294967295
 8004366:	d109      	bne.n	800437c <_dtoa_r+0xabc>
 8004368:	9b04      	ldr	r3, [sp, #16]
 800436a:	4293      	cmp	r3, r2
 800436c:	d104      	bne.n	8004378 <_dtoa_r+0xab8>
 800436e:	f10b 0b01 	add.w	fp, fp, #1
 8004372:	2331      	movs	r3, #49	; 0x31
 8004374:	9a04      	ldr	r2, [sp, #16]
 8004376:	e002      	b.n	800437e <_dtoa_r+0xabe>
 8004378:	4614      	mov	r4, r2
 800437a:	e7ef      	b.n	800435c <_dtoa_r+0xa9c>
 800437c:	3301      	adds	r3, #1
 800437e:	7013      	strb	r3, [r2, #0]
 8004380:	e008      	b.n	8004394 <_dtoa_r+0xad4>
 8004382:	464c      	mov	r4, r9
 8004384:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 8004388:	2b30      	cmp	r3, #48	; 0x30
 800438a:	f104 32ff 	add.w	r2, r4, #4294967295
 800438e:	d101      	bne.n	8004394 <_dtoa_r+0xad4>
 8004390:	4614      	mov	r4, r2
 8004392:	e7f7      	b.n	8004384 <_dtoa_r+0xac4>
 8004394:	4629      	mov	r1, r5
 8004396:	4650      	mov	r0, sl
 8004398:	f000 faa0 	bl	80048dc <_Bfree>
 800439c:	f1b8 0f00 	cmp.w	r8, #0
 80043a0:	d00d      	beq.n	80043be <_dtoa_r+0xafe>
 80043a2:	b12e      	cbz	r6, 80043b0 <_dtoa_r+0xaf0>
 80043a4:	4546      	cmp	r6, r8
 80043a6:	d003      	beq.n	80043b0 <_dtoa_r+0xaf0>
 80043a8:	4631      	mov	r1, r6
 80043aa:	4650      	mov	r0, sl
 80043ac:	f000 fa96 	bl	80048dc <_Bfree>
 80043b0:	4641      	mov	r1, r8
 80043b2:	4650      	mov	r0, sl
 80043b4:	f000 fa92 	bl	80048dc <_Bfree>
 80043b8:	e001      	b.n	80043be <_dtoa_r+0xafe>
 80043ba:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 80043be:	9902      	ldr	r1, [sp, #8]
 80043c0:	4650      	mov	r0, sl
 80043c2:	f000 fa8b 	bl	80048dc <_Bfree>
 80043c6:	2300      	movs	r3, #0
 80043c8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80043ca:	7023      	strb	r3, [r4, #0]
 80043cc:	f10b 0301 	add.w	r3, fp, #1
 80043d0:	6013      	str	r3, [r2, #0]
 80043d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80043d4:	b11b      	cbz	r3, 80043de <_dtoa_r+0xb1e>
 80043d6:	601c      	str	r4, [r3, #0]
 80043d8:	e001      	b.n	80043de <_dtoa_r+0xb1e>
 80043da:	4808      	ldr	r0, [pc, #32]	; (80043fc <_dtoa_r+0xb3c>)
 80043dc:	e00a      	b.n	80043f4 <_dtoa_r+0xb34>
 80043de:	9804      	ldr	r0, [sp, #16]
 80043e0:	e008      	b.n	80043f4 <_dtoa_r+0xb34>
 80043e2:	9b03      	ldr	r3, [sp, #12]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	f73f aee1 	bgt.w	80041ac <_dtoa_r+0x8ec>
 80043ea:	9b06      	ldr	r3, [sp, #24]
 80043ec:	2b02      	cmp	r3, #2
 80043ee:	f77f aedd 	ble.w	80041ac <_dtoa_r+0x8ec>
 80043f2:	e6b1      	b.n	8004158 <_dtoa_r+0x898>
 80043f4:	b017      	add	sp, #92	; 0x5c
 80043f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043fa:	bf00      	nop
 80043fc:	0800669e 	.word	0x0800669e

08004400 <_localeconv_r>:
 8004400:	4800      	ldr	r0, [pc, #0]	; (8004404 <_localeconv_r+0x4>)
 8004402:	4770      	bx	lr
 8004404:	200000f8 	.word	0x200000f8

08004408 <malloc>:
 8004408:	4b02      	ldr	r3, [pc, #8]	; (8004414 <malloc+0xc>)
 800440a:	4601      	mov	r1, r0
 800440c:	6818      	ldr	r0, [r3, #0]
 800440e:	f000 b803 	b.w	8004418 <_malloc_r>
 8004412:	bf00      	nop
 8004414:	200000f4 	.word	0x200000f4

08004418 <_malloc_r>:
 8004418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800441c:	f101 040b 	add.w	r4, r1, #11
 8004420:	2c16      	cmp	r4, #22
 8004422:	b085      	sub	sp, #20
 8004424:	4681      	mov	r9, r0
 8004426:	d903      	bls.n	8004430 <_malloc_r+0x18>
 8004428:	f034 0407 	bics.w	r4, r4, #7
 800442c:	d501      	bpl.n	8004432 <_malloc_r+0x1a>
 800442e:	e002      	b.n	8004436 <_malloc_r+0x1e>
 8004430:	2410      	movs	r4, #16
 8004432:	428c      	cmp	r4, r1
 8004434:	d203      	bcs.n	800443e <_malloc_r+0x26>
 8004436:	230c      	movs	r3, #12
 8004438:	f8c9 3000 	str.w	r3, [r9]
 800443c:	e1ea      	b.n	8004814 <_malloc_r+0x3fc>
 800443e:	4648      	mov	r0, r9
 8004440:	f000 fa15 	bl	800486e <__malloc_lock>
 8004444:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 8004448:	4d9e      	ldr	r5, [pc, #632]	; (80046c4 <_malloc_r+0x2ac>)
 800444a:	d217      	bcs.n	800447c <_malloc_r+0x64>
 800444c:	f104 0208 	add.w	r2, r4, #8
 8004450:	442a      	add	r2, r5
 8004452:	f1a2 0108 	sub.w	r1, r2, #8
 8004456:	6856      	ldr	r6, [r2, #4]
 8004458:	428e      	cmp	r6, r1
 800445a:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 800445e:	d102      	bne.n	8004466 <_malloc_r+0x4e>
 8004460:	68d6      	ldr	r6, [r2, #12]
 8004462:	42b2      	cmp	r2, r6
 8004464:	d008      	beq.n	8004478 <_malloc_r+0x60>
 8004466:	6873      	ldr	r3, [r6, #4]
 8004468:	68f2      	ldr	r2, [r6, #12]
 800446a:	68b1      	ldr	r1, [r6, #8]
 800446c:	f023 0303 	bic.w	r3, r3, #3
 8004470:	60ca      	str	r2, [r1, #12]
 8004472:	4433      	add	r3, r6
 8004474:	6091      	str	r1, [r2, #8]
 8004476:	e02f      	b.n	80044d8 <_malloc_r+0xc0>
 8004478:	3302      	adds	r3, #2
 800447a:	e03d      	b.n	80044f8 <_malloc_r+0xe0>
 800447c:	0a63      	lsrs	r3, r4, #9
 800447e:	d01a      	beq.n	80044b6 <_malloc_r+0x9e>
 8004480:	2b04      	cmp	r3, #4
 8004482:	d802      	bhi.n	800448a <_malloc_r+0x72>
 8004484:	09a3      	lsrs	r3, r4, #6
 8004486:	3338      	adds	r3, #56	; 0x38
 8004488:	e018      	b.n	80044bc <_malloc_r+0xa4>
 800448a:	2b14      	cmp	r3, #20
 800448c:	d801      	bhi.n	8004492 <_malloc_r+0x7a>
 800448e:	335b      	adds	r3, #91	; 0x5b
 8004490:	e014      	b.n	80044bc <_malloc_r+0xa4>
 8004492:	2b54      	cmp	r3, #84	; 0x54
 8004494:	d802      	bhi.n	800449c <_malloc_r+0x84>
 8004496:	0b23      	lsrs	r3, r4, #12
 8004498:	336e      	adds	r3, #110	; 0x6e
 800449a:	e00f      	b.n	80044bc <_malloc_r+0xa4>
 800449c:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 80044a0:	d802      	bhi.n	80044a8 <_malloc_r+0x90>
 80044a2:	0be3      	lsrs	r3, r4, #15
 80044a4:	3377      	adds	r3, #119	; 0x77
 80044a6:	e009      	b.n	80044bc <_malloc_r+0xa4>
 80044a8:	f240 5254 	movw	r2, #1364	; 0x554
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d804      	bhi.n	80044ba <_malloc_r+0xa2>
 80044b0:	0ca3      	lsrs	r3, r4, #18
 80044b2:	337c      	adds	r3, #124	; 0x7c
 80044b4:	e002      	b.n	80044bc <_malloc_r+0xa4>
 80044b6:	233f      	movs	r3, #63	; 0x3f
 80044b8:	e000      	b.n	80044bc <_malloc_r+0xa4>
 80044ba:	237e      	movs	r3, #126	; 0x7e
 80044bc:	1c5a      	adds	r2, r3, #1
 80044be:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 80044c2:	f1a2 0008 	sub.w	r0, r2, #8
 80044c6:	6856      	ldr	r6, [r2, #4]
 80044c8:	e00c      	b.n	80044e4 <_malloc_r+0xcc>
 80044ca:	2900      	cmp	r1, #0
 80044cc:	68f1      	ldr	r1, [r6, #12]
 80044ce:	db08      	blt.n	80044e2 <_malloc_r+0xca>
 80044d0:	68b3      	ldr	r3, [r6, #8]
 80044d2:	60d9      	str	r1, [r3, #12]
 80044d4:	608b      	str	r3, [r1, #8]
 80044d6:	18b3      	adds	r3, r6, r2
 80044d8:	685a      	ldr	r2, [r3, #4]
 80044da:	f042 0201 	orr.w	r2, r2, #1
 80044de:	605a      	str	r2, [r3, #4]
 80044e0:	e1a3      	b.n	800482a <_malloc_r+0x412>
 80044e2:	460e      	mov	r6, r1
 80044e4:	4286      	cmp	r6, r0
 80044e6:	d006      	beq.n	80044f6 <_malloc_r+0xde>
 80044e8:	6872      	ldr	r2, [r6, #4]
 80044ea:	f022 0203 	bic.w	r2, r2, #3
 80044ee:	1b11      	subs	r1, r2, r4
 80044f0:	290f      	cmp	r1, #15
 80044f2:	ddea      	ble.n	80044ca <_malloc_r+0xb2>
 80044f4:	3b01      	subs	r3, #1
 80044f6:	3301      	adds	r3, #1
 80044f8:	4a72      	ldr	r2, [pc, #456]	; (80046c4 <_malloc_r+0x2ac>)
 80044fa:	692e      	ldr	r6, [r5, #16]
 80044fc:	f102 0708 	add.w	r7, r2, #8
 8004500:	42be      	cmp	r6, r7
 8004502:	4639      	mov	r1, r7
 8004504:	d079      	beq.n	80045fa <_malloc_r+0x1e2>
 8004506:	6870      	ldr	r0, [r6, #4]
 8004508:	f020 0003 	bic.w	r0, r0, #3
 800450c:	ebc4 0e00 	rsb	lr, r4, r0
 8004510:	f1be 0f0f 	cmp.w	lr, #15
 8004514:	dd0d      	ble.n	8004532 <_malloc_r+0x11a>
 8004516:	1933      	adds	r3, r6, r4
 8004518:	f044 0401 	orr.w	r4, r4, #1
 800451c:	6074      	str	r4, [r6, #4]
 800451e:	6153      	str	r3, [r2, #20]
 8004520:	6113      	str	r3, [r2, #16]
 8004522:	f04e 0201 	orr.w	r2, lr, #1
 8004526:	60df      	str	r7, [r3, #12]
 8004528:	609f      	str	r7, [r3, #8]
 800452a:	605a      	str	r2, [r3, #4]
 800452c:	f843 e00e 	str.w	lr, [r3, lr]
 8004530:	e17b      	b.n	800482a <_malloc_r+0x412>
 8004532:	f1be 0f00 	cmp.w	lr, #0
 8004536:	6157      	str	r7, [r2, #20]
 8004538:	6117      	str	r7, [r2, #16]
 800453a:	db05      	blt.n	8004548 <_malloc_r+0x130>
 800453c:	4430      	add	r0, r6
 800453e:	6843      	ldr	r3, [r0, #4]
 8004540:	f043 0301 	orr.w	r3, r3, #1
 8004544:	6043      	str	r3, [r0, #4]
 8004546:	e170      	b.n	800482a <_malloc_r+0x412>
 8004548:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800454c:	d215      	bcs.n	800457a <_malloc_r+0x162>
 800454e:	08c0      	lsrs	r0, r0, #3
 8004550:	ea4f 0ea0 	mov.w	lr, r0, asr #2
 8004554:	2701      	movs	r7, #1
 8004556:	fa07 fe0e 	lsl.w	lr, r7, lr
 800455a:	6857      	ldr	r7, [r2, #4]
 800455c:	3001      	adds	r0, #1
 800455e:	ea4e 0707 	orr.w	r7, lr, r7
 8004562:	6057      	str	r7, [r2, #4]
 8004564:	eb02 07c0 	add.w	r7, r2, r0, lsl #3
 8004568:	f852 e030 	ldr.w	lr, [r2, r0, lsl #3]
 800456c:	f8c6 e008 	str.w	lr, [r6, #8]
 8004570:	3f08      	subs	r7, #8
 8004572:	60f7      	str	r7, [r6, #12]
 8004574:	f842 6030 	str.w	r6, [r2, r0, lsl #3]
 8004578:	e03d      	b.n	80045f6 <_malloc_r+0x1de>
 800457a:	0a42      	lsrs	r2, r0, #9
 800457c:	2a04      	cmp	r2, #4
 800457e:	d802      	bhi.n	8004586 <_malloc_r+0x16e>
 8004580:	0982      	lsrs	r2, r0, #6
 8004582:	3238      	adds	r2, #56	; 0x38
 8004584:	e015      	b.n	80045b2 <_malloc_r+0x19a>
 8004586:	2a14      	cmp	r2, #20
 8004588:	d801      	bhi.n	800458e <_malloc_r+0x176>
 800458a:	325b      	adds	r2, #91	; 0x5b
 800458c:	e011      	b.n	80045b2 <_malloc_r+0x19a>
 800458e:	2a54      	cmp	r2, #84	; 0x54
 8004590:	d802      	bhi.n	8004598 <_malloc_r+0x180>
 8004592:	0b02      	lsrs	r2, r0, #12
 8004594:	326e      	adds	r2, #110	; 0x6e
 8004596:	e00c      	b.n	80045b2 <_malloc_r+0x19a>
 8004598:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800459c:	d802      	bhi.n	80045a4 <_malloc_r+0x18c>
 800459e:	0bc2      	lsrs	r2, r0, #15
 80045a0:	3277      	adds	r2, #119	; 0x77
 80045a2:	e006      	b.n	80045b2 <_malloc_r+0x19a>
 80045a4:	f240 5754 	movw	r7, #1364	; 0x554
 80045a8:	42ba      	cmp	r2, r7
 80045aa:	bf9a      	itte	ls
 80045ac:	0c82      	lsrls	r2, r0, #18
 80045ae:	327c      	addls	r2, #124	; 0x7c
 80045b0:	227e      	movhi	r2, #126	; 0x7e
 80045b2:	1c57      	adds	r7, r2, #1
 80045b4:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 80045b8:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 80045bc:	f8df c104 	ldr.w	ip, [pc, #260]	; 80046c4 <_malloc_r+0x2ac>
 80045c0:	45be      	cmp	lr, r7
 80045c2:	d10d      	bne.n	80045e0 <_malloc_r+0x1c8>
 80045c4:	2001      	movs	r0, #1
 80045c6:	1092      	asrs	r2, r2, #2
 80045c8:	fa00 f202 	lsl.w	r2, r0, r2
 80045cc:	f8dc 0004 	ldr.w	r0, [ip, #4]
 80045d0:	4310      	orrs	r0, r2
 80045d2:	f8cc 0004 	str.w	r0, [ip, #4]
 80045d6:	4672      	mov	r2, lr
 80045d8:	e009      	b.n	80045ee <_malloc_r+0x1d6>
 80045da:	68bf      	ldr	r7, [r7, #8]
 80045dc:	45be      	cmp	lr, r7
 80045de:	d004      	beq.n	80045ea <_malloc_r+0x1d2>
 80045e0:	687a      	ldr	r2, [r7, #4]
 80045e2:	f022 0203 	bic.w	r2, r2, #3
 80045e6:	4290      	cmp	r0, r2
 80045e8:	d3f7      	bcc.n	80045da <_malloc_r+0x1c2>
 80045ea:	68fa      	ldr	r2, [r7, #12]
 80045ec:	46be      	mov	lr, r7
 80045ee:	60f2      	str	r2, [r6, #12]
 80045f0:	f8c6 e008 	str.w	lr, [r6, #8]
 80045f4:	6096      	str	r6, [r2, #8]
 80045f6:	f8ce 600c 	str.w	r6, [lr, #12]
 80045fa:	2001      	movs	r0, #1
 80045fc:	109a      	asrs	r2, r3, #2
 80045fe:	fa00 f202 	lsl.w	r2, r0, r2
 8004602:	6868      	ldr	r0, [r5, #4]
 8004604:	4282      	cmp	r2, r0
 8004606:	d85f      	bhi.n	80046c8 <_malloc_r+0x2b0>
 8004608:	4202      	tst	r2, r0
 800460a:	d106      	bne.n	800461a <_malloc_r+0x202>
 800460c:	f023 0303 	bic.w	r3, r3, #3
 8004610:	0052      	lsls	r2, r2, #1
 8004612:	4202      	tst	r2, r0
 8004614:	f103 0304 	add.w	r3, r3, #4
 8004618:	d0fa      	beq.n	8004610 <_malloc_r+0x1f8>
 800461a:	eb05 08c3 	add.w	r8, r5, r3, lsl #3
 800461e:	46c2      	mov	sl, r8
 8004620:	469c      	mov	ip, r3
 8004622:	f8da 600c 	ldr.w	r6, [sl, #12]
 8004626:	4556      	cmp	r6, sl
 8004628:	d02c      	beq.n	8004684 <_malloc_r+0x26c>
 800462a:	6870      	ldr	r0, [r6, #4]
 800462c:	68f7      	ldr	r7, [r6, #12]
 800462e:	f020 0003 	bic.w	r0, r0, #3
 8004632:	ebc4 0e00 	rsb	lr, r4, r0
 8004636:	f1be 0f0f 	cmp.w	lr, #15
 800463a:	dd11      	ble.n	8004660 <_malloc_r+0x248>
 800463c:	1933      	adds	r3, r6, r4
 800463e:	f044 0401 	orr.w	r4, r4, #1
 8004642:	6074      	str	r4, [r6, #4]
 8004644:	f856 2f08 	ldr.w	r2, [r6, #8]!
 8004648:	60d7      	str	r7, [r2, #12]
 800464a:	60ba      	str	r2, [r7, #8]
 800464c:	f04e 0201 	orr.w	r2, lr, #1
 8004650:	616b      	str	r3, [r5, #20]
 8004652:	612b      	str	r3, [r5, #16]
 8004654:	60d9      	str	r1, [r3, #12]
 8004656:	6099      	str	r1, [r3, #8]
 8004658:	605a      	str	r2, [r3, #4]
 800465a:	f843 e00e 	str.w	lr, [r3, lr]
 800465e:	e00b      	b.n	8004678 <_malloc_r+0x260>
 8004660:	f1be 0f00 	cmp.w	lr, #0
 8004664:	db0c      	blt.n	8004680 <_malloc_r+0x268>
 8004666:	1833      	adds	r3, r6, r0
 8004668:	685a      	ldr	r2, [r3, #4]
 800466a:	f042 0201 	orr.w	r2, r2, #1
 800466e:	605a      	str	r2, [r3, #4]
 8004670:	f856 3f08 	ldr.w	r3, [r6, #8]!
 8004674:	60df      	str	r7, [r3, #12]
 8004676:	60bb      	str	r3, [r7, #8]
 8004678:	4648      	mov	r0, r9
 800467a:	f000 f8f9 	bl	8004870 <__malloc_unlock>
 800467e:	e0d8      	b.n	8004832 <_malloc_r+0x41a>
 8004680:	463e      	mov	r6, r7
 8004682:	e7d0      	b.n	8004626 <_malloc_r+0x20e>
 8004684:	f10c 0c01 	add.w	ip, ip, #1
 8004688:	f01c 0f03 	tst.w	ip, #3
 800468c:	f10a 0a08 	add.w	sl, sl, #8
 8004690:	d1c7      	bne.n	8004622 <_malloc_r+0x20a>
 8004692:	0798      	lsls	r0, r3, #30
 8004694:	d104      	bne.n	80046a0 <_malloc_r+0x288>
 8004696:	686b      	ldr	r3, [r5, #4]
 8004698:	ea23 0302 	bic.w	r3, r3, r2
 800469c:	606b      	str	r3, [r5, #4]
 800469e:	e005      	b.n	80046ac <_malloc_r+0x294>
 80046a0:	f858 0908 	ldr.w	r0, [r8], #-8
 80046a4:	4580      	cmp	r8, r0
 80046a6:	f103 33ff 	add.w	r3, r3, #4294967295
 80046aa:	d0f2      	beq.n	8004692 <_malloc_r+0x27a>
 80046ac:	6868      	ldr	r0, [r5, #4]
 80046ae:	0052      	lsls	r2, r2, #1
 80046b0:	4282      	cmp	r2, r0
 80046b2:	d809      	bhi.n	80046c8 <_malloc_r+0x2b0>
 80046b4:	b142      	cbz	r2, 80046c8 <_malloc_r+0x2b0>
 80046b6:	4663      	mov	r3, ip
 80046b8:	4202      	tst	r2, r0
 80046ba:	d1ae      	bne.n	800461a <_malloc_r+0x202>
 80046bc:	3304      	adds	r3, #4
 80046be:	0052      	lsls	r2, r2, #1
 80046c0:	e7fa      	b.n	80046b8 <_malloc_r+0x2a0>
 80046c2:	bf00      	nop
 80046c4:	20000130 	.word	0x20000130
 80046c8:	f8d5 b008 	ldr.w	fp, [r5, #8]
 80046cc:	f8db 6004 	ldr.w	r6, [fp, #4]
 80046d0:	f026 0603 	bic.w	r6, r6, #3
 80046d4:	42b4      	cmp	r4, r6
 80046d6:	d803      	bhi.n	80046e0 <_malloc_r+0x2c8>
 80046d8:	1b33      	subs	r3, r6, r4
 80046da:	2b0f      	cmp	r3, #15
 80046dc:	f300 809c 	bgt.w	8004818 <_malloc_r+0x400>
 80046e0:	4a56      	ldr	r2, [pc, #344]	; (800483c <_malloc_r+0x424>)
 80046e2:	4957      	ldr	r1, [pc, #348]	; (8004840 <_malloc_r+0x428>)
 80046e4:	6812      	ldr	r2, [r2, #0]
 80046e6:	6808      	ldr	r0, [r1, #0]
 80046e8:	9101      	str	r1, [sp, #4]
 80046ea:	f102 0810 	add.w	r8, r2, #16
 80046ee:	4a55      	ldr	r2, [pc, #340]	; (8004844 <_malloc_r+0x42c>)
 80046f0:	9203      	str	r2, [sp, #12]
 80046f2:	3001      	adds	r0, #1
 80046f4:	bf18      	it	ne
 80046f6:	f102 31ff 	addne.w	r1, r2, #4294967295
 80046fa:	44a0      	add	r8, r4
 80046fc:	bf1e      	ittt	ne
 80046fe:	4488      	addne	r8, r1
 8004700:	4251      	negne	r1, r2
 8004702:	ea01 0808 	andne.w	r8, r1, r8
 8004706:	eb0b 0306 	add.w	r3, fp, r6
 800470a:	4641      	mov	r1, r8
 800470c:	4648      	mov	r0, r9
 800470e:	9302      	str	r3, [sp, #8]
 8004710:	f000 fb86 	bl	8004e20 <_sbrk_r>
 8004714:	1c42      	adds	r2, r0, #1
 8004716:	4607      	mov	r7, r0
 8004718:	d06f      	beq.n	80047fa <_malloc_r+0x3e2>
 800471a:	9b02      	ldr	r3, [sp, #8]
 800471c:	9a03      	ldr	r2, [sp, #12]
 800471e:	4283      	cmp	r3, r0
 8004720:	d901      	bls.n	8004726 <_malloc_r+0x30e>
 8004722:	45ab      	cmp	fp, r5
 8004724:	d169      	bne.n	80047fa <_malloc_r+0x3e2>
 8004726:	f8df a128 	ldr.w	sl, [pc, #296]	; 8004850 <_malloc_r+0x438>
 800472a:	f8df c128 	ldr.w	ip, [pc, #296]	; 8004854 <_malloc_r+0x43c>
 800472e:	f8da 0000 	ldr.w	r0, [sl]
 8004732:	42bb      	cmp	r3, r7
 8004734:	4440      	add	r0, r8
 8004736:	f8ca 0000 	str.w	r0, [sl]
 800473a:	d108      	bne.n	800474e <_malloc_r+0x336>
 800473c:	ea13 0f0c 	tst.w	r3, ip
 8004740:	d105      	bne.n	800474e <_malloc_r+0x336>
 8004742:	68ab      	ldr	r3, [r5, #8]
 8004744:	4446      	add	r6, r8
 8004746:	f046 0601 	orr.w	r6, r6, #1
 800474a:	605e      	str	r6, [r3, #4]
 800474c:	e049      	b.n	80047e2 <_malloc_r+0x3ca>
 800474e:	9901      	ldr	r1, [sp, #4]
 8004750:	f8d1 e000 	ldr.w	lr, [r1]
 8004754:	f1be 3fff 	cmp.w	lr, #4294967295
 8004758:	bf15      	itete	ne
 800475a:	1afb      	subne	r3, r7, r3
 800475c:	4b38      	ldreq	r3, [pc, #224]	; (8004840 <_malloc_r+0x428>)
 800475e:	181b      	addne	r3, r3, r0
 8004760:	601f      	streq	r7, [r3, #0]
 8004762:	bf18      	it	ne
 8004764:	f8ca 3000 	strne.w	r3, [sl]
 8004768:	f017 0307 	ands.w	r3, r7, #7
 800476c:	bf1c      	itt	ne
 800476e:	f1c3 0308 	rsbne	r3, r3, #8
 8004772:	18ff      	addne	r7, r7, r3
 8004774:	44b8      	add	r8, r7
 8004776:	441a      	add	r2, r3
 8004778:	ea08 080c 	and.w	r8, r8, ip
 800477c:	ebc8 0802 	rsb	r8, r8, r2
 8004780:	4641      	mov	r1, r8
 8004782:	4648      	mov	r0, r9
 8004784:	f000 fb4c 	bl	8004e20 <_sbrk_r>
 8004788:	1c43      	adds	r3, r0, #1
 800478a:	bf04      	itt	eq
 800478c:	4638      	moveq	r0, r7
 800478e:	f04f 0800 	moveq.w	r8, #0
 8004792:	f8da 3000 	ldr.w	r3, [sl]
 8004796:	60af      	str	r7, [r5, #8]
 8004798:	1bc2      	subs	r2, r0, r7
 800479a:	4442      	add	r2, r8
 800479c:	4443      	add	r3, r8
 800479e:	f042 0201 	orr.w	r2, r2, #1
 80047a2:	45ab      	cmp	fp, r5
 80047a4:	f8ca 3000 	str.w	r3, [sl]
 80047a8:	607a      	str	r2, [r7, #4]
 80047aa:	d01a      	beq.n	80047e2 <_malloc_r+0x3ca>
 80047ac:	2e0f      	cmp	r6, #15
 80047ae:	d802      	bhi.n	80047b6 <_malloc_r+0x39e>
 80047b0:	2301      	movs	r3, #1
 80047b2:	607b      	str	r3, [r7, #4]
 80047b4:	e021      	b.n	80047fa <_malloc_r+0x3e2>
 80047b6:	f8db 3004 	ldr.w	r3, [fp, #4]
 80047ba:	3e0c      	subs	r6, #12
 80047bc:	f026 0607 	bic.w	r6, r6, #7
 80047c0:	f003 0301 	and.w	r3, r3, #1
 80047c4:	4333      	orrs	r3, r6
 80047c6:	f8cb 3004 	str.w	r3, [fp, #4]
 80047ca:	eb0b 0306 	add.w	r3, fp, r6
 80047ce:	2205      	movs	r2, #5
 80047d0:	2e0f      	cmp	r6, #15
 80047d2:	605a      	str	r2, [r3, #4]
 80047d4:	609a      	str	r2, [r3, #8]
 80047d6:	d904      	bls.n	80047e2 <_malloc_r+0x3ca>
 80047d8:	f10b 0108 	add.w	r1, fp, #8
 80047dc:	4648      	mov	r0, r9
 80047de:	f000 fc31 	bl	8005044 <_free_r>
 80047e2:	4a19      	ldr	r2, [pc, #100]	; (8004848 <_malloc_r+0x430>)
 80047e4:	f8da 3000 	ldr.w	r3, [sl]
 80047e8:	6811      	ldr	r1, [r2, #0]
 80047ea:	428b      	cmp	r3, r1
 80047ec:	bf88      	it	hi
 80047ee:	6013      	strhi	r3, [r2, #0]
 80047f0:	4a16      	ldr	r2, [pc, #88]	; (800484c <_malloc_r+0x434>)
 80047f2:	6811      	ldr	r1, [r2, #0]
 80047f4:	428b      	cmp	r3, r1
 80047f6:	bf88      	it	hi
 80047f8:	6013      	strhi	r3, [r2, #0]
 80047fa:	68ab      	ldr	r3, [r5, #8]
 80047fc:	685a      	ldr	r2, [r3, #4]
 80047fe:	f022 0203 	bic.w	r2, r2, #3
 8004802:	4294      	cmp	r4, r2
 8004804:	eba2 0304 	sub.w	r3, r2, r4
 8004808:	d801      	bhi.n	800480e <_malloc_r+0x3f6>
 800480a:	2b0f      	cmp	r3, #15
 800480c:	dc04      	bgt.n	8004818 <_malloc_r+0x400>
 800480e:	4648      	mov	r0, r9
 8004810:	f000 f82e 	bl	8004870 <__malloc_unlock>
 8004814:	2600      	movs	r6, #0
 8004816:	e00c      	b.n	8004832 <_malloc_r+0x41a>
 8004818:	68ae      	ldr	r6, [r5, #8]
 800481a:	f044 0201 	orr.w	r2, r4, #1
 800481e:	4434      	add	r4, r6
 8004820:	f043 0301 	orr.w	r3, r3, #1
 8004824:	6072      	str	r2, [r6, #4]
 8004826:	60ac      	str	r4, [r5, #8]
 8004828:	6063      	str	r3, [r4, #4]
 800482a:	4648      	mov	r0, r9
 800482c:	f000 f820 	bl	8004870 <__malloc_unlock>
 8004830:	3608      	adds	r6, #8
 8004832:	4630      	mov	r0, r6
 8004834:	b005      	add	sp, #20
 8004836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800483a:	bf00      	nop
 800483c:	20000564 	.word	0x20000564
 8004840:	2000053c 	.word	0x2000053c
 8004844:	00000080 	.word	0x00000080
 8004848:	20000560 	.word	0x20000560
 800484c:	2000055c 	.word	0x2000055c
 8004850:	20000568 	.word	0x20000568
 8004854:	0000007f 	.word	0x0000007f

08004858 <memcpy>:
 8004858:	b510      	push	{r4, lr}
 800485a:	1e43      	subs	r3, r0, #1
 800485c:	440a      	add	r2, r1
 800485e:	4291      	cmp	r1, r2
 8004860:	d004      	beq.n	800486c <memcpy+0x14>
 8004862:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004866:	f803 4f01 	strb.w	r4, [r3, #1]!
 800486a:	e7f8      	b.n	800485e <memcpy+0x6>
 800486c:	bd10      	pop	{r4, pc}

0800486e <__malloc_lock>:
 800486e:	4770      	bx	lr

08004870 <__malloc_unlock>:
 8004870:	4770      	bx	lr

08004872 <_Balloc>:
 8004872:	b570      	push	{r4, r5, r6, lr}
 8004874:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004876:	4604      	mov	r4, r0
 8004878:	460e      	mov	r6, r1
 800487a:	b93d      	cbnz	r5, 800488c <_Balloc+0x1a>
 800487c:	2010      	movs	r0, #16
 800487e:	f7ff fdc3 	bl	8004408 <malloc>
 8004882:	6260      	str	r0, [r4, #36]	; 0x24
 8004884:	6045      	str	r5, [r0, #4]
 8004886:	6085      	str	r5, [r0, #8]
 8004888:	6005      	str	r5, [r0, #0]
 800488a:	60c5      	str	r5, [r0, #12]
 800488c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800488e:	68eb      	ldr	r3, [r5, #12]
 8004890:	b143      	cbz	r3, 80048a4 <_Balloc+0x32>
 8004892:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004894:	68db      	ldr	r3, [r3, #12]
 8004896:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800489a:	b178      	cbz	r0, 80048bc <_Balloc+0x4a>
 800489c:	6802      	ldr	r2, [r0, #0]
 800489e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80048a2:	e017      	b.n	80048d4 <_Balloc+0x62>
 80048a4:	2221      	movs	r2, #33	; 0x21
 80048a6:	2104      	movs	r1, #4
 80048a8:	4620      	mov	r0, r4
 80048aa:	f000 fb48 	bl	8004f3e <_calloc_r>
 80048ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80048b0:	60e8      	str	r0, [r5, #12]
 80048b2:	68db      	ldr	r3, [r3, #12]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d1ec      	bne.n	8004892 <_Balloc+0x20>
 80048b8:	2000      	movs	r0, #0
 80048ba:	bd70      	pop	{r4, r5, r6, pc}
 80048bc:	2101      	movs	r1, #1
 80048be:	fa01 f506 	lsl.w	r5, r1, r6
 80048c2:	1d6a      	adds	r2, r5, #5
 80048c4:	0092      	lsls	r2, r2, #2
 80048c6:	4620      	mov	r0, r4
 80048c8:	f000 fb39 	bl	8004f3e <_calloc_r>
 80048cc:	2800      	cmp	r0, #0
 80048ce:	d0f3      	beq.n	80048b8 <_Balloc+0x46>
 80048d0:	6046      	str	r6, [r0, #4]
 80048d2:	6085      	str	r5, [r0, #8]
 80048d4:	2300      	movs	r3, #0
 80048d6:	6103      	str	r3, [r0, #16]
 80048d8:	60c3      	str	r3, [r0, #12]
 80048da:	bd70      	pop	{r4, r5, r6, pc}

080048dc <_Bfree>:
 80048dc:	b570      	push	{r4, r5, r6, lr}
 80048de:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80048e0:	4606      	mov	r6, r0
 80048e2:	460d      	mov	r5, r1
 80048e4:	b93c      	cbnz	r4, 80048f6 <_Bfree+0x1a>
 80048e6:	2010      	movs	r0, #16
 80048e8:	f7ff fd8e 	bl	8004408 <malloc>
 80048ec:	6270      	str	r0, [r6, #36]	; 0x24
 80048ee:	6044      	str	r4, [r0, #4]
 80048f0:	6084      	str	r4, [r0, #8]
 80048f2:	6004      	str	r4, [r0, #0]
 80048f4:	60c4      	str	r4, [r0, #12]
 80048f6:	b13d      	cbz	r5, 8004908 <_Bfree+0x2c>
 80048f8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80048fa:	686a      	ldr	r2, [r5, #4]
 80048fc:	68db      	ldr	r3, [r3, #12]
 80048fe:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004902:	6029      	str	r1, [r5, #0]
 8004904:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8004908:	bd70      	pop	{r4, r5, r6, pc}

0800490a <__multadd>:
 800490a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800490e:	690d      	ldr	r5, [r1, #16]
 8004910:	461f      	mov	r7, r3
 8004912:	4606      	mov	r6, r0
 8004914:	460c      	mov	r4, r1
 8004916:	f101 0e14 	add.w	lr, r1, #20
 800491a:	2300      	movs	r3, #0
 800491c:	f8de 0000 	ldr.w	r0, [lr]
 8004920:	b281      	uxth	r1, r0
 8004922:	fb02 7101 	mla	r1, r2, r1, r7
 8004926:	0c0f      	lsrs	r7, r1, #16
 8004928:	0c00      	lsrs	r0, r0, #16
 800492a:	fb02 7000 	mla	r0, r2, r0, r7
 800492e:	b289      	uxth	r1, r1
 8004930:	3301      	adds	r3, #1
 8004932:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8004936:	429d      	cmp	r5, r3
 8004938:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800493c:	f84e 1b04 	str.w	r1, [lr], #4
 8004940:	dcec      	bgt.n	800491c <__multadd+0x12>
 8004942:	b1d7      	cbz	r7, 800497a <__multadd+0x70>
 8004944:	68a3      	ldr	r3, [r4, #8]
 8004946:	429d      	cmp	r5, r3
 8004948:	db12      	blt.n	8004970 <__multadd+0x66>
 800494a:	6861      	ldr	r1, [r4, #4]
 800494c:	4630      	mov	r0, r6
 800494e:	3101      	adds	r1, #1
 8004950:	f7ff ff8f 	bl	8004872 <_Balloc>
 8004954:	6922      	ldr	r2, [r4, #16]
 8004956:	3202      	adds	r2, #2
 8004958:	f104 010c 	add.w	r1, r4, #12
 800495c:	4680      	mov	r8, r0
 800495e:	0092      	lsls	r2, r2, #2
 8004960:	300c      	adds	r0, #12
 8004962:	f7ff ff79 	bl	8004858 <memcpy>
 8004966:	4621      	mov	r1, r4
 8004968:	4630      	mov	r0, r6
 800496a:	f7ff ffb7 	bl	80048dc <_Bfree>
 800496e:	4644      	mov	r4, r8
 8004970:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004974:	3501      	adds	r5, #1
 8004976:	615f      	str	r7, [r3, #20]
 8004978:	6125      	str	r5, [r4, #16]
 800497a:	4620      	mov	r0, r4
 800497c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004980 <__hi0bits>:
 8004980:	0c03      	lsrs	r3, r0, #16
 8004982:	041b      	lsls	r3, r3, #16
 8004984:	b913      	cbnz	r3, 800498c <__hi0bits+0xc>
 8004986:	0400      	lsls	r0, r0, #16
 8004988:	2310      	movs	r3, #16
 800498a:	e000      	b.n	800498e <__hi0bits+0xe>
 800498c:	2300      	movs	r3, #0
 800498e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8004992:	bf04      	itt	eq
 8004994:	0200      	lsleq	r0, r0, #8
 8004996:	3308      	addeq	r3, #8
 8004998:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800499c:	bf04      	itt	eq
 800499e:	0100      	lsleq	r0, r0, #4
 80049a0:	3304      	addeq	r3, #4
 80049a2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80049a6:	bf04      	itt	eq
 80049a8:	0080      	lsleq	r0, r0, #2
 80049aa:	3302      	addeq	r3, #2
 80049ac:	2800      	cmp	r0, #0
 80049ae:	db03      	blt.n	80049b8 <__hi0bits+0x38>
 80049b0:	0042      	lsls	r2, r0, #1
 80049b2:	d503      	bpl.n	80049bc <__hi0bits+0x3c>
 80049b4:	1c58      	adds	r0, r3, #1
 80049b6:	4770      	bx	lr
 80049b8:	4618      	mov	r0, r3
 80049ba:	4770      	bx	lr
 80049bc:	2020      	movs	r0, #32
 80049be:	4770      	bx	lr

080049c0 <__lo0bits>:
 80049c0:	6803      	ldr	r3, [r0, #0]
 80049c2:	f013 0207 	ands.w	r2, r3, #7
 80049c6:	d00b      	beq.n	80049e0 <__lo0bits+0x20>
 80049c8:	07d9      	lsls	r1, r3, #31
 80049ca:	d422      	bmi.n	8004a12 <__lo0bits+0x52>
 80049cc:	079a      	lsls	r2, r3, #30
 80049ce:	bf4b      	itete	mi
 80049d0:	085b      	lsrmi	r3, r3, #1
 80049d2:	089b      	lsrpl	r3, r3, #2
 80049d4:	6003      	strmi	r3, [r0, #0]
 80049d6:	6003      	strpl	r3, [r0, #0]
 80049d8:	bf4c      	ite	mi
 80049da:	2001      	movmi	r0, #1
 80049dc:	2002      	movpl	r0, #2
 80049de:	4770      	bx	lr
 80049e0:	b299      	uxth	r1, r3
 80049e2:	b909      	cbnz	r1, 80049e8 <__lo0bits+0x28>
 80049e4:	0c1b      	lsrs	r3, r3, #16
 80049e6:	2210      	movs	r2, #16
 80049e8:	f013 0fff 	tst.w	r3, #255	; 0xff
 80049ec:	bf04      	itt	eq
 80049ee:	0a1b      	lsreq	r3, r3, #8
 80049f0:	3208      	addeq	r2, #8
 80049f2:	0719      	lsls	r1, r3, #28
 80049f4:	bf04      	itt	eq
 80049f6:	091b      	lsreq	r3, r3, #4
 80049f8:	3204      	addeq	r2, #4
 80049fa:	0799      	lsls	r1, r3, #30
 80049fc:	bf04      	itt	eq
 80049fe:	089b      	lsreq	r3, r3, #2
 8004a00:	3202      	addeq	r2, #2
 8004a02:	07d9      	lsls	r1, r3, #31
 8004a04:	d402      	bmi.n	8004a0c <__lo0bits+0x4c>
 8004a06:	085b      	lsrs	r3, r3, #1
 8004a08:	d005      	beq.n	8004a16 <__lo0bits+0x56>
 8004a0a:	3201      	adds	r2, #1
 8004a0c:	6003      	str	r3, [r0, #0]
 8004a0e:	4610      	mov	r0, r2
 8004a10:	4770      	bx	lr
 8004a12:	2000      	movs	r0, #0
 8004a14:	4770      	bx	lr
 8004a16:	2020      	movs	r0, #32
 8004a18:	4770      	bx	lr

08004a1a <__i2b>:
 8004a1a:	b510      	push	{r4, lr}
 8004a1c:	460c      	mov	r4, r1
 8004a1e:	2101      	movs	r1, #1
 8004a20:	f7ff ff27 	bl	8004872 <_Balloc>
 8004a24:	2201      	movs	r2, #1
 8004a26:	6144      	str	r4, [r0, #20]
 8004a28:	6102      	str	r2, [r0, #16]
 8004a2a:	bd10      	pop	{r4, pc}

08004a2c <__multiply>:
 8004a2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a30:	4614      	mov	r4, r2
 8004a32:	690a      	ldr	r2, [r1, #16]
 8004a34:	6923      	ldr	r3, [r4, #16]
 8004a36:	429a      	cmp	r2, r3
 8004a38:	bfb8      	it	lt
 8004a3a:	460b      	movlt	r3, r1
 8004a3c:	4688      	mov	r8, r1
 8004a3e:	bfbc      	itt	lt
 8004a40:	46a0      	movlt	r8, r4
 8004a42:	461c      	movlt	r4, r3
 8004a44:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8004a48:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8004a4c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8004a50:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8004a54:	eb07 0609 	add.w	r6, r7, r9
 8004a58:	429e      	cmp	r6, r3
 8004a5a:	bfc8      	it	gt
 8004a5c:	3101      	addgt	r1, #1
 8004a5e:	f7ff ff08 	bl	8004872 <_Balloc>
 8004a62:	f100 0514 	add.w	r5, r0, #20
 8004a66:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
 8004a6a:	462b      	mov	r3, r5
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	4563      	cmp	r3, ip
 8004a70:	d202      	bcs.n	8004a78 <__multiply+0x4c>
 8004a72:	f843 2b04 	str.w	r2, [r3], #4
 8004a76:	e7fa      	b.n	8004a6e <__multiply+0x42>
 8004a78:	f104 0214 	add.w	r2, r4, #20
 8004a7c:	f108 0114 	add.w	r1, r8, #20
 8004a80:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8004a84:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8004a88:	9300      	str	r3, [sp, #0]
 8004a8a:	9b00      	ldr	r3, [sp, #0]
 8004a8c:	9201      	str	r2, [sp, #4]
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d957      	bls.n	8004b42 <__multiply+0x116>
 8004a92:	f8b2 b000 	ldrh.w	fp, [r2]
 8004a96:	f1bb 0f00 	cmp.w	fp, #0
 8004a9a:	d023      	beq.n	8004ae4 <__multiply+0xb8>
 8004a9c:	4689      	mov	r9, r1
 8004a9e:	46ae      	mov	lr, r5
 8004aa0:	f04f 0800 	mov.w	r8, #0
 8004aa4:	f859 4b04 	ldr.w	r4, [r9], #4
 8004aa8:	f8be a000 	ldrh.w	sl, [lr]
 8004aac:	b2a3      	uxth	r3, r4
 8004aae:	fb0b a303 	mla	r3, fp, r3, sl
 8004ab2:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8004ab6:	f8de 4000 	ldr.w	r4, [lr]
 8004aba:	4443      	add	r3, r8
 8004abc:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8004ac0:	fb0b 840a 	mla	r4, fp, sl, r8
 8004ac4:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8004ac8:	46f2      	mov	sl, lr
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8004ad0:	454f      	cmp	r7, r9
 8004ad2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8004ad6:	f84a 3b04 	str.w	r3, [sl], #4
 8004ada:	d901      	bls.n	8004ae0 <__multiply+0xb4>
 8004adc:	46d6      	mov	lr, sl
 8004ade:	e7e1      	b.n	8004aa4 <__multiply+0x78>
 8004ae0:	f8ce 8004 	str.w	r8, [lr, #4]
 8004ae4:	9b01      	ldr	r3, [sp, #4]
 8004ae6:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8004aea:	3204      	adds	r2, #4
 8004aec:	f1ba 0f00 	cmp.w	sl, #0
 8004af0:	d021      	beq.n	8004b36 <__multiply+0x10a>
 8004af2:	682b      	ldr	r3, [r5, #0]
 8004af4:	462c      	mov	r4, r5
 8004af6:	4689      	mov	r9, r1
 8004af8:	f04f 0800 	mov.w	r8, #0
 8004afc:	f8b9 e000 	ldrh.w	lr, [r9]
 8004b00:	f8b4 b002 	ldrh.w	fp, [r4, #2]
 8004b04:	fb0a be0e 	mla	lr, sl, lr, fp
 8004b08:	44f0      	add	r8, lr
 8004b0a:	46a3      	mov	fp, r4
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8004b12:	f84b 3b04 	str.w	r3, [fp], #4
 8004b16:	f859 3b04 	ldr.w	r3, [r9], #4
 8004b1a:	f8b4 e004 	ldrh.w	lr, [r4, #4]
 8004b1e:	0c1b      	lsrs	r3, r3, #16
 8004b20:	fb0a e303 	mla	r3, sl, r3, lr
 8004b24:	eb03 4318 	add.w	r3, r3, r8, lsr #16
 8004b28:	454f      	cmp	r7, r9
 8004b2a:	ea4f 4813 	mov.w	r8, r3, lsr #16
 8004b2e:	d901      	bls.n	8004b34 <__multiply+0x108>
 8004b30:	465c      	mov	r4, fp
 8004b32:	e7e3      	b.n	8004afc <__multiply+0xd0>
 8004b34:	6063      	str	r3, [r4, #4]
 8004b36:	3504      	adds	r5, #4
 8004b38:	e7a7      	b.n	8004a8a <__multiply+0x5e>
 8004b3a:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
 8004b3e:	b913      	cbnz	r3, 8004b46 <__multiply+0x11a>
 8004b40:	3e01      	subs	r6, #1
 8004b42:	2e00      	cmp	r6, #0
 8004b44:	dcf9      	bgt.n	8004b3a <__multiply+0x10e>
 8004b46:	6106      	str	r6, [r0, #16]
 8004b48:	b003      	add	sp, #12
 8004b4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08004b50 <__pow5mult>:
 8004b50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b54:	4615      	mov	r5, r2
 8004b56:	f012 0203 	ands.w	r2, r2, #3
 8004b5a:	4606      	mov	r6, r0
 8004b5c:	460f      	mov	r7, r1
 8004b5e:	d007      	beq.n	8004b70 <__pow5mult+0x20>
 8004b60:	3a01      	subs	r2, #1
 8004b62:	4c21      	ldr	r4, [pc, #132]	; (8004be8 <__pow5mult+0x98>)
 8004b64:	2300      	movs	r3, #0
 8004b66:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004b6a:	f7ff fece 	bl	800490a <__multadd>
 8004b6e:	4607      	mov	r7, r0
 8004b70:	10ad      	asrs	r5, r5, #2
 8004b72:	d036      	beq.n	8004be2 <__pow5mult+0x92>
 8004b74:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004b76:	b93c      	cbnz	r4, 8004b88 <__pow5mult+0x38>
 8004b78:	2010      	movs	r0, #16
 8004b7a:	f7ff fc45 	bl	8004408 <malloc>
 8004b7e:	6270      	str	r0, [r6, #36]	; 0x24
 8004b80:	6044      	str	r4, [r0, #4]
 8004b82:	6084      	str	r4, [r0, #8]
 8004b84:	6004      	str	r4, [r0, #0]
 8004b86:	60c4      	str	r4, [r0, #12]
 8004b88:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004b8c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004b90:	b94c      	cbnz	r4, 8004ba6 <__pow5mult+0x56>
 8004b92:	f240 2171 	movw	r1, #625	; 0x271
 8004b96:	4630      	mov	r0, r6
 8004b98:	f7ff ff3f 	bl	8004a1a <__i2b>
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	f8c8 0008 	str.w	r0, [r8, #8]
 8004ba2:	4604      	mov	r4, r0
 8004ba4:	6003      	str	r3, [r0, #0]
 8004ba6:	f04f 0800 	mov.w	r8, #0
 8004baa:	07eb      	lsls	r3, r5, #31
 8004bac:	d50a      	bpl.n	8004bc4 <__pow5mult+0x74>
 8004bae:	4639      	mov	r1, r7
 8004bb0:	4622      	mov	r2, r4
 8004bb2:	4630      	mov	r0, r6
 8004bb4:	f7ff ff3a 	bl	8004a2c <__multiply>
 8004bb8:	4639      	mov	r1, r7
 8004bba:	4681      	mov	r9, r0
 8004bbc:	4630      	mov	r0, r6
 8004bbe:	f7ff fe8d 	bl	80048dc <_Bfree>
 8004bc2:	464f      	mov	r7, r9
 8004bc4:	106d      	asrs	r5, r5, #1
 8004bc6:	d00c      	beq.n	8004be2 <__pow5mult+0x92>
 8004bc8:	6820      	ldr	r0, [r4, #0]
 8004bca:	b108      	cbz	r0, 8004bd0 <__pow5mult+0x80>
 8004bcc:	4604      	mov	r4, r0
 8004bce:	e7ec      	b.n	8004baa <__pow5mult+0x5a>
 8004bd0:	4622      	mov	r2, r4
 8004bd2:	4621      	mov	r1, r4
 8004bd4:	4630      	mov	r0, r6
 8004bd6:	f7ff ff29 	bl	8004a2c <__multiply>
 8004bda:	6020      	str	r0, [r4, #0]
 8004bdc:	f8c0 8000 	str.w	r8, [r0]
 8004be0:	e7f4      	b.n	8004bcc <__pow5mult+0x7c>
 8004be2:	4638      	mov	r0, r7
 8004be4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004be8:	080067b8 	.word	0x080067b8

08004bec <__lshift>:
 8004bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bf0:	460c      	mov	r4, r1
 8004bf2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004bf6:	6926      	ldr	r6, [r4, #16]
 8004bf8:	6849      	ldr	r1, [r1, #4]
 8004bfa:	68a3      	ldr	r3, [r4, #8]
 8004bfc:	4456      	add	r6, sl
 8004bfe:	4607      	mov	r7, r0
 8004c00:	4691      	mov	r9, r2
 8004c02:	1c75      	adds	r5, r6, #1
 8004c04:	42ab      	cmp	r3, r5
 8004c06:	da02      	bge.n	8004c0e <__lshift+0x22>
 8004c08:	3101      	adds	r1, #1
 8004c0a:	005b      	lsls	r3, r3, #1
 8004c0c:	e7fa      	b.n	8004c04 <__lshift+0x18>
 8004c0e:	4638      	mov	r0, r7
 8004c10:	f7ff fe2f 	bl	8004872 <_Balloc>
 8004c14:	2300      	movs	r3, #0
 8004c16:	4680      	mov	r8, r0
 8004c18:	f100 0114 	add.w	r1, r0, #20
 8004c1c:	461a      	mov	r2, r3
 8004c1e:	4553      	cmp	r3, sl
 8004c20:	da03      	bge.n	8004c2a <__lshift+0x3e>
 8004c22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8004c26:	3301      	adds	r3, #1
 8004c28:	e7f9      	b.n	8004c1e <__lshift+0x32>
 8004c2a:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 8004c2e:	6920      	ldr	r0, [r4, #16]
 8004c30:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8004c34:	f019 091f 	ands.w	r9, r9, #31
 8004c38:	f104 0114 	add.w	r1, r4, #20
 8004c3c:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8004c40:	d014      	beq.n	8004c6c <__lshift+0x80>
 8004c42:	f1c9 0c20 	rsb	ip, r9, #32
 8004c46:	2200      	movs	r2, #0
 8004c48:	6808      	ldr	r0, [r1, #0]
 8004c4a:	fa00 f009 	lsl.w	r0, r0, r9
 8004c4e:	4302      	orrs	r2, r0
 8004c50:	469a      	mov	sl, r3
 8004c52:	f843 2b04 	str.w	r2, [r3], #4
 8004c56:	f851 2b04 	ldr.w	r2, [r1], #4
 8004c5a:	458e      	cmp	lr, r1
 8004c5c:	fa22 f20c 	lsr.w	r2, r2, ip
 8004c60:	d8f2      	bhi.n	8004c48 <__lshift+0x5c>
 8004c62:	f8ca 2004 	str.w	r2, [sl, #4]
 8004c66:	b142      	cbz	r2, 8004c7a <__lshift+0x8e>
 8004c68:	1cb5      	adds	r5, r6, #2
 8004c6a:	e006      	b.n	8004c7a <__lshift+0x8e>
 8004c6c:	3b04      	subs	r3, #4
 8004c6e:	f851 2b04 	ldr.w	r2, [r1], #4
 8004c72:	f843 2f04 	str.w	r2, [r3, #4]!
 8004c76:	458e      	cmp	lr, r1
 8004c78:	d8f9      	bhi.n	8004c6e <__lshift+0x82>
 8004c7a:	3d01      	subs	r5, #1
 8004c7c:	4638      	mov	r0, r7
 8004c7e:	f8c8 5010 	str.w	r5, [r8, #16]
 8004c82:	4621      	mov	r1, r4
 8004c84:	f7ff fe2a 	bl	80048dc <_Bfree>
 8004c88:	4640      	mov	r0, r8
 8004c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004c8e <__mcmp>:
 8004c8e:	6903      	ldr	r3, [r0, #16]
 8004c90:	690a      	ldr	r2, [r1, #16]
 8004c92:	1a9b      	subs	r3, r3, r2
 8004c94:	b510      	push	{r4, lr}
 8004c96:	d111      	bne.n	8004cbc <__mcmp+0x2e>
 8004c98:	0092      	lsls	r2, r2, #2
 8004c9a:	3014      	adds	r0, #20
 8004c9c:	3114      	adds	r1, #20
 8004c9e:	1883      	adds	r3, r0, r2
 8004ca0:	440a      	add	r2, r1
 8004ca2:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8004ca6:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8004caa:	428c      	cmp	r4, r1
 8004cac:	d002      	beq.n	8004cb4 <__mcmp+0x26>
 8004cae:	d307      	bcc.n	8004cc0 <__mcmp+0x32>
 8004cb0:	2001      	movs	r0, #1
 8004cb2:	bd10      	pop	{r4, pc}
 8004cb4:	4298      	cmp	r0, r3
 8004cb6:	d3f4      	bcc.n	8004ca2 <__mcmp+0x14>
 8004cb8:	2000      	movs	r0, #0
 8004cba:	bd10      	pop	{r4, pc}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	bd10      	pop	{r4, pc}
 8004cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8004cc4:	bd10      	pop	{r4, pc}

08004cc6 <__mdiff>:
 8004cc6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004cca:	460c      	mov	r4, r1
 8004ccc:	4607      	mov	r7, r0
 8004cce:	4611      	mov	r1, r2
 8004cd0:	4620      	mov	r0, r4
 8004cd2:	4615      	mov	r5, r2
 8004cd4:	f7ff ffdb 	bl	8004c8e <__mcmp>
 8004cd8:	1e06      	subs	r6, r0, #0
 8004cda:	d108      	bne.n	8004cee <__mdiff+0x28>
 8004cdc:	4631      	mov	r1, r6
 8004cde:	4638      	mov	r0, r7
 8004ce0:	f7ff fdc7 	bl	8004872 <_Balloc>
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	6103      	str	r3, [r0, #16]
 8004ce8:	6146      	str	r6, [r0, #20]
 8004cea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004cee:	bfbc      	itt	lt
 8004cf0:	4623      	movlt	r3, r4
 8004cf2:	462c      	movlt	r4, r5
 8004cf4:	4638      	mov	r0, r7
 8004cf6:	6861      	ldr	r1, [r4, #4]
 8004cf8:	bfba      	itte	lt
 8004cfa:	461d      	movlt	r5, r3
 8004cfc:	2601      	movlt	r6, #1
 8004cfe:	2600      	movge	r6, #0
 8004d00:	f7ff fdb7 	bl	8004872 <_Balloc>
 8004d04:	692b      	ldr	r3, [r5, #16]
 8004d06:	60c6      	str	r6, [r0, #12]
 8004d08:	6926      	ldr	r6, [r4, #16]
 8004d0a:	f105 0914 	add.w	r9, r5, #20
 8004d0e:	3414      	adds	r4, #20
 8004d10:	eb04 0786 	add.w	r7, r4, r6, lsl #2
 8004d14:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8004d18:	f100 0514 	add.w	r5, r0, #20
 8004d1c:	f04f 0c00 	mov.w	ip, #0
 8004d20:	f854 3b04 	ldr.w	r3, [r4], #4
 8004d24:	f859 2b04 	ldr.w	r2, [r9], #4
 8004d28:	fa1c f183 	uxtah	r1, ip, r3
 8004d2c:	fa1f fe82 	uxth.w	lr, r2
 8004d30:	0c12      	lsrs	r2, r2, #16
 8004d32:	ebce 0101 	rsb	r1, lr, r1
 8004d36:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
 8004d3a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8004d3e:	b289      	uxth	r1, r1
 8004d40:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8004d44:	45c8      	cmp	r8, r9
 8004d46:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8004d4a:	46a6      	mov	lr, r4
 8004d4c:	f845 3b04 	str.w	r3, [r5], #4
 8004d50:	d8e6      	bhi.n	8004d20 <__mdiff+0x5a>
 8004d52:	45be      	cmp	lr, r7
 8004d54:	d20e      	bcs.n	8004d74 <__mdiff+0xae>
 8004d56:	f85e 1b04 	ldr.w	r1, [lr], #4
 8004d5a:	fa1c f281 	uxtah	r2, ip, r1
 8004d5e:	1413      	asrs	r3, r2, #16
 8004d60:	eb03 4311 	add.w	r3, r3, r1, lsr #16
 8004d64:	b292      	uxth	r2, r2
 8004d66:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004d6a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8004d6e:	f845 2b04 	str.w	r2, [r5], #4
 8004d72:	e7ee      	b.n	8004d52 <__mdiff+0x8c>
 8004d74:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8004d78:	b90b      	cbnz	r3, 8004d7e <__mdiff+0xb8>
 8004d7a:	3e01      	subs	r6, #1
 8004d7c:	e7fa      	b.n	8004d74 <__mdiff+0xae>
 8004d7e:	6106      	str	r6, [r0, #16]
 8004d80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08004d84 <__d2b>:
 8004d84:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004d88:	460e      	mov	r6, r1
 8004d8a:	2101      	movs	r1, #1
 8004d8c:	ec59 8b10 	vmov	r8, r9, d0
 8004d90:	4615      	mov	r5, r2
 8004d92:	f7ff fd6e 	bl	8004872 <_Balloc>
 8004d96:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004d9a:	4607      	mov	r7, r0
 8004d9c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004da0:	b10c      	cbz	r4, 8004da6 <__d2b+0x22>
 8004da2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004da6:	9301      	str	r3, [sp, #4]
 8004da8:	f1b8 0f00 	cmp.w	r8, #0
 8004dac:	d019      	beq.n	8004de2 <__d2b+0x5e>
 8004dae:	a802      	add	r0, sp, #8
 8004db0:	f840 8d08 	str.w	r8, [r0, #-8]!
 8004db4:	f7ff fe04 	bl	80049c0 <__lo0bits>
 8004db8:	9b00      	ldr	r3, [sp, #0]
 8004dba:	b148      	cbz	r0, 8004dd0 <__d2b+0x4c>
 8004dbc:	9a01      	ldr	r2, [sp, #4]
 8004dbe:	f1c0 0120 	rsb	r1, r0, #32
 8004dc2:	fa02 f101 	lsl.w	r1, r2, r1
 8004dc6:	430b      	orrs	r3, r1
 8004dc8:	40c2      	lsrs	r2, r0
 8004dca:	617b      	str	r3, [r7, #20]
 8004dcc:	9201      	str	r2, [sp, #4]
 8004dce:	e000      	b.n	8004dd2 <__d2b+0x4e>
 8004dd0:	617b      	str	r3, [r7, #20]
 8004dd2:	9b01      	ldr	r3, [sp, #4]
 8004dd4:	61bb      	str	r3, [r7, #24]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	bf14      	ite	ne
 8004dda:	2102      	movne	r1, #2
 8004ddc:	2101      	moveq	r1, #1
 8004dde:	6139      	str	r1, [r7, #16]
 8004de0:	e007      	b.n	8004df2 <__d2b+0x6e>
 8004de2:	a801      	add	r0, sp, #4
 8004de4:	f7ff fdec 	bl	80049c0 <__lo0bits>
 8004de8:	9b01      	ldr	r3, [sp, #4]
 8004dea:	617b      	str	r3, [r7, #20]
 8004dec:	2101      	movs	r1, #1
 8004dee:	6139      	str	r1, [r7, #16]
 8004df0:	3020      	adds	r0, #32
 8004df2:	b134      	cbz	r4, 8004e02 <__d2b+0x7e>
 8004df4:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8004df8:	4404      	add	r4, r0
 8004dfa:	6034      	str	r4, [r6, #0]
 8004dfc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004e00:	e009      	b.n	8004e16 <__d2b+0x92>
 8004e02:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8004e06:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004e0a:	6030      	str	r0, [r6, #0]
 8004e0c:	6918      	ldr	r0, [r3, #16]
 8004e0e:	f7ff fdb7 	bl	8004980 <__hi0bits>
 8004e12:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8004e16:	6028      	str	r0, [r5, #0]
 8004e18:	4638      	mov	r0, r7
 8004e1a:	b003      	add	sp, #12
 8004e1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08004e20 <_sbrk_r>:
 8004e20:	b538      	push	{r3, r4, r5, lr}
 8004e22:	4c06      	ldr	r4, [pc, #24]	; (8004e3c <_sbrk_r+0x1c>)
 8004e24:	2300      	movs	r3, #0
 8004e26:	4605      	mov	r5, r0
 8004e28:	4608      	mov	r0, r1
 8004e2a:	6023      	str	r3, [r4, #0]
 8004e2c:	f001 fbe4 	bl	80065f8 <_sbrk>
 8004e30:	1c43      	adds	r3, r0, #1
 8004e32:	d102      	bne.n	8004e3a <_sbrk_r+0x1a>
 8004e34:	6823      	ldr	r3, [r4, #0]
 8004e36:	b103      	cbz	r3, 8004e3a <_sbrk_r+0x1a>
 8004e38:	602b      	str	r3, [r5, #0]
 8004e3a:	bd38      	pop	{r3, r4, r5, pc}
 8004e3c:	20000690 	.word	0x20000690

08004e40 <__ssprint_r>:
 8004e40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e44:	4693      	mov	fp, r2
 8004e46:	6892      	ldr	r2, [r2, #8]
 8004e48:	4681      	mov	r9, r0
 8004e4a:	460c      	mov	r4, r1
 8004e4c:	b34a      	cbz	r2, 8004ea2 <__ssprint_r+0x62>
 8004e4e:	2300      	movs	r3, #0
 8004e50:	f8db a000 	ldr.w	sl, [fp]
 8004e54:	9301      	str	r3, [sp, #4]
 8004e56:	461f      	mov	r7, r3
 8004e58:	e006      	b.n	8004e68 <__ssprint_r+0x28>
 8004e5a:	f8da 3000 	ldr.w	r3, [sl]
 8004e5e:	f8da 7004 	ldr.w	r7, [sl, #4]
 8004e62:	9301      	str	r3, [sp, #4]
 8004e64:	f10a 0a08 	add.w	sl, sl, #8
 8004e68:	2f00      	cmp	r7, #0
 8004e6a:	d0f6      	beq.n	8004e5a <__ssprint_r+0x1a>
 8004e6c:	68a6      	ldr	r6, [r4, #8]
 8004e6e:	42b7      	cmp	r7, r6
 8004e70:	d360      	bcc.n	8004f34 <__ssprint_r+0xf4>
 8004e72:	89a0      	ldrh	r0, [r4, #12]
 8004e74:	f410 6f90 	tst.w	r0, #1152	; 0x480
 8004e78:	d117      	bne.n	8004eaa <__ssprint_r+0x6a>
 8004e7a:	42b7      	cmp	r7, r6
 8004e7c:	d35a      	bcc.n	8004f34 <__ssprint_r+0xf4>
 8004e7e:	4632      	mov	r2, r6
 8004e80:	9901      	ldr	r1, [sp, #4]
 8004e82:	6820      	ldr	r0, [r4, #0]
 8004e84:	f000 f99c 	bl	80051c0 <memmove>
 8004e88:	68a2      	ldr	r2, [r4, #8]
 8004e8a:	1b92      	subs	r2, r2, r6
 8004e8c:	60a2      	str	r2, [r4, #8]
 8004e8e:	6822      	ldr	r2, [r4, #0]
 8004e90:	4416      	add	r6, r2
 8004e92:	f8db 2008 	ldr.w	r2, [fp, #8]
 8004e96:	6026      	str	r6, [r4, #0]
 8004e98:	1bd7      	subs	r7, r2, r7
 8004e9a:	f8cb 7008 	str.w	r7, [fp, #8]
 8004e9e:	2f00      	cmp	r7, #0
 8004ea0:	d1db      	bne.n	8004e5a <__ssprint_r+0x1a>
 8004ea2:	2000      	movs	r0, #0
 8004ea4:	f8cb 0004 	str.w	r0, [fp, #4]
 8004ea8:	e046      	b.n	8004f38 <__ssprint_r+0xf8>
 8004eaa:	6825      	ldr	r5, [r4, #0]
 8004eac:	6921      	ldr	r1, [r4, #16]
 8004eae:	ebc1 0805 	rsb	r8, r1, r5
 8004eb2:	f108 0201 	add.w	r2, r8, #1
 8004eb6:	6965      	ldr	r5, [r4, #20]
 8004eb8:	443a      	add	r2, r7
 8004eba:	2302      	movs	r3, #2
 8004ebc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004ec0:	fb95 f5f3 	sdiv	r5, r5, r3
 8004ec4:	4295      	cmp	r5, r2
 8004ec6:	bf38      	it	cc
 8004ec8:	4615      	movcc	r5, r2
 8004eca:	0543      	lsls	r3, r0, #21
 8004ecc:	d510      	bpl.n	8004ef0 <__ssprint_r+0xb0>
 8004ece:	4629      	mov	r1, r5
 8004ed0:	4648      	mov	r0, r9
 8004ed2:	f7ff faa1 	bl	8004418 <_malloc_r>
 8004ed6:	4606      	mov	r6, r0
 8004ed8:	b1a0      	cbz	r0, 8004f04 <__ssprint_r+0xc4>
 8004eda:	4642      	mov	r2, r8
 8004edc:	6921      	ldr	r1, [r4, #16]
 8004ede:	f7ff fcbb 	bl	8004858 <memcpy>
 8004ee2:	89a2      	ldrh	r2, [r4, #12]
 8004ee4:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8004ee8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004eec:	81a2      	strh	r2, [r4, #12]
 8004eee:	e018      	b.n	8004f22 <__ssprint_r+0xe2>
 8004ef0:	462a      	mov	r2, r5
 8004ef2:	4648      	mov	r0, r9
 8004ef4:	f000 f988 	bl	8005208 <_realloc_r>
 8004ef8:	4606      	mov	r6, r0
 8004efa:	b990      	cbnz	r0, 8004f22 <__ssprint_r+0xe2>
 8004efc:	6921      	ldr	r1, [r4, #16]
 8004efe:	4648      	mov	r0, r9
 8004f00:	f000 f8a0 	bl	8005044 <_free_r>
 8004f04:	220c      	movs	r2, #12
 8004f06:	f8c9 2000 	str.w	r2, [r9]
 8004f0a:	89a2      	ldrh	r2, [r4, #12]
 8004f0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f10:	81a2      	strh	r2, [r4, #12]
 8004f12:	2200      	movs	r2, #0
 8004f14:	f8cb 2008 	str.w	r2, [fp, #8]
 8004f18:	f8cb 2004 	str.w	r2, [fp, #4]
 8004f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8004f20:	e00a      	b.n	8004f38 <__ssprint_r+0xf8>
 8004f22:	6126      	str	r6, [r4, #16]
 8004f24:	6165      	str	r5, [r4, #20]
 8004f26:	4446      	add	r6, r8
 8004f28:	ebc8 0505 	rsb	r5, r8, r5
 8004f2c:	6026      	str	r6, [r4, #0]
 8004f2e:	60a5      	str	r5, [r4, #8]
 8004f30:	463e      	mov	r6, r7
 8004f32:	e7a2      	b.n	8004e7a <__ssprint_r+0x3a>
 8004f34:	463e      	mov	r6, r7
 8004f36:	e7a2      	b.n	8004e7e <__ssprint_r+0x3e>
 8004f38:	b003      	add	sp, #12
 8004f3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004f3e <_calloc_r>:
 8004f3e:	b510      	push	{r4, lr}
 8004f40:	4351      	muls	r1, r2
 8004f42:	f7ff fa69 	bl	8004418 <_malloc_r>
 8004f46:	4604      	mov	r4, r0
 8004f48:	b320      	cbz	r0, 8004f94 <_calloc_r+0x56>
 8004f4a:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8004f4e:	f022 0203 	bic.w	r2, r2, #3
 8004f52:	3a04      	subs	r2, #4
 8004f54:	2a24      	cmp	r2, #36	; 0x24
 8004f56:	d81a      	bhi.n	8004f8e <_calloc_r+0x50>
 8004f58:	2a13      	cmp	r2, #19
 8004f5a:	d912      	bls.n	8004f82 <_calloc_r+0x44>
 8004f5c:	2100      	movs	r1, #0
 8004f5e:	2a1b      	cmp	r2, #27
 8004f60:	6001      	str	r1, [r0, #0]
 8004f62:	6041      	str	r1, [r0, #4]
 8004f64:	d802      	bhi.n	8004f6c <_calloc_r+0x2e>
 8004f66:	f100 0308 	add.w	r3, r0, #8
 8004f6a:	e00b      	b.n	8004f84 <_calloc_r+0x46>
 8004f6c:	2a24      	cmp	r2, #36	; 0x24
 8004f6e:	6081      	str	r1, [r0, #8]
 8004f70:	60c1      	str	r1, [r0, #12]
 8004f72:	bf11      	iteee	ne
 8004f74:	f100 0310 	addne.w	r3, r0, #16
 8004f78:	6101      	streq	r1, [r0, #16]
 8004f7a:	f100 0318 	addeq.w	r3, r0, #24
 8004f7e:	6141      	streq	r1, [r0, #20]
 8004f80:	e000      	b.n	8004f84 <_calloc_r+0x46>
 8004f82:	4603      	mov	r3, r0
 8004f84:	2200      	movs	r2, #0
 8004f86:	601a      	str	r2, [r3, #0]
 8004f88:	605a      	str	r2, [r3, #4]
 8004f8a:	609a      	str	r2, [r3, #8]
 8004f8c:	e002      	b.n	8004f94 <_calloc_r+0x56>
 8004f8e:	2100      	movs	r1, #0
 8004f90:	f000 f931 	bl	80051f6 <memset>
 8004f94:	4620      	mov	r0, r4
 8004f96:	bd10      	pop	{r4, pc}

08004f98 <_malloc_trim_r>:
 8004f98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f9c:	4f25      	ldr	r7, [pc, #148]	; (8005034 <_malloc_trim_r+0x9c>)
 8004f9e:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8005040 <_malloc_trim_r+0xa8>
 8004fa2:	4689      	mov	r9, r1
 8004fa4:	4606      	mov	r6, r0
 8004fa6:	f7ff fc62 	bl	800486e <__malloc_lock>
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	685d      	ldr	r5, [r3, #4]
 8004fae:	f1a8 0411 	sub.w	r4, r8, #17
 8004fb2:	f025 0503 	bic.w	r5, r5, #3
 8004fb6:	442c      	add	r4, r5
 8004fb8:	ebc9 0404 	rsb	r4, r9, r4
 8004fbc:	fbb4 f4f8 	udiv	r4, r4, r8
 8004fc0:	3c01      	subs	r4, #1
 8004fc2:	fb08 f404 	mul.w	r4, r8, r4
 8004fc6:	4544      	cmp	r4, r8
 8004fc8:	da05      	bge.n	8004fd6 <_malloc_trim_r+0x3e>
 8004fca:	4630      	mov	r0, r6
 8004fcc:	f7ff fc50 	bl	8004870 <__malloc_unlock>
 8004fd0:	2000      	movs	r0, #0
 8004fd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004fd6:	2100      	movs	r1, #0
 8004fd8:	4630      	mov	r0, r6
 8004fda:	f7ff ff21 	bl	8004e20 <_sbrk_r>
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	442b      	add	r3, r5
 8004fe2:	4298      	cmp	r0, r3
 8004fe4:	d1f1      	bne.n	8004fca <_malloc_trim_r+0x32>
 8004fe6:	4261      	negs	r1, r4
 8004fe8:	4630      	mov	r0, r6
 8004fea:	f7ff ff19 	bl	8004e20 <_sbrk_r>
 8004fee:	3001      	adds	r0, #1
 8004ff0:	d110      	bne.n	8005014 <_malloc_trim_r+0x7c>
 8004ff2:	2100      	movs	r1, #0
 8004ff4:	4630      	mov	r0, r6
 8004ff6:	f7ff ff13 	bl	8004e20 <_sbrk_r>
 8004ffa:	68ba      	ldr	r2, [r7, #8]
 8004ffc:	1a83      	subs	r3, r0, r2
 8004ffe:	2b0f      	cmp	r3, #15
 8005000:	dde3      	ble.n	8004fca <_malloc_trim_r+0x32>
 8005002:	490d      	ldr	r1, [pc, #52]	; (8005038 <_malloc_trim_r+0xa0>)
 8005004:	6809      	ldr	r1, [r1, #0]
 8005006:	1a40      	subs	r0, r0, r1
 8005008:	490c      	ldr	r1, [pc, #48]	; (800503c <_malloc_trim_r+0xa4>)
 800500a:	f043 0301 	orr.w	r3, r3, #1
 800500e:	6008      	str	r0, [r1, #0]
 8005010:	6053      	str	r3, [r2, #4]
 8005012:	e7da      	b.n	8004fca <_malloc_trim_r+0x32>
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	4a09      	ldr	r2, [pc, #36]	; (800503c <_malloc_trim_r+0xa4>)
 8005018:	1b2d      	subs	r5, r5, r4
 800501a:	f045 0501 	orr.w	r5, r5, #1
 800501e:	605d      	str	r5, [r3, #4]
 8005020:	6813      	ldr	r3, [r2, #0]
 8005022:	4630      	mov	r0, r6
 8005024:	1b1c      	subs	r4, r3, r4
 8005026:	6014      	str	r4, [r2, #0]
 8005028:	f7ff fc22 	bl	8004870 <__malloc_unlock>
 800502c:	2001      	movs	r0, #1
 800502e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005032:	bf00      	nop
 8005034:	20000130 	.word	0x20000130
 8005038:	2000053c 	.word	0x2000053c
 800503c:	20000568 	.word	0x20000568
 8005040:	00000080 	.word	0x00000080

08005044 <_free_r>:
 8005044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005048:	4604      	mov	r4, r0
 800504a:	4688      	mov	r8, r1
 800504c:	2900      	cmp	r1, #0
 800504e:	f000 80ad 	beq.w	80051ac <_free_r+0x168>
 8005052:	f7ff fc0c 	bl	800486e <__malloc_lock>
 8005056:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800505a:	4d55      	ldr	r5, [pc, #340]	; (80051b0 <_free_r+0x16c>)
 800505c:	f022 0001 	bic.w	r0, r2, #1
 8005060:	f1a8 0308 	sub.w	r3, r8, #8
 8005064:	181f      	adds	r7, r3, r0
 8005066:	68a9      	ldr	r1, [r5, #8]
 8005068:	687e      	ldr	r6, [r7, #4]
 800506a:	428f      	cmp	r7, r1
 800506c:	f026 0603 	bic.w	r6, r6, #3
 8005070:	f002 0201 	and.w	r2, r2, #1
 8005074:	d11b      	bne.n	80050ae <_free_r+0x6a>
 8005076:	4430      	add	r0, r6
 8005078:	b93a      	cbnz	r2, 800508a <_free_r+0x46>
 800507a:	f858 2c08 	ldr.w	r2, [r8, #-8]
 800507e:	1a9b      	subs	r3, r3, r2
 8005080:	4410      	add	r0, r2
 8005082:	6899      	ldr	r1, [r3, #8]
 8005084:	68da      	ldr	r2, [r3, #12]
 8005086:	60ca      	str	r2, [r1, #12]
 8005088:	6091      	str	r1, [r2, #8]
 800508a:	f040 0201 	orr.w	r2, r0, #1
 800508e:	605a      	str	r2, [r3, #4]
 8005090:	60ab      	str	r3, [r5, #8]
 8005092:	4b48      	ldr	r3, [pc, #288]	; (80051b4 <_free_r+0x170>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4298      	cmp	r0, r3
 8005098:	d304      	bcc.n	80050a4 <_free_r+0x60>
 800509a:	4b47      	ldr	r3, [pc, #284]	; (80051b8 <_free_r+0x174>)
 800509c:	4620      	mov	r0, r4
 800509e:	6819      	ldr	r1, [r3, #0]
 80050a0:	f7ff ff7a 	bl	8004f98 <_malloc_trim_r>
 80050a4:	4620      	mov	r0, r4
 80050a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80050aa:	f7ff bbe1 	b.w	8004870 <__malloc_unlock>
 80050ae:	607e      	str	r6, [r7, #4]
 80050b0:	b97a      	cbnz	r2, 80050d2 <_free_r+0x8e>
 80050b2:	f858 1c08 	ldr.w	r1, [r8, #-8]
 80050b6:	1a5b      	subs	r3, r3, r1
 80050b8:	4408      	add	r0, r1
 80050ba:	6899      	ldr	r1, [r3, #8]
 80050bc:	f105 0e08 	add.w	lr, r5, #8
 80050c0:	4571      	cmp	r1, lr
 80050c2:	d008      	beq.n	80050d6 <_free_r+0x92>
 80050c4:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 80050c8:	f8c1 e00c 	str.w	lr, [r1, #12]
 80050cc:	f8ce 1008 	str.w	r1, [lr, #8]
 80050d0:	e002      	b.n	80050d8 <_free_r+0x94>
 80050d2:	2200      	movs	r2, #0
 80050d4:	e000      	b.n	80050d8 <_free_r+0x94>
 80050d6:	2201      	movs	r2, #1
 80050d8:	19b9      	adds	r1, r7, r6
 80050da:	6849      	ldr	r1, [r1, #4]
 80050dc:	07c9      	lsls	r1, r1, #31
 80050de:	d40e      	bmi.n	80050fe <_free_r+0xba>
 80050e0:	4430      	add	r0, r6
 80050e2:	68b9      	ldr	r1, [r7, #8]
 80050e4:	b942      	cbnz	r2, 80050f8 <_free_r+0xb4>
 80050e6:	4e35      	ldr	r6, [pc, #212]	; (80051bc <_free_r+0x178>)
 80050e8:	42b1      	cmp	r1, r6
 80050ea:	d105      	bne.n	80050f8 <_free_r+0xb4>
 80050ec:	616b      	str	r3, [r5, #20]
 80050ee:	612b      	str	r3, [r5, #16]
 80050f0:	2201      	movs	r2, #1
 80050f2:	60d9      	str	r1, [r3, #12]
 80050f4:	6099      	str	r1, [r3, #8]
 80050f6:	e002      	b.n	80050fe <_free_r+0xba>
 80050f8:	68fe      	ldr	r6, [r7, #12]
 80050fa:	60ce      	str	r6, [r1, #12]
 80050fc:	60b1      	str	r1, [r6, #8]
 80050fe:	f040 0101 	orr.w	r1, r0, #1
 8005102:	6059      	str	r1, [r3, #4]
 8005104:	5018      	str	r0, [r3, r0]
 8005106:	2a00      	cmp	r2, #0
 8005108:	d1cc      	bne.n	80050a4 <_free_r+0x60>
 800510a:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800510e:	d212      	bcs.n	8005136 <_free_r+0xf2>
 8005110:	08c0      	lsrs	r0, r0, #3
 8005112:	1081      	asrs	r1, r0, #2
 8005114:	2201      	movs	r2, #1
 8005116:	fa02 f101 	lsl.w	r1, r2, r1
 800511a:	686a      	ldr	r2, [r5, #4]
 800511c:	3001      	adds	r0, #1
 800511e:	430a      	orrs	r2, r1
 8005120:	606a      	str	r2, [r5, #4]
 8005122:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8005126:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 800512a:	6099      	str	r1, [r3, #8]
 800512c:	3a08      	subs	r2, #8
 800512e:	60da      	str	r2, [r3, #12]
 8005130:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 8005134:	e038      	b.n	80051a8 <_free_r+0x164>
 8005136:	0a42      	lsrs	r2, r0, #9
 8005138:	2a04      	cmp	r2, #4
 800513a:	d802      	bhi.n	8005142 <_free_r+0xfe>
 800513c:	0982      	lsrs	r2, r0, #6
 800513e:	3238      	adds	r2, #56	; 0x38
 8005140:	e015      	b.n	800516e <_free_r+0x12a>
 8005142:	2a14      	cmp	r2, #20
 8005144:	d801      	bhi.n	800514a <_free_r+0x106>
 8005146:	325b      	adds	r2, #91	; 0x5b
 8005148:	e011      	b.n	800516e <_free_r+0x12a>
 800514a:	2a54      	cmp	r2, #84	; 0x54
 800514c:	d802      	bhi.n	8005154 <_free_r+0x110>
 800514e:	0b02      	lsrs	r2, r0, #12
 8005150:	326e      	adds	r2, #110	; 0x6e
 8005152:	e00c      	b.n	800516e <_free_r+0x12a>
 8005154:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8005158:	d802      	bhi.n	8005160 <_free_r+0x11c>
 800515a:	0bc2      	lsrs	r2, r0, #15
 800515c:	3277      	adds	r2, #119	; 0x77
 800515e:	e006      	b.n	800516e <_free_r+0x12a>
 8005160:	f240 5154 	movw	r1, #1364	; 0x554
 8005164:	428a      	cmp	r2, r1
 8005166:	bf9a      	itte	ls
 8005168:	0c82      	lsrls	r2, r0, #18
 800516a:	327c      	addls	r2, #124	; 0x7c
 800516c:	227e      	movhi	r2, #126	; 0x7e
 800516e:	1c51      	adds	r1, r2, #1
 8005170:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8005174:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 8005178:	4f0d      	ldr	r7, [pc, #52]	; (80051b0 <_free_r+0x16c>)
 800517a:	428e      	cmp	r6, r1
 800517c:	d10b      	bne.n	8005196 <_free_r+0x152>
 800517e:	2101      	movs	r1, #1
 8005180:	1092      	asrs	r2, r2, #2
 8005182:	fa01 f202 	lsl.w	r2, r1, r2
 8005186:	6879      	ldr	r1, [r7, #4]
 8005188:	4311      	orrs	r1, r2
 800518a:	6079      	str	r1, [r7, #4]
 800518c:	4631      	mov	r1, r6
 800518e:	e008      	b.n	80051a2 <_free_r+0x15e>
 8005190:	6889      	ldr	r1, [r1, #8]
 8005192:	428e      	cmp	r6, r1
 8005194:	d004      	beq.n	80051a0 <_free_r+0x15c>
 8005196:	684a      	ldr	r2, [r1, #4]
 8005198:	f022 0203 	bic.w	r2, r2, #3
 800519c:	4290      	cmp	r0, r2
 800519e:	d3f7      	bcc.n	8005190 <_free_r+0x14c>
 80051a0:	68ce      	ldr	r6, [r1, #12]
 80051a2:	60de      	str	r6, [r3, #12]
 80051a4:	6099      	str	r1, [r3, #8]
 80051a6:	60b3      	str	r3, [r6, #8]
 80051a8:	60cb      	str	r3, [r1, #12]
 80051aa:	e77b      	b.n	80050a4 <_free_r+0x60>
 80051ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051b0:	20000130 	.word	0x20000130
 80051b4:	20000538 	.word	0x20000538
 80051b8:	20000564 	.word	0x20000564
 80051bc:	20000138 	.word	0x20000138

080051c0 <memmove>:
 80051c0:	4288      	cmp	r0, r1
 80051c2:	b510      	push	{r4, lr}
 80051c4:	eb01 0302 	add.w	r3, r1, r2
 80051c8:	d801      	bhi.n	80051ce <memmove+0xe>
 80051ca:	1e42      	subs	r2, r0, #1
 80051cc:	e00b      	b.n	80051e6 <memmove+0x26>
 80051ce:	4298      	cmp	r0, r3
 80051d0:	d2fb      	bcs.n	80051ca <memmove+0xa>
 80051d2:	1881      	adds	r1, r0, r2
 80051d4:	1ad2      	subs	r2, r2, r3
 80051d6:	42d3      	cmn	r3, r2
 80051d8:	d004      	beq.n	80051e4 <memmove+0x24>
 80051da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80051de:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80051e2:	e7f8      	b.n	80051d6 <memmove+0x16>
 80051e4:	bd10      	pop	{r4, pc}
 80051e6:	4299      	cmp	r1, r3
 80051e8:	d004      	beq.n	80051f4 <memmove+0x34>
 80051ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80051ee:	f802 4f01 	strb.w	r4, [r2, #1]!
 80051f2:	e7f8      	b.n	80051e6 <memmove+0x26>
 80051f4:	bd10      	pop	{r4, pc}

080051f6 <memset>:
 80051f6:	4402      	add	r2, r0
 80051f8:	4603      	mov	r3, r0
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d002      	beq.n	8005204 <memset+0xe>
 80051fe:	f803 1b01 	strb.w	r1, [r3], #1
 8005202:	e7fa      	b.n	80051fa <memset+0x4>
 8005204:	4770      	bx	lr
	...

08005208 <_realloc_r>:
 8005208:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800520c:	4681      	mov	r9, r0
 800520e:	460c      	mov	r4, r1
 8005210:	b929      	cbnz	r1, 800521e <_realloc_r+0x16>
 8005212:	4611      	mov	r1, r2
 8005214:	b003      	add	sp, #12
 8005216:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800521a:	f7ff b8fd 	b.w	8004418 <_malloc_r>
 800521e:	9201      	str	r2, [sp, #4]
 8005220:	f7ff fb25 	bl	800486e <__malloc_lock>
 8005224:	9a01      	ldr	r2, [sp, #4]
 8005226:	f854 ec04 	ldr.w	lr, [r4, #-4]
 800522a:	f102 080b 	add.w	r8, r2, #11
 800522e:	f1b8 0f16 	cmp.w	r8, #22
 8005232:	f1a4 0b08 	sub.w	fp, r4, #8
 8005236:	f02e 0503 	bic.w	r5, lr, #3
 800523a:	d903      	bls.n	8005244 <_realloc_r+0x3c>
 800523c:	f038 0807 	bics.w	r8, r8, #7
 8005240:	d502      	bpl.n	8005248 <_realloc_r+0x40>
 8005242:	e003      	b.n	800524c <_realloc_r+0x44>
 8005244:	f04f 0810 	mov.w	r8, #16
 8005248:	4590      	cmp	r8, r2
 800524a:	d204      	bcs.n	8005256 <_realloc_r+0x4e>
 800524c:	230c      	movs	r3, #12
 800524e:	f8c9 3000 	str.w	r3, [r9]
 8005252:	2000      	movs	r0, #0
 8005254:	e17d      	b.n	8005552 <_realloc_r+0x34a>
 8005256:	45a8      	cmp	r8, r5
 8005258:	f340 8150 	ble.w	80054fc <_realloc_r+0x2f4>
 800525c:	4ba6      	ldr	r3, [pc, #664]	; (80054f8 <_realloc_r+0x2f0>)
 800525e:	6898      	ldr	r0, [r3, #8]
 8005260:	eb0b 0105 	add.w	r1, fp, r5
 8005264:	4281      	cmp	r1, r0
 8005266:	684f      	ldr	r7, [r1, #4]
 8005268:	d005      	beq.n	8005276 <_realloc_r+0x6e>
 800526a:	f027 0601 	bic.w	r6, r7, #1
 800526e:	440e      	add	r6, r1
 8005270:	6876      	ldr	r6, [r6, #4]
 8005272:	07f6      	lsls	r6, r6, #31
 8005274:	d426      	bmi.n	80052c4 <_realloc_r+0xbc>
 8005276:	f027 0a03 	bic.w	sl, r7, #3
 800527a:	4281      	cmp	r1, r0
 800527c:	eb05 070a 	add.w	r7, r5, sl
 8005280:	d118      	bne.n	80052b4 <_realloc_r+0xac>
 8005282:	f108 0610 	add.w	r6, r8, #16
 8005286:	42b7      	cmp	r7, r6
 8005288:	db1f      	blt.n	80052ca <_realloc_r+0xc2>
 800528a:	eb0b 0008 	add.w	r0, fp, r8
 800528e:	ebc8 0707 	rsb	r7, r8, r7
 8005292:	f047 0701 	orr.w	r7, r7, #1
 8005296:	6098      	str	r0, [r3, #8]
 8005298:	6047      	str	r7, [r0, #4]
 800529a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800529e:	f003 0301 	and.w	r3, r3, #1
 80052a2:	ea43 0308 	orr.w	r3, r3, r8
 80052a6:	4648      	mov	r0, r9
 80052a8:	f844 3c04 	str.w	r3, [r4, #-4]
 80052ac:	f7ff fae0 	bl	8004870 <__malloc_unlock>
 80052b0:	4620      	mov	r0, r4
 80052b2:	e14e      	b.n	8005552 <_realloc_r+0x34a>
 80052b4:	45b8      	cmp	r8, r7
 80052b6:	dc08      	bgt.n	80052ca <_realloc_r+0xc2>
 80052b8:	68cb      	ldr	r3, [r1, #12]
 80052ba:	688a      	ldr	r2, [r1, #8]
 80052bc:	463d      	mov	r5, r7
 80052be:	60d3      	str	r3, [r2, #12]
 80052c0:	609a      	str	r2, [r3, #8]
 80052c2:	e11b      	b.n	80054fc <_realloc_r+0x2f4>
 80052c4:	f04f 0a00 	mov.w	sl, #0
 80052c8:	4651      	mov	r1, sl
 80052ca:	f01e 0f01 	tst.w	lr, #1
 80052ce:	f040 80c3 	bne.w	8005458 <_realloc_r+0x250>
 80052d2:	f854 7c08 	ldr.w	r7, [r4, #-8]
 80052d6:	ebc7 070b 	rsb	r7, r7, fp
 80052da:	687e      	ldr	r6, [r7, #4]
 80052dc:	f026 0603 	bic.w	r6, r6, #3
 80052e0:	442e      	add	r6, r5
 80052e2:	2900      	cmp	r1, #0
 80052e4:	f000 8083 	beq.w	80053ee <_realloc_r+0x1e6>
 80052e8:	4281      	cmp	r1, r0
 80052ea:	44b2      	add	sl, r6
 80052ec:	d147      	bne.n	800537e <_realloc_r+0x176>
 80052ee:	f108 0110 	add.w	r1, r8, #16
 80052f2:	458a      	cmp	sl, r1
 80052f4:	db7b      	blt.n	80053ee <_realloc_r+0x1e6>
 80052f6:	463e      	mov	r6, r7
 80052f8:	68fa      	ldr	r2, [r7, #12]
 80052fa:	f856 1f08 	ldr.w	r1, [r6, #8]!
 80052fe:	60ca      	str	r2, [r1, #12]
 8005300:	6091      	str	r1, [r2, #8]
 8005302:	1f2a      	subs	r2, r5, #4
 8005304:	2a24      	cmp	r2, #36	; 0x24
 8005306:	d825      	bhi.n	8005354 <_realloc_r+0x14c>
 8005308:	2a13      	cmp	r2, #19
 800530a:	d91b      	bls.n	8005344 <_realloc_r+0x13c>
 800530c:	6821      	ldr	r1, [r4, #0]
 800530e:	60b9      	str	r1, [r7, #8]
 8005310:	6861      	ldr	r1, [r4, #4]
 8005312:	60f9      	str	r1, [r7, #12]
 8005314:	2a1b      	cmp	r2, #27
 8005316:	d803      	bhi.n	8005320 <_realloc_r+0x118>
 8005318:	f107 0210 	add.w	r2, r7, #16
 800531c:	3408      	adds	r4, #8
 800531e:	e012      	b.n	8005346 <_realloc_r+0x13e>
 8005320:	68a1      	ldr	r1, [r4, #8]
 8005322:	6139      	str	r1, [r7, #16]
 8005324:	68e1      	ldr	r1, [r4, #12]
 8005326:	6179      	str	r1, [r7, #20]
 8005328:	2a24      	cmp	r2, #36	; 0x24
 800532a:	bf01      	itttt	eq
 800532c:	6922      	ldreq	r2, [r4, #16]
 800532e:	61ba      	streq	r2, [r7, #24]
 8005330:	6961      	ldreq	r1, [r4, #20]
 8005332:	61f9      	streq	r1, [r7, #28]
 8005334:	bf19      	ittee	ne
 8005336:	f107 0218 	addne.w	r2, r7, #24
 800533a:	3410      	addne	r4, #16
 800533c:	f107 0220 	addeq.w	r2, r7, #32
 8005340:	3418      	addeq	r4, #24
 8005342:	e000      	b.n	8005346 <_realloc_r+0x13e>
 8005344:	4632      	mov	r2, r6
 8005346:	6821      	ldr	r1, [r4, #0]
 8005348:	6011      	str	r1, [r2, #0]
 800534a:	6861      	ldr	r1, [r4, #4]
 800534c:	6051      	str	r1, [r2, #4]
 800534e:	68a1      	ldr	r1, [r4, #8]
 8005350:	6091      	str	r1, [r2, #8]
 8005352:	e005      	b.n	8005360 <_realloc_r+0x158>
 8005354:	4621      	mov	r1, r4
 8005356:	4630      	mov	r0, r6
 8005358:	9301      	str	r3, [sp, #4]
 800535a:	f7ff ff31 	bl	80051c0 <memmove>
 800535e:	9b01      	ldr	r3, [sp, #4]
 8005360:	eb07 0208 	add.w	r2, r7, r8
 8005364:	ebc8 0a0a 	rsb	sl, r8, sl
 8005368:	609a      	str	r2, [r3, #8]
 800536a:	f04a 0301 	orr.w	r3, sl, #1
 800536e:	6053      	str	r3, [r2, #4]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	f003 0301 	and.w	r3, r3, #1
 8005376:	ea43 0308 	orr.w	r3, r3, r8
 800537a:	607b      	str	r3, [r7, #4]
 800537c:	e0b6      	b.n	80054ec <_realloc_r+0x2e4>
 800537e:	45d0      	cmp	r8, sl
 8005380:	dc35      	bgt.n	80053ee <_realloc_r+0x1e6>
 8005382:	68cb      	ldr	r3, [r1, #12]
 8005384:	688a      	ldr	r2, [r1, #8]
 8005386:	4638      	mov	r0, r7
 8005388:	60d3      	str	r3, [r2, #12]
 800538a:	609a      	str	r2, [r3, #8]
 800538c:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	60d3      	str	r3, [r2, #12]
 8005394:	609a      	str	r2, [r3, #8]
 8005396:	1f2a      	subs	r2, r5, #4
 8005398:	2a24      	cmp	r2, #36	; 0x24
 800539a:	d823      	bhi.n	80053e4 <_realloc_r+0x1dc>
 800539c:	2a13      	cmp	r2, #19
 800539e:	d91a      	bls.n	80053d6 <_realloc_r+0x1ce>
 80053a0:	6823      	ldr	r3, [r4, #0]
 80053a2:	60bb      	str	r3, [r7, #8]
 80053a4:	6863      	ldr	r3, [r4, #4]
 80053a6:	60fb      	str	r3, [r7, #12]
 80053a8:	2a1b      	cmp	r2, #27
 80053aa:	d803      	bhi.n	80053b4 <_realloc_r+0x1ac>
 80053ac:	f107 0010 	add.w	r0, r7, #16
 80053b0:	3408      	adds	r4, #8
 80053b2:	e010      	b.n	80053d6 <_realloc_r+0x1ce>
 80053b4:	68a3      	ldr	r3, [r4, #8]
 80053b6:	613b      	str	r3, [r7, #16]
 80053b8:	68e3      	ldr	r3, [r4, #12]
 80053ba:	617b      	str	r3, [r7, #20]
 80053bc:	2a24      	cmp	r2, #36	; 0x24
 80053be:	bf01      	itttt	eq
 80053c0:	6923      	ldreq	r3, [r4, #16]
 80053c2:	61bb      	streq	r3, [r7, #24]
 80053c4:	6963      	ldreq	r3, [r4, #20]
 80053c6:	61fb      	streq	r3, [r7, #28]
 80053c8:	bf19      	ittee	ne
 80053ca:	f107 0018 	addne.w	r0, r7, #24
 80053ce:	3410      	addne	r4, #16
 80053d0:	f107 0020 	addeq.w	r0, r7, #32
 80053d4:	3418      	addeq	r4, #24
 80053d6:	6823      	ldr	r3, [r4, #0]
 80053d8:	6003      	str	r3, [r0, #0]
 80053da:	6863      	ldr	r3, [r4, #4]
 80053dc:	6043      	str	r3, [r0, #4]
 80053de:	68a3      	ldr	r3, [r4, #8]
 80053e0:	6083      	str	r3, [r0, #8]
 80053e2:	e002      	b.n	80053ea <_realloc_r+0x1e2>
 80053e4:	4621      	mov	r1, r4
 80053e6:	f7ff feeb 	bl	80051c0 <memmove>
 80053ea:	4655      	mov	r5, sl
 80053ec:	e02e      	b.n	800544c <_realloc_r+0x244>
 80053ee:	45b0      	cmp	r8, r6
 80053f0:	dc32      	bgt.n	8005458 <_realloc_r+0x250>
 80053f2:	4638      	mov	r0, r7
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f850 2f08 	ldr.w	r2, [r0, #8]!
 80053fa:	60d3      	str	r3, [r2, #12]
 80053fc:	609a      	str	r2, [r3, #8]
 80053fe:	1f2a      	subs	r2, r5, #4
 8005400:	2a24      	cmp	r2, #36	; 0x24
 8005402:	d825      	bhi.n	8005450 <_realloc_r+0x248>
 8005404:	2a13      	cmp	r2, #19
 8005406:	d91a      	bls.n	800543e <_realloc_r+0x236>
 8005408:	6823      	ldr	r3, [r4, #0]
 800540a:	60bb      	str	r3, [r7, #8]
 800540c:	6863      	ldr	r3, [r4, #4]
 800540e:	60fb      	str	r3, [r7, #12]
 8005410:	2a1b      	cmp	r2, #27
 8005412:	d803      	bhi.n	800541c <_realloc_r+0x214>
 8005414:	f107 0010 	add.w	r0, r7, #16
 8005418:	3408      	adds	r4, #8
 800541a:	e010      	b.n	800543e <_realloc_r+0x236>
 800541c:	68a3      	ldr	r3, [r4, #8]
 800541e:	613b      	str	r3, [r7, #16]
 8005420:	68e3      	ldr	r3, [r4, #12]
 8005422:	617b      	str	r3, [r7, #20]
 8005424:	2a24      	cmp	r2, #36	; 0x24
 8005426:	bf01      	itttt	eq
 8005428:	6923      	ldreq	r3, [r4, #16]
 800542a:	61bb      	streq	r3, [r7, #24]
 800542c:	6963      	ldreq	r3, [r4, #20]
 800542e:	61fb      	streq	r3, [r7, #28]
 8005430:	bf19      	ittee	ne
 8005432:	f107 0018 	addne.w	r0, r7, #24
 8005436:	3410      	addne	r4, #16
 8005438:	f107 0020 	addeq.w	r0, r7, #32
 800543c:	3418      	addeq	r4, #24
 800543e:	6823      	ldr	r3, [r4, #0]
 8005440:	6003      	str	r3, [r0, #0]
 8005442:	6863      	ldr	r3, [r4, #4]
 8005444:	6043      	str	r3, [r0, #4]
 8005446:	68a3      	ldr	r3, [r4, #8]
 8005448:	6083      	str	r3, [r0, #8]
 800544a:	4635      	mov	r5, r6
 800544c:	46bb      	mov	fp, r7
 800544e:	e055      	b.n	80054fc <_realloc_r+0x2f4>
 8005450:	4621      	mov	r1, r4
 8005452:	f7ff feb5 	bl	80051c0 <memmove>
 8005456:	e7f8      	b.n	800544a <_realloc_r+0x242>
 8005458:	4611      	mov	r1, r2
 800545a:	4648      	mov	r0, r9
 800545c:	f7fe ffdc 	bl	8004418 <_malloc_r>
 8005460:	4606      	mov	r6, r0
 8005462:	2800      	cmp	r0, #0
 8005464:	d042      	beq.n	80054ec <_realloc_r+0x2e4>
 8005466:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800546a:	f023 0301 	bic.w	r3, r3, #1
 800546e:	f1a0 0208 	sub.w	r2, r0, #8
 8005472:	445b      	add	r3, fp
 8005474:	429a      	cmp	r2, r3
 8005476:	d105      	bne.n	8005484 <_realloc_r+0x27c>
 8005478:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800547c:	f023 0303 	bic.w	r3, r3, #3
 8005480:	441d      	add	r5, r3
 8005482:	e03b      	b.n	80054fc <_realloc_r+0x2f4>
 8005484:	1f2a      	subs	r2, r5, #4
 8005486:	2a24      	cmp	r2, #36	; 0x24
 8005488:	d829      	bhi.n	80054de <_realloc_r+0x2d6>
 800548a:	2a13      	cmp	r2, #19
 800548c:	d91e      	bls.n	80054cc <_realloc_r+0x2c4>
 800548e:	6823      	ldr	r3, [r4, #0]
 8005490:	6003      	str	r3, [r0, #0]
 8005492:	6863      	ldr	r3, [r4, #4]
 8005494:	6043      	str	r3, [r0, #4]
 8005496:	2a1b      	cmp	r2, #27
 8005498:	d804      	bhi.n	80054a4 <_realloc_r+0x29c>
 800549a:	f100 0308 	add.w	r3, r0, #8
 800549e:	f104 0208 	add.w	r2, r4, #8
 80054a2:	e015      	b.n	80054d0 <_realloc_r+0x2c8>
 80054a4:	68a3      	ldr	r3, [r4, #8]
 80054a6:	6083      	str	r3, [r0, #8]
 80054a8:	68e3      	ldr	r3, [r4, #12]
 80054aa:	60c3      	str	r3, [r0, #12]
 80054ac:	2a24      	cmp	r2, #36	; 0x24
 80054ae:	bf01      	itttt	eq
 80054b0:	6923      	ldreq	r3, [r4, #16]
 80054b2:	6103      	streq	r3, [r0, #16]
 80054b4:	6961      	ldreq	r1, [r4, #20]
 80054b6:	6141      	streq	r1, [r0, #20]
 80054b8:	bf19      	ittee	ne
 80054ba:	f100 0310 	addne.w	r3, r0, #16
 80054be:	f104 0210 	addne.w	r2, r4, #16
 80054c2:	f100 0318 	addeq.w	r3, r0, #24
 80054c6:	f104 0218 	addeq.w	r2, r4, #24
 80054ca:	e001      	b.n	80054d0 <_realloc_r+0x2c8>
 80054cc:	4603      	mov	r3, r0
 80054ce:	4622      	mov	r2, r4
 80054d0:	6811      	ldr	r1, [r2, #0]
 80054d2:	6019      	str	r1, [r3, #0]
 80054d4:	6851      	ldr	r1, [r2, #4]
 80054d6:	6059      	str	r1, [r3, #4]
 80054d8:	6892      	ldr	r2, [r2, #8]
 80054da:	609a      	str	r2, [r3, #8]
 80054dc:	e002      	b.n	80054e4 <_realloc_r+0x2dc>
 80054de:	4621      	mov	r1, r4
 80054e0:	f7ff fe6e 	bl	80051c0 <memmove>
 80054e4:	4621      	mov	r1, r4
 80054e6:	4648      	mov	r0, r9
 80054e8:	f7ff fdac 	bl	8005044 <_free_r>
 80054ec:	4648      	mov	r0, r9
 80054ee:	f7ff f9bf 	bl	8004870 <__malloc_unlock>
 80054f2:	4630      	mov	r0, r6
 80054f4:	e02d      	b.n	8005552 <_realloc_r+0x34a>
 80054f6:	bf00      	nop
 80054f8:	20000130 	.word	0x20000130
 80054fc:	ebc8 0205 	rsb	r2, r8, r5
 8005500:	2a0f      	cmp	r2, #15
 8005502:	f8db 3004 	ldr.w	r3, [fp, #4]
 8005506:	d914      	bls.n	8005532 <_realloc_r+0x32a>
 8005508:	f003 0301 	and.w	r3, r3, #1
 800550c:	eb0b 0108 	add.w	r1, fp, r8
 8005510:	ea43 0308 	orr.w	r3, r3, r8
 8005514:	f8cb 3004 	str.w	r3, [fp, #4]
 8005518:	f042 0301 	orr.w	r3, r2, #1
 800551c:	440a      	add	r2, r1
 800551e:	604b      	str	r3, [r1, #4]
 8005520:	6853      	ldr	r3, [r2, #4]
 8005522:	f043 0301 	orr.w	r3, r3, #1
 8005526:	6053      	str	r3, [r2, #4]
 8005528:	3108      	adds	r1, #8
 800552a:	4648      	mov	r0, r9
 800552c:	f7ff fd8a 	bl	8005044 <_free_r>
 8005530:	e00a      	b.n	8005548 <_realloc_r+0x340>
 8005532:	f003 0301 	and.w	r3, r3, #1
 8005536:	432b      	orrs	r3, r5
 8005538:	eb0b 0205 	add.w	r2, fp, r5
 800553c:	f8cb 3004 	str.w	r3, [fp, #4]
 8005540:	6853      	ldr	r3, [r2, #4]
 8005542:	f043 0301 	orr.w	r3, r3, #1
 8005546:	6053      	str	r3, [r2, #4]
 8005548:	4648      	mov	r0, r9
 800554a:	f7ff f991 	bl	8004870 <__malloc_unlock>
 800554e:	f10b 0008 	add.w	r0, fp, #8
 8005552:	b003      	add	sp, #12
 8005554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005558 <sin>:
 8005558:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800555a:	ec51 0b10 	vmov	r0, r1, d0
 800555e:	4a20      	ldr	r2, [pc, #128]	; (80055e0 <sin+0x88>)
 8005560:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005564:	4293      	cmp	r3, r2
 8005566:	dc03      	bgt.n	8005570 <sin+0x18>
 8005568:	2000      	movs	r0, #0
 800556a:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 80055d8 <sin+0x80>
 800556e:	e017      	b.n	80055a0 <sin+0x48>
 8005570:	4a1c      	ldr	r2, [pc, #112]	; (80055e4 <sin+0x8c>)
 8005572:	4293      	cmp	r3, r2
 8005574:	dd05      	ble.n	8005582 <sin+0x2a>
 8005576:	ee10 2a10 	vmov	r2, s0
 800557a:	460b      	mov	r3, r1
 800557c:	f7fa fea4 	bl	80002c8 <__aeabi_dsub>
 8005580:	e022      	b.n	80055c8 <sin+0x70>
 8005582:	4668      	mov	r0, sp
 8005584:	f000 f830 	bl	80055e8 <__ieee754_rem_pio2>
 8005588:	f000 0003 	and.w	r0, r0, #3
 800558c:	2801      	cmp	r0, #1
 800558e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005592:	ed9d 0b00 	vldr	d0, [sp]
 8005596:	d008      	beq.n	80055aa <sin+0x52>
 8005598:	2802      	cmp	r0, #2
 800559a:	d009      	beq.n	80055b0 <sin+0x58>
 800559c:	b960      	cbnz	r0, 80055b8 <sin+0x60>
 800559e:	2001      	movs	r0, #1
 80055a0:	f000 fe5a 	bl	8006258 <__kernel_sin>
 80055a4:	ec51 0b10 	vmov	r0, r1, d0
 80055a8:	e00e      	b.n	80055c8 <sin+0x70>
 80055aa:	f000 fa1d 	bl	80059e8 <__kernel_cos>
 80055ae:	e7f9      	b.n	80055a4 <sin+0x4c>
 80055b0:	2001      	movs	r0, #1
 80055b2:	f000 fe51 	bl	8006258 <__kernel_sin>
 80055b6:	e001      	b.n	80055bc <sin+0x64>
 80055b8:	f000 fa16 	bl	80059e8 <__kernel_cos>
 80055bc:	ec53 2b10 	vmov	r2, r3, d0
 80055c0:	ee10 0a10 	vmov	r0, s0
 80055c4:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80055c8:	ec41 0b10 	vmov	d0, r0, r1
 80055cc:	b005      	add	sp, #20
 80055ce:	f85d fb04 	ldr.w	pc, [sp], #4
 80055d2:	bf00      	nop
 80055d4:	f3af 8000 	nop.w
	...
 80055e0:	3fe921fb 	.word	0x3fe921fb
 80055e4:	7fefffff 	.word	0x7fefffff

080055e8 <__ieee754_rem_pio2>:
 80055e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055ec:	ec55 4b10 	vmov	r4, r5, d0
 80055f0:	4bc7      	ldr	r3, [pc, #796]	; (8005910 <__ieee754_rem_pio2+0x328>)
 80055f2:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80055f6:	4598      	cmp	r8, r3
 80055f8:	b08d      	sub	sp, #52	; 0x34
 80055fa:	4682      	mov	sl, r0
 80055fc:	46ab      	mov	fp, r5
 80055fe:	dc06      	bgt.n	800560e <__ieee754_rem_pio2+0x26>
 8005600:	2200      	movs	r2, #0
 8005602:	2300      	movs	r3, #0
 8005604:	ed8a 0b00 	vstr	d0, [sl]
 8005608:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800560c:	e160      	b.n	80058d0 <__ieee754_rem_pio2+0x2e8>
 800560e:	4bc1      	ldr	r3, [pc, #772]	; (8005914 <__ieee754_rem_pio2+0x32c>)
 8005610:	4598      	cmp	r8, r3
 8005612:	dc71      	bgt.n	80056f8 <__ieee754_rem_pio2+0x110>
 8005614:	2d00      	cmp	r5, #0
 8005616:	a3b0      	add	r3, pc, #704	; (adr r3, 80058d8 <__ieee754_rem_pio2+0x2f0>)
 8005618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800561c:	ee10 0a10 	vmov	r0, s0
 8005620:	4629      	mov	r1, r5
 8005622:	4ebd      	ldr	r6, [pc, #756]	; (8005918 <__ieee754_rem_pio2+0x330>)
 8005624:	dd33      	ble.n	800568e <__ieee754_rem_pio2+0xa6>
 8005626:	f7fa fe4f 	bl	80002c8 <__aeabi_dsub>
 800562a:	45b0      	cmp	r8, r6
 800562c:	4604      	mov	r4, r0
 800562e:	460d      	mov	r5, r1
 8005630:	d010      	beq.n	8005654 <__ieee754_rem_pio2+0x6c>
 8005632:	a3ab      	add	r3, pc, #684	; (adr r3, 80058e0 <__ieee754_rem_pio2+0x2f8>)
 8005634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005638:	f7fa fe46 	bl	80002c8 <__aeabi_dsub>
 800563c:	4602      	mov	r2, r0
 800563e:	460b      	mov	r3, r1
 8005640:	e9ca 2300 	strd	r2, r3, [sl]
 8005644:	4620      	mov	r0, r4
 8005646:	4629      	mov	r1, r5
 8005648:	f7fa fe3e 	bl	80002c8 <__aeabi_dsub>
 800564c:	a3a4      	add	r3, pc, #656	; (adr r3, 80058e0 <__ieee754_rem_pio2+0x2f8>)
 800564e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005652:	e016      	b.n	8005682 <__ieee754_rem_pio2+0x9a>
 8005654:	a3a4      	add	r3, pc, #656	; (adr r3, 80058e8 <__ieee754_rem_pio2+0x300>)
 8005656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800565a:	f7fa fe35 	bl	80002c8 <__aeabi_dsub>
 800565e:	a3a4      	add	r3, pc, #656	; (adr r3, 80058f0 <__ieee754_rem_pio2+0x308>)
 8005660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005664:	4604      	mov	r4, r0
 8005666:	460d      	mov	r5, r1
 8005668:	f7fa fe2e 	bl	80002c8 <__aeabi_dsub>
 800566c:	4602      	mov	r2, r0
 800566e:	460b      	mov	r3, r1
 8005670:	e9ca 2300 	strd	r2, r3, [sl]
 8005674:	4620      	mov	r0, r4
 8005676:	4629      	mov	r1, r5
 8005678:	f7fa fe26 	bl	80002c8 <__aeabi_dsub>
 800567c:	a39c      	add	r3, pc, #624	; (adr r3, 80058f0 <__ieee754_rem_pio2+0x308>)
 800567e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005682:	f7fa fe21 	bl	80002c8 <__aeabi_dsub>
 8005686:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800568a:	2001      	movs	r0, #1
 800568c:	e1a2      	b.n	80059d4 <__ieee754_rem_pio2+0x3ec>
 800568e:	f7fa fe1d 	bl	80002cc <__adddf3>
 8005692:	45b0      	cmp	r8, r6
 8005694:	4604      	mov	r4, r0
 8005696:	460d      	mov	r5, r1
 8005698:	d010      	beq.n	80056bc <__ieee754_rem_pio2+0xd4>
 800569a:	a391      	add	r3, pc, #580	; (adr r3, 80058e0 <__ieee754_rem_pio2+0x2f8>)
 800569c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056a0:	f7fa fe14 	bl	80002cc <__adddf3>
 80056a4:	4602      	mov	r2, r0
 80056a6:	460b      	mov	r3, r1
 80056a8:	e9ca 2300 	strd	r2, r3, [sl]
 80056ac:	4620      	mov	r0, r4
 80056ae:	4629      	mov	r1, r5
 80056b0:	f7fa fe0a 	bl	80002c8 <__aeabi_dsub>
 80056b4:	a38a      	add	r3, pc, #552	; (adr r3, 80058e0 <__ieee754_rem_pio2+0x2f8>)
 80056b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ba:	e016      	b.n	80056ea <__ieee754_rem_pio2+0x102>
 80056bc:	a38a      	add	r3, pc, #552	; (adr r3, 80058e8 <__ieee754_rem_pio2+0x300>)
 80056be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056c2:	f7fa fe03 	bl	80002cc <__adddf3>
 80056c6:	a38a      	add	r3, pc, #552	; (adr r3, 80058f0 <__ieee754_rem_pio2+0x308>)
 80056c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056cc:	4604      	mov	r4, r0
 80056ce:	460d      	mov	r5, r1
 80056d0:	f7fa fdfc 	bl	80002cc <__adddf3>
 80056d4:	4602      	mov	r2, r0
 80056d6:	460b      	mov	r3, r1
 80056d8:	e9ca 2300 	strd	r2, r3, [sl]
 80056dc:	4620      	mov	r0, r4
 80056de:	4629      	mov	r1, r5
 80056e0:	f7fa fdf2 	bl	80002c8 <__aeabi_dsub>
 80056e4:	a382      	add	r3, pc, #520	; (adr r3, 80058f0 <__ieee754_rem_pio2+0x308>)
 80056e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ea:	f7fa fdef 	bl	80002cc <__adddf3>
 80056ee:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80056f2:	f04f 30ff 	mov.w	r0, #4294967295
 80056f6:	e16d      	b.n	80059d4 <__ieee754_rem_pio2+0x3ec>
 80056f8:	4b88      	ldr	r3, [pc, #544]	; (800591c <__ieee754_rem_pio2+0x334>)
 80056fa:	4598      	cmp	r8, r3
 80056fc:	f300 80da 	bgt.w	80058b4 <__ieee754_rem_pio2+0x2cc>
 8005700:	f000 fe64 	bl	80063cc <fabs>
 8005704:	ec55 4b10 	vmov	r4, r5, d0
 8005708:	ee10 0a10 	vmov	r0, s0
 800570c:	a37a      	add	r3, pc, #488	; (adr r3, 80058f8 <__ieee754_rem_pio2+0x310>)
 800570e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005712:	4629      	mov	r1, r5
 8005714:	f7fa ff8c 	bl	8000630 <__aeabi_dmul>
 8005718:	2200      	movs	r2, #0
 800571a:	4b81      	ldr	r3, [pc, #516]	; (8005920 <__ieee754_rem_pio2+0x338>)
 800571c:	f7fa fdd6 	bl	80002cc <__adddf3>
 8005720:	f7fb fa36 	bl	8000b90 <__aeabi_d2iz>
 8005724:	4681      	mov	r9, r0
 8005726:	f7fa ff1d 	bl	8000564 <__aeabi_i2d>
 800572a:	a36b      	add	r3, pc, #428	; (adr r3, 80058d8 <__ieee754_rem_pio2+0x2f0>)
 800572c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005730:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005734:	f7fa ff7c 	bl	8000630 <__aeabi_dmul>
 8005738:	4602      	mov	r2, r0
 800573a:	460b      	mov	r3, r1
 800573c:	4620      	mov	r0, r4
 800573e:	4629      	mov	r1, r5
 8005740:	f7fa fdc2 	bl	80002c8 <__aeabi_dsub>
 8005744:	a366      	add	r3, pc, #408	; (adr r3, 80058e0 <__ieee754_rem_pio2+0x2f8>)
 8005746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800574a:	4604      	mov	r4, r0
 800574c:	460d      	mov	r5, r1
 800574e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005752:	f7fa ff6d 	bl	8000630 <__aeabi_dmul>
 8005756:	f1b9 0f1f 	cmp.w	r9, #31
 800575a:	4606      	mov	r6, r0
 800575c:	460f      	mov	r7, r1
 800575e:	dc06      	bgt.n	800576e <__ieee754_rem_pio2+0x186>
 8005760:	f109 32ff 	add.w	r2, r9, #4294967295
 8005764:	4b6f      	ldr	r3, [pc, #444]	; (8005924 <__ieee754_rem_pio2+0x33c>)
 8005766:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800576a:	4598      	cmp	r8, r3
 800576c:	d172      	bne.n	8005854 <__ieee754_rem_pio2+0x26c>
 800576e:	463b      	mov	r3, r7
 8005770:	4632      	mov	r2, r6
 8005772:	4620      	mov	r0, r4
 8005774:	4629      	mov	r1, r5
 8005776:	f7fa fda7 	bl	80002c8 <__aeabi_dsub>
 800577a:	ea4f 5828 	mov.w	r8, r8, asr #20
 800577e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005782:	ebc3 0308 	rsb	r3, r3, r8
 8005786:	2b10      	cmp	r3, #16
 8005788:	e9ca 0100 	strd	r0, r1, [sl]
 800578c:	dd6d      	ble.n	800586a <__ieee754_rem_pio2+0x282>
 800578e:	a356      	add	r3, pc, #344	; (adr r3, 80058e8 <__ieee754_rem_pio2+0x300>)
 8005790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005794:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005798:	f7fa ff4a 	bl	8000630 <__aeabi_dmul>
 800579c:	4606      	mov	r6, r0
 800579e:	460f      	mov	r7, r1
 80057a0:	4602      	mov	r2, r0
 80057a2:	460b      	mov	r3, r1
 80057a4:	4620      	mov	r0, r4
 80057a6:	4629      	mov	r1, r5
 80057a8:	f7fa fd8e 	bl	80002c8 <__aeabi_dsub>
 80057ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80057b0:	4602      	mov	r2, r0
 80057b2:	460b      	mov	r3, r1
 80057b4:	4620      	mov	r0, r4
 80057b6:	4629      	mov	r1, r5
 80057b8:	f7fa fd86 	bl	80002c8 <__aeabi_dsub>
 80057bc:	4632      	mov	r2, r6
 80057be:	463b      	mov	r3, r7
 80057c0:	f7fa fd82 	bl	80002c8 <__aeabi_dsub>
 80057c4:	a34a      	add	r3, pc, #296	; (adr r3, 80058f0 <__ieee754_rem_pio2+0x308>)
 80057c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ca:	4604      	mov	r4, r0
 80057cc:	460d      	mov	r5, r1
 80057ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80057d2:	f7fa ff2d 	bl	8000630 <__aeabi_dmul>
 80057d6:	4622      	mov	r2, r4
 80057d8:	462b      	mov	r3, r5
 80057da:	f7fa fd75 	bl	80002c8 <__aeabi_dsub>
 80057de:	460b      	mov	r3, r1
 80057e0:	4602      	mov	r2, r0
 80057e2:	4606      	mov	r6, r0
 80057e4:	460f      	mov	r7, r1
 80057e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80057ea:	f7fa fd6d 	bl	80002c8 <__aeabi_dsub>
 80057ee:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80057f2:	ebc3 0808 	rsb	r8, r3, r8
 80057f6:	f1b8 0f31 	cmp.w	r8, #49	; 0x31
 80057fa:	e9ca 0100 	strd	r0, r1, [sl]
 80057fe:	dd32      	ble.n	8005866 <__ieee754_rem_pio2+0x27e>
 8005800:	a33f      	add	r3, pc, #252	; (adr r3, 8005900 <__ieee754_rem_pio2+0x318>)
 8005802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005806:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800580a:	f7fa ff11 	bl	8000630 <__aeabi_dmul>
 800580e:	4606      	mov	r6, r0
 8005810:	460f      	mov	r7, r1
 8005812:	4602      	mov	r2, r0
 8005814:	460b      	mov	r3, r1
 8005816:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800581a:	f7fa fd55 	bl	80002c8 <__aeabi_dsub>
 800581e:	4602      	mov	r2, r0
 8005820:	460b      	mov	r3, r1
 8005822:	4604      	mov	r4, r0
 8005824:	460d      	mov	r5, r1
 8005826:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800582a:	f7fa fd4d 	bl	80002c8 <__aeabi_dsub>
 800582e:	4632      	mov	r2, r6
 8005830:	463b      	mov	r3, r7
 8005832:	f7fa fd49 	bl	80002c8 <__aeabi_dsub>
 8005836:	a334      	add	r3, pc, #208	; (adr r3, 8005908 <__ieee754_rem_pio2+0x320>)
 8005838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800583c:	4606      	mov	r6, r0
 800583e:	460f      	mov	r7, r1
 8005840:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005844:	f7fa fef4 	bl	8000630 <__aeabi_dmul>
 8005848:	4632      	mov	r2, r6
 800584a:	463b      	mov	r3, r7
 800584c:	f7fa fd3c 	bl	80002c8 <__aeabi_dsub>
 8005850:	4606      	mov	r6, r0
 8005852:	460f      	mov	r7, r1
 8005854:	4632      	mov	r2, r6
 8005856:	463b      	mov	r3, r7
 8005858:	4620      	mov	r0, r4
 800585a:	4629      	mov	r1, r5
 800585c:	f7fa fd34 	bl	80002c8 <__aeabi_dsub>
 8005860:	e9ca 0100 	strd	r0, r1, [sl]
 8005864:	e001      	b.n	800586a <__ieee754_rem_pio2+0x282>
 8005866:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800586a:	ed9a 7b00 	vldr	d7, [sl]
 800586e:	4620      	mov	r0, r4
 8005870:	ec53 2b17 	vmov	r2, r3, d7
 8005874:	4629      	mov	r1, r5
 8005876:	ed8d 7b02 	vstr	d7, [sp, #8]
 800587a:	f7fa fd25 	bl	80002c8 <__aeabi_dsub>
 800587e:	4632      	mov	r2, r6
 8005880:	463b      	mov	r3, r7
 8005882:	f7fa fd21 	bl	80002c8 <__aeabi_dsub>
 8005886:	f1bb 0f00 	cmp.w	fp, #0
 800588a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800588e:	f280 80a0 	bge.w	80059d2 <__ieee754_rem_pio2+0x3ea>
 8005892:	9b02      	ldr	r3, [sp, #8]
 8005894:	f8ca 3000 	str.w	r3, [sl]
 8005898:	9b03      	ldr	r3, [sp, #12]
 800589a:	f8ca 0008 	str.w	r0, [sl, #8]
 800589e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80058a2:	f8ca 3004 	str.w	r3, [sl, #4]
 80058a6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80058aa:	f8ca 300c 	str.w	r3, [sl, #12]
 80058ae:	f1c9 0000 	rsb	r0, r9, #0
 80058b2:	e08f      	b.n	80059d4 <__ieee754_rem_pio2+0x3ec>
 80058b4:	4b1c      	ldr	r3, [pc, #112]	; (8005928 <__ieee754_rem_pio2+0x340>)
 80058b6:	4598      	cmp	r8, r3
 80058b8:	dd38      	ble.n	800592c <__ieee754_rem_pio2+0x344>
 80058ba:	ee10 2a10 	vmov	r2, s0
 80058be:	462b      	mov	r3, r5
 80058c0:	4620      	mov	r0, r4
 80058c2:	4629      	mov	r1, r5
 80058c4:	f7fa fd00 	bl	80002c8 <__aeabi_dsub>
 80058c8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80058cc:	e9ca 0100 	strd	r0, r1, [sl]
 80058d0:	2000      	movs	r0, #0
 80058d2:	e07f      	b.n	80059d4 <__ieee754_rem_pio2+0x3ec>
 80058d4:	f3af 8000 	nop.w
 80058d8:	54400000 	.word	0x54400000
 80058dc:	3ff921fb 	.word	0x3ff921fb
 80058e0:	1a626331 	.word	0x1a626331
 80058e4:	3dd0b461 	.word	0x3dd0b461
 80058e8:	1a600000 	.word	0x1a600000
 80058ec:	3dd0b461 	.word	0x3dd0b461
 80058f0:	2e037073 	.word	0x2e037073
 80058f4:	3ba3198a 	.word	0x3ba3198a
 80058f8:	6dc9c883 	.word	0x6dc9c883
 80058fc:	3fe45f30 	.word	0x3fe45f30
 8005900:	2e000000 	.word	0x2e000000
 8005904:	3ba3198a 	.word	0x3ba3198a
 8005908:	252049c1 	.word	0x252049c1
 800590c:	397b839a 	.word	0x397b839a
 8005910:	3fe921fb 	.word	0x3fe921fb
 8005914:	4002d97b 	.word	0x4002d97b
 8005918:	3ff921fb 	.word	0x3ff921fb
 800591c:	413921fb 	.word	0x413921fb
 8005920:	3fe00000 	.word	0x3fe00000
 8005924:	080067c4 	.word	0x080067c4
 8005928:	7fefffff 	.word	0x7fefffff
 800592c:	ea4f 5628 	mov.w	r6, r8, asr #20
 8005930:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 8005934:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8005938:	4620      	mov	r0, r4
 800593a:	460d      	mov	r5, r1
 800593c:	f7fb f928 	bl	8000b90 <__aeabi_d2iz>
 8005940:	f7fa fe10 	bl	8000564 <__aeabi_i2d>
 8005944:	4602      	mov	r2, r0
 8005946:	460b      	mov	r3, r1
 8005948:	4620      	mov	r0, r4
 800594a:	4629      	mov	r1, r5
 800594c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005950:	f7fa fcba 	bl	80002c8 <__aeabi_dsub>
 8005954:	2200      	movs	r2, #0
 8005956:	4b21      	ldr	r3, [pc, #132]	; (80059dc <__ieee754_rem_pio2+0x3f4>)
 8005958:	f7fa fe6a 	bl	8000630 <__aeabi_dmul>
 800595c:	460d      	mov	r5, r1
 800595e:	4604      	mov	r4, r0
 8005960:	f7fb f916 	bl	8000b90 <__aeabi_d2iz>
 8005964:	f7fa fdfe 	bl	8000564 <__aeabi_i2d>
 8005968:	4602      	mov	r2, r0
 800596a:	460b      	mov	r3, r1
 800596c:	4620      	mov	r0, r4
 800596e:	4629      	mov	r1, r5
 8005970:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005974:	f7fa fca8 	bl	80002c8 <__aeabi_dsub>
 8005978:	2200      	movs	r2, #0
 800597a:	4b18      	ldr	r3, [pc, #96]	; (80059dc <__ieee754_rem_pio2+0x3f4>)
 800597c:	f7fa fe58 	bl	8000630 <__aeabi_dmul>
 8005980:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005984:	ad0c      	add	r5, sp, #48	; 0x30
 8005986:	2403      	movs	r4, #3
 8005988:	2200      	movs	r2, #0
 800598a:	2300      	movs	r3, #0
 800598c:	e975 0102 	ldrd	r0, r1, [r5, #-8]!
 8005990:	1e67      	subs	r7, r4, #1
 8005992:	f7fb f8b5 	bl	8000b00 <__aeabi_dcmpeq>
 8005996:	b108      	cbz	r0, 800599c <__ieee754_rem_pio2+0x3b4>
 8005998:	463c      	mov	r4, r7
 800599a:	e7f5      	b.n	8005988 <__ieee754_rem_pio2+0x3a0>
 800599c:	4b10      	ldr	r3, [pc, #64]	; (80059e0 <__ieee754_rem_pio2+0x3f8>)
 800599e:	9301      	str	r3, [sp, #4]
 80059a0:	2302      	movs	r3, #2
 80059a2:	9300      	str	r3, [sp, #0]
 80059a4:	4632      	mov	r2, r6
 80059a6:	4623      	mov	r3, r4
 80059a8:	4651      	mov	r1, sl
 80059aa:	a806      	add	r0, sp, #24
 80059ac:	f000 f904 	bl	8005bb8 <__kernel_rem_pio2>
 80059b0:	f1bb 0f00 	cmp.w	fp, #0
 80059b4:	da0e      	bge.n	80059d4 <__ieee754_rem_pio2+0x3ec>
 80059b6:	f8da 3004 	ldr.w	r3, [sl, #4]
 80059ba:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80059be:	f8ca 3004 	str.w	r3, [sl, #4]
 80059c2:	f8da 300c 	ldr.w	r3, [sl, #12]
 80059c6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80059ca:	f8ca 300c 	str.w	r3, [sl, #12]
 80059ce:	4240      	negs	r0, r0
 80059d0:	e000      	b.n	80059d4 <__ieee754_rem_pio2+0x3ec>
 80059d2:	4648      	mov	r0, r9
 80059d4:	b00d      	add	sp, #52	; 0x34
 80059d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059da:	bf00      	nop
 80059dc:	41700000 	.word	0x41700000
 80059e0:	08006844 	.word	0x08006844
 80059e4:	00000000 	.word	0x00000000

080059e8 <__kernel_cos>:
 80059e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059ec:	ec59 8b10 	vmov	r8, r9, d0
 80059f0:	f029 4700 	bic.w	r7, r9, #2147483648	; 0x80000000
 80059f4:	b085      	sub	sp, #20
 80059f6:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 80059fa:	ed8d 1b00 	vstr	d1, [sp]
 80059fe:	da07      	bge.n	8005a10 <__kernel_cos+0x28>
 8005a00:	ee10 0a10 	vmov	r0, s0
 8005a04:	4649      	mov	r1, r9
 8005a06:	f7fb f8c3 	bl	8000b90 <__aeabi_d2iz>
 8005a0a:	2800      	cmp	r0, #0
 8005a0c:	f000 80a6 	beq.w	8005b5c <__kernel_cos+0x174>
 8005a10:	4642      	mov	r2, r8
 8005a12:	464b      	mov	r3, r9
 8005a14:	4640      	mov	r0, r8
 8005a16:	4649      	mov	r1, r9
 8005a18:	f7fa fe0a 	bl	8000630 <__aeabi_dmul>
 8005a1c:	a359      	add	r3, pc, #356	; (adr r3, 8005b84 <__kernel_cos+0x19c>)
 8005a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a22:	4604      	mov	r4, r0
 8005a24:	460d      	mov	r5, r1
 8005a26:	f7fa fe03 	bl	8000630 <__aeabi_dmul>
 8005a2a:	a358      	add	r3, pc, #352	; (adr r3, 8005b8c <__kernel_cos+0x1a4>)
 8005a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a30:	f7fa fc4c 	bl	80002cc <__adddf3>
 8005a34:	4622      	mov	r2, r4
 8005a36:	462b      	mov	r3, r5
 8005a38:	f7fa fdfa 	bl	8000630 <__aeabi_dmul>
 8005a3c:	a355      	add	r3, pc, #340	; (adr r3, 8005b94 <__kernel_cos+0x1ac>)
 8005a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a42:	f7fa fc41 	bl	80002c8 <__aeabi_dsub>
 8005a46:	4622      	mov	r2, r4
 8005a48:	462b      	mov	r3, r5
 8005a4a:	f7fa fdf1 	bl	8000630 <__aeabi_dmul>
 8005a4e:	a353      	add	r3, pc, #332	; (adr r3, 8005b9c <__kernel_cos+0x1b4>)
 8005a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a54:	f7fa fc3a 	bl	80002cc <__adddf3>
 8005a58:	4622      	mov	r2, r4
 8005a5a:	462b      	mov	r3, r5
 8005a5c:	f7fa fde8 	bl	8000630 <__aeabi_dmul>
 8005a60:	a350      	add	r3, pc, #320	; (adr r3, 8005ba4 <__kernel_cos+0x1bc>)
 8005a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a66:	f7fa fc2f 	bl	80002c8 <__aeabi_dsub>
 8005a6a:	4622      	mov	r2, r4
 8005a6c:	462b      	mov	r3, r5
 8005a6e:	f7fa fddf 	bl	8000630 <__aeabi_dmul>
 8005a72:	a34e      	add	r3, pc, #312	; (adr r3, 8005bac <__kernel_cos+0x1c4>)
 8005a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a78:	f7fa fc28 	bl	80002cc <__adddf3>
 8005a7c:	462b      	mov	r3, r5
 8005a7e:	4622      	mov	r2, r4
 8005a80:	f7fa fdd6 	bl	8000630 <__aeabi_dmul>
 8005a84:	4b3a      	ldr	r3, [pc, #232]	; (8005b70 <__kernel_cos+0x188>)
 8005a86:	429f      	cmp	r7, r3
 8005a88:	4682      	mov	sl, r0
 8005a8a:	468b      	mov	fp, r1
 8005a8c:	dc26      	bgt.n	8005adc <__kernel_cos+0xf4>
 8005a8e:	2200      	movs	r2, #0
 8005a90:	4b38      	ldr	r3, [pc, #224]	; (8005b74 <__kernel_cos+0x18c>)
 8005a92:	4620      	mov	r0, r4
 8005a94:	4629      	mov	r1, r5
 8005a96:	f7fa fdcb 	bl	8000630 <__aeabi_dmul>
 8005a9a:	4652      	mov	r2, sl
 8005a9c:	4606      	mov	r6, r0
 8005a9e:	460f      	mov	r7, r1
 8005aa0:	465b      	mov	r3, fp
 8005aa2:	4620      	mov	r0, r4
 8005aa4:	4629      	mov	r1, r5
 8005aa6:	f7fa fdc3 	bl	8000630 <__aeabi_dmul>
 8005aaa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005aae:	4604      	mov	r4, r0
 8005ab0:	460d      	mov	r5, r1
 8005ab2:	4640      	mov	r0, r8
 8005ab4:	4649      	mov	r1, r9
 8005ab6:	f7fa fdbb 	bl	8000630 <__aeabi_dmul>
 8005aba:	4602      	mov	r2, r0
 8005abc:	460b      	mov	r3, r1
 8005abe:	4620      	mov	r0, r4
 8005ac0:	4629      	mov	r1, r5
 8005ac2:	f7fa fc01 	bl	80002c8 <__aeabi_dsub>
 8005ac6:	4602      	mov	r2, r0
 8005ac8:	460b      	mov	r3, r1
 8005aca:	4630      	mov	r0, r6
 8005acc:	4639      	mov	r1, r7
 8005ace:	f7fa fbfb 	bl	80002c8 <__aeabi_dsub>
 8005ad2:	4602      	mov	r2, r0
 8005ad4:	460b      	mov	r3, r1
 8005ad6:	2000      	movs	r0, #0
 8005ad8:	4927      	ldr	r1, [pc, #156]	; (8005b78 <__kernel_cos+0x190>)
 8005ada:	e03c      	b.n	8005b56 <__kernel_cos+0x16e>
 8005adc:	4b27      	ldr	r3, [pc, #156]	; (8005b7c <__kernel_cos+0x194>)
 8005ade:	4926      	ldr	r1, [pc, #152]	; (8005b78 <__kernel_cos+0x190>)
 8005ae0:	429f      	cmp	r7, r3
 8005ae2:	bfd7      	itett	le
 8005ae4:	f5a7 1300 	suble.w	r3, r7, #2097152	; 0x200000
 8005ae8:	4f25      	ldrgt	r7, [pc, #148]	; (8005b80 <__kernel_cos+0x198>)
 8005aea:	2200      	movle	r2, #0
 8005aec:	4616      	movle	r6, r2
 8005aee:	bfd4      	ite	le
 8005af0:	461f      	movle	r7, r3
 8005af2:	2600      	movgt	r6, #0
 8005af4:	4632      	mov	r2, r6
 8005af6:	463b      	mov	r3, r7
 8005af8:	2000      	movs	r0, #0
 8005afa:	f7fa fbe5 	bl	80002c8 <__aeabi_dsub>
 8005afe:	2200      	movs	r2, #0
 8005b00:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005b04:	4b1b      	ldr	r3, [pc, #108]	; (8005b74 <__kernel_cos+0x18c>)
 8005b06:	4620      	mov	r0, r4
 8005b08:	4629      	mov	r1, r5
 8005b0a:	f7fa fd91 	bl	8000630 <__aeabi_dmul>
 8005b0e:	4632      	mov	r2, r6
 8005b10:	463b      	mov	r3, r7
 8005b12:	f7fa fbd9 	bl	80002c8 <__aeabi_dsub>
 8005b16:	4652      	mov	r2, sl
 8005b18:	4606      	mov	r6, r0
 8005b1a:	460f      	mov	r7, r1
 8005b1c:	465b      	mov	r3, fp
 8005b1e:	4620      	mov	r0, r4
 8005b20:	4629      	mov	r1, r5
 8005b22:	f7fa fd85 	bl	8000630 <__aeabi_dmul>
 8005b26:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005b2a:	4604      	mov	r4, r0
 8005b2c:	460d      	mov	r5, r1
 8005b2e:	4640      	mov	r0, r8
 8005b30:	4649      	mov	r1, r9
 8005b32:	f7fa fd7d 	bl	8000630 <__aeabi_dmul>
 8005b36:	4602      	mov	r2, r0
 8005b38:	460b      	mov	r3, r1
 8005b3a:	4620      	mov	r0, r4
 8005b3c:	4629      	mov	r1, r5
 8005b3e:	f7fa fbc3 	bl	80002c8 <__aeabi_dsub>
 8005b42:	4602      	mov	r2, r0
 8005b44:	460b      	mov	r3, r1
 8005b46:	4630      	mov	r0, r6
 8005b48:	4639      	mov	r1, r7
 8005b4a:	f7fa fbbd 	bl	80002c8 <__aeabi_dsub>
 8005b4e:	4602      	mov	r2, r0
 8005b50:	460b      	mov	r3, r1
 8005b52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005b56:	f7fa fbb7 	bl	80002c8 <__aeabi_dsub>
 8005b5a:	e001      	b.n	8005b60 <__kernel_cos+0x178>
 8005b5c:	4906      	ldr	r1, [pc, #24]	; (8005b78 <__kernel_cos+0x190>)
 8005b5e:	2000      	movs	r0, #0
 8005b60:	ec41 0b10 	vmov	d0, r0, r1
 8005b64:	b005      	add	sp, #20
 8005b66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b6a:	bf00      	nop
 8005b6c:	f3af 8000 	nop.w
 8005b70:	3fd33332 	.word	0x3fd33332
 8005b74:	3fe00000 	.word	0x3fe00000
 8005b78:	3ff00000 	.word	0x3ff00000
 8005b7c:	3fe90000 	.word	0x3fe90000
 8005b80:	3fd20000 	.word	0x3fd20000
 8005b84:	be8838d4 	.word	0xbe8838d4
 8005b88:	bda8fae9 	.word	0xbda8fae9
 8005b8c:	bdb4b1c4 	.word	0xbdb4b1c4
 8005b90:	3e21ee9e 	.word	0x3e21ee9e
 8005b94:	809c52ad 	.word	0x809c52ad
 8005b98:	3e927e4f 	.word	0x3e927e4f
 8005b9c:	19cb1590 	.word	0x19cb1590
 8005ba0:	3efa01a0 	.word	0x3efa01a0
 8005ba4:	16c15177 	.word	0x16c15177
 8005ba8:	3f56c16c 	.word	0x3f56c16c
 8005bac:	5555554c 	.word	0x5555554c
 8005bb0:	3fa55555 	.word	0x3fa55555
 8005bb4:	00000000 	.word	0x00000000

08005bb8 <__kernel_rem_pio2>:
 8005bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bbc:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8005bc0:	2418      	movs	r4, #24
 8005bc2:	9306      	str	r3, [sp, #24]
 8005bc4:	9101      	str	r1, [sp, #4]
 8005bc6:	4bba      	ldr	r3, [pc, #744]	; (8005eb0 <__kernel_rem_pio2+0x2f8>)
 8005bc8:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8005bca:	9009      	str	r0, [sp, #36]	; 0x24
 8005bcc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005bd0:	9302      	str	r3, [sp, #8]
 8005bd2:	9b06      	ldr	r3, [sp, #24]
 8005bd4:	3b01      	subs	r3, #1
 8005bd6:	9305      	str	r3, [sp, #20]
 8005bd8:	1ed3      	subs	r3, r2, #3
 8005bda:	fb93 f4f4 	sdiv	r4, r3, r4
 8005bde:	f06f 0317 	mvn.w	r3, #23
 8005be2:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8005be6:	fb04 3303 	mla	r3, r4, r3, r3
 8005bea:	eb03 0802 	add.w	r8, r3, r2
 8005bee:	9b02      	ldr	r3, [sp, #8]
 8005bf0:	9a05      	ldr	r2, [sp, #20]
 8005bf2:	eb03 0a02 	add.w	sl, r3, r2
 8005bf6:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8005bf8:	1aa7      	subs	r7, r4, r2
 8005bfa:	ae20      	add	r6, sp, #128	; 0x80
 8005bfc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8005c00:	2500      	movs	r5, #0
 8005c02:	4555      	cmp	r5, sl
 8005c04:	dc0c      	bgt.n	8005c20 <__kernel_rem_pio2+0x68>
 8005c06:	42ef      	cmn	r7, r5
 8005c08:	d404      	bmi.n	8005c14 <__kernel_rem_pio2+0x5c>
 8005c0a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8005c0e:	f7fa fca9 	bl	8000564 <__aeabi_i2d>
 8005c12:	e001      	b.n	8005c18 <__kernel_rem_pio2+0x60>
 8005c14:	2000      	movs	r0, #0
 8005c16:	2100      	movs	r1, #0
 8005c18:	e8e6 0102 	strd	r0, r1, [r6], #8
 8005c1c:	3501      	adds	r5, #1
 8005c1e:	e7f0      	b.n	8005c02 <__kernel_rem_pio2+0x4a>
 8005c20:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8005c24:	2600      	movs	r6, #0
 8005c26:	9b02      	ldr	r3, [sp, #8]
 8005c28:	429e      	cmp	r6, r3
 8005c2a:	dc27      	bgt.n	8005c7c <__kernel_rem_pio2+0xc4>
 8005c2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c2e:	9304      	str	r3, [sp, #16]
 8005c30:	9b06      	ldr	r3, [sp, #24]
 8005c32:	199d      	adds	r5, r3, r6
 8005c34:	ab20      	add	r3, sp, #128	; 0x80
 8005c36:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8005c3a:	9308      	str	r3, [sp, #32]
 8005c3c:	f04f 0900 	mov.w	r9, #0
 8005c40:	f04f 0a00 	mov.w	sl, #0
 8005c44:	2700      	movs	r7, #0
 8005c46:	9b05      	ldr	r3, [sp, #20]
 8005c48:	429f      	cmp	r7, r3
 8005c4a:	dc13      	bgt.n	8005c74 <__kernel_rem_pio2+0xbc>
 8005c4c:	9908      	ldr	r1, [sp, #32]
 8005c4e:	9d04      	ldr	r5, [sp, #16]
 8005c50:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8005c54:	9108      	str	r1, [sp, #32]
 8005c56:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8005c5a:	9504      	str	r5, [sp, #16]
 8005c5c:	f7fa fce8 	bl	8000630 <__aeabi_dmul>
 8005c60:	4602      	mov	r2, r0
 8005c62:	460b      	mov	r3, r1
 8005c64:	4648      	mov	r0, r9
 8005c66:	4651      	mov	r1, sl
 8005c68:	f7fa fb30 	bl	80002cc <__adddf3>
 8005c6c:	3701      	adds	r7, #1
 8005c6e:	4681      	mov	r9, r0
 8005c70:	468a      	mov	sl, r1
 8005c72:	e7e8      	b.n	8005c46 <__kernel_rem_pio2+0x8e>
 8005c74:	e8ab 0600 	stmia.w	fp!, {r9, sl}
 8005c78:	3601      	adds	r6, #1
 8005c7a:	e7d4      	b.n	8005c26 <__kernel_rem_pio2+0x6e>
 8005c7c:	9b02      	ldr	r3, [sp, #8]
 8005c7e:	f8dd b008 	ldr.w	fp, [sp, #8]
 8005c82:	aa0c      	add	r2, sp, #48	; 0x30
 8005c84:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005c88:	930a      	str	r3, [sp, #40]	; 0x28
 8005c8a:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8005c8c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005c90:	930b      	str	r3, [sp, #44]	; 0x2c
 8005c92:	ab98      	add	r3, sp, #608	; 0x260
 8005c94:	f10b 5a00 	add.w	sl, fp, #536870912	; 0x20000000
 8005c98:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005c9c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005ca0:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8005ca4:	aa98      	add	r2, sp, #608	; 0x260
 8005ca6:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8005caa:	eb02 0903 	add.w	r9, r2, r3
 8005cae:	9308      	str	r3, [sp, #32]
 8005cb0:	f1a9 0998 	sub.w	r9, r9, #152	; 0x98
 8005cb4:	f04f 0a00 	mov.w	sl, #0
 8005cb8:	ebca 030b 	rsb	r3, sl, fp
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	dd25      	ble.n	8005d0c <__kernel_rem_pio2+0x154>
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	4b7c      	ldr	r3, [pc, #496]	; (8005eb4 <__kernel_rem_pio2+0x2fc>)
 8005cc4:	4630      	mov	r0, r6
 8005cc6:	4639      	mov	r1, r7
 8005cc8:	f7fa fcb2 	bl	8000630 <__aeabi_dmul>
 8005ccc:	f7fa ff60 	bl	8000b90 <__aeabi_d2iz>
 8005cd0:	f7fa fc48 	bl	8000564 <__aeabi_i2d>
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	4b78      	ldr	r3, [pc, #480]	; (8005eb8 <__kernel_rem_pio2+0x300>)
 8005cd8:	4604      	mov	r4, r0
 8005cda:	460d      	mov	r5, r1
 8005cdc:	f7fa fca8 	bl	8000630 <__aeabi_dmul>
 8005ce0:	4602      	mov	r2, r0
 8005ce2:	460b      	mov	r3, r1
 8005ce4:	4630      	mov	r0, r6
 8005ce6:	4639      	mov	r1, r7
 8005ce8:	f7fa faee 	bl	80002c8 <__aeabi_dsub>
 8005cec:	f7fa ff50 	bl	8000b90 <__aeabi_d2iz>
 8005cf0:	ab0c      	add	r3, sp, #48	; 0x30
 8005cf2:	4629      	mov	r1, r5
 8005cf4:	f843 002a 	str.w	r0, [r3, sl, lsl #2]
 8005cf8:	e979 2302 	ldrd	r2, r3, [r9, #-8]!
 8005cfc:	4620      	mov	r0, r4
 8005cfe:	f7fa fae5 	bl	80002cc <__adddf3>
 8005d02:	f10a 0a01 	add.w	sl, sl, #1
 8005d06:	4606      	mov	r6, r0
 8005d08:	460f      	mov	r7, r1
 8005d0a:	e7d5      	b.n	8005cb8 <__kernel_rem_pio2+0x100>
 8005d0c:	ec47 6b10 	vmov	d0, r6, r7
 8005d10:	4640      	mov	r0, r8
 8005d12:	f000 fbe9 	bl	80064e8 <scalbn>
 8005d16:	ec55 4b10 	vmov	r4, r5, d0
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8005d20:	ee10 0a10 	vmov	r0, s0
 8005d24:	4629      	mov	r1, r5
 8005d26:	f7fa fc83 	bl	8000630 <__aeabi_dmul>
 8005d2a:	ec41 0b10 	vmov	d0, r0, r1
 8005d2e:	f000 fb57 	bl	80063e0 <floor>
 8005d32:	2200      	movs	r2, #0
 8005d34:	ec51 0b10 	vmov	r0, r1, d0
 8005d38:	4b60      	ldr	r3, [pc, #384]	; (8005ebc <__kernel_rem_pio2+0x304>)
 8005d3a:	f7fa fc79 	bl	8000630 <__aeabi_dmul>
 8005d3e:	4602      	mov	r2, r0
 8005d40:	460b      	mov	r3, r1
 8005d42:	4620      	mov	r0, r4
 8005d44:	4629      	mov	r1, r5
 8005d46:	f7fa fabf 	bl	80002c8 <__aeabi_dsub>
 8005d4a:	460d      	mov	r5, r1
 8005d4c:	4604      	mov	r4, r0
 8005d4e:	f7fa ff1f 	bl	8000b90 <__aeabi_d2iz>
 8005d52:	9004      	str	r0, [sp, #16]
 8005d54:	f7fa fc06 	bl	8000564 <__aeabi_i2d>
 8005d58:	4602      	mov	r2, r0
 8005d5a:	460b      	mov	r3, r1
 8005d5c:	4620      	mov	r0, r4
 8005d5e:	4629      	mov	r1, r5
 8005d60:	f7fa fab2 	bl	80002c8 <__aeabi_dsub>
 8005d64:	f1b8 0f00 	cmp.w	r8, #0
 8005d68:	4606      	mov	r6, r0
 8005d6a:	460f      	mov	r7, r1
 8005d6c:	dd15      	ble.n	8005d9a <__kernel_rem_pio2+0x1e2>
 8005d6e:	f10b 31ff 	add.w	r1, fp, #4294967295
 8005d72:	ab0c      	add	r3, sp, #48	; 0x30
 8005d74:	f1c8 0018 	rsb	r0, r8, #24
 8005d78:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 8005d7c:	9c04      	ldr	r4, [sp, #16]
 8005d7e:	fa42 f300 	asr.w	r3, r2, r0
 8005d82:	441c      	add	r4, r3
 8005d84:	4083      	lsls	r3, r0
 8005d86:	1ad3      	subs	r3, r2, r3
 8005d88:	aa0c      	add	r2, sp, #48	; 0x30
 8005d8a:	f1c8 0017 	rsb	r0, r8, #23
 8005d8e:	9404      	str	r4, [sp, #16]
 8005d90:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8005d94:	fa43 fa00 	asr.w	sl, r3, r0
 8005d98:	e00f      	b.n	8005dba <__kernel_rem_pio2+0x202>
 8005d9a:	d107      	bne.n	8005dac <__kernel_rem_pio2+0x1f4>
 8005d9c:	f10b 33ff 	add.w	r3, fp, #4294967295
 8005da0:	aa0c      	add	r2, sp, #48	; 0x30
 8005da2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005da6:	ea4f 5ae0 	mov.w	sl, r0, asr #23
 8005daa:	e006      	b.n	8005dba <__kernel_rem_pio2+0x202>
 8005dac:	2200      	movs	r2, #0
 8005dae:	4b44      	ldr	r3, [pc, #272]	; (8005ec0 <__kernel_rem_pio2+0x308>)
 8005db0:	f7fa fec4 	bl	8000b3c <__aeabi_dcmpge>
 8005db4:	b928      	cbnz	r0, 8005dc2 <__kernel_rem_pio2+0x20a>
 8005db6:	4682      	mov	sl, r0
 8005db8:	e052      	b.n	8005e60 <__kernel_rem_pio2+0x2a8>
 8005dba:	f1ba 0f00 	cmp.w	sl, #0
 8005dbe:	dc02      	bgt.n	8005dc6 <__kernel_rem_pio2+0x20e>
 8005dc0:	e04e      	b.n	8005e60 <__kernel_rem_pio2+0x2a8>
 8005dc2:	f04f 0a02 	mov.w	sl, #2
 8005dc6:	9b04      	ldr	r3, [sp, #16]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	3301      	adds	r3, #1
 8005dcc:	9304      	str	r3, [sp, #16]
 8005dce:	4614      	mov	r4, r2
 8005dd0:	4593      	cmp	fp, r2
 8005dd2:	dd11      	ble.n	8005df8 <__kernel_rem_pio2+0x240>
 8005dd4:	ab0c      	add	r3, sp, #48	; 0x30
 8005dd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dda:	b91c      	cbnz	r4, 8005de4 <__kernel_rem_pio2+0x22c>
 8005ddc:	b153      	cbz	r3, 8005df4 <__kernel_rem_pio2+0x23c>
 8005dde:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8005de2:	e003      	b.n	8005dec <__kernel_rem_pio2+0x234>
 8005de4:	f1c3 13ff 	rsb	r3, r3, #16711935	; 0xff00ff
 8005de8:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8005dec:	a90c      	add	r1, sp, #48	; 0x30
 8005dee:	2401      	movs	r4, #1
 8005df0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8005df4:	3201      	adds	r2, #1
 8005df6:	e7eb      	b.n	8005dd0 <__kernel_rem_pio2+0x218>
 8005df8:	f1b8 0f00 	cmp.w	r8, #0
 8005dfc:	dd17      	ble.n	8005e2e <__kernel_rem_pio2+0x276>
 8005dfe:	f1b8 0f01 	cmp.w	r8, #1
 8005e02:	d00a      	beq.n	8005e1a <__kernel_rem_pio2+0x262>
 8005e04:	f1b8 0f02 	cmp.w	r8, #2
 8005e08:	d111      	bne.n	8005e2e <__kernel_rem_pio2+0x276>
 8005e0a:	f10b 32ff 	add.w	r2, fp, #4294967295
 8005e0e:	ab0c      	add	r3, sp, #48	; 0x30
 8005e10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e14:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005e18:	e006      	b.n	8005e28 <__kernel_rem_pio2+0x270>
 8005e1a:	f10b 32ff 	add.w	r2, fp, #4294967295
 8005e1e:	ab0c      	add	r3, sp, #48	; 0x30
 8005e20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e24:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8005e28:	a90c      	add	r1, sp, #48	; 0x30
 8005e2a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8005e2e:	f1ba 0f02 	cmp.w	sl, #2
 8005e32:	d115      	bne.n	8005e60 <__kernel_rem_pio2+0x2a8>
 8005e34:	4632      	mov	r2, r6
 8005e36:	463b      	mov	r3, r7
 8005e38:	2000      	movs	r0, #0
 8005e3a:	4922      	ldr	r1, [pc, #136]	; (8005ec4 <__kernel_rem_pio2+0x30c>)
 8005e3c:	f7fa fa44 	bl	80002c8 <__aeabi_dsub>
 8005e40:	4606      	mov	r6, r0
 8005e42:	460f      	mov	r7, r1
 8005e44:	b164      	cbz	r4, 8005e60 <__kernel_rem_pio2+0x2a8>
 8005e46:	4640      	mov	r0, r8
 8005e48:	ed9f 0b17 	vldr	d0, [pc, #92]	; 8005ea8 <__kernel_rem_pio2+0x2f0>
 8005e4c:	f000 fb4c 	bl	80064e8 <scalbn>
 8005e50:	4630      	mov	r0, r6
 8005e52:	4639      	mov	r1, r7
 8005e54:	ec53 2b10 	vmov	r2, r3, d0
 8005e58:	f7fa fa36 	bl	80002c8 <__aeabi_dsub>
 8005e5c:	4606      	mov	r6, r0
 8005e5e:	460f      	mov	r7, r1
 8005e60:	2200      	movs	r2, #0
 8005e62:	2300      	movs	r3, #0
 8005e64:	4630      	mov	r0, r6
 8005e66:	4639      	mov	r1, r7
 8005e68:	f7fa fe4a 	bl	8000b00 <__aeabi_dcmpeq>
 8005e6c:	2800      	cmp	r0, #0
 8005e6e:	d074      	beq.n	8005f5a <__kernel_rem_pio2+0x3a2>
 8005e70:	f10b 31ff 	add.w	r1, fp, #4294967295
 8005e74:	460b      	mov	r3, r1
 8005e76:	2200      	movs	r2, #0
 8005e78:	9802      	ldr	r0, [sp, #8]
 8005e7a:	4283      	cmp	r3, r0
 8005e7c:	db05      	blt.n	8005e8a <__kernel_rem_pio2+0x2d2>
 8005e7e:	a80c      	add	r0, sp, #48	; 0x30
 8005e80:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8005e84:	3b01      	subs	r3, #1
 8005e86:	4302      	orrs	r2, r0
 8005e88:	e7f6      	b.n	8005e78 <__kernel_rem_pio2+0x2c0>
 8005e8a:	2a00      	cmp	r2, #0
 8005e8c:	d158      	bne.n	8005f40 <__kernel_rem_pio2+0x388>
 8005e8e:	2301      	movs	r3, #1
 8005e90:	f06f 0103 	mvn.w	r1, #3
 8005e94:	fb01 f203 	mul.w	r2, r1, r3
 8005e98:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005e9a:	5882      	ldr	r2, [r0, r2]
 8005e9c:	b9a2      	cbnz	r2, 8005ec8 <__kernel_rem_pio2+0x310>
 8005e9e:	3301      	adds	r3, #1
 8005ea0:	e7f8      	b.n	8005e94 <__kernel_rem_pio2+0x2dc>
 8005ea2:	bf00      	nop
 8005ea4:	f3af 8000 	nop.w
 8005ea8:	00000000 	.word	0x00000000
 8005eac:	3ff00000 	.word	0x3ff00000
 8005eb0:	0800694c 	.word	0x0800694c
 8005eb4:	3e700000 	.word	0x3e700000
 8005eb8:	41700000 	.word	0x41700000
 8005ebc:	40200000 	.word	0x40200000
 8005ec0:	3fe00000 	.word	0x3fe00000
 8005ec4:	3ff00000 	.word	0x3ff00000
 8005ec8:	9a08      	ldr	r2, [sp, #32]
 8005eca:	a998      	add	r1, sp, #608	; 0x260
 8005ecc:	440a      	add	r2, r1
 8005ece:	3a98      	subs	r2, #152	; 0x98
 8005ed0:	9204      	str	r2, [sp, #16]
 8005ed2:	9a06      	ldr	r2, [sp, #24]
 8005ed4:	445b      	add	r3, fp
 8005ed6:	eb02 050b 	add.w	r5, r2, fp
 8005eda:	aa20      	add	r2, sp, #128	; 0x80
 8005edc:	f10b 0601 	add.w	r6, fp, #1
 8005ee0:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8005ee4:	9308      	str	r3, [sp, #32]
 8005ee6:	9b08      	ldr	r3, [sp, #32]
 8005ee8:	429e      	cmp	r6, r3
 8005eea:	dc27      	bgt.n	8005f3c <__kernel_rem_pio2+0x384>
 8005eec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005eee:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005ef2:	f7fa fb37 	bl	8000564 <__aeabi_i2d>
 8005ef6:	e8e5 0102 	strd	r0, r1, [r5], #8
 8005efa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005efc:	46a9      	mov	r9, r5
 8005efe:	461c      	mov	r4, r3
 8005f00:	2700      	movs	r7, #0
 8005f02:	f04f 0a00 	mov.w	sl, #0
 8005f06:	f04f 0b00 	mov.w	fp, #0
 8005f0a:	9b05      	ldr	r3, [sp, #20]
 8005f0c:	429f      	cmp	r7, r3
 8005f0e:	dc0f      	bgt.n	8005f30 <__kernel_rem_pio2+0x378>
 8005f10:	e979 2302 	ldrd	r2, r3, [r9, #-8]!
 8005f14:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8005f18:	f7fa fb8a 	bl	8000630 <__aeabi_dmul>
 8005f1c:	4602      	mov	r2, r0
 8005f1e:	460b      	mov	r3, r1
 8005f20:	4650      	mov	r0, sl
 8005f22:	4659      	mov	r1, fp
 8005f24:	f7fa f9d2 	bl	80002cc <__adddf3>
 8005f28:	3701      	adds	r7, #1
 8005f2a:	4682      	mov	sl, r0
 8005f2c:	468b      	mov	fp, r1
 8005f2e:	e7ec      	b.n	8005f0a <__kernel_rem_pio2+0x352>
 8005f30:	9b04      	ldr	r3, [sp, #16]
 8005f32:	e9e3 ab02 	strd	sl, fp, [r3, #8]!
 8005f36:	3601      	adds	r6, #1
 8005f38:	9304      	str	r3, [sp, #16]
 8005f3a:	e7d4      	b.n	8005ee6 <__kernel_rem_pio2+0x32e>
 8005f3c:	469b      	mov	fp, r3
 8005f3e:	e6a8      	b.n	8005c92 <__kernel_rem_pio2+0xda>
 8005f40:	f1a8 0818 	sub.w	r8, r8, #24
 8005f44:	468b      	mov	fp, r1
 8005f46:	ab0c      	add	r3, sp, #48	; 0x30
 8005f48:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d13c      	bne.n	8005fca <__kernel_rem_pio2+0x412>
 8005f50:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005f54:	f1a8 0818 	sub.w	r8, r8, #24
 8005f58:	e7f5      	b.n	8005f46 <__kernel_rem_pio2+0x38e>
 8005f5a:	f1c8 0000 	rsb	r0, r8, #0
 8005f5e:	ec47 6b10 	vmov	d0, r6, r7
 8005f62:	f000 fac1 	bl	80064e8 <scalbn>
 8005f66:	ec55 4b10 	vmov	r4, r5, d0
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	4bb6      	ldr	r3, [pc, #728]	; (8006248 <__kernel_rem_pio2+0x690>)
 8005f6e:	ee10 0a10 	vmov	r0, s0
 8005f72:	4629      	mov	r1, r5
 8005f74:	f7fa fde2 	bl	8000b3c <__aeabi_dcmpge>
 8005f78:	b300      	cbz	r0, 8005fbc <__kernel_rem_pio2+0x404>
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	4bb3      	ldr	r3, [pc, #716]	; (800624c <__kernel_rem_pio2+0x694>)
 8005f7e:	4620      	mov	r0, r4
 8005f80:	4629      	mov	r1, r5
 8005f82:	f7fa fb55 	bl	8000630 <__aeabi_dmul>
 8005f86:	f7fa fe03 	bl	8000b90 <__aeabi_d2iz>
 8005f8a:	4606      	mov	r6, r0
 8005f8c:	f7fa faea 	bl	8000564 <__aeabi_i2d>
 8005f90:	2200      	movs	r2, #0
 8005f92:	4bad      	ldr	r3, [pc, #692]	; (8006248 <__kernel_rem_pio2+0x690>)
 8005f94:	f7fa fb4c 	bl	8000630 <__aeabi_dmul>
 8005f98:	460b      	mov	r3, r1
 8005f9a:	4602      	mov	r2, r0
 8005f9c:	4629      	mov	r1, r5
 8005f9e:	4620      	mov	r0, r4
 8005fa0:	f7fa f992 	bl	80002c8 <__aeabi_dsub>
 8005fa4:	f7fa fdf4 	bl	8000b90 <__aeabi_d2iz>
 8005fa8:	ab0c      	add	r3, sp, #48	; 0x30
 8005faa:	f108 0818 	add.w	r8, r8, #24
 8005fae:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 8005fb2:	f10b 0b01 	add.w	fp, fp, #1
 8005fb6:	f843 602b 	str.w	r6, [r3, fp, lsl #2]
 8005fba:	e006      	b.n	8005fca <__kernel_rem_pio2+0x412>
 8005fbc:	4620      	mov	r0, r4
 8005fbe:	4629      	mov	r1, r5
 8005fc0:	f7fa fde6 	bl	8000b90 <__aeabi_d2iz>
 8005fc4:	ab0c      	add	r3, sp, #48	; 0x30
 8005fc6:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 8005fca:	4640      	mov	r0, r8
 8005fcc:	ed9f 0b9a 	vldr	d0, [pc, #616]	; 8006238 <__kernel_rem_pio2+0x680>
 8005fd0:	f000 fa8a 	bl	80064e8 <scalbn>
 8005fd4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005fd8:	9305      	str	r3, [sp, #20]
 8005fda:	9a05      	ldr	r2, [sp, #20]
 8005fdc:	ab98      	add	r3, sp, #608	; 0x260
 8005fde:	189f      	adds	r7, r3, r2
 8005fe0:	ec55 4b10 	vmov	r4, r5, d0
 8005fe4:	3f98      	subs	r7, #152	; 0x98
 8005fe6:	465e      	mov	r6, fp
 8005fe8:	2e00      	cmp	r6, #0
 8005fea:	db14      	blt.n	8006016 <__kernel_rem_pio2+0x45e>
 8005fec:	ab0c      	add	r3, sp, #48	; 0x30
 8005fee:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005ff2:	f7fa fab7 	bl	8000564 <__aeabi_i2d>
 8005ff6:	4622      	mov	r2, r4
 8005ff8:	462b      	mov	r3, r5
 8005ffa:	f7fa fb19 	bl	8000630 <__aeabi_dmul>
 8005ffe:	2200      	movs	r2, #0
 8006000:	e967 0102 	strd	r0, r1, [r7, #-8]!
 8006004:	4b91      	ldr	r3, [pc, #580]	; (800624c <__kernel_rem_pio2+0x694>)
 8006006:	4620      	mov	r0, r4
 8006008:	4629      	mov	r1, r5
 800600a:	f7fa fb11 	bl	8000630 <__aeabi_dmul>
 800600e:	3e01      	subs	r6, #1
 8006010:	4604      	mov	r4, r0
 8006012:	460d      	mov	r5, r1
 8006014:	e7e8      	b.n	8005fe8 <__kernel_rem_pio2+0x430>
 8006016:	f50d 7890 	add.w	r8, sp, #288	; 0x120
 800601a:	2400      	movs	r4, #0
 800601c:	4645      	mov	r5, r8
 800601e:	ebbb 0704 	subs.w	r7, fp, r4
 8006022:	d424      	bmi.n	800606e <__kernel_rem_pio2+0x4b6>
 8006024:	ed9f 7b86 	vldr	d7, [pc, #536]	; 8006240 <__kernel_rem_pio2+0x688>
 8006028:	ed8d 7b06 	vstr	d7, [sp, #24]
 800602c:	ab70      	add	r3, sp, #448	; 0x1c0
 800602e:	f8df 9220 	ldr.w	r9, [pc, #544]	; 8006250 <__kernel_rem_pio2+0x698>
 8006032:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8006036:	2600      	movs	r6, #0
 8006038:	9b02      	ldr	r3, [sp, #8]
 800603a:	429e      	cmp	r6, r3
 800603c:	dc11      	bgt.n	8006062 <__kernel_rem_pio2+0x4aa>
 800603e:	42a6      	cmp	r6, r4
 8006040:	dc0f      	bgt.n	8006062 <__kernel_rem_pio2+0x4aa>
 8006042:	e8f7 2302 	ldrd	r2, r3, [r7], #8
 8006046:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800604a:	f7fa faf1 	bl	8000630 <__aeabi_dmul>
 800604e:	4602      	mov	r2, r0
 8006050:	460b      	mov	r3, r1
 8006052:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006056:	f7fa f939 	bl	80002cc <__adddf3>
 800605a:	3601      	adds	r6, #1
 800605c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006060:	e7ea      	b.n	8006038 <__kernel_rem_pio2+0x480>
 8006062:	ed9d 7b06 	vldr	d7, [sp, #24]
 8006066:	3401      	adds	r4, #1
 8006068:	eca8 7b02 	vstmia	r8!, {d7}
 800606c:	e7d7      	b.n	800601e <__kernel_rem_pio2+0x466>
 800606e:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 8006070:	2b03      	cmp	r3, #3
 8006072:	f200 80d8 	bhi.w	8006226 <__kernel_rem_pio2+0x66e>
 8006076:	e8df f003 	tbb	[pc, r3]
 800607a:	0810      	.short	0x0810
 800607c:	0208      	.short	0x0208
 800607e:	9a05      	ldr	r2, [sp, #20]
 8006080:	ab48      	add	r3, sp, #288	; 0x120
 8006082:	189c      	adds	r4, r3, r2
 8006084:	46a0      	mov	r8, r4
 8006086:	46d9      	mov	r9, fp
 8006088:	e056      	b.n	8006138 <__kernel_rem_pio2+0x580>
 800608a:	9c05      	ldr	r4, [sp, #20]
 800608c:	ab48      	add	r3, sp, #288	; 0x120
 800608e:	3408      	adds	r4, #8
 8006090:	441c      	add	r4, r3
 8006092:	465d      	mov	r5, fp
 8006094:	2000      	movs	r0, #0
 8006096:	2100      	movs	r1, #0
 8006098:	e01d      	b.n	80060d6 <__kernel_rem_pio2+0x51e>
 800609a:	9b05      	ldr	r3, [sp, #20]
 800609c:	aa98      	add	r2, sp, #608	; 0x260
 800609e:	4413      	add	r3, r2
 80060a0:	f5a3 749c 	sub.w	r4, r3, #312	; 0x138
 80060a4:	2000      	movs	r0, #0
 80060a6:	2100      	movs	r1, #0
 80060a8:	f1bb 0f00 	cmp.w	fp, #0
 80060ac:	db06      	blt.n	80060bc <__kernel_rem_pio2+0x504>
 80060ae:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80060b2:	f7fa f90b 	bl	80002cc <__adddf3>
 80060b6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80060ba:	e7f5      	b.n	80060a8 <__kernel_rem_pio2+0x4f0>
 80060bc:	f1ba 0f00 	cmp.w	sl, #0
 80060c0:	d003      	beq.n	80060ca <__kernel_rem_pio2+0x512>
 80060c2:	4602      	mov	r2, r0
 80060c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80060c8:	e001      	b.n	80060ce <__kernel_rem_pio2+0x516>
 80060ca:	4602      	mov	r2, r0
 80060cc:	460b      	mov	r3, r1
 80060ce:	9901      	ldr	r1, [sp, #4]
 80060d0:	e9c1 2300 	strd	r2, r3, [r1]
 80060d4:	e0a7      	b.n	8006226 <__kernel_rem_pio2+0x66e>
 80060d6:	2d00      	cmp	r5, #0
 80060d8:	db05      	blt.n	80060e6 <__kernel_rem_pio2+0x52e>
 80060da:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80060de:	f7fa f8f5 	bl	80002cc <__adddf3>
 80060e2:	3d01      	subs	r5, #1
 80060e4:	e7f7      	b.n	80060d6 <__kernel_rem_pio2+0x51e>
 80060e6:	f1ba 0f00 	cmp.w	sl, #0
 80060ea:	d003      	beq.n	80060f4 <__kernel_rem_pio2+0x53c>
 80060ec:	4602      	mov	r2, r0
 80060ee:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80060f2:	e001      	b.n	80060f8 <__kernel_rem_pio2+0x540>
 80060f4:	4602      	mov	r2, r0
 80060f6:	460b      	mov	r3, r1
 80060f8:	9c01      	ldr	r4, [sp, #4]
 80060fa:	e9c4 2300 	strd	r2, r3, [r4]
 80060fe:	4602      	mov	r2, r0
 8006100:	460b      	mov	r3, r1
 8006102:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8006106:	f7fa f8df 	bl	80002c8 <__aeabi_dsub>
 800610a:	ad4a      	add	r5, sp, #296	; 0x128
 800610c:	2401      	movs	r4, #1
 800610e:	45a3      	cmp	fp, r4
 8006110:	db05      	blt.n	800611e <__kernel_rem_pio2+0x566>
 8006112:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8006116:	f7fa f8d9 	bl	80002cc <__adddf3>
 800611a:	3401      	adds	r4, #1
 800611c:	e7f7      	b.n	800610e <__kernel_rem_pio2+0x556>
 800611e:	f1ba 0f00 	cmp.w	sl, #0
 8006122:	d003      	beq.n	800612c <__kernel_rem_pio2+0x574>
 8006124:	4602      	mov	r2, r0
 8006126:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800612a:	e001      	b.n	8006130 <__kernel_rem_pio2+0x578>
 800612c:	4602      	mov	r2, r0
 800612e:	460b      	mov	r3, r1
 8006130:	9901      	ldr	r1, [sp, #4]
 8006132:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8006136:	e076      	b.n	8006226 <__kernel_rem_pio2+0x66e>
 8006138:	f1b9 0f00 	cmp.w	r9, #0
 800613c:	dd20      	ble.n	8006180 <__kernel_rem_pio2+0x5c8>
 800613e:	e978 6702 	ldrd	r6, r7, [r8, #-8]!
 8006142:	ed98 7b02 	vldr	d7, [r8, #8]
 8006146:	4630      	mov	r0, r6
 8006148:	ec53 2b17 	vmov	r2, r3, d7
 800614c:	4639      	mov	r1, r7
 800614e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006152:	f7fa f8bb 	bl	80002cc <__adddf3>
 8006156:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800615a:	4602      	mov	r2, r0
 800615c:	460b      	mov	r3, r1
 800615e:	4630      	mov	r0, r6
 8006160:	4639      	mov	r1, r7
 8006162:	f7fa f8b1 	bl	80002c8 <__aeabi_dsub>
 8006166:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800616a:	f7fa f8af 	bl	80002cc <__adddf3>
 800616e:	ed9d 7b06 	vldr	d7, [sp, #24]
 8006172:	f109 39ff 	add.w	r9, r9, #4294967295
 8006176:	e9c8 0102 	strd	r0, r1, [r8, #8]
 800617a:	ed88 7b00 	vstr	d7, [r8]
 800617e:	e7db      	b.n	8006138 <__kernel_rem_pio2+0x580>
 8006180:	465e      	mov	r6, fp
 8006182:	2e01      	cmp	r6, #1
 8006184:	dd1f      	ble.n	80061c6 <__kernel_rem_pio2+0x60e>
 8006186:	e974 8902 	ldrd	r8, r9, [r4, #-8]!
 800618a:	ed94 7b02 	vldr	d7, [r4, #8]
 800618e:	4640      	mov	r0, r8
 8006190:	ec53 2b17 	vmov	r2, r3, d7
 8006194:	4649      	mov	r1, r9
 8006196:	ed8d 7b02 	vstr	d7, [sp, #8]
 800619a:	f7fa f897 	bl	80002cc <__adddf3>
 800619e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80061a2:	4602      	mov	r2, r0
 80061a4:	460b      	mov	r3, r1
 80061a6:	4640      	mov	r0, r8
 80061a8:	4649      	mov	r1, r9
 80061aa:	f7fa f88d 	bl	80002c8 <__aeabi_dsub>
 80061ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80061b2:	f7fa f88b 	bl	80002cc <__adddf3>
 80061b6:	ed9d 7b06 	vldr	d7, [sp, #24]
 80061ba:	3e01      	subs	r6, #1
 80061bc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80061c0:	ed84 7b00 	vstr	d7, [r4]
 80061c4:	e7dd      	b.n	8006182 <__kernel_rem_pio2+0x5ca>
 80061c6:	9c05      	ldr	r4, [sp, #20]
 80061c8:	ab48      	add	r3, sp, #288	; 0x120
 80061ca:	3408      	adds	r4, #8
 80061cc:	441c      	add	r4, r3
 80061ce:	2000      	movs	r0, #0
 80061d0:	2100      	movs	r1, #0
 80061d2:	f1bb 0f01 	cmp.w	fp, #1
 80061d6:	dd06      	ble.n	80061e6 <__kernel_rem_pio2+0x62e>
 80061d8:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80061dc:	f7fa f876 	bl	80002cc <__adddf3>
 80061e0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80061e4:	e7f5      	b.n	80061d2 <__kernel_rem_pio2+0x61a>
 80061e6:	f1ba 0f00 	cmp.w	sl, #0
 80061ea:	d10b      	bne.n	8006204 <__kernel_rem_pio2+0x64c>
 80061ec:	e9dd 2348 	ldrd	r2, r3, [sp, #288]	; 0x120
 80061f0:	9c01      	ldr	r4, [sp, #4]
 80061f2:	e9c4 2300 	strd	r2, r3, [r4]
 80061f6:	e9dd 234a 	ldrd	r2, r3, [sp, #296]	; 0x128
 80061fa:	e9c4 0104 	strd	r0, r1, [r4, #16]
 80061fe:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8006202:	e010      	b.n	8006226 <__kernel_rem_pio2+0x66e>
 8006204:	9a01      	ldr	r2, [sp, #4]
 8006206:	682b      	ldr	r3, [r5, #0]
 8006208:	6013      	str	r3, [r2, #0]
 800620a:	686b      	ldr	r3, [r5, #4]
 800620c:	6110      	str	r0, [r2, #16]
 800620e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006212:	6053      	str	r3, [r2, #4]
 8006214:	68ab      	ldr	r3, [r5, #8]
 8006216:	6093      	str	r3, [r2, #8]
 8006218:	68eb      	ldr	r3, [r5, #12]
 800621a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800621e:	60d3      	str	r3, [r2, #12]
 8006220:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006224:	6153      	str	r3, [r2, #20]
 8006226:	9b04      	ldr	r3, [sp, #16]
 8006228:	f003 0007 	and.w	r0, r3, #7
 800622c:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8006230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006234:	f3af 8000 	nop.w
 8006238:	00000000 	.word	0x00000000
 800623c:	3ff00000 	.word	0x3ff00000
	...
 8006248:	41700000 	.word	0x41700000
 800624c:	3e700000 	.word	0x3e700000
 8006250:	08006960 	.word	0x08006960
 8006254:	00000000 	.word	0x00000000

08006258 <__kernel_sin>:
 8006258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800625c:	ec55 4b10 	vmov	r4, r5, d0
 8006260:	b085      	sub	sp, #20
 8006262:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006266:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800626a:	ed8d 1b00 	vstr	d1, [sp]
 800626e:	9002      	str	r0, [sp, #8]
 8006270:	da07      	bge.n	8006282 <__kernel_sin+0x2a>
 8006272:	ee10 0a10 	vmov	r0, s0
 8006276:	4629      	mov	r1, r5
 8006278:	f7fa fc8a 	bl	8000b90 <__aeabi_d2iz>
 800627c:	2800      	cmp	r0, #0
 800627e:	f000 8081 	beq.w	8006384 <__kernel_sin+0x12c>
 8006282:	4622      	mov	r2, r4
 8006284:	462b      	mov	r3, r5
 8006286:	4620      	mov	r0, r4
 8006288:	4629      	mov	r1, r5
 800628a:	f7fa f9d1 	bl	8000630 <__aeabi_dmul>
 800628e:	4682      	mov	sl, r0
 8006290:	468b      	mov	fp, r1
 8006292:	4602      	mov	r2, r0
 8006294:	460b      	mov	r3, r1
 8006296:	4620      	mov	r0, r4
 8006298:	4629      	mov	r1, r5
 800629a:	f7fa f9c9 	bl	8000630 <__aeabi_dmul>
 800629e:	a341      	add	r3, pc, #260	; (adr r3, 80063a4 <__kernel_sin+0x14c>)
 80062a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062a4:	4680      	mov	r8, r0
 80062a6:	4689      	mov	r9, r1
 80062a8:	4650      	mov	r0, sl
 80062aa:	4659      	mov	r1, fp
 80062ac:	f7fa f9c0 	bl	8000630 <__aeabi_dmul>
 80062b0:	a33e      	add	r3, pc, #248	; (adr r3, 80063ac <__kernel_sin+0x154>)
 80062b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062b6:	f7fa f807 	bl	80002c8 <__aeabi_dsub>
 80062ba:	4652      	mov	r2, sl
 80062bc:	465b      	mov	r3, fp
 80062be:	f7fa f9b7 	bl	8000630 <__aeabi_dmul>
 80062c2:	a33c      	add	r3, pc, #240	; (adr r3, 80063b4 <__kernel_sin+0x15c>)
 80062c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062c8:	f7fa f800 	bl	80002cc <__adddf3>
 80062cc:	4652      	mov	r2, sl
 80062ce:	465b      	mov	r3, fp
 80062d0:	f7fa f9ae 	bl	8000630 <__aeabi_dmul>
 80062d4:	a339      	add	r3, pc, #228	; (adr r3, 80063bc <__kernel_sin+0x164>)
 80062d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062da:	f7f9 fff5 	bl	80002c8 <__aeabi_dsub>
 80062de:	4652      	mov	r2, sl
 80062e0:	465b      	mov	r3, fp
 80062e2:	f7fa f9a5 	bl	8000630 <__aeabi_dmul>
 80062e6:	a337      	add	r3, pc, #220	; (adr r3, 80063c4 <__kernel_sin+0x16c>)
 80062e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ec:	f7f9 ffee 	bl	80002cc <__adddf3>
 80062f0:	9b02      	ldr	r3, [sp, #8]
 80062f2:	4606      	mov	r6, r0
 80062f4:	460f      	mov	r7, r1
 80062f6:	b99b      	cbnz	r3, 8006320 <__kernel_sin+0xc8>
 80062f8:	4602      	mov	r2, r0
 80062fa:	460b      	mov	r3, r1
 80062fc:	4650      	mov	r0, sl
 80062fe:	4659      	mov	r1, fp
 8006300:	f7fa f996 	bl	8000630 <__aeabi_dmul>
 8006304:	a324      	add	r3, pc, #144	; (adr r3, 8006398 <__kernel_sin+0x140>)
 8006306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800630a:	f7f9 ffdd 	bl	80002c8 <__aeabi_dsub>
 800630e:	4642      	mov	r2, r8
 8006310:	464b      	mov	r3, r9
 8006312:	f7fa f98d 	bl	8000630 <__aeabi_dmul>
 8006316:	4622      	mov	r2, r4
 8006318:	462b      	mov	r3, r5
 800631a:	f7f9 ffd7 	bl	80002cc <__adddf3>
 800631e:	e033      	b.n	8006388 <__kernel_sin+0x130>
 8006320:	2200      	movs	r2, #0
 8006322:	4b1f      	ldr	r3, [pc, #124]	; (80063a0 <__kernel_sin+0x148>)
 8006324:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006328:	f7fa f982 	bl	8000630 <__aeabi_dmul>
 800632c:	4632      	mov	r2, r6
 800632e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006332:	463b      	mov	r3, r7
 8006334:	4640      	mov	r0, r8
 8006336:	4649      	mov	r1, r9
 8006338:	f7fa f97a 	bl	8000630 <__aeabi_dmul>
 800633c:	4602      	mov	r2, r0
 800633e:	460b      	mov	r3, r1
 8006340:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006344:	f7f9 ffc0 	bl	80002c8 <__aeabi_dsub>
 8006348:	4652      	mov	r2, sl
 800634a:	465b      	mov	r3, fp
 800634c:	f7fa f970 	bl	8000630 <__aeabi_dmul>
 8006350:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006354:	f7f9 ffb8 	bl	80002c8 <__aeabi_dsub>
 8006358:	a30f      	add	r3, pc, #60	; (adr r3, 8006398 <__kernel_sin+0x140>)
 800635a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800635e:	4606      	mov	r6, r0
 8006360:	460f      	mov	r7, r1
 8006362:	4640      	mov	r0, r8
 8006364:	4649      	mov	r1, r9
 8006366:	f7fa f963 	bl	8000630 <__aeabi_dmul>
 800636a:	4602      	mov	r2, r0
 800636c:	460b      	mov	r3, r1
 800636e:	4630      	mov	r0, r6
 8006370:	4639      	mov	r1, r7
 8006372:	f7f9 ffab 	bl	80002cc <__adddf3>
 8006376:	4602      	mov	r2, r0
 8006378:	460b      	mov	r3, r1
 800637a:	4620      	mov	r0, r4
 800637c:	4629      	mov	r1, r5
 800637e:	f7f9 ffa3 	bl	80002c8 <__aeabi_dsub>
 8006382:	e001      	b.n	8006388 <__kernel_sin+0x130>
 8006384:	4620      	mov	r0, r4
 8006386:	4629      	mov	r1, r5
 8006388:	ec41 0b10 	vmov	d0, r0, r1
 800638c:	b005      	add	sp, #20
 800638e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006392:	bf00      	nop
 8006394:	f3af 8000 	nop.w
 8006398:	55555549 	.word	0x55555549
 800639c:	3fc55555 	.word	0x3fc55555
 80063a0:	3fe00000 	.word	0x3fe00000
 80063a4:	5acfd57c 	.word	0x5acfd57c
 80063a8:	3de5d93a 	.word	0x3de5d93a
 80063ac:	8a2b9ceb 	.word	0x8a2b9ceb
 80063b0:	3e5ae5e6 	.word	0x3e5ae5e6
 80063b4:	57b1fe7d 	.word	0x57b1fe7d
 80063b8:	3ec71de3 	.word	0x3ec71de3
 80063bc:	19c161d5 	.word	0x19c161d5
 80063c0:	3f2a01a0 	.word	0x3f2a01a0
 80063c4:	1110f8a6 	.word	0x1110f8a6
 80063c8:	3f811111 	.word	0x3f811111

080063cc <fabs>:
 80063cc:	ec53 2b10 	vmov	r2, r3, d0
 80063d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80063d4:	ec43 2b10 	vmov	d0, r2, r3
 80063d8:	4770      	bx	lr
 80063da:	0000      	movs	r0, r0
 80063dc:	0000      	movs	r0, r0
	...

080063e0 <floor>:
 80063e0:	ec51 0b10 	vmov	r0, r1, d0
 80063e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063e8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80063ec:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80063f0:	2e13      	cmp	r6, #19
 80063f2:	ee10 8a10 	vmov	r8, s0
 80063f6:	460c      	mov	r4, r1
 80063f8:	ee10 5a10 	vmov	r5, s0
 80063fc:	dc33      	bgt.n	8006466 <floor+0x86>
 80063fe:	2e00      	cmp	r6, #0
 8006400:	da16      	bge.n	8006430 <floor+0x50>
 8006402:	a335      	add	r3, pc, #212	; (adr r3, 80064d8 <floor+0xf8>)
 8006404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006408:	f7f9 ff60 	bl	80002cc <__adddf3>
 800640c:	2200      	movs	r2, #0
 800640e:	2300      	movs	r3, #0
 8006410:	f7fa fb9e 	bl	8000b50 <__aeabi_dcmpgt>
 8006414:	2800      	cmp	r0, #0
 8006416:	d057      	beq.n	80064c8 <floor+0xe8>
 8006418:	2c00      	cmp	r4, #0
 800641a:	da53      	bge.n	80064c4 <floor+0xe4>
 800641c:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8006420:	ea53 0308 	orrs.w	r3, r3, r8
 8006424:	4b2e      	ldr	r3, [pc, #184]	; (80064e0 <floor+0x100>)
 8006426:	f04f 0500 	mov.w	r5, #0
 800642a:	bf18      	it	ne
 800642c:	461c      	movne	r4, r3
 800642e:	e04b      	b.n	80064c8 <floor+0xe8>
 8006430:	4f2c      	ldr	r7, [pc, #176]	; (80064e4 <floor+0x104>)
 8006432:	4137      	asrs	r7, r6
 8006434:	ea01 0307 	and.w	r3, r1, r7
 8006438:	4303      	orrs	r3, r0
 800643a:	d047      	beq.n	80064cc <floor+0xec>
 800643c:	a326      	add	r3, pc, #152	; (adr r3, 80064d8 <floor+0xf8>)
 800643e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006442:	f7f9 ff43 	bl	80002cc <__adddf3>
 8006446:	2200      	movs	r2, #0
 8006448:	2300      	movs	r3, #0
 800644a:	f7fa fb81 	bl	8000b50 <__aeabi_dcmpgt>
 800644e:	b3d8      	cbz	r0, 80064c8 <floor+0xe8>
 8006450:	2c00      	cmp	r4, #0
 8006452:	bfbe      	ittt	lt
 8006454:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8006458:	fa43 f606 	asrlt.w	r6, r3, r6
 800645c:	19a4      	addlt	r4, r4, r6
 800645e:	ea24 0407 	bic.w	r4, r4, r7
 8006462:	2500      	movs	r5, #0
 8006464:	e030      	b.n	80064c8 <floor+0xe8>
 8006466:	2e33      	cmp	r6, #51	; 0x33
 8006468:	dd08      	ble.n	800647c <floor+0x9c>
 800646a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800646e:	d12d      	bne.n	80064cc <floor+0xec>
 8006470:	ee10 2a10 	vmov	r2, s0
 8006474:	460b      	mov	r3, r1
 8006476:	f7f9 ff29 	bl	80002cc <__adddf3>
 800647a:	e027      	b.n	80064cc <floor+0xec>
 800647c:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8006480:	f04f 33ff 	mov.w	r3, #4294967295
 8006484:	fa23 f707 	lsr.w	r7, r3, r7
 8006488:	4238      	tst	r0, r7
 800648a:	d01f      	beq.n	80064cc <floor+0xec>
 800648c:	a312      	add	r3, pc, #72	; (adr r3, 80064d8 <floor+0xf8>)
 800648e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006492:	f7f9 ff1b 	bl	80002cc <__adddf3>
 8006496:	2200      	movs	r2, #0
 8006498:	2300      	movs	r3, #0
 800649a:	f7fa fb59 	bl	8000b50 <__aeabi_dcmpgt>
 800649e:	b198      	cbz	r0, 80064c8 <floor+0xe8>
 80064a0:	2c00      	cmp	r4, #0
 80064a2:	da0c      	bge.n	80064be <floor+0xde>
 80064a4:	2e14      	cmp	r6, #20
 80064a6:	d101      	bne.n	80064ac <floor+0xcc>
 80064a8:	3401      	adds	r4, #1
 80064aa:	e008      	b.n	80064be <floor+0xde>
 80064ac:	2301      	movs	r3, #1
 80064ae:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80064b2:	fa03 f606 	lsl.w	r6, r3, r6
 80064b6:	4435      	add	r5, r6
 80064b8:	45a8      	cmp	r8, r5
 80064ba:	bf88      	it	hi
 80064bc:	18e4      	addhi	r4, r4, r3
 80064be:	ea25 0507 	bic.w	r5, r5, r7
 80064c2:	e001      	b.n	80064c8 <floor+0xe8>
 80064c4:	2500      	movs	r5, #0
 80064c6:	462c      	mov	r4, r5
 80064c8:	4621      	mov	r1, r4
 80064ca:	4628      	mov	r0, r5
 80064cc:	ec41 0b10 	vmov	d0, r0, r1
 80064d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064d4:	f3af 8000 	nop.w
 80064d8:	8800759c 	.word	0x8800759c
 80064dc:	7e37e43c 	.word	0x7e37e43c
 80064e0:	bff00000 	.word	0xbff00000
 80064e4:	000fffff 	.word	0x000fffff

080064e8 <scalbn>:
 80064e8:	b570      	push	{r4, r5, r6, lr}
 80064ea:	ec55 4b10 	vmov	r4, r5, d0
 80064ee:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80064f2:	4606      	mov	r6, r0
 80064f4:	462b      	mov	r3, r5
 80064f6:	b9a2      	cbnz	r2, 8006522 <scalbn+0x3a>
 80064f8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80064fc:	4323      	orrs	r3, r4
 80064fe:	d059      	beq.n	80065b4 <scalbn+0xcc>
 8006500:	2200      	movs	r2, #0
 8006502:	4b33      	ldr	r3, [pc, #204]	; (80065d0 <scalbn+0xe8>)
 8006504:	4629      	mov	r1, r5
 8006506:	ee10 0a10 	vmov	r0, s0
 800650a:	f7fa f891 	bl	8000630 <__aeabi_dmul>
 800650e:	4a31      	ldr	r2, [pc, #196]	; (80065d4 <scalbn+0xec>)
 8006510:	4296      	cmp	r6, r2
 8006512:	4604      	mov	r4, r0
 8006514:	460d      	mov	r5, r1
 8006516:	460b      	mov	r3, r1
 8006518:	da0f      	bge.n	800653a <scalbn+0x52>
 800651a:	a329      	add	r3, pc, #164	; (adr r3, 80065c0 <scalbn+0xd8>)
 800651c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006520:	e045      	b.n	80065ae <scalbn+0xc6>
 8006522:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8006526:	428a      	cmp	r2, r1
 8006528:	d10a      	bne.n	8006540 <scalbn+0x58>
 800652a:	ee10 2a10 	vmov	r2, s0
 800652e:	462b      	mov	r3, r5
 8006530:	4620      	mov	r0, r4
 8006532:	4629      	mov	r1, r5
 8006534:	f7f9 feca 	bl	80002cc <__adddf3>
 8006538:	e03e      	b.n	80065b8 <scalbn+0xd0>
 800653a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800653e:	3a36      	subs	r2, #54	; 0x36
 8006540:	4432      	add	r2, r6
 8006542:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006546:	428a      	cmp	r2, r1
 8006548:	dd02      	ble.n	8006550 <scalbn+0x68>
 800654a:	ec45 4b11 	vmov	d1, r4, r5
 800654e:	e011      	b.n	8006574 <scalbn+0x8c>
 8006550:	2a00      	cmp	r2, #0
 8006552:	dd06      	ble.n	8006562 <scalbn+0x7a>
 8006554:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006558:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800655c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006560:	e028      	b.n	80065b4 <scalbn+0xcc>
 8006562:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006566:	da17      	bge.n	8006598 <scalbn+0xb0>
 8006568:	f24c 3350 	movw	r3, #50000	; 0xc350
 800656c:	429e      	cmp	r6, r3
 800656e:	ec45 4b11 	vmov	d1, r4, r5
 8006572:	dd07      	ble.n	8006584 <scalbn+0x9c>
 8006574:	ed9f 0b14 	vldr	d0, [pc, #80]	; 80065c8 <scalbn+0xe0>
 8006578:	f000 f830 	bl	80065dc <copysign>
 800657c:	a312      	add	r3, pc, #72	; (adr r3, 80065c8 <scalbn+0xe0>)
 800657e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006582:	e006      	b.n	8006592 <scalbn+0xaa>
 8006584:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80065c0 <scalbn+0xd8>
 8006588:	f000 f828 	bl	80065dc <copysign>
 800658c:	a30c      	add	r3, pc, #48	; (adr r3, 80065c0 <scalbn+0xd8>)
 800658e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006592:	ec51 0b10 	vmov	r0, r1, d0
 8006596:	e00a      	b.n	80065ae <scalbn+0xc6>
 8006598:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800659c:	3236      	adds	r2, #54	; 0x36
 800659e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80065a2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80065a6:	4b0c      	ldr	r3, [pc, #48]	; (80065d8 <scalbn+0xf0>)
 80065a8:	4620      	mov	r0, r4
 80065aa:	4629      	mov	r1, r5
 80065ac:	2200      	movs	r2, #0
 80065ae:	f7fa f83f 	bl	8000630 <__aeabi_dmul>
 80065b2:	e001      	b.n	80065b8 <scalbn+0xd0>
 80065b4:	4620      	mov	r0, r4
 80065b6:	4629      	mov	r1, r5
 80065b8:	ec41 0b10 	vmov	d0, r0, r1
 80065bc:	bd70      	pop	{r4, r5, r6, pc}
 80065be:	bf00      	nop
 80065c0:	c2f8f359 	.word	0xc2f8f359
 80065c4:	01a56e1f 	.word	0x01a56e1f
 80065c8:	8800759c 	.word	0x8800759c
 80065cc:	7e37e43c 	.word	0x7e37e43c
 80065d0:	43500000 	.word	0x43500000
 80065d4:	ffff3cb0 	.word	0xffff3cb0
 80065d8:	3c900000 	.word	0x3c900000

080065dc <copysign>:
 80065dc:	ec53 2b10 	vmov	r2, r3, d0
 80065e0:	ee11 0a90 	vmov	r0, s3
 80065e4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80065e8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80065ec:	ea41 0300 	orr.w	r3, r1, r0
 80065f0:	ec43 2b10 	vmov	d0, r2, r3
 80065f4:	4770      	bx	lr
	...

080065f8 <_sbrk>:
 80065f8:	4b04      	ldr	r3, [pc, #16]	; (800660c <_sbrk+0x14>)
 80065fa:	6819      	ldr	r1, [r3, #0]
 80065fc:	4602      	mov	r2, r0
 80065fe:	b909      	cbnz	r1, 8006604 <_sbrk+0xc>
 8006600:	4903      	ldr	r1, [pc, #12]	; (8006610 <_sbrk+0x18>)
 8006602:	6019      	str	r1, [r3, #0]
 8006604:	6818      	ldr	r0, [r3, #0]
 8006606:	4402      	add	r2, r0
 8006608:	601a      	str	r2, [r3, #0]
 800660a:	4770      	bx	lr
 800660c:	20000590 	.word	0x20000590
 8006610:	20000694 	.word	0x20000694

08006614 <_init>:
 8006614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006616:	bf00      	nop
 8006618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800661a:	bc08      	pop	{r3}
 800661c:	469e      	mov	lr, r3
 800661e:	4770      	bx	lr

08006620 <_fini>:
 8006620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006622:	bf00      	nop
 8006624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006626:	bc08      	pop	{r3}
 8006628:	469e      	mov	lr, r3
 800662a:	4770      	bx	lr
