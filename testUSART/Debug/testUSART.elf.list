
testUSART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001454  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001618  08001618  00011618  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001628  08001628  00011628  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800162c  0800162c  0001162c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08001630  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000a8  20000004  08001634  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200000ac  08001634  000200ac  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_line   000035f4  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00008e99  00000000  00000000  00023628  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001b4e  00000000  00000000  0002c4c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000568  00000000  00000000  0002e010  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000009d8  00000000  00000000  0002e578  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00003726  00000000  00000000  0002ef50  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000230b  00000000  00000000  00032676  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007e  00000000  00000000  00034981  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000cf0  00000000  00000000  00034a00  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000004 	.word	0x20000004
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08001600 	.word	0x08001600

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000008 	.word	0x20000008
 8000200:	08001600 	.word	0x08001600

08000204 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000204:	f8df d034 	ldr.w	sp, [pc, #52]	; 800023c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000208:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800020a:	e003      	b.n	8000214 <LoopCopyDataInit>

0800020c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800020c:	4b0c      	ldr	r3, [pc, #48]	; (8000240 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800020e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000210:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000212:	3104      	adds	r1, #4

08000214 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000214:	480b      	ldr	r0, [pc, #44]	; (8000244 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000216:	4b0c      	ldr	r3, [pc, #48]	; (8000248 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000218:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800021a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800021c:	d3f6      	bcc.n	800020c <CopyDataInit>
  ldr  r2, =_sbss
 800021e:	4a0b      	ldr	r2, [pc, #44]	; (800024c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000220:	e002      	b.n	8000228 <LoopFillZerobss>

08000222 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000222:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000224:	f842 3b04 	str.w	r3, [r2], #4

08000228 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000228:	4b09      	ldr	r3, [pc, #36]	; (8000250 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800022a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800022c:	d3f9      	bcc.n	8000222 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800022e:	f000 f813 	bl	8000258 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000232:	f001 f9bf 	bl	80015b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000236:	f001 f879 	bl	800132c <main>
  bx  lr    
 800023a:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800023c:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8000240:	08001630 	.word	0x08001630
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000244:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000248:	20000004 	.word	0x20000004
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 800024c:	20000004 	.word	0x20000004
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000250:	200000ac 	.word	0x200000ac

08000254 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000254:	e7fe      	b.n	8000254 <ADC_IRQHandler>
	...

08000258 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000258:	490f      	ldr	r1, [pc, #60]	; (8000298 <SystemInit+0x40>)
 800025a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800025e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000262:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000266:	4b0d      	ldr	r3, [pc, #52]	; (800029c <SystemInit+0x44>)
 8000268:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800026a:	2000      	movs	r0, #0
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800026c:	f042 0201 	orr.w	r2, r2, #1
 8000270:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000272:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000274:	681a      	ldr	r2, [r3, #0]
 8000276:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800027a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800027e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000280:	4a07      	ldr	r2, [pc, #28]	; (80002a0 <SystemInit+0x48>)
 8000282:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000284:	681a      	ldr	r2, [r3, #0]
 8000286:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800028a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800028c:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800028e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000292:	608b      	str	r3, [r1, #8]
 8000294:	4770      	bx	lr
 8000296:	bf00      	nop
 8000298:	e000ed00 	.word	0xe000ed00
 800029c:	40023800 	.word	0x40023800
 80002a0:	24003010 	.word	0x24003010

080002a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80002a4:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 80002a6:	4b08      	ldr	r3, [pc, #32]	; (80002c8 <HAL_InitTick+0x24>)
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80002a8:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 80002aa:	6818      	ldr	r0, [r3, #0]
 80002ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002b0:	fbb0 f0f3 	udiv	r0, r0, r3
 80002b4:	f000 f884 	bl	80003c0 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 80002b8:	2200      	movs	r2, #0
 80002ba:	4621      	mov	r1, r4
 80002bc:	f04f 30ff 	mov.w	r0, #4294967295
 80002c0:	f000 f83e 	bl	8000340 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 80002c4:	2000      	movs	r0, #0
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	20000000 	.word	0x20000000

080002cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80002cc:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80002ce:	4b0b      	ldr	r3, [pc, #44]	; (80002fc <HAL_Init+0x30>)
 80002d0:	681a      	ldr	r2, [r3, #0]
 80002d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80002d6:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 80002d8:	681a      	ldr	r2, [r3, #0]
 80002da:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80002de:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80002e0:	681a      	ldr	r2, [r3, #0]
 80002e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80002e6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80002e8:	2003      	movs	r0, #3
 80002ea:	f000 f817 	bl	800031c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80002ee:	2000      	movs	r0, #0
 80002f0:	f7ff ffd8 	bl	80002a4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80002f4:	f001 f8b0 	bl	8001458 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 80002f8:	2000      	movs	r0, #0
 80002fa:	bd08      	pop	{r3, pc}
 80002fc:	40023c00 	.word	0x40023c00

08000300 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000300:	4a02      	ldr	r2, [pc, #8]	; (800030c <HAL_IncTick+0xc>)
 8000302:	6813      	ldr	r3, [r2, #0]
 8000304:	3301      	adds	r3, #1
 8000306:	6013      	str	r3, [r2, #0]
 8000308:	4770      	bx	lr
 800030a:	bf00      	nop
 800030c:	20000020 	.word	0x20000020

08000310 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000310:	4b01      	ldr	r3, [pc, #4]	; (8000318 <HAL_GetTick+0x8>)
 8000312:	6818      	ldr	r0, [r3, #0]
}
 8000314:	4770      	bx	lr
 8000316:	bf00      	nop
 8000318:	20000020 	.word	0x20000020

0800031c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800031c:	4a07      	ldr	r2, [pc, #28]	; (800033c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800031e:	68d3      	ldr	r3, [r2, #12]
 8000320:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000324:	041b      	lsls	r3, r3, #16
 8000326:	0c1b      	lsrs	r3, r3, #16
 8000328:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 800032c:	0200      	lsls	r0, r0, #8
 800032e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000332:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8000336:	4303      	orrs	r3, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8000338:	60d3      	str	r3, [r2, #12]
 800033a:	4770      	bx	lr
 800033c:	e000ed00 	.word	0xe000ed00

08000340 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000340:	4b17      	ldr	r3, [pc, #92]	; (80003a0 <HAL_NVIC_SetPriority+0x60>)
 8000342:	68db      	ldr	r3, [r3, #12]
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000344:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000348:	b530      	push	{r4, r5, lr}
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800034a:	f1c3 0407 	rsb	r4, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800034e:	1d1d      	adds	r5, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000350:	2c04      	cmp	r4, #4
 8000352:	bf28      	it	cs
 8000354:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000356:	2d06      	cmp	r5, #6

  return (
 8000358:	f04f 0501 	mov.w	r5, #1
 800035c:	fa05 f404 	lsl.w	r4, r5, r4
 8000360:	f104 34ff 	add.w	r4, r4, #4294967295
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000364:	bf8c      	ite	hi
 8000366:	3b03      	subhi	r3, #3
 8000368:	2300      	movls	r3, #0

  return (
 800036a:	400c      	ands	r4, r1
 800036c:	409c      	lsls	r4, r3
 800036e:	fa05 f303 	lsl.w	r3, r5, r3
 8000372:	3b01      	subs	r3, #1
 8000374:	401a      	ands	r2, r3
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8000376:	2800      	cmp	r0, #0
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8000378:	ea42 0204 	orr.w	r2, r2, r4
 800037c:	ea4f 1202 	mov.w	r2, r2, lsl #4
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000380:	bfaf      	iteee	ge
 8000382:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000386:	f000 000f 	andlt.w	r0, r0, #15
 800038a:	4b06      	ldrlt	r3, [pc, #24]	; (80003a4 <HAL_NVIC_SetPriority+0x64>)
 800038c:	b2d2      	uxtblt	r2, r2
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800038e:	bfa5      	ittet	ge
 8000390:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000394:	b2d2      	uxtbge	r2, r2
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000396:	541a      	strblt	r2, [r3, r0]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000398:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	bf00      	nop
 80003a0:	e000ed00 	.word	0xe000ed00
 80003a4:	e000ed14 	.word	0xe000ed14

080003a8 <HAL_NVIC_EnableIRQ>:
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80003a8:	0942      	lsrs	r2, r0, #5
 80003aa:	2301      	movs	r3, #1
 80003ac:	f000 001f 	and.w	r0, r0, #31
 80003b0:	fa03 f000 	lsl.w	r0, r3, r0
 80003b4:	4b01      	ldr	r3, [pc, #4]	; (80003bc <HAL_NVIC_EnableIRQ+0x14>)
 80003b6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80003ba:	4770      	bx	lr
 80003bc:	e000e100 	.word	0xe000e100

080003c0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003c0:	3801      	subs	r0, #1
 80003c2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80003c6:	d20a      	bcs.n	80003de <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003c8:	4b06      	ldr	r3, [pc, #24]	; (80003e4 <HAL_SYSTICK_Config+0x24>)
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003ca:	4a07      	ldr	r2, [pc, #28]	; (80003e8 <HAL_SYSTICK_Config+0x28>)
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003cc:	6058      	str	r0, [r3, #4]
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003ce:	21f0      	movs	r1, #240	; 0xf0
 80003d0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003d4:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003d6:	2207      	movs	r2, #7
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003d8:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003da:	601a      	str	r2, [r3, #0]
 80003dc:	4770      	bx	lr
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
 80003de:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80003e0:	4770      	bx	lr
 80003e2:	bf00      	nop
 80003e4:	e000e010 	.word	0xe000e010
 80003e8:	e000ed00 	.word	0xe000ed00

080003ec <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80003ec:	4b04      	ldr	r3, [pc, #16]	; (8000400 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80003ee:	681a      	ldr	r2, [r3, #0]
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80003f0:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80003f2:	bf0c      	ite	eq
 80003f4:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80003f8:	f022 0204 	bicne.w	r2, r2, #4
 80003fc:	601a      	str	r2, [r3, #0]
 80003fe:	4770      	bx	lr
 8000400:	e000e010 	.word	0xe000e010

08000404 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000404:	4770      	bx	lr

08000406 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000406:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000408:	f7ff fffc 	bl	8000404 <HAL_SYSTICK_Callback>
 800040c:	bd08      	pop	{r3, pc}

0800040e <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800040e:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8000412:	2b02      	cmp	r3, #2
 8000414:	d003      	beq.n	800041e <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000416:	2380      	movs	r3, #128	; 0x80
 8000418:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 800041a:	2001      	movs	r0, #1
 800041c:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800041e:	6802      	ldr	r2, [r0, #0]
    return HAL_ERROR;
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000420:	2305      	movs	r3, #5
 8000422:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000426:	6813      	ldr	r3, [r2, #0]
 8000428:	f023 0301 	bic.w	r3, r3, #1
 800042c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800042e:	2000      	movs	r0, #0
}
 8000430:	4770      	bx	lr
	...

08000434 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000438:	4f67      	ldr	r7, [pc, #412]	; (80005d8 <HAL_GPIO_Init+0x1a4>)
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800043a:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800043c:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 80005e0 <HAL_GPIO_Init+0x1ac>

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000440:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80005e4 <HAL_GPIO_Init+0x1b0>
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000444:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000446:	2200      	movs	r2, #0
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000448:	9301      	str	r3, [sp, #4]
 800044a:	46be      	mov	lr, r7

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
 800044c:	2401      	movs	r4, #1
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if(iocurrent == ioposition)
 800044e:	9b01      	ldr	r3, [sp, #4]

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
 8000450:	4094      	lsls	r4, r2
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if(iocurrent == ioposition)
 8000452:	ea34 0303 	bics.w	r3, r4, r3
 8000456:	f040 80b7 	bne.w	80005c8 <HAL_GPIO_Init+0x194>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800045a:	684d      	ldr	r5, [r1, #4]
 800045c:	f025 0a10 	bic.w	sl, r5, #16
 8000460:	f1ba 0f02 	cmp.w	sl, #2
 8000464:	d114      	bne.n	8000490 <HAL_GPIO_Init+0x5c>
 8000466:	ea4f 09d2 	mov.w	r9, r2, lsr #3
 800046a:	eb00 0989 	add.w	r9, r0, r9, lsl #2
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 800046e:	f002 0b07 	and.w	fp, r2, #7
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000472:	f8d9 6020 	ldr.w	r6, [r9, #32]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8000476:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800047a:	230f      	movs	r3, #15
 800047c:	fa03 f30b 	lsl.w	r3, r3, fp
 8000480:	ea26 0603 	bic.w	r6, r6, r3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000484:	690b      	ldr	r3, [r1, #16]
 8000486:	fa03 f30b 	lsl.w	r3, r3, fp
 800048a:	4333      	orrs	r3, r6
        GPIOx->AFR[position >> 3U] = temp;
 800048c:	f8c9 3020 	str.w	r3, [r9, #32]
 8000490:	ea4f 0b42 	mov.w	fp, r2, lsl #1
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000494:	f04f 0903 	mov.w	r9, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000498:	6803      	ldr	r3, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800049a:	fa09 f90b 	lsl.w	r9, r9, fp
 800049e:	ea6f 0909 	mvn.w	r9, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80004a2:	f005 0603 	and.w	r6, r5, #3
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80004a6:	ea03 0309 	and.w	r3, r3, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80004aa:	fa06 f60b 	lsl.w	r6, r6, fp
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80004ae:	f10a 3aff 	add.w	sl, sl, #4294967295
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80004b2:	4333      	orrs	r3, r6
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80004b4:	f1ba 0f01 	cmp.w	sl, #1

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
      GPIOx->MODER = temp;
 80004b8:	6003      	str	r3, [r0, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80004ba:	d80f      	bhi.n	80004dc <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80004bc:	6883      	ldr	r3, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
        temp |= (GPIO_Init->Speed << (position * 2U));
 80004be:	68ce      	ldr	r6, [r1, #12]
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80004c0:	ea09 0303 	and.w	r3, r9, r3
        temp |= (GPIO_Init->Speed << (position * 2U));
 80004c4:	fa06 f60b 	lsl.w	r6, r6, fp
 80004c8:	431e      	orrs	r6, r3
        GPIOx->OSPEEDR = temp;
 80004ca:	6086      	str	r6, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80004cc:	6843      	ldr	r3, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80004ce:	f3c5 1600 	ubfx	r6, r5, #4, #1
        temp |= (GPIO_Init->Speed << (position * 2U));
        GPIOx->OSPEEDR = temp;

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80004d2:	ea23 0304 	bic.w	r3, r3, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80004d6:	4096      	lsls	r6, r2
 80004d8:	4333      	orrs	r3, r6
        GPIOx->OTYPER = temp;
 80004da:	6043      	str	r3, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80004dc:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80004de:	ea09 0903 	and.w	r9, r9, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80004e2:	688b      	ldr	r3, [r1, #8]
 80004e4:	fa03 f30b 	lsl.w	r3, r3, fp
 80004e8:	ea43 0309 	orr.w	r3, r3, r9
      GPIOx->PUPDR = temp;
 80004ec:	60c3      	str	r3, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80004ee:	00eb      	lsls	r3, r5, #3
 80004f0:	d56a      	bpl.n	80005c8 <HAL_GPIO_Init+0x194>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004f2:	2300      	movs	r3, #0
 80004f4:	9303      	str	r3, [sp, #12]
 80004f6:	f8dc 6044 	ldr.w	r6, [ip, #68]	; 0x44

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80004fa:	4b38      	ldr	r3, [pc, #224]	; (80005dc <HAL_GPIO_Init+0x1a8>)
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004fc:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8000500:	f8cc 6044 	str.w	r6, [ip, #68]	; 0x44
 8000504:	f8dc 6044 	ldr.w	r6, [ip, #68]	; 0x44
 8000508:	f022 0903 	bic.w	r9, r2, #3
 800050c:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
 8000510:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8000514:	f509 399c 	add.w	r9, r9, #79872	; 0x13800
 8000518:	9603      	str	r6, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 800051a:	f002 0a03 	and.w	sl, r2, #3
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800051e:	9e03      	ldr	r6, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000520:	f8d9 b008 	ldr.w	fp, [r9, #8]
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000524:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8000528:	260f      	movs	r6, #15
 800052a:	fa06 f60a 	lsl.w	r6, r6, sl
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800052e:	4298      	cmp	r0, r3
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000530:	ea2b 0606 	bic.w	r6, fp, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000534:	d018      	beq.n	8000568 <HAL_GPIO_Init+0x134>
 8000536:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800053a:	4298      	cmp	r0, r3
 800053c:	d016      	beq.n	800056c <HAL_GPIO_Init+0x138>
 800053e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000542:	4298      	cmp	r0, r3
 8000544:	d014      	beq.n	8000570 <HAL_GPIO_Init+0x13c>
 8000546:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800054a:	4298      	cmp	r0, r3
 800054c:	d012      	beq.n	8000574 <HAL_GPIO_Init+0x140>
 800054e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000552:	4298      	cmp	r0, r3
 8000554:	d010      	beq.n	8000578 <HAL_GPIO_Init+0x144>
 8000556:	4540      	cmp	r0, r8
 8000558:	d010      	beq.n	800057c <HAL_GPIO_Init+0x148>
 800055a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800055e:	4298      	cmp	r0, r3
 8000560:	bf14      	ite	ne
 8000562:	2307      	movne	r3, #7
 8000564:	2306      	moveq	r3, #6
 8000566:	e00a      	b.n	800057e <HAL_GPIO_Init+0x14a>
 8000568:	2300      	movs	r3, #0
 800056a:	e008      	b.n	800057e <HAL_GPIO_Init+0x14a>
 800056c:	2301      	movs	r3, #1
 800056e:	e006      	b.n	800057e <HAL_GPIO_Init+0x14a>
 8000570:	2302      	movs	r3, #2
 8000572:	e004      	b.n	800057e <HAL_GPIO_Init+0x14a>
 8000574:	2303      	movs	r3, #3
 8000576:	e002      	b.n	800057e <HAL_GPIO_Init+0x14a>
 8000578:	2304      	movs	r3, #4
 800057a:	e000      	b.n	800057e <HAL_GPIO_Init+0x14a>
 800057c:	2305      	movs	r3, #5
 800057e:	fa03 f30a 	lsl.w	r3, r3, sl
 8000582:	4333      	orrs	r3, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000584:	f8c9 3008 	str.w	r3, [r9, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000588:	683b      	ldr	r3, [r7, #0]
        temp &= ~((uint32_t)iocurrent);
 800058a:	43e6      	mvns	r6, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800058c:	f415 3f80 	tst.w	r5, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
 8000590:	bf0c      	ite	eq
 8000592:	4033      	andeq	r3, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
 8000594:	4323      	orrne	r3, r4
        }
        EXTI->IMR = temp;
 8000596:	f8ce 3000 	str.w	r3, [lr]

        temp = EXTI->EMR;
 800059a:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800059e:	f415 3f00 	tst.w	r5, #131072	; 0x20000
          temp |= iocurrent;
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
 80005a2:	bf0c      	ite	eq
 80005a4:	4033      	andeq	r3, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
 80005a6:	4323      	orrne	r3, r4
        }
        EXTI->EMR = temp;
 80005a8:	607b      	str	r3, [r7, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80005aa:	68bb      	ldr	r3, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80005ac:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        }
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
 80005b0:	bf0c      	ite	eq
 80005b2:	4033      	andeq	r3, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
 80005b4:	4323      	orrne	r3, r4
        }
        EXTI->RTSR = temp;
 80005b6:	f8ce 3008 	str.w	r3, [lr, #8]

        temp = EXTI->FTSR;
 80005ba:	f8de 300c 	ldr.w	r3, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80005be:	02ad      	lsls	r5, r5, #10
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
 80005c0:	bf54      	ite	pl
 80005c2:	4033      	andpl	r3, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          temp |= iocurrent;
 80005c4:	4323      	orrmi	r3, r4
        }
        EXTI->FTSR = temp;
 80005c6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80005c8:	3201      	adds	r2, #1
 80005ca:	2a10      	cmp	r2, #16
 80005cc:	f47f af3e 	bne.w	800044c <HAL_GPIO_Init+0x18>
        }
        EXTI->FTSR = temp;
      }
    }
  }
}
 80005d0:	b005      	add	sp, #20
 80005d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80005d6:	bf00      	nop
 80005d8:	40013c00 	.word	0x40013c00
 80005dc:	40020000 	.word	0x40020000
 80005e0:	40023800 	.word	0x40023800
 80005e4:	40021400 	.word	0x40021400

080005e8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80005e8:	b902      	cbnz	r2, 80005ec <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80005ea:	0409      	lsls	r1, r1, #16
 80005ec:	6181      	str	r1, [r0, #24]
 80005ee:	4770      	bx	lr

080005f0 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80005f0:	6943      	ldr	r3, [r0, #20]
 80005f2:	4059      	eors	r1, r3
 80005f4:	6141      	str	r1, [r0, #20]
 80005f6:	4770      	bx	lr

080005f8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80005f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 80005fa:	2300      	movs	r3, #0
 80005fc:	9301      	str	r3, [sp, #4]
 80005fe:	4b22      	ldr	r3, [pc, #136]	; (8000688 <HAL_PWREx_EnableOverDrive+0x90>)
 8000600:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000602:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000606:	641a      	str	r2, [r3, #64]	; 0x40
 8000608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800060a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800060e:	9301      	str	r3, [sp, #4]
 8000610:	9b01      	ldr	r3, [sp, #4]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000612:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000616:	fa93 f3a3 	rbit	r3, r3
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800061a:	fab3 f383 	clz	r3, r3
 800061e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000622:	f503 3360 	add.w	r3, r3, #229376	; 0x38000
 8000626:	009b      	lsls	r3, r3, #2
 8000628:	2201      	movs	r2, #1
 800062a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800062c:	f7ff fe70 	bl	8000310 <HAL_GetTick>

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000630:	4c16      	ldr	r4, [pc, #88]	; (800068c <HAL_PWREx_EnableOverDrive+0x94>)
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();

  /* Get tick */
  tickstart = HAL_GetTick();
 8000632:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000634:	6863      	ldr	r3, [r4, #4]
 8000636:	03da      	lsls	r2, r3, #15
 8000638:	d407      	bmi.n	800064a <HAL_PWREx_EnableOverDrive+0x52>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800063a:	f7ff fe69 	bl	8000310 <HAL_GetTick>
 800063e:	1b40      	subs	r0, r0, r5
 8000640:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000644:	d9f6      	bls.n	8000634 <HAL_PWREx_EnableOverDrive+0x3c>
    {
      return HAL_TIMEOUT;
 8000646:	2003      	movs	r0, #3
 8000648:	e01b      	b.n	8000682 <HAL_PWREx_EnableOverDrive+0x8a>
 800064a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800064e:	fa93 f3a3 	rbit	r3, r3
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000652:	fab3 f383 	clz	r3, r3
 8000656:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800065a:	f503 3360 	add.w	r3, r3, #229376	; 0x38000
 800065e:	009b      	lsls	r3, r3, #2
 8000660:	2201      	movs	r2, #1
 8000662:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000664:	f7ff fe54 	bl	8000310 <HAL_GetTick>

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000668:	4c08      	ldr	r4, [pc, #32]	; (800068c <HAL_PWREx_EnableOverDrive+0x94>)
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();

  /* Get tick */
  tickstart = HAL_GetTick();
 800066a:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800066c:	6863      	ldr	r3, [r4, #4]
 800066e:	039b      	lsls	r3, r3, #14
 8000670:	d406      	bmi.n	8000680 <HAL_PWREx_EnableOverDrive+0x88>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000672:	f7ff fe4d 	bl	8000310 <HAL_GetTick>
 8000676:	1b40      	subs	r0, r0, r5
 8000678:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800067c:	d9f6      	bls.n	800066c <HAL_PWREx_EnableOverDrive+0x74>
 800067e:	e7e2      	b.n	8000646 <HAL_PWREx_EnableOverDrive+0x4e>
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8000680:	2000      	movs	r0, #0
}
 8000682:	b003      	add	sp, #12
 8000684:	bd30      	pop	{r4, r5, pc}
 8000686:	bf00      	nop
 8000688:	40023800 	.word	0x40023800
 800068c:	40007000 	.word	0x40007000

08000690 <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000690:	4b55      	ldr	r3, [pc, #340]	; (80007e8 <HAL_RCC_ClockConfig+0x158>)
 8000692:	681a      	ldr	r2, [r3, #0]
 8000694:	f002 020f 	and.w	r2, r2, #15
 8000698:	428a      	cmp	r2, r1
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800069a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800069e:	4605      	mov	r5, r0
 80006a0:	460e      	mov	r6, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80006a2:	d30a      	bcc.n	80006ba <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
    }
  }
 
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80006a4:	6829      	ldr	r1, [r5, #0]
 80006a6:	0788      	lsls	r0, r1, #30
 80006a8:	d511      	bpl.n	80006ce <HAL_RCC_ClockConfig+0x3e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80006aa:	4850      	ldr	r0, [pc, #320]	; (80007ec <HAL_RCC_ClockConfig+0x15c>)
 80006ac:	6883      	ldr	r3, [r0, #8]
 80006ae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80006b2:	68ab      	ldr	r3, [r5, #8]
 80006b4:	4313      	orrs	r3, r2
 80006b6:	6083      	str	r3, [r0, #8]
 80006b8:	e009      	b.n	80006ce <HAL_RCC_ClockConfig+0x3e>
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80006ba:	b2ca      	uxtb	r2, r1
 80006bc:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	f003 030f 	and.w	r3, r3, #15
 80006c4:	4299      	cmp	r1, r3
 80006c6:	d0ed      	beq.n	80006a4 <HAL_RCC_ClockConfig+0x14>
    {
      return HAL_ERROR;
 80006c8:	2001      	movs	r0, #1
 80006ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }
  
  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80006ce:	07c9      	lsls	r1, r1, #31
 80006d0:	d406      	bmi.n	80006e0 <HAL_RCC_ClockConfig+0x50>
      }
    }
  }    
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80006d2:	4b45      	ldr	r3, [pc, #276]	; (80007e8 <HAL_RCC_ClockConfig+0x158>)
 80006d4:	681a      	ldr	r2, [r3, #0]
 80006d6:	f002 020f 	and.w	r2, r2, #15
 80006da:	4296      	cmp	r6, r2
 80006dc:	d351      	bcc.n	8000782 <HAL_RCC_ClockConfig+0xf2>
 80006de:	e057      	b.n	8000790 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80006e0:	686b      	ldr	r3, [r5, #4]
 80006e2:	4a42      	ldr	r2, [pc, #264]	; (80007ec <HAL_RCC_ClockConfig+0x15c>)
 80006e4:	2b01      	cmp	r3, #1
 80006e6:	d103      	bne.n	80006f0 <HAL_RCC_ClockConfig+0x60>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80006e8:	6812      	ldr	r2, [r2, #0]
 80006ea:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 80006ee:	e008      	b.n	8000702 <HAL_RCC_ClockConfig+0x72>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 80006f0:	1e99      	subs	r1, r3, #2
 80006f2:	2901      	cmp	r1, #1
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80006f4:	6812      	ldr	r2, [r2, #0]
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 80006f6:	d802      	bhi.n	80006fe <HAL_RCC_ClockConfig+0x6e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80006f8:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80006fc:	e001      	b.n	8000702 <HAL_RCC_ClockConfig+0x72>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80006fe:	f012 0f02 	tst.w	r2, #2
 8000702:	d0e1      	beq.n	80006c8 <HAL_RCC_ClockConfig+0x38>
      {
        return HAL_ERROR;
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000704:	4c39      	ldr	r4, [pc, #228]	; (80007ec <HAL_RCC_ClockConfig+0x15c>)
 8000706:	68a2      	ldr	r2, [r4, #8]
 8000708:	f022 0203 	bic.w	r2, r2, #3
 800070c:	4313      	orrs	r3, r2
 800070e:	60a3      	str	r3, [r4, #8]
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8000710:	f7ff fdfe 	bl	8000310 <HAL_GetTick>
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000714:	686b      	ldr	r3, [r5, #4]
 8000716:	2b01      	cmp	r3, #1
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8000718:	4607      	mov	r7, r0
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800071a:	f241 3888 	movw	r8, #5000	; 0x1388
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800071e:	d10c      	bne.n	800073a <HAL_RCC_ClockConfig+0xaa>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000720:	68a3      	ldr	r3, [r4, #8]
 8000722:	f003 030c 	and.w	r3, r3, #12
 8000726:	2b04      	cmp	r3, #4
 8000728:	d0d3      	beq.n	80006d2 <HAL_RCC_ClockConfig+0x42>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800072a:	f7ff fdf1 	bl	8000310 <HAL_GetTick>
 800072e:	1bc0      	subs	r0, r0, r7
 8000730:	4540      	cmp	r0, r8
 8000732:	d9f5      	bls.n	8000720 <HAL_RCC_ClockConfig+0x90>
        {
          return HAL_TIMEOUT;
 8000734:	2003      	movs	r0, #3
 8000736:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800073a:	2b02      	cmp	r3, #2
 800073c:	d10a      	bne.n	8000754 <HAL_RCC_ClockConfig+0xc4>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800073e:	68a3      	ldr	r3, [r4, #8]
 8000740:	f003 030c 	and.w	r3, r3, #12
 8000744:	2b08      	cmp	r3, #8
 8000746:	d0c4      	beq.n	80006d2 <HAL_RCC_ClockConfig+0x42>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000748:	f7ff fde2 	bl	8000310 <HAL_GetTick>
 800074c:	1bc0      	subs	r0, r0, r7
 800074e:	4540      	cmp	r0, r8
 8000750:	d9f5      	bls.n	800073e <HAL_RCC_ClockConfig+0xae>
 8000752:	e7ef      	b.n	8000734 <HAL_RCC_ClockConfig+0xa4>
        {
          return HAL_TIMEOUT;
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 8000754:	2b03      	cmp	r3, #3
 8000756:	d10f      	bne.n	8000778 <HAL_RCC_ClockConfig+0xe8>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8000758:	68a3      	ldr	r3, [r4, #8]
 800075a:	f003 030c 	and.w	r3, r3, #12
 800075e:	2b0c      	cmp	r3, #12
 8000760:	d0b7      	beq.n	80006d2 <HAL_RCC_ClockConfig+0x42>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000762:	f7ff fdd5 	bl	8000310 <HAL_GetTick>
 8000766:	1bc0      	subs	r0, r0, r7
 8000768:	4540      	cmp	r0, r8
 800076a:	d9f5      	bls.n	8000758 <HAL_RCC_ClockConfig+0xc8>
 800076c:	e7e2      	b.n	8000734 <HAL_RCC_ClockConfig+0xa4>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800076e:	f7ff fdcf 	bl	8000310 <HAL_GetTick>
 8000772:	1bc0      	subs	r0, r0, r7
 8000774:	4540      	cmp	r0, r8
 8000776:	d8dd      	bhi.n	8000734 <HAL_RCC_ClockConfig+0xa4>
        }
      }
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000778:	68a3      	ldr	r3, [r4, #8]
 800077a:	f013 0f0c 	tst.w	r3, #12
 800077e:	d1f6      	bne.n	800076e <HAL_RCC_ClockConfig+0xde>
 8000780:	e7a7      	b.n	80006d2 <HAL_RCC_ClockConfig+0x42>
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
  { 
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000782:	b2f2      	uxtb	r2, r6
 8000784:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	f003 030f 	and.w	r3, r3, #15
 800078c:	429e      	cmp	r6, r3
 800078e:	d19b      	bne.n	80006c8 <HAL_RCC_ClockConfig+0x38>
      return HAL_ERROR;
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000790:	6829      	ldr	r1, [r5, #0]
 8000792:	074a      	lsls	r2, r1, #29
 8000794:	d506      	bpl.n	80007a4 <HAL_RCC_ClockConfig+0x114>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000796:	4815      	ldr	r0, [pc, #84]	; (80007ec <HAL_RCC_ClockConfig+0x15c>)
 8000798:	6883      	ldr	r3, [r0, #8]
 800079a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800079e:	68eb      	ldr	r3, [r5, #12]
 80007a0:	4313      	orrs	r3, r2
 80007a2:	6083      	str	r3, [r0, #8]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80007a4:	070b      	lsls	r3, r1, #28
 80007a6:	d507      	bpl.n	80007b8 <HAL_RCC_ClockConfig+0x128>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80007a8:	4a10      	ldr	r2, [pc, #64]	; (80007ec <HAL_RCC_ClockConfig+0x15c>)
 80007aa:	6929      	ldr	r1, [r5, #16]
 80007ac:	6893      	ldr	r3, [r2, #8]
 80007ae:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80007b2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80007b6:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 80007b8:	f000 f9d6 	bl	8000b68 <HAL_RCC_GetSysClockFreq>
 80007bc:	4b0b      	ldr	r3, [pc, #44]	; (80007ec <HAL_RCC_ClockConfig+0x15c>)
 80007be:	22f0      	movs	r2, #240	; 0xf0
 80007c0:	689b      	ldr	r3, [r3, #8]
 80007c2:	fa92 f2a2 	rbit	r2, r2
 80007c6:	fab2 f282 	clz	r2, r2
 80007ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80007ce:	40d3      	lsrs	r3, r2
 80007d0:	4a07      	ldr	r2, [pc, #28]	; (80007f0 <HAL_RCC_ClockConfig+0x160>)
 80007d2:	5cd3      	ldrb	r3, [r2, r3]
 80007d4:	40d8      	lsrs	r0, r3
 80007d6:	4b07      	ldr	r3, [pc, #28]	; (80007f4 <HAL_RCC_ClockConfig+0x164>)
 80007d8:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80007da:	2000      	movs	r0, #0
 80007dc:	f7ff fd62 	bl	80002a4 <HAL_InitTick>
  
  return HAL_OK;
 80007e0:	2000      	movs	r0, #0
}
 80007e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80007e6:	bf00      	nop
 80007e8:	40023c00 	.word	0x40023c00
 80007ec:	40023800 	.word	0x40023800
 80007f0:	08001618 	.word	0x08001618
 80007f4:	20000000 	.word	0x20000000

080007f8 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80007f8:	4b01      	ldr	r3, [pc, #4]	; (8000800 <HAL_RCC_GetHCLKFreq+0x8>)
 80007fa:	6818      	ldr	r0, [r3, #0]
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	20000000 	.word	0x20000000

08000804 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8000804:	4b08      	ldr	r3, [pc, #32]	; (8000828 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000806:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 800080a:	689b      	ldr	r3, [r3, #8]
 800080c:	fa92 f2a2 	rbit	r2, r2
 8000810:	fab2 f282 	clz	r2, r2
 8000814:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000818:	40d3      	lsrs	r3, r2
 800081a:	4a04      	ldr	r2, [pc, #16]	; (800082c <HAL_RCC_GetPCLK1Freq+0x28>)
 800081c:	5cd3      	ldrb	r3, [r2, r3]
 800081e:	4a04      	ldr	r2, [pc, #16]	; (8000830 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8000820:	6810      	ldr	r0, [r2, #0]
}
 8000822:	40d8      	lsrs	r0, r3
 8000824:	4770      	bx	lr
 8000826:	bf00      	nop
 8000828:	40023800 	.word	0x40023800
 800082c:	08001618 	.word	0x08001618
 8000830:	20000000 	.word	0x20000000

08000834 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8000834:	4b08      	ldr	r3, [pc, #32]	; (8000858 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000836:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 800083a:	689b      	ldr	r3, [r3, #8]
 800083c:	fa92 f2a2 	rbit	r2, r2
 8000840:	fab2 f282 	clz	r2, r2
 8000844:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000848:	40d3      	lsrs	r3, r2
 800084a:	4a04      	ldr	r2, [pc, #16]	; (800085c <HAL_RCC_GetPCLK2Freq+0x28>)
 800084c:	5cd3      	ldrb	r3, [r2, r3]
 800084e:	4a04      	ldr	r2, [pc, #16]	; (8000860 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8000850:	6810      	ldr	r0, [r2, #0]
} 
 8000852:	40d8      	lsrs	r0, r3
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop
 8000858:	40023800 	.word	0x40023800
 800085c:	08001618 	.word	0x08001618
 8000860:	20000000 	.word	0x20000000

08000864 <HAL_RCC_OscConfig>:
  uint32_t tickstart = 0U;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000864:	6803      	ldr	r3, [r0, #0]
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature 
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000866:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart = 0U;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800086a:	07de      	lsls	r6, r3, #31
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature 
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800086c:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800086e:	d403      	bmi.n	8000878 <HAL_RCC_OscConfig+0x14>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000870:	6823      	ldr	r3, [r4, #0]
 8000872:	079d      	lsls	r5, r3, #30
 8000874:	d440      	bmi.n	80008f8 <HAL_RCC_OscConfig+0x94>
 8000876:	e099      	b.n	80009ac <HAL_RCC_OscConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8000878:	4ba6      	ldr	r3, [pc, #664]	; (8000b14 <HAL_RCC_OscConfig+0x2b0>)
 800087a:	689a      	ldr	r2, [r3, #8]
 800087c:	f002 020c 	and.w	r2, r2, #12
 8000880:	2a04      	cmp	r2, #4
 8000882:	d010      	beq.n	80008a6 <HAL_RCC_OscConfig+0x42>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8000884:	689a      	ldr	r2, [r3, #8]
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8000886:	f002 020c 	and.w	r2, r2, #12
 800088a:	2a08      	cmp	r2, #8
 800088c:	d102      	bne.n	8000894 <HAL_RCC_OscConfig+0x30>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800088e:	685b      	ldr	r3, [r3, #4]
 8000890:	0258      	lsls	r0, r3, #9
 8000892:	d408      	bmi.n	80008a6 <HAL_RCC_OscConfig+0x42>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000894:	4a9f      	ldr	r2, [pc, #636]	; (8000b14 <HAL_RCC_OscConfig+0x2b0>)
 8000896:	6893      	ldr	r3, [r2, #8]
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8000898:	f003 030c 	and.w	r3, r3, #12
 800089c:	2b0c      	cmp	r3, #12
 800089e:	d10b      	bne.n	80008b8 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80008a0:	6853      	ldr	r3, [r2, #4]
 80008a2:	0259      	lsls	r1, r3, #9
 80008a4:	d508      	bpl.n	80008b8 <HAL_RCC_OscConfig+0x54>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80008a6:	4b9b      	ldr	r3, [pc, #620]	; (8000b14 <HAL_RCC_OscConfig+0x2b0>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	039a      	lsls	r2, r3, #14
 80008ac:	d5e0      	bpl.n	8000870 <HAL_RCC_OscConfig+0xc>
 80008ae:	6863      	ldr	r3, [r4, #4]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d1dd      	bne.n	8000870 <HAL_RCC_OscConfig+0xc>
      {
        return HAL_ERROR;
 80008b4:	2001      	movs	r0, #1
 80008b6:	e154      	b.n	8000b62 <HAL_RCC_OscConfig+0x2fe>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008b8:	4b97      	ldr	r3, [pc, #604]	; (8000b18 <HAL_RCC_OscConfig+0x2b4>)
 80008ba:	7922      	ldrb	r2, [r4, #4]
 80008bc:	701a      	strb	r2, [r3, #0]
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80008be:	6863      	ldr	r3, [r4, #4]
 80008c0:	b16b      	cbz	r3, 80008de <HAL_RCC_OscConfig+0x7a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80008c2:	f7ff fd25 	bl	8000310 <HAL_GetTick>
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008c6:	4d93      	ldr	r5, [pc, #588]	; (8000b14 <HAL_RCC_OscConfig+0x2b0>)
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80008c8:	4606      	mov	r6, r0
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008ca:	682b      	ldr	r3, [r5, #0]
 80008cc:	039b      	lsls	r3, r3, #14
 80008ce:	d4cf      	bmi.n	8000870 <HAL_RCC_OscConfig+0xc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80008d0:	f7ff fd1e 	bl	8000310 <HAL_GetTick>
 80008d4:	1b80      	subs	r0, r0, r6
 80008d6:	2864      	cmp	r0, #100	; 0x64
 80008d8:	d9f7      	bls.n	80008ca <HAL_RCC_OscConfig+0x66>
          {
            return HAL_TIMEOUT;
 80008da:	2003      	movs	r0, #3
 80008dc:	e141      	b.n	8000b62 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80008de:	f7ff fd17 	bl	8000310 <HAL_GetTick>

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80008e2:	4d8c      	ldr	r5, [pc, #560]	; (8000b14 <HAL_RCC_OscConfig+0x2b0>)
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80008e4:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80008e6:	682b      	ldr	r3, [r5, #0]
 80008e8:	039f      	lsls	r7, r3, #14
 80008ea:	d5c1      	bpl.n	8000870 <HAL_RCC_OscConfig+0xc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80008ec:	f7ff fd10 	bl	8000310 <HAL_GetTick>
 80008f0:	1b80      	subs	r0, r0, r6
 80008f2:	2864      	cmp	r0, #100	; 0x64
 80008f4:	d9f7      	bls.n	80008e6 <HAL_RCC_OscConfig+0x82>
 80008f6:	e7f0      	b.n	80008da <HAL_RCC_OscConfig+0x76>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80008f8:	4b86      	ldr	r3, [pc, #536]	; (8000b14 <HAL_RCC_OscConfig+0x2b0>)
 80008fa:	689a      	ldr	r2, [r3, #8]
 80008fc:	f012 0f0c 	tst.w	r2, #12
 8000900:	d010      	beq.n	8000924 <HAL_RCC_OscConfig+0xc0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8000902:	689a      	ldr	r2, [r3, #8]
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8000904:	f002 020c 	and.w	r2, r2, #12
 8000908:	2a08      	cmp	r2, #8
 800090a:	d102      	bne.n	8000912 <HAL_RCC_OscConfig+0xae>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800090c:	685b      	ldr	r3, [r3, #4]
 800090e:	0258      	lsls	r0, r3, #9
 8000910:	d508      	bpl.n	8000924 <HAL_RCC_OscConfig+0xc0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000912:	4a80      	ldr	r2, [pc, #512]	; (8000b14 <HAL_RCC_OscConfig+0x2b0>)
 8000914:	6893      	ldr	r3, [r2, #8]
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8000916:	f003 030c 	and.w	r3, r3, #12
 800091a:	2b0c      	cmp	r3, #12
 800091c:	d117      	bne.n	800094e <HAL_RCC_OscConfig+0xea>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800091e:	6853      	ldr	r3, [r2, #4]
 8000920:	0259      	lsls	r1, r3, #9
 8000922:	d414      	bmi.n	800094e <HAL_RCC_OscConfig+0xea>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000924:	4b7b      	ldr	r3, [pc, #492]	; (8000b14 <HAL_RCC_OscConfig+0x2b0>)
 8000926:	681a      	ldr	r2, [r3, #0]
 8000928:	0792      	lsls	r2, r2, #30
 800092a:	d502      	bpl.n	8000932 <HAL_RCC_OscConfig+0xce>
 800092c:	68e2      	ldr	r2, [r4, #12]
 800092e:	2a01      	cmp	r2, #1
 8000930:	d1c0      	bne.n	80008b4 <HAL_RCC_OscConfig+0x50>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000932:	681a      	ldr	r2, [r3, #0]
 8000934:	21f8      	movs	r1, #248	; 0xf8
 8000936:	fa91 f1a1 	rbit	r1, r1
 800093a:	6920      	ldr	r0, [r4, #16]
 800093c:	fab1 f181 	clz	r1, r1
 8000940:	fa00 f101 	lsl.w	r1, r0, r1
 8000944:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000948:	430a      	orrs	r2, r1
 800094a:	601a      	str	r2, [r3, #0]
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800094c:	e02e      	b.n	80009ac <HAL_RCC_OscConfig+0x148>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800094e:	68e2      	ldr	r2, [r4, #12]
 8000950:	4b72      	ldr	r3, [pc, #456]	; (8000b1c <HAL_RCC_OscConfig+0x2b8>)
 8000952:	b1ea      	cbz	r2, 8000990 <HAL_RCC_OscConfig+0x12c>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000954:	2201      	movs	r2, #1
 8000956:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000958:	f7ff fcda 	bl	8000310 <HAL_GetTick>

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800095c:	4d6d      	ldr	r5, [pc, #436]	; (8000b14 <HAL_RCC_OscConfig+0x2b0>)
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800095e:	4606      	mov	r6, r0

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000960:	682b      	ldr	r3, [r5, #0]
 8000962:	486c      	ldr	r0, [pc, #432]	; (8000b14 <HAL_RCC_OscConfig+0x2b0>)
 8000964:	079b      	lsls	r3, r3, #30
 8000966:	d405      	bmi.n	8000974 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000968:	f7ff fcd2 	bl	8000310 <HAL_GetTick>
 800096c:	1b80      	subs	r0, r0, r6
 800096e:	2802      	cmp	r0, #2
 8000970:	d9f6      	bls.n	8000960 <HAL_RCC_OscConfig+0xfc>
 8000972:	e7b2      	b.n	80008da <HAL_RCC_OscConfig+0x76>
            return HAL_TIMEOUT;
          }       
        } 
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000974:	6803      	ldr	r3, [r0, #0]
 8000976:	22f8      	movs	r2, #248	; 0xf8
 8000978:	fa92 f2a2 	rbit	r2, r2
 800097c:	6921      	ldr	r1, [r4, #16]
 800097e:	fab2 f282 	clz	r2, r2
 8000982:	fa01 f202 	lsl.w	r2, r1, r2
 8000986:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800098a:	4313      	orrs	r3, r2
 800098c:	6003      	str	r3, [r0, #0]
 800098e:	e00d      	b.n	80009ac <HAL_RCC_OscConfig+0x148>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000990:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000992:	f7ff fcbd 	bl	8000310 <HAL_GetTick>
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000996:	4d5f      	ldr	r5, [pc, #380]	; (8000b14 <HAL_RCC_OscConfig+0x2b0>)
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000998:	4606      	mov	r6, r0
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800099a:	682b      	ldr	r3, [r5, #0]
 800099c:	079f      	lsls	r7, r3, #30
 800099e:	d505      	bpl.n	80009ac <HAL_RCC_OscConfig+0x148>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80009a0:	f7ff fcb6 	bl	8000310 <HAL_GetTick>
 80009a4:	1b80      	subs	r0, r0, r6
 80009a6:	2802      	cmp	r0, #2
 80009a8:	d9f7      	bls.n	800099a <HAL_RCC_OscConfig+0x136>
 80009aa:	e796      	b.n	80008da <HAL_RCC_OscConfig+0x76>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80009ac:	6823      	ldr	r3, [r4, #0]
 80009ae:	071e      	lsls	r6, r3, #28
 80009b0:	d403      	bmi.n	80009ba <HAL_RCC_OscConfig+0x156>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80009b2:	6823      	ldr	r3, [r4, #0]
 80009b4:	075d      	lsls	r5, r3, #29
 80009b6:	d545      	bpl.n	8000a44 <HAL_RCC_OscConfig+0x1e0>
 80009b8:	e01f      	b.n	80009fa <HAL_RCC_OscConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80009ba:	6962      	ldr	r2, [r4, #20]
 80009bc:	4b58      	ldr	r3, [pc, #352]	; (8000b20 <HAL_RCC_OscConfig+0x2bc>)
 80009be:	b172      	cbz	r2, 80009de <HAL_RCC_OscConfig+0x17a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80009c0:	2201      	movs	r2, #1
 80009c2:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80009c4:	f7ff fca4 	bl	8000310 <HAL_GetTick>
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009c8:	4d52      	ldr	r5, [pc, #328]	; (8000b14 <HAL_RCC_OscConfig+0x2b0>)
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80009ca:	4606      	mov	r6, r0
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009cc:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80009ce:	0798      	lsls	r0, r3, #30
 80009d0:	d4ef      	bmi.n	80009b2 <HAL_RCC_OscConfig+0x14e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80009d2:	f7ff fc9d 	bl	8000310 <HAL_GetTick>
 80009d6:	1b80      	subs	r0, r0, r6
 80009d8:	2802      	cmp	r0, #2
 80009da:	d9f7      	bls.n	80009cc <HAL_RCC_OscConfig+0x168>
 80009dc:	e77d      	b.n	80008da <HAL_RCC_OscConfig+0x76>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80009de:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80009e0:	f7ff fc96 	bl	8000310 <HAL_GetTick>
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009e4:	4d4b      	ldr	r5, [pc, #300]	; (8000b14 <HAL_RCC_OscConfig+0x2b0>)
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80009e6:	4606      	mov	r6, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009e8:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80009ea:	0799      	lsls	r1, r3, #30
 80009ec:	d5e1      	bpl.n	80009b2 <HAL_RCC_OscConfig+0x14e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80009ee:	f7ff fc8f 	bl	8000310 <HAL_GetTick>
 80009f2:	1b80      	subs	r0, r0, r6
 80009f4:	2802      	cmp	r0, #2
 80009f6:	d9f7      	bls.n	80009e8 <HAL_RCC_OscConfig+0x184>
 80009f8:	e76f      	b.n	80008da <HAL_RCC_OscConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	9301      	str	r3, [sp, #4]
 80009fe:	4b45      	ldr	r3, [pc, #276]	; (8000b14 <HAL_RCC_OscConfig+0x2b0>)
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8000a00:	4d48      	ldr	r5, [pc, #288]	; (8000b24 <HAL_RCC_OscConfig+0x2c0>)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8000a02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a04:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000a08:	641a      	str	r2, [r3, #64]	; 0x40
 8000a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a10:	9301      	str	r3, [sp, #4]
 8000a12:	9b01      	ldr	r3, [sp, #4]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8000a14:	682b      	ldr	r3, [r5, #0]
 8000a16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a1a:	602b      	str	r3, [r5, #0]
    
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8000a1c:	f7ff fc78 	bl	8000310 <HAL_GetTick>
 8000a20:	4606      	mov	r6, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8000a22:	682b      	ldr	r3, [r5, #0]
 8000a24:	05da      	lsls	r2, r3, #23
 8000a26:	d510      	bpl.n	8000a4a <HAL_RCC_OscConfig+0x1e6>
        return HAL_TIMEOUT;
      }
    }
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a28:	4b3f      	ldr	r3, [pc, #252]	; (8000b28 <HAL_RCC_OscConfig+0x2c4>)
 8000a2a:	7a22      	ldrb	r2, [r4, #8]
 8000a2c:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000a2e:	68a3      	ldr	r3, [r4, #8]
 8000a30:	b1bb      	cbz	r3, 8000a62 <HAL_RCC_OscConfig+0x1fe>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000a32:	f7ff fc6d 	bl	8000310 <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a36:	4d37      	ldr	r5, [pc, #220]	; (8000b14 <HAL_RCC_OscConfig+0x2b0>)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000a38:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a3a:	f241 3788 	movw	r7, #5000	; 0x1388
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a3e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000a40:	079b      	lsls	r3, r3, #30
 8000a42:	d508      	bpl.n	8000a56 <HAL_RCC_OscConfig+0x1f2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000a44:	69a2      	ldr	r2, [r4, #24]
 8000a46:	b9da      	cbnz	r2, 8000a80 <HAL_RCC_OscConfig+0x21c>
 8000a48:	e062      	b.n	8000b10 <HAL_RCC_OscConfig+0x2ac>
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8000a4a:	f7ff fc61 	bl	8000310 <HAL_GetTick>
 8000a4e:	1b80      	subs	r0, r0, r6
 8000a50:	2802      	cmp	r0, #2
 8000a52:	d9e6      	bls.n	8000a22 <HAL_RCC_OscConfig+0x1be>
 8000a54:	e741      	b.n	80008da <HAL_RCC_OscConfig+0x76>
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a56:	f7ff fc5b 	bl	8000310 <HAL_GetTick>
 8000a5a:	1b80      	subs	r0, r0, r6
 8000a5c:	42b8      	cmp	r0, r7
 8000a5e:	d9ee      	bls.n	8000a3e <HAL_RCC_OscConfig+0x1da>
 8000a60:	e73b      	b.n	80008da <HAL_RCC_OscConfig+0x76>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000a62:	f7ff fc55 	bl	8000310 <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000a66:	4d2b      	ldr	r5, [pc, #172]	; (8000b14 <HAL_RCC_OscConfig+0x2b0>)
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000a68:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a6a:	f241 3788 	movw	r7, #5000	; 0x1388
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000a6e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000a70:	0798      	lsls	r0, r3, #30
 8000a72:	d5e7      	bpl.n	8000a44 <HAL_RCC_OscConfig+0x1e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a74:	f7ff fc4c 	bl	8000310 <HAL_GetTick>
 8000a78:	1b80      	subs	r0, r0, r6
 8000a7a:	42b8      	cmp	r0, r7
 8000a7c:	d9f7      	bls.n	8000a6e <HAL_RCC_OscConfig+0x20a>
 8000a7e:	e72c      	b.n	80008da <HAL_RCC_OscConfig+0x76>
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000a80:	4d24      	ldr	r5, [pc, #144]	; (8000b14 <HAL_RCC_OscConfig+0x2b0>)
 8000a82:	68ab      	ldr	r3, [r5, #8]
 8000a84:	f003 030c 	and.w	r3, r3, #12
 8000a88:	2b08      	cmp	r3, #8
 8000a8a:	f43f af13 	beq.w	80008b4 <HAL_RCC_OscConfig+0x50>
 8000a8e:	4e27      	ldr	r6, [pc, #156]	; (8000b2c <HAL_RCC_OscConfig+0x2c8>)
 8000a90:	2300      	movs	r3, #0
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000a92:	2a02      	cmp	r2, #2
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000a94:	6033      	str	r3, [r6, #0]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000a96:	d158      	bne.n	8000b4a <HAL_RCC_OscConfig+0x2e6>
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000a98:	f7ff fc3a 	bl	8000310 <HAL_GetTick>
 8000a9c:	4680      	mov	r8, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000a9e:	682b      	ldr	r3, [r5, #0]
 8000aa0:	4f1c      	ldr	r7, [pc, #112]	; (8000b14 <HAL_RCC_OscConfig+0x2b0>)
 8000aa2:	0199      	lsls	r1, r3, #6
 8000aa4:	d444      	bmi.n	8000b30 <HAL_RCC_OscConfig+0x2cc>
 8000aa6:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8000aaa:	fa92 f2a2 	rbit	r2, r2
 8000aae:	f44f 3340 	mov.w	r3, #196608	; 0x30000
            return HAL_TIMEOUT;
          }
        }        

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000ab2:	fab2 fc82 	clz	ip, r2
 8000ab6:	fa93 f3a3 	rbit	r3, r3
 8000aba:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 8000abe:	fab3 fe83 	clz	lr, r3
 8000ac2:	fa91 f1a1 	rbit	r1, r1
 8000ac6:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8000aca:	fab1 f581 	clz	r5, r1
 8000ace:	fa92 f2a2 	rbit	r2, r2
 8000ad2:	69e3      	ldr	r3, [r4, #28]
 8000ad4:	fab2 f082 	clz	r0, r2
 8000ad8:	6a22      	ldr	r2, [r4, #32]
 8000ada:	ea43 0102 	orr.w	r1, r3, r2
 8000ade:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000ae0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000ae2:	fa02 f20c 	lsl.w	r2, r2, ip
 8000ae6:	4311      	orrs	r1, r2
 8000ae8:	085a      	lsrs	r2, r3, #1
 8000aea:	3a01      	subs	r2, #1
 8000aec:	fa02 f30e 	lsl.w	r3, r2, lr
 8000af0:	430b      	orrs	r3, r1
 8000af2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000af4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000af6:	40a9      	lsls	r1, r5
 8000af8:	430b      	orrs	r3, r1
 8000afa:	4082      	lsls	r2, r0
 8000afc:	4313      	orrs	r3, r2
 8000afe:	607b      	str	r3, [r7, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000b00:	2301      	movs	r3, #1
 8000b02:	6033      	str	r3, [r6, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000b04:	f7ff fc04 	bl	8000310 <HAL_GetTick>
 8000b08:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	019a      	lsls	r2, r3, #6
 8000b0e:	d516      	bpl.n	8000b3e <HAL_RCC_OscConfig+0x2da>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8000b10:	2000      	movs	r0, #0
 8000b12:	e026      	b.n	8000b62 <HAL_RCC_OscConfig+0x2fe>
 8000b14:	40023800 	.word	0x40023800
 8000b18:	40023802 	.word	0x40023802
 8000b1c:	42470000 	.word	0x42470000
 8000b20:	42470e80 	.word	0x42470e80
 8000b24:	40007000 	.word	0x40007000
 8000b28:	40023870 	.word	0x40023870
 8000b2c:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b30:	f7ff fbee 	bl	8000310 <HAL_GetTick>
 8000b34:	ebc8 0000 	rsb	r0, r8, r0
 8000b38:	2802      	cmp	r0, #2
 8000b3a:	d9b0      	bls.n	8000a9e <HAL_RCC_OscConfig+0x23a>
 8000b3c:	e6cd      	b.n	80008da <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b3e:	f7ff fbe7 	bl	8000310 <HAL_GetTick>
 8000b42:	1b00      	subs	r0, r0, r4
 8000b44:	2802      	cmp	r0, #2
 8000b46:	d9e0      	bls.n	8000b0a <HAL_RCC_OscConfig+0x2a6>
 8000b48:	e6c7      	b.n	80008da <HAL_RCC_OscConfig+0x76>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000b4a:	f7ff fbe1 	bl	8000310 <HAL_GetTick>
 8000b4e:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000b50:	682b      	ldr	r3, [r5, #0]
 8000b52:	019b      	lsls	r3, r3, #6
 8000b54:	d5dc      	bpl.n	8000b10 <HAL_RCC_OscConfig+0x2ac>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b56:	f7ff fbdb 	bl	8000310 <HAL_GetTick>
 8000b5a:	1b00      	subs	r0, r0, r4
 8000b5c:	2802      	cmp	r0, #2
 8000b5e:	d9f7      	bls.n	8000b50 <HAL_RCC_OscConfig+0x2ec>
 8000b60:	e6bb      	b.n	80008da <HAL_RCC_OscConfig+0x76>
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8000b62:	b002      	add	sp, #8
 8000b64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000b68 <HAL_RCC_GetSysClockFreq>:
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000b68:	4930      	ldr	r1, [pc, #192]	; (8000c2c <HAL_RCC_GetSysClockFreq+0xc4>)
 8000b6a:	6888      	ldr	r0, [r1, #8]
 8000b6c:	f000 000c 	and.w	r0, r0, #12
 8000b70:	2808      	cmp	r0, #8
 8000b72:	d008      	beq.n	8000b86 <HAL_RCC_GetSysClockFreq+0x1e>
 8000b74:	280c      	cmp	r0, #12
 8000b76:	d02f      	beq.n	8000bd8 <HAL_RCC_GetSysClockFreq+0x70>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000b78:	4a2d      	ldr	r2, [pc, #180]	; (8000c30 <HAL_RCC_GetSysClockFreq+0xc8>)
 8000b7a:	4b2e      	ldr	r3, [pc, #184]	; (8000c34 <HAL_RCC_GetSysClockFreq+0xcc>)
 8000b7c:	2804      	cmp	r0, #4
 8000b7e:	bf0c      	ite	eq
 8000b80:	4618      	moveq	r0, r3
 8000b82:	4610      	movne	r0, r2
 8000b84:	4770      	bx	lr
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000b86:	6848      	ldr	r0, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000b88:	684b      	ldr	r3, [r1, #4]
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000b8a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000b8e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8000b92:	f647 72c0 	movw	r2, #32704	; 0x7fc0
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8000b96:	684b      	ldr	r3, [r1, #4]
 8000b98:	fa92 f2a2 	rbit	r2, r2
 8000b9c:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8000ba0:	fab2 f282 	clz	r2, r2
 8000ba4:	ea01 0103 	and.w	r1, r1, r3
 8000ba8:	fa21 f102 	lsr.w	r1, r1, r2
 8000bac:	bf14      	ite	ne
 8000bae:	4a21      	ldrne	r2, [pc, #132]	; (8000c34 <HAL_RCC_GetSysClockFreq+0xcc>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8000bb0:	4a1f      	ldreq	r2, [pc, #124]	; (8000c30 <HAL_RCC_GetSysClockFreq+0xc8>)
 8000bb2:	fbb2 f0f0 	udiv	r0, r2, r0
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 8000bb6:	4a1d      	ldr	r2, [pc, #116]	; (8000c2c <HAL_RCC_GetSysClockFreq+0xc4>)
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8000bb8:	fb00 f301 	mul.w	r3, r0, r1
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 8000bbc:	6852      	ldr	r2, [r2, #4]
 8000bbe:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8000bc2:	fa90 f0a0 	rbit	r0, r0
 8000bc6:	fab0 f080 	clz	r0, r0
      
      sysclockfreq = pllvco/pllp;
 8000bca:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 8000bce:	fa22 f000 	lsr.w	r0, r2, r0
 8000bd2:	3001      	adds	r0, #1
 8000bd4:	0040      	lsls	r0, r0, #1
 8000bd6:	e025      	b.n	8000c24 <HAL_RCC_GetSysClockFreq+0xbc>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000bd8:	6848      	ldr	r0, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000bda:	684b      	ldr	r3, [r1, #4]
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000bdc:	f000 003f 	and.w	r0, r0, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000be0:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8000be4:	f647 72c0 	movw	r2, #32704	; 0x7fc0
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8000be8:	684b      	ldr	r3, [r1, #4]
 8000bea:	fa92 f2a2 	rbit	r2, r2
 8000bee:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8000bf2:	fab2 f282 	clz	r2, r2
 8000bf6:	ea01 0103 	and.w	r1, r1, r3
 8000bfa:	fa21 f102 	lsr.w	r1, r1, r2
 8000bfe:	bf14      	ite	ne
 8000c00:	4a0c      	ldrne	r2, [pc, #48]	; (8000c34 <HAL_RCC_GetSysClockFreq+0xcc>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8000c02:	4a0b      	ldreq	r2, [pc, #44]	; (8000c30 <HAL_RCC_GetSysClockFreq+0xc8>)
 8000c04:	fbb2 f0f0 	udiv	r0, r2, r0
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> POSITION_VAL(RCC_PLLCFGR_PLLR));
 8000c08:	4a08      	ldr	r2, [pc, #32]	; (8000c2c <HAL_RCC_GetSysClockFreq+0xc4>)
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8000c0a:	fb00 f301 	mul.w	r3, r0, r1
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> POSITION_VAL(RCC_PLLCFGR_PLLR));
 8000c0e:	6852      	ldr	r2, [r2, #4]
 8000c10:	f04f 40e0 	mov.w	r0, #1879048192	; 0x70000000
 8000c14:	fa90 f0a0 	rbit	r0, r0
 8000c18:	fab0 f080 	clz	r0, r0
      
      sysclockfreq = pllvco/pllr;
 8000c1c:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 8000c20:	fa22 f000 	lsr.w	r0, r2, r0
 8000c24:	fbb3 f0f0 	udiv	r0, r3, r0
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	40023800 	.word	0x40023800
 8000c30:	00f42400 	.word	0x00f42400
 8000c34:	007a1200 	.word	0x007a1200

08000c38 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8000c38:	6803      	ldr	r3, [r0, #0]
 8000c3a:	68da      	ldr	r2, [r3, #12]
 8000c3c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8000c40:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000c42:	695a      	ldr	r2, [r3, #20]
 8000c44:	f022 0201 	bic.w	r2, r2, #1
 8000c48:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8000c4a:	2320      	movs	r3, #32
 8000c4c:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8000c50:	4770      	bx	lr
	...

08000c54 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000c54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8000c58:	6807      	ldr	r7, [r0, #0]
 8000c5a:	693b      	ldr	r3, [r7, #16]
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000c5c:	4604      	mov	r4, r0

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8000c5e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8000c62:	68c3      	ldr	r3, [r0, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000c64:	68a1      	ldr	r1, [r4, #8]
 8000c66:	69c0      	ldr	r0, [r0, #28]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8000c68:	4313      	orrs	r3, r2
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000c6a:	6922      	ldr	r2, [r4, #16]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8000c6c:	613b      	str	r3, [r7, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8000c6e:	68fb      	ldr	r3, [r7, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000c70:	4311      	orrs	r1, r2
 8000c72:	6962      	ldr	r2, [r4, #20]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8000c74:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000c78:	430a      	orrs	r2, r1
 8000c7a:	4302      	orrs	r2, r0

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8000c7c:	f023 030c 	bic.w	r3, r3, #12
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000c80:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8000c82:	60fb      	str	r3, [r7, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8000c84:	697b      	ldr	r3, [r7, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8000c86:	f423 7240 	bic.w	r2, r3, #768	; 0x300
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8000c8a:	69a3      	ldr	r3, [r4, #24]
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000c8c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8000c90:	ea43 0302 	orr.w	r3, r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8000c94:	617b      	str	r3, [r7, #20]
 8000c96:	4b7c      	ldr	r3, [pc, #496]	; (8000e88 <UART_SetConfig+0x234>)
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000c98:	d17c      	bne.n	8000d94 <UART_SetConfig+0x140>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8000c9a:	429f      	cmp	r7, r3
 8000c9c:	d003      	beq.n	8000ca6 <UART_SetConfig+0x52>
 8000c9e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000ca2:	429f      	cmp	r7, r3
 8000ca4:	d131      	bne.n	8000d0a <UART_SetConfig+0xb6>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8000ca6:	f7ff fdc5 	bl	8000834 <HAL_RCC_GetPCLK2Freq>
 8000caa:	6863      	ldr	r3, [r4, #4]
 8000cac:	2519      	movs	r5, #25
 8000cae:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8000cb2:	4368      	muls	r0, r5
 8000cb4:	fbb0 f8f8 	udiv	r8, r0, r8
 8000cb8:	f7ff fdbc 	bl	8000834 <HAL_RCC_GetPCLK2Freq>
 8000cbc:	6866      	ldr	r6, [r4, #4]
 8000cbe:	4368      	muls	r0, r5
 8000cc0:	0076      	lsls	r6, r6, #1
 8000cc2:	fbb0 f6f6 	udiv	r6, r0, r6
 8000cc6:	f7ff fdb5 	bl	8000834 <HAL_RCC_GetPCLK2Freq>
 8000cca:	6863      	ldr	r3, [r4, #4]
 8000ccc:	f04f 0964 	mov.w	r9, #100	; 0x64
 8000cd0:	005b      	lsls	r3, r3, #1
 8000cd2:	4368      	muls	r0, r5
 8000cd4:	fbb0 f0f3 	udiv	r0, r0, r3
 8000cd8:	fbb0 f0f9 	udiv	r0, r0, r9
 8000cdc:	fb09 6610 	mls	r6, r9, r0, r6
 8000ce0:	f7ff fda8 	bl	8000834 <HAL_RCC_GetPCLK2Freq>
 8000ce4:	fbb8 f8f9 	udiv	r8, r8, r9
 8000ce8:	6861      	ldr	r1, [r4, #4]
 8000cea:	00f6      	lsls	r6, r6, #3
 8000cec:	3632      	adds	r6, #50	; 0x32
 8000cee:	fbb6 f6f9 	udiv	r6, r6, r9
 8000cf2:	0076      	lsls	r6, r6, #1
 8000cf4:	4368      	muls	r0, r5
 8000cf6:	0049      	lsls	r1, r1, #1
 8000cf8:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8000cfc:	f406 76f8 	and.w	r6, r6, #496	; 0x1f0
 8000d00:	fbb0 faf1 	udiv	sl, r0, r1
 8000d04:	f7ff fd96 	bl	8000834 <HAL_RCC_GetPCLK2Freq>
 8000d08:	e030      	b.n	8000d6c <UART_SetConfig+0x118>
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8000d0a:	f7ff fd7b 	bl	8000804 <HAL_RCC_GetPCLK1Freq>
 8000d0e:	6863      	ldr	r3, [r4, #4]
 8000d10:	2519      	movs	r5, #25
 8000d12:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8000d16:	4368      	muls	r0, r5
 8000d18:	fbb0 f8f8 	udiv	r8, r0, r8
 8000d1c:	f7ff fd72 	bl	8000804 <HAL_RCC_GetPCLK1Freq>
 8000d20:	6866      	ldr	r6, [r4, #4]
 8000d22:	4368      	muls	r0, r5
 8000d24:	0076      	lsls	r6, r6, #1
 8000d26:	fbb0 f6f6 	udiv	r6, r0, r6
 8000d2a:	f7ff fd6b 	bl	8000804 <HAL_RCC_GetPCLK1Freq>
 8000d2e:	6863      	ldr	r3, [r4, #4]
 8000d30:	f04f 0964 	mov.w	r9, #100	; 0x64
 8000d34:	005b      	lsls	r3, r3, #1
 8000d36:	4368      	muls	r0, r5
 8000d38:	fbb0 f0f3 	udiv	r0, r0, r3
 8000d3c:	fbb0 f0f9 	udiv	r0, r0, r9
 8000d40:	fb09 6610 	mls	r6, r9, r0, r6
 8000d44:	f7ff fd5e 	bl	8000804 <HAL_RCC_GetPCLK1Freq>
 8000d48:	fbb8 f8f9 	udiv	r8, r8, r9
 8000d4c:	00f6      	lsls	r6, r6, #3
 8000d4e:	6861      	ldr	r1, [r4, #4]
 8000d50:	3632      	adds	r6, #50	; 0x32
 8000d52:	fbb6 f6f9 	udiv	r6, r6, r9
 8000d56:	0076      	lsls	r6, r6, #1
 8000d58:	4368      	muls	r0, r5
 8000d5a:	0049      	lsls	r1, r1, #1
 8000d5c:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8000d60:	f406 76f8 	and.w	r6, r6, #496	; 0x1f0
 8000d64:	fbb0 faf1 	udiv	sl, r0, r1
 8000d68:	f7ff fd4c 	bl	8000804 <HAL_RCC_GetPCLK1Freq>
 8000d6c:	4345      	muls	r5, r0
 8000d6e:	6860      	ldr	r0, [r4, #4]
 8000d70:	0040      	lsls	r0, r0, #1
 8000d72:	fbb5 f0f0 	udiv	r0, r5, r0
 8000d76:	fbb0 f0f9 	udiv	r0, r0, r9
 8000d7a:	fb09 a210 	mls	r2, r9, r0, sl
 8000d7e:	00d2      	lsls	r2, r2, #3
 8000d80:	3232      	adds	r2, #50	; 0x32
 8000d82:	fbb2 f3f9 	udiv	r3, r2, r9
 8000d86:	f003 0307 	and.w	r3, r3, #7
 8000d8a:	4443      	add	r3, r8
 8000d8c:	441e      	add	r6, r3
 8000d8e:	60be      	str	r6, [r7, #8]
 8000d90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    }
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8000d94:	429f      	cmp	r7, r3
 8000d96:	d002      	beq.n	8000d9e <UART_SetConfig+0x14a>
 8000d98:	4b3c      	ldr	r3, [pc, #240]	; (8000e8c <UART_SetConfig+0x238>)
 8000d9a:	429f      	cmp	r7, r3
 8000d9c:	d130      	bne.n	8000e00 <UART_SetConfig+0x1ac>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8000d9e:	f7ff fd49 	bl	8000834 <HAL_RCC_GetPCLK2Freq>
 8000da2:	6863      	ldr	r3, [r4, #4]
 8000da4:	2519      	movs	r5, #25
 8000da6:	ea4f 0883 	mov.w	r8, r3, lsl #2
 8000daa:	4368      	muls	r0, r5
 8000dac:	fbb0 f8f8 	udiv	r8, r0, r8
 8000db0:	f7ff fd40 	bl	8000834 <HAL_RCC_GetPCLK2Freq>
 8000db4:	6866      	ldr	r6, [r4, #4]
 8000db6:	4368      	muls	r0, r5
 8000db8:	00b6      	lsls	r6, r6, #2
 8000dba:	fbb0 f6f6 	udiv	r6, r0, r6
 8000dbe:	f7ff fd39 	bl	8000834 <HAL_RCC_GetPCLK2Freq>
 8000dc2:	6863      	ldr	r3, [r4, #4]
 8000dc4:	f04f 0964 	mov.w	r9, #100	; 0x64
 8000dc8:	009b      	lsls	r3, r3, #2
 8000dca:	4368      	muls	r0, r5
 8000dcc:	fbb0 f0f3 	udiv	r0, r0, r3
 8000dd0:	fbb0 f0f9 	udiv	r0, r0, r9
 8000dd4:	fb09 6610 	mls	r6, r9, r0, r6
 8000dd8:	f7ff fd2c 	bl	8000834 <HAL_RCC_GetPCLK2Freq>
 8000ddc:	fbb8 f8f9 	udiv	r8, r8, r9
 8000de0:	6861      	ldr	r1, [r4, #4]
 8000de2:	0136      	lsls	r6, r6, #4
 8000de4:	4368      	muls	r0, r5
 8000de6:	0089      	lsls	r1, r1, #2
 8000de8:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8000dec:	3632      	adds	r6, #50	; 0x32
 8000dee:	fbb0 faf1 	udiv	sl, r0, r1
 8000df2:	fbb6 f6f9 	udiv	r6, r6, r9
 8000df6:	f006 06f0 	and.w	r6, r6, #240	; 0xf0
 8000dfa:	f7ff fd1b 	bl	8000834 <HAL_RCC_GetPCLK2Freq>
 8000dfe:	e02f      	b.n	8000e60 <UART_SetConfig+0x20c>
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8000e00:	f7ff fd00 	bl	8000804 <HAL_RCC_GetPCLK1Freq>
 8000e04:	6863      	ldr	r3, [r4, #4]
 8000e06:	2519      	movs	r5, #25
 8000e08:	ea4f 0883 	mov.w	r8, r3, lsl #2
 8000e0c:	4368      	muls	r0, r5
 8000e0e:	fbb0 f8f8 	udiv	r8, r0, r8
 8000e12:	f7ff fcf7 	bl	8000804 <HAL_RCC_GetPCLK1Freq>
 8000e16:	6866      	ldr	r6, [r4, #4]
 8000e18:	4368      	muls	r0, r5
 8000e1a:	00b6      	lsls	r6, r6, #2
 8000e1c:	fbb0 f6f6 	udiv	r6, r0, r6
 8000e20:	f7ff fcf0 	bl	8000804 <HAL_RCC_GetPCLK1Freq>
 8000e24:	6863      	ldr	r3, [r4, #4]
 8000e26:	f04f 0964 	mov.w	r9, #100	; 0x64
 8000e2a:	009b      	lsls	r3, r3, #2
 8000e2c:	4368      	muls	r0, r5
 8000e2e:	fbb0 f0f3 	udiv	r0, r0, r3
 8000e32:	fbb0 f0f9 	udiv	r0, r0, r9
 8000e36:	fb09 6610 	mls	r6, r9, r0, r6
 8000e3a:	f7ff fce3 	bl	8000804 <HAL_RCC_GetPCLK1Freq>
 8000e3e:	fbb8 f8f9 	udiv	r8, r8, r9
 8000e42:	6861      	ldr	r1, [r4, #4]
 8000e44:	0136      	lsls	r6, r6, #4
 8000e46:	3632      	adds	r6, #50	; 0x32
 8000e48:	4368      	muls	r0, r5
 8000e4a:	fbb6 f6f9 	udiv	r6, r6, r9
 8000e4e:	0089      	lsls	r1, r1, #2
 8000e50:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8000e54:	f006 06f0 	and.w	r6, r6, #240	; 0xf0
 8000e58:	fbb0 faf1 	udiv	sl, r0, r1
 8000e5c:	f7ff fcd2 	bl	8000804 <HAL_RCC_GetPCLK1Freq>
 8000e60:	4345      	muls	r5, r0
 8000e62:	6860      	ldr	r0, [r4, #4]
 8000e64:	0080      	lsls	r0, r0, #2
 8000e66:	fbb5 f0f0 	udiv	r0, r5, r0
 8000e6a:	fbb0 f0f9 	udiv	r0, r0, r9
 8000e6e:	fb09 a210 	mls	r2, r9, r0, sl
 8000e72:	0112      	lsls	r2, r2, #4
 8000e74:	3232      	adds	r2, #50	; 0x32
 8000e76:	fbb2 f3f9 	udiv	r3, r2, r9
 8000e7a:	f003 030f 	and.w	r3, r3, #15
 8000e7e:	4433      	add	r3, r6
 8000e80:	4443      	add	r3, r8
 8000e82:	60bb      	str	r3, [r7, #8]
 8000e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e88:	40011000 	.word	0x40011000
 8000e8c:	40011400 	.word	0x40011400

08000e90 <UART_WaitOnFlagUntilTimeout.constprop.3>:
  * @param  Status: The new Flag status (SET or RESET).
  * @param  Tickstart Tick start value
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8000e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e92:	4604      	mov	r4, r0
 8000e94:	460e      	mov	r6, r1
 8000e96:	4617      	mov	r7, r2
 8000e98:	461d      	mov	r5, r3
{
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8000e9a:	6821      	ldr	r1, [r4, #0]
 8000e9c:	680b      	ldr	r3, [r1, #0]
 8000e9e:	ea36 0303 	bics.w	r3, r6, r3
 8000ea2:	d01b      	beq.n	8000edc <UART_WaitOnFlagUntilTimeout.constprop.3+0x4c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8000ea4:	1c6b      	adds	r3, r5, #1
 8000ea6:	d0f9      	beq.n	8000e9c <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000ea8:	b995      	cbnz	r5, 8000ed0 <UART_WaitOnFlagUntilTimeout.constprop.3+0x40>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000eaa:	6823      	ldr	r3, [r4, #0]
 8000eac:	68da      	ldr	r2, [r3, #12]
 8000eae:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8000eb2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000eb4:	695a      	ldr	r2, [r3, #20]
 8000eb6:	f022 0201 	bic.w	r2, r2, #1
 8000eba:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 8000ebc:	2320      	movs	r3, #32
 8000ebe:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8000ec2:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8000ecc:	2003      	movs	r0, #3
 8000ece:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000ed0:	f7ff fa1e 	bl	8000310 <HAL_GetTick>
 8000ed4:	1bc0      	subs	r0, r0, r7
 8000ed6:	4285      	cmp	r5, r0
 8000ed8:	d2df      	bcs.n	8000e9a <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8000eda:	e7e6      	b.n	8000eaa <UART_WaitOnFlagUntilTimeout.constprop.3+0x1a>
        return HAL_TIMEOUT;
      }
    }
  }
  
  return HAL_OK;
 8000edc:	2000      	movs	r0, #0
}
 8000ede:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000ee0 <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8000ee0:	b510      	push	{r4, lr}
  /* Check the UART handle allocation */
  if(huart == NULL)
 8000ee2:	4604      	mov	r4, r0
 8000ee4:	b340      	cbz	r0, 8000f38 <HAL_UART_Init+0x58>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8000ee6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000eea:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000eee:	b91b      	cbnz	r3, 8000ef8 <HAL_UART_Init+0x18>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8000ef0:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8000ef4:	f000 fae0 	bl	80014b8 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8000ef8:	6822      	ldr	r2, [r4, #0]
    huart->Lock = HAL_UNLOCKED;
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8000efa:	2324      	movs	r3, #36	; 0x24
 8000efc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8000f00:	68d3      	ldr	r3, [r2, #12]
 8000f02:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000f06:	60d3      	str	r3, [r2, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8000f08:	4620      	mov	r0, r4
 8000f0a:	f7ff fea3 	bl	8000c54 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000f0e:	6823      	ldr	r3, [r4, #0]
 8000f10:	691a      	ldr	r2, [r3, #16]
 8000f12:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8000f16:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000f18:	695a      	ldr	r2, [r3, #20]
 8000f1a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8000f1e:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8000f20:	68da      	ldr	r2, [r3, #12]
 8000f22:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000f26:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000f28:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8000f2a:	2320      	movs	r3, #32
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000f2c:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8000f2e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8000f32:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  
  return HAL_OK;
 8000f36:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if(huart == NULL)
  {
    return HAL_ERROR;
 8000f38:	2001      	movs	r0, #1
  huart->ErrorCode = HAL_UART_ERROR_NONE;
  huart->gState= HAL_UART_STATE_READY;
  huart->RxState= HAL_UART_STATE_READY;
  
  return HAL_OK;
}
 8000f3a:	bd10      	pop	{r4, pc}

08000f3c <HAL_UART_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000f3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f40:	461f      	mov	r7, r3
  uint16_t* tmp;
  uint32_t tickstart = 0U;
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY) 
 8000f42:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000f46:	2b20      	cmp	r3, #32
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000f48:	4604      	mov	r4, r0
 8000f4a:	460d      	mov	r5, r1
 8000f4c:	4690      	mov	r8, r2
  uint16_t* tmp;
  uint32_t tickstart = 0U;
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY) 
 8000f4e:	d14d      	bne.n	8000fec <HAL_UART_Transmit+0xb0>
  {
    if((pData == NULL ) || (Size == 0U)) 
 8000f50:	2900      	cmp	r1, #0
 8000f52:	d048      	beq.n	8000fe6 <HAL_UART_Transmit+0xaa>
 8000f54:	2a00      	cmp	r2, #0
 8000f56:	d046      	beq.n	8000fe6 <HAL_UART_Transmit+0xaa>
    {
      return  HAL_ERROR;
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 8000f58:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8000f5c:	2b01      	cmp	r3, #1
 8000f5e:	d045      	beq.n	8000fec <HAL_UART_Transmit+0xb0>
 8000f60:	2301      	movs	r3, #1
 8000f62:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000f66:	2300      	movs	r3, #0
 8000f68:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8000f6a:	2321      	movs	r3, #33	; 0x21
 8000f6c:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
	
    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8000f70:	f7ff f9ce 	bl	8000310 <HAL_GetTick>

    huart->TxXferSize = Size;
 8000f74:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->gState = HAL_UART_STATE_BUSY_TX;
	
    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8000f78:	4606      	mov	r6, r0

    huart->TxXferSize = Size;
    huart->TxXferCount = Size;
 8000f7a:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8000f7e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8000f80:	b313      	cbz	r3, 8000fc8 <HAL_UART_Transmit+0x8c>
    {
      huart->TxXferCount--;
 8000f82:	3b01      	subs	r3, #1
 8000f84:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000f86:	68a3      	ldr	r3, [r4, #8]
 8000f88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000f8c:	4632      	mov	r2, r6
 8000f8e:	463b      	mov	r3, r7
 8000f90:	f04f 0180 	mov.w	r1, #128	; 0x80
 8000f94:	4620      	mov	r0, r4
    huart->TxXferSize = Size;
    huart->TxXferCount = Size;
    while(huart->TxXferCount > 0U)
    {
      huart->TxXferCount--;
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000f96:	d10e      	bne.n	8000fb6 <HAL_UART_Transmit+0x7a>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000f98:	f7ff ff7a 	bl	8000e90 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8000f9c:	b110      	cbz	r0, 8000fa4 <HAL_UART_Transmit+0x68>
        { 
          return HAL_TIMEOUT;
 8000f9e:	2003      	movs	r0, #3
 8000fa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }
        tmp = (uint16_t*) pData;
        huart->Instance->DR = (*tmp & (uint16_t)0x01FFU);
 8000fa4:	882b      	ldrh	r3, [r5, #0]
 8000fa6:	6822      	ldr	r2, [r4, #0]
 8000fa8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000fac:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8000fae:	6923      	ldr	r3, [r4, #16]
 8000fb0:	b943      	cbnz	r3, 8000fc4 <HAL_UART_Transmit+0x88>
        {
          pData +=2U;
 8000fb2:	3502      	adds	r5, #2
 8000fb4:	e7e3      	b.n	8000f7e <HAL_UART_Transmit+0x42>
          pData +=1U;
        }
      } 
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000fb6:	f7ff ff6b 	bl	8000e90 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8000fba:	2800      	cmp	r0, #0
 8000fbc:	d1ef      	bne.n	8000f9e <HAL_UART_Transmit+0x62>
        {
          return HAL_TIMEOUT;
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFFU);
 8000fbe:	6823      	ldr	r3, [r4, #0]
 8000fc0:	782a      	ldrb	r2, [r5, #0]
 8000fc2:	605a      	str	r2, [r3, #4]
 8000fc4:	3501      	adds	r5, #1
 8000fc6:	e7da      	b.n	8000f7e <HAL_UART_Transmit+0x42>
      } 
    }
    
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8000fc8:	463b      	mov	r3, r7
 8000fca:	4632      	mov	r2, r6
 8000fcc:	2140      	movs	r1, #64	; 0x40
 8000fce:	4620      	mov	r0, r4
 8000fd0:	f7ff ff5e 	bl	8000e90 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8000fd4:	2800      	cmp	r0, #0
 8000fd6:	d1e2      	bne.n	8000f9e <HAL_UART_Transmit+0x62>
    { 
      return HAL_TIMEOUT;
    }
    
    /* At end of Tx process, restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 8000fd8:	2320      	movs	r3, #32
 8000fda:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8000fde:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    
    return HAL_OK;
 8000fe2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY) 
  {
    if((pData == NULL ) || (Size == 0U)) 
    {
      return  HAL_ERROR;
 8000fe6:	2001      	movs	r0, #1
 8000fe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8000fec:	2002      	movs	r0, #2
  }
}
 8000fee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000ff2 <HAL_UART_Receive_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
  /* Check that a Rx process is not already ongoing */ 
  if(huart->RxState == HAL_UART_STATE_READY)
 8000ff2:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8000ff6:	2b20      	cmp	r3, #32
 8000ff8:	d11c      	bne.n	8001034 <HAL_UART_Receive_IT+0x42>
  {
    if((pData == NULL ) || (Size == 0U)) 
 8000ffa:	b1c9      	cbz	r1, 8001030 <HAL_UART_Receive_IT+0x3e>
 8000ffc:	b1c2      	cbz	r2, 8001030 <HAL_UART_Receive_IT+0x3e>
    {
      return HAL_ERROR;
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 8000ffe:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001002:	2b01      	cmp	r3, #1
 8001004:	d016      	beq.n	8001034 <HAL_UART_Receive_IT+0x42>
    
    huart->pRxBuffPtr = pData;
    huart->RxXferSize = Size;
 8001006:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001008:	85c2      	strh	r2, [r0, #46]	; 0x2e
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800100a:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800100c:	2222      	movs	r2, #34	; 0x22
    
    huart->pRxBuffPtr = pData;
    huart->RxXferSize = Size;
    huart->RxXferCount = Size;
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800100e:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001010:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001014:	6802      	ldr	r2, [r0, #0]
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
    
    huart->pRxBuffPtr = pData;
 8001016:	6281      	str	r1, [r0, #40]	; 0x28
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001018:	6951      	ldr	r1, [r2, #20]
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->RxState = HAL_UART_STATE_BUSY_RX;
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800101a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800101e:	f041 0101 	orr.w	r1, r1, #1
 8001022:	6151      	str	r1, [r2, #20]

    /* Enable the UART Parity Error and Data Register not empty Interrupts */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8001024:	68d1      	ldr	r1, [r2, #12]
 8001026:	f441 7190 	orr.w	r1, r1, #288	; 0x120
 800102a:	60d1      	str	r1, [r2, #12]
    
    return HAL_OK;
 800102c:	4618      	mov	r0, r3
 800102e:	4770      	bx	lr
  /* Check that a Rx process is not already ongoing */ 
  if(huart->RxState == HAL_UART_STATE_READY)
  {
    if((pData == NULL ) || (Size == 0U)) 
    {
      return HAL_ERROR;
 8001030:	2001      	movs	r0, #1
 8001032:	4770      	bx	lr
    
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY; 
 8001034:	2002      	movs	r0, #2
  }
}
 8001036:	4770      	bx	lr

08001038 <HAL_UART_TxCpltCallback>:
 8001038:	4770      	bx	lr

0800103a <UART_Receive_IT>:
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 800103a:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 800103e:	2b22      	cmp	r3, #34	; 0x22
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8001040:	b510      	push	{r4, lr}
  uint16_t* tmp;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8001042:	d132      	bne.n	80010aa <UART_Receive_IT+0x70>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001044:	6883      	ldr	r3, [r0, #8]
 8001046:	6901      	ldr	r1, [r0, #16]
 8001048:	6802      	ldr	r2, [r0, #0]
 800104a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800104e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001050:	d10b      	bne.n	800106a <UART_Receive_IT+0x30>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
      if(huart->Init.Parity == UART_PARITY_NONE)
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FFU);
 8001052:	6852      	ldr	r2, [r2, #4]
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001054:	b921      	cbnz	r1, 8001060 <UART_Receive_IT+0x26>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FFU);
 8001056:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800105a:	f823 2b02 	strh.w	r2, [r3], #2
 800105e:	e002      	b.n	8001066 <UART_Receive_IT+0x2c>
        huart->pRxBuffPtr += 2U;
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FFU);
 8001060:	b2d2      	uxtb	r2, r2
 8001062:	f823 2b01 	strh.w	r2, [r3], #1
        huart->pRxBuffPtr += 1U;
 8001066:	6283      	str	r3, [r0, #40]	; 0x28
 8001068:	e00a      	b.n	8001080 <UART_Receive_IT+0x46>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 800106a:	b919      	cbnz	r1, 8001074 <UART_Receive_IT+0x3a>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FFU);
 800106c:	1c59      	adds	r1, r3, #1
 800106e:	6281      	str	r1, [r0, #40]	; 0x28
 8001070:	6852      	ldr	r2, [r2, #4]
 8001072:	e004      	b.n	800107e <UART_Receive_IT+0x44>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007FU);
 8001074:	6852      	ldr	r2, [r2, #4]
 8001076:	1c59      	adds	r1, r3, #1
 8001078:	6281      	str	r1, [r0, #40]	; 0x28
 800107a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800107e:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0U)
 8001080:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8001082:	3c01      	subs	r4, #1
 8001084:	b2a4      	uxth	r4, r4
 8001086:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8001088:	b98c      	cbnz	r4, 80010ae <UART_Receive_IT+0x74>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800108a:	6803      	ldr	r3, [r0, #0]
 800108c:	68da      	ldr	r2, [r3, #12]
 800108e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001092:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001094:	695a      	ldr	r2, [r3, #20]
 8001096:	f022 0201 	bic.w	r2, r2, #1
 800109a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800109c:	2320      	movs	r3, #32
 800109e:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
     
      HAL_UART_RxCpltCallback(huart);
 80010a2:	f000 f8af 	bl	8001204 <HAL_UART_RxCpltCallback>
 80010a6:	4620      	mov	r0, r4
 80010a8:	bd10      	pop	{r4, pc}
    }
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80010aa:	2002      	movs	r0, #2
 80010ac:	bd10      	pop	{r4, pc}
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007FU);
      }
    }

    if(--huart->RxXferCount == 0U)
 80010ae:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 80010b0:	bd10      	pop	{r4, pc}

080010b2 <HAL_UART_ErrorCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80010b2:	4770      	bx	lr

080010b4 <HAL_UART_IRQHandler>:
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80010b4:	6803      	ldr	r3, [r0, #0]
 80010b6:	681a      	ldr	r2, [r3, #0]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80010b8:	68d9      	ldr	r1, [r3, #12]
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80010ba:	b570      	push	{r4, r5, r6, lr}
   uint32_t errorflags = 0x00U;
   uint32_t dmarequest = 0x00U;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
  if(errorflags == RESET)
 80010bc:	0716      	lsls	r6, r2, #28
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80010be:	4604      	mov	r4, r0
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80010c0:	695d      	ldr	r5, [r3, #20]
   uint32_t errorflags = 0x00U;
   uint32_t dmarequest = 0x00U;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
  if(errorflags == RESET)
 80010c2:	d107      	bne.n	80010d4 <HAL_UART_IRQHandler+0x20>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80010c4:	0696      	lsls	r6, r2, #26
 80010c6:	d55a      	bpl.n	800117e <HAL_UART_IRQHandler+0xca>
 80010c8:	068d      	lsls	r5, r1, #26
 80010ca:	d558      	bpl.n	800117e <HAL_UART_IRQHandler+0xca>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
  {
    UART_EndTransmit_IT(huart);
    return;
  }
}
 80010cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  if(errorflags == RESET)
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
    {
      UART_Receive_IT(huart);
 80010d0:	f7ff bfb3 	b.w	800103a <UART_Receive_IT>
      return;
    }
  }

  /* If some errors occur */
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80010d4:	f015 0001 	ands.w	r0, r5, #1
 80010d8:	d102      	bne.n	80010e0 <HAL_UART_IRQHandler+0x2c>
 80010da:	f411 7f90 	tst.w	r1, #288	; 0x120
 80010de:	d04e      	beq.n	800117e <HAL_UART_IRQHandler+0xca>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80010e0:	07d3      	lsls	r3, r2, #31
 80010e2:	d505      	bpl.n	80010f0 <HAL_UART_IRQHandler+0x3c>
 80010e4:	05ce      	lsls	r6, r1, #23
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80010e6:	bf42      	ittt	mi
 80010e8:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 80010ea:	f043 0301 	orrmi.w	r3, r3, #1
 80010ee:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    }
    
    /* UART noise error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80010f0:	0755      	lsls	r5, r2, #29
 80010f2:	d504      	bpl.n	80010fe <HAL_UART_IRQHandler+0x4a>
 80010f4:	b118      	cbz	r0, 80010fe <HAL_UART_IRQHandler+0x4a>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80010f6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80010f8:	f043 0302 	orr.w	r3, r3, #2
 80010fc:	63e3      	str	r3, [r4, #60]	; 0x3c
    }
    
    /* UART frame error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80010fe:	0793      	lsls	r3, r2, #30
 8001100:	d504      	bpl.n	800110c <HAL_UART_IRQHandler+0x58>
 8001102:	b118      	cbz	r0, 800110c <HAL_UART_IRQHandler+0x58>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001104:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001106:	f043 0304 	orr.w	r3, r3, #4
 800110a:	63e3      	str	r3, [r4, #60]	; 0x3c
    }
    
    /* UART Over-Run interrupt occurred --------------------------------------*/
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800110c:	0716      	lsls	r6, r2, #28
 800110e:	d504      	bpl.n	800111a <HAL_UART_IRQHandler+0x66>
 8001110:	b118      	cbz	r0, 800111a <HAL_UART_IRQHandler+0x66>
    { 
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001112:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001114:	f043 0308 	orr.w	r3, r3, #8
 8001118:	63e3      	str	r3, [r4, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/    
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 800111a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800111c:	2b00      	cmp	r3, #0
 800111e:	d066      	beq.n	80011ee <HAL_UART_IRQHandler+0x13a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001120:	0695      	lsls	r5, r2, #26
 8001122:	d504      	bpl.n	800112e <HAL_UART_IRQHandler+0x7a>
 8001124:	0688      	lsls	r0, r1, #26
 8001126:	d502      	bpl.n	800112e <HAL_UART_IRQHandler+0x7a>
      {
        UART_Receive_IT(huart);
 8001128:	4620      	mov	r0, r4
 800112a:	f7ff ff86 	bl	800103a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800112e:	6823      	ldr	r3, [r4, #0]
 8001130:	695b      	ldr	r3, [r3, #20]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001132:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001134:	0711      	lsls	r1, r2, #28
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001136:	4620      	mov	r0, r4
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001138:	d402      	bmi.n	8001140 <HAL_UART_IRQHandler+0x8c>
 800113a:	f013 0540 	ands.w	r5, r3, #64	; 0x40
 800113e:	d01a      	beq.n	8001176 <HAL_UART_IRQHandler+0xc2>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001140:	f7ff fd7a 	bl	8000c38 <UART_EndRxTransfer>
        
        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001144:	6823      	ldr	r3, [r4, #0]
 8001146:	695a      	ldr	r2, [r3, #20]
 8001148:	0652      	lsls	r2, r2, #25
 800114a:	d510      	bpl.n	800116e <HAL_UART_IRQHandler+0xba>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800114c:	695a      	ldr	r2, [r3, #20]
          
          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 800114e:	6b60      	ldr	r0, [r4, #52]	; 0x34
        UART_EndRxTransfer(huart);
        
        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001150:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001154:	615a      	str	r2, [r3, #20]
          
          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 8001156:	b150      	cbz	r0, 800116e <HAL_UART_IRQHandler+0xba>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001158:	4b25      	ldr	r3, [pc, #148]	; (80011f0 <HAL_UART_IRQHandler+0x13c>)
 800115a:	6503      	str	r3, [r0, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800115c:	f7ff f957 	bl	800040e <HAL_DMA_Abort_IT>
 8001160:	2800      	cmp	r0, #0
 8001162:	d044      	beq.n	80011ee <HAL_UART_IRQHandler+0x13a>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001164:	6b60      	ldr	r0, [r4, #52]	; 0x34
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
  {
    UART_EndTransmit_IT(huart);
    return;
  }
}
 8001166:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800116a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800116c:	4718      	bx	r3
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 800116e:	4620      	mov	r0, r4
 8001170:	f7ff ff9f 	bl	80010b2 <HAL_UART_ErrorCallback>
 8001174:	bd70      	pop	{r4, r5, r6, pc}
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 8001176:	f7ff ff9c 	bl	80010b2 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800117a:	63e5      	str	r5, [r4, #60]	; 0x3c
 800117c:	bd70      	pop	{r4, r5, r6, pc}
    }
    return;
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800117e:	0616      	lsls	r6, r2, #24
 8001180:	d527      	bpl.n	80011d2 <HAL_UART_IRQHandler+0x11e>
 8001182:	060d      	lsls	r5, r1, #24
 8001184:	d525      	bpl.n	80011d2 <HAL_UART_IRQHandler+0x11e>
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8001186:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 800118a:	2a21      	cmp	r2, #33	; 0x21
 800118c:	d12f      	bne.n	80011ee <HAL_UART_IRQHandler+0x13a>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800118e:	68a2      	ldr	r2, [r4, #8]
 8001190:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001194:	6a22      	ldr	r2, [r4, #32]
 8001196:	d10a      	bne.n	80011ae <HAL_UART_IRQHandler+0xfa>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FFU);
 8001198:	8811      	ldrh	r1, [r2, #0]
 800119a:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800119e:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 80011a0:	6921      	ldr	r1, [r4, #16]
 80011a2:	b909      	cbnz	r1, 80011a8 <HAL_UART_IRQHandler+0xf4>
      {
        huart->pTxBuffPtr += 2U;
 80011a4:	3202      	adds	r2, #2
 80011a6:	e000      	b.n	80011aa <HAL_UART_IRQHandler+0xf6>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80011a8:	3201      	adds	r2, #1
 80011aa:	6222      	str	r2, [r4, #32]
 80011ac:	e003      	b.n	80011b6 <HAL_UART_IRQHandler+0x102>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FFU);
 80011ae:	1c51      	adds	r1, r2, #1
 80011b0:	6221      	str	r1, [r4, #32]
 80011b2:	7812      	ldrb	r2, [r2, #0]
 80011b4:	605a      	str	r2, [r3, #4]
    }

    if(--huart->TxXferCount == 0U)
 80011b6:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80011b8:	3a01      	subs	r2, #1
 80011ba:	b292      	uxth	r2, r2
 80011bc:	84e2      	strh	r2, [r4, #38]	; 0x26
 80011be:	b9b2      	cbnz	r2, 80011ee <HAL_UART_IRQHandler+0x13a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80011c0:	68da      	ldr	r2, [r3, #12]
 80011c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80011c6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80011c8:	68da      	ldr	r2, [r3, #12]
 80011ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80011ce:	60da      	str	r2, [r3, #12]
 80011d0:	bd70      	pop	{r4, r5, r6, pc}
    UART_Transmit_IT(huart);
    return;
  }
  
  /* UART in mode Transmitter end --------------------------------------------*/
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80011d2:	0650      	lsls	r0, r2, #25
 80011d4:	d50b      	bpl.n	80011ee <HAL_UART_IRQHandler+0x13a>
 80011d6:	064a      	lsls	r2, r1, #25
 80011d8:	d509      	bpl.n	80011ee <HAL_UART_IRQHandler+0x13a>
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */    
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80011da:	68da      	ldr	r2, [r3, #12]
 80011dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80011e0:	60da      	str	r2, [r3, #12]
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80011e2:	2320      	movs	r3, #32
 80011e4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    
  HAL_UART_TxCpltCallback(huart);
 80011e8:	4620      	mov	r0, r4
 80011ea:	f7ff ff25 	bl	8001038 <HAL_UART_TxCpltCallback>
 80011ee:	bd70      	pop	{r4, r5, r6, pc}
 80011f0:	080011f5 	.word	0x080011f5

080011f4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80011f4:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80011f6:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0;
 80011f8:	2300      	movs	r3, #0
 80011fa:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0;
 80011fc:	84c3      	strh	r3, [r0, #38]	; 0x26

  HAL_UART_ErrorCallback(huart);
 80011fe:	f7ff ff58 	bl	80010b2 <HAL_UART_ErrorCallback>
 8001202:	bd08      	pop	{r3, pc}

08001204 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
	if(huart->Instance==USART2){
 8001204:	6802      	ldr	r2, [r0, #0]
 8001206:	4b16      	ldr	r3, [pc, #88]	; (8001260 <HAL_UART_RxCpltCallback+0x5c>)
 8001208:	429a      	cmp	r2, r3

/* USER CODE END PFP */

/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800120a:	b510      	push	{r4, lr}
 800120c:	4604      	mov	r4, r0
	if(huart->Instance==USART2){
 800120e:	d10f      	bne.n	8001230 <HAL_UART_RxCpltCallback+0x2c>
		HAL_UART_Receive_IT(&huart2,(uint8_t *)&Rx_Data2, 1);
 8001210:	2201      	movs	r2, #1
 8001212:	4914      	ldr	r1, [pc, #80]	; (8001264 <HAL_UART_RxCpltCallback+0x60>)
 8001214:	4814      	ldr	r0, [pc, #80]	; (8001268 <HAL_UART_RxCpltCallback+0x64>)
 8001216:	f7ff feec 	bl	8000ff2 <HAL_UART_Receive_IT>
		HAL_UART_Transmit(&huart2,(uint8_t *)&Rx_Data2, 1,1000);
 800121a:	4912      	ldr	r1, [pc, #72]	; (8001264 <HAL_UART_RxCpltCallback+0x60>)
 800121c:	4812      	ldr	r0, [pc, #72]	; (8001268 <HAL_UART_RxCpltCallback+0x64>)
 800121e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001222:	2201      	movs	r2, #1
 8001224:	f7ff fe8a 	bl	8000f3c <HAL_UART_Transmit>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, GPIO_PIN_6);
 8001228:	2140      	movs	r1, #64	; 0x40
 800122a:	4810      	ldr	r0, [pc, #64]	; (800126c <HAL_UART_RxCpltCallback+0x68>)
 800122c:	f7ff f9e0 	bl	80005f0 <HAL_GPIO_TogglePin>
	}
	if(huart->Instance==UART5){
 8001230:	6822      	ldr	r2, [r4, #0]
 8001232:	4b0f      	ldr	r3, [pc, #60]	; (8001270 <HAL_UART_RxCpltCallback+0x6c>)
 8001234:	429a      	cmp	r2, r3
 8001236:	d111      	bne.n	800125c <HAL_UART_RxCpltCallback+0x58>
		HAL_UART_Receive_IT(&huart2,(uint8_t *)&Rx_Data5, 1);
 8001238:	2201      	movs	r2, #1
 800123a:	490e      	ldr	r1, [pc, #56]	; (8001274 <HAL_UART_RxCpltCallback+0x70>)
 800123c:	480a      	ldr	r0, [pc, #40]	; (8001268 <HAL_UART_RxCpltCallback+0x64>)
 800123e:	f7ff fed8 	bl	8000ff2 <HAL_UART_Receive_IT>
		HAL_UART_Transmit(&huart2,(uint8_t *)&Rx_Data5, 1,1000);
 8001242:	490c      	ldr	r1, [pc, #48]	; (8001274 <HAL_UART_RxCpltCallback+0x70>)
 8001244:	4808      	ldr	r0, [pc, #32]	; (8001268 <HAL_UART_RxCpltCallback+0x64>)
 8001246:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800124a:	2201      	movs	r2, #1
 800124c:	f7ff fe76 	bl	8000f3c <HAL_UART_Transmit>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, GPIO_PIN_6);
 8001250:	2140      	movs	r1, #64	; 0x40
 8001252:	4806      	ldr	r0, [pc, #24]	; (800126c <HAL_UART_RxCpltCallback+0x68>)
	}

}
 8001254:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		HAL_GPIO_TogglePin(LD2_GPIO_Port, GPIO_PIN_6);
	}
	if(huart->Instance==UART5){
		HAL_UART_Receive_IT(&huart2,(uint8_t *)&Rx_Data5, 1);
		HAL_UART_Transmit(&huart2,(uint8_t *)&Rx_Data5, 1,1000);
		HAL_GPIO_TogglePin(LD2_GPIO_Port, GPIO_PIN_6);
 8001258:	f7ff b9ca 	b.w	80005f0 <HAL_GPIO_TogglePin>
 800125c:	bd10      	pop	{r4, pc}
 800125e:	bf00      	nop
 8001260:	40004400 	.word	0x40004400
 8001264:	20000024 	.word	0x20000024
 8001268:	2000006c 	.word	0x2000006c
 800126c:	40020000 	.word	0x40020000
 8001270:	40005000 	.word	0x40005000
 8001274:	20000068 	.word	0x20000068

08001278 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8001278:	b530      	push	{r4, r5, lr}
 800127a:	b095      	sub	sp, #84	; 0x54

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
 800127c:	4b29      	ldr	r3, [pc, #164]	; (8001324 <SystemClock_Config+0xac>)
 800127e:	2100      	movs	r1, #0
 8001280:	9100      	str	r1, [sp, #0]
 8001282:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001284:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001288:	641a      	str	r2, [r3, #64]	; 0x40
 800128a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001290:	9300      	str	r3, [sp, #0]
 8001292:	9b00      	ldr	r3, [sp, #0]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001294:	4b24      	ldr	r3, [pc, #144]	; (8001328 <SystemClock_Config+0xb0>)
 8001296:	9101      	str	r1, [sp, #4]
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012a6:	9301      	str	r3, [sp, #4]
 80012a8:	9b01      	ldr	r3, [sp, #4]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012aa:	2301      	movs	r3, #1
 80012ac:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012ae:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012b0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012b4:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012b6:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80012b8:	2504      	movs	r5, #4
  RCC_OscInitStruct.PLL.PLLN = 180;
 80012ba:	23b4      	movs	r3, #180	; 0xb4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012bc:	a807      	add	r0, sp, #28

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012be:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
 80012c0:	950f      	str	r5, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80012c2:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012c4:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80012c6:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80012c8:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012ca:	f7ff facb 	bl	8000864 <HAL_RCC_OscConfig>
 80012ce:	b100      	cbz	r0, 80012d2 <SystemClock_Config+0x5a>
 80012d0:	e7fe      	b.n	80012d0 <SystemClock_Config+0x58>
  {
    Error_Handler();
  }

  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80012d2:	f7ff f991 	bl	80005f8 <HAL_PWREx_EnableOverDrive>
 80012d6:	b100      	cbz	r0, 80012da <SystemClock_Config+0x62>
 80012d8:	e7fe      	b.n	80012d8 <SystemClock_Config+0x60>
  {
    Error_Handler();
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012da:	230f      	movs	r3, #15
 80012dc:	9302      	str	r3, [sp, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012de:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012e2:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012e4:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80012e6:	2105      	movs	r1, #5
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80012ec:	a802      	add	r0, sp, #8
    Error_Handler();
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012ee:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012f0:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80012f2:	f7ff f9cd 	bl	8000690 <HAL_RCC_ClockConfig>
 80012f6:	4604      	mov	r4, r0
 80012f8:	b100      	cbz	r0, 80012fc <SystemClock_Config+0x84>
 80012fa:	e7fe      	b.n	80012fa <SystemClock_Config+0x82>
  {
    Error_Handler();
  }

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80012fc:	f7ff fa7c 	bl	80007f8 <HAL_RCC_GetHCLKFreq>
 8001300:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001304:	fbb0 f0f3 	udiv	r0, r0, r3
 8001308:	f7ff f85a 	bl	80003c0 <HAL_SYSTICK_Config>

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800130c:	4628      	mov	r0, r5
 800130e:	f7ff f86d 	bl	80003ec <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001312:	4622      	mov	r2, r4
 8001314:	4621      	mov	r1, r4
 8001316:	f04f 30ff 	mov.w	r0, #4294967295
 800131a:	f7ff f811 	bl	8000340 <HAL_NVIC_SetPriority>
}
 800131e:	b015      	add	sp, #84	; 0x54
 8001320:	bd30      	pop	{r4, r5, pc}
 8001322:	bf00      	nop
 8001324:	40023800 	.word	0x40023800
 8001328:	40007000 	.word	0x40007000

0800132c <main>:
}

/* USER CODE END 0 */

int main(void)
{
 800132c:	b500      	push	{lr}
 800132e:	b08b      	sub	sp, #44	; 0x2c
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001330:	2400      	movs	r4, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001332:	f7fe ffcb 	bl	80002cc <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8001336:	f7ff ff9f 	bl	8001278 <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800133a:	4b3d      	ldr	r3, [pc, #244]	; (8001430 <main+0x104>)
 800133c:	9400      	str	r4, [sp, #0]
 800133e:	6b1a      	ldr	r2, [r3, #48]	; 0x30

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001340:	483c      	ldr	r0, [pc, #240]	; (8001434 <main+0x108>)
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001342:	f042 0204 	orr.w	r2, r2, #4
 8001346:	631a      	str	r2, [r3, #48]	; 0x30
 8001348:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800134a:	f002 0204 	and.w	r2, r2, #4
 800134e:	9200      	str	r2, [sp, #0]
 8001350:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001352:	9401      	str	r4, [sp, #4]
 8001354:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001356:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800135a:	631a      	str	r2, [r3, #48]	; 0x30
 800135c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800135e:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8001362:	9201      	str	r2, [sp, #4]
 8001364:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001366:	9402      	str	r4, [sp, #8]
 8001368:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800136a:	f042 0201 	orr.w	r2, r2, #1
 800136e:	631a      	str	r2, [r3, #48]	; 0x30
 8001370:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001372:	f002 0201 	and.w	r2, r2, #1
 8001376:	9202      	str	r2, [sp, #8]
 8001378:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800137a:	9403      	str	r4, [sp, #12]
 800137c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800137e:	f042 0208 	orr.w	r2, r2, #8
 8001382:	631a      	str	r2, [r3, #48]	; 0x30
 8001384:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001386:	f002 0208 	and.w	r2, r2, #8
 800138a:	9203      	str	r2, [sp, #12]
 800138c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800138e:	9404      	str	r4, [sp, #16]
 8001390:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001392:	f042 0202 	orr.w	r2, r2, #2
 8001396:	631a      	str	r2, [r3, #48]	; 0x30
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	f003 0302 	and.w	r3, r3, #2
 800139e:	9304      	str	r3, [sp, #16]
 80013a0:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80013a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013a6:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013a8:	a905      	add	r1, sp, #20
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80013aa:	4b23      	ldr	r3, [pc, #140]	; (8001438 <main+0x10c>)
 80013ac:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80013ae:	2520      	movs	r5, #32
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b0:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013b2:	f7ff f83f 	bl	8000434 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b6:	2301      	movs	r3, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80013b8:	a905      	add	r1, sp, #20
 80013ba:	4820      	ldr	r0, [pc, #128]	; (800143c <main+0x110>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013bc:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80013be:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c0:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c2:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80013c4:	f7ff f836 	bl	8000434 <HAL_GPIO_Init>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80013c8:	4629      	mov	r1, r5
 80013ca:	481c      	ldr	r0, [pc, #112]	; (800143c <main+0x110>)
 80013cc:	4622      	mov	r2, r4
 80013ce:	f7ff f90b 	bl	80005e8 <HAL_GPIO_WritePin>

/* USART2 init function */
static void MX_USART2_UART_Init(void)
{

  huart2.Instance = USART2;
 80013d2:	481b      	ldr	r0, [pc, #108]	; (8001440 <main+0x114>)
  huart2.Init.BaudRate = 115200;
 80013d4:	4b1b      	ldr	r3, [pc, #108]	; (8001444 <main+0x118>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013d6:	6084      	str	r4, [r0, #8]
/* USART2 init function */
static void MX_USART2_UART_Init(void)
{

  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
 80013d8:	f44f 36e1 	mov.w	r6, #115200	; 0x1c200
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013dc:	250c      	movs	r5, #12
/* USART2 init function */
static void MX_USART2_UART_Init(void)
{

  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
 80013de:	e880 0048 	stmia.w	r0, {r3, r6}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013e2:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013e4:	6104      	str	r4, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013e6:	6145      	str	r5, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013e8:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013ea:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013ec:	f7ff fd78 	bl	8000ee0 <HAL_UART_Init>
 80013f0:	b100      	cbz	r0, 80013f4 <main+0xc8>
 80013f2:	e7fe      	b.n	80013f2 <main+0xc6>

/* UART5 init function */
static void MX_UART5_Init(void)
{

  huart5.Instance = UART5;
 80013f4:	4b14      	ldr	r3, [pc, #80]	; (8001448 <main+0x11c>)
 80013f6:	4a15      	ldr	r2, [pc, #84]	; (800144c <main+0x120>)
  huart5.Init.BaudRate = 115200;
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80013f8:	6098      	str	r0, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80013fa:	60d8      	str	r0, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80013fc:	6118      	str	r0, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013fe:	6198      	str	r0, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001400:	61d8      	str	r0, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001402:	4618      	mov	r0, r3
/* UART5 init function */
static void MX_UART5_Init(void)
{

  huart5.Instance = UART5;
  huart5.Init.BaudRate = 115200;
 8001404:	e883 0044 	stmia.w	r3, {r2, r6}
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
  huart5.Init.StopBits = UART_STOPBITS_1;
  huart5.Init.Parity = UART_PARITY_NONE;
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001408:	615d      	str	r5, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800140a:	f7ff fd69 	bl	8000ee0 <HAL_UART_Init>
 800140e:	b100      	cbz	r0, 8001412 <main+0xe6>
 8001410:	e7fe      	b.n	8001410 <main+0xe4>
  MX_GPIO_Init();
  MX_USART2_UART_Init();
  MX_UART5_Init();

  /* USER CODE BEGIN 2 */
	while(HAL_UART_Receive_IT(&huart2, (uint8_t *)&Rx_Data2, 1)!=HAL_OK);
 8001412:	2201      	movs	r2, #1
 8001414:	490e      	ldr	r1, [pc, #56]	; (8001450 <main+0x124>)
 8001416:	480a      	ldr	r0, [pc, #40]	; (8001440 <main+0x114>)
 8001418:	f7ff fdeb 	bl	8000ff2 <HAL_UART_Receive_IT>
 800141c:	2800      	cmp	r0, #0
 800141e:	d1f8      	bne.n	8001412 <main+0xe6>
	while(HAL_UART_Receive_IT(&huart5, (uint8_t *)&Rx_Data5, 1)!=HAL_OK);
 8001420:	2201      	movs	r2, #1
 8001422:	490c      	ldr	r1, [pc, #48]	; (8001454 <main+0x128>)
 8001424:	4808      	ldr	r0, [pc, #32]	; (8001448 <main+0x11c>)
 8001426:	f7ff fde4 	bl	8000ff2 <HAL_UART_Receive_IT>
 800142a:	2800      	cmp	r0, #0
 800142c:	d1f8      	bne.n	8001420 <main+0xf4>
 800142e:	e7fe      	b.n	800142e <main+0x102>
 8001430:	40023800 	.word	0x40023800
 8001434:	40020800 	.word	0x40020800
 8001438:	10120000 	.word	0x10120000
 800143c:	40020000 	.word	0x40020000
 8001440:	2000006c 	.word	0x2000006c
 8001444:	40004400 	.word	0x40004400
 8001448:	20000028 	.word	0x20000028
 800144c:	40005000 	.word	0x40005000
 8001450:	20000024 	.word	0x20000024
 8001454:	20000068 	.word	0x20000068

08001458 <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001458:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800145a:	2007      	movs	r0, #7
 800145c:	f7fe ff5e 	bl	800031c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8001460:	2200      	movs	r2, #0
 8001462:	4611      	mov	r1, r2
 8001464:	f06f 000b 	mvn.w	r0, #11
 8001468:	f7fe ff6a 	bl	8000340 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800146c:	2200      	movs	r2, #0
 800146e:	4611      	mov	r1, r2
 8001470:	f06f 000a 	mvn.w	r0, #10
 8001474:	f7fe ff64 	bl	8000340 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8001478:	2200      	movs	r2, #0
 800147a:	4611      	mov	r1, r2
 800147c:	f06f 0009 	mvn.w	r0, #9
 8001480:	f7fe ff5e 	bl	8000340 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8001484:	2200      	movs	r2, #0
 8001486:	4611      	mov	r1, r2
 8001488:	f06f 0004 	mvn.w	r0, #4
 800148c:	f7fe ff58 	bl	8000340 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8001490:	2200      	movs	r2, #0
 8001492:	4611      	mov	r1, r2
 8001494:	f06f 0003 	mvn.w	r0, #3
 8001498:	f7fe ff52 	bl	8000340 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 800149c:	2200      	movs	r2, #0
 800149e:	4611      	mov	r1, r2
 80014a0:	f06f 0001 	mvn.w	r0, #1
 80014a4:	f7fe ff4c 	bl	8000340 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80014a8:	2200      	movs	r2, #0
 80014aa:	4611      	mov	r1, r2
 80014ac:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80014b4:	f7fe bf44 	b.w	8000340 <HAL_NVIC_SetPriority>

080014b8 <HAL_UART_MspInit>:

  /* USER CODE END MspInit 1 */
}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==UART5)
 80014bc:	6803      	ldr	r3, [r0, #0]
 80014be:	4a2d      	ldr	r2, [pc, #180]	; (8001574 <HAL_UART_MspInit+0xbc>)
 80014c0:	4293      	cmp	r3, r2

  /* USER CODE END MspInit 1 */
}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014c2:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==UART5)
 80014c4:	d12e      	bne.n	8001524 <HAL_UART_MspInit+0x6c>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80014c6:	2400      	movs	r4, #0
 80014c8:	4b2b      	ldr	r3, [pc, #172]	; (8001578 <HAL_UART_MspInit+0xc0>)
 80014ca:	9401      	str	r4, [sp, #4]
 80014cc:	6c19      	ldr	r1, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014ce:	482b      	ldr	r0, [pc, #172]	; (800157c <HAL_UART_MspInit+0xc4>)
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80014d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80014d4:	6419      	str	r1, [r3, #64]	; 0x40
 80014d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014dc:	9301      	str	r3, [sp, #4]
 80014de:	9b01      	ldr	r3, [sp, #4]
    /**UART5 GPIO Configuration    
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e0:	f04f 0802 	mov.w	r8, #2
  
    /**UART5 GPIO Configuration    
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80014e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014e8:	2701      	movs	r7, #1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ea:	2603      	movs	r6, #3
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80014ec:	2508      	movs	r5, #8
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014ee:	a903      	add	r1, sp, #12
  
    /**UART5 GPIO Configuration    
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80014f0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f2:	f8cd 8010 	str.w	r8, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014f6:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f8:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80014fa:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014fc:	f7fe ff9a 	bl	8000434 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001500:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001502:	a903      	add	r1, sp, #12
 8001504:	481e      	ldr	r0, [pc, #120]	; (8001580 <HAL_UART_MspInit+0xc8>)
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001506:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001508:	f8cd 8010 	str.w	r8, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800150c:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800150e:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001510:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001512:	f7fe ff8f 	bl	8000434 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8001516:	2035      	movs	r0, #53	; 0x35
 8001518:	4622      	mov	r2, r4
 800151a:	4621      	mov	r1, r4
 800151c:	f7fe ff10 	bl	8000340 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001520:	2035      	movs	r0, #53	; 0x35
 8001522:	e022      	b.n	800156a <HAL_UART_MspInit+0xb2>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 8001524:	4a17      	ldr	r2, [pc, #92]	; (8001584 <HAL_UART_MspInit+0xcc>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d121      	bne.n	800156e <HAL_UART_MspInit+0xb6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800152a:	2400      	movs	r4, #0
 800152c:	4b12      	ldr	r3, [pc, #72]	; (8001578 <HAL_UART_MspInit+0xc0>)
 800152e:	9402      	str	r4, [sp, #8]
 8001530:	6c19      	ldr	r1, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001532:	4815      	ldr	r0, [pc, #84]	; (8001588 <HAL_UART_MspInit+0xd0>)
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001534:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 8001538:	6419      	str	r1, [r3, #64]	; 0x40
 800153a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001540:	9302      	str	r3, [sp, #8]
 8001542:	9b02      	ldr	r3, [sp, #8]
  
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001544:	230c      	movs	r3, #12
 8001546:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001548:	2302      	movs	r3, #2
 800154a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800154c:	2301      	movs	r3, #1
 800154e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001550:	2303      	movs	r3, #3
 8001552:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001554:	a903      	add	r1, sp, #12
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001556:	2307      	movs	r3, #7
 8001558:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800155a:	f7fe ff6b 	bl	8000434 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800155e:	2026      	movs	r0, #38	; 0x26
 8001560:	4622      	mov	r2, r4
 8001562:	4621      	mov	r1, r4
 8001564:	f7fe feec 	bl	8000340 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001568:	2026      	movs	r0, #38	; 0x26
 800156a:	f7fe ff1d 	bl	80003a8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800156e:	b008      	add	sp, #32
 8001570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001574:	40005000 	.word	0x40005000
 8001578:	40023800 	.word	0x40023800
 800157c:	40020800 	.word	0x40020800
 8001580:	40020c00 	.word	0x40020c00
 8001584:	40004400 	.word	0x40004400
 8001588:	40020000 	.word	0x40020000

0800158c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800158c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800158e:	f7fe feb7 	bl	8000300 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001592:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  HAL_SYSTICK_IRQHandler();
 8001596:	f7fe bf36 	b.w	8000406 <HAL_SYSTICK_IRQHandler>
	...

0800159c <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800159c:	4801      	ldr	r0, [pc, #4]	; (80015a4 <USART2_IRQHandler+0x8>)
 800159e:	f7ff bd89 	b.w	80010b4 <HAL_UART_IRQHandler>
 80015a2:	bf00      	nop
 80015a4:	2000006c 	.word	0x2000006c

080015a8 <UART5_IRQHandler>:
void UART5_IRQHandler(void)
{
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80015a8:	4801      	ldr	r0, [pc, #4]	; (80015b0 <UART5_IRQHandler+0x8>)
 80015aa:	f7ff bd83 	b.w	80010b4 <HAL_UART_IRQHandler>
 80015ae:	bf00      	nop
 80015b0:	20000028 	.word	0x20000028

080015b4 <__libc_init_array>:
 80015b4:	b570      	push	{r4, r5, r6, lr}
 80015b6:	4b0e      	ldr	r3, [pc, #56]	; (80015f0 <__libc_init_array+0x3c>)
 80015b8:	4c0e      	ldr	r4, [pc, #56]	; (80015f4 <__libc_init_array+0x40>)
 80015ba:	1ae4      	subs	r4, r4, r3
 80015bc:	10a4      	asrs	r4, r4, #2
 80015be:	2500      	movs	r5, #0
 80015c0:	461e      	mov	r6, r3
 80015c2:	42a5      	cmp	r5, r4
 80015c4:	d004      	beq.n	80015d0 <__libc_init_array+0x1c>
 80015c6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80015ca:	4798      	blx	r3
 80015cc:	3501      	adds	r5, #1
 80015ce:	e7f8      	b.n	80015c2 <__libc_init_array+0xe>
 80015d0:	f000 f816 	bl	8001600 <_init>
 80015d4:	4c08      	ldr	r4, [pc, #32]	; (80015f8 <__libc_init_array+0x44>)
 80015d6:	4b09      	ldr	r3, [pc, #36]	; (80015fc <__libc_init_array+0x48>)
 80015d8:	1ae4      	subs	r4, r4, r3
 80015da:	10a4      	asrs	r4, r4, #2
 80015dc:	2500      	movs	r5, #0
 80015de:	461e      	mov	r6, r3
 80015e0:	42a5      	cmp	r5, r4
 80015e2:	d004      	beq.n	80015ee <__libc_init_array+0x3a>
 80015e4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80015e8:	4798      	blx	r3
 80015ea:	3501      	adds	r5, #1
 80015ec:	e7f8      	b.n	80015e0 <__libc_init_array+0x2c>
 80015ee:	bd70      	pop	{r4, r5, r6, pc}
 80015f0:	08001628 	.word	0x08001628
 80015f4:	08001628 	.word	0x08001628
 80015f8:	0800162c 	.word	0x0800162c
 80015fc:	08001628 	.word	0x08001628

08001600 <_init>:
 8001600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001602:	bf00      	nop
 8001604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001606:	bc08      	pop	{r3}
 8001608:	469e      	mov	lr, r3
 800160a:	4770      	bx	lr

0800160c <_fini>:
 800160c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800160e:	bf00      	nop
 8001610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001612:	bc08      	pop	{r3}
 8001614:	469e      	mov	lr, r3
 8001616:	4770      	bx	lr
