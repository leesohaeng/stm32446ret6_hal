
C:\Users\sohae\Desktop\stm32fdiscovery\FreeRTOS_C8T6\Debug\FreeRTOS_C8T6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d08  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08001e14  08001e14  00011e14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001e68  08001e68  00011e68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001e6c  08001e6c  00011e6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000008  20000000  08001e70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000de4  20000008  08001e78  00020008  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000dec  08001e78  00020dec  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
  9 .debug_line   000051d0  00000000  00000000  00020031  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0000d9a2  00000000  00000000  00025201  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000023a5  00000000  00000000  00032ba3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000aa8  00000000  00000000  00034f48  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000dd8  00000000  00000000  000359f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00007bac  00000000  00000000  000367c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003caf  00000000  00000000  0003e374  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007e  00000000  00000000  00042023  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001e8c  00000000  00000000  000420a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000008 	.word	0x20000008
 8000128:	00000000 	.word	0x00000000
 800012c:	08001dfc 	.word	0x08001dfc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000000c 	.word	0x2000000c
 8000148:	08001dfc 	.word	0x08001dfc

0800014c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800014c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800014e:	e003      	b.n	8000158 <LoopCopyDataInit>

08000150 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000150:	4b0b      	ldr	r3, [pc, #44]	; (8000180 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000152:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000154:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000156:	3104      	adds	r1, #4

08000158 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000158:	480a      	ldr	r0, [pc, #40]	; (8000184 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800015a:	4b0b      	ldr	r3, [pc, #44]	; (8000188 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800015c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800015e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000160:	d3f6      	bcc.n	8000150 <CopyDataInit>
  ldr r2, =_sbss
 8000162:	4a0a      	ldr	r2, [pc, #40]	; (800018c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000164:	e002      	b.n	800016c <LoopFillZerobss>

08000166 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000166:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000168:	f842 3b04 	str.w	r3, [r2], #4

0800016c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800016c:	4b08      	ldr	r3, [pc, #32]	; (8000190 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800016e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000170:	d3f9      	bcc.n	8000166 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000172:	f001 fdef 	bl	8001d54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000176:	f001 fe13 	bl	8001da0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800017a:	f001 fc93 	bl	8001aa4 <main>
  bx lr
 800017e:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
  b LoopCopyDataInit

CopyDataInit:
  ldr r3, =_sidata
 8000180:	08001e70 	.word	0x08001e70
  ldr r3, [r3, r1]
  str r3, [r0, r1]
  adds r1, r1, #4

LoopCopyDataInit:
  ldr r0, =_sdata
 8000184:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000188:	20000008 	.word	0x20000008
  adds r2, r0, r1
  cmp r2, r3
  bcc CopyDataInit
  ldr r2, =_sbss
 800018c:	20000008 	.word	0x20000008
FillZerobss:
  movs r3, #0
  str r3, [r2], #4

LoopFillZerobss:
  ldr r3, = _ebss
 8000190:	20000dec 	.word	0x20000dec

08000194 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000194:	e7fe      	b.n	8000194 <ADC1_2_IRQHandler>
	...

08000198 <HAL_Init>:
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000198:	4a07      	ldr	r2, [pc, #28]	; (80001b8 <HAL_Init+0x20>)
  *        In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800019a:	b508      	push	{r3, lr}
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800019c:	6813      	ldr	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800019e:	2003      	movs	r0, #3
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001a0:	f043 0310 	orr.w	r3, r3, #16
 80001a4:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001a6:	f000 f825 	bl	80001f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80001aa:	2000      	movs	r0, #0
 80001ac:	f001 fd82 	bl	8001cb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80001b0:	f001 fd1e 	bl	8001bf0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80001b4:	2000      	movs	r0, #0
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	40022000 	.word	0x40022000

080001bc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80001bc:	4a02      	ldr	r2, [pc, #8]	; (80001c8 <HAL_IncTick+0xc>)
 80001be:	6813      	ldr	r3, [r2, #0]
 80001c0:	3301      	adds	r3, #1
 80001c2:	6013      	str	r3, [r2, #0]
 80001c4:	4770      	bx	lr
 80001c6:	bf00      	nop
 80001c8:	20000024 	.word	0x20000024

080001cc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001cc:	4b01      	ldr	r3, [pc, #4]	; (80001d4 <HAL_GetTick+0x8>)
 80001ce:	6818      	ldr	r0, [r3, #0]
}
 80001d0:	4770      	bx	lr
 80001d2:	bf00      	nop
 80001d4:	20000024 	.word	0x20000024

080001d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80001d8:	b513      	push	{r0, r1, r4, lr}
 80001da:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 80001dc:	f7ff fff6 	bl	80001cc <HAL_GetTick>
 80001e0:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 80001e2:	f7ff fff3 	bl	80001cc <HAL_GetTick>
 80001e6:	9b01      	ldr	r3, [sp, #4]
 80001e8:	1b00      	subs	r0, r0, r4
 80001ea:	4298      	cmp	r0, r3
 80001ec:	d3f9      	bcc.n	80001e2 <HAL_Delay+0xa>
  {
  }
}
 80001ee:	b002      	add	sp, #8
 80001f0:	bd10      	pop	{r4, pc}
	...

080001f4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001f4:	4a07      	ldr	r2, [pc, #28]	; (8000214 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 80001f6:	0200      	lsls	r0, r0, #8
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001f8:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 80001fa:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 80001fe:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000202:	041b      	lsls	r3, r3, #16
 8000204:	0c1b      	lsrs	r3, r3, #16
 8000206:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800020a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800020e:	4303      	orrs	r3, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8000210:	60d3      	str	r3, [r2, #12]
 8000212:	4770      	bx	lr
 8000214:	e000ed00 	.word	0xe000ed00

08000218 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000218:	4b17      	ldr	r3, [pc, #92]	; (8000278 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800021a:	b530      	push	{r4, r5, lr}
 800021c:	68db      	ldr	r3, [r3, #12]
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800021e:	f3c3 2302 	ubfx	r3, r3, #8, #3
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000222:	f1c3 0407 	rsb	r4, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000226:	1d1d      	adds	r5, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000228:	2c04      	cmp	r4, #4
 800022a:	bf28      	it	cs
 800022c:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800022e:	2d06      	cmp	r5, #6

  return (
 8000230:	f04f 0501 	mov.w	r5, #1
 8000234:	fa05 f404 	lsl.w	r4, r5, r4
 8000238:	f104 34ff 	add.w	r4, r4, #4294967295
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800023c:	bf8c      	ite	hi
 800023e:	3b03      	subhi	r3, #3
 8000240:	2300      	movls	r3, #0

  return (
 8000242:	400c      	ands	r4, r1
 8000244:	409c      	lsls	r4, r3
 8000246:	fa05 f303 	lsl.w	r3, r5, r3
 800024a:	3b01      	subs	r3, #1
 800024c:	401a      	ands	r2, r3
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 800024e:	2800      	cmp	r0, #0
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8000250:	ea42 0204 	orr.w	r2, r2, r4
 8000254:	ea4f 1202 	mov.w	r2, r2, lsl #4
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000258:	bfaf      	iteee	ge
 800025a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800025e:	4b07      	ldrlt	r3, [pc, #28]	; (800027c <HAL_NVIC_SetPriority+0x64>)
 8000260:	f000 000f 	andlt.w	r0, r0, #15
 8000264:	b2d2      	uxtblt	r2, r2
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000266:	bfa5      	ittet	ge
 8000268:	b2d2      	uxtbge	r2, r2
 800026a:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800026e:	541a      	strblt	r2, [r3, r0]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000270:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000274:	bd30      	pop	{r4, r5, pc}
 8000276:	bf00      	nop
 8000278:	e000ed00 	.word	0xe000ed00
 800027c:	e000ed14 	.word	0xe000ed14

08000280 <HAL_NVIC_EnableIRQ>:
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000280:	0942      	lsrs	r2, r0, #5
 8000282:	2301      	movs	r3, #1
 8000284:	f000 001f 	and.w	r0, r0, #31
 8000288:	fa03 f000 	lsl.w	r0, r3, r0
 800028c:	4b01      	ldr	r3, [pc, #4]	; (8000294 <HAL_NVIC_EnableIRQ+0x14>)
 800028e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000292:	4770      	bx	lr
 8000294:	e000e100 	.word	0xe000e100

08000298 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000298:	3801      	subs	r0, #1
 800029a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800029e:	d20a      	bcs.n	80002b6 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002a0:	4b06      	ldr	r3, [pc, #24]	; (80002bc <HAL_SYSTICK_Config+0x24>)
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002a2:	4a07      	ldr	r2, [pc, #28]	; (80002c0 <HAL_SYSTICK_Config+0x28>)
 80002a4:	21f0      	movs	r1, #240	; 0xf0
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002a6:	6058      	str	r0, [r3, #4]
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002a8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002ac:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002ae:	2207      	movs	r2, #7
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002b0:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002b2:	601a      	str	r2, [r3, #0]
 80002b4:	4770      	bx	lr
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
 80002b6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80002b8:	4770      	bx	lr
 80002ba:	bf00      	nop
 80002bc:	e000e010 	.word	0xe000e010
 80002c0:	e000ed00 	.word	0xe000ed00

080002c4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80002c4:	4b04      	ldr	r3, [pc, #16]	; (80002d8 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80002c6:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80002c8:	681a      	ldr	r2, [r3, #0]
 80002ca:	bf0c      	ite	eq
 80002cc:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80002d0:	f022 0204 	bicne.w	r2, r2, #4
 80002d4:	601a      	str	r2, [r3, #0]
 80002d6:	4770      	bx	lr
 80002d8:	e000e010 	.word	0xe000e010

080002dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80002dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00;
  uint32_t iocurrent = 0x00;
  uint32_t temp = 0x00;
  uint32_t config = 0x00;
 80002e0:	2400      	movs	r4, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80002e2:	4626      	mov	r6, r4
 80002e4:	4b62      	ldr	r3, [pc, #392]	; (8000470 <HAL_GPIO_Init+0x194>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80002e6:	f8df e194 	ldr.w	lr, [pc, #404]	; 800047c <HAL_GPIO_Init+0x1a0>
 80002ea:	f8df c194 	ldr.w	ip, [pc, #404]	; 8000480 <HAL_GPIO_Init+0x1a4>

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80002ee:	2201      	movs	r2, #1
    
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if (iocurrent == ioposition)
 80002f0:	680d      	ldr	r5, [r1, #0]

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80002f2:	40b2      	lsls	r2, r6
    
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if (iocurrent == ioposition)
 80002f4:	ea32 0505 	bics.w	r5, r2, r5
 80002f8:	f040 80b3 	bne.w	8000462 <HAL_GPIO_Init+0x186>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80002fc:	684d      	ldr	r5, [r1, #4]
 80002fe:	2d12      	cmp	r5, #18
 8000300:	d028      	beq.n	8000354 <HAL_GPIO_Init+0x78>
 8000302:	d80e      	bhi.n	8000322 <HAL_GPIO_Init+0x46>
 8000304:	2d02      	cmp	r5, #2
 8000306:	d022      	beq.n	800034e <HAL_GPIO_Init+0x72>
 8000308:	d804      	bhi.n	8000314 <HAL_GPIO_Init+0x38>
 800030a:	b335      	cbz	r5, 800035a <HAL_GPIO_Init+0x7e>
 800030c:	2d01      	cmp	r5, #1
 800030e:	d12d      	bne.n	800036c <HAL_GPIO_Init+0x90>
      {
        /* If we are configuring the pin in OUTPUT push-pull mode */
        case GPIO_MODE_OUTPUT_PP:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000310:	68cc      	ldr	r4, [r1, #12]
          break;
 8000312:	e02b      	b.n	800036c <HAL_GPIO_Init+0x90>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000314:	2d03      	cmp	r5, #3
 8000316:	d018      	beq.n	800034a <HAL_GPIO_Init+0x6e>
 8000318:	2d11      	cmp	r5, #17
 800031a:	d127      	bne.n	800036c <HAL_GPIO_Init+0x90>
          
        /* If we are configuring the pin in OUTPUT open-drain mode */
        case GPIO_MODE_OUTPUT_OD:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800031c:	68cc      	ldr	r4, [r1, #12]
 800031e:	3404      	adds	r4, #4
          break;
 8000320:	e024      	b.n	800036c <HAL_GPIO_Init+0x90>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000322:	4f54      	ldr	r7, [pc, #336]	; (8000474 <HAL_GPIO_Init+0x198>)
 8000324:	42bd      	cmp	r5, r7
 8000326:	d018      	beq.n	800035a <HAL_GPIO_Init+0x7e>
 8000328:	d806      	bhi.n	8000338 <HAL_GPIO_Init+0x5c>
 800032a:	f8df 8158 	ldr.w	r8, [pc, #344]	; 8000484 <HAL_GPIO_Init+0x1a8>
 800032e:	4545      	cmp	r5, r8
 8000330:	d013      	beq.n	800035a <HAL_GPIO_Init+0x7e>
 8000332:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 8000336:	e005      	b.n	8000344 <HAL_GPIO_Init+0x68>
 8000338:	4575      	cmp	r5, lr
 800033a:	d00e      	beq.n	800035a <HAL_GPIO_Init+0x7e>
 800033c:	4565      	cmp	r5, ip
 800033e:	d00c      	beq.n	800035a <HAL_GPIO_Init+0x7e>
 8000340:	f8df 8144 	ldr.w	r8, [pc, #324]	; 8000488 <HAL_GPIO_Init+0x1ac>
 8000344:	4545      	cmp	r5, r8
 8000346:	d111      	bne.n	800036c <HAL_GPIO_Init+0x90>
 8000348:	e007      	b.n	800035a <HAL_GPIO_Init+0x7e>
          }
          break; 
          
        /* If we are configuring the pin in INPUT analog mode */
        case GPIO_MODE_ANALOG:
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800034a:	2400      	movs	r4, #0
 800034c:	e00e      	b.n	800036c <HAL_GPIO_Init+0x90>
          
        /* If we are configuring the pin in ALTERNATE FUNCTION push-pull mode */
        case GPIO_MODE_AF_PP:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800034e:	68cc      	ldr	r4, [r1, #12]
 8000350:	3408      	adds	r4, #8
          break;
 8000352:	e00b      	b.n	800036c <HAL_GPIO_Init+0x90>
          
        /* If we are configuring the pin in ALTERNATE FUNCTION open-drain mode */
        case GPIO_MODE_AF_OD:
          /* Check the GPIO speed parameter */
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000354:	68cc      	ldr	r4, [r1, #12]
 8000356:	340c      	adds	r4, #12
          break;
 8000358:	e008      	b.n	800036c <HAL_GPIO_Init+0x90>
        case GPIO_MODE_EVT_RISING:
        case GPIO_MODE_EVT_FALLING:
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if(GPIO_Init->Pull == GPIO_NOPULL)
 800035a:	688c      	ldr	r4, [r1, #8]
 800035c:	b12c      	cbz	r4, 800036a <HAL_GPIO_Init+0x8e>
          {  
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
          }
          else if(GPIO_Init->Pull == GPIO_PULLUP)
 800035e:	2c01      	cmp	r4, #1
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
            
            /* Set the corresponding ODR bit */
            GPIOx->BSRR = ioposition;
 8000360:	bf0c      	ite	eq
 8000362:	6102      	streq	r2, [r0, #16]
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
            
            /* Reset the corresponding ODR bit */
            GPIOx->BRR = ioposition;
 8000364:	6142      	strne	r2, [r0, #20]
            /* Set the corresponding ODR bit */
            GPIOx->BSRR = ioposition;
          }
          else /* GPIO_PULLDOWN */
          {
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000366:	2408      	movs	r4, #8
 8000368:	e000      	b.n	800036c <HAL_GPIO_Init+0x90>
        case GPIO_MODE_EVT_RISING_FALLING:
          /* Check the GPIO pull parameter */
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
          if(GPIO_Init->Pull == GPIO_NOPULL)
          {  
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800036a:	2404      	movs	r4, #4
          break;
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800036c:	2aff      	cmp	r2, #255	; 0xff
 800036e:	bf97      	itett	ls
 8000370:	4683      	movls	fp, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
 8000372:	f1a6 0508 	subhi.w	r5, r6, #8
          break;
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000376:	f8d0 9000 	ldrls.w	r9, [r0]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
 800037a:	00b5      	lslls	r5, r6, #2
          break;
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800037c:	bf84      	itt	hi
 800037e:	f8d0 9004 	ldrhi.w	r9, [r0, #4]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
 8000382:	00ad      	lslhi	r5, r5, #2
      
      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 8000384:	f04f 080f 	mov.w	r8, #15
 8000388:	fa08 fa05 	lsl.w	sl, r8, r5
 800038c:	ea29 090a 	bic.w	r9, r9, sl
 8000390:	fa04 f505 	lsl.w	r5, r4, r5
          break;
      }
      
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000394:	bf88      	it	hi
 8000396:	f100 0b04 	addhi.w	fp, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2) : ((position - 8) << 2);
      
      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 800039a:	ea49 0505 	orr.w	r5, r9, r5
 800039e:	f8cb 5000 	str.w	r5, [fp]
      
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80003a2:	f8d1 9004 	ldr.w	r9, [r1, #4]
 80003a6:	f019 5f80 	tst.w	r9, #268435456	; 0x10000000
 80003aa:	d05a      	beq.n	8000462 <HAL_GPIO_Init+0x186>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80003ac:	4d32      	ldr	r5, [pc, #200]	; (8000478 <HAL_GPIO_Init+0x19c>)
 80003ae:	4f32      	ldr	r7, [pc, #200]	; (8000478 <HAL_GPIO_Init+0x19c>)
 80003b0:	69ad      	ldr	r5, [r5, #24]
        temp = AFIO->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 80003b2:	f006 0a03 	and.w	sl, r6, #3
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80003b6:	f045 0501 	orr.w	r5, r5, #1
 80003ba:	61bd      	str	r5, [r7, #24]
 80003bc:	69bd      	ldr	r5, [r7, #24]
        temp = AFIO->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 80003be:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80003c2:	f005 0501 	and.w	r5, r5, #1
 80003c6:	9501      	str	r5, [sp, #4]
 80003c8:	9d01      	ldr	r5, [sp, #4]
 80003ca:	f026 0503 	bic.w	r5, r6, #3
 80003ce:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 80003d2:	f505 3580 	add.w	r5, r5, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2];
 80003d6:	f8d5 b008 	ldr.w	fp, [r5, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80003da:	f5a7 3784 	sub.w	r7, r7, #67584	; 0x10800
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
        temp = AFIO->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 80003de:	fa08 f80a 	lsl.w	r8, r8, sl
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80003e2:	42b8      	cmp	r0, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
        temp = AFIO->EXTICR[position >> 2];
        CLEAR_BIT(temp, ((uint32_t)0x0F) << (4 * (position & 0x03)));
 80003e4:	ea2b 0808 	bic.w	r8, fp, r8
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80003e8:	d010      	beq.n	800040c <HAL_GPIO_Init+0x130>
 80003ea:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80003ee:	42b8      	cmp	r0, r7
 80003f0:	d00f      	beq.n	8000412 <HAL_GPIO_Init+0x136>
 80003f2:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80003f6:	42b8      	cmp	r0, r7
 80003f8:	d00e      	beq.n	8000418 <HAL_GPIO_Init+0x13c>
 80003fa:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 80003fe:	42b8      	cmp	r0, r7
 8000400:	bf0c      	ite	eq
 8000402:	f04f 0b03 	moveq.w	fp, #3
 8000406:	f04f 0b04 	movne.w	fp, #4
 800040a:	e007      	b.n	800041c <HAL_GPIO_Init+0x140>
 800040c:	f04f 0b00 	mov.w	fp, #0
 8000410:	e004      	b.n	800041c <HAL_GPIO_Init+0x140>
 8000412:	f04f 0b01 	mov.w	fp, #1
 8000416:	e001      	b.n	800041c <HAL_GPIO_Init+0x140>
 8000418:	f04f 0b02 	mov.w	fp, #2
 800041c:	fa0b fa0a 	lsl.w	sl, fp, sl
 8000420:	ea4a 0a08 	orr.w	sl, sl, r8
        AFIO->EXTICR[position >> 2] = temp;
 8000424:	f8c5 a008 	str.w	sl, [r5, #8]
        

        /* Configure the interrupt mask */
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent); 
 8000428:	681d      	ldr	r5, [r3, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        AFIO->EXTICR[position >> 2] = temp;
        

        /* Configure the interrupt mask */
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800042a:	f419 3f80 	tst.w	r9, #65536	; 0x10000
        {
          SET_BIT(EXTI->IMR, iocurrent); 
 800042e:	bf14      	ite	ne
 8000430:	4315      	orrne	r5, r2
        } 
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent); 
 8000432:	4395      	biceq	r5, r2
 8000434:	601d      	str	r5, [r3, #0]
        } 
        
        /* Configure the event mask */
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent); 
 8000436:	685d      	ldr	r5, [r3, #4]
        {
          CLEAR_BIT(EXTI->IMR, iocurrent); 
        } 
        
        /* Configure the event mask */
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000438:	f419 3f00 	tst.w	r9, #131072	; 0x20000
        {
          SET_BIT(EXTI->EMR, iocurrent); 
 800043c:	bf14      	ite	ne
 800043e:	4315      	orrne	r5, r2
        } 
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent); 
 8000440:	4395      	biceq	r5, r2
 8000442:	605d      	str	r5, [r3, #4]
        }
        
        /* Enable or disable the rising trigger */
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent); 
 8000444:	689d      	ldr	r5, [r3, #8]
        {
          CLEAR_BIT(EXTI->EMR, iocurrent); 
        }
        
        /* Enable or disable the rising trigger */
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000446:	f419 1f80 	tst.w	r9, #1048576	; 0x100000
        {
          SET_BIT(EXTI->RTSR, iocurrent); 
 800044a:	bf14      	ite	ne
 800044c:	4315      	orrne	r5, r2
        } 
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
 800044e:	4395      	biceq	r5, r2
 8000450:	609d      	str	r5, [r3, #8]
        }
        
        /* Enable or disable the falling trigger */
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent); 
 8000452:	68dd      	ldr	r5, [r3, #12]
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
        }
        
        /* Enable or disable the falling trigger */
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000454:	f419 1f00 	tst.w	r9, #2097152	; 0x200000
        {
          SET_BIT(EXTI->FTSR, iocurrent); 
 8000458:	bf14      	ite	ne
 800045a:	432a      	orrne	r2, r5
        } 
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
 800045c:	ea25 0202 	biceq.w	r2, r5, r2
 8000460:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8000462:	3601      	adds	r6, #1
 8000464:	2e10      	cmp	r6, #16
 8000466:	f47f af42 	bne.w	80002ee <HAL_GPIO_Init+0x12>
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
        }
      }
    }
  }
}
 800046a:	b003      	add	sp, #12
 800046c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000470:	40010400 	.word	0x40010400
 8000474:	10210000 	.word	0x10210000
 8000478:	40021000 	.word	0x40021000
 800047c:	10310000 	.word	0x10310000
 8000480:	10320000 	.word	0x10320000
 8000484:	10110000 	.word	0x10110000
 8000488:	10220000 	.word	0x10220000

0800048c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800048c:	b902      	cbnz	r2, 8000490 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800048e:	0409      	lsls	r1, r1, #16
 8000490:	6101      	str	r1, [r0, #16]
 8000492:	4770      	bx	lr

08000494 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000494:	68c3      	ldr	r3, [r0, #12]
 8000496:	4059      	eors	r1, r3
 8000498:	60c1      	str	r1, [r0, #12]
 800049a:	4770      	bx	lr

0800049c <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800049c:	6803      	ldr	r3, [r0, #0]
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800049e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004a2:	07dc      	lsls	r4, r3, #31
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80004a4:	4605      	mov	r5, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004a6:	d403      	bmi.n	80004b0 <HAL_RCC_OscConfig+0x14>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80004a8:	682b      	ldr	r3, [r5, #0]
 80004aa:	0798      	lsls	r0, r3, #30
 80004ac:	d473      	bmi.n	8000596 <HAL_RCC_OscConfig+0xfa>
 80004ae:	e0f2      	b.n	8000696 <HAL_RCC_OscConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
        
    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80004b0:	4cb9      	ldr	r4, [pc, #740]	; (8000798 <HAL_RCC_OscConfig+0x2fc>)
 80004b2:	6863      	ldr	r3, [r4, #4]
 80004b4:	f003 030c 	and.w	r3, r3, #12
 80004b8:	2b04      	cmp	r3, #4
 80004ba:	d007      	beq.n	80004cc <HAL_RCC_OscConfig+0x30>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80004bc:	6863      	ldr	r3, [r4, #4]
 80004be:	f003 030c 	and.w	r3, r3, #12
 80004c2:	2b08      	cmp	r3, #8
 80004c4:	d116      	bne.n	80004f4 <HAL_RCC_OscConfig+0x58>
 80004c6:	6863      	ldr	r3, [r4, #4]
 80004c8:	03d9      	lsls	r1, r3, #15
 80004ca:	d513      	bpl.n	80004f4 <HAL_RCC_OscConfig+0x58>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80004cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80004d0:	fa93 f2a3 	rbit	r2, r3
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80004d4:	6822      	ldr	r2, [r4, #0]
 80004d6:	fa93 f3a3 	rbit	r3, r3
 80004da:	fab3 f383 	clz	r3, r3
 80004de:	f003 031f 	and.w	r3, r3, #31
 80004e2:	fa22 f303 	lsr.w	r3, r2, r3
 80004e6:	07da      	lsls	r2, r3, #31
 80004e8:	d5de      	bpl.n	80004a8 <HAL_RCC_OscConfig+0xc>
 80004ea:	686b      	ldr	r3, [r5, #4]
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d1db      	bne.n	80004a8 <HAL_RCC_OscConfig+0xc>
      {
        return HAL_ERROR;
 80004f0:	2001      	movs	r0, #1
 80004f2:	e22d      	b.n	8000950 <HAL_RCC_OscConfig+0x4b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80004f4:	686b      	ldr	r3, [r5, #4]
 80004f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80004fa:	d015      	beq.n	8000528 <HAL_RCC_OscConfig+0x8c>
 80004fc:	b96b      	cbnz	r3, 800051a <HAL_RCC_OscConfig+0x7e>
 80004fe:	6823      	ldr	r3, [r4, #0]
 8000500:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000504:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000508:	6023      	str	r3, [r4, #0]
 800050a:	6823      	ldr	r3, [r4, #0]
 800050c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000510:	6023      	str	r3, [r4, #0]
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000512:	f7ff fe5b 	bl	80001cc <HAL_GetTick>
 8000516:	4607      	mov	r7, r0
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000518:	e02f      	b.n	800057a <HAL_RCC_OscConfig+0xde>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800051a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800051e:	6823      	ldr	r3, [r4, #0]
 8000520:	d106      	bne.n	8000530 <HAL_RCC_OscConfig+0x94>
 8000522:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000526:	6023      	str	r3, [r4, #0]
 8000528:	6823      	ldr	r3, [r4, #0]
 800052a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800052e:	e005      	b.n	800053c <HAL_RCC_OscConfig+0xa0>
 8000530:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000534:	6023      	str	r3, [r4, #0]
 8000536:	6823      	ldr	r3, [r4, #0]
 8000538:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800053c:	6023      	str	r3, [r4, #0]

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800053e:	f7ff fe45 	bl	80001cc <HAL_GetTick>
 8000542:	4607      	mov	r7, r0
 8000544:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000548:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800054c:	6822      	ldr	r2, [r4, #0]
 800054e:	fa96 f3a6 	rbit	r3, r6
 8000552:	fab3 f383 	clz	r3, r3
 8000556:	f003 031f 	and.w	r3, r3, #31
 800055a:	fa22 f303 	lsr.w	r3, r2, r3
 800055e:	07db      	lsls	r3, r3, #31
 8000560:	d4a2      	bmi.n	80004a8 <HAL_RCC_OscConfig+0xc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000562:	f7ff fe33 	bl	80001cc <HAL_GetTick>
 8000566:	1bc0      	subs	r0, r0, r7
 8000568:	2864      	cmp	r0, #100	; 0x64
 800056a:	d9ed      	bls.n	8000548 <HAL_RCC_OscConfig+0xac>
          {
            return HAL_TIMEOUT;
 800056c:	2003      	movs	r0, #3
 800056e:	e1ef      	b.n	8000950 <HAL_RCC_OscConfig+0x4b4>
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000570:	f7ff fe2c 	bl	80001cc <HAL_GetTick>
 8000574:	1bc0      	subs	r0, r0, r7
 8000576:	2864      	cmp	r0, #100	; 0x64
 8000578:	d8f8      	bhi.n	800056c <HAL_RCC_OscConfig+0xd0>
 800057a:	fa96 f3a6 	rbit	r3, r6
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800057e:	6822      	ldr	r2, [r4, #0]
 8000580:	fa96 f3a6 	rbit	r3, r6
 8000584:	fab3 f383 	clz	r3, r3
 8000588:	f003 031f 	and.w	r3, r3, #31
 800058c:	fa22 f303 	lsr.w	r3, r2, r3
 8000590:	07d8      	lsls	r0, r3, #31
 8000592:	d4ed      	bmi.n	8000570 <HAL_RCC_OscConfig+0xd4>
 8000594:	e788      	b.n	80004a8 <HAL_RCC_OscConfig+0xc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000596:	4c80      	ldr	r4, [pc, #512]	; (8000798 <HAL_RCC_OscConfig+0x2fc>)
 8000598:	6863      	ldr	r3, [r4, #4]
 800059a:	f013 0f0c 	tst.w	r3, #12
 800059e:	d007      	beq.n	80005b0 <HAL_RCC_OscConfig+0x114>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80005a0:	6863      	ldr	r3, [r4, #4]
 80005a2:	f003 030c 	and.w	r3, r3, #12
 80005a6:	2b08      	cmp	r3, #8
 80005a8:	d121      	bne.n	80005ee <HAL_RCC_OscConfig+0x152>
 80005aa:	6863      	ldr	r3, [r4, #4]
 80005ac:	03d9      	lsls	r1, r3, #15
 80005ae:	d41e      	bmi.n	80005ee <HAL_RCC_OscConfig+0x152>
 80005b0:	2302      	movs	r3, #2
 80005b2:	fa93 f2a3 	rbit	r2, r3
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80005b6:	6822      	ldr	r2, [r4, #0]
 80005b8:	fa93 f3a3 	rbit	r3, r3
 80005bc:	fab3 f383 	clz	r3, r3
 80005c0:	f003 031f 	and.w	r3, r3, #31
 80005c4:	fa22 f303 	lsr.w	r3, r2, r3
 80005c8:	07da      	lsls	r2, r3, #31
 80005ca:	d502      	bpl.n	80005d2 <HAL_RCC_OscConfig+0x136>
 80005cc:	692b      	ldr	r3, [r5, #16]
 80005ce:	2b01      	cmp	r3, #1
 80005d0:	d18e      	bne.n	80004f0 <HAL_RCC_OscConfig+0x54>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80005d2:	6823      	ldr	r3, [r4, #0]
 80005d4:	22f8      	movs	r2, #248	; 0xf8
 80005d6:	fa92 f2a2 	rbit	r2, r2
 80005da:	fab2 f282 	clz	r2, r2
 80005de:	6969      	ldr	r1, [r5, #20]
 80005e0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80005e4:	fa01 f202 	lsl.w	r2, r1, r2
 80005e8:	4313      	orrs	r3, r2
 80005ea:	6023      	str	r3, [r4, #0]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80005ec:	e053      	b.n	8000696 <HAL_RCC_OscConfig+0x1fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80005ee:	692a      	ldr	r2, [r5, #16]
 80005f0:	2301      	movs	r3, #1
 80005f2:	b37a      	cbz	r2, 8000654 <HAL_RCC_OscConfig+0x1b8>
 80005f4:	fa93 f2a3 	rbit	r2, r3
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80005f8:	fab2 f282 	clz	r2, r2
 80005fc:	0092      	lsls	r2, r2, #2
 80005fe:	f102 4284 	add.w	r2, r2, #1107296256	; 0x42000000
 8000602:	f502 0284 	add.w	r2, r2, #4325376	; 0x420000
 8000606:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000608:	f7ff fde0 	bl	80001cc <HAL_GetTick>
 800060c:	4607      	mov	r7, r0
 800060e:	2602      	movs	r6, #2
 8000610:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000614:	4860      	ldr	r0, [pc, #384]	; (8000798 <HAL_RCC_OscConfig+0x2fc>)
 8000616:	6822      	ldr	r2, [r4, #0]
 8000618:	fa96 f3a6 	rbit	r3, r6
 800061c:	fab3 f383 	clz	r3, r3
 8000620:	f003 031f 	and.w	r3, r3, #31
 8000624:	fa22 f303 	lsr.w	r3, r2, r3
 8000628:	07db      	lsls	r3, r3, #31
 800062a:	d405      	bmi.n	8000638 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800062c:	f7ff fdce 	bl	80001cc <HAL_GetTick>
 8000630:	1bc0      	subs	r0, r0, r7
 8000632:	2802      	cmp	r0, #2
 8000634:	d9ec      	bls.n	8000610 <HAL_RCC_OscConfig+0x174>
 8000636:	e799      	b.n	800056c <HAL_RCC_OscConfig+0xd0>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000638:	6803      	ldr	r3, [r0, #0]
 800063a:	22f8      	movs	r2, #248	; 0xf8
 800063c:	fa92 f2a2 	rbit	r2, r2
 8000640:	fab2 f282 	clz	r2, r2
 8000644:	6969      	ldr	r1, [r5, #20]
 8000646:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800064a:	fa01 f202 	lsl.w	r2, r1, r2
 800064e:	4313      	orrs	r3, r2
 8000650:	6003      	str	r3, [r0, #0]
 8000652:	e020      	b.n	8000696 <HAL_RCC_OscConfig+0x1fa>
 8000654:	fa93 f3a3 	rbit	r3, r3
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000658:	fab3 f383 	clz	r3, r3
 800065c:	009b      	lsls	r3, r3, #2
 800065e:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8000662:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8000666:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000668:	f7ff fdb0 	bl	80001cc <HAL_GetTick>
 800066c:	4607      	mov	r7, r0
 800066e:	2602      	movs	r6, #2
 8000670:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000674:	6822      	ldr	r2, [r4, #0]
 8000676:	fa96 f3a6 	rbit	r3, r6
 800067a:	fab3 f383 	clz	r3, r3
 800067e:	f003 031f 	and.w	r3, r3, #31
 8000682:	fa22 f303 	lsr.w	r3, r2, r3
 8000686:	07d9      	lsls	r1, r3, #31
 8000688:	d505      	bpl.n	8000696 <HAL_RCC_OscConfig+0x1fa>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800068a:	f7ff fd9f 	bl	80001cc <HAL_GetTick>
 800068e:	1bc0      	subs	r0, r0, r7
 8000690:	2802      	cmp	r0, #2
 8000692:	d9ed      	bls.n	8000670 <HAL_RCC_OscConfig+0x1d4>
 8000694:	e76a      	b.n	800056c <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000696:	682b      	ldr	r3, [r5, #0]
 8000698:	071a      	lsls	r2, r3, #28
 800069a:	d546      	bpl.n	800072a <HAL_RCC_OscConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800069c:	69aa      	ldr	r2, [r5, #24]
 800069e:	4c3e      	ldr	r4, [pc, #248]	; (8000798 <HAL_RCC_OscConfig+0x2fc>)
 80006a0:	2301      	movs	r3, #1
 80006a2:	493e      	ldr	r1, [pc, #248]	; (800079c <HAL_RCC_OscConfig+0x300>)
 80006a4:	b312      	cbz	r2, 80006ec <HAL_RCC_OscConfig+0x250>
 80006a6:	fa93 f2a3 	rbit	r2, r3
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80006aa:	fab2 f282 	clz	r2, r2
 80006ae:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80006b2:	f7ff fd8b 	bl	80001cc <HAL_GetTick>
 80006b6:	4607      	mov	r7, r0
 80006b8:	2602      	movs	r6, #2
 80006ba:	fa96 f3a6 	rbit	r3, r6
 80006be:	fa96 f3a6 	rbit	r3, r6
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80006c2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80006c4:	fa96 f3a6 	rbit	r3, r6
 80006c8:	fab3 f383 	clz	r3, r3
 80006cc:	f003 031f 	and.w	r3, r3, #31
 80006d0:	fa22 f303 	lsr.w	r3, r2, r3
 80006d4:	07db      	lsls	r3, r3, #31
 80006d6:	d405      	bmi.n	80006e4 <HAL_RCC_OscConfig+0x248>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80006d8:	f7ff fd78 	bl	80001cc <HAL_GetTick>
 80006dc:	1bc0      	subs	r0, r0, r7
 80006de:	2802      	cmp	r0, #2
 80006e0:	d9eb      	bls.n	80006ba <HAL_RCC_OscConfig+0x21e>
 80006e2:	e743      	b.n	800056c <HAL_RCC_OscConfig+0xd0>
          return HAL_TIMEOUT;
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms 
          should be added.*/
      HAL_Delay(1);
 80006e4:	2001      	movs	r0, #1
 80006e6:	f7ff fd77 	bl	80001d8 <HAL_Delay>
 80006ea:	e01e      	b.n	800072a <HAL_RCC_OscConfig+0x28e>
 80006ec:	fa93 f3a3 	rbit	r3, r3
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80006f0:	fab3 f383 	clz	r3, r3
 80006f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80006f8:	f7ff fd68 	bl	80001cc <HAL_GetTick>
 80006fc:	4607      	mov	r7, r0
 80006fe:	2602      	movs	r6, #2
 8000700:	fa96 f3a6 	rbit	r3, r6
 8000704:	fa96 f3a6 	rbit	r3, r6
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000708:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800070a:	fa96 f3a6 	rbit	r3, r6
 800070e:	fab3 f383 	clz	r3, r3
 8000712:	f003 031f 	and.w	r3, r3, #31
 8000716:	fa22 f303 	lsr.w	r3, r2, r3
 800071a:	07d8      	lsls	r0, r3, #31
 800071c:	d505      	bpl.n	800072a <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800071e:	f7ff fd55 	bl	80001cc <HAL_GetTick>
 8000722:	1bc0      	subs	r0, r0, r7
 8000724:	2802      	cmp	r0, #2
 8000726:	d9eb      	bls.n	8000700 <HAL_RCC_OscConfig+0x264>
 8000728:	e720      	b.n	800056c <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800072a:	682b      	ldr	r3, [r5, #0]
 800072c:	0759      	lsls	r1, r3, #29
 800072e:	d404      	bmi.n	800073a <HAL_RCC_OscConfig+0x29e>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000730:	69ea      	ldr	r2, [r5, #28]
 8000732:	2a00      	cmp	r2, #0
 8000734:	f040 8081 	bne.w	800083a <HAL_RCC_OscConfig+0x39e>
 8000738:	e0d8      	b.n	80008ec <HAL_RCC_OscConfig+0x450>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800073a:	4c17      	ldr	r4, [pc, #92]	; (8000798 <HAL_RCC_OscConfig+0x2fc>)
    
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800073c:	4e18      	ldr	r6, [pc, #96]	; (80007a0 <HAL_RCC_OscConfig+0x304>)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800073e:	69e3      	ldr	r3, [r4, #28]
 8000740:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000744:	61e3      	str	r3, [r4, #28]
 8000746:	69e3      	ldr	r3, [r4, #28]
 8000748:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800074c:	9301      	str	r3, [sp, #4]
 800074e:	9b01      	ldr	r3, [sp, #4]
    
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000750:	6833      	ldr	r3, [r6, #0]
 8000752:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000756:	6033      	str	r3, [r6, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000758:	f7ff fd38 	bl	80001cc <HAL_GetTick>
 800075c:	4607      	mov	r7, r0

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800075e:	6833      	ldr	r3, [r6, #0]
 8000760:	05da      	lsls	r2, r3, #23
 8000762:	d405      	bmi.n	8000770 <HAL_RCC_OscConfig+0x2d4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000764:	f7ff fd32 	bl	80001cc <HAL_GetTick>
 8000768:	1bc0      	subs	r0, r0, r7
 800076a:	2864      	cmp	r0, #100	; 0x64
 800076c:	d9f7      	bls.n	800075e <HAL_RCC_OscConfig+0x2c2>
 800076e:	e6fd      	b.n	800056c <HAL_RCC_OscConfig+0xd0>
          return HAL_TIMEOUT;
        }
      }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000770:	68eb      	ldr	r3, [r5, #12]
 8000772:	2b01      	cmp	r3, #1
 8000774:	d01c      	beq.n	80007b0 <HAL_RCC_OscConfig+0x314>
 8000776:	b9ab      	cbnz	r3, 80007a4 <HAL_RCC_OscConfig+0x308>
 8000778:	6a23      	ldr	r3, [r4, #32]
 800077a:	2602      	movs	r6, #2
 800077c:	f023 0301 	bic.w	r3, r3, #1
 8000780:	6223      	str	r3, [r4, #32]
 8000782:	6a23      	ldr	r3, [r4, #32]
 8000784:	4637      	mov	r7, r6
 8000786:	f023 0304 	bic.w	r3, r3, #4
 800078a:	6223      	str	r3, [r4, #32]
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800078c:	f7ff fd1e 	bl	80001cc <HAL_GetTick>
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000790:	f241 3988 	movw	r9, #5000	; 0x1388
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000794:	4680      	mov	r8, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000796:	e048      	b.n	800082a <HAL_RCC_OscConfig+0x38e>
 8000798:	40021000 	.word	0x40021000
 800079c:	42420480 	.word	0x42420480
 80007a0:	40007000 	.word	0x40007000
          return HAL_TIMEOUT;
        }
      }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80007a4:	2b05      	cmp	r3, #5
 80007a6:	6a23      	ldr	r3, [r4, #32]
 80007a8:	d106      	bne.n	80007b8 <HAL_RCC_OscConfig+0x31c>
 80007aa:	f043 0304 	orr.w	r3, r3, #4
 80007ae:	6223      	str	r3, [r4, #32]
 80007b0:	6a23      	ldr	r3, [r4, #32]
 80007b2:	f043 0301 	orr.w	r3, r3, #1
 80007b6:	e005      	b.n	80007c4 <HAL_RCC_OscConfig+0x328>
 80007b8:	f023 0301 	bic.w	r3, r3, #1
 80007bc:	6223      	str	r3, [r4, #32]
 80007be:	6a23      	ldr	r3, [r4, #32]
 80007c0:	f023 0304 	bic.w	r3, r3, #4
 80007c4:	6223      	str	r3, [r4, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80007c6:	f7ff fd01 	bl	80001cc <HAL_GetTick>
 80007ca:	2602      	movs	r6, #2
 80007cc:	4681      	mov	r9, r0
 80007ce:	46b0      	mov	r8, r6
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80007d0:	f241 3788 	movw	r7, #5000	; 0x1388
 80007d4:	fa96 f3a6 	rbit	r3, r6
 80007d8:	fa96 f3a6 	rbit	r3, r6
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80007dc:	b10b      	cbz	r3, 80007e2 <HAL_RCC_OscConfig+0x346>
 80007de:	6a22      	ldr	r2, [r4, #32]
 80007e0:	e000      	b.n	80007e4 <HAL_RCC_OscConfig+0x348>
 80007e2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80007e4:	fa98 f3a8 	rbit	r3, r8
 80007e8:	fab3 f383 	clz	r3, r3
 80007ec:	f003 031f 	and.w	r3, r3, #31
 80007f0:	fa22 f303 	lsr.w	r3, r2, r3
 80007f4:	07db      	lsls	r3, r3, #31
 80007f6:	d49b      	bmi.n	8000730 <HAL_RCC_OscConfig+0x294>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80007f8:	f7ff fce8 	bl	80001cc <HAL_GetTick>
 80007fc:	ebc9 0000 	rsb	r0, r9, r0
 8000800:	42b8      	cmp	r0, r7
 8000802:	d9e7      	bls.n	80007d4 <HAL_RCC_OscConfig+0x338>
 8000804:	e6b2      	b.n	800056c <HAL_RCC_OscConfig+0xd0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000806:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000808:	fa97 f3a7 	rbit	r3, r7
 800080c:	fab3 f383 	clz	r3, r3
 8000810:	f003 031f 	and.w	r3, r3, #31
 8000814:	fa22 f303 	lsr.w	r3, r2, r3
 8000818:	07d8      	lsls	r0, r3, #31
 800081a:	d589      	bpl.n	8000730 <HAL_RCC_OscConfig+0x294>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800081c:	f7ff fcd6 	bl	80001cc <HAL_GetTick>
 8000820:	ebc8 0000 	rsb	r0, r8, r0
 8000824:	4548      	cmp	r0, r9
 8000826:	f63f aea1 	bhi.w	800056c <HAL_RCC_OscConfig+0xd0>
 800082a:	fa96 f3a6 	rbit	r3, r6
 800082e:	fa96 f3a6 	rbit	r3, r6
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000832:	2b00      	cmp	r3, #0
 8000834:	d0e7      	beq.n	8000806 <HAL_RCC_OscConfig+0x36a>
 8000836:	6a22      	ldr	r2, [r4, #32]
 8000838:	e7e6      	b.n	8000808 <HAL_RCC_OscConfig+0x36c>
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800083a:	4c47      	ldr	r4, [pc, #284]	; (8000958 <HAL_RCC_OscConfig+0x4bc>)
 800083c:	6863      	ldr	r3, [r4, #4]
 800083e:	f003 030c 	and.w	r3, r3, #12
 8000842:	2b08      	cmp	r3, #8
 8000844:	f43f ae54 	beq.w	80004f0 <HAL_RCC_OscConfig+0x54>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000848:	2a02      	cmp	r2, #2
 800084a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800084e:	d15c      	bne.n	800090a <HAL_RCC_OscConfig+0x46e>
 8000850:	fa93 f3a3 	rbit	r3, r3
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000854:	fab3 f383 	clz	r3, r3
 8000858:	009b      	lsls	r3, r3, #2
 800085a:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 800085e:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 8000862:	2200      	movs	r2, #0
 8000864:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000866:	f7ff fcb1 	bl	80001cc <HAL_GetTick>
 800086a:	4680      	mov	r8, r0
 800086c:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
 8000870:	fa96 f3a6 	rbit	r3, r6
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000874:	4f38      	ldr	r7, [pc, #224]	; (8000958 <HAL_RCC_OscConfig+0x4bc>)
 8000876:	6822      	ldr	r2, [r4, #0]
 8000878:	fa96 f3a6 	rbit	r3, r6
 800087c:	fab3 f383 	clz	r3, r3
 8000880:	f003 031f 	and.w	r3, r3, #31
 8000884:	fa22 f303 	lsr.w	r3, r2, r3
 8000888:	07d9      	lsls	r1, r3, #31
 800088a:	d431      	bmi.n	80008f0 <HAL_RCC_OscConfig+0x454>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800088c:	6a2e      	ldr	r6, [r5, #32]
 800088e:	f5b6 3f80 	cmp.w	r6, #65536	; 0x10000
 8000892:	d105      	bne.n	80008a0 <HAL_RCC_OscConfig+0x404>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000894:	6879      	ldr	r1, [r7, #4]
 8000896:	f421 3000 	bic.w	r0, r1, #131072	; 0x20000
 800089a:	68a9      	ldr	r1, [r5, #8]
 800089c:	4301      	orrs	r1, r0
 800089e:	6079      	str	r1, [r7, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80008a0:	6863      	ldr	r3, [r4, #4]
 80008a2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80008a4:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 80008a8:	4332      	orrs	r2, r6
 80008aa:	4313      	orrs	r3, r2
 80008ac:	6063      	str	r3, [r4, #4]
 80008ae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80008b2:	fa93 f3a3 	rbit	r3, r3
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80008b6:	fab3 f383 	clz	r3, r3
 80008ba:	009b      	lsls	r3, r3, #2
 80008bc:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 80008c0:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 80008c4:	2201      	movs	r2, #1
 80008c6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80008c8:	f7ff fc80 	bl	80001cc <HAL_GetTick>
 80008cc:	4606      	mov	r6, r0
 80008ce:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 80008d2:	fa95 f3a5 	rbit	r3, r5
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80008d6:	6822      	ldr	r2, [r4, #0]
 80008d8:	fa95 f3a5 	rbit	r3, r5
 80008dc:	fab3 f383 	clz	r3, r3
 80008e0:	f003 031f 	and.w	r3, r3, #31
 80008e4:	fa22 f303 	lsr.w	r3, r2, r3
 80008e8:	07da      	lsls	r2, r3, #31
 80008ea:	d508      	bpl.n	80008fe <HAL_RCC_OscConfig+0x462>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80008ec:	2000      	movs	r0, #0
 80008ee:	e02f      	b.n	8000950 <HAL_RCC_OscConfig+0x4b4>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80008f0:	f7ff fc6c 	bl	80001cc <HAL_GetTick>
 80008f4:	ebc8 0000 	rsb	r0, r8, r0
 80008f8:	2802      	cmp	r0, #2
 80008fa:	d9b9      	bls.n	8000870 <HAL_RCC_OscConfig+0x3d4>
 80008fc:	e636      	b.n	800056c <HAL_RCC_OscConfig+0xd0>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80008fe:	f7ff fc65 	bl	80001cc <HAL_GetTick>
 8000902:	1b80      	subs	r0, r0, r6
 8000904:	2802      	cmp	r0, #2
 8000906:	d9e4      	bls.n	80008d2 <HAL_RCC_OscConfig+0x436>
 8000908:	e630      	b.n	800056c <HAL_RCC_OscConfig+0xd0>
 800090a:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800090e:	fab3 f383 	clz	r3, r3
 8000912:	009b      	lsls	r3, r3, #2
 8000914:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
 8000918:	f503 0384 	add.w	r3, r3, #4325376	; 0x420000
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000920:	f7ff fc54 	bl	80001cc <HAL_GetTick>
 8000924:	4606      	mov	r6, r0
 8000926:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 800092a:	fa95 f3a5 	rbit	r3, r5
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800092e:	6822      	ldr	r2, [r4, #0]
 8000930:	fa95 f3a5 	rbit	r3, r5
 8000934:	fab3 f383 	clz	r3, r3
 8000938:	f003 031f 	and.w	r3, r3, #31
 800093c:	fa22 f303 	lsr.w	r3, r2, r3
 8000940:	07db      	lsls	r3, r3, #31
 8000942:	d5d3      	bpl.n	80008ec <HAL_RCC_OscConfig+0x450>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000944:	f7ff fc42 	bl	80001cc <HAL_GetTick>
 8000948:	1b80      	subs	r0, r0, r6
 800094a:	2802      	cmp	r0, #2
 800094c:	d9ed      	bls.n	800092a <HAL_RCC_OscConfig+0x48e>
 800094e:	e60d      	b.n	800056c <HAL_RCC_OscConfig+0xd0>
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 8000950:	b003      	add	sp, #12
 8000952:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000956:	bf00      	nop
 8000958:	40021000 	.word	0x40021000

0800095c <HAL_RCC_GetSysClockFreq>:
{
#if   defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[12] = {0, 0, 4,  5,  6,  7,  8,  9, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
 800095c:	4b1f      	ldr	r3, [pc, #124]	; (80009dc <HAL_RCC_GetSysClockFreq+0x80>)
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800095e:	b570      	push	{r4, r5, r6, lr}
#if   defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[12] = {0, 0, 4,  5,  6,  7,  8,  9, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000960:	f103 0510 	add.w	r5, r3, #16
 8000964:	462e      	mov	r6, r5
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000966:	b086      	sub	sp, #24
#if   defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[12] = {0, 0, 4,  5,  6,  7,  8,  9, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000968:	ac02      	add	r4, sp, #8
 800096a:	4622      	mov	r2, r4
 800096c:	6818      	ldr	r0, [r3, #0]
 800096e:	6859      	ldr	r1, [r3, #4]
 8000970:	3308      	adds	r3, #8
 8000972:	c203      	stmia	r2!, {r0, r1}
 8000974:	42ab      	cmp	r3, r5
 8000976:	4614      	mov	r4, r2
 8000978:	d1f7      	bne.n	800096a <HAL_RCC_GetSysClockFreq+0xe>
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = { 1, 2};
 800097a:	8833      	ldrh	r3, [r6, #0]
  uint32_t sysclockfreq = 0;
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0, pll2mul = 0;
#endif /*RCC_CFGR2_PREDIV1SRC*/
  
  tmpreg = RCC->CFGR;
 800097c:	4c18      	ldr	r4, [pc, #96]	; (80009e0 <HAL_RCC_GetSysClockFreq+0x84>)
#else
  const uint8_t aPLLMULFactorTable[16] = { 2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 16};
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = { 1, 2,  3,  4,  5,  6,  7,  8, 9,10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = { 1, 2};
 800097e:	f8ad 3004 	strh.w	r3, [sp, #4]
  uint32_t sysclockfreq = 0;
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0, pll2mul = 0;
#endif /*RCC_CFGR2_PREDIV1SRC*/
  
  tmpreg = RCC->CFGR;
 8000982:	6860      	ldr	r0, [r4, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000984:	f000 030c 	and.w	r3, r0, #12
 8000988:	2b08      	cmp	r3, #8
 800098a:	d124      	bne.n	80009d6 <HAL_RCC_GetSysClockFreq+0x7a>
 800098c:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8000990:	fa93 f3a3 	rbit	r3, r3
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> POSITION_VAL(RCC_CFGR_PLLMULL)];
 8000994:	fab3 f383 	clz	r3, r3
 8000998:	f400 1270 	and.w	r2, r0, #3932160	; 0x3c0000
 800099c:	fa22 f303 	lsr.w	r3, r2, r3
 80009a0:	aa06      	add	r2, sp, #24
 80009a2:	4413      	add	r3, r2
 80009a4:	f813 1c10 	ldrb.w	r1, [r3, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80009a8:	03c3      	lsls	r3, r0, #15
 80009aa:	d511      	bpl.n	80009d0 <HAL_RCC_GetSysClockFreq+0x74>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> POSITION_VAL(RCC_CFGR2_PREDIV1)];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> POSITION_VAL(RCC_CFGR_PLLXTPRE)];
 80009ac:	6862      	ldr	r2, [r4, #4]
 80009ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80009b2:	fa93 f3a3 	rbit	r3, r3
 80009b6:	fab3 f083 	clz	r0, r3
 80009ba:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80009be:	40c3      	lsrs	r3, r0
 80009c0:	aa06      	add	r2, sp, #24
 80009c2:	4413      	add	r3, r2
        {
            pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
 80009c4:	f813 0c14 	ldrb.w	r0, [r3, #-20]
 80009c8:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <HAL_RCC_GetSysClockFreq+0x88>)
 80009ca:	fbb3 f0f0 	udiv	r0, r3, r0
 80009ce:	e000      	b.n	80009d2 <HAL_RCC_GetSysClockFreq+0x76>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80009d0:	4805      	ldr	r0, [pc, #20]	; (80009e8 <HAL_RCC_GetSysClockFreq+0x8c>)
 80009d2:	4348      	muls	r0, r1
 80009d4:	e000      	b.n	80009d8 <HAL_RCC_GetSysClockFreq+0x7c>
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80009d6:	4803      	ldr	r0, [pc, #12]	; (80009e4 <HAL_RCC_GetSysClockFreq+0x88>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80009d8:	b006      	add	sp, #24
 80009da:	bd70      	pop	{r4, r5, r6, pc}
 80009dc:	08001e14 	.word	0x08001e14
 80009e0:	40021000 	.word	0x40021000
 80009e4:	007a1200 	.word	0x007a1200
 80009e8:	003d0900 	.word	0x003d0900

080009ec <HAL_RCC_ClockConfig>:
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80009ec:	4a54      	ldr	r2, [pc, #336]	; (8000b40 <HAL_RCC_ClockConfig+0x154>)
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80009ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80009f2:	6813      	ldr	r3, [r2, #0]
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80009f4:	4606      	mov	r6, r0
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80009f6:	f003 0307 	and.w	r3, r3, #7
 80009fa:	428b      	cmp	r3, r1
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80009fc:	460d      	mov	r5, r1
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80009fe:	d30a      	bcc.n	8000a16 <HAL_RCC_ClockConfig+0x2a>
    }
  }

#endif /* FLASH_ACR_LATENCY */
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000a00:	6831      	ldr	r1, [r6, #0]
 8000a02:	078c      	lsls	r4, r1, #30
 8000a04:	d514      	bpl.n	8000a30 <HAL_RCC_ClockConfig+0x44>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000a06:	484f      	ldr	r0, [pc, #316]	; (8000b44 <HAL_RCC_ClockConfig+0x158>)
 8000a08:	6843      	ldr	r3, [r0, #4]
 8000a0a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000a0e:	68b3      	ldr	r3, [r6, #8]
 8000a10:	4313      	orrs	r3, r2
 8000a12:	6043      	str	r3, [r0, #4]
 8000a14:	e00c      	b.n	8000a30 <HAL_RCC_ClockConfig+0x44>
#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000a16:	6813      	ldr	r3, [r2, #0]
 8000a18:	f023 0307 	bic.w	r3, r3, #7
 8000a1c:	430b      	orrs	r3, r1
 8000a1e:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000a20:	6813      	ldr	r3, [r2, #0]
 8000a22:	f003 0307 	and.w	r3, r3, #7
 8000a26:	4299      	cmp	r1, r3
 8000a28:	d0ea      	beq.n	8000a00 <HAL_RCC_ClockConfig+0x14>
    {
      return HAL_ERROR;
 8000a2a:	2001      	movs	r0, #1
 8000a2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000a30:	07c8      	lsls	r0, r1, #31
 8000a32:	d406      	bmi.n	8000a42 <HAL_RCC_ClockConfig+0x56>
      }
    }      
  }    
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000a34:	4a42      	ldr	r2, [pc, #264]	; (8000b40 <HAL_RCC_ClockConfig+0x154>)
 8000a36:	6813      	ldr	r3, [r2, #0]
 8000a38:	f003 0307 	and.w	r3, r3, #7
 8000a3c:	429d      	cmp	r5, r3
 8000a3e:	d34a      	bcc.n	8000ad6 <HAL_RCC_ClockConfig+0xea>
 8000a40:	e053      	b.n	8000aea <HAL_RCC_ClockConfig+0xfe>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000a42:	6872      	ldr	r2, [r6, #4]
 8000a44:	4c3f      	ldr	r4, [pc, #252]	; (8000b44 <HAL_RCC_ClockConfig+0x158>)
 8000a46:	2a01      	cmp	r2, #1
 8000a48:	d102      	bne.n	8000a50 <HAL_RCC_ClockConfig+0x64>
 8000a4a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a4e:	e004      	b.n	8000a5a <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000a50:	2a02      	cmp	r2, #2
 8000a52:	bf0c      	ite	eq
 8000a54:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8000a58:	2302      	movne	r3, #2
 8000a5a:	fa93 f1a3 	rbit	r1, r3
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a5e:	6821      	ldr	r1, [r4, #0]
 8000a60:	fa93 f3a3 	rbit	r3, r3
 8000a64:	fab3 f383 	clz	r3, r3
 8000a68:	f003 031f 	and.w	r3, r3, #31
 8000a6c:	fa21 f303 	lsr.w	r3, r1, r3
 8000a70:	07d9      	lsls	r1, r3, #31
 8000a72:	d5da      	bpl.n	8000a2a <HAL_RCC_ClockConfig+0x3e>
      {
        return HAL_ERROR;
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000a74:	6863      	ldr	r3, [r4, #4]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a76:	f241 3888 	movw	r8, #5000	; 0x1388
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
      {
        return HAL_ERROR;
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000a7a:	f023 0303 	bic.w	r3, r3, #3
 8000a7e:	431a      	orrs	r2, r3
 8000a80:	6062      	str	r2, [r4, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000a82:	f7ff fba3 	bl	80001cc <HAL_GetTick>
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000a86:	6873      	ldr	r3, [r6, #4]
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000a88:	4607      	mov	r7, r0
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000a8a:	2b01      	cmp	r3, #1
 8000a8c:	d10c      	bne.n	8000aa8 <HAL_RCC_ClockConfig+0xbc>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000a8e:	6863      	ldr	r3, [r4, #4]
 8000a90:	f003 030c 	and.w	r3, r3, #12
 8000a94:	2b04      	cmp	r3, #4
 8000a96:	d0cd      	beq.n	8000a34 <HAL_RCC_ClockConfig+0x48>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000a98:	f7ff fb98 	bl	80001cc <HAL_GetTick>
 8000a9c:	1bc0      	subs	r0, r0, r7
 8000a9e:	4540      	cmp	r0, r8
 8000aa0:	d9f5      	bls.n	8000a8e <HAL_RCC_ClockConfig+0xa2>
        {
          return HAL_TIMEOUT;
 8000aa2:	2003      	movs	r0, #3
 8000aa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000aa8:	2b02      	cmp	r3, #2
 8000aaa:	d10f      	bne.n	8000acc <HAL_RCC_ClockConfig+0xe0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000aac:	6863      	ldr	r3, [r4, #4]
 8000aae:	f003 030c 	and.w	r3, r3, #12
 8000ab2:	2b08      	cmp	r3, #8
 8000ab4:	d0be      	beq.n	8000a34 <HAL_RCC_ClockConfig+0x48>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ab6:	f7ff fb89 	bl	80001cc <HAL_GetTick>
 8000aba:	1bc0      	subs	r0, r0, r7
 8000abc:	4540      	cmp	r0, r8
 8000abe:	d9f5      	bls.n	8000aac <HAL_RCC_ClockConfig+0xc0>
 8000ac0:	e7ef      	b.n	8000aa2 <HAL_RCC_ClockConfig+0xb6>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ac2:	f7ff fb83 	bl	80001cc <HAL_GetTick>
 8000ac6:	1bc0      	subs	r0, r0, r7
 8000ac8:	4540      	cmp	r0, r8
 8000aca:	d8ea      	bhi.n	8000aa2 <HAL_RCC_ClockConfig+0xb6>
        }
      }
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000acc:	6863      	ldr	r3, [r4, #4]
 8000ace:	f013 0f0c 	tst.w	r3, #12
 8000ad2:	d1f6      	bne.n	8000ac2 <HAL_RCC_ClockConfig+0xd6>
 8000ad4:	e7ae      	b.n	8000a34 <HAL_RCC_ClockConfig+0x48>
#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ad6:	6813      	ldr	r3, [r2, #0]
 8000ad8:	f023 0307 	bic.w	r3, r3, #7
 8000adc:	432b      	orrs	r3, r5
 8000ade:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000ae0:	6813      	ldr	r3, [r2, #0]
 8000ae2:	f003 0307 	and.w	r3, r3, #7
 8000ae6:	429d      	cmp	r5, r3
 8000ae8:	d19f      	bne.n	8000a2a <HAL_RCC_ClockConfig+0x3e>
    }
  }    
#endif /* FLASH_ACR_LATENCY */

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000aea:	6831      	ldr	r1, [r6, #0]
 8000aec:	4c15      	ldr	r4, [pc, #84]	; (8000b44 <HAL_RCC_ClockConfig+0x158>)
 8000aee:	f011 0f04 	tst.w	r1, #4
 8000af2:	d005      	beq.n	8000b00 <HAL_RCC_ClockConfig+0x114>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000af4:	6863      	ldr	r3, [r4, #4]
 8000af6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000afa:	68f3      	ldr	r3, [r6, #12]
 8000afc:	4313      	orrs	r3, r2
 8000afe:	6063      	str	r3, [r4, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000b00:	070b      	lsls	r3, r1, #28
 8000b02:	d506      	bpl.n	8000b12 <HAL_RCC_ClockConfig+0x126>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000b04:	6863      	ldr	r3, [r4, #4]
 8000b06:	6932      	ldr	r2, [r6, #16]
 8000b08:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000b0c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000b10:	6063      	str	r3, [r4, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000b12:	f7ff ff23 	bl	800095c <HAL_RCC_GetSysClockFreq>
 8000b16:	6863      	ldr	r3, [r4, #4]
 8000b18:	22f0      	movs	r2, #240	; 0xf0
 8000b1a:	fa92 f2a2 	rbit	r2, r2
 8000b1e:	fab2 f282 	clz	r2, r2
 8000b22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000b26:	40d3      	lsrs	r3, r2
 8000b28:	4a07      	ldr	r2, [pc, #28]	; (8000b48 <HAL_RCC_ClockConfig+0x15c>)
 8000b2a:	5cd3      	ldrb	r3, [r2, r3]
 8000b2c:	40d8      	lsrs	r0, r3
 8000b2e:	4b07      	ldr	r3, [pc, #28]	; (8000b4c <HAL_RCC_ClockConfig+0x160>)
 8000b30:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8000b32:	2000      	movs	r0, #0
 8000b34:	f001 f8be 	bl	8001cb4 <HAL_InitTick>
  
  return HAL_OK;
 8000b38:	2000      	movs	r0, #0
}
 8000b3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000b3e:	bf00      	nop
 8000b40:	40022000 	.word	0x40022000
 8000b44:	40021000 	.word	0x40021000
 8000b48:	08001e4d 	.word	0x08001e4d
 8000b4c:	20000004 	.word	0x20000004

08000b50 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8000b50:	4b01      	ldr	r3, [pc, #4]	; (8000b58 <HAL_RCC_GetHCLKFreq+0x8>)
 8000b52:	6818      	ldr	r0, [r3, #0]
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	20000004 	.word	0x20000004

08000b5c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8000b5c:	4b08      	ldr	r3, [pc, #32]	; (8000b80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000b5e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000b62:	685b      	ldr	r3, [r3, #4]
 8000b64:	fa92 f2a2 	rbit	r2, r2
 8000b68:	fab2 f282 	clz	r2, r2
 8000b6c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8000b70:	40d3      	lsrs	r3, r2
 8000b72:	4a04      	ldr	r2, [pc, #16]	; (8000b84 <HAL_RCC_GetPCLK2Freq+0x28>)
 8000b74:	5cd3      	ldrb	r3, [r2, r3]
 8000b76:	4a04      	ldr	r2, [pc, #16]	; (8000b88 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8000b78:	6810      	ldr	r0, [r2, #0]
} 
 8000b7a:	40d8      	lsrs	r0, r3
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	40021000 	.word	0x40021000
 8000b84:	08001e5d 	.word	0x08001e5d
 8000b88:	20000004 	.word	0x20000004

08000b8c <HAL_RCC_GetClockConfig>:
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000b8c:	230f      	movs	r3, #15
 8000b8e:	6003      	str	r3, [r0, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8000b90:	4b0b      	ldr	r3, [pc, #44]	; (8000bc0 <HAL_RCC_GetClockConfig+0x34>)
 8000b92:	685a      	ldr	r2, [r3, #4]
 8000b94:	f002 0203 	and.w	r2, r2, #3
 8000b98:	6042      	str	r2, [r0, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8000b9a:	685a      	ldr	r2, [r3, #4]
 8000b9c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8000ba0:	6082      	str	r2, [r0, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8000ba2:	685a      	ldr	r2, [r3, #4]
 8000ba4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8000ba8:	60c2      	str	r2, [r0, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8000baa:	685b      	ldr	r3, [r3, #4]
 8000bac:	08db      	lsrs	r3, r3, #3
 8000bae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000bb2:	6103      	str	r3, [r0, #16]
  
#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8000bb4:	4b03      	ldr	r3, [pc, #12]	; (8000bc4 <HAL_RCC_GetClockConfig+0x38>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	f003 0307 	and.w	r3, r3, #7
 8000bbc:	600b      	str	r3, [r1, #0]
 8000bbe:	4770      	bx	lr
 8000bc0:	40021000 	.word	0x40021000
 8000bc4:	40022000 	.word	0x40022000

08000bc8 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000bc8:	6803      	ldr	r3, [r0, #0]
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);

  /* Return function status */
  return HAL_OK;
}
 8000bca:	2000      	movs	r0, #0
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000bcc:	68da      	ldr	r2, [r3, #12]
 8000bce:	f042 0201 	orr.w	r2, r2, #1
 8000bd2:	60da      	str	r2, [r3, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8000bd4:	681a      	ldr	r2, [r3, #0]
 8000bd6:	f042 0201 	orr.w	r2, r2, #1
 8000bda:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 8000bdc:	4770      	bx	lr

08000bde <HAL_TIM_ConfigClockSource>:
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
  uint32_t tmpsmcr = 0;

  /* Process Locked */
  __HAL_LOCK(htim);
 8000bde:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
  * @param  sClockSourceConfig : pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
 8000be2:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpsmcr = 0;

  /* Process Locked */
  __HAL_LOCK(htim);
 8000be4:	2b01      	cmp	r3, #1
 8000be6:	f04f 0302 	mov.w	r3, #2
 8000bea:	f000 80b0 	beq.w	8000d4e <HAL_TIM_ConfigClockSource+0x170>

  htim->State = HAL_TIM_STATE_BUSY;
 8000bee:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8000bf2:	6803      	ldr	r3, [r0, #0]
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
  uint32_t tmpsmcr = 0;

  /* Process Locked */
  __HAL_LOCK(htim);
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8000bfa:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000bfc:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8000c00:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8000c04:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8000c06:	680a      	ldr	r2, [r1, #0]
 8000c08:	2a40      	cmp	r2, #64	; 0x40
 8000c0a:	d077      	beq.n	8000cfc <HAL_TIM_ConfigClockSource+0x11e>
 8000c0c:	d818      	bhi.n	8000c40 <HAL_TIM_ConfigClockSource+0x62>
 8000c0e:	2a10      	cmp	r2, #16
 8000c10:	f000 808b 	beq.w	8000d2a <HAL_TIM_ConfigClockSource+0x14c>
 8000c14:	d808      	bhi.n	8000c28 <HAL_TIM_ConfigClockSource+0x4a>
 8000c16:	2a00      	cmp	r2, #0
 8000c18:	f040 8093 	bne.w	8000d42 <HAL_TIM_ConfigClockSource+0x164>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8000c1c:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8000c1e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000c22:	f042 0207 	orr.w	r2, r2, #7
 8000c26:	e08b      	b.n	8000d40 <HAL_TIM_ConfigClockSource+0x162>
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;

  switch (sClockSourceConfig->ClockSource)
 8000c28:	2a20      	cmp	r2, #32
 8000c2a:	f000 8084 	beq.w	8000d36 <HAL_TIM_ConfigClockSource+0x158>
 8000c2e:	2a30      	cmp	r2, #48	; 0x30
 8000c30:	f040 8087 	bne.w	8000d42 <HAL_TIM_ConfigClockSource+0x164>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8000c34:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8000c36:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000c3a:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 8000c3e:	e07f      	b.n	8000d40 <HAL_TIM_ConfigClockSource+0x162>
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;

  switch (sClockSourceConfig->ClockSource)
 8000c40:	2a70      	cmp	r2, #112	; 0x70
 8000c42:	d035      	beq.n	8000cb0 <HAL_TIM_ConfigClockSource+0xd2>
 8000c44:	d81b      	bhi.n	8000c7e <HAL_TIM_ConfigClockSource+0xa0>
 8000c46:	2a50      	cmp	r2, #80	; 0x50
 8000c48:	d041      	beq.n	8000cce <HAL_TIM_ConfigClockSource+0xf0>
 8000c4a:	2a60      	cmp	r2, #96	; 0x60
 8000c4c:	d179      	bne.n	8000d42 <HAL_TIM_ConfigClockSource+0x164>
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000c4e:	6a1c      	ldr	r4, [r3, #32]

       /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8000c50:	684d      	ldr	r5, [r1, #4]
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000c52:	f024 0410 	bic.w	r4, r4, #16

       /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8000c56:	68ce      	ldr	r6, [r1, #12]
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000c58:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000c5a:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8000c5c:	6a1a      	ldr	r2, [r3, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8000c5e:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8000c62:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4);
 8000c66:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
  tmpccmr1 |= (TIM_ICFilter << 12);
 8000c6a:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |= (TIM_ICPolarity << 4);

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8000c6e:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8000c70:	621a      	str	r2, [r3, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8000c72:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8000c74:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000c78:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 8000c7c:	e060      	b.n	8000d40 <HAL_TIM_ConfigClockSource+0x162>
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;

  switch (sClockSourceConfig->ClockSource)
 8000c7e:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8000c82:	d011      	beq.n	8000ca8 <HAL_TIM_ConfigClockSource+0xca>
 8000c84:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8000c88:	d15b      	bne.n	8000d42 <HAL_TIM_ConfigClockSource+0x164>
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr = 0;

  tmpsmcr = TIMx->SMCR;
 8000c8a:	689c      	ldr	r4, [r3, #8]
 8000c8c:	688d      	ldr	r5, [r1, #8]
 8000c8e:	684a      	ldr	r2, [r1, #4]
 8000c90:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8000c94:	68c9      	ldr	r1, [r1, #12]
 8000c96:	432a      	orrs	r2, r5
 8000c98:	4322      	orrs	r2, r4
 8000c9a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8000c9e:	609a      	str	r2, [r3, #8]
      TIM_ETR_SetConfig(htim->Instance,
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8000ca0:	689a      	ldr	r2, [r3, #8]
 8000ca2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000ca6:	e04b      	b.n	8000d40 <HAL_TIM_ConfigClockSource+0x162>
  {
  case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
      /* Disable slave mode to clock the prescaler directly with the internal clock */
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8000ca8:	689a      	ldr	r2, [r3, #8]
 8000caa:	f022 0207 	bic.w	r2, r2, #7
 8000cae:	e047      	b.n	8000d40 <HAL_TIM_ConfigClockSource+0x162>
static void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr = 0;

  tmpsmcr = TIMx->SMCR;
 8000cb0:	689c      	ldr	r4, [r3, #8]
 8000cb2:	688d      	ldr	r5, [r1, #8]
 8000cb4:	684a      	ldr	r2, [r1, #4]
 8000cb6:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8000cba:	68c9      	ldr	r1, [r1, #12]
 8000cbc:	432a      	orrs	r2, r5
 8000cbe:	4322      	orrs	r2, r4
 8000cc0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8000cc4:	609a      	str	r2, [r3, #8]
      TIM_ETR_SetConfig(htim->Instance,
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Get the TIMx SMCR register value */
      tmpsmcr = htim->Instance->SMCR;
 8000cc6:	689a      	ldr	r2, [r3, #8]
      /* Reset the SMS and TS Bits */
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8000cc8:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 8000ccc:	e038      	b.n	8000d40 <HAL_TIM_ConfigClockSource+0x162>
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8000cce:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000cd0:	6a1c      	ldr	r4, [r3, #32]

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
      
      TIM_TI1_ConfigInputStage(htim->Instance,
 8000cd2:	684d      	ldr	r5, [r1, #4]
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000cd4:	f024 0401 	bic.w	r4, r4, #1

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
      
      TIM_TI1_ConfigInputStage(htim->Instance,
 8000cd8:	68ce      	ldr	r6, [r1, #12]
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000cda:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000cdc:	6999      	ldr	r1, [r3, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000cde:	f022 020a 	bic.w	r2, r2, #10
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000ce2:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;
 8000ce6:	432a      	orrs	r2, r5
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4);
 8000ce8:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8000cec:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8000cee:	621a      	str	r2, [r3, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8000cf0:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8000cf2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000cf6:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 8000cfa:	e021      	b.n	8000d40 <HAL_TIM_ConfigClockSource+0x162>
{
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8000cfc:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000cfe:	6a1c      	ldr	r4, [r3, #32]

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8000d00:	684d      	ldr	r5, [r1, #4]
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000d02:	f024 0401 	bic.w	r4, r4, #1

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8000d06:	68ce      	ldr	r6, [r1, #12]
  uint32_t tmpccmr1 = 0;
  uint32_t tmpccer = 0;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000d08:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000d0a:	6999      	ldr	r1, [r3, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000d0c:	f022 020a 	bic.w	r2, r2, #10
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000d10:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;
 8000d14:	432a      	orrs	r2, r5
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4);
 8000d16:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8000d1a:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8000d1c:	621a      	str	r2, [r3, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8000d1e:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8000d20:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000d24:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 8000d28:	e00a      	b.n	8000d40 <HAL_TIM_ConfigClockSource+0x162>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8000d2a:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8000d2c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000d30:	f042 0217 	orr.w	r2, r2, #23
 8000d34:	e004      	b.n	8000d40 <HAL_TIM_ConfigClockSource+0x162>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8000d36:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8000d38:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000d3c:	f042 0227 	orr.w	r2, r2, #39	; 0x27
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8000d40:	609a      	str	r2, [r3, #8]
    break;

  default:
    break;
  }
  htim->State = HAL_TIM_STATE_READY;
 8000d42:	2301      	movs	r3, #1
 8000d44:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8000d48:	2300      	movs	r3, #0
 8000d4a:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
  uint32_t tmpsmcr = 0;

  /* Process Locked */
  __HAL_LOCK(htim);
 8000d4e:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);

  return HAL_OK;
}
 8000d50:	bd70      	pop	{r4, r5, r6, pc}

08000d52 <HAL_TIM_OC_DelayElapsedCallback>:
 8000d52:	4770      	bx	lr

08000d54 <HAL_TIM_IC_CaptureCallback>:
 8000d54:	4770      	bx	lr

08000d56 <HAL_TIM_PWM_PulseFinishedCallback>:
 8000d56:	4770      	bx	lr

08000d58 <HAL_TIM_TriggerCallback>:
 8000d58:	4770      	bx	lr

08000d5a <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000d5a:	6803      	ldr	r3, [r0, #0]
  * @brief  This function handles TIM interrupts requests.
  * @param  htim : TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8000d5c:	b510      	push	{r4, lr}
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000d5e:	691a      	ldr	r2, [r3, #16]
  * @brief  This function handles TIM interrupts requests.
  * @param  htim : TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8000d60:	4604      	mov	r4, r0
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000d62:	0791      	lsls	r1, r2, #30
 8000d64:	d514      	bpl.n	8000d90 <HAL_TIM_IRQHandler+0x36>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8000d66:	68da      	ldr	r2, [r3, #12]
 8000d68:	0792      	lsls	r2, r2, #30
 8000d6a:	d511      	bpl.n	8000d90 <HAL_TIM_IRQHandler+0x36>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8000d6c:	f06f 0202 	mvn.w	r2, #2
 8000d70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8000d72:	699b      	ldr	r3, [r3, #24]
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000d74:	2201      	movs	r2, #1

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8000d76:	079b      	lsls	r3, r3, #30
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000d78:	7602      	strb	r2, [r0, #24]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8000d7a:	d002      	beq.n	8000d82 <HAL_TIM_IRQHandler+0x28>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8000d7c:	f7ff ffea 	bl	8000d54 <HAL_TIM_IC_CaptureCallback>
 8000d80:	e004      	b.n	8000d8c <HAL_TIM_IRQHandler+0x32>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8000d82:	f7ff ffe6 	bl	8000d52 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000d86:	4620      	mov	r0, r4
 8000d88:	f7ff ffe5 	bl	8000d56 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	7623      	strb	r3, [r4, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8000d90:	6823      	ldr	r3, [r4, #0]
 8000d92:	691a      	ldr	r2, [r3, #16]
 8000d94:	0750      	lsls	r0, r2, #29
 8000d96:	d516      	bpl.n	8000dc6 <HAL_TIM_IRQHandler+0x6c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8000d98:	68da      	ldr	r2, [r3, #12]
 8000d9a:	0751      	lsls	r1, r2, #29
 8000d9c:	d513      	bpl.n	8000dc6 <HAL_TIM_IRQHandler+0x6c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8000d9e:	f06f 0204 	mvn.w	r2, #4
 8000da2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8000da4:	699b      	ldr	r3, [r3, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000da6:	2202      	movs	r2, #2
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8000da8:	f413 7f40 	tst.w	r3, #768	; 0x300
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000dac:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8000dae:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8000db0:	d002      	beq.n	8000db8 <HAL_TIM_IRQHandler+0x5e>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8000db2:	f7ff ffcf 	bl	8000d54 <HAL_TIM_IC_CaptureCallback>
 8000db6:	e004      	b.n	8000dc2 <HAL_TIM_IRQHandler+0x68>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000db8:	f7ff ffcb 	bl	8000d52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000dbc:	4620      	mov	r0, r4
 8000dbe:	f7ff ffca 	bl	8000d56 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8000dc6:	6823      	ldr	r3, [r4, #0]
 8000dc8:	691a      	ldr	r2, [r3, #16]
 8000dca:	0712      	lsls	r2, r2, #28
 8000dcc:	d515      	bpl.n	8000dfa <HAL_TIM_IRQHandler+0xa0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8000dce:	68da      	ldr	r2, [r3, #12]
 8000dd0:	0710      	lsls	r0, r2, #28
 8000dd2:	d512      	bpl.n	8000dfa <HAL_TIM_IRQHandler+0xa0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8000dd4:	f06f 0208 	mvn.w	r2, #8
 8000dd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8000dda:	69db      	ldr	r3, [r3, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000ddc:	2204      	movs	r2, #4
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8000dde:	0799      	lsls	r1, r3, #30
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000de0:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8000de2:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8000de4:	d002      	beq.n	8000dec <HAL_TIM_IRQHandler+0x92>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8000de6:	f7ff ffb5 	bl	8000d54 <HAL_TIM_IC_CaptureCallback>
 8000dea:	e004      	b.n	8000df6 <HAL_TIM_IRQHandler+0x9c>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000dec:	f7ff ffb1 	bl	8000d52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000df0:	4620      	mov	r0, r4
 8000df2:	f7ff ffb0 	bl	8000d56 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000df6:	2300      	movs	r3, #0
 8000df8:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8000dfa:	6823      	ldr	r3, [r4, #0]
 8000dfc:	691a      	ldr	r2, [r3, #16]
 8000dfe:	06d2      	lsls	r2, r2, #27
 8000e00:	d516      	bpl.n	8000e30 <HAL_TIM_IRQHandler+0xd6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8000e02:	68da      	ldr	r2, [r3, #12]
 8000e04:	06d0      	lsls	r0, r2, #27
 8000e06:	d513      	bpl.n	8000e30 <HAL_TIM_IRQHandler+0xd6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8000e08:	f06f 0210 	mvn.w	r2, #16
 8000e0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8000e0e:	69db      	ldr	r3, [r3, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000e10:	2208      	movs	r2, #8
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8000e12:	f413 7f40 	tst.w	r3, #768	; 0x300
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000e16:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8000e18:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8000e1a:	d002      	beq.n	8000e22 <HAL_TIM_IRQHandler+0xc8>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8000e1c:	f7ff ff9a 	bl	8000d54 <HAL_TIM_IC_CaptureCallback>
 8000e20:	e004      	b.n	8000e2c <HAL_TIM_IRQHandler+0xd2>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000e22:	f7ff ff96 	bl	8000d52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000e26:	4620      	mov	r0, r4
 8000e28:	f7ff ff95 	bl	8000d56 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	7623      	strb	r3, [r4, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8000e30:	6823      	ldr	r3, [r4, #0]
 8000e32:	691a      	ldr	r2, [r3, #16]
 8000e34:	07d1      	lsls	r1, r2, #31
 8000e36:	d508      	bpl.n	8000e4a <HAL_TIM_IRQHandler+0xf0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8000e38:	68da      	ldr	r2, [r3, #12]
 8000e3a:	07d2      	lsls	r2, r2, #31
 8000e3c:	d505      	bpl.n	8000e4a <HAL_TIM_IRQHandler+0xf0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8000e3e:	f06f 0201 	mvn.w	r2, #1
 8000e42:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8000e44:	4620      	mov	r0, r4
 8000e46:	f000 feb3 	bl	8001bb0 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8000e4a:	6823      	ldr	r3, [r4, #0]
 8000e4c:	691a      	ldr	r2, [r3, #16]
 8000e4e:	0610      	lsls	r0, r2, #24
 8000e50:	d508      	bpl.n	8000e64 <HAL_TIM_IRQHandler+0x10a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8000e52:	68da      	ldr	r2, [r3, #12]
 8000e54:	0611      	lsls	r1, r2, #24
 8000e56:	d505      	bpl.n	8000e64 <HAL_TIM_IRQHandler+0x10a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8000e58:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8000e5c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8000e5e:	4620      	mov	r0, r4
 8000e60:	f000 f88f 	bl	8000f82 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8000e64:	6823      	ldr	r3, [r4, #0]
 8000e66:	691a      	ldr	r2, [r3, #16]
 8000e68:	0652      	lsls	r2, r2, #25
 8000e6a:	d508      	bpl.n	8000e7e <HAL_TIM_IRQHandler+0x124>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8000e6c:	68da      	ldr	r2, [r3, #12]
 8000e6e:	0650      	lsls	r0, r2, #25
 8000e70:	d505      	bpl.n	8000e7e <HAL_TIM_IRQHandler+0x124>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8000e72:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8000e76:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8000e78:	4620      	mov	r0, r4
 8000e7a:	f7ff ff6d 	bl	8000d58 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8000e7e:	6823      	ldr	r3, [r4, #0]
 8000e80:	691a      	ldr	r2, [r3, #16]
 8000e82:	0691      	lsls	r1, r2, #26
 8000e84:	d50a      	bpl.n	8000e9c <HAL_TIM_IRQHandler+0x142>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8000e86:	68da      	ldr	r2, [r3, #12]
 8000e88:	0692      	lsls	r2, r2, #26
 8000e8a:	d507      	bpl.n	8000e9c <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000e8c:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8000e90:	4620      	mov	r0, r4
    }
  }
}
 8000e92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000e96:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8000e98:	f000 b872 	b.w	8000f80 <HAL_TIMEx_CommutationCallback>
 8000e9c:	bd10      	pop	{r4, pc}
	...

08000ea0 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000ea0:	4a18      	ldr	r2, [pc, #96]	; (8000f04 <TIM_Base_SetConfig+0x64>)
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
 8000ea2:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000ea4:	4290      	cmp	r0, r2
 8000ea6:	d00a      	beq.n	8000ebe <TIM_Base_SetConfig+0x1e>
 8000ea8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000eac:	d007      	beq.n	8000ebe <TIM_Base_SetConfig+0x1e>
 8000eae:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8000eb2:	4290      	cmp	r0, r2
 8000eb4:	d003      	beq.n	8000ebe <TIM_Base_SetConfig+0x1e>
 8000eb6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000eba:	4290      	cmp	r0, r2
 8000ebc:	d115      	bne.n	8000eea <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8000ebe:	684a      	ldr	r2, [r1, #4]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000ec0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8000ec4:	4313      	orrs	r3, r2
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000ec6:	4a0f      	ldr	r2, [pc, #60]	; (8000f04 <TIM_Base_SetConfig+0x64>)
 8000ec8:	4290      	cmp	r0, r2
 8000eca:	d00a      	beq.n	8000ee2 <TIM_Base_SetConfig+0x42>
 8000ecc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000ed0:	d007      	beq.n	8000ee2 <TIM_Base_SetConfig+0x42>
 8000ed2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8000ed6:	4290      	cmp	r0, r2
 8000ed8:	d003      	beq.n	8000ee2 <TIM_Base_SetConfig+0x42>
 8000eda:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000ede:	4290      	cmp	r0, r2
 8000ee0:	d103      	bne.n	8000eea <TIM_Base_SetConfig+0x4a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000ee2:	68ca      	ldr	r2, [r1, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8000ee4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000ee8:	4313      	orrs	r3, r2
  }

  TIMx->CR1 = tmpcr1;
 8000eea:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000eec:	688b      	ldr	r3, [r1, #8]
 8000eee:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8000ef0:	680b      	ldr	r3, [r1, #0]
 8000ef2:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8000ef4:	4b03      	ldr	r3, [pc, #12]	; (8000f04 <TIM_Base_SetConfig+0x64>)
 8000ef6:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8000ef8:	bf04      	itt	eq
 8000efa:	690b      	ldreq	r3, [r1, #16]
 8000efc:	6303      	streq	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8000efe:	2301      	movs	r3, #1
 8000f00:	6143      	str	r3, [r0, #20]
 8000f02:	4770      	bx	lr
 8000f04:	40012c00 	.word	0x40012c00

08000f08 <HAL_TIM_Base_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim : TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8000f08:	b510      	push	{r4, lr}
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8000f0a:	4604      	mov	r4, r0
 8000f0c:	b1a0      	cbz	r0, 8000f38 <HAL_TIM_Base_Init+0x30>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));

  if(htim->State == HAL_TIM_STATE_RESET)
 8000f0e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000f12:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000f16:	b91b      	cbnz	r3, 8000f20 <HAL_TIM_Base_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8000f18:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8000f1c:	f000 feae 	bl	8001c7c <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8000f20:	2302      	movs	r3, #2
 8000f22:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000f26:	6820      	ldr	r0, [r4, #0]
 8000f28:	1d21      	adds	r1, r4, #4
 8000f2a:	f7ff ffb9 	bl	8000ea0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  return HAL_OK;
 8000f34:	2000      	movs	r0, #0
 8000f36:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 8000f38:	2001      	movs	r0, #1

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;

  return HAL_OK;
}
 8000f3a:	bd10      	pop	{r4, pc}

08000f3c <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8000f3c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
  *         contains the selected trigger output (TRGO) and the Master/Slave
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 8000f40:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8000f42:	2b01      	cmp	r3, #1
 8000f44:	f04f 0302 	mov.w	r3, #2
 8000f48:	d018      	beq.n	8000f7c <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 8000f4a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8000f4e:	6803      	ldr	r3, [r0, #0]
 8000f50:	685a      	ldr	r2, [r3, #4]
 8000f52:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000f56:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8000f58:	685c      	ldr	r4, [r3, #4]
 8000f5a:	680a      	ldr	r2, [r1, #0]
 8000f5c:	4322      	orrs	r2, r4
 8000f5e:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8000f60:	689a      	ldr	r2, [r3, #8]
 8000f62:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f66:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8000f68:	689c      	ldr	r4, [r3, #8]
 8000f6a:	684a      	ldr	r2, [r1, #4]
 8000f6c:	4322      	orrs	r2, r4
 8000f6e:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 8000f70:	2301      	movs	r3, #1
 8000f72:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8000f76:	2300      	movs	r3, #0
 8000f78:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8000f7c:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);

  return HAL_OK;
}
 8000f7e:	bd10      	pop	{r4, pc}

08000f80 <HAL_TIMEx_CommutationCallback>:
 8000f80:	4770      	bx	lr

08000f82 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8000f82:	4770      	bx	lr

08000f84 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8000f84:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8000f86:	f000 fb77 	bl	8001678 <vTaskStartScheduler>
  
  return osOK;
}
 8000f8a:	2000      	movs	r0, #0
 8000f8c:	bd08      	pop	{r3, pc}

08000f8e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8000f8e:	b570      	push	{r4, r5, r6, lr}
  TaskHandle_t handle;
  
  
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8000f90:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 8000f94:	2500      	movs	r5, #0
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 8000f96:	2c84      	cmp	r4, #132	; 0x84
extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8000f98:	bf08      	it	eq
 8000f9a:	462c      	moveq	r4, r5
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8000f9c:	b086      	sub	sp, #24
  TaskHandle_t handle;
  
  
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8000f9e:	8a02      	ldrh	r2, [r0, #16]
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
    fpriority += (priority - osPriorityIdle);
 8000fa0:	bf18      	it	ne
 8000fa2:	3403      	addne	r4, #3
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8000fa4:	460b      	mov	r3, r1
  TaskHandle_t handle;
  
  
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8000fa6:	e890 0042 	ldmia.w	r0, {r1, r6}
 8000faa:	a805      	add	r0, sp, #20
 8000fac:	9001      	str	r0, [sp, #4]
 8000fae:	9503      	str	r5, [sp, #12]
 8000fb0:	9502      	str	r5, [sp, #8]
 8000fb2:	9400      	str	r4, [sp, #0]
 8000fb4:	4630      	mov	r0, r6
 8000fb6:	f000 fa7f 	bl	80014b8 <xTaskGenericCreate>
 8000fba:	2801      	cmp	r0, #1
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              &handle) != pdPASS)  {
    return NULL;
  }
  
  return handle;
 8000fbc:	bf0c      	ite	eq
 8000fbe:	9805      	ldreq	r0, [sp, #20]
  
  
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              &handle) != pdPASS)  {
    return NULL;
 8000fc0:	2000      	movne	r0, #0
  }
  
  return handle;
}
 8000fc2:	b006      	add	sp, #24
 8000fc4:	bd70      	pop	{r4, r5, r6, pc}

08000fc6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8000fc6:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8000fc8:	2800      	cmp	r0, #0
 8000fca:	bf08      	it	eq
 8000fcc:	2001      	moveq	r0, #1
 8000fce:	f000 fc85 	bl	80018dc <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8000fd2:	2000      	movs	r0, #0
 8000fd4:	bd08      	pop	{r3, pc}

08000fd6 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8000fd6:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000fd8:	f000 fd18 	bl	8001a0c <xTaskGetSchedulerState>
 8000fdc:	2801      	cmp	r0, #1
 8000fde:	d003      	beq.n	8000fe8 <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 8000fe0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 8000fe4:	f000 b8e8 	b.w	80011b8 <xPortSysTickHandler>
 8000fe8:	bd08      	pop	{r3, pc}

08000fea <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000fea:	f100 0308 	add.w	r3, r0, #8
 8000fee:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000ff0:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000ff4:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000ff6:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000ff8:	2300      	movs	r3, #0
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000ffa:	6082      	str	r2, [r0, #8]
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000ffc:	6003      	str	r3, [r0, #0]
 8000ffe:	4770      	bx	lr

08001000 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001000:	2300      	movs	r3, #0
 8001002:	6103      	str	r3, [r0, #16]
 8001004:	4770      	bx	lr

08001006 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8001006:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001008:	689a      	ldr	r2, [r3, #8]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800100a:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800100c:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800100e:	689a      	ldr	r2, [r3, #8]
 8001010:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001012:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8001014:	6803      	ldr	r3, [r0, #0]

	pxIndex->pxPrevious->pxNext = pxNewListItem;
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001016:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8001018:	3301      	adds	r3, #1
 800101a:	6003      	str	r3, [r0, #0]
 800101c:	4770      	bx	lr

0800101e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800101e:	680a      	ldr	r2, [r1, #0]
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001020:	b530      	push	{r4, r5, lr}
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001022:	1c53      	adds	r3, r2, #1
 8001024:	d101      	bne.n	800102a <vListInsert+0xc>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001026:	6903      	ldr	r3, [r0, #16]
 8001028:	e007      	b.n	800103a <vListInsert+0x1c>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800102a:	f100 0308 	add.w	r3, r0, #8
 800102e:	685c      	ldr	r4, [r3, #4]
 8001030:	6825      	ldr	r5, [r4, #0]
 8001032:	42aa      	cmp	r2, r5
 8001034:	d301      	bcc.n	800103a <vListInsert+0x1c>
 8001036:	4623      	mov	r3, r4
 8001038:	e7f9      	b.n	800102e <vListInsert+0x10>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800103a:	685a      	ldr	r2, [r3, #4]
 800103c:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800103e:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001040:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8001042:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8001044:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxPrevious = pxIterator;
	pxIterator->pxNext = pxNewListItem;

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001046:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8001048:	3301      	adds	r3, #1
 800104a:	6003      	str	r3, [r0, #0]
 800104c:	bd30      	pop	{r4, r5, pc}

0800104e <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800104e:	6841      	ldr	r1, [r0, #4]
 8001050:	6882      	ldr	r2, [r0, #8]

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001052:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001054:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001056:	6882      	ldr	r2, [r0, #8]
 8001058:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800105a:	6859      	ldr	r1, [r3, #4]
 800105c:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800105e:	bf08      	it	eq
 8001060:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001062:	2200      	movs	r2, #0
 8001064:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8001066:	6818      	ldr	r0, [r3, #0]
 8001068:	3801      	subs	r0, #1
 800106a:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 800106c:	4770      	bx	lr
	...

08001070 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8001070:	4806      	ldr	r0, [pc, #24]	; (800108c <prvPortStartFirstTask+0x1c>)
 8001072:	6800      	ldr	r0, [r0, #0]
 8001074:	6800      	ldr	r0, [r0, #0]
 8001076:	f380 8808 	msr	MSP, r0
 800107a:	b662      	cpsie	i
 800107c:	b661      	cpsie	f
 800107e:	f3bf 8f4f 	dsb	sy
 8001082:	f3bf 8f6f 	isb	sy
 8001086:	df00      	svc	0
 8001088:	bf00      	nop
 800108a:	0000      	.short	0x0000
 800108c:	e000ed08 	.word	0xe000ed08

08001090 <pxPortInitialiseStack>:
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8001090:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8001094:	e900 000a 	stmdb	r0, {r1, r3}
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8001098:	4b03      	ldr	r3, [pc, #12]	; (80010a8 <pxPortInitialiseStack+0x18>)
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800109a:	f840 2c20 	str.w	r2, [r0, #-32]
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800109e:	f840 3c0c 	str.w	r3, [r0, #-12]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
 80010a2:	3840      	subs	r0, #64	; 0x40
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	080010f9 	.word	0x080010f9

080010ac <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80010ac:	4b07      	ldr	r3, [pc, #28]	; (80010cc <pxCurrentTCBConst2>)
 80010ae:	6819      	ldr	r1, [r3, #0]
 80010b0:	6808      	ldr	r0, [r1, #0]
 80010b2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80010b6:	f380 8809 	msr	PSP, r0
 80010ba:	f3bf 8f6f 	isb	sy
 80010be:	f04f 0000 	mov.w	r0, #0
 80010c2:	f380 8811 	msr	BASEPRI, r0
 80010c6:	f04e 0e0d 	orr.w	lr, lr, #13
 80010ca:	4770      	bx	lr

080010cc <pxCurrentTCBConst2>:
 80010cc:	20000d10 	.word	0x20000d10

080010d0 <vPortYield>:
/*-----------------------------------------------------------*/

void vPortYield( void )
{
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80010d0:	4b04      	ldr	r3, [pc, #16]	; (80010e4 <vPortYield+0x14>)
 80010d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80010d6:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" );
 80010d8:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80010dc:	f3bf 8f6f 	isb	sy
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	e000ed04 	.word	0xe000ed04

080010e8 <ulPortSetInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) uint32_t ulPortSetInterruptMask( void )
{
	__asm volatile														\
 80010e8:	f3ef 8011 	mrs	r0, BASEPRI
 80010ec:	f04f 0150 	mov.w	r1, #80	; 0x50
 80010f0:	f381 8811 	msr	BASEPRI, r1
 80010f4:	4770      	bx	lr
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
}
 80010f6:	2000      	movs	r0, #0

080010f8 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80010f8:	b508      	push	{r3, lr}
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80010fa:	4b05      	ldr	r3, [pc, #20]	; (8001110 <prvTaskExitError+0x18>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	3301      	adds	r3, #1
 8001100:	d002      	beq.n	8001108 <prvTaskExitError+0x10>
 8001102:	f7ff fff1 	bl	80010e8 <ulPortSetInterruptMask>
 8001106:	e7fe      	b.n	8001106 <prvTaskExitError+0xe>
	portDISABLE_INTERRUPTS();
 8001108:	f7ff ffee 	bl	80010e8 <ulPortSetInterruptMask>
 800110c:	e7fe      	b.n	800110c <prvTaskExitError+0x14>
 800110e:	bf00      	nop
 8001110:	20000000 	.word	0x20000000

08001114 <vPortEnterCritical>:
	__asm volatile( "isb" );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8001114:	b508      	push	{r3, lr}
	portDISABLE_INTERRUPTS();
 8001116:	f7ff ffe7 	bl	80010e8 <ulPortSetInterruptMask>
	uxCriticalNesting++;
 800111a:	4a09      	ldr	r2, [pc, #36]	; (8001140 <vPortEnterCritical+0x2c>)
 800111c:	6813      	ldr	r3, [r2, #0]
 800111e:	3301      	adds	r3, #1
 8001120:	6013      	str	r3, [r2, #0]
	__asm volatile( "dsb" );
 8001122:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8001126:	f3bf 8f6f 	isb	sy
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API 
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800112a:	2b01      	cmp	r3, #1
 800112c:	d107      	bne.n	800113e <vPortEnterCritical+0x2a>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800112e:	4b05      	ldr	r3, [pc, #20]	; (8001144 <vPortEnterCritical+0x30>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f013 0fff 	tst.w	r3, #255	; 0xff
 8001136:	d002      	beq.n	800113e <vPortEnterCritical+0x2a>
 8001138:	f7ff ffd6 	bl	80010e8 <ulPortSetInterruptMask>
 800113c:	e7fe      	b.n	800113c <vPortEnterCritical+0x28>
 800113e:	bd08      	pop	{r3, pc}
 8001140:	20000000 	.word	0x20000000
 8001144:	e000ed04 	.word	0xe000ed04

08001148 <vPortClearInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( uint32_t ulNewMaskValue )
{
	__asm volatile													\
 8001148:	f380 8811 	msr	BASEPRI, r0
 800114c:	4770      	bx	lr
	...

08001150 <vPortExitCritical>:
	}
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8001150:	b508      	push	{r3, lr}
	configASSERT( uxCriticalNesting );
 8001152:	4b07      	ldr	r3, [pc, #28]	; (8001170 <vPortExitCritical+0x20>)
 8001154:	6818      	ldr	r0, [r3, #0]
 8001156:	b910      	cbnz	r0, 800115e <vPortExitCritical+0xe>
 8001158:	f7ff ffc6 	bl	80010e8 <ulPortSetInterruptMask>
 800115c:	e7fe      	b.n	800115c <vPortExitCritical+0xc>
	uxCriticalNesting--;
 800115e:	3801      	subs	r0, #1
 8001160:	6018      	str	r0, [r3, #0]
	if( uxCriticalNesting == 0 )
 8001162:	b918      	cbnz	r0, 800116c <vPortExitCritical+0x1c>
	{
		portENABLE_INTERRUPTS();
	}
}
 8001164:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
	configASSERT( uxCriticalNesting );
	uxCriticalNesting--;
	if( uxCriticalNesting == 0 )
	{
		portENABLE_INTERRUPTS();
 8001168:	f7ff bfee 	b.w	8001148 <vPortClearInterruptMask>
 800116c:	bd08      	pop	{r3, pc}
 800116e:	bf00      	nop
 8001170:	20000000 	.word	0x20000000

08001174 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8001174:	f3ef 8009 	mrs	r0, PSP
 8001178:	f3bf 8f6f 	isb	sy
 800117c:	4b0d      	ldr	r3, [pc, #52]	; (80011b4 <pxCurrentTCBConst>)
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001184:	6010      	str	r0, [r2, #0]
 8001186:	e92d 4008 	stmdb	sp!, {r3, lr}
 800118a:	f04f 0050 	mov.w	r0, #80	; 0x50
 800118e:	f380 8811 	msr	BASEPRI, r0
 8001192:	f000 fc07 	bl	80019a4 <vTaskSwitchContext>
 8001196:	f04f 0000 	mov.w	r0, #0
 800119a:	f380 8811 	msr	BASEPRI, r0
 800119e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80011a2:	6819      	ldr	r1, [r3, #0]
 80011a4:	6808      	ldr	r0, [r1, #0]
 80011a6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80011aa:	f380 8809 	msr	PSP, r0
 80011ae:	f3bf 8f6f 	isb	sy
 80011b2:	4770      	bx	lr

080011b4 <pxCurrentTCBConst>:
 80011b4:	20000d10 	.word	0x20000d10

080011b8 <xPortSysTickHandler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80011b8:	b508      	push	{r3, lr}
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
 80011ba:	f7ff ff95 	bl	80010e8 <ulPortSetInterruptMask>
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80011be:	f000 fa93 	bl	80016e8 <xTaskIncrementTick>
 80011c2:	b118      	cbz	r0, 80011cc <xPortSysTickHandler+0x14>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80011c4:	4b04      	ldr	r3, [pc, #16]	; (80011d8 <xPortSysTickHandler+0x20>)
 80011c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80011ca:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
 80011cc:	2000      	movs	r0, #0
}
 80011ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
 80011d2:	f7ff bfb9 	b.w	8001148 <vPortClearInterruptMask>
 80011d6:	bf00      	nop
 80011d8:	e000ed04 	.word	0xe000ed04

080011dc <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80011dc:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <vPortSetupTimerInterrupt+0x1c>)
 80011de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80011e8:	4a04      	ldr	r2, [pc, #16]	; (80011fc <vPortSetupTimerInterrupt+0x20>)
 80011ea:	3b01      	subs	r3, #1
 80011ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80011ee:	4b04      	ldr	r3, [pc, #16]	; (8001200 <vPortSetupTimerInterrupt+0x24>)
 80011f0:	2207      	movs	r2, #7
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	20000004 	.word	0x20000004
 80011fc:	e000e014 	.word	0xe000e014
 8001200:	e000e010 	.word	0xe000e010

08001204 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8001204:	b513      	push	{r0, r1, r4, lr}
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8001206:	4b1f      	ldr	r3, [pc, #124]	; (8001284 <xPortStartScheduler+0x80>)
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001208:	2100      	movs	r1, #0
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800120a:	781a      	ldrb	r2, [r3, #0]
 800120c:	b2d2      	uxtb	r2, r2
 800120e:	9201      	str	r2, [sp, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001210:	22ff      	movs	r2, #255	; 0xff
 8001212:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001214:	781b      	ldrb	r3, [r3, #0]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001216:	4a1c      	ldr	r2, [pc, #112]	; (8001288 <xPortStartScheduler+0x84>)
		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001218:	b2db      	uxtb	r3, r3
 800121a:	f88d 3003 	strb.w	r3, [sp, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800121e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8001222:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001226:	7013      	strb	r3, [r2, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8001228:	4b18      	ldr	r3, [pc, #96]	; (800128c <xPortStartScheduler+0x88>)
 800122a:	2207      	movs	r2, #7
 800122c:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800122e:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8001232:	1e54      	subs	r4, r2, #1
 8001234:	0600      	lsls	r0, r0, #24
 8001236:	d508      	bpl.n	800124a <xPortStartScheduler+0x46>
		{
			ulMaxPRIGROUPValue--;
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8001238:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800123c:	2101      	movs	r1, #1
 800123e:	0052      	lsls	r2, r2, #1
 8001240:	b2d2      	uxtb	r2, r2
 8001242:	f88d 2003 	strb.w	r2, [sp, #3]
 8001246:	4622      	mov	r2, r4
 8001248:	e7f1      	b.n	800122e <xPortStartScheduler+0x2a>
 800124a:	b101      	cbz	r1, 800124e <xPortStartScheduler+0x4a>
 800124c:	601a      	str	r2, [r3, #0]
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	0212      	lsls	r2, r2, #8
 8001252:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8001256:	601a      	str	r2, [r3, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8001258:	9b01      	ldr	r3, [sp, #4]
 800125a:	4a0a      	ldr	r2, [pc, #40]	; (8001284 <xPortStartScheduler+0x80>)
 800125c:	b2db      	uxtb	r3, r3
 800125e:	7013      	strb	r3, [r2, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8001260:	4b0b      	ldr	r3, [pc, #44]	; (8001290 <xPortStartScheduler+0x8c>)
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8001268:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8001270:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8001272:	f7ff ffb3 	bl	80011dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8001276:	4b07      	ldr	r3, [pc, #28]	; (8001294 <xPortStartScheduler+0x90>)
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800127c:	f7ff fef8 	bl	8001070 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 8001280:	f7ff ff3a 	bl	80010f8 <prvTaskExitError>
 8001284:	e000e400 	.word	0xe000e400
 8001288:	20000028 	.word	0x20000028
 800128c:	2000002c 	.word	0x2000002c
 8001290:	e000ed20 	.word	0xe000ed20
 8001294:	20000000 	.word	0x20000000

08001298 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001298:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800129a:	4b0f      	ldr	r3, [pc, #60]	; (80012d8 <prvInsertBlockIntoFreeList+0x40>)
 800129c:	681a      	ldr	r2, [r3, #0]
 800129e:	4282      	cmp	r2, r0
 80012a0:	d201      	bcs.n	80012a6 <prvInsertBlockIntoFreeList+0xe>
 80012a2:	4613      	mov	r3, r2
 80012a4:	e7fa      	b.n	800129c <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80012a6:	6859      	ldr	r1, [r3, #4]
 80012a8:	185c      	adds	r4, r3, r1
 80012aa:	42a0      	cmp	r0, r4
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80012ac:	bf01      	itttt	eq
 80012ae:	6840      	ldreq	r0, [r0, #4]
 80012b0:	1809      	addeq	r1, r1, r0
 80012b2:	4618      	moveq	r0, r3
 80012b4:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80012b6:	6841      	ldr	r1, [r0, #4]
 80012b8:	1844      	adds	r4, r0, r1
 80012ba:	42a2      	cmp	r2, r4
 80012bc:	d107      	bne.n	80012ce <prvInsertBlockIntoFreeList+0x36>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80012be:	4c07      	ldr	r4, [pc, #28]	; (80012dc <prvInsertBlockIntoFreeList+0x44>)
 80012c0:	6824      	ldr	r4, [r4, #0]
 80012c2:	42a2      	cmp	r2, r4
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80012c4:	bf1f      	itttt	ne
 80012c6:	6854      	ldrne	r4, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80012c8:	6812      	ldrne	r2, [r2, #0]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80012ca:	1909      	addne	r1, r1, r4
 80012cc:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80012ce:	4298      	cmp	r0, r3
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80012d0:	6002      	str	r2, [r0, #0]
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80012d2:	bf18      	it	ne
 80012d4:	6018      	strne	r0, [r3, #0]
 80012d6:	bd10      	pop	{r4, pc}
 80012d8:	20000038 	.word	0x20000038
 80012dc:	20000034 	.word	0x20000034

080012e0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80012e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012e4:	4604      	mov	r4, r0
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
 80012e6:	f000 f9f7 	bl	80016d8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80012ea:	493a      	ldr	r1, [pc, #232]	; (80013d4 <pvPortMalloc+0xf4>)
 80012ec:	4d3a      	ldr	r5, [pc, #232]	; (80013d8 <pvPortMalloc+0xf8>)
 80012ee:	680b      	ldr	r3, [r1, #0]
 80012f0:	bb0b      	cbnz	r3, 8001336 <pvPortMalloc+0x56>
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80012f2:	4a3a      	ldr	r2, [pc, #232]	; (80013dc <pvPortMalloc+0xfc>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80012f4:	0756      	lsls	r6, r2, #29
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80012f6:	bf1f      	itttt	ne
 80012f8:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80012fa:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80012fe:	f502 6340 	addne.w	r3, r2, #3072	; 0xc00
	uxAddress = ( size_t ) ucHeap;

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001302:	4602      	movne	r2, r0
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001304:	bf14      	ite	ne
 8001306:	1a1b      	subne	r3, r3, r0
static void prvHeapInit( void )
{
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001308:	f44f 6340 	moveq.w	r3, #3072	; 0xc00
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
	xStart.xBlockSize = ( size_t ) 0;

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800130c:	4413      	add	r3, r2

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800130e:	4e34      	ldr	r6, [pc, #208]	; (80013e0 <pvPortMalloc+0x100>)
	xStart.xBlockSize = ( size_t ) 0;

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
 8001310:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001312:	f023 0307 	bic.w	r3, r3, #7
	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
	xStart.xBlockSize = ( size_t ) 0;
 8001316:	2000      	movs	r0, #0
 8001318:	6070      	str	r0, [r6, #4]

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800131a:	6032      	str	r2, [r6, #0]
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
	pxEnd = ( void * ) uxAddress;
	pxEnd->xBlockSize = 0;
 800131c:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800131e:	6018      	str	r0, [r3, #0]
	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
	pxEnd = ( void * ) uxAddress;
 8001320:	600b      	str	r3, [r1, #0]
	pxEnd->pxNextFreeBlock = NULL;

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001322:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001324:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001326:	4b2f      	ldr	r3, [pc, #188]	; (80013e4 <pvPortMalloc+0x104>)
	pxEnd->pxNextFreeBlock = NULL;

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001328:	6050      	str	r0, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800132a:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800132c:	4b2e      	ldr	r3, [pc, #184]	; (80013e8 <pvPortMalloc+0x108>)
 800132e:	6018      	str	r0, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001330:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001334:	602b      	str	r3, [r5, #0]

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001336:	682f      	ldr	r7, [r5, #0]
 8001338:	4227      	tst	r7, r4
 800133a:	d140      	bne.n	80013be <pvPortMalloc+0xde>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800133c:	2c00      	cmp	r4, #0
 800133e:	d03f      	beq.n	80013c0 <pvPortMalloc+0xe0>
			{
				xWantedSize += xHeapStructSize;
 8001340:	f104 0308 	add.w	r3, r4, #8

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001344:	0758      	lsls	r0, r3, #29
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001346:	bf1c      	itt	ne
 8001348:	f023 0307 	bicne.w	r3, r3, #7
 800134c:	3308      	addne	r3, #8
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800134e:	2b00      	cmp	r3, #0
 8001350:	d033      	beq.n	80013ba <pvPortMalloc+0xda>
 8001352:	4a25      	ldr	r2, [pc, #148]	; (80013e8 <pvPortMalloc+0x108>)
 8001354:	6816      	ldr	r6, [r2, #0]
 8001356:	4690      	mov	r8, r2
 8001358:	42b3      	cmp	r3, r6
 800135a:	d830      	bhi.n	80013be <pvPortMalloc+0xde>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
 800135c:	4a20      	ldr	r2, [pc, #128]	; (80013e0 <pvPortMalloc+0x100>)
 800135e:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001360:	6868      	ldr	r0, [r5, #4]
 8001362:	4283      	cmp	r3, r0
 8001364:	d803      	bhi.n	800136e <pvPortMalloc+0x8e>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8001366:	6809      	ldr	r1, [r1, #0]
 8001368:	428d      	cmp	r5, r1
 800136a:	d106      	bne.n	800137a <pvPortMalloc+0x9a>
 800136c:	e027      	b.n	80013be <pvPortMalloc+0xde>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800136e:	682c      	ldr	r4, [r5, #0]
 8001370:	2c00      	cmp	r4, #0
 8001372:	d0f8      	beq.n	8001366 <pvPortMalloc+0x86>
 8001374:	462a      	mov	r2, r5
 8001376:	4625      	mov	r5, r4
 8001378:	e7f2      	b.n	8001360 <pvPortMalloc+0x80>
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800137a:	6829      	ldr	r1, [r5, #0]
				was	not found. */
				if( pxBlock != pxEnd )
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800137c:	6814      	ldr	r4, [r2, #0]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800137e:	6011      	str	r1, [r2, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001380:	1ac2      	subs	r2, r0, r3
 8001382:	2a10      	cmp	r2, #16
				was	not found. */
				if( pxBlock != pxEnd )
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001384:	f104 0408 	add.w	r4, r4, #8
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001388:	d909      	bls.n	800139e <pvPortMalloc+0xbe>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800138a:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800138c:	0741      	lsls	r1, r0, #29
 800138e:	d002      	beq.n	8001396 <pvPortMalloc+0xb6>
 8001390:	f7ff feaa 	bl	80010e8 <ulPortSetInterruptMask>
 8001394:	e7fe      	b.n	8001394 <pvPortMalloc+0xb4>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001396:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001398:	606b      	str	r3, [r5, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800139a:	f7ff ff7d 	bl	8001298 <prvInsertBlockIntoFreeList>
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800139e:	4911      	ldr	r1, [pc, #68]	; (80013e4 <pvPortMalloc+0x104>)
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80013a0:	686a      	ldr	r2, [r5, #4]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80013a2:	6808      	ldr	r0, [r1, #0]
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80013a4:	1ab3      	subs	r3, r6, r2

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80013a6:	4283      	cmp	r3, r0
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80013a8:	f8c8 3000 	str.w	r3, [r8]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80013ac:	bf38      	it	cc
 80013ae:	600b      	strcc	r3, [r1, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80013b0:	4317      	orrs	r7, r2
					pxBlock->pxNextFreeBlock = NULL;
 80013b2:	2300      	movs	r3, #0
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80013b4:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80013b6:	602b      	str	r3, [r5, #0]
 80013b8:	e002      	b.n	80013c0 <pvPortMalloc+0xe0>
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80013ba:	461c      	mov	r4, r3
 80013bc:	e000      	b.n	80013c0 <pvPortMalloc+0xe0>
 80013be:	2400      	movs	r4, #0
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80013c0:	f000 fa24 	bl	800180c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( uint32_t ) pvReturn ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80013c4:	0763      	lsls	r3, r4, #29
 80013c6:	d002      	beq.n	80013ce <pvPortMalloc+0xee>
 80013c8:	f7ff fe8e 	bl	80010e8 <ulPortSetInterruptMask>
 80013cc:	e7fe      	b.n	80013cc <pvPortMalloc+0xec>
	return pvReturn;
}
 80013ce:	4620      	mov	r0, r4
 80013d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80013d4:	20000034 	.word	0x20000034
 80013d8:	20000c40 	.word	0x20000c40
 80013dc:	20000040 	.word	0x20000040
 80013e0:	20000038 	.word	0x20000038
 80013e4:	20000c44 	.word	0x20000c44
 80013e8:	20000030 	.word	0x20000030

080013ec <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80013ec:	b510      	push	{r4, lr}
uint8_t *puc = ( uint8_t * ) pv;
BlockLink_t *pxLink;

	if( pv != NULL )
 80013ee:	4604      	mov	r4, r0
 80013f0:	b310      	cbz	r0, 8001438 <vPortFree+0x4c>

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80013f2:	4a12      	ldr	r2, [pc, #72]	; (800143c <vPortFree+0x50>)
 80013f4:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80013f8:	6812      	ldr	r2, [r2, #0]
 80013fa:	4213      	tst	r3, r2
 80013fc:	d102      	bne.n	8001404 <vPortFree+0x18>
 80013fe:	f7ff fe73 	bl	80010e8 <ulPortSetInterruptMask>
 8001402:	e7fe      	b.n	8001402 <vPortFree+0x16>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001404:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8001408:	b111      	cbz	r1, 8001410 <vPortFree+0x24>
 800140a:	f7ff fe6d 	bl	80010e8 <ulPortSetInterruptMask>
 800140e:	e7fe      	b.n	800140e <vPortFree+0x22>
		{
			if( pxLink->pxNextFreeBlock == NULL )
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001410:	ea23 0302 	bic.w	r3, r3, r2
 8001414:	f840 3c04 	str.w	r3, [r0, #-4]

				vTaskSuspendAll();
 8001418:	f000 f95e 	bl	80016d8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800141c:	4a08      	ldr	r2, [pc, #32]	; (8001440 <vPortFree+0x54>)
 800141e:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8001422:	6813      	ldr	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001424:	f1a4 0008 	sub.w	r0, r4, #8
				pxLink->xBlockSize &= ~xBlockAllocatedBit;

				vTaskSuspendAll();
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001428:	440b      	add	r3, r1
 800142a:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800142c:	f7ff ff34 	bl	8001298 <prvInsertBlockIntoFreeList>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8001430:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
				}
				( void ) xTaskResumeAll();
 8001434:	f000 b9ea 	b.w	800180c <xTaskResumeAll>
 8001438:	bd10      	pop	{r4, pc}
 800143a:	bf00      	nop
 800143c:	20000c40 	.word	0x20000c40
 8001440:	20000030 	.word	0x20000030

08001444 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001444:	4a06      	ldr	r2, [pc, #24]	; (8001460 <prvResetNextTaskUnblockTime+0x1c>)
 8001446:	6813      	ldr	r3, [r2, #0]
 8001448:	6819      	ldr	r1, [r3, #0]
 800144a:	4b06      	ldr	r3, [pc, #24]	; (8001464 <prvResetNextTaskUnblockTime+0x20>)
 800144c:	b911      	cbnz	r1, 8001454 <prvResetNextTaskUnblockTime+0x10>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800144e:	f04f 32ff 	mov.w	r2, #4294967295
 8001452:	e003      	b.n	800145c <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001454:	6812      	ldr	r2, [r2, #0]
 8001456:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 8001458:	68d2      	ldr	r2, [r2, #12]
 800145a:	6852      	ldr	r2, [r2, #4]
 800145c:	601a      	str	r2, [r3, #0]
 800145e:	4770      	bx	lr
 8001460:	20000c4c 	.word	0x20000c4c
 8001464:	20000d14 	.word	0x20000d14

08001468 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 8001468:	4b0e      	ldr	r3, [pc, #56]	; (80014a4 <prvAddCurrentTaskToDelayedList+0x3c>)
	#endif /* vTaskDelete */
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
 800146a:	b510      	push	{r4, lr}
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 800146c:	681a      	ldr	r2, [r3, #0]
	#endif /* vTaskDelete */
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
 800146e:	4604      	mov	r4, r0
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 8001470:	6050      	str	r0, [r2, #4]

	if( xTimeToWake < xTickCount )
 8001472:	4a0d      	ldr	r2, [pc, #52]	; (80014a8 <prvAddCurrentTaskToDelayedList+0x40>)
 8001474:	6812      	ldr	r2, [r2, #0]
 8001476:	4290      	cmp	r0, r2
 8001478:	d207      	bcs.n	800148a <prvAddCurrentTaskToDelayedList+0x22>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800147a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );

	if( xTimeToWake < xTickCount )
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800147e:	4a0b      	ldr	r2, [pc, #44]	; (80014ac <prvAddCurrentTaskToDelayedList+0x44>)
 8001480:	6810      	ldr	r0, [r2, #0]
 8001482:	6819      	ldr	r1, [r3, #0]
 8001484:	3104      	adds	r1, #4
 8001486:	f7ff bdca 	b.w	800101e <vListInsert>
	}
	else
	{
		/* The wake time has not overflowed, so the current block list is used. */
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 800148a:	4a09      	ldr	r2, [pc, #36]	; (80014b0 <prvAddCurrentTaskToDelayedList+0x48>)
 800148c:	6810      	ldr	r0, [r2, #0]
 800148e:	6819      	ldr	r1, [r3, #0]
 8001490:	3104      	adds	r1, #4
 8001492:	f7ff fdc4 	bl	800101e <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
 8001496:	4b07      	ldr	r3, [pc, #28]	; (80014b4 <prvAddCurrentTaskToDelayedList+0x4c>)
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	4294      	cmp	r4, r2
		{
			xNextTaskUnblockTime = xTimeToWake;
 800149c:	bf38      	it	cc
 800149e:	601c      	strcc	r4, [r3, #0]
 80014a0:	bd10      	pop	{r4, pc}
 80014a2:	bf00      	nop
 80014a4:	20000d10 	.word	0x20000d10
 80014a8:	20000d1c 	.word	0x20000d1c
 80014ac:	20000d20 	.word	0x20000d20
 80014b0:	20000c4c 	.word	0x20000c4c
 80014b4:	20000d14 	.word	0x20000d14

080014b8 <xTaskGenericCreate>:

#endif
/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 80014b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80014bc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80014be:	469a      	mov	sl, r3
 80014c0:	460f      	mov	r7, r1
 80014c2:	4615      	mov	r5, r2
 80014c4:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80014c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
BaseType_t xReturn;
TCB_t * pxNewTCB;
StackType_t *pxTopOfStack;

	configASSERT( pxTaskCode );
 80014ca:	4681      	mov	r9, r0
 80014cc:	b910      	cbnz	r0, 80014d4 <xTaskGenericCreate+0x1c>
 80014ce:	f7ff fe0b 	bl	80010e8 <ulPortSetInterruptMask>
 80014d2:	e7fe      	b.n	80014d2 <xTaskGenericCreate+0x1a>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
 80014d4:	2e06      	cmp	r6, #6
 80014d6:	d902      	bls.n	80014de <xTaskGenericCreate+0x26>
 80014d8:	f7ff fe06 	bl	80010e8 <ulPortSetInterruptMask>
 80014dc:	e7fe      	b.n	80014dc <xTaskGenericCreate+0x24>
	#else /* portSTACK_GROWTH */
	{
	StackType_t *pxStack;

		/* Allocate space for the stack used by the task being created. */
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80014de:	b93b      	cbnz	r3, 80014f0 <xTaskGenericCreate+0x38>
 80014e0:	0090      	lsls	r0, r2, #2
 80014e2:	f7ff fefd 	bl	80012e0 <pvPortMalloc>

		if( pxStack != NULL )
 80014e6:	4683      	mov	fp, r0
 80014e8:	2800      	cmp	r0, #0
 80014ea:	f000 80a6 	beq.w	800163a <xTaskGenericCreate+0x182>
 80014ee:	e000      	b.n	80014f2 <xTaskGenericCreate+0x3a>
	#else /* portSTACK_GROWTH */
	{
	StackType_t *pxStack;

		/* Allocate space for the stack used by the task being created. */
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80014f0:	469b      	mov	fp, r3

		if( pxStack != NULL )
		{
			/* Allocate space for the TCB.  Where the memory comes from depends
			on the implementation of the port malloc function. */
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 80014f2:	205c      	movs	r0, #92	; 0x5c
 80014f4:	f7ff fef4 	bl	80012e0 <pvPortMalloc>

			if( pxNewTCB != NULL )
 80014f8:	4604      	mov	r4, r0
 80014fa:	b188      	cbz	r0, 8001520 <xTaskGenericCreate+0x68>
	{
		/* Avoid dependency on memset() if it is not required. */
		#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
		{
			/* Just to help debugging. */
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 80014fc:	00ad      	lsls	r5, r5, #2
 80014fe:	462a      	mov	r2, r5
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );

			if( pxNewTCB != NULL )
			{
				/* Store the stack location in the TCB. */
				pxNewTCB->pxStack = pxStack;
 8001500:	f8c0 b030 	str.w	fp, [r0, #48]	; 0x30
	{
		/* Avoid dependency on memset() if it is not required. */
		#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
		{
			/* Just to help debugging. */
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 8001504:	21a5      	movs	r1, #165	; 0xa5
 8001506:	4658      	mov	r0, fp
 8001508:	f000 fc70 	bl	8001dec <memset>
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800150c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800150e:	3d04      	subs	r5, #4
 8001510:	441d      	add	r5, r3
 8001512:	f025 0507 	bic.w	r5, r5, #7
 8001516:	1e7b      	subs	r3, r7, #1
 8001518:	f104 0233 	add.w	r2, r4, #51	; 0x33
 800151c:	370f      	adds	r7, #15
 800151e:	e005      	b.n	800152c <xTaskGenericCreate+0x74>
			}
			else
			{
				/* The stack cannot be used as the TCB was not created.  Free it
				again. */
				vPortFree( pxStack );
 8001520:	4658      	mov	r0, fp
 8001522:	f7ff ff63 	bl	80013ec <vPortFree>
 8001526:	e088      	b.n	800163a <xTaskGenericCreate+0x182>
static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001528:	42bb      	cmp	r3, r7
 800152a:	d006      	beq.n	800153a <xTaskGenericCreate+0x82>
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 800152c:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8001530:	f802 1f01 	strb.w	r1, [r2, #1]!

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8001534:	7819      	ldrb	r1, [r3, #0]
 8001536:	2900      	cmp	r1, #0
 8001538:	d1f6      	bne.n	8001528 <xTaskGenericCreate+0x70>
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800153a:	f04f 0b00 	mov.w	fp, #0
		pxTCB->uxBasePriority = uxPriority;
		pxTCB->uxMutexesHeld = 0;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 800153e:	1d27      	adds	r7, r4, #4
 8001540:	4638      	mov	r0, r7
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001542:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxTCB->uxPriority = uxPriority;
 8001546:	62e6      	str	r6, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
 8001548:	64e6      	str	r6, [r4, #76]	; 0x4c
		pxTCB->uxMutexesHeld = 0;
 800154a:	f8c4 b050 	str.w	fp, [r4, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 800154e:	f7ff fd57 	bl	8001000 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 8001552:	f104 0018 	add.w	r0, r4, #24
 8001556:	f7ff fd53 	bl	8001000 <vListInitialiseItem>
	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800155a:	f1c6 0307 	rsb	r3, r6, #7
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxTCB->ulNotifiedValue = 0;
 800155e:	f8c4 b054 	str.w	fp, [r4, #84]	; 0x54
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
	vListInitialiseItem( &( pxTCB->xEventListItem ) );

	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 8001562:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001564:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 8001566:	6264      	str	r4, [r4, #36]	; 0x24
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxTCB->ulNotifiedValue = 0;
		pxTCB->eNotifyState = eNotWaitingNotification;
 8001568:	f884 b058 	strb.w	fp, [r4, #88]	; 0x58
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800156c:	4652      	mov	r2, sl
 800156e:	4649      	mov	r1, r9
 8001570:	4628      	mov	r0, r5
 8001572:	f7ff fd8d 	bl	8001090 <pxPortInitialiseStack>
 8001576:	6020      	str	r0, [r4, #0]
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
 8001578:	f1b8 0f00 	cmp.w	r8, #0
 800157c:	d001      	beq.n	8001582 <xTaskGenericCreate+0xca>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800157e:	f8c8 4000 	str.w	r4, [r8]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
 8001582:	f7ff fdc7 	bl	8001114 <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
 8001586:	4a2f      	ldr	r2, [pc, #188]	; (8001644 <xTaskGenericCreate+0x18c>)
			if( pxCurrentTCB == NULL )
 8001588:	4d2f      	ldr	r5, [pc, #188]	; (8001648 <xTaskGenericCreate+0x190>)

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
		{
			uxCurrentNumberOfTasks++;
 800158a:	6813      	ldr	r3, [r2, #0]
 800158c:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 800166c <xTaskGenericCreate+0x1b4>
 8001590:	3301      	adds	r3, #1
 8001592:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
 8001594:	682b      	ldr	r3, [r5, #0]
 8001596:	bb3b      	cbnz	r3, 80015e8 <xTaskGenericCreate+0x130>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
 8001598:	602c      	str	r4, [r5, #0]

				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800159a:	6812      	ldr	r2, [r2, #0]
 800159c:	2a01      	cmp	r2, #1
 800159e:	d12b      	bne.n	80015f8 <xTaskGenericCreate+0x140>
 80015a0:	4698      	mov	r8, r3
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80015a2:	eb09 0008 	add.w	r0, r9, r8
 80015a6:	f108 0814 	add.w	r8, r8, #20
 80015aa:	f7ff fd1e 	bl	8000fea <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80015ae:	f1b8 0f8c 	cmp.w	r8, #140	; 0x8c
 80015b2:	d1f6      	bne.n	80015a2 <xTaskGenericCreate+0xea>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 80015b4:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8001670 <xTaskGenericCreate+0x1b8>
	vListInitialise( &xDelayedTaskList2 );
 80015b8:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8001674 <xTaskGenericCreate+0x1bc>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 80015bc:	4650      	mov	r0, sl
 80015be:	f7ff fd14 	bl	8000fea <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80015c2:	4640      	mov	r0, r8
 80015c4:	f7ff fd11 	bl	8000fea <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80015c8:	4820      	ldr	r0, [pc, #128]	; (800164c <xTaskGenericCreate+0x194>)
 80015ca:	f7ff fd0e 	bl	8000fea <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80015ce:	4820      	ldr	r0, [pc, #128]	; (8001650 <xTaskGenericCreate+0x198>)
 80015d0:	f7ff fd0b 	bl	8000fea <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80015d4:	481f      	ldr	r0, [pc, #124]	; (8001654 <xTaskGenericCreate+0x19c>)
 80015d6:	f7ff fd08 	bl	8000fea <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80015da:	4b1f      	ldr	r3, [pc, #124]	; (8001658 <xTaskGenericCreate+0x1a0>)
 80015dc:	f8c3 a000 	str.w	sl, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80015e0:	4b1e      	ldr	r3, [pc, #120]	; (800165c <xTaskGenericCreate+0x1a4>)
 80015e2:	f8c3 8000 	str.w	r8, [r3]
 80015e6:	e007      	b.n	80015f8 <xTaskGenericCreate+0x140>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
 80015e8:	4b1d      	ldr	r3, [pc, #116]	; (8001660 <xTaskGenericCreate+0x1a8>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	b923      	cbnz	r3, 80015f8 <xTaskGenericCreate+0x140>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
 80015ee:	682b      	ldr	r3, [r5, #0]
 80015f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015f2:	429e      	cmp	r6, r3
					{
						pxCurrentTCB = pxNewTCB;
 80015f4:	bf28      	it	cs
 80015f6:	602c      	strcs	r4, [r5, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
 80015f8:	4a1a      	ldr	r2, [pc, #104]	; (8001664 <xTaskGenericCreate+0x1ac>)
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
 80015fa:	491b      	ldr	r1, [pc, #108]	; (8001668 <xTaskGenericCreate+0x1b0>)
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
 80015fc:	6813      	ldr	r3, [r2, #0]
 80015fe:	3301      	adds	r3, #1
 8001600:	6013      	str	r3, [r2, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
 8001602:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
			uxTaskNumber++;

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001604:	6463      	str	r3, [r4, #68]	; 0x44
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
 8001606:	680b      	ldr	r3, [r1, #0]
 8001608:	2401      	movs	r4, #1
 800160a:	fa04 f002 	lsl.w	r0, r4, r2
 800160e:	4303      	orrs	r3, r0
 8001610:	2014      	movs	r0, #20
 8001612:	600b      	str	r3, [r1, #0]
 8001614:	fb00 9002 	mla	r0, r0, r2, r9
 8001618:	4639      	mov	r1, r7
 800161a:	f7ff fcf4 	bl	8001006 <vListInsertEnd>

			xReturn = pdPASS;
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
 800161e:	f7ff fd97 	bl	8001150 <vPortExitCritical>
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
 8001622:	4b0f      	ldr	r3, [pc, #60]	; (8001660 <xTaskGenericCreate+0x1a8>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	b12b      	cbz	r3, 8001634 <xTaskGenericCreate+0x17c>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
 8001628:	682b      	ldr	r3, [r5, #0]
 800162a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800162c:	429e      	cmp	r6, r3
 800162e:	d901      	bls.n	8001634 <xTaskGenericCreate+0x17c>
			{
				taskYIELD_IF_USING_PREEMPTION();
 8001630:	f7ff fd4e 	bl	80010d0 <vPortYield>
 8001634:	4620      	mov	r0, r4
 8001636:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800163a:	f04f 30ff 	mov.w	r0, #4294967295
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
}
 800163e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001642:	bf00      	nop
 8001644:	20000d3c 	.word	0x20000d3c
 8001648:	20000d10 	.word	0x20000d10
 800164c:	20000d24 	.word	0x20000d24
 8001650:	20000cfc 	.word	0x20000cfc
 8001654:	20000d54 	.word	0x20000d54
 8001658:	20000c4c 	.word	0x20000c4c
 800165c:	20000d20 	.word	0x20000d20
 8001660:	20000c50 	.word	0x20000c50
 8001664:	20000d38 	.word	0x20000d38
 8001668:	20000d68 	.word	0x20000d68
 800166c:	20000c70 	.word	0x20000c70
 8001670:	20000c58 	.word	0x20000c58
 8001674:	20000d40 	.word	0x20000d40

08001678 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001678:	b530      	push	{r4, r5, lr}
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
 800167a:	2400      	movs	r4, #0

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800167c:	b085      	sub	sp, #20
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
 800167e:	9403      	str	r4, [sp, #12]
 8001680:	9402      	str	r4, [sp, #8]
 8001682:	9401      	str	r4, [sp, #4]
 8001684:	9400      	str	r4, [sp, #0]
 8001686:	4623      	mov	r3, r4
 8001688:	2280      	movs	r2, #128	; 0x80
 800168a:	490e      	ldr	r1, [pc, #56]	; (80016c4 <vTaskStartScheduler+0x4c>)
 800168c:	480e      	ldr	r0, [pc, #56]	; (80016c8 <vTaskStartScheduler+0x50>)
 800168e:	f7ff ff13 	bl	80014b8 <xTaskGenericCreate>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8001692:	2801      	cmp	r0, #1
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
 8001694:	4605      	mov	r5, r0
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8001696:	d10e      	bne.n	80016b6 <vTaskStartScheduler+0x3e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8001698:	f7ff fd26 	bl	80010e8 <ulPortSetInterruptMask>
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800169c:	4b0b      	ldr	r3, [pc, #44]	; (80016cc <vTaskStartScheduler+0x54>)
 800169e:	f04f 32ff 	mov.w	r2, #4294967295
 80016a2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80016a4:	4b0a      	ldr	r3, [pc, #40]	; (80016d0 <vTaskStartScheduler+0x58>)
 80016a6:	601d      	str	r5, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80016a8:	4b0a      	ldr	r3, [pc, #40]	; (80016d4 <vTaskStartScheduler+0x5c>)
 80016aa:	601c      	str	r4, [r3, #0]
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
	}
}
 80016ac:	b005      	add	sp, #20
 80016ae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80016b2:	f7ff bda7 	b.w	8001204 <xPortStartScheduler>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
 80016b6:	b910      	cbnz	r0, 80016be <vTaskStartScheduler+0x46>
 80016b8:	f7ff fd16 	bl	80010e8 <ulPortSetInterruptMask>
 80016bc:	e7fe      	b.n	80016bc <vTaskStartScheduler+0x44>
	}
}
 80016be:	b005      	add	sp, #20
 80016c0:	bd30      	pop	{r4, r5, pc}
 80016c2:	bf00      	nop
 80016c4:	08001e3c 	.word	0x08001e3c
 80016c8:	0800193d 	.word	0x0800193d
 80016cc:	20000d14 	.word	0x20000d14
 80016d0:	20000c50 	.word	0x20000c50
 80016d4:	20000d1c 	.word	0x20000d1c

080016d8 <vTaskSuspendAll>:
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80016d8:	4a02      	ldr	r2, [pc, #8]	; (80016e4 <vTaskSuspendAll+0xc>)
 80016da:	6813      	ldr	r3, [r2, #0]
 80016dc:	3301      	adds	r3, #1
 80016de:	6013      	str	r3, [r2, #0]
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	20000d18 	.word	0x20000d18

080016e8 <xTaskIncrementTick>:

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80016e8:	4b3d      	ldr	r3, [pc, #244]	; (80017e0 <xTaskIncrementTick+0xf8>)

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80016ea:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d136      	bne.n	8001762 <xTaskIncrementTick+0x7a>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
 80016f4:	4b3b      	ldr	r3, [pc, #236]	; (80017e4 <xTaskIncrementTick+0xfc>)
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	3201      	adds	r2, #1
 80016fa:	601a      	str	r2, [r3, #0]

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80016fc:	681d      	ldr	r5, [r3, #0]

			if( xConstTickCount == ( TickType_t ) 0U )
 80016fe:	b98d      	cbnz	r5, 8001724 <xTaskIncrementTick+0x3c>
			{
				taskSWITCH_DELAYED_LISTS();
 8001700:	4b39      	ldr	r3, [pc, #228]	; (80017e8 <xTaskIncrementTick+0x100>)
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	6812      	ldr	r2, [r2, #0]
 8001706:	b112      	cbz	r2, 800170e <xTaskIncrementTick+0x26>
 8001708:	f7ff fcee 	bl	80010e8 <ulPortSetInterruptMask>
 800170c:	e7fe      	b.n	800170c <xTaskIncrementTick+0x24>
 800170e:	4a37      	ldr	r2, [pc, #220]	; (80017ec <xTaskIncrementTick+0x104>)
 8001710:	6819      	ldr	r1, [r3, #0]
 8001712:	6810      	ldr	r0, [r2, #0]
 8001714:	6018      	str	r0, [r3, #0]
 8001716:	6011      	str	r1, [r2, #0]
 8001718:	4a35      	ldr	r2, [pc, #212]	; (80017f0 <xTaskIncrementTick+0x108>)
 800171a:	6813      	ldr	r3, [r2, #0]
 800171c:	3301      	adds	r3, #1
 800171e:	6013      	str	r3, [r2, #0]
 8001720:	f7ff fe90 	bl	8001444 <prvResetNextTaskUnblockTime>

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
 8001724:	4c33      	ldr	r4, [pc, #204]	; (80017f4 <xTaskIncrementTick+0x10c>)
 8001726:	f04f 0b00 	mov.w	fp, #0
 800172a:	6823      	ldr	r3, [r4, #0]
 800172c:	9401      	str	r4, [sp, #4]
 800172e:	429d      	cmp	r5, r3
 8001730:	4e31      	ldr	r6, [pc, #196]	; (80017f8 <xTaskIncrementTick+0x110>)
 8001732:	4f32      	ldr	r7, [pc, #200]	; (80017fc <xTaskIncrementTick+0x114>)
 8001734:	d30b      	bcc.n	800174e <xTaskIncrementTick+0x66>
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001736:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 80017e8 <xTaskIncrementTick+0x100>
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
 800173a:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 8001808 <xTaskIncrementTick+0x120>
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800173e:	f8d8 2000 	ldr.w	r2, [r8]
 8001742:	6812      	ldr	r2, [r2, #0]
 8001744:	b9a2      	cbnz	r2, 8001770 <xTaskIncrementTick+0x88>
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
 8001746:	9b01      	ldr	r3, [sp, #4]
 8001748:	f04f 32ff 	mov.w	r2, #4294967295
 800174c:	601a      	str	r2, [r3, #0]
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800174e:	683a      	ldr	r2, [r7, #0]
 8001750:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001752:	2214      	movs	r2, #20
 8001754:	434a      	muls	r2, r1
 8001756:	58b2      	ldr	r2, [r6, r2]
			{
				xSwitchRequired = pdTRUE;
 8001758:	2a02      	cmp	r2, #2
 800175a:	bf28      	it	cs
 800175c:	f04f 0b01 	movcs.w	fp, #1
 8001760:	e034      	b.n	80017cc <xTaskIncrementTick+0xe4>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8001762:	4a27      	ldr	r2, [pc, #156]	; (8001800 <xTaskIncrementTick+0x118>)

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8001764:	f04f 0b00 	mov.w	fp, #0
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8001768:	6813      	ldr	r3, [r2, #0]
 800176a:	3301      	adds	r3, #1
 800176c:	6013      	str	r3, [r2, #0]
 800176e:	e02d      	b.n	80017cc <xTaskIncrementTick+0xe4>
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001770:	f8d8 2000 	ldr.w	r2, [r8]
 8001774:	68d2      	ldr	r2, [r2, #12]
 8001776:	68d4      	ldr	r4, [r2, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 8001778:	6861      	ldr	r1, [r4, #4]

						if( xConstTickCount < xItemValue )
 800177a:	428d      	cmp	r5, r1
 800177c:	d202      	bcs.n	8001784 <xTaskIncrementTick+0x9c>
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
 800177e:	9b01      	ldr	r3, [sp, #4]
 8001780:	6019      	str	r1, [r3, #0]
							break;
 8001782:	e7e4      	b.n	800174e <xTaskIncrementTick+0x66>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8001784:	f104 0a04 	add.w	sl, r4, #4
 8001788:	4650      	mov	r0, sl
 800178a:	f7ff fc60 	bl	800104e <uxListRemove>

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800178e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001790:	b119      	cbz	r1, 800179a <xTaskIncrementTick+0xb2>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001792:	f104 0018 	add.w	r0, r4, #24
 8001796:	f7ff fc5a 	bl	800104e <uxListRemove>
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
 800179a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800179c:	f8d9 1000 	ldr.w	r1, [r9]
 80017a0:	2301      	movs	r3, #1
 80017a2:	fa03 fe00 	lsl.w	lr, r3, r0
 80017a6:	ea4e 0101 	orr.w	r1, lr, r1
 80017aa:	f04f 0e14 	mov.w	lr, #20
 80017ae:	f8c9 1000 	str.w	r1, [r9]
 80017b2:	fb0e 6000 	mla	r0, lr, r0, r6
 80017b6:	4651      	mov	r1, sl
 80017b8:	f7ff fc25 	bl	8001006 <vListInsertEnd>
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80017bc:	6838      	ldr	r0, [r7, #0]
 80017be:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80017c0:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							{
								xSwitchRequired = pdTRUE;
 80017c2:	4291      	cmp	r1, r2
 80017c4:	bf28      	it	cs
 80017c6:	f04f 0b01 	movcs.w	fp, #1
 80017ca:	e7b8      	b.n	800173e <xTaskIncrementTick+0x56>
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80017cc:	4a0d      	ldr	r2, [pc, #52]	; (8001804 <xTaskIncrementTick+0x11c>)
 80017ce:	6812      	ldr	r2, [r2, #0]
		{
			xSwitchRequired = pdTRUE;
 80017d0:	2a00      	cmp	r2, #0
 80017d2:	bf18      	it	ne
 80017d4:	f04f 0b01 	movne.w	fp, #1
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
}
 80017d8:	4658      	mov	r0, fp
 80017da:	b003      	add	sp, #12
 80017dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80017e0:	20000d18 	.word	0x20000d18
 80017e4:	20000d1c 	.word	0x20000d1c
 80017e8:	20000c4c 	.word	0x20000c4c
 80017ec:	20000d20 	.word	0x20000d20
 80017f0:	20000c48 	.word	0x20000c48
 80017f4:	20000d14 	.word	0x20000d14
 80017f8:	20000c70 	.word	0x20000c70
 80017fc:	20000d10 	.word	0x20000d10
 8001800:	20000c6c 	.word	0x20000c6c
 8001804:	20000d6c 	.word	0x20000d6c
 8001808:	20000d68 	.word	0x20000d68

0800180c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800180c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8001810:	4c2a      	ldr	r4, [pc, #168]	; (80018bc <xTaskResumeAll+0xb0>)
 8001812:	6823      	ldr	r3, [r4, #0]
 8001814:	b913      	cbnz	r3, 800181c <xTaskResumeAll+0x10>
 8001816:	f7ff fc67 	bl	80010e8 <ulPortSetInterruptMask>
 800181a:	e7fe      	b.n	800181a <xTaskResumeAll+0xe>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800181c:	f7ff fc7a 	bl	8001114 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8001820:	6823      	ldr	r3, [r4, #0]
 8001822:	3b01      	subs	r3, #1
 8001824:	6023      	str	r3, [r4, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001826:	6823      	ldr	r3, [r4, #0]
 8001828:	b10b      	cbz	r3, 800182e <xTaskResumeAll+0x22>
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
 800182a:	2400      	movs	r4, #0
 800182c:	e041      	b.n	80018b2 <xTaskResumeAll+0xa6>
	{
		--uxSchedulerSuspended;

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800182e:	4b24      	ldr	r3, [pc, #144]	; (80018c0 <xTaskResumeAll+0xb4>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d0f9      	beq.n	800182a <xTaskResumeAll+0x1e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001836:	4d23      	ldr	r5, [pc, #140]	; (80018c4 <xTaskResumeAll+0xb8>)
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyList( pxTCB );
 8001838:	4e23      	ldr	r6, [pc, #140]	; (80018c8 <xTaskResumeAll+0xbc>)
 800183a:	f8df 809c 	ldr.w	r8, [pc, #156]	; 80018d8 <xTaskResumeAll+0xcc>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800183e:	682b      	ldr	r3, [r5, #0]
 8001840:	b303      	cbz	r3, 8001884 <xTaskResumeAll+0x78>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8001842:	68eb      	ldr	r3, [r5, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyList( pxTCB );
 8001844:	2701      	movs	r7, #1
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8001846:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8001848:	f104 0904 	add.w	r9, r4, #4
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800184c:	f104 0018 	add.w	r0, r4, #24
 8001850:	f7ff fbfd 	bl	800104e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8001854:	4648      	mov	r0, r9
 8001856:	f7ff fbfa 	bl	800104e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800185a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800185c:	6833      	ldr	r3, [r6, #0]
 800185e:	fa07 f102 	lsl.w	r1, r7, r2
 8001862:	2014      	movs	r0, #20
 8001864:	430b      	orrs	r3, r1
 8001866:	fb00 8002 	mla	r0, r0, r2, r8
 800186a:	4649      	mov	r1, r9
 800186c:	6033      	str	r3, [r6, #0]
 800186e:	f7ff fbca 	bl	8001006 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001872:	4b16      	ldr	r3, [pc, #88]	; (80018cc <xTaskResumeAll+0xc0>)
 8001874:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800187a:	429a      	cmp	r2, r3
 800187c:	d3df      	bcc.n	800183e <xTaskResumeAll+0x32>
					{
						xYieldPending = pdTRUE;
 800187e:	4b14      	ldr	r3, [pc, #80]	; (80018d0 <xTaskResumeAll+0xc4>)
 8001880:	601f      	str	r7, [r3, #0]
 8001882:	e7da      	b.n	800183a <xTaskResumeAll+0x2e>

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
 8001884:	4c13      	ldr	r4, [pc, #76]	; (80018d4 <xTaskResumeAll+0xc8>)
 8001886:	6823      	ldr	r3, [r4, #0]
 8001888:	b933      	cbnz	r3, 8001898 <xTaskResumeAll+0x8c>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
 800188a:	4b11      	ldr	r3, [pc, #68]	; (80018d0 <xTaskResumeAll+0xc4>)
 800188c:	681c      	ldr	r4, [r3, #0]
 800188e:	2c01      	cmp	r4, #1
 8001890:	d1cb      	bne.n	800182a <xTaskResumeAll+0x1e>
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8001892:	f7ff fc1d 	bl	80010d0 <vPortYield>
 8001896:	e00c      	b.n	80018b2 <xTaskResumeAll+0xa6>
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
					{
						if( xTaskIncrementTick() != pdFALSE )
						{
							xYieldPending = pdTRUE;
 8001898:	4d0d      	ldr	r5, [pc, #52]	; (80018d0 <xTaskResumeAll+0xc4>)
 800189a:	2601      	movs	r6, #1
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 800189c:	6823      	ldr	r3, [r4, #0]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d0f3      	beq.n	800188a <xTaskResumeAll+0x7e>
					{
						if( xTaskIncrementTick() != pdFALSE )
 80018a2:	f7ff ff21 	bl	80016e8 <xTaskIncrementTick>
 80018a6:	b100      	cbz	r0, 80018aa <xTaskResumeAll+0x9e>
						{
							xYieldPending = pdTRUE;
 80018a8:	602e      	str	r6, [r5, #0]
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
 80018aa:	6823      	ldr	r3, [r4, #0]
 80018ac:	3b01      	subs	r3, #1
 80018ae:	6023      	str	r3, [r4, #0]
 80018b0:	e7f4      	b.n	800189c <xTaskResumeAll+0x90>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80018b2:	f7ff fc4d 	bl	8001150 <vPortExitCritical>

	return xAlreadyYielded;
}
 80018b6:	4620      	mov	r0, r4
 80018b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80018bc:	20000d18 	.word	0x20000d18
 80018c0:	20000d3c 	.word	0x20000d3c
 80018c4:	20000d24 	.word	0x20000d24
 80018c8:	20000d68 	.word	0x20000d68
 80018cc:	20000d10 	.word	0x20000d10
 80018d0:	20000d6c 	.word	0x20000d6c
 80018d4:	20000c6c 	.word	0x20000c6c
 80018d8:	20000c70 	.word	0x20000c70

080018dc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80018dc:	b538      	push	{r3, r4, r5, lr}
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded = pdFALSE;


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80018de:	b918      	cbnz	r0, 80018e8 <vTaskDelay+0xc>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80018e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
 80018e4:	f7ff bbf4 	b.w	80010d0 <vPortYield>


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80018e8:	4b10      	ldr	r3, [pc, #64]	; (800192c <vTaskDelay+0x50>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	b113      	cbz	r3, 80018f4 <vTaskDelay+0x18>
 80018ee:	f7ff fbfb 	bl	80010e8 <ulPortSetInterruptMask>
 80018f2:	e7fe      	b.n	80018f2 <vTaskDelay+0x16>
			vTaskSuspendAll();
 80018f4:	f7ff fef0 	bl	80016d8 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
 80018f8:	4b0d      	ldr	r3, [pc, #52]	; (8001930 <vTaskDelay+0x54>)

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 80018fa:	4d0e      	ldr	r5, [pc, #56]	; (8001934 <vTaskDelay+0x58>)
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	18c4      	adds	r4, r0, r3

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8001900:	6828      	ldr	r0, [r5, #0]
 8001902:	3004      	adds	r0, #4
 8001904:	f7ff fba3 	bl	800104e <uxListRemove>
 8001908:	b940      	cbnz	r0, 800191c <vTaskDelay+0x40>
				{
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800190a:	682b      	ldr	r3, [r5, #0]
 800190c:	490a      	ldr	r1, [pc, #40]	; (8001938 <vTaskDelay+0x5c>)
 800190e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001910:	680a      	ldr	r2, [r1, #0]
 8001912:	2301      	movs	r3, #1
 8001914:	4083      	lsls	r3, r0
 8001916:	ea22 0303 	bic.w	r3, r2, r3
 800191a:	600b      	str	r3, [r1, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 800191c:	4620      	mov	r0, r4
 800191e:	f7ff fda3 	bl	8001468 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8001922:	f7ff ff73 	bl	800180c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8001926:	2800      	cmp	r0, #0
 8001928:	d0da      	beq.n	80018e0 <vTaskDelay+0x4>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800192a:	bd38      	pop	{r3, r4, r5, pc}
 800192c:	20000d18 	.word	0x20000d18
 8001930:	20000d1c 	.word	0x20000d1c
 8001934:	20000d10 	.word	0x20000d10
 8001938:	20000d68 	.word	0x20000d68

0800193c <prvIdleTask>:
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 800193c:	4d15      	ldr	r5, [pc, #84]	; (8001994 <prvIdleTask+0x58>)
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800193e:	b580      	push	{r7, lr}
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 8001940:	462e      	mov	r6, r5
		{
			vTaskSuspendAll();
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8001942:	4f15      	ldr	r7, [pc, #84]	; (8001998 <prvIdleTask+0x5c>)
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 8001944:	682b      	ldr	r3, [r5, #0]
 8001946:	b1f3      	cbz	r3, 8001986 <prvIdleTask+0x4a>
		{
			vTaskSuspendAll();
 8001948:	f7ff fec6 	bl	80016d8 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 800194c:	683c      	ldr	r4, [r7, #0]
			}
			( void ) xTaskResumeAll();
 800194e:	f7ff ff5d 	bl	800180c <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 8001952:	2c00      	cmp	r4, #0
 8001954:	d0f6      	beq.n	8001944 <prvIdleTask+0x8>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 8001956:	f7ff fbdd 	bl	8001114 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800195a:	4b0f      	ldr	r3, [pc, #60]	; (8001998 <prvIdleTask+0x5c>)
 800195c:	68db      	ldr	r3, [r3, #12]
 800195e:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8001960:	1d20      	adds	r0, r4, #4
 8001962:	f7ff fb74 	bl	800104e <uxListRemove>
					--uxCurrentNumberOfTasks;
 8001966:	4a0d      	ldr	r2, [pc, #52]	; (800199c <prvIdleTask+0x60>)
 8001968:	6813      	ldr	r3, [r2, #0]
 800196a:	3b01      	subs	r3, #1
 800196c:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
 800196e:	6833      	ldr	r3, [r6, #0]
 8001970:	3b01      	subs	r3, #1
 8001972:	6033      	str	r3, [r6, #0]
				}
				taskEXIT_CRITICAL();
 8001974:	f7ff fbec 	bl	8001150 <vPortExitCritical>
				vPortFreeAligned( pxTCB->pxStack );
			}
		}
		#else
		{
			vPortFreeAligned( pxTCB->pxStack );
 8001978:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800197a:	f7ff fd37 	bl	80013ec <vPortFree>
		}
		#endif

		vPortFree( pxTCB );
 800197e:	4620      	mov	r0, r4
 8001980:	f7ff fd34 	bl	80013ec <vPortFree>
 8001984:	e7de      	b.n	8001944 <prvIdleTask+0x8>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001986:	4b06      	ldr	r3, [pc, #24]	; (80019a0 <prvIdleTask+0x64>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	2b01      	cmp	r3, #1
 800198c:	d9d9      	bls.n	8001942 <prvIdleTask+0x6>
			{
				taskYIELD();
 800198e:	f7ff fb9f 	bl	80010d0 <vPortYield>
 8001992:	e7d6      	b.n	8001942 <prvIdleTask+0x6>
 8001994:	20000c54 	.word	0x20000c54
 8001998:	20000cfc 	.word	0x20000cfc
 800199c:	20000d3c 	.word	0x20000d3c
 80019a0:	20000c70 	.word	0x20000c70

080019a4 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80019a4:	4b14      	ldr	r3, [pc, #80]	; (80019f8 <vTaskSwitchContext+0x54>)

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80019a6:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	4b14      	ldr	r3, [pc, #80]	; (80019fc <vTaskSwitchContext+0x58>)
 80019ac:	b10a      	cbz	r2, 80019b2 <vTaskSwitchContext+0xe>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80019ae:	2201      	movs	r2, #1
 80019b0:	e020      	b.n	80019f4 <vTaskSwitchContext+0x50>
	}
	else
	{
		xYieldPending = pdFALSE;
 80019b2:	601a      	str	r2, [r3, #0]
		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80019b4:	4b12      	ldr	r3, [pc, #72]	; (8001a00 <vTaskSwitchContext+0x5c>)
 80019b6:	681b      	ldr	r3, [r3, #0]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 80019b8:	fab3 f383 	clz	r3, r3
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	f1c3 031f 	rsb	r3, r3, #31
 80019c2:	2214      	movs	r2, #20
 80019c4:	435a      	muls	r2, r3
 80019c6:	490f      	ldr	r1, [pc, #60]	; (8001a04 <vTaskSwitchContext+0x60>)
 80019c8:	588c      	ldr	r4, [r1, r2]
 80019ca:	1888      	adds	r0, r1, r2
 80019cc:	b914      	cbnz	r4, 80019d4 <vTaskSwitchContext+0x30>
 80019ce:	f7ff fb8b 	bl	80010e8 <ulPortSetInterruptMask>
 80019d2:	e7fe      	b.n	80019d2 <vTaskSwitchContext+0x2e>
 80019d4:	6844      	ldr	r4, [r0, #4]
 80019d6:	3208      	adds	r2, #8
 80019d8:	6864      	ldr	r4, [r4, #4]
 80019da:	440a      	add	r2, r1
 80019dc:	4294      	cmp	r4, r2
 80019de:	bf08      	it	eq
 80019e0:	6862      	ldreq	r2, [r4, #4]
 80019e2:	6044      	str	r4, [r0, #4]
 80019e4:	bf08      	it	eq
 80019e6:	6042      	streq	r2, [r0, #4]
 80019e8:	2214      	movs	r2, #20
 80019ea:	fb02 1303 	mla	r3, r2, r3, r1
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	68da      	ldr	r2, [r3, #12]
 80019f2:	4b05      	ldr	r3, [pc, #20]	; (8001a08 <vTaskSwitchContext+0x64>)
 80019f4:	601a      	str	r2, [r3, #0]
 80019f6:	bd10      	pop	{r4, pc}
 80019f8:	20000d18 	.word	0x20000d18
 80019fc:	20000d6c 	.word	0x20000d6c
 8001a00:	20000d68 	.word	0x20000d68
 8001a04:	20000c70 	.word	0x20000c70
 8001a08:	20000d10 	.word	0x20000d10

08001a0c <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8001a0c:	4b05      	ldr	r3, [pc, #20]	; (8001a24 <xTaskGetSchedulerState+0x18>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	b133      	cbz	r3, 8001a20 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001a12:	4b05      	ldr	r3, [pc, #20]	; (8001a28 <xTaskGetSchedulerState+0x1c>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	2b00      	cmp	r3, #0
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8001a18:	bf0c      	ite	eq
 8001a1a:	2002      	moveq	r0, #2
 8001a1c:	2000      	movne	r0, #0
 8001a1e:	4770      	bx	lr
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8001a20:	2001      	movs	r0, #1
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
 8001a22:	4770      	bx	lr
 8001a24:	20000c50 	.word	0x20000c50
 8001a28:	20000d18 	.word	0x20000d18

08001a2c <StartDefaultTask>:

/* USER CODE END 4 */

/* StartDefaultTask function */
void StartDefaultTask(void const * argument)
{
 8001a2c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  // HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
    osDelay(1);
 8001a2e:	2001      	movs	r0, #1
 8001a30:	f7ff fac9 	bl	8000fc6 <osDelay>
 8001a34:	e7fb      	b.n	8001a2e <StartDefaultTask+0x2>

08001a36 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8001a36:	b530      	push	{r4, r5, lr}
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a38:	f44f 3380 	mov.w	r3, #65536	; 0x10000
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8001a3c:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a3e:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a40:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001a42:	2100      	movs	r1, #0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a44:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a46:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a48:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001a4a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a4e:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001a50:	9108      	str	r1, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a52:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a54:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001a56:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a58:	f7fe fd20 	bl	800049c <HAL_RCC_OscConfig>
 8001a5c:	b100      	cbz	r0, 8001a60 <SystemClock_Config+0x2a>
 8001a5e:	e7fe      	b.n	8001a5e <SystemClock_Config+0x28>
    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a60:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a62:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a66:	9005      	str	r0, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a68:	4621      	mov	r1, r4
    Error_Handler();
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a6a:	250f      	movs	r5, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a6c:	a801      	add	r0, sp, #4

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a6e:	9402      	str	r4, [sp, #8]
    Error_Handler();
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a70:	9501      	str	r5, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a72:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a74:	f7fe ffba 	bl	80009ec <HAL_RCC_ClockConfig>
 8001a78:	4604      	mov	r4, r0
 8001a7a:	b100      	cbz	r0, 8001a7e <SystemClock_Config+0x48>
 8001a7c:	e7fe      	b.n	8001a7c <SystemClock_Config+0x46>
    Error_Handler();
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001a7e:	f7ff f867 	bl	8000b50 <HAL_RCC_GetHCLKFreq>
 8001a82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a86:	fbb0 f0f3 	udiv	r0, r0, r3
 8001a8a:	f7fe fc05 	bl	8000298 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001a8e:	2004      	movs	r0, #4
 8001a90:	f7fe fc18 	bl	80002c4 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8001a94:	4622      	mov	r2, r4
 8001a96:	4629      	mov	r1, r5
 8001a98:	f04f 30ff 	mov.w	r0, #4294967295
 8001a9c:	f7fe fbbc 	bl	8000218 <HAL_NVIC_SetPriority>
}
 8001aa0:	b011      	add	sp, #68	; 0x44
 8001aa2:	bd30      	pop	{r4, r5, pc}

08001aa4 <main>:
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

int main(void)
{
 8001aa4:	b570      	push	{r4, r5, r6, lr}
 8001aa6:	b08a      	sub	sp, #40	; 0x28
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001aa8:	f7fe fb76 	bl	8000198 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8001aac:	f7ff ffc3 	bl	8001a36 <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ab0:	4b39      	ldr	r3, [pc, #228]	; (8001b98 <main+0xf4>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001ab2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ab6:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001ab8:	4838      	ldr	r0, [pc, #224]	; (8001b9c <main+0xf8>)
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aba:	f042 0210 	orr.w	r2, r2, #16
 8001abe:	619a      	str	r2, [r3, #24]
 8001ac0:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac2:	2402      	movs	r4, #2
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ac4:	f002 0210 	and.w	r2, r2, #16
 8001ac8:	9200      	str	r2, [sp, #0]
 8001aca:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001acc:	699a      	ldr	r2, [r3, #24]
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ace:	2501      	movs	r5, #1

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ad0:	f042 0220 	orr.w	r2, r2, #32
 8001ad4:	619a      	str	r2, [r3, #24]
 8001ad6:	699a      	ldr	r2, [r3, #24]
 8001ad8:	f002 0220 	and.w	r2, r2, #32
 8001adc:	9201      	str	r2, [sp, #4]
 8001ade:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ae0:	699a      	ldr	r2, [r3, #24]
 8001ae2:	f042 0208 	orr.w	r2, r2, #8
 8001ae6:	619a      	str	r2, [r3, #24]
 8001ae8:	699b      	ldr	r3, [r3, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001aea:	2200      	movs	r2, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aec:	f003 0308 	and.w	r3, r3, #8
 8001af0:	9302      	str	r3, [sp, #8]
 8001af2:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001af4:	f7fe fcca 	bl	800048c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8001af8:	2200      	movs	r2, #0
 8001afa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001afe:	4828      	ldr	r0, [pc, #160]	; (8001ba0 <main+0xfc>)
 8001b00:	f7fe fcc4 	bl	800048c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001b04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b08:	a905      	add	r1, sp, #20
 8001b0a:	4824      	ldr	r0, [pc, #144]	; (8001b9c <main+0xf8>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001b0c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b0e:	9408      	str	r4, [sp, #32]
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b10:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b12:	f7fe fbe3 	bl	80002dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001b16:	f44f 7300 	mov.w	r3, #512	; 0x200
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b1a:	4821      	ldr	r0, [pc, #132]	; (8001ba0 <main+0xfc>)
 8001b1c:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001b1e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b20:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b22:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b24:	f7fe fbda 	bl	80002dc <HAL_GPIO_Init>

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 7199;
 8001b28:	f641 4e1f 	movw	lr, #7199	; 0x1c1f
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 9999;
 8001b2c:	f242 720f 	movw	r2, #9999	; 0x270f
{

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim2.Instance = TIM2;
 8001b30:	4c1c      	ldr	r4, [pc, #112]	; (8001ba4 <main+0x100>)
  htim2.Init.Prescaler = 7199;
 8001b32:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b36:	e884 4008 	stmia.w	r4, {r3, lr}
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 9999;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b3a:	4620      	mov	r0, r4
  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 7199;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	60a3      	str	r3, [r4, #8]
  htim2.Init.Period = 9999;
 8001b40:	60e2      	str	r2, [r4, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b42:	6123      	str	r3, [r4, #16]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b44:	f7ff f9e0 	bl	8000f08 <HAL_TIM_Base_Init>
 8001b48:	b100      	cbz	r0, 8001b4c <main+0xa8>
 8001b4a:	e7fe      	b.n	8001b4a <main+0xa6>
  {
    Error_Handler();
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b50:	a905      	add	r1, sp, #20
 8001b52:	4620      	mov	r0, r4
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b54:	9305      	str	r3, [sp, #20]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b56:	f7ff f842 	bl	8000bde <HAL_TIM_ConfigClockSource>
 8001b5a:	b100      	cbz	r0, 8001b5e <main+0xba>
 8001b5c:	e7fe      	b.n	8001b5c <main+0xb8>
  {
    Error_Handler();
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b5e:	9003      	str	r0, [sp, #12]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b60:	9004      	str	r0, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b62:	a903      	add	r1, sp, #12
 8001b64:	4620      	mov	r0, r4
 8001b66:	f7ff f9e9 	bl	8000f3c <HAL_TIMEx_MasterConfigSynchronization>
 8001b6a:	b100      	cbz	r0, 8001b6e <main+0xca>
 8001b6c:	e7fe      	b.n	8001b6c <main+0xc8>
  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_TIM2_Init();

  /* USER CODE BEGIN 2 */
  while(HAL_TIM_Base_Start_IT(&htim2)!=HAL_OK);
 8001b6e:	480d      	ldr	r0, [pc, #52]	; (8001ba4 <main+0x100>)
 8001b70:	f7ff f82a 	bl	8000bc8 <HAL_TIM_Base_Start_IT>
 8001b74:	4606      	mov	r6, r0
 8001b76:	2800      	cmp	r0, #0
 8001b78:	d1f9      	bne.n	8001b6e <main+0xca>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001b7a:	4d0b      	ldr	r5, [pc, #44]	; (8001ba8 <main+0x104>)
 8001b7c:	ac05      	add	r4, sp, #20
 8001b7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b82:	682b      	ldr	r3, [r5, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001b84:	4631      	mov	r1, r6
 8001b86:	a805      	add	r0, sp, #20
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001b88:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001b8a:	f7ff fa00 	bl	8000f8e <osThreadCreate>
 8001b8e:	4b07      	ldr	r3, [pc, #28]	; (8001bac <main+0x108>)
 8001b90:	6018      	str	r0, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */
 

  /* Start scheduler */
  osKernelStart();
 8001b92:	f7ff f9f7 	bl	8000f84 <osKernelStart>
 8001b96:	e7fe      	b.n	8001b96 <main+0xf2>
 8001b98:	40021000 	.word	0x40021000
 8001b9c:	40011000 	.word	0x40011000
 8001ba0:	40010c00 	.word	0x40010c00
 8001ba4:	20000d74 	.word	0x20000d74
 8001ba8:	08001e28 	.word	0x08001e28
 8001bac:	20000d70 	.word	0x20000d70

08001bb0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001bb0:	b508      	push	{r3, lr}
/* USER CODE BEGIN Callback 0 */

/* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001bb2:	4a0c      	ldr	r2, [pc, #48]	; (8001be4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001bb4:	6803      	ldr	r3, [r0, #0]
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d103      	bne.n	8001bc2 <HAL_TIM_PeriodElapsedCallback+0x12>
  else if (htim->Instance == TIM2) {
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9);
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
  }
/* USER CODE END Callback 1 */
}
 8001bba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
/* USER CODE BEGIN Callback 0 */

/* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
    HAL_IncTick();
 8001bbe:	f7fe bafd 	b.w	80001bc <HAL_IncTick>
  }
/* USER CODE BEGIN Callback 1 */
  else if (htim->Instance == TIM2) {
 8001bc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bc6:	d10b      	bne.n	8001be0 <HAL_TIM_PeriodElapsedCallback+0x30>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9);
 8001bc8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001bcc:	4806      	ldr	r0, [pc, #24]	; (8001be8 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001bce:	f7fe fc61 	bl	8000494 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
  }
/* USER CODE END Callback 1 */
}
 8001bd2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_IncTick();
  }
/* USER CODE BEGIN Callback 1 */
  else if (htim->Instance == TIM2) {
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9);
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001bd6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bda:	4804      	ldr	r0, [pc, #16]	; (8001bec <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001bdc:	f7fe bc5a 	b.w	8000494 <HAL_GPIO_TogglePin>
 8001be0:	bd08      	pop	{r3, pc}
 8001be2:	bf00      	nop
 8001be4:	40012c00 	.word	0x40012c00
 8001be8:	40010c00 	.word	0x40010c00
 8001bec:	40011000 	.word	0x40011000

08001bf0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001bf0:	4b20      	ldr	r3, [pc, #128]	; (8001c74 <HAL_MspInit+0x84>)
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bf2:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001bf4:	699a      	ldr	r2, [r3, #24]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bf6:	2003      	movs	r0, #3
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001bf8:	f042 0201 	orr.w	r2, r2, #1
 8001bfc:	619a      	str	r2, [r3, #24]
 8001bfe:	699b      	ldr	r3, [r3, #24]
 8001c00:	f003 0301 	and.w	r3, r3, #1
 8001c04:	9301      	str	r3, [sp, #4]
 8001c06:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c08:	f7fe faf4 	bl	80001f4 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	4611      	mov	r1, r2
 8001c10:	f06f 000b 	mvn.w	r0, #11
 8001c14:	f7fe fb00 	bl	8000218 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001c18:	2200      	movs	r2, #0
 8001c1a:	4611      	mov	r1, r2
 8001c1c:	f06f 000a 	mvn.w	r0, #10
 8001c20:	f7fe fafa 	bl	8000218 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8001c24:	2200      	movs	r2, #0
 8001c26:	4611      	mov	r1, r2
 8001c28:	f06f 0009 	mvn.w	r0, #9
 8001c2c:	f7fe faf4 	bl	8000218 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8001c30:	2200      	movs	r2, #0
 8001c32:	4611      	mov	r1, r2
 8001c34:	f06f 0004 	mvn.w	r0, #4
 8001c38:	f7fe faee 	bl	8000218 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	4611      	mov	r1, r2
 8001c40:	f06f 0003 	mvn.w	r0, #3
 8001c44:	f7fe fae8 	bl	8000218 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001c48:	2200      	movs	r2, #0
 8001c4a:	210f      	movs	r1, #15
 8001c4c:	f06f 0001 	mvn.w	r0, #1
 8001c50:	f7fe fae2 	bl	8000218 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8001c54:	2200      	movs	r2, #0
 8001c56:	210f      	movs	r1, #15
 8001c58:	f04f 30ff 	mov.w	r0, #4294967295
 8001c5c:	f7fe fadc 	bl	8000218 <HAL_NVIC_SetPriority>

    /**DISABLE: JTAG-DP Disabled and SW-DP Disabled 
    */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001c60:	4a05      	ldr	r2, [pc, #20]	; (8001c78 <HAL_MspInit+0x88>)
 8001c62:	6853      	ldr	r3, [r2, #4]
 8001c64:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001c68:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001c6c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c6e:	b003      	add	sp, #12
 8001c70:	f85d fb04 	ldr.w	pc, [sp], #4
 8001c74:	40021000 	.word	0x40021000
 8001c78:	40010000 	.word	0x40010000

08001c7c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{

  if(htim_base->Instance==TIM2)
 8001c7c:	6803      	ldr	r3, [r0, #0]

  /* USER CODE END MspInit 1 */
}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c7e:	b507      	push	{r0, r1, r2, lr}

  if(htim_base->Instance==TIM2)
 8001c80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c84:	d112      	bne.n	8001cac <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c86:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001c8a:	69da      	ldr	r2, [r3, #28]
    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001c8c:	201c      	movs	r0, #28
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c8e:	f042 0201 	orr.w	r2, r2, #1
 8001c92:	61da      	str	r2, [r3, #28]
 8001c94:	69db      	ldr	r3, [r3, #28]
    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001c96:	2200      	movs	r2, #0
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c98:	f003 0301 	and.w	r3, r3, #1
 8001c9c:	9301      	str	r3, [sp, #4]
    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001c9e:	4611      	mov	r1, r2
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ca0:	9b01      	ldr	r3, [sp, #4]
    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001ca2:	f7fe fab9 	bl	8000218 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ca6:	201c      	movs	r0, #28
 8001ca8:	f7fe faea 	bl	8000280 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001cac:	b003      	add	sp, #12
 8001cae:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001cb4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cb4:	b510      	push	{r4, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0); 
 8001cb6:	4601      	mov	r1, r0
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cb8:	b088      	sub	sp, #32
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0); 
 8001cba:	2200      	movs	r2, #0
 8001cbc:	2019      	movs	r0, #25
 8001cbe:	f7fe faab 	bl	8000218 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn); 
 8001cc2:	2019      	movs	r0, #25
 8001cc4:	f7fe fadc 	bl	8000280 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001cc8:	4b14      	ldr	r3, [pc, #80]	; (8001d1c <HAL_InitTick+0x68>)
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001cca:	a901      	add	r1, sp, #4
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn); 
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001ccc:	699a      	ldr	r2, [r3, #24]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001cce:	a803      	add	r0, sp, #12
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn); 
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001cd0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001cd4:	619a      	str	r2, [r3, #24]
 8001cd6:	699b      	ldr	r3, [r3, #24]
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001cd8:	4c11      	ldr	r4, [pc, #68]	; (8001d20 <HAL_InitTick+0x6c>)
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn); 
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001cda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cde:	9302      	str	r3, [sp, #8]
 8001ce0:	9b02      	ldr	r3, [sp, #8]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001ce2:	f7fe ff53 	bl	8000b8c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001ce6:	f7fe ff39 	bl	8000b5c <HAL_RCC_GetPCLK2Freq>
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001cea:	4b0e      	ldr	r3, [pc, #56]	; (8001d24 <HAL_InitTick+0x70>)
 8001cec:	6023      	str	r3, [r4, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8001cee:	f240 33e7 	movw	r3, #999	; 0x3e7
 8001cf2:	60e3      	str	r3, [r4, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001cf4:	4b0c      	ldr	r3, [pc, #48]	; (8001d28 <HAL_InitTick+0x74>)
 8001cf6:	fbb0 f0f3 	udiv	r0, r0, r3
 8001cfa:	3801      	subs	r0, #1
  htim1.Init.ClockDivision = 0;
 8001cfc:	2300      	movs	r3, #0
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
  htim1.Init.Prescaler = uwPrescalerValue;
 8001cfe:	6060      	str	r0, [r4, #4]
  htim1.Init.ClockDivision = 0;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001d00:	4620      	mov	r0, r4
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
  htim1.Init.Prescaler = uwPrescalerValue;
  htim1.Init.ClockDivision = 0;
 8001d02:	6123      	str	r3, [r4, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d04:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001d06:	f7ff f8ff 	bl	8000f08 <HAL_TIM_Base_Init>
 8001d0a:	b918      	cbnz	r0, 8001d14 <HAL_InitTick+0x60>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001d0c:	4620      	mov	r0, r4
 8001d0e:	f7fe ff5b 	bl	8000bc8 <HAL_TIM_Base_Start_IT>
 8001d12:	e000      	b.n	8001d16 <HAL_InitTick+0x62>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8001d14:	2001      	movs	r0, #1
}
 8001d16:	b008      	add	sp, #32
 8001d18:	bd10      	pop	{r4, pc}
 8001d1a:	bf00      	nop
 8001d1c:	40021000 	.word	0x40021000
 8001d20:	20000db0 	.word	0x20000db0
 8001d24:	40012c00 	.word	0x40012c00
 8001d28:	000f4240 	.word	0x000f4240

08001d2c <NMI_Handler>:
 8001d2c:	4770      	bx	lr

08001d2e <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8001d2e:	e7fe      	b.n	8001d2e <HardFault_Handler>

08001d30 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8001d30:	e7fe      	b.n	8001d30 <MemManage_Handler>

08001d32 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8001d32:	e7fe      	b.n	8001d32 <BusFault_Handler>

08001d34 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8001d34:	e7fe      	b.n	8001d34 <UsageFault_Handler>

08001d36 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8001d36:	4770      	bx	lr

08001d38 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 8001d38:	f7ff b94d 	b.w	8000fd6 <osSystickHandler>

08001d3c <TIM1_UP_IRQHandler>:
void TIM1_UP_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001d3c:	4801      	ldr	r0, [pc, #4]	; (8001d44 <TIM1_UP_IRQHandler+0x8>)
 8001d3e:	f7ff b80c 	b.w	8000d5a <HAL_TIM_IRQHandler>
 8001d42:	bf00      	nop
 8001d44:	20000db0 	.word	0x20000db0

08001d48 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001d48:	4801      	ldr	r0, [pc, #4]	; (8001d50 <TIM2_IRQHandler+0x8>)
 8001d4a:	f7ff b806 	b.w	8000d5a <HAL_TIM_IRQHandler>
 8001d4e:	bf00      	nop
 8001d50:	20000d74 	.word	0x20000d74

08001d54 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001d54:	4b0f      	ldr	r3, [pc, #60]	; (8001d94 <SystemInit+0x40>)
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	f042 0201 	orr.w	r2, r2, #1
 8001d5c:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8001d5e:	6859      	ldr	r1, [r3, #4]
 8001d60:	4a0d      	ldr	r2, [pc, #52]	; (8001d98 <SystemInit+0x44>)
 8001d62:	400a      	ands	r2, r1
 8001d64:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001d6c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001d70:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001d78:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8001d7a:	685a      	ldr	r2, [r3, #4]
 8001d7c:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001d80:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8001d82:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001d86:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001d88:	4b04      	ldr	r3, [pc, #16]	; (8001d9c <SystemInit+0x48>)
 8001d8a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d8e:	609a      	str	r2, [r3, #8]
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	40021000 	.word	0x40021000
 8001d98:	f8ff0000 	.word	0xf8ff0000
 8001d9c:	e000ed00 	.word	0xe000ed00

08001da0 <__libc_init_array>:
 8001da0:	4b0e      	ldr	r3, [pc, #56]	; (8001ddc <__libc_init_array+0x3c>)
 8001da2:	b570      	push	{r4, r5, r6, lr}
 8001da4:	461e      	mov	r6, r3
 8001da6:	4c0e      	ldr	r4, [pc, #56]	; (8001de0 <__libc_init_array+0x40>)
 8001da8:	2500      	movs	r5, #0
 8001daa:	1ae4      	subs	r4, r4, r3
 8001dac:	10a4      	asrs	r4, r4, #2
 8001dae:	42a5      	cmp	r5, r4
 8001db0:	d004      	beq.n	8001dbc <__libc_init_array+0x1c>
 8001db2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001db6:	4798      	blx	r3
 8001db8:	3501      	adds	r5, #1
 8001dba:	e7f8      	b.n	8001dae <__libc_init_array+0xe>
 8001dbc:	f000 f81e 	bl	8001dfc <_init>
 8001dc0:	4b08      	ldr	r3, [pc, #32]	; (8001de4 <__libc_init_array+0x44>)
 8001dc2:	4c09      	ldr	r4, [pc, #36]	; (8001de8 <__libc_init_array+0x48>)
 8001dc4:	461e      	mov	r6, r3
 8001dc6:	1ae4      	subs	r4, r4, r3
 8001dc8:	10a4      	asrs	r4, r4, #2
 8001dca:	2500      	movs	r5, #0
 8001dcc:	42a5      	cmp	r5, r4
 8001dce:	d004      	beq.n	8001dda <__libc_init_array+0x3a>
 8001dd0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001dd4:	4798      	blx	r3
 8001dd6:	3501      	adds	r5, #1
 8001dd8:	e7f8      	b.n	8001dcc <__libc_init_array+0x2c>
 8001dda:	bd70      	pop	{r4, r5, r6, pc}
 8001ddc:	08001e68 	.word	0x08001e68
 8001de0:	08001e68 	.word	0x08001e68
 8001de4:	08001e68 	.word	0x08001e68
 8001de8:	08001e6c 	.word	0x08001e6c

08001dec <memset>:
 8001dec:	4603      	mov	r3, r0
 8001dee:	4402      	add	r2, r0
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d002      	beq.n	8001dfa <memset+0xe>
 8001df4:	f803 1b01 	strb.w	r1, [r3], #1
 8001df8:	e7fa      	b.n	8001df0 <memset+0x4>
 8001dfa:	4770      	bx	lr

08001dfc <_init>:
 8001dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dfe:	bf00      	nop
 8001e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e02:	bc08      	pop	{r3}
 8001e04:	469e      	mov	lr, r3
 8001e06:	4770      	bx	lr

08001e08 <_fini>:
 8001e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e0a:	bf00      	nop
 8001e0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e0e:	bc08      	pop	{r3}
 8001e10:	469e      	mov	lr, r3
 8001e12:	4770      	bx	lr
