
L151_Code_Conv.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001c8c  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08001dc8  08001dc8  00011dc8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001dec  08001dec  00011dec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001df0  08001df0  00011df0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08001df4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000dc  20000004  08001df8  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200000e0  08001df8  000200e0  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000f7c2  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000220e  00000000  00000000  0002f7ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003234  00000000  00000000  000319fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000005f0  00000000  00000000  00034c38  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000009a0  00000000  00000000  00035228  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00004185  00000000  00000000  00035bc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000270f  00000000  00000000  00039d4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003c45c  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000ef0  00000000  00000000  0003c4d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000004 	.word	0x20000004
 8000158:	00000000 	.word	0x00000000
 800015c:	08001db0 	.word	0x08001db0

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000008 	.word	0x20000008
 8000178:	08001db0 	.word	0x08001db0

0800017c <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock /1000);
 800017c:	4b08      	ldr	r3, [pc, #32]	; (80001a0 <HAL_InitTick+0x24>)
{
 800017e:	b510      	push	{r4, lr}
 8000180:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock /1000);
 8000182:	6818      	ldr	r0, [r3, #0]
 8000184:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000188:	fbb0 f0f3 	udiv	r0, r0, r3
 800018c:	f000 fae4 	bl	8000758 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8000190:	2200      	movs	r2, #0
 8000192:	4621      	mov	r1, r4
 8000194:	f04f 30ff 	mov.w	r0, #4294967295
 8000198:	f000 fa9e 	bl	80006d8 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 800019c:	2000      	movs	r0, #0
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000

080001a4 <HAL_Init>:
{
 80001a4:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001a6:	2003      	movs	r0, #3
 80001a8:	f000 fa84 	bl	80006b4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001ac:	2000      	movs	r0, #0
 80001ae:	f7ff ffe5 	bl	800017c <HAL_InitTick>
  HAL_MspInit();
 80001b2:	f001 fcbd 	bl	8001b30 <HAL_MspInit>
}
 80001b6:	2000      	movs	r0, #0
 80001b8:	bd08      	pop	{r3, pc}
	...

080001bc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80001bc:	4a02      	ldr	r2, [pc, #8]	; (80001c8 <HAL_IncTick+0xc>)
 80001be:	6813      	ldr	r3, [r2, #0]
 80001c0:	3301      	adds	r3, #1
 80001c2:	6013      	str	r3, [r2, #0]
 80001c4:	4770      	bx	lr
 80001c6:	bf00      	nop
 80001c8:	20000020 	.word	0x20000020

080001cc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001cc:	4b01      	ldr	r3, [pc, #4]	; (80001d4 <HAL_GetTick+0x8>)
 80001ce:	6818      	ldr	r0, [r3, #0]
}
 80001d0:	4770      	bx	lr
 80001d2:	bf00      	nop
 80001d4:	20000020 	.word	0x20000020

080001d8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80001d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cr1 = 0;
  uint32_t tmp_cr2 = 0;
  
  /* Check ADC handle */
  if(hadc == NULL)
 80001da:	4604      	mov	r4, r0
 80001dc:	b908      	cbnz	r0, 80001e2 <HAL_ADC_Init+0xa>
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
      
      tmp_hal_status = HAL_ERROR;
 80001de:	2001      	movs	r0, #1
 80001e0:	e092      	b.n	8000308 <HAL_ADC_Init+0x130>
  if (hadc->State == HAL_ADC_STATE_RESET)
 80001e2:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80001e4:	b973      	cbnz	r3, 8000204 <HAL_ADC_Init+0x2c>
    ADC_CLEAR_ERRORCODE(hadc);
 80001e6:	6503      	str	r3, [r0, #80]	; 0x50
    hadc->Lock = HAL_UNLOCKED;
 80001e8:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80001ec:	4b54      	ldr	r3, [pc, #336]	; (8000340 <HAL_ADC_Init+0x168>)
 80001ee:	6a1a      	ldr	r2, [r3, #32]
 80001f0:	f042 0201 	orr.w	r2, r2, #1
 80001f4:	621a      	str	r2, [r3, #32]
 80001f6:	6a1b      	ldr	r3, [r3, #32]
 80001f8:	f003 0301 	and.w	r3, r3, #1
 80001fc:	9301      	str	r3, [sp, #4]
 80001fe:	9b01      	ldr	r3, [sp, #4]
    HAL_ADC_MspInit(hadc);
 8000200:	f001 fcee 	bl	8001be0 <HAL_ADC_MspInit>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000204:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000206:	06db      	lsls	r3, r3, #27
 8000208:	d4e9      	bmi.n	80001de <HAL_ADC_Init+0x6>
    ADC_STATE_CLR_SET(hadc->State,
 800020a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    MODIFY_REG(ADC->CCR                 ,
 800020c:	4a4d      	ldr	r2, [pc, #308]	; (8000344 <HAL_ADC_Init+0x16c>)
    ADC_STATE_CLR_SET(hadc->State,
 800020e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000212:	f023 0302 	bic.w	r3, r3, #2
 8000216:	f043 0302 	orr.w	r3, r3, #2
 800021a:	64e3      	str	r3, [r4, #76]	; 0x4c
    MODIFY_REG(ADC->CCR                 ,
 800021c:	6853      	ldr	r3, [r2, #4]
 800021e:	6861      	ldr	r1, [r4, #4]
 8000220:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000224:	430b      	orrs	r3, r1
 8000226:	6053      	str	r3, [r2, #4]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000228:	f44f 7000 	mov.w	r0, #512	; 0x200
 800022c:	fa90 f0a0 	rbit	r0, r0
 8000230:	2302      	movs	r3, #2
                ADC_CR2_DMACONTREQ(hadc->Init.DMAContinuousRequests) |
 8000232:	fab0 f080 	clz	r0, r0
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)     );
 8000236:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000238:	fa93 f3a3 	rbit	r3, r3
 800023c:	fab3 f383 	clz	r3, r3
                ADC_CR2_DMACONTREQ(hadc->Init.DMAContinuousRequests) |
 8000240:	6965      	ldr	r5, [r4, #20]
 8000242:	68e2      	ldr	r2, [r4, #12]
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)     );
 8000244:	fa01 f303 	lsl.w	r3, r1, r3
                ADC_CR2_DMACONTREQ(hadc->Init.DMAContinuousRequests) |
 8000248:	432a      	orrs	r2, r5
 800024a:	6a25      	ldr	r5, [r4, #32]
 800024c:	432a      	orrs	r2, r5
 800024e:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8000250:	fa05 f000 	lsl.w	r0, r5, r0
 8000254:	4302      	orrs	r2, r0
                hadc->Init.ChannelsBank                              |
 8000256:	4313      	orrs	r3, r2
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000258:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800025a:	6925      	ldr	r5, [r4, #16]
 800025c:	2a10      	cmp	r2, #16
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 800025e:	bf1c      	itt	ne
 8000260:	6ba0      	ldrne	r0, [r4, #56]	; 0x38
 8000262:	4302      	orrne	r2, r0
    if ((ADC_IS_ENABLE(hadc) == RESET))
 8000264:	6820      	ldr	r0, [r4, #0]
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8000266:	bf18      	it	ne
 8000268:	4313      	orrne	r3, r2
    if ((ADC_IS_ENABLE(hadc) == RESET))
 800026a:	6802      	ldr	r2, [r0, #0]
 800026c:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 8000270:	d123      	bne.n	80002ba <HAL_ADC_Init+0xe2>
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8000272:	69a6      	ldr	r6, [r4, #24]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8000274:	69e7      	ldr	r7, [r4, #28]
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8000276:	4333      	orrs	r3, r6
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8000278:	68a6      	ldr	r6, [r4, #8]
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 800027a:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800027e:	ea46 0607 	orr.w	r6, r6, r7
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8000282:	d043      	beq.n	800030c <HAL_ADC_Init+0x134>
 8000284:	2d01      	cmp	r5, #1
 8000286:	bf08      	it	eq
 8000288:	f44f 7280 	moveq.w	r2, #256	; 0x100
                  hadc->Init.LowPowerAutoPowerOff           |
 800028c:	4332      	orrs	r2, r6
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800028e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000290:	2e01      	cmp	r6, #1
 8000292:	d10d      	bne.n	80002b0 <HAL_ADC_Init+0xd8>
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8000294:	2900      	cmp	r1, #0
 8000296:	d13b      	bne.n	8000310 <HAL_ADC_Init+0x138>
 8000298:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 800029c:	fa91 f1a1 	rbit	r1, r1
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80002a0:	fab1 f681 	clz	r6, r1
 80002a4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80002a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80002aa:	3901      	subs	r1, #1
 80002ac:	40b1      	lsls	r1, r6
 80002ae:	430a      	orrs	r2, r1
        MODIFY_REG(hadc->Instance->CR1,
 80002b0:	6846      	ldr	r6, [r0, #4]
 80002b2:	4925      	ldr	r1, [pc, #148]	; (8000348 <HAL_ADC_Init+0x170>)
 80002b4:	4031      	ands	r1, r6
 80002b6:	430a      	orrs	r2, r1
 80002b8:	6042      	str	r2, [r0, #4]
    MODIFY_REG(hadc->Instance->CR2    ,
 80002ba:	6881      	ldr	r1, [r0, #8]
 80002bc:	4a23      	ldr	r2, [pc, #140]	; (800034c <HAL_ADC_Init+0x174>)
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80002be:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
    MODIFY_REG(hadc->Instance->CR2    ,
 80002c2:	ea02 0201 	and.w	r2, r2, r1
 80002c6:	ea42 0203 	orr.w	r2, r2, r3
 80002ca:	6082      	str	r2, [r0, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80002cc:	d001      	beq.n	80002d2 <HAL_ADC_Init+0xfa>
 80002ce:	2d01      	cmp	r5, #1
 80002d0:	d127      	bne.n	8000322 <HAL_ADC_Init+0x14a>
      MODIFY_REG(hadc->Instance->SQR1                         ,
 80002d2:	6b05      	ldr	r5, [r0, #48]	; 0x30
 80002d4:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 80002d8:	fa92 f2a2 	rbit	r2, r2
 80002dc:	fab2 f182 	clz	r1, r2
 80002e0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80002e2:	3a01      	subs	r2, #1
 80002e4:	408a      	lsls	r2, r1
 80002e6:	f025 71f8 	bic.w	r1, r5, #32505856	; 0x1f00000
 80002ea:	430a      	orrs	r2, r1
      MODIFY_REG(hadc->Instance->SQR1,
 80002ec:	6302      	str	r2, [r0, #48]	; 0x30
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 80002ee:	6881      	ldr	r1, [r0, #8]
 80002f0:	4a17      	ldr	r2, [pc, #92]	; (8000350 <HAL_ADC_Init+0x178>)
 80002f2:	400a      	ands	r2, r1
 80002f4:	4293      	cmp	r3, r2
 80002f6:	d118      	bne.n	800032a <HAL_ADC_Init+0x152>
      ADC_CLEAR_ERRORCODE(hadc);
 80002f8:	2000      	movs	r0, #0
 80002fa:	6520      	str	r0, [r4, #80]	; 0x50
      ADC_STATE_CLR_SET(hadc->State,
 80002fc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80002fe:	f023 0303 	bic.w	r3, r3, #3
 8000302:	f043 0301 	orr.w	r3, r3, #1
 8000306:	64e3      	str	r3, [r4, #76]	; 0x4c
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 8000308:	b003      	add	sp, #12
 800030a:	bdf0      	pop	{r4, r5, r6, r7, pc}
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 800030c:	462a      	mov	r2, r5
 800030e:	e7bd      	b.n	800028c <HAL_ADC_Init+0xb4>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000310:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8000312:	f041 0120 	orr.w	r1, r1, #32
 8000316:	64e1      	str	r1, [r4, #76]	; 0x4c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000318:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800031a:	f041 0101 	orr.w	r1, r1, #1
 800031e:	6521      	str	r1, [r4, #80]	; 0x50
 8000320:	e7c6      	b.n	80002b0 <HAL_ADC_Init+0xd8>
      MODIFY_REG(hadc->Instance->SQR1,
 8000322:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8000324:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 8000328:	e7e0      	b.n	80002ec <HAL_ADC_Init+0x114>
      ADC_STATE_CLR_SET(hadc->State,
 800032a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800032c:	f023 0312 	bic.w	r3, r3, #18
 8000330:	f043 0310 	orr.w	r3, r3, #16
 8000334:	64e3      	str	r3, [r4, #76]	; 0x4c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000336:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000338:	f043 0301 	orr.w	r3, r3, #1
 800033c:	6523      	str	r3, [r4, #80]	; 0x50
 800033e:	e74e      	b.n	80001de <HAL_ADC_Init+0x6>
 8000340:	40023800 	.word	0x40023800
 8000344:	40012700 	.word	0x40012700
 8000348:	fcfc16ff 	.word	0xfcfc16ff
 800034c:	c0fff18d 	.word	0xc0fff18d
 8000350:	bf80fffe 	.word	0xbf80fffe

08000354 <HAL_ADC_PollForConversion>:
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and and polling for end of each conversion. */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000354:	6803      	ldr	r3, [r0, #0]
{
 8000356:	b570      	push	{r4, r5, r6, lr}
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000358:	689a      	ldr	r2, [r3, #8]
{
 800035a:	4604      	mov	r4, r0
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800035c:	0556      	lsls	r6, r2, #21
{
 800035e:	460d      	mov	r5, r1
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000360:	d50b      	bpl.n	800037a <HAL_ADC_PollForConversion+0x26>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8000362:	689b      	ldr	r3, [r3, #8]
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000364:	05d8      	lsls	r0, r3, #23
 8000366:	d508      	bpl.n	800037a <HAL_ADC_PollForConversion+0x26>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000368:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
    
    return HAL_ERROR;
 800036a:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800036c:	f043 0320 	orr.w	r3, r3, #32
 8000370:	64e3      	str	r3, [r4, #76]	; 0x4c
    __HAL_UNLOCK(hadc);
 8000372:	2300      	movs	r3, #0
 8000374:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    return HAL_ERROR;
 8000378:	bd70      	pop	{r4, r5, r6, pc}
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800037a:	f7ff ff27 	bl	80001cc <HAL_GetTick>
 800037e:	4606      	mov	r6, r0
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000380:	6823      	ldr	r3, [r4, #0]
 8000382:	681a      	ldr	r2, [r3, #0]
 8000384:	0792      	lsls	r2, r2, #30
 8000386:	d50e      	bpl.n	80003a6 <HAL_ADC_PollForConversion+0x52>
  }
  
  /* Clear end of conversion flag of regular group if low power feature     */
  /* "Auto Wait" is disabled, to not interfere with this feature until data */
  /* register is read using function HAL_ADC_GetValue().                    */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8000388:	69a2      	ldr	r2, [r4, #24]
 800038a:	b912      	cbnz	r2, 8000392 <HAL_ADC_PollForConversion+0x3e>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800038c:	f06f 0212 	mvn.w	r2, #18
 8000390:	601a      	str	r2, [r3, #0]
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000392:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8000394:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000398:	64e2      	str	r2, [r4, #76]	; 0x4c
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32L1, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800039a:	689a      	ldr	r2, [r3, #8]
 800039c:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80003a0:	d013      	beq.n	80003ca <HAL_ADC_PollForConversion+0x76>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80003a2:	2000      	movs	r0, #0
 80003a4:	bd70      	pop	{r4, r5, r6, pc}
    if(Timeout != HAL_MAX_DELAY)
 80003a6:	1c69      	adds	r1, r5, #1
 80003a8:	d0eb      	beq.n	8000382 <HAL_ADC_PollForConversion+0x2e>
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80003aa:	b945      	cbnz	r5, 80003be <HAL_ADC_PollForConversion+0x6a>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80003ac:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
        return HAL_TIMEOUT;
 80003ae:	2003      	movs	r0, #3
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80003b0:	f043 0304 	orr.w	r3, r3, #4
 80003b4:	64e3      	str	r3, [r4, #76]	; 0x4c
        __HAL_UNLOCK(hadc);
 80003b6:	2300      	movs	r3, #0
 80003b8:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
        return HAL_TIMEOUT;
 80003bc:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80003be:	f7ff ff05 	bl	80001cc <HAL_GetTick>
 80003c2:	1b80      	subs	r0, r0, r6
 80003c4:	4285      	cmp	r5, r0
 80003c6:	d2db      	bcs.n	8000380 <HAL_ADC_PollForConversion+0x2c>
 80003c8:	e7f0      	b.n	80003ac <HAL_ADC_PollForConversion+0x58>
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80003ca:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	d1e8      	bne.n	80003a2 <HAL_ADC_PollForConversion+0x4e>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80003d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80003d2:	f012 7ff8 	tst.w	r2, #32505856	; 0x1f00000
 80003d6:	d002      	beq.n	80003de <HAL_ADC_PollForConversion+0x8a>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80003d8:	689b      	ldr	r3, [r3, #8]
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80003da:	055b      	lsls	r3, r3, #21
 80003dc:	d4e1      	bmi.n	80003a2 <HAL_ADC_PollForConversion+0x4e>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80003de:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80003e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80003e4:	64e3      	str	r3, [r4, #76]	; 0x4c
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80003e6:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80003e8:	f410 5080 	ands.w	r0, r0, #4096	; 0x1000
 80003ec:	d1d9      	bne.n	80003a2 <HAL_ADC_PollForConversion+0x4e>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80003ee:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80003f0:	f043 0301 	orr.w	r3, r3, #1
 80003f4:	64e3      	str	r3, [r4, #76]	; 0x4c
}
 80003f6:	bd70      	pop	{r4, r5, r6, pc}

080003f8 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80003f8:	6803      	ldr	r3, [r0, #0]
 80003fa:	6d98      	ldr	r0, [r3, #88]	; 0x58
}
 80003fc:	4770      	bx	lr
	...

08000400 <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0;
 8000400:	2300      	movs	r3, #0
{
 8000402:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0;
 8000404:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000406:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 800040a:	2b01      	cmp	r3, #1
 800040c:	f000 809c 	beq.w	8000548 <HAL_ADC_ConfigChannel+0x148>
 8000410:	2301      	movs	r3, #1
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8000412:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 8000414:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
  if (sConfig->Rank < 7)
 8000418:	2d06      	cmp	r5, #6
 800041a:	6804      	ldr	r4, [r0, #0]
 800041c:	ea4f 0385 	mov.w	r3, r5, lsl #2
 8000420:	680a      	ldr	r2, [r1, #0]
 8000422:	d821      	bhi.n	8000468 <HAL_ADC_ConfigChannel+0x68>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8000424:	442b      	add	r3, r5
 8000426:	251f      	movs	r5, #31
 8000428:	6c26      	ldr	r6, [r4, #64]	; 0x40
 800042a:	3b05      	subs	r3, #5
 800042c:	409d      	lsls	r5, r3
 800042e:	ea26 0505 	bic.w	r5, r6, r5
 8000432:	fa02 f303 	lsl.w	r3, r2, r3
 8000436:	432b      	orrs	r3, r5
 8000438:	6423      	str	r3, [r4, #64]	; 0x40
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 800043a:	2a09      	cmp	r2, #9
 800043c:	d84a      	bhi.n	80004d4 <HAL_ADC_ConfigChannel+0xd4>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 800043e:	2507      	movs	r5, #7
 8000440:	6963      	ldr	r3, [r4, #20]
 8000442:	eb02 0642 	add.w	r6, r2, r2, lsl #1
 8000446:	6889      	ldr	r1, [r1, #8]
 8000448:	40b5      	lsls	r5, r6
 800044a:	ea23 0305 	bic.w	r3, r3, r5
 800044e:	40b1      	lsls	r1, r6
 8000450:	430b      	orrs	r3, r1
 8000452:	6163      	str	r3, [r4, #20]
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000454:	f1a2 0310 	sub.w	r3, r2, #16
 8000458:	2b01      	cmp	r3, #1
 800045a:	d95d      	bls.n	8000518 <HAL_ADC_ConfigChannel+0x118>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800045c:	2300      	movs	r3, #0
 800045e:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8000462:	4618      	mov	r0, r3
}
 8000464:	b002      	add	sp, #8
 8000466:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13)
 8000468:	2d0c      	cmp	r5, #12
 800046a:	d80b      	bhi.n	8000484 <HAL_ADC_ConfigChannel+0x84>
    MODIFY_REG(hadc->Instance->SQR4,
 800046c:	442b      	add	r3, r5
 800046e:	251f      	movs	r5, #31
 8000470:	6be6      	ldr	r6, [r4, #60]	; 0x3c
 8000472:	3b23      	subs	r3, #35	; 0x23
 8000474:	409d      	lsls	r5, r3
 8000476:	ea26 0505 	bic.w	r5, r6, r5
 800047a:	fa02 f303 	lsl.w	r3, r2, r3
 800047e:	432b      	orrs	r3, r5
 8000480:	63e3      	str	r3, [r4, #60]	; 0x3c
 8000482:	e7da      	b.n	800043a <HAL_ADC_ConfigChannel+0x3a>
  else if (sConfig->Rank < 19)
 8000484:	2d12      	cmp	r5, #18
 8000486:	d80b      	bhi.n	80004a0 <HAL_ADC_ConfigChannel+0xa0>
    MODIFY_REG(hadc->Instance->SQR3,
 8000488:	442b      	add	r3, r5
 800048a:	251f      	movs	r5, #31
 800048c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800048e:	3b41      	subs	r3, #65	; 0x41
 8000490:	409d      	lsls	r5, r3
 8000492:	ea26 0505 	bic.w	r5, r6, r5
 8000496:	fa02 f303 	lsl.w	r3, r2, r3
 800049a:	432b      	orrs	r3, r5
 800049c:	63a3      	str	r3, [r4, #56]	; 0x38
 800049e:	e7cc      	b.n	800043a <HAL_ADC_ConfigChannel+0x3a>
  else if (sConfig->Rank < 25)
 80004a0:	2d18      	cmp	r5, #24
 80004a2:	d80b      	bhi.n	80004bc <HAL_ADC_ConfigChannel+0xbc>
    MODIFY_REG(hadc->Instance->SQR2,
 80004a4:	442b      	add	r3, r5
 80004a6:	251f      	movs	r5, #31
 80004a8:	6b66      	ldr	r6, [r4, #52]	; 0x34
 80004aa:	3b5f      	subs	r3, #95	; 0x5f
 80004ac:	409d      	lsls	r5, r3
 80004ae:	ea26 0505 	bic.w	r5, r6, r5
 80004b2:	fa02 f303 	lsl.w	r3, r2, r3
 80004b6:	432b      	orrs	r3, r5
 80004b8:	6363      	str	r3, [r4, #52]	; 0x34
 80004ba:	e7be      	b.n	800043a <HAL_ADC_ConfigChannel+0x3a>
    MODIFY_REG(hadc->Instance->SQR1,
 80004bc:	442b      	add	r3, r5
 80004be:	251f      	movs	r5, #31
 80004c0:	6b26      	ldr	r6, [r4, #48]	; 0x30
 80004c2:	3b7d      	subs	r3, #125	; 0x7d
 80004c4:	409d      	lsls	r5, r3
 80004c6:	ea26 0505 	bic.w	r5, r6, r5
 80004ca:	fa02 f303 	lsl.w	r3, r2, r3
 80004ce:	432b      	orrs	r3, r5
 80004d0:	6323      	str	r3, [r4, #48]	; 0x30
 80004d2:	e7b2      	b.n	800043a <HAL_ADC_ConfigChannel+0x3a>
  else if (sConfig->Channel < ADC_CHANNEL_20)
 80004d4:	2a13      	cmp	r2, #19
 80004d6:	d80d      	bhi.n	80004f4 <HAL_ADC_ConfigChannel+0xf4>
    MODIFY_REG(hadc->Instance->SMPR2,
 80004d8:	2607      	movs	r6, #7
 80004da:	eb02 0542 	add.w	r5, r2, r2, lsl #1
 80004de:	6923      	ldr	r3, [r4, #16]
 80004e0:	3d1e      	subs	r5, #30
 80004e2:	6889      	ldr	r1, [r1, #8]
 80004e4:	40ae      	lsls	r6, r5
 80004e6:	ea23 0306 	bic.w	r3, r3, r6
 80004ea:	fa01 f505 	lsl.w	r5, r1, r5
 80004ee:	432b      	orrs	r3, r5
 80004f0:	6123      	str	r3, [r4, #16]
 80004f2:	e7af      	b.n	8000454 <HAL_ADC_ConfigChannel+0x54>
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 80004f4:	2a1a      	cmp	r2, #26
 80004f6:	d80d      	bhi.n	8000514 <HAL_ADC_ConfigChannel+0x114>
    MODIFY_REG(hadc->Instance->SMPR1,
 80004f8:	2607      	movs	r6, #7
 80004fa:	eb02 0542 	add.w	r5, r2, r2, lsl #1
 80004fe:	68e3      	ldr	r3, [r4, #12]
 8000500:	3d3c      	subs	r5, #60	; 0x3c
 8000502:	6889      	ldr	r1, [r1, #8]
 8000504:	40ae      	lsls	r6, r5
 8000506:	ea23 0306 	bic.w	r3, r3, r6
 800050a:	fa01 f505 	lsl.w	r5, r1, r5
 800050e:	432b      	orrs	r3, r5
 8000510:	60e3      	str	r3, [r4, #12]
 8000512:	e79f      	b.n	8000454 <HAL_ADC_ConfigChannel+0x54>
  __ASM volatile ("nop");
 8000514:	bf00      	nop
 8000516:	e79d      	b.n	8000454 <HAL_ADC_ConfigChannel+0x54>
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 8000518:	4b0c      	ldr	r3, [pc, #48]	; (800054c <HAL_ADC_ConfigChannel+0x14c>)
 800051a:	6859      	ldr	r1, [r3, #4]
 800051c:	0209      	lsls	r1, r1, #8
 800051e:	d49d      	bmi.n	800045c <HAL_ADC_ConfigChannel+0x5c>
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8000520:	6859      	ldr	r1, [r3, #4]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000522:	2a10      	cmp	r2, #16
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8000524:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000528:	6059      	str	r1, [r3, #4]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800052a:	d197      	bne.n	800045c <HAL_ADC_ConfigChannel+0x5c>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800052c:	4b08      	ldr	r3, [pc, #32]	; (8000550 <HAL_ADC_ConfigChannel+0x150>)
 800052e:	4a09      	ldr	r2, [pc, #36]	; (8000554 <HAL_ADC_ConfigChannel+0x154>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	fbb3 f2f2 	udiv	r2, r3, r2
 8000536:	230a      	movs	r3, #10
 8000538:	4353      	muls	r3, r2
            wait_loop_index--;
 800053a:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0)
 800053c:	9b01      	ldr	r3, [sp, #4]
 800053e:	2b00      	cmp	r3, #0
 8000540:	d08c      	beq.n	800045c <HAL_ADC_ConfigChannel+0x5c>
            wait_loop_index--;
 8000542:	9b01      	ldr	r3, [sp, #4]
 8000544:	3b01      	subs	r3, #1
 8000546:	e7f8      	b.n	800053a <HAL_ADC_ConfigChannel+0x13a>
  __HAL_LOCK(hadc);
 8000548:	2002      	movs	r0, #2
 800054a:	e78b      	b.n	8000464 <HAL_ADC_ConfigChannel+0x64>
 800054c:	40012700 	.word	0x40012700
 8000550:	20000000 	.word	0x20000000
 8000554:	000f4240 	.word	0x000f4240

08000558 <ADC_Enable>:
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0;
  __IO uint32_t wait_loop_index = 0;
 8000558:	2300      	movs	r3, #0
{
 800055a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0;
 800055c:	9301      	str	r3, [sp, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800055e:	6803      	ldr	r3, [r0, #0]
{
 8000560:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000562:	681a      	ldr	r2, [r3, #0]
 8000564:	0652      	lsls	r2, r2, #25
 8000566:	d502      	bpl.n	800056e <ADC_Enable+0x16>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000568:	2000      	movs	r0, #0
}
 800056a:	b002      	add	sp, #8
 800056c:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_ADC_ENABLE(hadc);
 800056e:	689a      	ldr	r2, [r3, #8]
 8000570:	f042 0201 	orr.w	r2, r2, #1
 8000574:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8000576:	4b13      	ldr	r3, [pc, #76]	; (80005c4 <ADC_Enable+0x6c>)
 8000578:	4a13      	ldr	r2, [pc, #76]	; (80005c8 <ADC_Enable+0x70>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	fbb3 f3f2 	udiv	r3, r3, r2
 8000580:	eb03 0343 	add.w	r3, r3, r3, lsl #1
      wait_loop_index--;
 8000584:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 8000586:	9b01      	ldr	r3, [sp, #4]
 8000588:	b9c3      	cbnz	r3, 80005bc <ADC_Enable+0x64>
    tickstart = HAL_GetTick();    
 800058a:	f7ff fe1f 	bl	80001cc <HAL_GetTick>
 800058e:	4606      	mov	r6, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000590:	6823      	ldr	r3, [r4, #0]
 8000592:	681d      	ldr	r5, [r3, #0]
 8000594:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8000598:	d1e6      	bne.n	8000568 <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 800059a:	f7ff fe17 	bl	80001cc <HAL_GetTick>
 800059e:	1b80      	subs	r0, r0, r6
 80005a0:	2802      	cmp	r0, #2
 80005a2:	d9f5      	bls.n	8000590 <ADC_Enable+0x38>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80005a4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
        __HAL_UNLOCK(hadc);
 80005a6:	f884 5048 	strb.w	r5, [r4, #72]	; 0x48
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80005aa:	f043 0310 	orr.w	r3, r3, #16
 80005ae:	64e3      	str	r3, [r4, #76]	; 0x4c
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80005b0:	6d23      	ldr	r3, [r4, #80]	; 0x50
        __HAL_UNLOCK(hadc);
 80005b2:	2001      	movs	r0, #1
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80005b4:	f043 0301 	orr.w	r3, r3, #1
 80005b8:	6523      	str	r3, [r4, #80]	; 0x50
 80005ba:	e7d6      	b.n	800056a <ADC_Enable+0x12>
      wait_loop_index--;
 80005bc:	9b01      	ldr	r3, [sp, #4]
 80005be:	3b01      	subs	r3, #1
 80005c0:	e7e0      	b.n	8000584 <ADC_Enable+0x2c>
 80005c2:	bf00      	nop
 80005c4:	20000000 	.word	0x20000000
 80005c8:	000f4240 	.word	0x000f4240

080005cc <HAL_ADC_Start>:
  __HAL_LOCK(hadc);
 80005cc:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
{
 80005d0:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 80005d2:	2b01      	cmp	r3, #1
{
 80005d4:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 80005d6:	d02e      	beq.n	8000636 <HAL_ADC_Start+0x6a>
 80005d8:	2301      	movs	r3, #1
 80005da:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
  tmp_hal_status = ADC_Enable(hadc);
 80005de:	f7ff ffbb 	bl	8000558 <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 80005e2:	bb48      	cbnz	r0, 8000638 <HAL_ADC_Start+0x6c>
    ADC_STATE_CLR_SET(hadc->State,
 80005e4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80005e6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80005ea:	f023 0301 	bic.w	r3, r3, #1
 80005ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005f2:	64e3      	str	r3, [r4, #76]	; 0x4c
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80005f4:	6823      	ldr	r3, [r4, #0]
 80005f6:	685a      	ldr	r2, [r3, #4]
 80005f8:	0552      	lsls	r2, r2, #21
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80005fa:	bf41      	itttt	mi
 80005fc:	6ce2      	ldrmi	r2, [r4, #76]	; 0x4c
 80005fe:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 8000602:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 8000606:	64e2      	strmi	r2, [r4, #76]	; 0x4c
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000608:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800060a:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800060e:	bf1c      	itt	ne
 8000610:	6d22      	ldrne	r2, [r4, #80]	; 0x50
 8000612:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8000616:	6522      	str	r2, [r4, #80]	; 0x50
    __HAL_UNLOCK(hadc);
 8000618:	2200      	movs	r2, #0
 800061a:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800061e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000622:	601a      	str	r2, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8000624:	689a      	ldr	r2, [r3, #8]
 8000626:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 800062a:	d105      	bne.n	8000638 <HAL_ADC_Start+0x6c>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 800062c:	689a      	ldr	r2, [r3, #8]
 800062e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000632:	609a      	str	r2, [r3, #8]
 8000634:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8000636:	2002      	movs	r0, #2
}
 8000638:	bd10      	pop	{r4, pc}

0800063a <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800063a:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800063c:	6803      	ldr	r3, [r0, #0]
{
 800063e:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000640:	681a      	ldr	r2, [r3, #0]
 8000642:	0652      	lsls	r2, r2, #25
 8000644:	d401      	bmi.n	800064a <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000646:	2000      	movs	r0, #0
 8000648:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 800064a:	689a      	ldr	r2, [r3, #8]
 800064c:	f022 0201 	bic.w	r2, r2, #1
 8000650:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8000652:	f7ff fdbb 	bl	80001cc <HAL_GetTick>
 8000656:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000658:	6823      	ldr	r3, [r4, #0]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	065b      	lsls	r3, r3, #25
 800065e:	d5f2      	bpl.n	8000646 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart ) > ADC_DISABLE_TIMEOUT)
 8000660:	f7ff fdb4 	bl	80001cc <HAL_GetTick>
 8000664:	1b40      	subs	r0, r0, r5
 8000666:	2802      	cmp	r0, #2
 8000668:	d9f6      	bls.n	8000658 <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800066a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800066c:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800066e:	f043 0310 	orr.w	r3, r3, #16
 8000672:	64e3      	str	r3, [r4, #76]	; 0x4c
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000674:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000676:	f043 0301 	orr.w	r3, r3, #1
 800067a:	6523      	str	r3, [r4, #80]	; 0x50
 800067c:	bd38      	pop	{r3, r4, r5, pc}

0800067e <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 800067e:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
{
 8000682:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 8000684:	2b01      	cmp	r3, #1
{
 8000686:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8000688:	d011      	beq.n	80006ae <HAL_ADC_Stop+0x30>
 800068a:	2301      	movs	r3, #1
 800068c:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000690:	f7ff ffd3 	bl	800063a <ADC_ConversionStop_Disable>
  if (tmp_hal_status == HAL_OK)
 8000694:	b938      	cbnz	r0, 80006a6 <HAL_ADC_Stop+0x28>
    ADC_STATE_CLR_SET(hadc->State,
 8000696:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000698:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800069c:	f023 0301 	bic.w	r3, r3, #1
 80006a0:	f043 0301 	orr.w	r3, r3, #1
 80006a4:	64e3      	str	r3, [r4, #76]	; 0x4c
  __HAL_UNLOCK(hadc);
 80006a6:	2300      	movs	r3, #0
 80006a8:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  return tmp_hal_status;
 80006ac:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 80006ae:	2002      	movs	r0, #2
}
 80006b0:	bd10      	pop	{r4, pc}
	...

080006b4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006b4:	4a07      	ldr	r2, [pc, #28]	; (80006d4 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80006b6:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006b8:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80006ba:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006be:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80006c2:	041b      	lsls	r3, r3, #16
 80006c4:	0c1b      	lsrs	r3, r3, #16
 80006c6:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80006ce:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80006d0:	60d3      	str	r3, [r2, #12]
 80006d2:	4770      	bx	lr
 80006d4:	e000ed00 	.word	0xe000ed00

080006d8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006d8:	4b17      	ldr	r3, [pc, #92]	; (8000738 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	68dc      	ldr	r4, [r3, #12]
 80006de:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006e2:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006e6:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006e8:	2b04      	cmp	r3, #4
 80006ea:	bf28      	it	cs
 80006ec:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006ee:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006f0:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006f4:	bf98      	it	ls
 80006f6:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006f8:	fa05 f303 	lsl.w	r3, r5, r3
 80006fc:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000700:	bf88      	it	hi
 8000702:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000704:	4019      	ands	r1, r3
 8000706:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000708:	fa05 f404 	lsl.w	r4, r5, r4
 800070c:	3c01      	subs	r4, #1
 800070e:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000710:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000712:	ea42 0201 	orr.w	r2, r2, r1
 8000716:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800071a:	bfaf      	iteee	ge
 800071c:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000720:	4b06      	ldrlt	r3, [pc, #24]	; (800073c <HAL_NVIC_SetPriority+0x64>)
 8000722:	f000 000f 	andlt.w	r0, r0, #15
 8000726:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000728:	bfa5      	ittet	ge
 800072a:	b2d2      	uxtbge	r2, r2
 800072c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000730:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000732:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000736:	bd30      	pop	{r4, r5, pc}
 8000738:	e000ed00 	.word	0xe000ed00
 800073c:	e000ed14 	.word	0xe000ed14

08000740 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000740:	2301      	movs	r3, #1
 8000742:	0942      	lsrs	r2, r0, #5
 8000744:	f000 001f 	and.w	r0, r0, #31
 8000748:	fa03 f000 	lsl.w	r0, r3, r0
 800074c:	4b01      	ldr	r3, [pc, #4]	; (8000754 <HAL_NVIC_EnableIRQ+0x14>)
 800074e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000752:	4770      	bx	lr
 8000754:	e000e100 	.word	0xe000e100

08000758 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000758:	3801      	subs	r0, #1
 800075a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800075e:	d20a      	bcs.n	8000776 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000760:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000762:	4b06      	ldr	r3, [pc, #24]	; (800077c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000764:	4a06      	ldr	r2, [pc, #24]	; (8000780 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000766:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000768:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800076c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800076e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000770:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000772:	601a      	str	r2, [r3, #0]
 8000774:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000776:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	e000e010 	.word	0xe000e010
 8000780:	e000ed00 	.word	0xe000ed00

08000784 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000784:	4b04      	ldr	r3, [pc, #16]	; (8000798 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000786:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000788:	681a      	ldr	r2, [r3, #0]
 800078a:	bf0c      	ite	eq
 800078c:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000790:	f022 0204 	bicne.w	r2, r2, #4
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	4770      	bx	lr
 8000798:	e000e010 	.word	0xe000e010

0800079c <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800079c:	4770      	bx	lr

0800079e <HAL_SYSTICK_IRQHandler>:
{
 800079e:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80007a0:	f7ff fffc 	bl	800079c <HAL_SYSTICK_Callback>
 80007a4:	bd08      	pop	{r3, pc}
	...

080007a8 <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
  uint32_t position = 0x00;
 80007a8:	2300      	movs	r3, #0
{ 
 80007aa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80007ae:	4a62      	ldr	r2, [pc, #392]	; (8000938 <HAL_GPIO_Init+0x190>)
  while (((GPIO_Init->Pin) >> position) != 0)
 80007b0:	f8d1 8000 	ldr.w	r8, [r1]
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007b4:	f8df 9188 	ldr.w	r9, [pc, #392]	; 8000940 <HAL_GPIO_Init+0x198>
{ 
 80007b8:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0)
 80007ba:	fa38 f403 	lsrs.w	r4, r8, r3
 80007be:	d102      	bne.n	80007c6 <HAL_GPIO_Init+0x1e>
      }
    }
    
    position++;
  } 
}
 80007c0:	b005      	add	sp, #20
 80007c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80007c6:	2401      	movs	r4, #1
 80007c8:	409c      	lsls	r4, r3
    if(iocurrent)
 80007ca:	ea18 0604 	ands.w	r6, r8, r4
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80007ce:	9401      	str	r4, [sp, #4]
    if(iocurrent)
 80007d0:	f000 80a7 	beq.w	8000922 <HAL_GPIO_Init+0x17a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80007d4:	684c      	ldr	r4, [r1, #4]
 80007d6:	f024 0a10 	bic.w	sl, r4, #16
 80007da:	f1ba 0f02 	cmp.w	sl, #2
 80007de:	d116      	bne.n	800080e <HAL_GPIO_Init+0x66>
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 80007e0:	f04f 0e0f 	mov.w	lr, #15
        temp = GPIOx->AFR[position >> 3];
 80007e4:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 80007e8:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 80007ec:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3];
 80007f0:	f8dc 5020 	ldr.w	r5, [ip, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 80007f4:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80007f8:	fa0e fe0b 	lsl.w	lr, lr, fp
 80007fc:	ea25 0e0e 	bic.w	lr, r5, lr
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));       
 8000800:	690d      	ldr	r5, [r1, #16]
 8000802:	fa05 f50b 	lsl.w	r5, r5, fp
 8000806:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3] = temp;
 800080a:	f8cc 5020 	str.w	r5, [ip, #32]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 800080e:	2503      	movs	r5, #3
 8000810:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000814:	fa05 f50c 	lsl.w	r5, r5, ip
 8000818:	43ed      	mvns	r5, r5
      temp = GPIOx->MODER;
 800081a:	f8d0 b000 	ldr.w	fp, [r0]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800081e:	f004 0e03 	and.w	lr, r4, #3
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8000822:	ea0b 0b05 	and.w	fp, fp, r5
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000826:	fa0e fe0c 	lsl.w	lr, lr, ip
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800082a:	f10a 3aff 	add.w	sl, sl, #4294967295
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800082e:	ea4e 0e0b 	orr.w	lr, lr, fp
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000832:	f1ba 0f01 	cmp.w	sl, #1
      GPIOx->MODER = temp;
 8000836:	f8c0 e000 	str.w	lr, [r0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800083a:	d816      	bhi.n	800086a <HAL_GPIO_Init+0xc2>
        temp = GPIOx->OSPEEDR; 
 800083c:	f8d0 e008 	ldr.w	lr, [r0, #8]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8000840:	68cf      	ldr	r7, [r1, #12]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000842:	ea05 0e0e 	and.w	lr, r5, lr
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8000846:	fa07 fa0c 	lsl.w	sl, r7, ip
 800084a:	ea4a 0e0e 	orr.w	lr, sl, lr
        GPIOx->OSPEEDR = temp;
 800084e:	f8c0 e008 	str.w	lr, [r0, #8]
        temp = GPIOx->OTYPER;
 8000852:	f8d0 e004 	ldr.w	lr, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000856:	9f01      	ldr	r7, [sp, #4]
 8000858:	ea2e 0707 	bic.w	r7, lr, r7
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800085c:	f3c4 1e00 	ubfx	lr, r4, #4, #1
 8000860:	fa0e fe03 	lsl.w	lr, lr, r3
 8000864:	ea4e 0707 	orr.w	r7, lr, r7
        GPIOx->OTYPER = temp;
 8000868:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 800086a:	68c7      	ldr	r7, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 800086c:	403d      	ands	r5, r7
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 800086e:	688f      	ldr	r7, [r1, #8]
 8000870:	fa07 f70c 	lsl.w	r7, r7, ip
 8000874:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000876:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000878:	00e5      	lsls	r5, r4, #3
 800087a:	d552      	bpl.n	8000922 <HAL_GPIO_Init+0x17a>
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800087c:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000880:	f8d9 5020 	ldr.w	r5, [r9, #32]
 8000884:	f023 0703 	bic.w	r7, r3, #3
 8000888:	f045 0501 	orr.w	r5, r5, #1
 800088c:	f8c9 5020 	str.w	r5, [r9, #32]
 8000890:	f8d9 5020 	ldr.w	r5, [r9, #32]
 8000894:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000898:	f005 0501 	and.w	r5, r5, #1
 800089c:	9503      	str	r5, [sp, #12]
 800089e:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80008a2:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008a6:	9d03      	ldr	r5, [sp, #12]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80008a8:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        temp = SYSCFG->EXTICR[position >> 2];
 80008ac:	68bd      	ldr	r5, [r7, #8]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80008ae:	fa0e fe0c 	lsl.w	lr, lr, ip
 80008b2:	ea25 0e0e 	bic.w	lr, r5, lr
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80008b6:	4d21      	ldr	r5, [pc, #132]	; (800093c <HAL_GPIO_Init+0x194>)
 80008b8:	42a8      	cmp	r0, r5
 80008ba:	d034      	beq.n	8000926 <HAL_GPIO_Init+0x17e>
 80008bc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80008c0:	42a8      	cmp	r0, r5
 80008c2:	d032      	beq.n	800092a <HAL_GPIO_Init+0x182>
 80008c4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80008c8:	42a8      	cmp	r0, r5
 80008ca:	d030      	beq.n	800092e <HAL_GPIO_Init+0x186>
 80008cc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80008d0:	42a8      	cmp	r0, r5
 80008d2:	d02e      	beq.n	8000932 <HAL_GPIO_Init+0x18a>
 80008d4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80008d8:	42a8      	cmp	r0, r5
 80008da:	bf14      	ite	ne
 80008dc:	2505      	movne	r5, #5
 80008de:	2504      	moveq	r5, #4
 80008e0:	fa05 f50c 	lsl.w	r5, r5, ip
 80008e4:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 80008e8:	60bd      	str	r5, [r7, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80008ea:	43f7      	mvns	r7, r6
        temp = EXTI->IMR;
 80008ec:	6815      	ldr	r5, [r2, #0]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80008ee:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80008f2:	bf0c      	ite	eq
 80008f4:	403d      	andeq	r5, r7
          SET_BIT(temp, iocurrent); 
 80008f6:	4335      	orrne	r5, r6
        EXTI->IMR = temp;
 80008f8:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 80008fa:	6855      	ldr	r5, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80008fc:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8000900:	bf0c      	ite	eq
 8000902:	403d      	andeq	r5, r7
          SET_BIT(temp, iocurrent); 
 8000904:	4335      	orrne	r5, r6
        EXTI->EMR = temp;
 8000906:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8000908:	6895      	ldr	r5, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800090a:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 800090e:	bf0c      	ite	eq
 8000910:	403d      	andeq	r5, r7
          SET_BIT(temp, iocurrent); 
 8000912:	4335      	orrne	r5, r6
        EXTI->RTSR = temp;
 8000914:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8000916:	68d5      	ldr	r5, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000918:	02a4      	lsls	r4, r4, #10
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 800091a:	bf54      	ite	pl
 800091c:	403d      	andpl	r5, r7
          SET_BIT(temp, iocurrent); 
 800091e:	4335      	orrmi	r5, r6
        EXTI->FTSR = temp;
 8000920:	60d5      	str	r5, [r2, #12]
    position++;
 8000922:	3301      	adds	r3, #1
 8000924:	e749      	b.n	80007ba <HAL_GPIO_Init+0x12>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000926:	2500      	movs	r5, #0
 8000928:	e7da      	b.n	80008e0 <HAL_GPIO_Init+0x138>
 800092a:	2501      	movs	r5, #1
 800092c:	e7d8      	b.n	80008e0 <HAL_GPIO_Init+0x138>
 800092e:	2502      	movs	r5, #2
 8000930:	e7d6      	b.n	80008e0 <HAL_GPIO_Init+0x138>
 8000932:	2503      	movs	r5, #3
 8000934:	e7d4      	b.n	80008e0 <HAL_GPIO_Init+0x138>
 8000936:	bf00      	nop
 8000938:	40010400 	.word	0x40010400
 800093c:	40020000 	.word	0x40020000
 8000940:	40023800 	.word	0x40023800

08000944 <RCC_SetFlashLatencyFromMSIRange>:
{
  uint32_t vos = 0U;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8000944:	4b1c      	ldr	r3, [pc, #112]	; (80009b8 <RCC_SetFlashLatencyFromMSIRange+0x74>)
{
 8000946:	b082      	sub	sp, #8
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8000948:	689a      	ldr	r2, [r3, #8]
 800094a:	f012 0ff0 	tst.w	r2, #240	; 0xf0
 800094e:	d00c      	beq.n	800096a <RCC_SetFlashLatencyFromMSIRange+0x26>
{
 8000950:	2200      	movs	r2, #0
    {
      latency = FLASH_LATENCY_1; /* 1WS */
    }
  }
  
  __HAL_FLASH_SET_LATENCY(latency);
 8000952:	491a      	ldr	r1, [pc, #104]	; (80009bc <RCC_SetFlashLatencyFromMSIRange+0x78>)
 8000954:	680b      	ldr	r3, [r1, #0]
 8000956:	f023 0301 	bic.w	r3, r3, #1
 800095a:	4313      	orrs	r3, r2
 800095c:	600b      	str	r3, [r1, #0]
  
  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800095e:	6808      	ldr	r0, [r1, #0]
 8000960:	f000 0001 	and.w	r0, r0, #1
 8000964:	4050      	eors	r0, r2
  {
    return HAL_ERROR;
  }
  
  return HAL_OK;
}
 8000966:	b002      	add	sp, #8
 8000968:	4770      	bx	lr
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800096a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800096c:	4914      	ldr	r1, [pc, #80]	; (80009c0 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 800096e:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 8000972:	d00f      	beq.n	8000994 <RCC_SetFlashLatencyFromMSIRange+0x50>
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8000974:	680a      	ldr	r2, [r1, #0]
 8000976:	f402 52c0 	and.w	r2, r2, #6144	; 0x1800
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800097a:	f5b2 5fc0 	cmp.w	r2, #6144	; 0x1800
 800097e:	d1e7      	bne.n	8000950 <RCC_SetFlashLatencyFromMSIRange+0xc>
 8000980:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
 8000984:	d1e4      	bne.n	8000950 <RCC_SetFlashLatencyFromMSIRange+0xc>
  __HAL_FLASH_SET_LATENCY(latency);
 8000986:	4a0d      	ldr	r2, [pc, #52]	; (80009bc <RCC_SetFlashLatencyFromMSIRange+0x78>)
 8000988:	6813      	ldr	r3, [r2, #0]
 800098a:	f043 0304 	orr.w	r3, r3, #4
 800098e:	6013      	str	r3, [r2, #0]
      latency = FLASH_LATENCY_1; /* 1WS */
 8000990:	2201      	movs	r2, #1
 8000992:	e7de      	b.n	8000952 <RCC_SetFlashLatencyFromMSIRange+0xe>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000994:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000996:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800099a:	625a      	str	r2, [r3, #36]	; 0x24
 800099c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800099e:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80009a2:	9201      	str	r2, [sp, #4]
 80009a4:	9a01      	ldr	r2, [sp, #4]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80009a6:	680a      	ldr	r2, [r1, #0]
      __HAL_RCC_PWR_CLK_DISABLE();
 80009a8:	6a59      	ldr	r1, [r3, #36]	; 0x24
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80009aa:	f402 52c0 	and.w	r2, r2, #6144	; 0x1800
      __HAL_RCC_PWR_CLK_DISABLE();
 80009ae:	f021 5180 	bic.w	r1, r1, #268435456	; 0x10000000
 80009b2:	6259      	str	r1, [r3, #36]	; 0x24
 80009b4:	e7e1      	b.n	800097a <RCC_SetFlashLatencyFromMSIRange+0x36>
 80009b6:	bf00      	nop
 80009b8:	40023800 	.word	0x40023800
 80009bc:	40023c00 	.word	0x40023c00
 80009c0:	40007000 	.word	0x40007000

080009c4 <HAL_RCC_OscConfig>:
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80009c4:	6803      	ldr	r3, [r0, #0]
{
 80009c6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80009ca:	07d9      	lsls	r1, r3, #31
{
 80009cc:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80009ce:	d46a      	bmi.n	8000aa6 <HAL_RCC_OscConfig+0xe2>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80009d0:	6823      	ldr	r3, [r4, #0]
 80009d2:	079a      	lsls	r2, r3, #30
 80009d4:	f100 80e6 	bmi.w	8000ba4 <HAL_RCC_OscConfig+0x1e0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80009d8:	6823      	ldr	r3, [r4, #0]
 80009da:	06de      	lsls	r6, r3, #27
 80009dc:	d555      	bpl.n	8000a8a <HAL_RCC_OscConfig+0xc6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 80009de:	4dc1      	ldr	r5, [pc, #772]	; (8000ce4 <HAL_RCC_OscConfig+0x320>)
 80009e0:	68ab      	ldr	r3, [r5, #8]
 80009e2:	f013 0f0c 	tst.w	r3, #12
 80009e6:	f040 8183 	bne.w	8000cf0 <HAL_RCC_OscConfig+0x32c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80009ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009ee:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80009f2:	6829      	ldr	r1, [r5, #0]
 80009f4:	fa93 f3a3 	rbit	r3, r3
 80009f8:	fab3 f383 	clz	r3, r3
 80009fc:	2201      	movs	r2, #1
 80009fe:	f003 031f 	and.w	r3, r3, #31
 8000a02:	fa02 f303 	lsl.w	r3, r2, r3
 8000a06:	420b      	tst	r3, r1
 8000a08:	d002      	beq.n	8000a10 <HAL_RCC_OscConfig+0x4c>
 8000a0a:	69a3      	ldr	r3, [r4, #24]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d06e      	beq.n	8000aee <HAL_RCC_OscConfig+0x12a>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000a10:	4db4      	ldr	r5, [pc, #720]	; (8000ce4 <HAL_RCC_OscConfig+0x320>)
 8000a12:	6a20      	ldr	r0, [r4, #32]
 8000a14:	686b      	ldr	r3, [r5, #4]
 8000a16:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000a1a:	4298      	cmp	r0, r3
 8000a1c:	f240 814a 	bls.w	8000cb4 <HAL_RCC_OscConfig+0x2f0>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000a20:	f7ff ff90 	bl	8000944 <RCC_SetFlashLatencyFromMSIRange>
 8000a24:	2800      	cmp	r0, #0
 8000a26:	d162      	bne.n	8000aee <HAL_RCC_OscConfig+0x12a>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000a28:	686b      	ldr	r3, [r5, #4]
 8000a2a:	6a22      	ldr	r2, [r4, #32]
 8000a2c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000a30:	4313      	orrs	r3, r2
 8000a32:	606b      	str	r3, [r5, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000a34:	6869      	ldr	r1, [r5, #4]
 8000a36:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8000a3a:	fa93 f3a3 	rbit	r3, r3
 8000a3e:	fab3 f283 	clz	r2, r3
 8000a42:	69e3      	ldr	r3, [r4, #28]
 8000a44:	4093      	lsls	r3, r2
 8000a46:	f021 427f 	bic.w	r2, r1, #4278190080	; 0xff000000
 8000a4a:	4313      	orrs	r3, r2
 8000a4c:	606b      	str	r3, [r5, #4]
 8000a4e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000a52:	fa93 f3a3 	rbit	r3, r3
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 8000a56:	fab3 f083 	clz	r0, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 8000a5a:	4ba2      	ldr	r3, [pc, #648]	; (8000ce4 <HAL_RCC_OscConfig+0x320>)
 8000a5c:	21f0      	movs	r1, #240	; 0xf0
 8000a5e:	689a      	ldr	r2, [r3, #8]
 8000a60:	fa91 f1a1 	rbit	r1, r1
 8000a64:	fab1 f181 	clz	r1, r1
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 8000a68:	6a23      	ldr	r3, [r4, #32]
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 8000a6a:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 8000a6e:	40c3      	lsrs	r3, r0
 8000a70:	1c58      	adds	r0, r3, #1
 8000a72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 8000a76:	40ca      	lsrs	r2, r1
 8000a78:	499b      	ldr	r1, [pc, #620]	; (8000ce8 <HAL_RCC_OscConfig+0x324>)
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 8000a7a:	4083      	lsls	r3, r0
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 8000a7c:	5c8a      	ldrb	r2, [r1, r2]
        HAL_InitTick (TICK_INT_PRIORITY);
 8000a7e:	2000      	movs	r0, #0
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 8000a80:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 8000a82:	4a9a      	ldr	r2, [pc, #616]	; (8000cec <HAL_RCC_OscConfig+0x328>)
 8000a84:	6013      	str	r3, [r2, #0]
        HAL_InitTick (TICK_INT_PRIORITY);
 8000a86:	f7ff fb79 	bl	800017c <HAL_InitTick>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000a8a:	6823      	ldr	r3, [r4, #0]
 8000a8c:	071d      	lsls	r5, r3, #28
 8000a8e:	f100 8191 	bmi.w	8000db4 <HAL_RCC_OscConfig+0x3f0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000a92:	6823      	ldr	r3, [r4, #0]
 8000a94:	0758      	lsls	r0, r3, #29
 8000a96:	f100 81d3 	bmi.w	8000e40 <HAL_RCC_OscConfig+0x47c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000a9a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000a9c:	2a00      	cmp	r2, #0
 8000a9e:	f040 8257 	bne.w	8000f50 <HAL_RCC_OscConfig+0x58c>
  return HAL_OK;
 8000aa2:	2000      	movs	r0, #0
 8000aa4:	e024      	b.n	8000af0 <HAL_RCC_OscConfig+0x12c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000aa6:	4b8f      	ldr	r3, [pc, #572]	; (8000ce4 <HAL_RCC_OscConfig+0x320>)
 8000aa8:	689a      	ldr	r2, [r3, #8]
 8000aaa:	f002 020c 	and.w	r2, r2, #12
 8000aae:	2a08      	cmp	r2, #8
 8000ab0:	d007      	beq.n	8000ac2 <HAL_RCC_OscConfig+0xfe>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ab2:	689a      	ldr	r2, [r3, #8]
 8000ab4:	f002 020c 	and.w	r2, r2, #12
 8000ab8:	2a0c      	cmp	r2, #12
 8000aba:	d11c      	bne.n	8000af6 <HAL_RCC_OscConfig+0x132>
 8000abc:	689b      	ldr	r3, [r3, #8]
 8000abe:	03db      	lsls	r3, r3, #15
 8000ac0:	d519      	bpl.n	8000af6 <HAL_RCC_OscConfig+0x132>
 8000ac2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ac6:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000aca:	4a86      	ldr	r2, [pc, #536]	; (8000ce4 <HAL_RCC_OscConfig+0x320>)
 8000acc:	6811      	ldr	r1, [r2, #0]
 8000ace:	fa93 f3a3 	rbit	r3, r3
 8000ad2:	fab3 f383 	clz	r3, r3
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	f003 031f 	and.w	r3, r3, #31
 8000adc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae0:	420b      	tst	r3, r1
 8000ae2:	f43f af75 	beq.w	80009d0 <HAL_RCC_OscConfig+0xc>
 8000ae6:	6863      	ldr	r3, [r4, #4]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	f47f af71 	bne.w	80009d0 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000aee:	2001      	movs	r0, #1
}
 8000af0:	b003      	add	sp, #12
 8000af2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000af6:	6863      	ldr	r3, [r4, #4]
 8000af8:	4d7a      	ldr	r5, [pc, #488]	; (8000ce4 <HAL_RCC_OscConfig+0x320>)
 8000afa:	2b01      	cmp	r3, #1
 8000afc:	d120      	bne.n	8000b40 <HAL_RCC_OscConfig+0x17c>
 8000afe:	682b      	ldr	r3, [r5, #0]
 8000b00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b04:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000b06:	f7ff fb61 	bl	80001cc <HAL_GetTick>
 8000b0a:	f44f 3500 	mov.w	r5, #131072	; 0x20000
 8000b0e:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b10:	2601      	movs	r6, #1
 8000b12:	4f74      	ldr	r7, [pc, #464]	; (8000ce4 <HAL_RCC_OscConfig+0x320>)
 8000b14:	fa95 f3a5 	rbit	r3, r5
 8000b18:	683a      	ldr	r2, [r7, #0]
 8000b1a:	fa95 f3a5 	rbit	r3, r5
 8000b1e:	fab3 f383 	clz	r3, r3
 8000b22:	f003 031f 	and.w	r3, r3, #31
 8000b26:	fa06 f303 	lsl.w	r3, r6, r3
 8000b2a:	4213      	tst	r3, r2
 8000b2c:	f47f af50 	bne.w	80009d0 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b30:	f7ff fb4c 	bl	80001cc <HAL_GetTick>
 8000b34:	eba0 0008 	sub.w	r0, r0, r8
 8000b38:	2864      	cmp	r0, #100	; 0x64
 8000b3a:	d9eb      	bls.n	8000b14 <HAL_RCC_OscConfig+0x150>
            return HAL_TIMEOUT;
 8000b3c:	2003      	movs	r0, #3
 8000b3e:	e7d7      	b.n	8000af0 <HAL_RCC_OscConfig+0x12c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b40:	bb13      	cbnz	r3, 8000b88 <HAL_RCC_OscConfig+0x1c4>
 8000b42:	682b      	ldr	r3, [r5, #0]
 8000b44:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000b48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b4c:	602b      	str	r3, [r5, #0]
 8000b4e:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b50:	2701      	movs	r7, #1
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b56:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000b58:	f7ff fb38 	bl	80001cc <HAL_GetTick>
 8000b5c:	4680      	mov	r8, r0
 8000b5e:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000b62:	682a      	ldr	r2, [r5, #0]
 8000b64:	fa96 f3a6 	rbit	r3, r6
 8000b68:	fab3 f383 	clz	r3, r3
 8000b6c:	f003 031f 	and.w	r3, r3, #31
 8000b70:	fa07 f303 	lsl.w	r3, r7, r3
 8000b74:	4213      	tst	r3, r2
 8000b76:	f43f af2b 	beq.w	80009d0 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b7a:	f7ff fb27 	bl	80001cc <HAL_GetTick>
 8000b7e:	eba0 0008 	sub.w	r0, r0, r8
 8000b82:	2864      	cmp	r0, #100	; 0x64
 8000b84:	d9eb      	bls.n	8000b5e <HAL_RCC_OscConfig+0x19a>
 8000b86:	e7d9      	b.n	8000b3c <HAL_RCC_OscConfig+0x178>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b88:	2b05      	cmp	r3, #5
 8000b8a:	682b      	ldr	r3, [r5, #0]
 8000b8c:	d103      	bne.n	8000b96 <HAL_RCC_OscConfig+0x1d2>
 8000b8e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b92:	602b      	str	r3, [r5, #0]
 8000b94:	e7b3      	b.n	8000afe <HAL_RCC_OscConfig+0x13a>
 8000b96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b9a:	602b      	str	r3, [r5, #0]
 8000b9c:	682b      	ldr	r3, [r5, #0]
 8000b9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ba2:	e7af      	b.n	8000b04 <HAL_RCC_OscConfig+0x140>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000ba4:	4b4f      	ldr	r3, [pc, #316]	; (8000ce4 <HAL_RCC_OscConfig+0x320>)
 8000ba6:	689a      	ldr	r2, [r3, #8]
 8000ba8:	f002 020c 	and.w	r2, r2, #12
 8000bac:	2a04      	cmp	r2, #4
 8000bae:	d007      	beq.n	8000bc0 <HAL_RCC_OscConfig+0x1fc>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000bb0:	689a      	ldr	r2, [r3, #8]
 8000bb2:	f002 020c 	and.w	r2, r2, #12
 8000bb6:	2a0c      	cmp	r2, #12
 8000bb8:	d124      	bne.n	8000c04 <HAL_RCC_OscConfig+0x240>
 8000bba:	689b      	ldr	r3, [r3, #8]
 8000bbc:	03df      	lsls	r7, r3, #15
 8000bbe:	d421      	bmi.n	8000c04 <HAL_RCC_OscConfig+0x240>
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000bc6:	4a47      	ldr	r2, [pc, #284]	; (8000ce4 <HAL_RCC_OscConfig+0x320>)
 8000bc8:	6810      	ldr	r0, [r2, #0]
 8000bca:	fa93 f3a3 	rbit	r3, r3
 8000bce:	fab3 f383 	clz	r3, r3
 8000bd2:	2101      	movs	r1, #1
 8000bd4:	f003 031f 	and.w	r3, r3, #31
 8000bd8:	fa01 f303 	lsl.w	r3, r1, r3
 8000bdc:	4203      	tst	r3, r0
 8000bde:	4613      	mov	r3, r2
 8000be0:	d002      	beq.n	8000be8 <HAL_RCC_OscConfig+0x224>
 8000be2:	68e2      	ldr	r2, [r4, #12]
 8000be4:	428a      	cmp	r2, r1
 8000be6:	d182      	bne.n	8000aee <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000be8:	6858      	ldr	r0, [r3, #4]
 8000bea:	f44f 52f8 	mov.w	r2, #7936	; 0x1f00
 8000bee:	fa92 f2a2 	rbit	r2, r2
 8000bf2:	fab2 f182 	clz	r1, r2
 8000bf6:	6922      	ldr	r2, [r4, #16]
 8000bf8:	408a      	lsls	r2, r1
 8000bfa:	f420 51f8 	bic.w	r1, r0, #7936	; 0x1f00
 8000bfe:	430a      	orrs	r2, r1
 8000c00:	605a      	str	r2, [r3, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c02:	e6e9      	b.n	80009d8 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000c04:	68e2      	ldr	r2, [r4, #12]
 8000c06:	2501      	movs	r5, #1
 8000c08:	b382      	cbz	r2, 8000c6c <HAL_RCC_OscConfig+0x2a8>
 8000c0a:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_ENABLE();
 8000c0e:	fab3 f383 	clz	r3, r3
 8000c12:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000c16:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8000c1a:	009b      	lsls	r3, r3, #2
 8000c1c:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 8000c1e:	f7ff fad5 	bl	80001cc <HAL_GetTick>
 8000c22:	2702      	movs	r7, #2
 8000c24:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c26:	4e2f      	ldr	r6, [pc, #188]	; (8000ce4 <HAL_RCC_OscConfig+0x320>)
 8000c28:	fa97 f3a7 	rbit	r3, r7
 8000c2c:	6832      	ldr	r2, [r6, #0]
 8000c2e:	fa97 f3a7 	rbit	r3, r7
 8000c32:	fab3 f383 	clz	r3, r3
 8000c36:	f003 031f 	and.w	r3, r3, #31
 8000c3a:	fa05 f303 	lsl.w	r3, r5, r3
 8000c3e:	4213      	tst	r3, r2
 8000c40:	d00d      	beq.n	8000c5e <HAL_RCC_OscConfig+0x29a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c42:	6871      	ldr	r1, [r6, #4]
 8000c44:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000c48:	fa93 f3a3 	rbit	r3, r3
 8000c4c:	fab3 f283 	clz	r2, r3
 8000c50:	6923      	ldr	r3, [r4, #16]
 8000c52:	4093      	lsls	r3, r2
 8000c54:	f421 52f8 	bic.w	r2, r1, #7936	; 0x1f00
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	6073      	str	r3, [r6, #4]
 8000c5c:	e6bc      	b.n	80009d8 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c5e:	f7ff fab5 	bl	80001cc <HAL_GetTick>
 8000c62:	eba0 0008 	sub.w	r0, r0, r8
 8000c66:	2802      	cmp	r0, #2
 8000c68:	d9de      	bls.n	8000c28 <HAL_RCC_OscConfig+0x264>
 8000c6a:	e767      	b.n	8000b3c <HAL_RCC_OscConfig+0x178>
 8000c6c:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_DISABLE();
 8000c70:	fab3 f383 	clz	r3, r3
 8000c74:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000c78:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8000c7c:	009b      	lsls	r3, r3, #2
 8000c7e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000c80:	f7ff faa4 	bl	80001cc <HAL_GetTick>
 8000c84:	2602      	movs	r6, #2
 8000c86:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c88:	4f16      	ldr	r7, [pc, #88]	; (8000ce4 <HAL_RCC_OscConfig+0x320>)
 8000c8a:	fa96 f3a6 	rbit	r3, r6
 8000c8e:	683a      	ldr	r2, [r7, #0]
 8000c90:	fa96 f3a6 	rbit	r3, r6
 8000c94:	fab3 f383 	clz	r3, r3
 8000c98:	f003 031f 	and.w	r3, r3, #31
 8000c9c:	fa05 f303 	lsl.w	r3, r5, r3
 8000ca0:	4213      	tst	r3, r2
 8000ca2:	f43f ae99 	beq.w	80009d8 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ca6:	f7ff fa91 	bl	80001cc <HAL_GetTick>
 8000caa:	eba0 0008 	sub.w	r0, r0, r8
 8000cae:	2802      	cmp	r0, #2
 8000cb0:	d9eb      	bls.n	8000c8a <HAL_RCC_OscConfig+0x2c6>
 8000cb2:	e743      	b.n	8000b3c <HAL_RCC_OscConfig+0x178>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000cb4:	686b      	ldr	r3, [r5, #4]
 8000cb6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000cba:	4303      	orrs	r3, r0
 8000cbc:	606b      	str	r3, [r5, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000cbe:	6869      	ldr	r1, [r5, #4]
 8000cc0:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8000cc4:	fa93 f3a3 	rbit	r3, r3
 8000cc8:	fab3 f283 	clz	r2, r3
 8000ccc:	69e3      	ldr	r3, [r4, #28]
 8000cce:	4093      	lsls	r3, r2
 8000cd0:	f021 427f 	bic.w	r2, r1, #4278190080	; 0xff000000
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	606b      	str	r3, [r5, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000cd8:	f7ff fe34 	bl	8000944 <RCC_SetFlashLatencyFromMSIRange>
 8000cdc:	2800      	cmp	r0, #0
 8000cde:	f43f aeb6 	beq.w	8000a4e <HAL_RCC_OscConfig+0x8a>
 8000ce2:	e704      	b.n	8000aee <HAL_RCC_OscConfig+0x12a>
 8000ce4:	40023800 	.word	0x40023800
 8000ce8:	08001dc8 	.word	0x08001dc8
 8000cec:	20000000 	.word	0x20000000
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000cf0:	69a2      	ldr	r2, [r4, #24]
 8000cf2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cf6:	2a00      	cmp	r2, #0
 8000cf8:	d037      	beq.n	8000d6a <HAL_RCC_OscConfig+0x3a6>
 8000cfa:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_MSI_ENABLE();
 8000cfe:	fab3 f383 	clz	r3, r3
 8000d02:	2601      	movs	r6, #1
 8000d04:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000d08:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8000d0c:	009b      	lsls	r3, r3, #2
 8000d0e:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8000d10:	f7ff fa5c 	bl	80001cc <HAL_GetTick>
 8000d14:	f44f 7700 	mov.w	r7, #512	; 0x200
 8000d18:	4680      	mov	r8, r0
 8000d1a:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 8000d1e:	682a      	ldr	r2, [r5, #0]
 8000d20:	fa97 f3a7 	rbit	r3, r7
 8000d24:	fab3 f383 	clz	r3, r3
 8000d28:	f003 031f 	and.w	r3, r3, #31
 8000d2c:	fa06 f303 	lsl.w	r3, r6, r3
 8000d30:	4213      	tst	r3, r2
 8000d32:	d013      	beq.n	8000d5c <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d34:	686b      	ldr	r3, [r5, #4]
 8000d36:	6a22      	ldr	r2, [r4, #32]
 8000d38:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000d3c:	4313      	orrs	r3, r2
 8000d3e:	606b      	str	r3, [r5, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d40:	6869      	ldr	r1, [r5, #4]
 8000d42:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8000d46:	fa93 f3a3 	rbit	r3, r3
 8000d4a:	fab3 f283 	clz	r2, r3
 8000d4e:	69e3      	ldr	r3, [r4, #28]
 8000d50:	4093      	lsls	r3, r2
 8000d52:	f021 427f 	bic.w	r2, r1, #4278190080	; 0xff000000
 8000d56:	4313      	orrs	r3, r2
 8000d58:	606b      	str	r3, [r5, #4]
 8000d5a:	e696      	b.n	8000a8a <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000d5c:	f7ff fa36 	bl	80001cc <HAL_GetTick>
 8000d60:	eba0 0008 	sub.w	r0, r0, r8
 8000d64:	2802      	cmp	r0, #2
 8000d66:	d9d8      	bls.n	8000d1a <HAL_RCC_OscConfig+0x356>
 8000d68:	e6e8      	b.n	8000b3c <HAL_RCC_OscConfig+0x178>
 8000d6a:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_MSI_DISABLE();
 8000d6e:	fab3 f383 	clz	r3, r3
 8000d72:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000d76:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8000d7a:	009b      	lsls	r3, r3, #2
 8000d7c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000d7e:	f7ff fa25 	bl	80001cc <HAL_GetTick>
 8000d82:	f44f 7600 	mov.w	r6, #512	; 0x200
 8000d86:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET)
 8000d88:	2701      	movs	r7, #1
 8000d8a:	fa96 f3a6 	rbit	r3, r6
 8000d8e:	682a      	ldr	r2, [r5, #0]
 8000d90:	fa96 f3a6 	rbit	r3, r6
 8000d94:	fab3 f383 	clz	r3, r3
 8000d98:	f003 031f 	and.w	r3, r3, #31
 8000d9c:	fa07 f303 	lsl.w	r3, r7, r3
 8000da0:	4213      	tst	r3, r2
 8000da2:	f43f ae72 	beq.w	8000a8a <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000da6:	f7ff fa11 	bl	80001cc <HAL_GetTick>
 8000daa:	eba0 0008 	sub.w	r0, r0, r8
 8000dae:	2802      	cmp	r0, #2
 8000db0:	d9eb      	bls.n	8000d8a <HAL_RCC_OscConfig+0x3c6>
 8000db2:	e6c3      	b.n	8000b3c <HAL_RCC_OscConfig+0x178>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000db4:	6962      	ldr	r2, [r4, #20]
 8000db6:	2501      	movs	r5, #1
 8000db8:	49a9      	ldr	r1, [pc, #676]	; (8001060 <HAL_RCC_OscConfig+0x69c>)
 8000dba:	b302      	cbz	r2, 8000dfe <HAL_RCC_OscConfig+0x43a>
 8000dbc:	fa95 f3a5 	rbit	r3, r5
      __HAL_RCC_LSI_ENABLE();
 8000dc0:	fab3 f383 	clz	r3, r3
 8000dc4:	440b      	add	r3, r1
 8000dc6:	009b      	lsls	r3, r3, #2
 8000dc8:	601d      	str	r5, [r3, #0]
      tickstart = HAL_GetTick();
 8000dca:	f7ff f9ff 	bl	80001cc <HAL_GetTick>
 8000dce:	2602      	movs	r6, #2
 8000dd0:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dd2:	4fa4      	ldr	r7, [pc, #656]	; (8001064 <HAL_RCC_OscConfig+0x6a0>)
 8000dd4:	fa96 f3a6 	rbit	r3, r6
 8000dd8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000dda:	fa96 f3a6 	rbit	r3, r6
 8000dde:	fab3 f383 	clz	r3, r3
 8000de2:	f003 031f 	and.w	r3, r3, #31
 8000de6:	fa05 f303 	lsl.w	r3, r5, r3
 8000dea:	4213      	tst	r3, r2
 8000dec:	f47f ae51 	bne.w	8000a92 <HAL_RCC_OscConfig+0xce>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000df0:	f7ff f9ec 	bl	80001cc <HAL_GetTick>
 8000df4:	eba0 0008 	sub.w	r0, r0, r8
 8000df8:	2802      	cmp	r0, #2
 8000dfa:	d9eb      	bls.n	8000dd4 <HAL_RCC_OscConfig+0x410>
 8000dfc:	e69e      	b.n	8000b3c <HAL_RCC_OscConfig+0x178>
 8000dfe:	fa95 f3a5 	rbit	r3, r5
      __HAL_RCC_LSI_DISABLE();
 8000e02:	fab3 f383 	clz	r3, r3
 8000e06:	440b      	add	r3, r1
 8000e08:	009b      	lsls	r3, r3, #2
 8000e0a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000e0c:	f7ff f9de 	bl	80001cc <HAL_GetTick>
 8000e10:	2602      	movs	r6, #2
 8000e12:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e14:	4f93      	ldr	r7, [pc, #588]	; (8001064 <HAL_RCC_OscConfig+0x6a0>)
 8000e16:	fa96 f3a6 	rbit	r3, r6
 8000e1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000e1c:	fa96 f3a6 	rbit	r3, r6
 8000e20:	fab3 f383 	clz	r3, r3
 8000e24:	f003 031f 	and.w	r3, r3, #31
 8000e28:	fa05 f303 	lsl.w	r3, r5, r3
 8000e2c:	4213      	tst	r3, r2
 8000e2e:	f43f ae30 	beq.w	8000a92 <HAL_RCC_OscConfig+0xce>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e32:	f7ff f9cb 	bl	80001cc <HAL_GetTick>
 8000e36:	eba0 0008 	sub.w	r0, r0, r8
 8000e3a:	2802      	cmp	r0, #2
 8000e3c:	d9eb      	bls.n	8000e16 <HAL_RCC_OscConfig+0x452>
 8000e3e:	e67d      	b.n	8000b3c <HAL_RCC_OscConfig+0x178>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e40:	4b88      	ldr	r3, [pc, #544]	; (8001064 <HAL_RCC_OscConfig+0x6a0>)
 8000e42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e44:	00d1      	lsls	r1, r2, #3
 8000e46:	d434      	bmi.n	8000eb2 <HAL_RCC_OscConfig+0x4ee>
      pwrclkchanged = SET;
 8000e48:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e4c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000e50:	625a      	str	r2, [r3, #36]	; 0x24
 8000e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e58:	9301      	str	r3, [sp, #4]
 8000e5a:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e5c:	4d82      	ldr	r5, [pc, #520]	; (8001068 <HAL_RCC_OscConfig+0x6a4>)
 8000e5e:	682b      	ldr	r3, [r5, #0]
 8000e60:	05da      	lsls	r2, r3, #23
 8000e62:	d528      	bpl.n	8000eb6 <HAL_RCC_OscConfig+0x4f2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e64:	68a3      	ldr	r3, [r4, #8]
 8000e66:	4d7f      	ldr	r5, [pc, #508]	; (8001064 <HAL_RCC_OscConfig+0x6a0>)
 8000e68:	2b01      	cmp	r3, #1
 8000e6a:	d134      	bne.n	8000ed6 <HAL_RCC_OscConfig+0x512>
 8000e6c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000e6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e72:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000e74:	f7ff f9aa 	bl	80001cc <HAL_GetTick>
 8000e78:	f44f 7500 	mov.w	r5, #512	; 0x200
 8000e7c:	4681      	mov	r9, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e7e:	2701      	movs	r7, #1
 8000e80:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 8001064 <HAL_RCC_OscConfig+0x6a0>
 8000e84:	fa95 f3a5 	rbit	r3, r5
 8000e88:	f8d8 2034 	ldr.w	r2, [r8, #52]	; 0x34
 8000e8c:	fa95 f3a5 	rbit	r3, r5
 8000e90:	fab3 f383 	clz	r3, r3
 8000e94:	f003 031f 	and.w	r3, r3, #31
 8000e98:	fa07 f303 	lsl.w	r3, r7, r3
 8000e9c:	4213      	tst	r3, r2
 8000e9e:	d04e      	beq.n	8000f3e <HAL_RCC_OscConfig+0x57a>
    if(pwrclkchanged == SET)
 8000ea0:	2e00      	cmp	r6, #0
 8000ea2:	f43f adfa 	beq.w	8000a9a <HAL_RCC_OscConfig+0xd6>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ea6:	4a6f      	ldr	r2, [pc, #444]	; (8001064 <HAL_RCC_OscConfig+0x6a0>)
 8000ea8:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000eaa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000eae:	6253      	str	r3, [r2, #36]	; 0x24
 8000eb0:	e5f3      	b.n	8000a9a <HAL_RCC_OscConfig+0xd6>
    FlagStatus       pwrclkchanged = RESET;
 8000eb2:	2600      	movs	r6, #0
 8000eb4:	e7d2      	b.n	8000e5c <HAL_RCC_OscConfig+0x498>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000eb6:	682b      	ldr	r3, [r5, #0]
 8000eb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ebc:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000ebe:	f7ff f985 	bl	80001cc <HAL_GetTick>
 8000ec2:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ec4:	682b      	ldr	r3, [r5, #0]
 8000ec6:	05db      	lsls	r3, r3, #23
 8000ec8:	d4cc      	bmi.n	8000e64 <HAL_RCC_OscConfig+0x4a0>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000eca:	f7ff f97f 	bl	80001cc <HAL_GetTick>
 8000ece:	1bc0      	subs	r0, r0, r7
 8000ed0:	2864      	cmp	r0, #100	; 0x64
 8000ed2:	d9f7      	bls.n	8000ec4 <HAL_RCC_OscConfig+0x500>
 8000ed4:	e632      	b.n	8000b3c <HAL_RCC_OscConfig+0x178>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ed6:	bb23      	cbnz	r3, 8000f22 <HAL_RCC_OscConfig+0x55e>
 8000ed8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000eda:	f44f 7700 	mov.w	r7, #512	; 0x200
 8000ede:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000ee2:	636b      	str	r3, [r5, #52]	; 0x34
 8000ee4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ee6:	f04f 0801 	mov.w	r8, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000eea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000eee:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000ef0:	f7ff f96c 	bl	80001cc <HAL_GetTick>
 8000ef4:	4681      	mov	r9, r0
 8000ef6:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000efa:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8000efc:	fa97 f3a7 	rbit	r3, r7
 8000f00:	fab3 f383 	clz	r3, r3
 8000f04:	f003 031f 	and.w	r3, r3, #31
 8000f08:	fa08 f303 	lsl.w	r3, r8, r3
 8000f0c:	4213      	tst	r3, r2
 8000f0e:	d0c7      	beq.n	8000ea0 <HAL_RCC_OscConfig+0x4dc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f10:	f7ff f95c 	bl	80001cc <HAL_GetTick>
 8000f14:	f241 3388 	movw	r3, #5000	; 0x1388
 8000f18:	eba0 0009 	sub.w	r0, r0, r9
 8000f1c:	4298      	cmp	r0, r3
 8000f1e:	d9ea      	bls.n	8000ef6 <HAL_RCC_OscConfig+0x532>
 8000f20:	e60c      	b.n	8000b3c <HAL_RCC_OscConfig+0x178>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f22:	2b05      	cmp	r3, #5
 8000f24:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000f26:	d103      	bne.n	8000f30 <HAL_RCC_OscConfig+0x56c>
 8000f28:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f2c:	636b      	str	r3, [r5, #52]	; 0x34
 8000f2e:	e79d      	b.n	8000e6c <HAL_RCC_OscConfig+0x4a8>
 8000f30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000f34:	636b      	str	r3, [r5, #52]	; 0x34
 8000f36:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000f38:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000f3c:	e799      	b.n	8000e72 <HAL_RCC_OscConfig+0x4ae>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f3e:	f7ff f945 	bl	80001cc <HAL_GetTick>
 8000f42:	f241 3388 	movw	r3, #5000	; 0x1388
 8000f46:	eba0 0009 	sub.w	r0, r0, r9
 8000f4a:	4298      	cmp	r0, r3
 8000f4c:	d99a      	bls.n	8000e84 <HAL_RCC_OscConfig+0x4c0>
 8000f4e:	e5f5      	b.n	8000b3c <HAL_RCC_OscConfig+0x178>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f50:	4d44      	ldr	r5, [pc, #272]	; (8001064 <HAL_RCC_OscConfig+0x6a0>)
 8000f52:	68ab      	ldr	r3, [r5, #8]
 8000f54:	f003 030c 	and.w	r3, r3, #12
 8000f58:	2b0c      	cmp	r3, #12
 8000f5a:	f43f adc8 	beq.w	8000aee <HAL_RCC_OscConfig+0x12a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f5e:	2a02      	cmp	r2, #2
 8000f60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f64:	d156      	bne.n	8001014 <HAL_RCC_OscConfig+0x650>
 8000f66:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8000f6a:	fab3 f383 	clz	r3, r3
 8000f6e:	2200      	movs	r2, #0
 8000f70:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000f74:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000f7c:	f7ff f926 	bl	80001cc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f80:	462e      	mov	r6, r5
        tickstart = HAL_GetTick();
 8000f82:	4680      	mov	r8, r0
 8000f84:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f88:	2501      	movs	r5, #1
 8000f8a:	fa97 f3a7 	rbit	r3, r7
 8000f8e:	6832      	ldr	r2, [r6, #0]
 8000f90:	fa97 f3a7 	rbit	r3, r7
 8000f94:	fab3 f383 	clz	r3, r3
 8000f98:	f003 031f 	and.w	r3, r3, #31
 8000f9c:	fa05 f303 	lsl.w	r3, r5, r3
 8000fa0:	4213      	tst	r3, r2
 8000fa2:	d130      	bne.n	8001006 <HAL_RCC_OscConfig+0x642>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000fa4:	68b2      	ldr	r2, [r6, #8]
 8000fa6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000fa8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000faa:	f422 027d 	bic.w	r2, r2, #16580608	; 0xfd0000
 8000fae:	430b      	orrs	r3, r1
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	60b3      	str	r3, [r6, #8]
 8000fb8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000fbc:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8000fc0:	fab3 f383 	clz	r3, r3
 8000fc4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000fc8:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 8000fd0:	f7ff f8fc 	bl	80001cc <HAL_GetTick>
 8000fd4:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8000fd8:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000fda:	2501      	movs	r5, #1
 8000fdc:	4e21      	ldr	r6, [pc, #132]	; (8001064 <HAL_RCC_OscConfig+0x6a0>)
 8000fde:	fa94 f3a4 	rbit	r3, r4
 8000fe2:	6832      	ldr	r2, [r6, #0]
 8000fe4:	fa94 f3a4 	rbit	r3, r4
 8000fe8:	fab3 f383 	clz	r3, r3
 8000fec:	f003 031f 	and.w	r3, r3, #31
 8000ff0:	fa05 f303 	lsl.w	r3, r5, r3
 8000ff4:	4213      	tst	r3, r2
 8000ff6:	f47f ad54 	bne.w	8000aa2 <HAL_RCC_OscConfig+0xde>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ffa:	f7ff f8e7 	bl	80001cc <HAL_GetTick>
 8000ffe:	1bc0      	subs	r0, r0, r7
 8001000:	2802      	cmp	r0, #2
 8001002:	d9ec      	bls.n	8000fde <HAL_RCC_OscConfig+0x61a>
 8001004:	e59a      	b.n	8000b3c <HAL_RCC_OscConfig+0x178>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001006:	f7ff f8e1 	bl	80001cc <HAL_GetTick>
 800100a:	eba0 0008 	sub.w	r0, r0, r8
 800100e:	2802      	cmp	r0, #2
 8001010:	d9bb      	bls.n	8000f8a <HAL_RCC_OscConfig+0x5c6>
 8001012:	e593      	b.n	8000b3c <HAL_RCC_OscConfig+0x178>
 8001014:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8001018:	fab3 f383 	clz	r3, r3
 800101c:	2200      	movs	r2, #0
 800101e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001022:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800102a:	f7ff f8cf 	bl	80001cc <HAL_GetTick>
 800102e:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8001032:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001034:	2601      	movs	r6, #1
 8001036:	fa94 f3a4 	rbit	r3, r4
 800103a:	682a      	ldr	r2, [r5, #0]
 800103c:	fa94 f3a4 	rbit	r3, r4
 8001040:	fab3 f383 	clz	r3, r3
 8001044:	f003 031f 	and.w	r3, r3, #31
 8001048:	fa06 f303 	lsl.w	r3, r6, r3
 800104c:	4213      	tst	r3, r2
 800104e:	f43f ad28 	beq.w	8000aa2 <HAL_RCC_OscConfig+0xde>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001052:	f7ff f8bb 	bl	80001cc <HAL_GetTick>
 8001056:	1bc0      	subs	r0, r0, r7
 8001058:	2802      	cmp	r0, #2
 800105a:	d9ec      	bls.n	8001036 <HAL_RCC_OscConfig+0x672>
 800105c:	e56e      	b.n	8000b3c <HAL_RCC_OscConfig+0x178>
 800105e:	bf00      	nop
 8001060:	1091c1a0 	.word	0x1091c1a0
 8001064:	40023800 	.word	0x40023800
 8001068:	40007000 	.word	0x40007000

0800106c <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 800106c:	491e      	ldr	r1, [pc, #120]	; (80010e8 <HAL_RCC_GetSysClockFreq+0x7c>)
{
 800106e:	b510      	push	{r4, lr}
  tmpreg = RCC->CFGR;
 8001070:	688b      	ldr	r3, [r1, #8]
  switch (tmpreg & RCC_CFGR_SWS)
 8001072:	f003 020c 	and.w	r2, r3, #12
 8001076:	2a08      	cmp	r2, #8
 8001078:	d005      	beq.n	8001086 <HAL_RCC_GetSysClockFreq+0x1a>
 800107a:	2a0c      	cmp	r2, #12
 800107c:	d005      	beq.n	800108a <HAL_RCC_GetSysClockFreq+0x1e>
 800107e:	2a04      	cmp	r2, #4
 8001080:	d122      	bne.n	80010c8 <HAL_RCC_GetSysClockFreq+0x5c>
      sysclockfreq = HSI_VALUE;
 8001082:	481a      	ldr	r0, [pc, #104]	; (80010ec <HAL_RCC_GetSysClockFreq+0x80>)
}
 8001084:	bd10      	pop	{r4, pc}
      sysclockfreq = HSE_VALUE;
 8001086:	481a      	ldr	r0, [pc, #104]	; (80010f0 <HAL_RCC_GetSysClockFreq+0x84>)
 8001088:	bd10      	pop	{r4, pc}
 800108a:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800108e:	fa92 f2a2 	rbit	r2, r2
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001092:	fab2 f282 	clz	r2, r2
 8001096:	f403 1070 	and.w	r0, r3, #3932160	; 0x3c0000
 800109a:	fa20 f202 	lsr.w	r2, r0, r2
 800109e:	4815      	ldr	r0, [pc, #84]	; (80010f4 <HAL_RCC_GetSysClockFreq+0x88>)
 80010a0:	5c84      	ldrb	r4, [r0, r2]
 80010a2:	f44f 0040 	mov.w	r0, #12582912	; 0xc00000
 80010a6:	fa90 f0a0 	rbit	r0, r0
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1U;
 80010aa:	fab0 f280 	clz	r2, r0
 80010ae:	f403 0040 	and.w	r0, r3, #12582912	; 0xc00000
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80010b2:	688b      	ldr	r3, [r1, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1U;
 80010b4:	40d0      	lsrs	r0, r2
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80010b6:	03db      	lsls	r3, r3, #15
        pllvco = (HSE_VALUE * pllm) / plld;
 80010b8:	bf4c      	ite	mi
 80010ba:	4b0d      	ldrmi	r3, [pc, #52]	; (80010f0 <HAL_RCC_GetSysClockFreq+0x84>)
        pllvco = (HSI_VALUE * pllm) / plld;
 80010bc:	4b0b      	ldrpl	r3, [pc, #44]	; (80010ec <HAL_RCC_GetSysClockFreq+0x80>)
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1U;
 80010be:	3001      	adds	r0, #1
        pllvco = (HSI_VALUE * pllm) / plld;
 80010c0:	4363      	muls	r3, r4
 80010c2:	fbb3 f0f0 	udiv	r0, r3, r0
 80010c6:	bd10      	pop	{r4, pc}
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_BITNUMBER;
 80010c8:	6848      	ldr	r0, [r1, #4]
 80010ca:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80010ce:	fa93 f3a3 	rbit	r3, r3
 80010d2:	fab3 f383 	clz	r3, r3
 80010d6:	f400 4060 	and.w	r0, r0, #57344	; 0xe000
 80010da:	40d8      	lsrs	r0, r3
      sysclockfreq = (32768U * (1U << (msiclkrange + 1U)));
 80010dc:	1c43      	adds	r3, r0, #1
 80010de:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80010e2:	4098      	lsls	r0, r3
 80010e4:	bd10      	pop	{r4, pc}
 80010e6:	bf00      	nop
 80010e8:	40023800 	.word	0x40023800
 80010ec:	00f42400 	.word	0x00f42400
 80010f0:	007a1200 	.word	0x007a1200
 80010f4:	08001de0 	.word	0x08001de0

080010f8 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80010f8:	4b6a      	ldr	r3, [pc, #424]	; (80012a4 <HAL_RCC_ClockConfig+0x1ac>)
{
 80010fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80010fe:	681a      	ldr	r2, [r3, #0]
{
 8001100:	4606      	mov	r6, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001102:	f002 0201 	and.w	r2, r2, #1
 8001106:	428a      	cmp	r2, r1
{
 8001108:	460d      	mov	r5, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800110a:	d330      	bcc.n	800116e <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800110c:	6832      	ldr	r2, [r6, #0]
 800110e:	0794      	lsls	r4, r2, #30
 8001110:	d440      	bmi.n	8001194 <HAL_RCC_ClockConfig+0x9c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001112:	07d0      	lsls	r0, r2, #31
 8001114:	d446      	bmi.n	80011a4 <HAL_RCC_ClockConfig+0xac>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001116:	4b63      	ldr	r3, [pc, #396]	; (80012a4 <HAL_RCC_ClockConfig+0x1ac>)
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	f002 0201 	and.w	r2, r2, #1
 800111e:	4295      	cmp	r5, r2
 8001120:	f0c0 80ae 	bcc.w	8001280 <HAL_RCC_ClockConfig+0x188>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001124:	6832      	ldr	r2, [r6, #0]
 8001126:	0751      	lsls	r1, r2, #29
 8001128:	f100 80b3 	bmi.w	8001292 <HAL_RCC_ClockConfig+0x19a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800112c:	0713      	lsls	r3, r2, #28
 800112e:	d507      	bpl.n	8001140 <HAL_RCC_ClockConfig+0x48>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001130:	4a5d      	ldr	r2, [pc, #372]	; (80012a8 <HAL_RCC_ClockConfig+0x1b0>)
 8001132:	6931      	ldr	r1, [r6, #16]
 8001134:	6893      	ldr	r3, [r2, #8]
 8001136:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800113a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800113e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001140:	f7ff ff94 	bl	800106c <HAL_RCC_GetSysClockFreq>
 8001144:	4b58      	ldr	r3, [pc, #352]	; (80012a8 <HAL_RCC_ClockConfig+0x1b0>)
 8001146:	22f0      	movs	r2, #240	; 0xf0
 8001148:	689b      	ldr	r3, [r3, #8]
 800114a:	fa92 f2a2 	rbit	r2, r2
 800114e:	fab2 f282 	clz	r2, r2
 8001152:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001156:	40d3      	lsrs	r3, r2
 8001158:	4a54      	ldr	r2, [pc, #336]	; (80012ac <HAL_RCC_ClockConfig+0x1b4>)
 800115a:	5cd3      	ldrb	r3, [r2, r3]
 800115c:	40d8      	lsrs	r0, r3
 800115e:	4b54      	ldr	r3, [pc, #336]	; (80012b0 <HAL_RCC_ClockConfig+0x1b8>)
 8001160:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001162:	2000      	movs	r0, #0
 8001164:	f7ff f80a 	bl	800017c <HAL_InitTick>
  return HAL_OK;
 8001168:	2000      	movs	r0, #0
}
 800116a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800116e:	2901      	cmp	r1, #1
 8001170:	bf02      	ittt	eq
 8001172:	681a      	ldreq	r2, [r3, #0]
 8001174:	f042 0204 	orreq.w	r2, r2, #4
 8001178:	601a      	streq	r2, [r3, #0]
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	f022 0201 	bic.w	r2, r2, #1
 8001180:	430a      	orrs	r2, r1
 8001182:	601a      	str	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f003 0301 	and.w	r3, r3, #1
 800118a:	4299      	cmp	r1, r3
 800118c:	d0be      	beq.n	800110c <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 800118e:	2001      	movs	r0, #1
 8001190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001194:	4944      	ldr	r1, [pc, #272]	; (80012a8 <HAL_RCC_ClockConfig+0x1b0>)
 8001196:	68b0      	ldr	r0, [r6, #8]
 8001198:	688b      	ldr	r3, [r1, #8]
 800119a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800119e:	4303      	orrs	r3, r0
 80011a0:	608b      	str	r3, [r1, #8]
 80011a2:	e7b6      	b.n	8001112 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011a4:	6872      	ldr	r2, [r6, #4]
 80011a6:	4940      	ldr	r1, [pc, #256]	; (80012a8 <HAL_RCC_ClockConfig+0x1b0>)
 80011a8:	2a02      	cmp	r2, #2
 80011aa:	d10f      	bne.n	80011cc <HAL_RCC_ClockConfig+0xd4>
 80011ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011b0:	fa93 f0a3 	rbit	r0, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 80011b4:	6808      	ldr	r0, [r1, #0]
 80011b6:	fa93 f3a3 	rbit	r3, r3
 80011ba:	fab3 f383 	clz	r3, r3
 80011be:	2101      	movs	r1, #1
 80011c0:	f003 031f 	and.w	r3, r3, #31
 80011c4:	fa01 f303 	lsl.w	r3, r1, r3
 80011c8:	4203      	tst	r3, r0
 80011ca:	e013      	b.n	80011f4 <HAL_RCC_ClockConfig+0xfc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80011cc:	2a03      	cmp	r2, #3
 80011ce:	d102      	bne.n	80011d6 <HAL_RCC_ClockConfig+0xde>
 80011d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80011d4:	e7ec      	b.n	80011b0 <HAL_RCC_ClockConfig+0xb8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80011d6:	2a01      	cmp	r2, #1
 80011d8:	d129      	bne.n	800122e <HAL_RCC_ClockConfig+0x136>
 80011da:	2302      	movs	r3, #2
 80011dc:	fa93 f0a3 	rbit	r0, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011e0:	6809      	ldr	r1, [r1, #0]
 80011e2:	fa93 f3a3 	rbit	r3, r3
 80011e6:	fab3 f383 	clz	r3, r3
 80011ea:	f003 031f 	and.w	r3, r3, #31
 80011ee:	fa02 f303 	lsl.w	r3, r2, r3
 80011f2:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 80011f4:	d0cb      	beq.n	800118e <HAL_RCC_ClockConfig+0x96>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011f6:	4c2c      	ldr	r4, [pc, #176]	; (80012a8 <HAL_RCC_ClockConfig+0x1b0>)
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011f8:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011fc:	68a3      	ldr	r3, [r4, #8]
 80011fe:	f023 0303 	bic.w	r3, r3, #3
 8001202:	431a      	orrs	r2, r3
 8001204:	60a2      	str	r2, [r4, #8]
    tickstart = HAL_GetTick();
 8001206:	f7fe ffe1 	bl	80001cc <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800120a:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 800120c:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800120e:	2b02      	cmp	r3, #2
 8001210:	d110      	bne.n	8001234 <HAL_RCC_ClockConfig+0x13c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001212:	68a3      	ldr	r3, [r4, #8]
 8001214:	f003 030c 	and.w	r3, r3, #12
 8001218:	2b08      	cmp	r3, #8
 800121a:	f43f af7c 	beq.w	8001116 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800121e:	f7fe ffd5 	bl	80001cc <HAL_GetTick>
 8001222:	1bc0      	subs	r0, r0, r7
 8001224:	4540      	cmp	r0, r8
 8001226:	d9f4      	bls.n	8001212 <HAL_RCC_ClockConfig+0x11a>
          return HAL_TIMEOUT;
 8001228:	2003      	movs	r0, #3
 800122a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800122e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001232:	e7bd      	b.n	80011b0 <HAL_RCC_ClockConfig+0xb8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001234:	2b03      	cmp	r3, #3
 8001236:	d10b      	bne.n	8001250 <HAL_RCC_ClockConfig+0x158>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001238:	68a3      	ldr	r3, [r4, #8]
 800123a:	f003 030c 	and.w	r3, r3, #12
 800123e:	2b0c      	cmp	r3, #12
 8001240:	f43f af69 	beq.w	8001116 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001244:	f7fe ffc2 	bl	80001cc <HAL_GetTick>
 8001248:	1bc0      	subs	r0, r0, r7
 800124a:	4540      	cmp	r0, r8
 800124c:	d9f4      	bls.n	8001238 <HAL_RCC_ClockConfig+0x140>
 800124e:	e7eb      	b.n	8001228 <HAL_RCC_ClockConfig+0x130>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001250:	2b01      	cmp	r3, #1
 8001252:	d110      	bne.n	8001276 <HAL_RCC_ClockConfig+0x17e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001254:	68a3      	ldr	r3, [r4, #8]
 8001256:	f003 030c 	and.w	r3, r3, #12
 800125a:	2b04      	cmp	r3, #4
 800125c:	f43f af5b 	beq.w	8001116 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001260:	f7fe ffb4 	bl	80001cc <HAL_GetTick>
 8001264:	1bc0      	subs	r0, r0, r7
 8001266:	4540      	cmp	r0, r8
 8001268:	d9f4      	bls.n	8001254 <HAL_RCC_ClockConfig+0x15c>
 800126a:	e7dd      	b.n	8001228 <HAL_RCC_ClockConfig+0x130>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800126c:	f7fe ffae 	bl	80001cc <HAL_GetTick>
 8001270:	1bc0      	subs	r0, r0, r7
 8001272:	4540      	cmp	r0, r8
 8001274:	d8d8      	bhi.n	8001228 <HAL_RCC_ClockConfig+0x130>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001276:	68a3      	ldr	r3, [r4, #8]
 8001278:	f013 0f0c 	tst.w	r3, #12
 800127c:	d1f6      	bne.n	800126c <HAL_RCC_ClockConfig+0x174>
 800127e:	e74a      	b.n	8001116 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	f022 0201 	bic.w	r2, r2, #1
 8001286:	601a      	str	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	07da      	lsls	r2, r3, #31
 800128c:	f53f af7f 	bmi.w	800118e <HAL_RCC_ClockConfig+0x96>
 8001290:	e748      	b.n	8001124 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001292:	4905      	ldr	r1, [pc, #20]	; (80012a8 <HAL_RCC_ClockConfig+0x1b0>)
 8001294:	68f0      	ldr	r0, [r6, #12]
 8001296:	688b      	ldr	r3, [r1, #8]
 8001298:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800129c:	4303      	orrs	r3, r0
 800129e:	608b      	str	r3, [r1, #8]
 80012a0:	e744      	b.n	800112c <HAL_RCC_ClockConfig+0x34>
 80012a2:	bf00      	nop
 80012a4:	40023c00 	.word	0x40023c00
 80012a8:	40023800 	.word	0x40023800
 80012ac:	08001dc8 	.word	0x08001dc8
 80012b0:	20000000 	.word	0x20000000

080012b4 <HAL_RCC_GetHCLKFreq>:
}
 80012b4:	4b01      	ldr	r3, [pc, #4]	; (80012bc <HAL_RCC_GetHCLKFreq+0x8>)
 80012b6:	6818      	ldr	r0, [r3, #0]
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	20000000 	.word	0x20000000

080012c0 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80012c0:	4b08      	ldr	r3, [pc, #32]	; (80012e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80012c2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80012c6:	689b      	ldr	r3, [r3, #8]
 80012c8:	fa92 f2a2 	rbit	r2, r2
 80012cc:	fab2 f282 	clz	r2, r2
 80012d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80012d4:	40d3      	lsrs	r3, r2
 80012d6:	4a04      	ldr	r2, [pc, #16]	; (80012e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80012d8:	5cd3      	ldrb	r3, [r2, r3]
 80012da:	4a04      	ldr	r2, [pc, #16]	; (80012ec <HAL_RCC_GetPCLK1Freq+0x2c>)
 80012dc:	6810      	ldr	r0, [r2, #0]
}    
 80012de:	40d8      	lsrs	r0, r3
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	40023800 	.word	0x40023800
 80012e8:	08001dd8 	.word	0x08001dd8
 80012ec:	20000000 	.word	0x20000000

080012f0 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80012f0:	4b08      	ldr	r3, [pc, #32]	; (8001314 <HAL_RCC_GetPCLK2Freq+0x24>)
 80012f2:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80012f6:	689b      	ldr	r3, [r3, #8]
 80012f8:	fa92 f2a2 	rbit	r2, r2
 80012fc:	fab2 f282 	clz	r2, r2
 8001300:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001304:	40d3      	lsrs	r3, r2
 8001306:	4a04      	ldr	r2, [pc, #16]	; (8001318 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001308:	5cd3      	ldrb	r3, [r2, r3]
 800130a:	4a04      	ldr	r2, [pc, #16]	; (800131c <HAL_RCC_GetPCLK2Freq+0x2c>)
 800130c:	6810      	ldr	r0, [r2, #0]
} 
 800130e:	40d8      	lsrs	r0, r3
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	40023800 	.word	0x40023800
 8001318:	08001dd8 	.word	0x08001dd8
 800131c:	20000000 	.word	0x20000000

08001320 <HAL_RCCEx_PeriphCLKConfig>:
  
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC) 
 8001320:	6803      	ldr	r3, [r0, #0]
{
 8001322:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001326:	4604      	mov	r4, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC) 
 8001328:	07d8      	lsls	r0, r3, #31
 800132a:	d401      	bmi.n	8001330 <HAL_RCCEx_PeriphCLKConfig+0x10>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }
  
  return HAL_OK;
 800132c:	2000      	movs	r0, #0
 800132e:	e049      	b.n	80013c4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001330:	4b4a      	ldr	r3, [pc, #296]	; (800145c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001332:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001334:	00d1      	lsls	r1, r2, #3
 8001336:	d433      	bmi.n	80013a0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      pwrclkchanged = SET;
 8001338:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800133a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800133c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001340:	625a      	str	r2, [r3, #36]	; 0x24
 8001342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001344:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001348:	9301      	str	r3, [sp, #4]
 800134a:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800134c:	4e44      	ldr	r6, [pc, #272]	; (8001460 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800134e:	6833      	ldr	r3, [r6, #0]
 8001350:	05da      	lsls	r2, r3, #23
 8001352:	d527      	bpl.n	80013a4 <HAL_RCCEx_PeriphCLKConfig+0x84>
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001354:	4a41      	ldr	r2, [pc, #260]	; (800145c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001356:	6863      	ldr	r3, [r4, #4]
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001358:	6811      	ldr	r1, [r2, #0]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800135a:	f003 40c0 	and.w	r0, r3, #1610612736	; 0x60000000
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800135e:	f001 41c0 	and.w	r1, r1, #1610612736	; 0x60000000
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001362:	4281      	cmp	r1, r0
 8001364:	4611      	mov	r1, r2
 8001366:	d130      	bne.n	80013ca <HAL_RCCEx_PeriphCLKConfig+0xaa>
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001368:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800136a:	f412 3240 	ands.w	r2, r2, #196608	; 0x30000
 800136e:	d136      	bne.n	80013de <HAL_RCCEx_PeriphCLKConfig+0xbe>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001370:	6860      	ldr	r0, [r4, #4]
 8001372:	4b3a      	ldr	r3, [pc, #232]	; (800145c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8001374:	f400 3140 	and.w	r1, r0, #196608	; 0x30000
 8001378:	f5b1 3f40 	cmp.w	r1, #196608	; 0x30000
 800137c:	d106      	bne.n	800138c <HAL_RCCEx_PeriphCLKConfig+0x6c>
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	f000 40c0 	and.w	r0, r0, #1610612736	; 0x60000000
 8001384:	f022 42c0 	bic.w	r2, r2, #1610612736	; 0x60000000
 8001388:	4302      	orrs	r2, r0
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800138e:	4311      	orrs	r1, r2
 8001390:	6359      	str	r1, [r3, #52]	; 0x34
    if(pwrclkchanged == SET)
 8001392:	2d00      	cmp	r5, #0
 8001394:	d0ca      	beq.n	800132c <HAL_RCCEx_PeriphCLKConfig+0xc>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001396:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001398:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800139c:	625a      	str	r2, [r3, #36]	; 0x24
 800139e:	e7c5      	b.n	800132c <HAL_RCCEx_PeriphCLKConfig+0xc>
    FlagStatus       pwrclkchanged = RESET;
 80013a0:	2500      	movs	r5, #0
 80013a2:	e7d3      	b.n	800134c <HAL_RCCEx_PeriphCLKConfig+0x2c>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013a4:	6833      	ldr	r3, [r6, #0]
 80013a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013aa:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80013ac:	f7fe ff0e 	bl	80001cc <HAL_GetTick>
 80013b0:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013b2:	6833      	ldr	r3, [r6, #0]
 80013b4:	05db      	lsls	r3, r3, #23
 80013b6:	d4cd      	bmi.n	8001354 <HAL_RCCEx_PeriphCLKConfig+0x34>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013b8:	f7fe ff08 	bl	80001cc <HAL_GetTick>
 80013bc:	1bc0      	subs	r0, r0, r7
 80013be:	2864      	cmp	r0, #100	; 0x64
 80013c0:	d9f7      	bls.n	80013b2 <HAL_RCCEx_PeriphCLKConfig+0x92>
          return HAL_TIMEOUT;
 80013c2:	2003      	movs	r0, #3
}
 80013c4:	b003      	add	sp, #12
 80013c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE) && HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80013ca:	f403 3040 	and.w	r0, r3, #196608	; 0x30000
 80013ce:	f5b0 3f40 	cmp.w	r0, #196608	; 0x30000
 80013d2:	d1c9      	bne.n	8001368 <HAL_RCCEx_PeriphCLKConfig+0x48>
 80013d4:	6812      	ldr	r2, [r2, #0]
 80013d6:	0390      	lsls	r0, r2, #14
 80013d8:	d5c6      	bpl.n	8001368 <HAL_RCCEx_PeriphCLKConfig+0x48>
        return HAL_ERROR; 
 80013da:	2001      	movs	r0, #1
 80013dc:	e7f2      	b.n	80013c4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80013de:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013e2:	429a      	cmp	r2, r3
 80013e4:	d0c4      	beq.n	8001370 <HAL_RCCEx_PeriphCLKConfig+0x50>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80013e6:	6823      	ldr	r3, [r4, #0]
 80013e8:	07da      	lsls	r2, r3, #31
 80013ea:	d5c1      	bpl.n	8001370 <HAL_RCCEx_PeriphCLKConfig+0x50>
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80013ec:	6b48      	ldr	r0, [r1, #52]	; 0x34
 80013ee:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80013f2:	f420 3740 	bic.w	r7, r0, #196608	; 0x30000
 80013f6:	fa93 f2a3 	rbit	r2, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 80013fa:	fab2 f282 	clz	r2, r2
 80013fe:	2601      	movs	r6, #1
 8001400:	f8df e060 	ldr.w	lr, [pc, #96]	; 8001464 <HAL_RCCEx_PeriphCLKConfig+0x144>
 8001404:	4472      	add	r2, lr
 8001406:	0092      	lsls	r2, r2, #2
 8001408:	6016      	str	r6, [r2, #0]
 800140a:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 800140e:	fab3 f383 	clz	r3, r3
 8001412:	2200      	movs	r2, #0
 8001414:	4473      	add	r3, lr
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	601a      	str	r2, [r3, #0]
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800141a:	05c3      	lsls	r3, r0, #23
      RCC->CSR = temp_reg;
 800141c:	634f      	str	r7, [r1, #52]	; 0x34
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800141e:	d5a7      	bpl.n	8001370 <HAL_RCCEx_PeriphCLKConfig+0x50>
        tickstart = HAL_GetTick();
 8001420:	f7fe fed4 	bl	80001cc <HAL_GetTick>
 8001424:	f44f 7700 	mov.w	r7, #512	; 0x200
 8001428:	4681      	mov	r9, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800142a:	f8df 8030 	ldr.w	r8, [pc, #48]	; 800145c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800142e:	fa97 f3a7 	rbit	r3, r7
 8001432:	f8d8 2034 	ldr.w	r2, [r8, #52]	; 0x34
 8001436:	fa97 f3a7 	rbit	r3, r7
 800143a:	fab3 f383 	clz	r3, r3
 800143e:	f003 031f 	and.w	r3, r3, #31
 8001442:	fa06 f303 	lsl.w	r3, r6, r3
 8001446:	4213      	tst	r3, r2
 8001448:	d192      	bne.n	8001370 <HAL_RCCEx_PeriphCLKConfig+0x50>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800144a:	f7fe febf 	bl	80001cc <HAL_GetTick>
 800144e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001452:	eba0 0009 	sub.w	r0, r0, r9
 8001456:	4298      	cmp	r0, r3
 8001458:	d9e9      	bls.n	800142e <HAL_RCCEx_PeriphCLKConfig+0x10e>
 800145a:	e7b2      	b.n	80013c2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800145c:	40023800 	.word	0x40023800
 8001460:	40007000 	.word	0x40007000
 8001464:	1091c1a0 	.word	0x1091c1a0

08001468 <RTC_EnterInitMode>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8001468:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0;
  
  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800146a:	6803      	ldr	r3, [r0, #0]
{
 800146c:	4604      	mov	r4, r0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800146e:	68da      	ldr	r2, [r3, #12]
 8001470:	0652      	lsls	r2, r2, #25
 8001472:	d501      	bpl.n	8001478 <RTC_EnterInitMode+0x10>
        return HAL_TIMEOUT;
      } 
    }
  }
  
  return HAL_OK;  
 8001474:	2000      	movs	r0, #0
 8001476:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8001478:	f04f 32ff 	mov.w	r2, #4294967295
 800147c:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 800147e:	f7fe fea5 	bl	80001cc <HAL_GetTick>
 8001482:	4605      	mov	r5, r0
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8001484:	6823      	ldr	r3, [r4, #0]
 8001486:	68db      	ldr	r3, [r3, #12]
 8001488:	065b      	lsls	r3, r3, #25
 800148a:	d4f3      	bmi.n	8001474 <RTC_EnterInitMode+0xc>
      if((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800148c:	f7fe fe9e 	bl	80001cc <HAL_GetTick>
 8001490:	1b40      	subs	r0, r0, r5
 8001492:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001496:	d9f5      	bls.n	8001484 <RTC_EnterInitMode+0x1c>
        return HAL_TIMEOUT;
 8001498:	2003      	movs	r0, #3
}
 800149a:	bd38      	pop	{r3, r4, r5, pc}

0800149c <HAL_RTC_Init>:
{
 800149c:	b538      	push	{r3, r4, r5, lr}
  if(hrtc == NULL)
 800149e:	4604      	mov	r4, r0
 80014a0:	b1b0      	cbz	r0, 80014d0 <HAL_RTC_Init+0x34>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80014a2:	7f43      	ldrb	r3, [r0, #29]
 80014a4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80014a8:	b913      	cbnz	r3, 80014b0 <HAL_RTC_Init+0x14>
    hrtc->Lock = HAL_UNLOCKED;
 80014aa:	7702      	strb	r2, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 80014ac:	f000 fbba 	bl	8001c24 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;  
 80014b0:	2302      	movs	r3, #2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80014b2:	22ca      	movs	r2, #202	; 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;  
 80014b4:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80014b6:	6823      	ldr	r3, [r4, #0]
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80014b8:	4620      	mov	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80014ba:	625a      	str	r2, [r3, #36]	; 0x24
 80014bc:	2253      	movs	r2, #83	; 0x53
 80014be:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80014c0:	f7ff ffd2 	bl	8001468 <RTC_EnterInitMode>
 80014c4:	6823      	ldr	r3, [r4, #0]
 80014c6:	b128      	cbz	r0, 80014d4 <HAL_RTC_Init+0x38>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 80014c8:	22ff      	movs	r2, #255	; 0xff
 80014ca:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80014cc:	2304      	movs	r3, #4
 80014ce:	7763      	strb	r3, [r4, #29]
     return HAL_ERROR;
 80014d0:	2001      	movs	r0, #1
}
 80014d2:	bd38      	pop	{r3, r4, r5, pc}
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80014d4:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80014d6:	6925      	ldr	r5, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80014d8:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 80014dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80014e0:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80014e2:	6862      	ldr	r2, [r4, #4]
 80014e4:	6899      	ldr	r1, [r3, #8]
 80014e6:	432a      	orrs	r2, r5
 80014e8:	6965      	ldr	r5, [r4, #20]
 80014ea:	432a      	orrs	r2, r5
 80014ec:	430a      	orrs	r2, r1
 80014ee:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80014f0:	68e2      	ldr	r2, [r4, #12]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 80014f2:	68a1      	ldr	r1, [r4, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80014f4:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 80014f6:	691a      	ldr	r2, [r3, #16]
 80014f8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80014fc:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 80014fe:	68da      	ldr	r2, [r3, #12]
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 8001500:	69a1      	ldr	r1, [r4, #24]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 8001502:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001506:	60da      	str	r2, [r3, #12]
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8001508:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800150a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800150e:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 8001510:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001512:	430a      	orrs	r2, r1
 8001514:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8001516:	22ff      	movs	r2, #255	; 0xff
 8001518:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 800151a:	2301      	movs	r3, #1
 800151c:	7763      	strb	r3, [r4, #29]
    return HAL_OK;
 800151e:	bd38      	pop	{r3, r4, r5, pc}

08001520 <UART_SetConfig>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001520:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001524:	4681      	mov	r9, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001526:	6805      	ldr	r5, [r0, #0]
 8001528:	68c2      	ldr	r2, [r0, #12]
 800152a:	692b      	ldr	r3, [r5, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800152c:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800152e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001532:	4313      	orrs	r3, r2
 8001534:	612b      	str	r3, [r5, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001536:	6883      	ldr	r3, [r0, #8]
 8001538:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, 
 800153a:	68ea      	ldr	r2, [r5, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800153c:	4303      	orrs	r3, r0
 800153e:	f8d9 0014 	ldr.w	r0, [r9, #20]
  MODIFY_REG(huart->Instance->CR1, 
 8001542:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001546:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, 
 8001548:	f022 020c 	bic.w	r2, r2, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800154c:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 800154e:	4313      	orrs	r3, r2
 8001550:	60eb      	str	r3, [r5, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
  
  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001552:	696b      	ldr	r3, [r5, #20]
 8001554:	f8d9 2018 	ldr.w	r2, [r9, #24]
 8001558:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800155c:	4313      	orrs	r3, r2
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800155e:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001562:	616b      	str	r3, [r5, #20]
 8001564:	4b7e      	ldr	r3, [pc, #504]	; (8001760 <UART_SetConfig+0x240>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001566:	d17f      	bne.n	8001668 <UART_SetConfig+0x148>
  {
    /*------- UART-associated USART registers setting : BRR Configuration ------*/
    if((huart->Instance == USART1))
 8001568:	429d      	cmp	r5, r3
 800156a:	f04f 0419 	mov.w	r4, #25
 800156e:	d147      	bne.n	8001600 <UART_SetConfig+0xe0>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001570:	f7ff febe 	bl	80012f0 <HAL_RCC_GetPCLK2Freq>
 8001574:	fb04 f300 	mul.w	r3, r4, r0
 8001578:	f8d9 7004 	ldr.w	r7, [r9, #4]
 800157c:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001580:	007f      	lsls	r7, r7, #1
 8001582:	fbb3 f3f7 	udiv	r3, r3, r7
 8001586:	fbb3 f3f8 	udiv	r3, r3, r8
 800158a:	011f      	lsls	r7, r3, #4
 800158c:	f7ff feb0 	bl	80012f0 <HAL_RCC_GetPCLK2Freq>
 8001590:	4360      	muls	r0, r4
 8001592:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001596:	005b      	lsls	r3, r3, #1
 8001598:	fbb0 f6f3 	udiv	r6, r0, r3
 800159c:	f7ff fea8 	bl	80012f0 <HAL_RCC_GetPCLK2Freq>
 80015a0:	4360      	muls	r0, r4
 80015a2:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80015a6:	005b      	lsls	r3, r3, #1
 80015a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80015ac:	fbb3 f3f8 	udiv	r3, r3, r8
 80015b0:	fb08 6313 	mls	r3, r8, r3, r6
 80015b4:	00db      	lsls	r3, r3, #3
 80015b6:	3332      	adds	r3, #50	; 0x32
 80015b8:	fbb3 f3f8 	udiv	r3, r3, r8
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	f403 76f8 	and.w	r6, r3, #496	; 0x1f0
 80015c2:	f7ff fe95 	bl	80012f0 <HAL_RCC_GetPCLK2Freq>
 80015c6:	4360      	muls	r0, r4
 80015c8:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80015cc:	0052      	lsls	r2, r2, #1
 80015ce:	fbb0 faf2 	udiv	sl, r0, r2
 80015d2:	f7ff fe8d 	bl	80012f0 <HAL_RCC_GetPCLK2Freq>
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80015d6:	4360      	muls	r0, r4
 80015d8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80015dc:	005b      	lsls	r3, r3, #1
 80015de:	fbb0 f3f3 	udiv	r3, r0, r3
 80015e2:	fbb3 f3f8 	udiv	r3, r3, r8
 80015e6:	fb08 a313 	mls	r3, r8, r3, sl
 80015ea:	00db      	lsls	r3, r3, #3
 80015ec:	3332      	adds	r3, #50	; 0x32
 80015ee:	fbb3 f3f8 	udiv	r3, r3, r8
 80015f2:	f003 0307 	and.w	r3, r3, #7
 80015f6:	443b      	add	r3, r7
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80015f8:	4433      	add	r3, r6
 80015fa:	60ab      	str	r3, [r5, #8]
 80015fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001600:	f7ff fe5e 	bl	80012c0 <HAL_RCC_GetPCLK1Freq>
 8001604:	fb04 f300 	mul.w	r3, r4, r0
 8001608:	f8d9 7004 	ldr.w	r7, [r9, #4]
 800160c:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001610:	007f      	lsls	r7, r7, #1
 8001612:	fbb3 f3f7 	udiv	r3, r3, r7
 8001616:	fbb3 f3f8 	udiv	r3, r3, r8
 800161a:	011f      	lsls	r7, r3, #4
 800161c:	f7ff fe50 	bl	80012c0 <HAL_RCC_GetPCLK1Freq>
 8001620:	4360      	muls	r0, r4
 8001622:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001626:	005b      	lsls	r3, r3, #1
 8001628:	fbb0 f6f3 	udiv	r6, r0, r3
 800162c:	f7ff fe48 	bl	80012c0 <HAL_RCC_GetPCLK1Freq>
 8001630:	4360      	muls	r0, r4
 8001632:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001636:	005b      	lsls	r3, r3, #1
 8001638:	fbb0 f3f3 	udiv	r3, r0, r3
 800163c:	fbb3 f3f8 	udiv	r3, r3, r8
 8001640:	fb08 6313 	mls	r3, r8, r3, r6
 8001644:	00db      	lsls	r3, r3, #3
 8001646:	3332      	adds	r3, #50	; 0x32
 8001648:	fbb3 f3f8 	udiv	r3, r3, r8
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	f403 76f8 	and.w	r6, r3, #496	; 0x1f0
 8001652:	f7ff fe35 	bl	80012c0 <HAL_RCC_GetPCLK1Freq>
 8001656:	4360      	muls	r0, r4
 8001658:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800165c:	0052      	lsls	r2, r2, #1
 800165e:	fbb0 faf2 	udiv	sl, r0, r2
 8001662:	f7ff fe2d 	bl	80012c0 <HAL_RCC_GetPCLK1Freq>
 8001666:	e7b6      	b.n	80015d6 <UART_SetConfig+0xb6>
    if((huart->Instance == USART1))
 8001668:	429d      	cmp	r5, r3
 800166a:	f04f 0419 	mov.w	r4, #25
 800166e:	d143      	bne.n	80016f8 <UART_SetConfig+0x1d8>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001670:	f7ff fe3e 	bl	80012f0 <HAL_RCC_GetPCLK2Freq>
 8001674:	fb04 f300 	mul.w	r3, r4, r0
 8001678:	f8d9 6004 	ldr.w	r6, [r9, #4]
 800167c:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001680:	00b6      	lsls	r6, r6, #2
 8001682:	fbb3 f3f6 	udiv	r3, r3, r6
 8001686:	fbb3 f3f8 	udiv	r3, r3, r8
 800168a:	011e      	lsls	r6, r3, #4
 800168c:	f7ff fe30 	bl	80012f0 <HAL_RCC_GetPCLK2Freq>
 8001690:	4360      	muls	r0, r4
 8001692:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	fbb0 f7f3 	udiv	r7, r0, r3
 800169c:	f7ff fe28 	bl	80012f0 <HAL_RCC_GetPCLK2Freq>
 80016a0:	4360      	muls	r0, r4
 80016a2:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80016ac:	fbb3 f3f8 	udiv	r3, r3, r8
 80016b0:	fb08 7313 	mls	r3, r8, r3, r7
 80016b4:	011b      	lsls	r3, r3, #4
 80016b6:	3332      	adds	r3, #50	; 0x32
 80016b8:	fbb3 f3f8 	udiv	r3, r3, r8
 80016bc:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 80016c0:	f7ff fe16 	bl	80012f0 <HAL_RCC_GetPCLK2Freq>
 80016c4:	4360      	muls	r0, r4
 80016c6:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80016ca:	0092      	lsls	r2, r2, #2
 80016cc:	fbb0 faf2 	udiv	sl, r0, r2
 80016d0:	f7ff fe0e 	bl	80012f0 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80016d4:	4360      	muls	r0, r4
 80016d6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80016e0:	fbb3 f3f8 	udiv	r3, r3, r8
 80016e4:	fb08 a313 	mls	r3, r8, r3, sl
 80016e8:	011b      	lsls	r3, r3, #4
 80016ea:	3332      	adds	r3, #50	; 0x32
 80016ec:	fbb3 f3f8 	udiv	r3, r3, r8
 80016f0:	f003 030f 	and.w	r3, r3, #15
 80016f4:	433b      	orrs	r3, r7
 80016f6:	e77f      	b.n	80015f8 <UART_SetConfig+0xd8>
 80016f8:	f7ff fde2 	bl	80012c0 <HAL_RCC_GetPCLK1Freq>
 80016fc:	fb04 f300 	mul.w	r3, r4, r0
 8001700:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8001704:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001708:	00b6      	lsls	r6, r6, #2
 800170a:	fbb3 f3f6 	udiv	r3, r3, r6
 800170e:	fbb3 f3f8 	udiv	r3, r3, r8
 8001712:	011e      	lsls	r6, r3, #4
 8001714:	f7ff fdd4 	bl	80012c0 <HAL_RCC_GetPCLK1Freq>
 8001718:	4360      	muls	r0, r4
 800171a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	fbb0 f7f3 	udiv	r7, r0, r3
 8001724:	f7ff fdcc 	bl	80012c0 <HAL_RCC_GetPCLK1Freq>
 8001728:	4360      	muls	r0, r4
 800172a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	fbb0 f3f3 	udiv	r3, r0, r3
 8001734:	fbb3 f3f8 	udiv	r3, r3, r8
 8001738:	fb08 7313 	mls	r3, r8, r3, r7
 800173c:	011b      	lsls	r3, r3, #4
 800173e:	3332      	adds	r3, #50	; 0x32
 8001740:	fbb3 f3f8 	udiv	r3, r3, r8
 8001744:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 8001748:	f7ff fdba 	bl	80012c0 <HAL_RCC_GetPCLK1Freq>
 800174c:	4360      	muls	r0, r4
 800174e:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8001752:	0092      	lsls	r2, r2, #2
 8001754:	fbb0 faf2 	udiv	sl, r0, r2
 8001758:	f7ff fdb2 	bl	80012c0 <HAL_RCC_GetPCLK1Freq>
 800175c:	e7ba      	b.n	80016d4 <UART_SetConfig+0x1b4>
 800175e:	bf00      	nop
 8001760:	40013800 	.word	0x40013800

08001764 <HAL_UART_Init>:
{
 8001764:	b510      	push	{r4, lr}
  if(huart == NULL)
 8001766:	4604      	mov	r4, r0
 8001768:	b330      	cbz	r0, 80017b8 <HAL_UART_Init+0x54>
  if(huart->State == HAL_UART_STATE_RESET)
 800176a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800176e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001772:	b91b      	cbnz	r3, 800177c <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001774:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8001778:	f000 fa68 	bl	8001c4c <HAL_UART_MspInit>
  huart->State = HAL_UART_STATE_BUSY;
 800177c:	2302      	movs	r3, #2
  __HAL_UART_DISABLE(huart);
 800177e:	6822      	ldr	r2, [r4, #0]
  huart->State = HAL_UART_STATE_BUSY;
 8001780:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001784:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8001786:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8001788:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800178c:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800178e:	f7ff fec7 	bl	8001520 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001792:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001794:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001796:	691a      	ldr	r2, [r3, #16]
 8001798:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800179c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800179e:	695a      	ldr	r2, [r3, #20]
 80017a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80017a4:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80017a6:	68da      	ldr	r2, [r3, #12]
 80017a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80017ac:	60da      	str	r2, [r3, #12]
  huart->State= HAL_UART_STATE_READY;
 80017ae:	2301      	movs	r3, #1
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80017b0:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->State= HAL_UART_STATE_READY;
 80017b2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 80017b6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80017b8:	2001      	movs	r0, #1
}
 80017ba:	bd10      	pop	{r4, pc}

080017bc <HAL_UART_TxCpltCallback>:
 80017bc:	4770      	bx	lr

080017be <HAL_UART_RxCpltCallback>:
 80017be:	4770      	bx	lr

080017c0 <HAL_UART_ErrorCallback>:
{
 80017c0:	4770      	bx	lr

080017c2 <HAL_UART_IRQHandler>:
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_PE);
 80017c2:	6802      	ldr	r2, [r0, #0]
{
 80017c4:	b513      	push	{r0, r1, r4, lr}
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_PE);
 80017c6:	6811      	ldr	r1, [r2, #0]
{
 80017c8:	4604      	mov	r4, r0
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 80017ca:	07c9      	lsls	r1, r1, #31
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_PE);  
 80017cc:	68d3      	ldr	r3, [r2, #12]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 80017ce:	d505      	bpl.n	80017dc <HAL_UART_IRQHandler+0x1a>
 80017d0:	05db      	lsls	r3, r3, #23
    huart->ErrorCode |= HAL_UART_ERROR_PE;
 80017d2:	bf42      	ittt	mi
 80017d4:	6bc3      	ldrmi	r3, [r0, #60]	; 0x3c
 80017d6:	f043 0301 	orrmi.w	r3, r3, #1
 80017da:	63c3      	strmi	r3, [r0, #60]	; 0x3c
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_FE);
 80017dc:	6811      	ldr	r1, [r2, #0]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR);
 80017de:	6953      	ldr	r3, [r2, #20]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 80017e0:	0788      	lsls	r0, r1, #30
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_ERR);
 80017e2:	f003 0301 	and.w	r3, r3, #1
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 80017e6:	d504      	bpl.n	80017f2 <HAL_UART_IRQHandler+0x30>
 80017e8:	b11b      	cbz	r3, 80017f2 <HAL_UART_IRQHandler+0x30>
    huart->ErrorCode |= HAL_UART_ERROR_FE;
 80017ea:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80017ec:	f041 0104 	orr.w	r1, r1, #4
 80017f0:	63e1      	str	r1, [r4, #60]	; 0x3c
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_NE);
 80017f2:	6811      	ldr	r1, [r2, #0]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 80017f4:	0749      	lsls	r1, r1, #29
 80017f6:	d504      	bpl.n	8001802 <HAL_UART_IRQHandler+0x40>
 80017f8:	b11b      	cbz	r3, 8001802 <HAL_UART_IRQHandler+0x40>
    huart->ErrorCode |= HAL_UART_ERROR_NE;
 80017fa:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80017fc:	f041 0102 	orr.w	r1, r1, #2
 8001800:	63e1      	str	r1, [r4, #60]	; 0x3c
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_ORE);
 8001802:	6811      	ldr	r1, [r2, #0]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8001804:	0708      	lsls	r0, r1, #28
 8001806:	d504      	bpl.n	8001812 <HAL_UART_IRQHandler+0x50>
 8001808:	b11b      	cbz	r3, 8001812 <HAL_UART_IRQHandler+0x50>
    huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800180a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800180c:	f043 0308 	orr.w	r3, r3, #8
 8001810:	63e3      	str	r3, [r4, #60]	; 0x3c
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE);
 8001812:	6811      	ldr	r1, [r2, #0]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_RXNE);
 8001814:	68d3      	ldr	r3, [r2, #12]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8001816:	0689      	lsls	r1, r1, #26
 8001818:	d533      	bpl.n	8001882 <HAL_UART_IRQHandler+0xc0>
 800181a:	0698      	lsls	r0, r3, #26
 800181c:	d531      	bpl.n	8001882 <HAL_UART_IRQHandler+0xc0>
  tmp_state = huart->State; 
 800181e:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
  if((tmp_state == HAL_UART_STATE_BUSY_RX) || (tmp_state == HAL_UART_STATE_BUSY_TX_RX))
 8001822:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8001826:	2b22      	cmp	r3, #34	; 0x22
 8001828:	d12b      	bne.n	8001882 <HAL_UART_IRQHandler+0xc0>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800182a:	68a3      	ldr	r3, [r4, #8]
 800182c:	6921      	ldr	r1, [r4, #16]
 800182e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001832:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001834:	d176      	bne.n	8001924 <HAL_UART_IRQHandler+0x162>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001836:	6852      	ldr	r2, [r2, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001838:	2900      	cmp	r1, #0
 800183a:	d16f      	bne.n	800191c <HAL_UART_IRQHandler+0x15a>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800183c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001840:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1;
 8001844:	62a3      	str	r3, [r4, #40]	; 0x28
    if(--huart->RxXferCount == 0)
 8001846:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8001848:	3b01      	subs	r3, #1
 800184a:	b29b      	uxth	r3, r3
 800184c:	85e3      	strh	r3, [r4, #46]	; 0x2e
 800184e:	b9c3      	cbnz	r3, 8001882 <HAL_UART_IRQHandler+0xc0>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001850:	6823      	ldr	r3, [r4, #0]
      HAL_UART_RxCpltCallback(huart);
 8001852:	4620      	mov	r0, r4
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001854:	68da      	ldr	r2, [r3, #12]
 8001856:	f022 0220 	bic.w	r2, r2, #32
 800185a:	60da      	str	r2, [r3, #12]
      if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 800185c:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8001860:	2a32      	cmp	r2, #50	; 0x32
        __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001862:	bf17      	itett	ne
 8001864:	68da      	ldrne	r2, [r3, #12]
        huart->State = HAL_UART_STATE_BUSY_TX;
 8001866:	2312      	moveq	r3, #18
        __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001868:	f422 7280 	bicne.w	r2, r2, #256	; 0x100
 800186c:	60da      	strne	r2, [r3, #12]
        __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800186e:	bf1f      	itttt	ne
 8001870:	695a      	ldrne	r2, [r3, #20]
 8001872:	f022 0201 	bicne.w	r2, r2, #1
 8001876:	615a      	strne	r2, [r3, #20]
        huart->State = HAL_UART_STATE_READY;
 8001878:	2301      	movne	r3, #1
 800187a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      HAL_UART_RxCpltCallback(huart);
 800187e:	f7ff ff9e 	bl	80017be <HAL_UART_RxCpltCallback>
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_TXE);
 8001882:	6823      	ldr	r3, [r4, #0]
 8001884:	6819      	ldr	r1, [r3, #0]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_TXE);
 8001886:	68da      	ldr	r2, [r3, #12]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 8001888:	0609      	lsls	r1, r1, #24
 800188a:	d522      	bpl.n	80018d2 <HAL_UART_IRQHandler+0x110>
 800188c:	0610      	lsls	r0, r2, #24
 800188e:	d520      	bpl.n	80018d2 <HAL_UART_IRQHandler+0x110>
  tmp_state = huart->State;
 8001890:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
  if((tmp_state == HAL_UART_STATE_BUSY_TX) || (tmp_state == HAL_UART_STATE_BUSY_TX_RX))
 8001894:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8001898:	2a12      	cmp	r2, #18
 800189a:	d11a      	bne.n	80018d2 <HAL_UART_IRQHandler+0x110>
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800189c:	68a2      	ldr	r2, [r4, #8]
 800189e:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80018a2:	6a22      	ldr	r2, [r4, #32]
 80018a4:	d14c      	bne.n	8001940 <HAL_UART_IRQHandler+0x17e>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80018a6:	8811      	ldrh	r1, [r2, #0]
 80018a8:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80018ac:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 80018ae:	6921      	ldr	r1, [r4, #16]
 80018b0:	2900      	cmp	r1, #0
 80018b2:	d143      	bne.n	800193c <HAL_UART_IRQHandler+0x17a>
        huart->pTxBuffPtr += 2;
 80018b4:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1;
 80018b6:	6222      	str	r2, [r4, #32]
    if(--huart->TxXferCount == 0)
 80018b8:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80018ba:	3a01      	subs	r2, #1
 80018bc:	b292      	uxth	r2, r2
 80018be:	84e2      	strh	r2, [r4, #38]	; 0x26
 80018c0:	b93a      	cbnz	r2, 80018d2 <HAL_UART_IRQHandler+0x110>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80018c2:	68da      	ldr	r2, [r3, #12]
 80018c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80018c8:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80018ca:	68da      	ldr	r2, [r3, #12]
 80018cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80018d0:	60da      	str	r2, [r3, #12]
  tmp_flag = __HAL_UART_GET_FLAG(huart, UART_FLAG_TC);
 80018d2:	6819      	ldr	r1, [r3, #0]
  tmp_it_source = __HAL_UART_GET_IT_SOURCE(huart, UART_IT_TC);
 80018d4:	68da      	ldr	r2, [r3, #12]
  if((tmp_flag != RESET) && (tmp_it_source != RESET))
 80018d6:	0649      	lsls	r1, r1, #25
 80018d8:	d510      	bpl.n	80018fc <HAL_UART_IRQHandler+0x13a>
 80018da:	0652      	lsls	r2, r2, #25
 80018dc:	d50e      	bpl.n	80018fc <HAL_UART_IRQHandler+0x13a>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80018de:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 80018e0:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80018e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80018e6:	60da      	str	r2, [r3, #12]
  if(huart->State == HAL_UART_STATE_BUSY_TX_RX) 
 80018e8:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 80018ec:	2b32      	cmp	r3, #50	; 0x32
    huart->State = HAL_UART_STATE_BUSY_RX;
 80018ee:	bf0c      	ite	eq
 80018f0:	2322      	moveq	r3, #34	; 0x22
    huart->State = HAL_UART_STATE_READY;
 80018f2:	2301      	movne	r3, #1
 80018f4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 80018f8:	f7ff ff60 	bl	80017bc <HAL_UART_TxCpltCallback>
  if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80018fc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80018fe:	b15b      	cbz	r3, 8001918 <HAL_UART_IRQHandler+0x156>
    __HAL_UART_CLEAR_PEFLAG(huart);
 8001900:	6823      	ldr	r3, [r4, #0]
    HAL_UART_ErrorCallback(huart);
 8001902:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_PEFLAG(huart);
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	9201      	str	r2, [sp, #4]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	9301      	str	r3, [sp, #4]
 800190c:	9b01      	ldr	r3, [sp, #4]
    huart->State = HAL_UART_STATE_READY;
 800190e:	2301      	movs	r3, #1
 8001910:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    HAL_UART_ErrorCallback(huart);
 8001914:	f7ff ff54 	bl	80017c0 <HAL_UART_ErrorCallback>
}
 8001918:	b002      	add	sp, #8
 800191a:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800191c:	b2d2      	uxtb	r2, r2
 800191e:	f823 2b01 	strh.w	r2, [r3], #1
 8001922:	e78f      	b.n	8001844 <HAL_UART_IRQHandler+0x82>
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001924:	b921      	cbnz	r1, 8001930 <HAL_UART_IRQHandler+0x16e>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001926:	1c59      	adds	r1, r3, #1
 8001928:	6852      	ldr	r2, [r2, #4]
 800192a:	62a1      	str	r1, [r4, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800192c:	701a      	strb	r2, [r3, #0]
 800192e:	e78a      	b.n	8001846 <HAL_UART_IRQHandler+0x84>
 8001930:	6852      	ldr	r2, [r2, #4]
 8001932:	1c59      	adds	r1, r3, #1
 8001934:	62a1      	str	r1, [r4, #40]	; 0x28
 8001936:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800193a:	e7f7      	b.n	800192c <HAL_UART_IRQHandler+0x16a>
        huart->pTxBuffPtr += 1;
 800193c:	3201      	adds	r2, #1
 800193e:	e7ba      	b.n	80018b6 <HAL_UART_IRQHandler+0xf4>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001940:	1c51      	adds	r1, r2, #1
 8001942:	6221      	str	r1, [r4, #32]
 8001944:	7812      	ldrb	r2, [r2, #0]
 8001946:	605a      	str	r2, [r3, #4]
 8001948:	e7b6      	b.n	80018b8 <HAL_UART_IRQHandler+0xf6>
	...

0800194c <SystemClock_Config>:
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800194c:	4a24      	ldr	r2, [pc, #144]	; (80019e0 <SystemClock_Config+0x94>)
{
 800194e:	b530      	push	{r4, r5, lr}
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001950:	6813      	ldr	r3, [r2, #0]
{
 8001952:	b095      	sub	sp, #84	; 0x54
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001954:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8001958:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800195c:	6013      	str	r3, [r2, #0]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 800195e:	2307      	movs	r3, #7
 8001960:	9307      	str	r3, [sp, #28]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8001962:	2310      	movs	r3, #16
 8001964:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001966:	2302      	movs	r3, #2
 8001968:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 800196a:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800196e:	2401      	movs	r4, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001970:	f44f 3580 	mov.w	r5, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8001974:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 8001976:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800197a:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800197c:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800197e:	9409      	str	r4, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001980:	940a      	str	r4, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001982:	9511      	str	r5, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 8001984:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001986:	f7ff f81d 	bl	80009c4 <HAL_RCC_OscConfig>
 800198a:	b100      	cbz	r0, 800198e <SystemClock_Config+0x42>
 800198c:	e7fe      	b.n	800198c <SystemClock_Config+0x40>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800198e:	230f      	movs	r3, #15
 8001990:	9302      	str	r3, [sp, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001992:	2303      	movs	r3, #3
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001994:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001996:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001998:	9006      	str	r0, [sp, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800199a:	4621      	mov	r1, r4
 800199c:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800199e:	9303      	str	r3, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80019a0:	f7ff fbaa 	bl	80010f8 <HAL_RCC_ClockConfig>
 80019a4:	b100      	cbz	r0, 80019a8 <SystemClock_Config+0x5c>
 80019a6:	e7fe      	b.n	80019a6 <SystemClock_Config+0x5a>
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019a8:	4668      	mov	r0, sp
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80019aa:	e88d 0030 	stmia.w	sp, {r4, r5}
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019ae:	f7ff fcb7 	bl	8001320 <HAL_RCCEx_PeriphCLKConfig>
 80019b2:	4604      	mov	r4, r0
 80019b4:	b100      	cbz	r0, 80019b8 <SystemClock_Config+0x6c>
 80019b6:	e7fe      	b.n	80019b6 <SystemClock_Config+0x6a>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80019b8:	f7ff fc7c 	bl	80012b4 <HAL_RCC_GetHCLKFreq>
 80019bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019c0:	fbb0 f0f3 	udiv	r0, r0, r3
 80019c4:	f7fe fec8 	bl	8000758 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80019c8:	2004      	movs	r0, #4
 80019ca:	f7fe fedb 	bl	8000784 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80019ce:	4622      	mov	r2, r4
 80019d0:	4621      	mov	r1, r4
 80019d2:	f04f 30ff 	mov.w	r0, #4294967295
 80019d6:	f7fe fe7f 	bl	80006d8 <HAL_NVIC_SetPriority>
}
 80019da:	b015      	add	sp, #84	; 0x54
 80019dc:	bd30      	pop	{r4, r5, pc}
 80019de:	bf00      	nop
 80019e0:	40007000 	.word	0x40007000

080019e4 <main>:
{
 80019e4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  HAL_Init();
 80019e6:	f7fe fbdd 	bl	80001a4 <HAL_Init>
  SystemClock_Config();
 80019ea:	f7ff ffaf 	bl	800194c <SystemClock_Config>
*/
static void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019ee:	4b47      	ldr	r3, [pc, #284]	; (8001b0c <main+0x128>)
  hrtc.Instance = RTC;
 80019f0:	4847      	ldr	r0, [pc, #284]	; (8001b10 <main+0x12c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019f2:	69da      	ldr	r2, [r3, #28]
 80019f4:	f042 0204 	orr.w	r2, r2, #4
 80019f8:	61da      	str	r2, [r3, #28]
 80019fa:	69da      	ldr	r2, [r3, #28]
 80019fc:	f002 0204 	and.w	r2, r2, #4
 8001a00:	9200      	str	r2, [sp, #0]
 8001a02:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a04:	69da      	ldr	r2, [r3, #28]
 8001a06:	f042 0220 	orr.w	r2, r2, #32
 8001a0a:	61da      	str	r2, [r3, #28]
 8001a0c:	69da      	ldr	r2, [r3, #28]
 8001a0e:	f002 0220 	and.w	r2, r2, #32
 8001a12:	9201      	str	r2, [sp, #4]
 8001a14:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a16:	69da      	ldr	r2, [r3, #28]
 8001a18:	f042 0201 	orr.w	r2, r2, #1
 8001a1c:	61da      	str	r2, [r3, #28]
  hrtc.Init.AsynchPrediv = 127;
 8001a1e:	227f      	movs	r2, #127	; 0x7f
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a20:	69db      	ldr	r3, [r3, #28]
  hrtc.Init.AsynchPrediv = 127;
 8001a22:	6082      	str	r2, [r0, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a24:	f003 0301 	and.w	r3, r3, #1
 8001a28:	9302      	str	r3, [sp, #8]
 8001a2a:	9b02      	ldr	r3, [sp, #8]
  hrtc.Instance = RTC;
 8001a2c:	4b39      	ldr	r3, [pc, #228]	; (8001b14 <main+0x130>)
  hrtc.Init.SynchPrediv = 255;
 8001a2e:	22ff      	movs	r2, #255	; 0xff
  hrtc.Instance = RTC;
 8001a30:	6003      	str	r3, [r0, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001a32:	2300      	movs	r3, #0
  hrtc.Init.SynchPrediv = 255;
 8001a34:	60c2      	str	r2, [r0, #12]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001a36:	6043      	str	r3, [r0, #4]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001a38:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001a3a:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001a3c:	6183      	str	r3, [r0, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001a3e:	f7ff fd2d 	bl	800149c <HAL_RTC_Init>
 8001a42:	b100      	cbz	r0, 8001a46 <main+0x62>
 8001a44:	e7fe      	b.n	8001a44 <main+0x60>
  huart2.Init.BaudRate = 115200;
 8001a46:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
  huart2.Instance = USART2;
 8001a4a:	4b33      	ldr	r3, [pc, #204]	; (8001b18 <main+0x134>)
  huart2.Init.BaudRate = 115200;
 8001a4c:	4933      	ldr	r1, [pc, #204]	; (8001b1c <main+0x138>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a4e:	6098      	str	r0, [r3, #8]
  huart2.Init.BaudRate = 115200;
 8001a50:	e883 0006 	stmia.w	r3, {r1, r2}
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a54:	220c      	movs	r2, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a56:	60d8      	str	r0, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a58:	6118      	str	r0, [r3, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a5a:	6198      	str	r0, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a5c:	61d8      	str	r0, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a5e:	4618      	mov	r0, r3
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a60:	615a      	str	r2, [r3, #20]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a62:	f7ff fe7f 	bl	8001764 <HAL_UART_Init>
 8001a66:	b100      	cbz	r0, 8001a6a <main+0x86>
 8001a68:	e7fe      	b.n	8001a68 <main+0x84>
  hadc.Instance = ADC1;
 8001a6a:	4c2d      	ldr	r4, [pc, #180]	; (8001b20 <main+0x13c>)
 8001a6c:	4b2d      	ldr	r3, [pc, #180]	; (8001b24 <main+0x140>)
  hadc.Init.ContinuousConvMode = ENABLE;
 8001a6e:	2501      	movs	r5, #1
  hadc.Instance = ADC1;
 8001a70:	6023      	str	r3, [r4, #0]
  hadc.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001a72:	f44f 7380 	mov.w	r3, #256	; 0x100
  hadc.Init.NbrOfConversion = 3;
 8001a76:	2603      	movs	r6, #3
  hadc.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001a78:	6123      	str	r3, [r4, #16]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a7a:	2310      	movs	r3, #16
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001a7c:	6060      	str	r0, [r4, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001a7e:	60a0      	str	r0, [r4, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a80:	60e0      	str	r0, [r4, #12]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001a82:	6160      	str	r0, [r4, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8001a84:	61a0      	str	r0, [r4, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 8001a86:	61e0      	str	r0, [r4, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8001a88:	6220      	str	r0, [r4, #32]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001a8a:	62e0      	str	r0, [r4, #44]	; 0x2c
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a8c:	63a0      	str	r0, [r4, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001a8e:	63e0      	str	r0, [r4, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001a90:	4620      	mov	r0, r4
  hadc.Init.ContinuousConvMode = ENABLE;
 8001a92:	6265      	str	r5, [r4, #36]	; 0x24
  hadc.Init.NbrOfConversion = 3;
 8001a94:	62a6      	str	r6, [r4, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a96:	6363      	str	r3, [r4, #52]	; 0x34
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001a98:	f7fe fb9e 	bl	80001d8 <HAL_ADC_Init>
 8001a9c:	b100      	cbz	r0, 8001aa0 <main+0xbc>
 8001a9e:	e7fe      	b.n	8001a9e <main+0xba>
  sConfig.SamplingTime = ADC_SAMPLETIME_384CYCLES;
 8001aa0:	2307      	movs	r3, #7
  sConfig.Channel = ADC_CHANNEL_0;
 8001aa2:	9003      	str	r0, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001aa4:	a903      	add	r1, sp, #12
 8001aa6:	4620      	mov	r0, r4
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001aa8:	9504      	str	r5, [sp, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_384CYCLES;
 8001aaa:	9305      	str	r3, [sp, #20]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001aac:	f7fe fca8 	bl	8000400 <HAL_ADC_ConfigChannel>
 8001ab0:	b100      	cbz	r0, 8001ab4 <main+0xd0>
 8001ab2:	e7fe      	b.n	8001ab2 <main+0xce>
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001ab4:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001ab6:	a903      	add	r1, sp, #12
 8001ab8:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_1;
 8001aba:	9503      	str	r5, [sp, #12]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001abc:	9304      	str	r3, [sp, #16]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001abe:	f7fe fc9f 	bl	8000400 <HAL_ADC_ConfigChannel>
 8001ac2:	b100      	cbz	r0, 8001ac6 <main+0xe2>
 8001ac4:	e7fe      	b.n	8001ac4 <main+0xe0>
  sConfig.Channel = ADC_CHANNEL_4;
 8001ac6:	2304      	movs	r3, #4
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001ac8:	a903      	add	r1, sp, #12
 8001aca:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_4;
 8001acc:	9303      	str	r3, [sp, #12]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001ace:	9604      	str	r6, [sp, #16]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001ad0:	f7fe fc96 	bl	8000400 <HAL_ADC_ConfigChannel>
 8001ad4:	b100      	cbz	r0, 8001ad8 <main+0xf4>
 8001ad6:	e7fe      	b.n	8001ad6 <main+0xf2>
	  value1 = HAL_ADC_GetValue(&hadc);
 8001ad8:	4d13      	ldr	r5, [pc, #76]	; (8001b28 <main+0x144>)
	  HAL_ADC_Start(&hadc);
 8001ada:	4620      	mov	r0, r4
 8001adc:	f7fe fd76 	bl	80005cc <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc,10);
 8001ae0:	210a      	movs	r1, #10
 8001ae2:	4620      	mov	r0, r4
 8001ae4:	f7fe fc36 	bl	8000354 <HAL_ADC_PollForConversion>
	  value1 = HAL_ADC_GetValue(&hadc);
 8001ae8:	4620      	mov	r0, r4
 8001aea:	f7fe fc85 	bl	80003f8 <HAL_ADC_GetValue>
	  HAL_ADC_PollForConversion(&hadc,10);
 8001aee:	210a      	movs	r1, #10
	  value1 = HAL_ADC_GetValue(&hadc);
 8001af0:	6028      	str	r0, [r5, #0]
	  HAL_ADC_PollForConversion(&hadc,10);
 8001af2:	4620      	mov	r0, r4
 8001af4:	f7fe fc2e 	bl	8000354 <HAL_ADC_PollForConversion>
	  value2 = HAL_ADC_GetValue(&hadc);
 8001af8:	4620      	mov	r0, r4
 8001afa:	f7fe fc7d 	bl	80003f8 <HAL_ADC_GetValue>
 8001afe:	4b0b      	ldr	r3, [pc, #44]	; (8001b2c <main+0x148>)
 8001b00:	6018      	str	r0, [r3, #0]
	  HAL_ADC_Stop(&hadc);
 8001b02:	4620      	mov	r0, r4
 8001b04:	f7fe fdbb 	bl	800067e <HAL_ADC_Stop>
 8001b08:	e7e7      	b.n	8001ada <main+0xf6>
 8001b0a:	bf00      	nop
 8001b0c:	40023800 	.word	0x40023800
 8001b10:	20000024 	.word	0x20000024
 8001b14:	40002800 	.word	0x40002800
 8001b18:	20000048 	.word	0x20000048
 8001b1c:	40004400 	.word	0x40004400
 8001b20:	20000088 	.word	0x20000088
 8001b24:	40012400 	.word	0x40012400
 8001b28:	200000dc 	.word	0x200000dc
 8001b2c:	20000044 	.word	0x20000044

08001b30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8001b32:	4b2a      	ldr	r3, [pc, #168]	; (8001bdc <HAL_MspInit+0xac>)
  __HAL_RCC_SYSCFG_CLK_ENABLE();
  __HAL_RCC_PWR_CLK_ENABLE();

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b34:	2003      	movs	r0, #3
  __HAL_RCC_COMP_CLK_ENABLE();
 8001b36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b38:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001b3c:	625a      	str	r2, [r3, #36]	; 0x24
 8001b3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b40:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001b44:	9201      	str	r2, [sp, #4]
 8001b46:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b48:	6a1a      	ldr	r2, [r3, #32]
 8001b4a:	f042 0201 	orr.w	r2, r2, #1
 8001b4e:	621a      	str	r2, [r3, #32]
 8001b50:	6a1a      	ldr	r2, [r3, #32]
 8001b52:	f002 0201 	and.w	r2, r2, #1
 8001b56:	9202      	str	r2, [sp, #8]
 8001b58:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b5c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001b60:	625a      	str	r2, [r3, #36]	; 0x24
 8001b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b68:	9303      	str	r3, [sp, #12]
 8001b6a:	9b03      	ldr	r3, [sp, #12]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b6c:	f7fe fda2 	bl	80006b4 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8001b70:	2200      	movs	r2, #0
 8001b72:	f06f 000b 	mvn.w	r0, #11
 8001b76:	4611      	mov	r1, r2
 8001b78:	f7fe fdae 	bl	80006d8 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	f06f 000a 	mvn.w	r0, #10
 8001b82:	4611      	mov	r1, r2
 8001b84:	f7fe fda8 	bl	80006d8 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8001b88:	2200      	movs	r2, #0
 8001b8a:	f06f 0009 	mvn.w	r0, #9
 8001b8e:	4611      	mov	r1, r2
 8001b90:	f7fe fda2 	bl	80006d8 <HAL_NVIC_SetPriority>
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8001b94:	2200      	movs	r2, #0
 8001b96:	f06f 0004 	mvn.w	r0, #4
 8001b9a:	4611      	mov	r1, r2
 8001b9c:	f7fe fd9c 	bl	80006d8 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	f06f 0003 	mvn.w	r0, #3
 8001ba6:	4611      	mov	r1, r2
 8001ba8:	f7fe fd96 	bl	80006d8 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001bac:	2200      	movs	r2, #0
 8001bae:	f06f 0001 	mvn.w	r0, #1
 8001bb2:	4611      	mov	r1, r2
 8001bb4:	f7fe fd90 	bl	80006d8 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001bb8:	2200      	movs	r2, #0
 8001bba:	f04f 30ff 	mov.w	r0, #4294967295
 8001bbe:	4611      	mov	r1, r2
 8001bc0:	f7fe fd8a 	bl	80006d8 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	2005      	movs	r0, #5
 8001bc8:	4611      	mov	r1, r2
 8001bca:	f7fe fd85 	bl	80006d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001bce:	2005      	movs	r0, #5
 8001bd0:	f7fe fdb6 	bl	8000740 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bd4:	b005      	add	sp, #20
 8001bd6:	f85d fb04 	ldr.w	pc, [sp], #4
 8001bda:	bf00      	nop
 8001bdc:	40023800 	.word	0x40023800

08001be0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001be0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 8001be2:	6802      	ldr	r2, [r0, #0]
 8001be4:	4b0d      	ldr	r3, [pc, #52]	; (8001c1c <HAL_ADC_MspInit+0x3c>)
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d114      	bne.n	8001c14 <HAL_ADC_MspInit+0x34>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001bea:	f503 338a 	add.w	r3, r3, #70656	; 0x11400
 8001bee:	6a1a      	ldr	r2, [r3, #32]
    PA4     ------> ADC_IN4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bf0:	a901      	add	r1, sp, #4
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001bf2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bf6:	621a      	str	r2, [r3, #32]
 8001bf8:	6a1b      	ldr	r3, [r3, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bfa:	4809      	ldr	r0, [pc, #36]	; (8001c20 <HAL_ADC_MspInit+0x40>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001bfc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c00:	9300      	str	r3, [sp, #0]
 8001c02:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 8001c04:	2313      	movs	r3, #19
 8001c06:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c10:	f7fe fdca 	bl	80007a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001c14:	b007      	add	sp, #28
 8001c16:	f85d fb04 	ldr.w	pc, [sp], #4
 8001c1a:	bf00      	nop
 8001c1c:	40012400 	.word	0x40012400
 8001c20:	40020000 	.word	0x40020000

08001c24 <HAL_RTC_MspInit>:
}

void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{

  if(hrtc->Instance==RTC)
 8001c24:	6802      	ldr	r2, [r0, #0]
 8001c26:	4b07      	ldr	r3, [pc, #28]	; (8001c44 <HAL_RTC_MspInit+0x20>)
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d10a      	bne.n	8001c42 <HAL_RTC_MspInit+0x1e>
 8001c2c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001c30:	fa92 f2a2 	rbit	r2, r2
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001c34:	fab2 f282 	clz	r2, r2
 8001c38:	4b03      	ldr	r3, [pc, #12]	; (8001c48 <HAL_RTC_MspInit+0x24>)
 8001c3a:	4413      	add	r3, r2
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	601a      	str	r2, [r3, #0]
 8001c42:	4770      	bx	lr
 8001c44:	40002800 	.word	0x40002800
 8001c48:	1091c1a0 	.word	0x1091c1a0

08001c4c <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c4c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 8001c4e:	6802      	ldr	r2, [r0, #0]
 8001c50:	4b13      	ldr	r3, [pc, #76]	; (8001ca0 <HAL_UART_MspInit+0x54>)
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d120      	bne.n	8001c98 <HAL_UART_MspInit+0x4c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c56:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8001c5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c5c:	a901      	add	r1, sp, #4
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c5e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001c62:	625a      	str	r2, [r3, #36]	; 0x24
 8001c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c66:	480f      	ldr	r0, [pc, #60]	; (8001ca4 <HAL_UART_MspInit+0x58>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c6c:	9300      	str	r3, [sp, #0]
 8001c6e:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001c70:	230c      	movs	r3, #12
 8001c72:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c74:	2302      	movs	r3, #2
 8001c76:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c80:	2307      	movs	r3, #7
 8001c82:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c84:	f7fe fd90 	bl	80007a8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001c88:	2200      	movs	r2, #0
 8001c8a:	2026      	movs	r0, #38	; 0x26
 8001c8c:	4611      	mov	r1, r2
 8001c8e:	f7fe fd23 	bl	80006d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001c92:	2026      	movs	r0, #38	; 0x26
 8001c94:	f7fe fd54 	bl	8000740 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c98:	b007      	add	sp, #28
 8001c9a:	f85d fb04 	ldr.w	pc, [sp], #4
 8001c9e:	bf00      	nop
 8001ca0:	40004400 	.word	0x40004400
 8001ca4:	40020000 	.word	0x40020000

08001ca8 <NMI_Handler>:
 8001ca8:	4770      	bx	lr

08001caa <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8001caa:	e7fe      	b.n	8001caa <HardFault_Handler>

08001cac <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8001cac:	e7fe      	b.n	8001cac <MemManage_Handler>

08001cae <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8001cae:	e7fe      	b.n	8001cae <BusFault_Handler>

08001cb0 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8001cb0:	e7fe      	b.n	8001cb0 <UsageFault_Handler>

08001cb2 <SVC_Handler>:
 8001cb2:	4770      	bx	lr

08001cb4 <DebugMon_Handler>:
 8001cb4:	4770      	bx	lr

08001cb6 <PendSV_Handler>:
 8001cb6:	4770      	bx	lr

08001cb8 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001cb8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cba:	f7fe fa7f 	bl	80001bc <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cbe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8001cc2:	f7fe bd6c 	b.w	800079e <HAL_SYSTICK_IRQHandler>

08001cc6 <RCC_IRQHandler>:

/**
* @brief This function handles RCC global interrupt.
*/
void RCC_IRQHandler(void)
{
 8001cc6:	4770      	bx	lr

08001cc8 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001cc8:	4801      	ldr	r0, [pc, #4]	; (8001cd0 <USART2_IRQHandler+0x8>)
 8001cca:	f7ff bd7a 	b.w	80017c2 <HAL_UART_IRQHandler>
 8001cce:	bf00      	nop
 8001cd0:	20000048 	.word	0x20000048

08001cd4 <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 8001cd4:	4b0e      	ldr	r3, [pc, #56]	; (8001d10 <SystemInit+0x3c>)
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001cdc:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 8001cde:	6899      	ldr	r1, [r3, #8]
 8001ce0:	4a0c      	ldr	r2, [pc, #48]	; (8001d14 <SystemInit+0x40>)
 8001ce2:	400a      	ands	r2, r1
 8001ce4:	609a      	str	r2, [r3, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	f022 5288 	bic.w	r2, r2, #285212672	; 0x11000000
 8001cec:	f022 1201 	bic.w	r2, r2, #65537	; 0x10001
 8001cf0:	601a      	str	r2, [r3, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001cf8:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 8001cfa:	689a      	ldr	r2, [r3, #8]
 8001cfc:	f422 027d 	bic.w	r2, r2, #16580608	; 0xfd0000
 8001d00:	609a      	str	r2, [r3, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001d02:	2200      	movs	r2, #0
 8001d04:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001d06:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d0a:	4b03      	ldr	r3, [pc, #12]	; (8001d18 <SystemInit+0x44>)
 8001d0c:	609a      	str	r2, [r3, #8]
 8001d0e:	4770      	bx	lr
 8001d10:	40023800 	.word	0x40023800
 8001d14:	88ffc00c 	.word	0x88ffc00c
 8001d18:	e000ed00 	.word	0xe000ed00

08001d1c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001d1c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001d1e:	e003      	b.n	8001d28 <LoopCopyDataInit>

08001d20 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001d20:	4b0b      	ldr	r3, [pc, #44]	; (8001d50 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001d22:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001d24:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001d26:	3104      	adds	r1, #4

08001d28 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001d28:	480a      	ldr	r0, [pc, #40]	; (8001d54 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001d2a:	4b0b      	ldr	r3, [pc, #44]	; (8001d58 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001d2c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001d2e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001d30:	d3f6      	bcc.n	8001d20 <CopyDataInit>
  ldr r2, =_sbss
 8001d32:	4a0a      	ldr	r2, [pc, #40]	; (8001d5c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001d34:	e002      	b.n	8001d3c <LoopFillZerobss>

08001d36 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001d36:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001d38:	f842 3b04 	str.w	r3, [r2], #4

08001d3c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001d3c:	4b08      	ldr	r3, [pc, #32]	; (8001d60 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001d3e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001d40:	d3f9      	bcc.n	8001d36 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001d42:	f7ff ffc7 	bl	8001cd4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d46:	f000 f80f 	bl	8001d68 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d4a:	f7ff fe4b 	bl	80019e4 <main>
  bx lr
 8001d4e:	4770      	bx	lr
  ldr r3, =_sidata
 8001d50:	08001df4 	.word	0x08001df4
  ldr r0, =_sdata
 8001d54:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001d58:	20000004 	.word	0x20000004
  ldr r2, =_sbss
 8001d5c:	20000004 	.word	0x20000004
  ldr r3, = _ebss
 8001d60:	200000e0 	.word	0x200000e0

08001d64 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d64:	e7fe      	b.n	8001d64 <ADC1_IRQHandler>
	...

08001d68 <__libc_init_array>:
 8001d68:	b570      	push	{r4, r5, r6, lr}
 8001d6a:	2500      	movs	r5, #0
 8001d6c:	4e0c      	ldr	r6, [pc, #48]	; (8001da0 <__libc_init_array+0x38>)
 8001d6e:	4c0d      	ldr	r4, [pc, #52]	; (8001da4 <__libc_init_array+0x3c>)
 8001d70:	1ba4      	subs	r4, r4, r6
 8001d72:	10a4      	asrs	r4, r4, #2
 8001d74:	42a5      	cmp	r5, r4
 8001d76:	d109      	bne.n	8001d8c <__libc_init_array+0x24>
 8001d78:	f000 f81a 	bl	8001db0 <_init>
 8001d7c:	2500      	movs	r5, #0
 8001d7e:	4e0a      	ldr	r6, [pc, #40]	; (8001da8 <__libc_init_array+0x40>)
 8001d80:	4c0a      	ldr	r4, [pc, #40]	; (8001dac <__libc_init_array+0x44>)
 8001d82:	1ba4      	subs	r4, r4, r6
 8001d84:	10a4      	asrs	r4, r4, #2
 8001d86:	42a5      	cmp	r5, r4
 8001d88:	d105      	bne.n	8001d96 <__libc_init_array+0x2e>
 8001d8a:	bd70      	pop	{r4, r5, r6, pc}
 8001d8c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001d90:	4798      	blx	r3
 8001d92:	3501      	adds	r5, #1
 8001d94:	e7ee      	b.n	8001d74 <__libc_init_array+0xc>
 8001d96:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001d9a:	4798      	blx	r3
 8001d9c:	3501      	adds	r5, #1
 8001d9e:	e7f2      	b.n	8001d86 <__libc_init_array+0x1e>
 8001da0:	08001dec 	.word	0x08001dec
 8001da4:	08001dec 	.word	0x08001dec
 8001da8:	08001dec 	.word	0x08001dec
 8001dac:	08001df0 	.word	0x08001df0

08001db0 <_init>:
 8001db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001db2:	bf00      	nop
 8001db4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001db6:	bc08      	pop	{r3}
 8001db8:	469e      	mov	lr, r3
 8001dba:	4770      	bx	lr

08001dbc <_fini>:
 8001dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dbe:	bf00      	nop
 8001dc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001dc2:	bc08      	pop	{r3}
 8001dc4:	469e      	mov	lr, r3
 8001dc6:	4770      	bx	lr
